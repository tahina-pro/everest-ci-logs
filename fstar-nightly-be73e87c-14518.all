This is /home/darrenge/everest-ci/ci
Working directory: /home/darrenge/FStar
About to run: make -C src ulong  -k
BUILD_SOURCEBRANCHNAME:
BUILD_DEFINITIONNAME:
make: Entering directory '/home/darrenge/FStar/src'
make utest
make[1]: Entering directory '/home/darrenge/FStar/src'
make all
make[2]: Entering directory '/home/darrenge/FStar/src'
VS/.nuget/NuGet.exe restore VS/FStar.sln
All packages listed in packages.config are already installed.
make -C VS install-packages
make[3]: Entering directory '/home/darrenge/FStar/src/VS'
[ -d packages ] || make update-nuget
.nuget/NuGet.exe restore FStar.sln
All packages listed in packages.config are already installed.
find packages -name '*.exe' -exec chmod +x '{}' ';'
make[3]: Leaving directory '/home/darrenge/FStar/src/VS'
"C:/Program Files (x86)/MSBuild/14.0/bin/amd64/"/MSBuild.exe /verbosity:minimal /p:Configuration=Release VS/FStar.sln
Microsoft (R) Build Engine version 14.0.25420.1
Copyright (C) Microsoft Corporation. All rights reserved.

basic -> C:\cygwin\home\darrenge\FStar\bin\basic.dll
Restoring NuGet packages...
To prevent NuGet from downloading packages during build, open the Visual Studio Options dialog, click on the Package Manager node and uncheck 'Allow NuGet to download missing packages'.
All packages listed in packages.config are already installed.
prettyprint -> C:\cygwin\home\darrenge\FStar\bin\prettyprint.dll
syntax -> C:\cygwin\home\darrenge\FStar\bin\syntax.dll
typechecker -> C:\cygwin\home\darrenge\FStar\bin\typechecker.dll
parser -> C:\cygwin\home\darrenge\FStar\bin\parser.dll
format -> C:\cygwin\home\darrenge\FStar\bin\format.dll
extraction -> C:\cygwin\home\darrenge\FStar\bin\extraction.dll
fsdoc -> C:\cygwin\home\darrenge\FStar\bin\fsdoc.dll
smtencoding -> C:\cygwin\home\darrenge\FStar\bin\smtencoding.dll
tosyntax -> C:\cygwin\home\darrenge\FStar\bin\tosyntax.dll
fstar -> C:\cygwin\home\darrenge\FStar\bin\fstar.exe
tests -> C:\cygwin\home\darrenge\FStar\bin\tests.exe
chmod a+x ../bin/tests.exe
chmod a+x ../bin/fstar.exe
make[2]: Leaving directory '/home/darrenge/FStar/src'
make fsharp-regressions #normalizer failures on linux so only run on windows
make[2]: Entering directory '/home/darrenge/FStar/src'
../bin/tests.exe
Initializing ...
Testing the normalizer
0: ...
1: ...
2: ...
3: ...
4: ...
5: ...
6: ...
7: ...
8: ...
9: ...
10: ...
11: ...
12: ...
13: ...
14: ...
15: ...
16: ...
17: ...
18: ...
19: ...
20: ...
21: ...
22: ...
23: ...
Normalizer ok
Testing the unifier
0 ...
Unify x
and x

1 ...
Unify x
and y

2 ...
Unify x
and ((fun x -> x@0) x)

3 ...
Unify (fun x -> x@0)
and (fun x -> x@0)

4 ...
Unify (fun x -> x@0)
and (fun y -> y@0)

5 ...
Unify (fun x y -> x@1)
and (fun a b -> a@1)

6 ...
Unify (fun x y z -> y@1)
and (fun a b c -> b@1)

7 ...
Unify (fun x y -> y@0)
and (fun x y -> x@1)

make[2]: *** ocaml-output: No such file or directory.  Stop.
8 ...
Unify (fun x y z -> y@1)
make[1]: *** [Makefile:247: utest] Error 2
and (fun x y z -> z@0)
make: *** [Makefile:271: ulong] Error 2

9 ...
Unify (fun x -> (?20903 x@0))
and (fun x -> (tuple2 x@0 x@0))

10 ...
Unify (fun x -> (?20908 x@0))
and (fun x y -> (op_Addition x@1 y@0))

11 ...
Unify (x:int -> y:(y#163863:int{(eq2 y@0 x@1)}) -> Tot bool)
and (x:int -> y:int -> Tot bool)

12 ...
Unify (a:Type -> b:(_:a@0 -> Type) -> x:a@1 -> y:(b@1 x@0) -> Type)
and (a:Type -> b:(_:a@0 -> Type) -> x:a@1 -> y:(b@1 x@0) -> Type)

Unifier ok
make[2]: Leaving directory '/home/darrenge/FStar/src'
make -C ocaml-output
make[2]: Entering directory '/home/darrenge/FStar/src'
make[2]: Leaving directory '/home/darrenge/FStar/src'
make[1]: Leaving directory '/home/darrenge/FStar/src'
make: Leaving directory '/home/darrenge/FStar/src'
