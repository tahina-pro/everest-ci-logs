This is /home/everbld/everest-ci/ci
Working directory: /cygdrive/c/Build/Agent/_work/36/s
About to run: mitls_verify_and_hints
BUILD_SOURCEBRANCHNAME: master
BUILD_DEFINITIONNAME: miTLS-Nightly-Windows
From https://github.com/FStarLang/FStar
* [new branch]      aseem_two_phase_experiment -> origin/aseem_two_phase_experiment
* [new branch]      c_relational-ci_r3 -> origin/c_relational-ci_r3
2d18871..b047e9f  c_valedev_initial -> origin/c_valedev_initial
1204e78..802561c  cwinter_smt_proofs -> origin/cwinter_smt_proofs
705d052..1cf62d2  konrad_hye_example -> origin/konrad_hye_example
da2d65f..fb01eb1  kyod_reification_examples -> origin/kyod_reification_examples
a10955e..396c702  master     -> origin/master
* [new branch]      origin/kyod_reification_examples -> origin/origin/kyod_reification_examples
5f4014a..545e811  shaolintl_bug_146 -> origin/shaolintl_bug_146
fc4eaf9..396c702  taramana_private -> origin/taramana_private
621977c..c787b35  vdum_pprint_ocaml -> origin/vdum_pprint_ocaml
HEAD is now at 803422c Fix record_hints when the file is found in one of the include directories
make: Entering directory '/cygdrive/c/Build/Agent/_work/36/s/fstar/src/ocaml-output'
# JP: delete this line and the script once every member of the team has
# run ./clean.sh once
./clean.sh
FStar_Parser_Parse.ml is not under version control, removing
FStar_Version.ml is not under version control, removing
rm -rf _build
rm -f parse.mly FStar_Parser_Parse.ml FStar_Version.ml
rm -f *.tar.gz *.zip
make: Leaving directory '/cygdrive/c/Build/Agent/_work/36/s/fstar/src/ocaml-output'
make: Entering directory '/cygdrive/c/Build/Agent/_work/36/s/fstar/src/ocaml-output'
# TODO : call menhir directly when positions are fixed instead of
# letting OCamlbuild go through ocamlyacc
menhir  --only-preprocess-for-ocamlyacc ../parser/parse.mly > parse.mly
Warning: you are using the standard library and/or the %inline keyword. We
recommend switching on --infer in order to avoid obscure type error messages.
# Save a copy of the dumb parse.mly for whoever doesn't have menhir.
echo 'let version = "0.9.4.0"' > FStar_Version.ml
cp parse.mly ../parser/ml/
echo 'let platform = "Windows_x64"' >> FStar_Version.ml
echo "%{" > ../parser/parse.fsy
# We are opening the same module twice but we need these modules
echo 'let compiler = "OCaml 4.02.3"' >> FStar_Version.ml
# open for the definition of tokens
echo "#light \"off\"" >> ../parser/parse.fsy
echo 'let date = "2017-02-08T01:00:20-08:00"' >> FStar_Version.ml
echo "open Prims" > FStar_Parser_Parse.ml
echo "// (c) Microsoft Corporation. All rights reserved" >> ../parser/parse.fsy
echo 'let commit= "803422c"' >> FStar_Version.ml
echo "open FStar_Errors" >> FStar_Parser_Parse.ml
echo "open Prims" >> ../parser/parse.fsy
echo "open FStar_List" >> FStar_Parser_Parse.ml
echo "open FStar.Errors" >> ../parser/parse.fsy
echo "open FStar_Util" >> FStar_Parser_Parse.ml
echo "open FStar.List" >> ../parser/parse.fsy
echo "open FStar.Util" >> ../parser/parse.fsy
echo "open FStar_Range" >> FStar_Parser_Parse.ml
echo "open FStar_Options" >> FStar_Parser_Parse.ml
echo "open FStar.Range" >> ../parser/parse.fsy
echo "open FStar.Options" >> ../parser/parse.fsy
echo "open FStar_Syntax_Syntax" >> FStar_Parser_Parse.ml
echo "open FStar.Syntax.Syntax" >> ../parser/parse.fsy
echo "open FStar_Syntax_Const" >> FStar_Parser_Parse.ml
echo "open FStar.Syntax.Const" >> ../parser/parse.fsy
echo "open FStar_Syntax_Util" >> FStar_Parser_Parse.ml
echo "open FStar.Syntax.Util" >> ../parser/parse.fsy
echo "open FStar_Parser_AST" >> FStar_Parser_Parse.ml
echo "open FStar.Parser.AST" >> ../parser/parse.fsy
echo "open FStar_Parser_Util" >> FStar_Parser_Parse.ml
echo "open FStar.Parser.Util" >> ../parser/parse.fsy
echo "open FStar_Const" >> FStar_Parser_Parse.ml
echo "open FStar.Const" >> ../parser/parse.fsy
echo "open FStar_Ident" >> FStar_Parser_Parse.ml
echo "open FStar_String" >> FStar_Parser_Parse.ml
echo "open FStar.Ident" >> ../parser/parse.fsy
# TODO: create a proper OCamlbuild rule for this production so that
echo "open FStar.String" >> ../parser/parse.fsy
# OCamlbuild knows how to generate parse.mly first (possibly using
# TODO : fsyacc seems to complain as soon as there is an arrow -> in a %type declaration...
# menhir) and removes the production as needed.
cat parse.mly | sed -e '/%{/d' \
-e '/^open /d' \
-e '/%token/s/[a-zA-Z0-9_]*\.//g' \
-e '/%type/s/[a-zA-Z0-9_]*\.//g' \
-e '/%token.*->.*/d' \
-e '/%type.*->.*/d' \
>> ../parser/parse.fsy
ocamlyacc parse.mly
6 shift/reduce conflicts.
cat parse.ml >> FStar_Parser_Parse.ml
rm parse.ml parse.mli
cd ../../ && ocamlbuild -cflag '-g' -I src/ocaml-output -I src/basic/ml -I src/parser/ml -I src/fstar/ml -j 24 -build-dir src/ocaml-output/_build -I src/prettyprint/ml -I src/ocaml-output/bootlibs -use-ocamlfind main.native
mkdir 'C:\Build\Agent\_work\36\s\fstar\src/ocaml-output/_build'
mkdir src
mkdir src/fstar
mkdir src/fstar/ml
''ocamlfind ocamldep -package batteries -package zarith -package yojson -package pprint -modules src/fstar/ml/main.ml > src/fstar/ml/main.ml.depends
mkdir src/ocaml-output
''ocamlfind ocamldep -package batteries -package zarith -package yojson -package pprint -modules src/ocaml-output/FStar_Main.ml > src/ocaml-output/FStar_Main.ml.depends
mkdir src/ocaml-output/bootlibs
''ocamlfind ocamldep -package batteries -package zarith -package yojson -package pprint -modules src/ocaml-output/bootlibs/FStar_All.ml > src/ocaml-output/bootlibs/FStar_All.ml.depends
''ocamlfind ocamldep -package batteries -package zarith -package yojson -package pprint -modules src/ocaml-output/FStar_Dependencies.ml > src/ocaml-output/FStar_Dependencies.ml.depends
''ocamlfind ocamlc -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/ocaml-output/bootlibs -I src/ocaml-output -I src/prettyprint/ml -I src/parser/ml -I src/fstar/ml -I src/basic/ml -o src/ocaml-output/bootlibs/FStar_All.cmo src/ocaml-output/bootlibs/FStar_All.ml
''ocamlfind ocamldep -package batteries -package zarith -package yojson -package pprint -modules src/ocaml-output/bootlibs/FStar_List.ml > src/ocaml-output/bootlibs/FStar_List.ml.depends
''ocamlfind ocamldep -package batteries -package zarith -package yojson -package pprint -modules src/ocaml-output/FStar_Options.ml > src/ocaml-output/FStar_Options.ml.depends
''ocamlfind ocamldep -package batteries -package zarith -package yojson -package pprint -modules src/ocaml-output/bootlibs/FStar_BaseTypes.ml > src/ocaml-output/bootlibs/FStar_BaseTypes.ml.depends
''ocamlfind ocamldep -package batteries -package zarith -package yojson -package pprint -modules src/ocaml-output/bootlibs/FStar_Char.ml > src/ocaml-output/bootlibs/FStar_Char.ml.depends
''ocamlfind ocamldep -package batteries -package zarith -package yojson -package pprint -modules src/ocaml-output/bootlibs/FStar_Float.ml > src/ocaml-output/bootlibs/FStar_Float.ml.depends
''ocamlfind ocamldep -package batteries -package zarith -package yojson -package pprint -modules src/ocaml-output/bootlibs/FStar_Int16.ml > src/ocaml-output/bootlibs/FStar_Int16.ml.depends
''ocamlfind ocamldep -package batteries -package zarith -package yojson -package pprint -modules src/ocaml-output/bootlibs/FStar_Int32.ml > src/ocaml-output/bootlibs/FStar_Int32.ml.depends
''ocamlfind ocamldep -package batteries -package zarith -package yojson -package pprint -modules src/ocaml-output/bootlibs/FStar_Int64.ml > src/ocaml-output/bootlibs/FStar_Int64.ml.depends
''ocamlfind ocamldep -package batteries -package zarith -package yojson -package pprint -modules src/ocaml-output/bootlibs/FStar_Int8.ml > src/ocaml-output/bootlibs/FStar_Int8.ml.depends
''ocamlfind ocamldep -package batteries -package zarith -package yojson -package pprint -modules src/ocaml-output/bootlibs/FStar_UInt16.ml > src/ocaml-output/bootlibs/FStar_UInt16.ml.depends
''ocamlfind ocamldep -package batteries -package zarith -package yojson -package pprint -modules src/ocaml-output/bootlibs/FStar_UInt8.ml > src/ocaml-output/bootlibs/FStar_UInt8.ml.depends
''ocamlfind ocamlc -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/ocaml-output/bootlibs -I src/ocaml-output -I src/prettyprint/ml -I src/parser/ml -I src/fstar/ml -I src/basic/ml -o src/ocaml-output/bootlibs/FStar_Char.cmo src/ocaml-output/bootlibs/FStar_Char.ml
''ocamlfind ocamlc -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/ocaml-output/bootlibs -I src/ocaml-output -I src/prettyprint/ml -I src/parser/ml -I src/fstar/ml -I src/basic/ml -o src/ocaml-output/bootlibs/FStar_Float.cmo src/ocaml-output/bootlibs/FStar_Float.ml
''ocamlfind ocamlc -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/ocaml-output/bootlibs -I src/ocaml-output -I src/prettyprint/ml -I src/parser/ml -I src/fstar/ml -I src/basic/ml -o src/ocaml-output/bootlibs/FStar_Int16.cmo src/ocaml-output/bootlibs/FStar_Int16.ml
''ocamlfind ocamlc -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/ocaml-output/bootlibs -I src/ocaml-output -I src/prettyprint/ml -I src/parser/ml -I src/fstar/ml -I src/basic/ml -o src/ocaml-output/bootlibs/FStar_Int32.cmo src/ocaml-output/bootlibs/FStar_Int32.ml
''ocamlfind ocamlc -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/ocaml-output/bootlibs -I src/ocaml-output -I src/prettyprint/ml -I src/parser/ml -I src/fstar/ml -I src/basic/ml -o src/ocaml-output/bootlibs/FStar_Int64.cmo src/ocaml-output/bootlibs/FStar_Int64.ml
''ocamlfind ocamlc -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/ocaml-output/bootlibs -I src/ocaml-output -I src/prettyprint/ml -I src/parser/ml -I src/fstar/ml -I src/basic/ml -o src/ocaml-output/bootlibs/FStar_Int8.cmo src/ocaml-output/bootlibs/FStar_Int8.ml
''ocamlfind ocamlc -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/ocaml-output/bootlibs -I src/ocaml-output -I src/prettyprint/ml -I src/parser/ml -I src/fstar/ml -I src/basic/ml -o src/ocaml-output/bootlibs/FStar_UInt16.cmo src/ocaml-output/bootlibs/FStar_UInt16.ml
''ocamlfind ocamlc -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/ocaml-output/bootlibs -I src/ocaml-output -I src/prettyprint/ml -I src/parser/ml -I src/fstar/ml -I src/basic/ml -o src/ocaml-output/bootlibs/FStar_UInt8.cmo src/ocaml-output/bootlibs/FStar_UInt8.ml
mkdir src/basic
mkdir src/basic/ml
''ocamlfind ocamldep -package batteries -package zarith -package yojson -package pprint -modules src/basic/ml/FStar_Getopt.ml > src/basic/ml/FStar_Getopt.ml.depends
''ocamlfind ocamlc -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/ocaml-output/bootlibs -I src/ocaml-output -I src/prettyprint/ml -I src/parser/ml -I src/fstar/ml -I src/basic/ml -o src/ocaml-output/bootlibs/FStar_List.cmo src/ocaml-output/bootlibs/FStar_List.ml
''ocamlfind ocamldep -package batteries -package zarith -package yojson -package pprint -modules src/basic/ml/FStar_Platform.ml > src/basic/ml/FStar_Platform.ml.depends
''ocamlfind ocamldep -package batteries -package zarith -package yojson -package pprint -modules src/ocaml-output/bootlibs/FStar_ST.ml > src/ocaml-output/bootlibs/FStar_ST.ml.depends
''ocamlfind ocamldep -package batteries -package zarith -package yojson -package pprint -modules src/ocaml-output/bootlibs/FStar_String.ml > src/ocaml-output/bootlibs/FStar_String.ml.depends
''ocamlfind ocamldep -package batteries -package zarith -package yojson -package pprint -modules src/basic/ml/FStar_Util.ml > src/basic/ml/FStar_Util.ml.depends
''ocamlfind ocamldep -package batteries -package zarith -package yojson -package pprint -modules src/ocaml-output/bootlibs/prims.ml > src/ocaml-output/bootlibs/prims.ml.depends
''ocamlfind ocamldep -package batteries -package zarith -package yojson -package pprint -modules src/ocaml-output/bootlibs/MkPrims.ml > src/ocaml-output/bootlibs/MkPrims.ml.depends
''ocamlfind ocamlc -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/ocaml-output/bootlibs -I src/ocaml-output -I src/prettyprint/ml -I src/parser/ml -I src/fstar/ml -I src/basic/ml -o src/ocaml-output/bootlibs/MkPrims.cmo src/ocaml-output/bootlibs/MkPrims.ml
''ocamlfind ocamlc -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/ocaml-output/bootlibs -I src/ocaml-output -I src/prettyprint/ml -I src/parser/ml -I src/fstar/ml -I src/basic/ml -o src/ocaml-output/bootlibs/prims.cmo src/ocaml-output/bootlibs/prims.ml
''ocamlfind ocamldep -package batteries -package zarith -package yojson -package pprint -modules src/ocaml-output/FStar_Version.ml > src/ocaml-output/FStar_Version.ml.depends
''ocamlfind ocamlc -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/ocaml-output/bootlibs -I src/ocaml-output -I src/prettyprint/ml -I src/parser/ml -I src/fstar/ml -I src/basic/ml -o src/ocaml-output/bootlibs/FStar_BaseTypes.cmo src/ocaml-output/bootlibs/FStar_BaseTypes.ml
''ocamlfind ocamlc -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/basic/ml -I src/ocaml-output -I src/prettyprint/ml -I src/parser/ml -I src/ocaml-output/bootlibs -I src/fstar/ml -o src/basic/ml/FStar_Getopt.cmo src/basic/ml/FStar_Getopt.ml
''ocamlfind ocamlc -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/basic/ml -I src/ocaml-output -I src/prettyprint/ml -I src/parser/ml -I src/ocaml-output/bootlibs -I src/fstar/ml -o src/basic/ml/FStar_Platform.cmo src/basic/ml/FStar_Platform.ml
''ocamlfind ocamlc -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/ocaml-output/bootlibs -I src/ocaml-output -I src/prettyprint/ml -I src/parser/ml -I src/fstar/ml -I src/basic/ml -o src/ocaml-output/bootlibs/FStar_ST.cmo src/ocaml-output/bootlibs/FStar_ST.ml
''ocamlfind ocamlc -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/ocaml-output/bootlibs -I src/ocaml-output -I src/prettyprint/ml -I src/parser/ml -I src/fstar/ml -I src/basic/ml -o src/ocaml-output/bootlibs/FStar_String.cmo src/ocaml-output/bootlibs/FStar_String.ml
''ocamlfind ocamlc -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/basic/ml -I src/ocaml-output -I src/prettyprint/ml -I src/parser/ml -I src/ocaml-output/bootlibs -I src/fstar/ml -o src/basic/ml/FStar_Util.cmo src/basic/ml/FStar_Util.ml
File "src/basic/ml/FStar_Util.ml", line 47, characters 57-65:
Warning 40: st_mtime was selected from type BatUnix.stats.
It is not visible in the current scope, and will not 
be selected if the type becomes unknown.
''ocamlfind ocamlc -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/ocaml-output -I src/prettyprint/ml -I src/parser/ml -I src/ocaml-output/bootlibs -I src/fstar/ml -I src/basic/ml -o src/ocaml-output/FStar_Version.cmo src/ocaml-output/FStar_Version.ml
''ocamlfind ocamldep -package batteries -package zarith -package yojson -package pprint -modules src/ocaml-output/FStar_Parser_Dep.ml > src/ocaml-output/FStar_Parser_Dep.ml.depends
''ocamlfind ocamldep -package batteries -package zarith -package yojson -package pprint -modules src/ocaml-output/FStar_Const.ml > src/ocaml-output/FStar_Const.ml.depends
''ocamlfind ocamldep -package batteries -package zarith -package yojson -package pprint -modules src/ocaml-output/FStar_Ident.ml > src/ocaml-output/FStar_Ident.ml.depends
''ocamlfind ocamldep -package batteries -package zarith -package yojson -package pprint -modules src/basic/ml/FStar_Range.ml > src/basic/ml/FStar_Range.ml.depends
''ocamlfind ocamlc -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/basic/ml -I src/ocaml-output -I src/prettyprint/ml -I src/parser/ml -I src/ocaml-output/bootlibs -I src/fstar/ml -o src/basic/ml/FStar_Range.cmo src/basic/ml/FStar_Range.ml
''ocamlfind ocamlc -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/ocaml-output -I src/prettyprint/ml -I src/parser/ml -I src/ocaml-output/bootlibs -I src/fstar/ml -I src/basic/ml -o src/ocaml-output/FStar_Ident.cmo src/ocaml-output/FStar_Ident.ml
''ocamlfind ocamldep -package batteries -package zarith -package yojson -package pprint -modules src/ocaml-output/FStar_Errors.ml > src/ocaml-output/FStar_Errors.ml.depends
''ocamlfind ocamlc -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/ocaml-output -I src/prettyprint/ml -I src/parser/ml -I src/ocaml-output/bootlibs -I src/fstar/ml -I src/basic/ml -o src/ocaml-output/FStar_Options.cmo src/ocaml-output/FStar_Options.ml
''ocamlfind ocamldep -package batteries -package zarith -package yojson -package pprint -modules src/ocaml-output/FStar_Parser_AST.ml > src/ocaml-output/FStar_Parser_AST.ml.depends
''ocamlfind ocamlc -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/ocaml-output -I src/prettyprint/ml -I src/parser/ml -I src/ocaml-output/bootlibs -I src/fstar/ml -I src/basic/ml -o src/ocaml-output/FStar_Const.cmo src/ocaml-output/FStar_Const.ml
''ocamlfind ocamlc -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/ocaml-output -I src/prettyprint/ml -I src/parser/ml -I src/ocaml-output/bootlibs -I src/fstar/ml -I src/basic/ml -o src/ocaml-output/FStar_Errors.cmo src/ocaml-output/FStar_Errors.ml
''ocamlfind ocamldep -package batteries -package zarith -package yojson -package pprint -modules src/ocaml-output/FStar_Syntax_Const.ml > src/ocaml-output/FStar_Syntax_Const.ml.depends
''ocamlfind ocamldep -package batteries -package zarith -package yojson -package pprint -modules src/ocaml-output/FStar_Syntax_Syntax.ml > src/ocaml-output/FStar_Syntax_Syntax.ml.depends
''ocamlfind ocamldep -package batteries -package zarith -package yojson -package pprint -modules src/basic/ml/FStar_Unionfind.ml > src/basic/ml/FStar_Unionfind.ml.depends
''ocamlfind ocamlc -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/basic/ml -I src/ocaml-output -I src/prettyprint/ml -I src/parser/ml -I src/ocaml-output/bootlibs -I src/fstar/ml -o src/basic/ml/FStar_Unionfind.cmo src/basic/ml/FStar_Unionfind.ml
''ocamlfind ocamlc -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/ocaml-output -I src/prettyprint/ml -I src/parser/ml -I src/ocaml-output/bootlibs -I src/fstar/ml -I src/basic/ml -o src/ocaml-output/FStar_Syntax_Syntax.cmo src/ocaml-output/FStar_Syntax_Syntax.ml
''ocamlfind ocamldep -package batteries -package zarith -package yojson -package pprint -modules src/ocaml-output/FStar_Syntax_Print.ml > src/ocaml-output/FStar_Syntax_Print.ml.depends
''ocamlfind ocamlc -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/ocaml-output -I src/prettyprint/ml -I src/parser/ml -I src/ocaml-output/bootlibs -I src/fstar/ml -I src/basic/ml -o src/ocaml-output/FStar_Syntax_Const.cmo src/ocaml-output/FStar_Syntax_Const.ml
''ocamlfind ocamldep -package batteries -package zarith -package yojson -package pprint -modules src/ocaml-output/FStar_Syntax_Subst.ml > src/ocaml-output/FStar_Syntax_Subst.ml.depends
''ocamlfind ocamldep -package batteries -package zarith -package yojson -package pprint -modules src/ocaml-output/bootlibs/FStar_Option.ml > src/ocaml-output/bootlibs/FStar_Option.ml.depends
''ocamlfind ocamlc -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/ocaml-output/bootlibs -I src/ocaml-output -I src/prettyprint/ml -I src/parser/ml -I src/fstar/ml -I src/basic/ml -o src/ocaml-output/bootlibs/FStar_Option.cmo src/ocaml-output/bootlibs/FStar_Option.ml
''ocamlfind ocamldep -package batteries -package zarith -package yojson -package pprint -modules src/ocaml-output/FStar_Syntax_Util.ml > src/ocaml-output/FStar_Syntax_Util.ml.depends
''ocamlfind ocamldep -package batteries -package zarith -package yojson -package pprint -modules src/ocaml-output/FStar_Syntax_InstFV.ml > src/ocaml-output/FStar_Syntax_InstFV.ml.depends
''ocamlfind ocamlc -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/ocaml-output -I src/prettyprint/ml -I src/parser/ml -I src/ocaml-output/bootlibs -I src/fstar/ml -I src/basic/ml -o src/ocaml-output/FStar_Syntax_Subst.cmo src/ocaml-output/FStar_Syntax_Subst.ml
''ocamlfind ocamlc -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/ocaml-output -I src/prettyprint/ml -I src/parser/ml -I src/ocaml-output/bootlibs -I src/fstar/ml -I src/basic/ml -o src/ocaml-output/FStar_Syntax_InstFV.cmo src/ocaml-output/FStar_Syntax_InstFV.ml
''ocamlfind ocamlc -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/ocaml-output -I src/prettyprint/ml -I src/parser/ml -I src/ocaml-output/bootlibs -I src/fstar/ml -I src/basic/ml -o src/ocaml-output/FStar_Syntax_Util.cmo src/ocaml-output/FStar_Syntax_Util.ml
''ocamlfind ocamlc -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/ocaml-output -I src/prettyprint/ml -I src/parser/ml -I src/ocaml-output/bootlibs -I src/fstar/ml -I src/basic/ml -o src/ocaml-output/FStar_Syntax_Print.cmo src/ocaml-output/FStar_Syntax_Print.ml
''ocamlfind ocamldep -package batteries -package zarith -package yojson -package pprint -modules src/ocaml-output/FStar_Parser_Driver.ml > src/ocaml-output/FStar_Parser_Driver.ml.depends
''ocamlfind ocamlc -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/ocaml-output -I src/prettyprint/ml -I src/parser/ml -I src/ocaml-output/bootlibs -I src/fstar/ml -I src/basic/ml -o src/ocaml-output/FStar_Parser_AST.cmo src/ocaml-output/FStar_Parser_AST.ml
mkdir src/parser
mkdir src/parser/ml
''ocamlfind ocamldep -package batteries -package zarith -package yojson -package pprint -modules src/parser/ml/FStar_Parser_ParseIt.ml > src/parser/ml/FStar_Parser_ParseIt.ml.depends
''ocamllex.opt -q src/parser/ml/FStar_Parser_LexFStar.mll
''ocamlfind ocamldep -package batteries -package zarith -package yojson -package pprint -modules src/parser/ml/FStar_Parser_LexFStar.ml > src/parser/ml/FStar_Parser_LexFStar.ml.depends
''ocamlfind ocamldep -package batteries -package zarith -package yojson -package pprint -modules src/ocaml-output/FStar_Parser_Parse.ml > src/ocaml-output/FStar_Parser_Parse.ml.depends
''ocamlfind ocamldep -package batteries -package zarith -package yojson -package pprint -modules src/parser/ml/FStar_Parser_Util.ml > src/parser/ml/FStar_Parser_Util.ml.depends
''ocamlfind ocamlc -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/parser/ml -I src/ocaml-output -I src/prettyprint/ml -I src/ocaml-output/bootlibs -I src/fstar/ml -I src/basic/ml -o src/parser/ml/FStar_Parser_Util.cmo src/parser/ml/FStar_Parser_Util.ml
''ocamlfind ocamlc -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/ocaml-output -I src/prettyprint/ml -I src/parser/ml -I src/ocaml-output/bootlibs -I src/fstar/ml -I src/basic/ml -o src/ocaml-output/FStar_Parser_Parse.cmo src/ocaml-output/FStar_Parser_Parse.ml
''ocamlfind ocamlc -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/parser/ml -I src/ocaml-output -I src/prettyprint/ml -I src/ocaml-output/bootlibs -I src/fstar/ml -I src/basic/ml -o src/parser/ml/FStar_Parser_LexFStar.cmo src/parser/ml/FStar_Parser_LexFStar.ml
''ocamlfind ocamlc -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/parser/ml -I src/ocaml-output -I src/prettyprint/ml -I src/ocaml-output/bootlibs -I src/fstar/ml -I src/basic/ml -o src/parser/ml/FStar_Parser_ParseIt.cmo src/parser/ml/FStar_Parser_ParseIt.ml
''ocamlfind ocamlc -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/ocaml-output -I src/prettyprint/ml -I src/parser/ml -I src/ocaml-output/bootlibs -I src/fstar/ml -I src/basic/ml -o src/ocaml-output/FStar_Parser_Driver.cmo src/ocaml-output/FStar_Parser_Driver.ml
''ocamlfind ocamlc -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/ocaml-output -I src/prettyprint/ml -I src/parser/ml -I src/ocaml-output/bootlibs -I src/fstar/ml -I src/basic/ml -o src/ocaml-output/FStar_Parser_Dep.cmo src/ocaml-output/FStar_Parser_Dep.ml
''ocamlfind ocamldep -package batteries -package zarith -package yojson -package pprint -modules src/ocaml-output/FStar_Extraction_Kremlin.ml > src/ocaml-output/FStar_Extraction_Kremlin.ml.depends
''ocamlfind ocamldep -package batteries -package zarith -package yojson -package pprint -modules src/ocaml-output/FStar_Extraction_ML_Code.ml > src/ocaml-output/FStar_Extraction_ML_Code.ml.depends
''ocamlfind ocamldep -package batteries -package zarith -package yojson -package pprint -modules src/basic/ml/FStar_Bytes.ml > src/basic/ml/FStar_Bytes.ml.depends
''ocamlfind ocamldep -package batteries -package zarith -package yojson -package pprint -modules src/ocaml-output/FStar_Extraction_ML_Syntax.ml > src/ocaml-output/FStar_Extraction_ML_Syntax.ml.depends
''ocamlfind ocamldep -package batteries -package zarith -package yojson -package pprint -modules src/ocaml-output/FStar_Extraction_ML_Util.ml > src/ocaml-output/FStar_Extraction_ML_Util.ml.depends
''ocamlfind ocamlc -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/ocaml-output -I src/prettyprint/ml -I src/parser/ml -I src/ocaml-output/bootlibs -I src/fstar/ml -I src/basic/ml -o src/ocaml-output/FStar_Extraction_ML_Syntax.cmo src/ocaml-output/FStar_Extraction_ML_Syntax.ml
''ocamlfind ocamldep -package batteries -package zarith -package yojson -package pprint -modules src/ocaml-output/FStar_Extraction_ML_UEnv.ml > src/ocaml-output/FStar_Extraction_ML_UEnv.ml.depends
''ocamlfind ocamldep -package batteries -package zarith -package yojson -package pprint -modules src/ocaml-output/FStar_TypeChecker_Env.ml > src/ocaml-output/FStar_TypeChecker_Env.ml.depends
''ocamlfind ocamldep -package batteries -package zarith -package yojson -package pprint -modules src/ocaml-output/FStar_Syntax_Free.ml > src/ocaml-output/FStar_Syntax_Free.ml.depends
''ocamlfind ocamldep -package batteries -package zarith -package yojson -package pprint -modules src/ocaml-output/FStar_TypeChecker_Common.ml > src/ocaml-output/FStar_TypeChecker_Common.ml.depends
''ocamlfind ocamlc -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/ocaml-output -I src/prettyprint/ml -I src/parser/ml -I src/ocaml-output/bootlibs -I src/fstar/ml -I src/basic/ml -o src/ocaml-output/FStar_Syntax_Free.cmo src/ocaml-output/FStar_Syntax_Free.ml
''ocamlfind ocamlc -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/ocaml-output -I src/prettyprint/ml -I src/parser/ml -I src/ocaml-output/bootlibs -I src/fstar/ml -I src/basic/ml -o src/ocaml-output/FStar_TypeChecker_Common.cmo src/ocaml-output/FStar_TypeChecker_Common.ml
''ocamlfind ocamlc -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/ocaml-output -I src/prettyprint/ml -I src/parser/ml -I src/ocaml-output/bootlibs -I src/fstar/ml -I src/basic/ml -o src/ocaml-output/FStar_TypeChecker_Env.cmo src/ocaml-output/FStar_TypeChecker_Env.ml
''ocamlfind ocamlc -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/ocaml-output -I src/prettyprint/ml -I src/parser/ml -I src/ocaml-output/bootlibs -I src/fstar/ml -I src/basic/ml -o src/ocaml-output/FStar_Extraction_ML_UEnv.cmo src/ocaml-output/FStar_Extraction_ML_UEnv.ml
''ocamlfind ocamldep -package batteries -package zarith -package yojson -package pprint -modules src/ocaml-output/FStar_Format.ml > src/ocaml-output/FStar_Format.ml.depends
''ocamlfind ocamlc -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/basic/ml -I src/ocaml-output -I src/prettyprint/ml -I src/parser/ml -I src/ocaml-output/bootlibs -I src/fstar/ml -o src/basic/ml/FStar_Bytes.cmo src/basic/ml/FStar_Bytes.ml
''ocamlfind ocamlc -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/ocaml-output -I src/prettyprint/ml -I src/parser/ml -I src/ocaml-output/bootlibs -I src/fstar/ml -I src/basic/ml -o src/ocaml-output/FStar_Extraction_ML_Util.cmo src/ocaml-output/FStar_Extraction_ML_Util.ml
''ocamlfind ocamlc -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/ocaml-output -I src/prettyprint/ml -I src/parser/ml -I src/ocaml-output/bootlibs -I src/fstar/ml -I src/basic/ml -o src/ocaml-output/FStar_Format.cmo src/ocaml-output/FStar_Format.ml
''ocamlfind ocamlc -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/ocaml-output -I src/prettyprint/ml -I src/parser/ml -I src/ocaml-output/bootlibs -I src/fstar/ml -I src/basic/ml -o src/ocaml-output/FStar_Extraction_ML_Code.cmo src/ocaml-output/FStar_Extraction_ML_Code.ml
''ocamlfind ocamldep -package batteries -package zarith -package yojson -package pprint -modules src/ocaml-output/FStar_Extraction_ML_Modul.ml > src/ocaml-output/FStar_Extraction_ML_Modul.ml.depends
''ocamlfind ocamldep -package batteries -package zarith -package yojson -package pprint -modules src/ocaml-output/FStar_Extraction_ML_Term.ml > src/ocaml-output/FStar_Extraction_ML_Term.ml.depends
''ocamlfind ocamldep -package batteries -package zarith -package yojson -package pprint -modules src/ocaml-output/FStar_TypeChecker_Normalize.ml > src/ocaml-output/FStar_TypeChecker_Normalize.ml.depends
''ocamlfind ocamldep -package batteries -package zarith -package yojson -package pprint -modules src/ocaml-output/FStar_TypeChecker_TcTerm.ml > src/ocaml-output/FStar_TypeChecker_TcTerm.ml.depends
''ocamlfind ocamldep -package batteries -package zarith -package yojson -package pprint -modules src/ocaml-output/FStar_TypeChecker_Err.ml > src/ocaml-output/FStar_TypeChecker_Err.ml.depends
''ocamlfind ocamlc -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/ocaml-output -I src/prettyprint/ml -I src/parser/ml -I src/ocaml-output/bootlibs -I src/fstar/ml -I src/basic/ml -o src/ocaml-output/FStar_TypeChecker_Normalize.cmo src/ocaml-output/FStar_TypeChecker_Normalize.ml
''ocamlfind ocamldep -package batteries -package zarith -package yojson -package pprint -modules src/ocaml-output/FStar_TypeChecker_Rel.ml > src/ocaml-output/FStar_TypeChecker_Rel.ml.depends
''ocamlfind ocamlc -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/ocaml-output -I src/prettyprint/ml -I src/parser/ml -I src/ocaml-output/bootlibs -I src/fstar/ml -I src/basic/ml -o src/ocaml-output/FStar_TypeChecker_Err.cmo src/ocaml-output/FStar_TypeChecker_Err.ml
''ocamlfind ocamldep -package batteries -package zarith -package yojson -package pprint -modules src/ocaml-output/FStar_TypeChecker_Util.ml > src/ocaml-output/FStar_TypeChecker_Util.ml.depends
''ocamlfind ocamlc -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/ocaml-output -I src/prettyprint/ml -I src/parser/ml -I src/ocaml-output/bootlibs -I src/fstar/ml -I src/basic/ml -o src/ocaml-output/FStar_TypeChecker_Rel.cmo src/ocaml-output/FStar_TypeChecker_Rel.ml
''ocamlfind ocamlc -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/ocaml-output -I src/prettyprint/ml -I src/parser/ml -I src/ocaml-output/bootlibs -I src/fstar/ml -I src/basic/ml -o src/ocaml-output/FStar_TypeChecker_Util.cmo src/ocaml-output/FStar_TypeChecker_Util.ml
''ocamlfind ocamlc -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/ocaml-output -I src/prettyprint/ml -I src/parser/ml -I src/ocaml-output/bootlibs -I src/fstar/ml -I src/basic/ml -o src/ocaml-output/FStar_TypeChecker_TcTerm.cmo src/ocaml-output/FStar_TypeChecker_TcTerm.ml
''ocamlfind ocamlc -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/ocaml-output -I src/prettyprint/ml -I src/parser/ml -I src/ocaml-output/bootlibs -I src/fstar/ml -I src/basic/ml -o src/ocaml-output/FStar_Extraction_ML_Term.cmo src/ocaml-output/FStar_Extraction_ML_Term.ml
''ocamlfind ocamldep -package batteries -package zarith -package yojson -package pprint -modules src/ocaml-output/FStar_Fsdoc_Generator.ml > src/ocaml-output/FStar_Fsdoc_Generator.ml.depends
''ocamlfind ocamldep -package batteries -package zarith -package yojson -package pprint -modules src/ocaml-output/FStar_Indent.ml > src/ocaml-output/FStar_Indent.ml.depends
''ocamlfind ocamldep -package batteries -package zarith -package yojson -package pprint -modules src/ocaml-output/FStar_Parser_ToDocument.ml > src/ocaml-output/FStar_Parser_ToDocument.ml.depends
mkdir src/prettyprint
mkdir src/prettyprint/ml
''ocamlfind ocamldep -package batteries -package zarith -package yojson -package pprint -modules src/prettyprint/ml/FStar_Pprint.ml > src/prettyprint/ml/FStar_Pprint.ml.depends
''ocamlfind ocamlc -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/prettyprint/ml -I src/ocaml-output -I src/parser/ml -I src/ocaml-output/bootlibs -I src/fstar/ml -I src/basic/ml -o src/prettyprint/ml/FStar_Pprint.cmo src/prettyprint/ml/FStar_Pprint.ml
''ocamlfind ocamlc -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/ocaml-output -I src/prettyprint/ml -I src/parser/ml -I src/ocaml-output/bootlibs -I src/fstar/ml -I src/basic/ml -o src/ocaml-output/FStar_Parser_ToDocument.cmo src/ocaml-output/FStar_Parser_ToDocument.ml
''ocamlfind ocamldep -package batteries -package zarith -package yojson -package pprint -modules src/ocaml-output/FStar_Interactive.ml > src/ocaml-output/FStar_Interactive.ml.depends
''ocamlfind ocamlc -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/ocaml-output -I src/prettyprint/ml -I src/parser/ml -I src/ocaml-output/bootlibs -I src/fstar/ml -I src/basic/ml -o src/ocaml-output/FStar_Dependencies.cmo src/ocaml-output/FStar_Dependencies.ml
''ocamlfind ocamldep -package batteries -package zarith -package yojson -package pprint -modules src/ocaml-output/FStar_SMTEncoding_Solver.ml > src/ocaml-output/FStar_SMTEncoding_Solver.ml.depends
''ocamlfind ocamldep -package batteries -package zarith -package yojson -package pprint -modules src/ocaml-output/FStar_SMTEncoding_Encode.ml > src/ocaml-output/FStar_SMTEncoding_Encode.ml.depends
''ocamlfind ocamldep -package batteries -package zarith -package yojson -package pprint -modules src/ocaml-output/FStar_SMTEncoding_ErrorReporting.ml > src/ocaml-output/FStar_SMTEncoding_ErrorReporting.ml.depends
''ocamlfind ocamldep -package batteries -package zarith -package yojson -package pprint -modules src/ocaml-output/FStar_SMTEncoding_Term.ml > src/ocaml-output/FStar_SMTEncoding_Term.ml.depends
''ocamlfind ocamldep -package batteries -package zarith -package yojson -package pprint -modules src/ocaml-output/FStar_SMTEncoding_Util.ml > src/ocaml-output/FStar_SMTEncoding_Util.ml.depends
''ocamlfind ocamlc -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/ocaml-output -I src/prettyprint/ml -I src/parser/ml -I src/ocaml-output/bootlibs -I src/fstar/ml -I src/basic/ml -o src/ocaml-output/FStar_SMTEncoding_Term.cmo src/ocaml-output/FStar_SMTEncoding_Term.ml
''ocamlfind ocamldep -package batteries -package zarith -package yojson -package pprint -modules src/ocaml-output/FStar_SMTEncoding_Z3.ml > src/ocaml-output/FStar_SMTEncoding_Z3.ml.depends
''ocamlfind ocamlc -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/ocaml-output -I src/prettyprint/ml -I src/parser/ml -I src/ocaml-output/bootlibs -I src/fstar/ml -I src/basic/ml -o src/ocaml-output/FStar_SMTEncoding_Util.cmo src/ocaml-output/FStar_SMTEncoding_Util.ml
''ocamlfind ocamlc -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/ocaml-output -I src/prettyprint/ml -I src/parser/ml -I src/ocaml-output/bootlibs -I src/fstar/ml -I src/basic/ml -o src/ocaml-output/FStar_SMTEncoding_Z3.cmo src/ocaml-output/FStar_SMTEncoding_Z3.ml
''ocamlfind ocamlc -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/ocaml-output -I src/prettyprint/ml -I src/parser/ml -I src/ocaml-output/bootlibs -I src/fstar/ml -I src/basic/ml -o src/ocaml-output/FStar_SMTEncoding_ErrorReporting.cmo src/ocaml-output/FStar_SMTEncoding_ErrorReporting.ml
''ocamlfind ocamldep -package batteries -package zarith -package yojson -package pprint -modules src/ocaml-output/FStar_SMTEncoding_SplitQueryCases.ml > src/ocaml-output/FStar_SMTEncoding_SplitQueryCases.ml.depends
''ocamlfind ocamlc -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/ocaml-output -I src/prettyprint/ml -I src/parser/ml -I src/ocaml-output/bootlibs -I src/fstar/ml -I src/basic/ml -o src/ocaml-output/FStar_SMTEncoding_Encode.cmo src/ocaml-output/FStar_SMTEncoding_Encode.ml
''ocamlfind ocamlc -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/ocaml-output -I src/prettyprint/ml -I src/parser/ml -I src/ocaml-output/bootlibs -I src/fstar/ml -I src/basic/ml -o src/ocaml-output/FStar_SMTEncoding_SplitQueryCases.cmo src/ocaml-output/FStar_SMTEncoding_SplitQueryCases.ml
''ocamlfind ocamldep -package batteries -package zarith -package yojson -package pprint -modules src/ocaml-output/FStar_ToSyntax_Env.ml > src/ocaml-output/FStar_ToSyntax_Env.ml.depends
''ocamlfind ocamldep -package batteries -package zarith -package yojson -package pprint -modules src/ocaml-output/FStar_Universal.ml > src/ocaml-output/FStar_Universal.ml.depends
''ocamlfind ocamldep -package batteries -package zarith -package yojson -package pprint -modules src/ocaml-output/FStar_Parser_Interleave.ml > src/ocaml-output/FStar_Parser_Interleave.ml.depends
''ocamlfind ocamlc -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/ocaml-output -I src/prettyprint/ml -I src/parser/ml -I src/ocaml-output/bootlibs -I src/fstar/ml -I src/basic/ml -o src/ocaml-output/FStar_SMTEncoding_Solver.cmo src/ocaml-output/FStar_SMTEncoding_Solver.ml
''ocamlfind ocamlc -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/ocaml-output -I src/prettyprint/ml -I src/parser/ml -I src/ocaml-output/bootlibs -I src/fstar/ml -I src/basic/ml -o src/ocaml-output/FStar_ToSyntax_Env.cmo src/ocaml-output/FStar_ToSyntax_Env.ml
''ocamlfind ocamldep -package batteries -package zarith -package yojson -package pprint -modules src/ocaml-output/FStar_ToSyntax_ToSyntax.ml > src/ocaml-output/FStar_ToSyntax_ToSyntax.ml.depends
''ocamlfind ocamldep -package batteries -package zarith -package yojson -package pprint -modules src/ocaml-output/FStar_Syntax_MutRecTy.ml > src/ocaml-output/FStar_Syntax_MutRecTy.ml.depends
''ocamlfind ocamlc -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/ocaml-output -I src/prettyprint/ml -I src/parser/ml -I src/ocaml-output/bootlibs -I src/fstar/ml -I src/basic/ml -o src/ocaml-output/FStar_Syntax_MutRecTy.cmo src/ocaml-output/FStar_Syntax_MutRecTy.ml
''ocamlfind ocamldep -package batteries -package zarith -package yojson -package pprint -modules src/ocaml-output/FStar_TypeChecker_Tc.ml > src/ocaml-output/FStar_TypeChecker_Tc.ml.depends
''ocamlfind ocamldep -package batteries -package zarith -package yojson -package pprint -modules src/ocaml-output/FStar_TypeChecker_DMFF.ml > src/ocaml-output/FStar_TypeChecker_DMFF.ml.depends
''ocamlfind ocamldep -package batteries -package zarith -package yojson -package pprint -modules src/ocaml-output/FStar_TypeChecker_TcInductive.ml > src/ocaml-output/FStar_TypeChecker_TcInductive.ml.depends
''ocamlfind ocamlc -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/ocaml-output -I src/prettyprint/ml -I src/parser/ml -I src/ocaml-output/bootlibs -I src/fstar/ml -I src/basic/ml -o src/ocaml-output/FStar_TypeChecker_DMFF.cmo src/ocaml-output/FStar_TypeChecker_DMFF.ml
''ocamlfind ocamlc -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/ocaml-output -I src/prettyprint/ml -I src/parser/ml -I src/ocaml-output/bootlibs -I src/fstar/ml -I src/basic/ml -o src/ocaml-output/FStar_TypeChecker_TcInductive.cmo src/ocaml-output/FStar_TypeChecker_TcInductive.ml
''ocamlfind ocamlc -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/ocaml-output -I src/prettyprint/ml -I src/parser/ml -I src/ocaml-output/bootlibs -I src/fstar/ml -I src/basic/ml -o src/ocaml-output/FStar_Parser_Interleave.cmo src/ocaml-output/FStar_Parser_Interleave.ml
''ocamlfind ocamlc -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/ocaml-output -I src/prettyprint/ml -I src/parser/ml -I src/ocaml-output/bootlibs -I src/fstar/ml -I src/basic/ml -o src/ocaml-output/FStar_ToSyntax_ToSyntax.cmo src/ocaml-output/FStar_ToSyntax_ToSyntax.ml
''ocamlfind ocamlc -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/ocaml-output -I src/prettyprint/ml -I src/parser/ml -I src/ocaml-output/bootlibs -I src/fstar/ml -I src/basic/ml -o src/ocaml-output/FStar_TypeChecker_Tc.cmo src/ocaml-output/FStar_TypeChecker_Tc.ml
''ocamlfind ocamlc -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/ocaml-output -I src/prettyprint/ml -I src/parser/ml -I src/ocaml-output/bootlibs -I src/fstar/ml -I src/basic/ml -o src/ocaml-output/FStar_Universal.cmo src/ocaml-output/FStar_Universal.ml
''ocamlfind ocamlc -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/ocaml-output -I src/prettyprint/ml -I src/parser/ml -I src/ocaml-output/bootlibs -I src/fstar/ml -I src/basic/ml -o src/ocaml-output/FStar_Extraction_Kremlin.cmo src/ocaml-output/FStar_Extraction_Kremlin.ml
''ocamlfind ocamlc -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/ocaml-output -I src/prettyprint/ml -I src/parser/ml -I src/ocaml-output/bootlibs -I src/fstar/ml -I src/basic/ml -o src/ocaml-output/FStar_Extraction_ML_Modul.cmo src/ocaml-output/FStar_Extraction_ML_Modul.ml
''ocamlfind ocamlc -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/ocaml-output -I src/prettyprint/ml -I src/parser/ml -I src/ocaml-output/bootlibs -I src/fstar/ml -I src/basic/ml -o src/ocaml-output/FStar_Fsdoc_Generator.cmo src/ocaml-output/FStar_Fsdoc_Generator.ml
''ocamlfind ocamlc -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/ocaml-output -I src/prettyprint/ml -I src/parser/ml -I src/ocaml-output/bootlibs -I src/fstar/ml -I src/basic/ml -o src/ocaml-output/FStar_Indent.cmo src/ocaml-output/FStar_Indent.ml
''ocamlfind ocamlc -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/ocaml-output -I src/prettyprint/ml -I src/parser/ml -I src/ocaml-output/bootlibs -I src/fstar/ml -I src/basic/ml -o src/ocaml-output/FStar_Interactive.cmo src/ocaml-output/FStar_Interactive.ml
''ocamlfind ocamlc -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/ocaml-output -I src/prettyprint/ml -I src/parser/ml -I src/ocaml-output/bootlibs -I src/fstar/ml -I src/basic/ml -o src/ocaml-output/FStar_Main.cmo src/ocaml-output/FStar_Main.ml
''ocamlfind ocamlc -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/fstar/ml -I src/ocaml-output -I src/prettyprint/ml -I src/parser/ml -I src/ocaml-output/bootlibs -I src/basic/ml -o src/fstar/ml/main.cmo src/fstar/ml/main.ml
''ocamlfind ocamlopt -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/ocaml-output/bootlibs -I src/ocaml-output -I src/prettyprint/ml -I src/parser/ml -I src/fstar/ml -I src/basic/ml -o src/ocaml-output/bootlibs/FStar_All.cmx src/ocaml-output/bootlibs/FStar_All.ml
''ocamlfind ocamlopt -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/ocaml-output/bootlibs -I src/ocaml-output -I src/prettyprint/ml -I src/parser/ml -I src/fstar/ml -I src/basic/ml -o src/ocaml-output/bootlibs/FStar_Char.cmx src/ocaml-output/bootlibs/FStar_Char.ml
''ocamlfind ocamlopt -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/ocaml-output/bootlibs -I src/ocaml-output -I src/prettyprint/ml -I src/parser/ml -I src/fstar/ml -I src/basic/ml -o src/ocaml-output/bootlibs/FStar_Float.cmx src/ocaml-output/bootlibs/FStar_Float.ml
''ocamlfind ocamlopt -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/ocaml-output/bootlibs -I src/ocaml-output -I src/prettyprint/ml -I src/parser/ml -I src/fstar/ml -I src/basic/ml -o src/ocaml-output/bootlibs/FStar_Int16.cmx src/ocaml-output/bootlibs/FStar_Int16.ml
''ocamlfind ocamlopt -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/ocaml-output/bootlibs -I src/ocaml-output -I src/prettyprint/ml -I src/parser/ml -I src/fstar/ml -I src/basic/ml -o src/ocaml-output/bootlibs/FStar_Int32.cmx src/ocaml-output/bootlibs/FStar_Int32.ml
''ocamlfind ocamlopt -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/ocaml-output/bootlibs -I src/ocaml-output -I src/prettyprint/ml -I src/parser/ml -I src/fstar/ml -I src/basic/ml -o src/ocaml-output/bootlibs/FStar_Int64.cmx src/ocaml-output/bootlibs/FStar_Int64.ml
''ocamlfind ocamlopt -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/ocaml-output/bootlibs -I src/ocaml-output -I src/prettyprint/ml -I src/parser/ml -I src/fstar/ml -I src/basic/ml -o src/ocaml-output/bootlibs/FStar_Int8.cmx src/ocaml-output/bootlibs/FStar_Int8.ml
''ocamlfind ocamlopt -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/ocaml-output/bootlibs -I src/ocaml-output -I src/prettyprint/ml -I src/parser/ml -I src/fstar/ml -I src/basic/ml -o src/ocaml-output/bootlibs/FStar_UInt16.cmx src/ocaml-output/bootlibs/FStar_UInt16.ml
''ocamlfind ocamlopt -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/ocaml-output/bootlibs -I src/ocaml-output -I src/prettyprint/ml -I src/parser/ml -I src/fstar/ml -I src/basic/ml -o src/ocaml-output/bootlibs/FStar_UInt8.cmx src/ocaml-output/bootlibs/FStar_UInt8.ml
''ocamlfind ocamlopt -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/ocaml-output/bootlibs -I src/ocaml-output -I src/prettyprint/ml -I src/parser/ml -I src/fstar/ml -I src/basic/ml -o src/ocaml-output/bootlibs/FStar_List.cmx src/ocaml-output/bootlibs/FStar_List.ml
''ocamlfind ocamlopt -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/ocaml-output/bootlibs -I src/ocaml-output -I src/prettyprint/ml -I src/parser/ml -I src/fstar/ml -I src/basic/ml -o src/ocaml-output/bootlibs/MkPrims.cmx src/ocaml-output/bootlibs/MkPrims.ml
''ocamlfind ocamlopt -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/ocaml-output/bootlibs -I src/ocaml-output -I src/prettyprint/ml -I src/parser/ml -I src/fstar/ml -I src/basic/ml -o src/ocaml-output/bootlibs/prims.cmx src/ocaml-output/bootlibs/prims.ml
''ocamlfind ocamlopt -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/ocaml-output/bootlibs -I src/ocaml-output -I src/prettyprint/ml -I src/parser/ml -I src/fstar/ml -I src/basic/ml -o src/ocaml-output/bootlibs/FStar_BaseTypes.cmx src/ocaml-output/bootlibs/FStar_BaseTypes.ml
''ocamlfind ocamlopt -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/basic/ml -I src/ocaml-output -I src/prettyprint/ml -I src/parser/ml -I src/ocaml-output/bootlibs -I src/fstar/ml -o src/basic/ml/FStar_Getopt.cmx src/basic/ml/FStar_Getopt.ml
''ocamlfind ocamlopt -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/basic/ml -I src/ocaml-output -I src/prettyprint/ml -I src/parser/ml -I src/ocaml-output/bootlibs -I src/fstar/ml -o src/basic/ml/FStar_Platform.cmx src/basic/ml/FStar_Platform.ml
''ocamlfind ocamlopt -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/ocaml-output/bootlibs -I src/ocaml-output -I src/prettyprint/ml -I src/parser/ml -I src/fstar/ml -I src/basic/ml -o src/ocaml-output/bootlibs/FStar_ST.cmx src/ocaml-output/bootlibs/FStar_ST.ml
''ocamlfind ocamlopt -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/ocaml-output/bootlibs -I src/ocaml-output -I src/prettyprint/ml -I src/parser/ml -I src/fstar/ml -I src/basic/ml -o src/ocaml-output/bootlibs/FStar_String.cmx src/ocaml-output/bootlibs/FStar_String.ml
''ocamlfind ocamlopt -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/basic/ml -I src/ocaml-output -I src/prettyprint/ml -I src/parser/ml -I src/ocaml-output/bootlibs -I src/fstar/ml -o src/basic/ml/FStar_Util.cmx src/basic/ml/FStar_Util.ml
File "src/basic/ml/FStar_Util.ml", line 47, characters 57-65:
Warning 40: st_mtime was selected from type BatUnix.stats.
It is not visible in the current scope, and will not 
be selected if the type becomes unknown.
''ocamlfind ocamlopt -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/ocaml-output -I src/prettyprint/ml -I src/parser/ml -I src/ocaml-output/bootlibs -I src/fstar/ml -I src/basic/ml -o src/ocaml-output/FStar_Version.cmx src/ocaml-output/FStar_Version.ml
''ocamlfind ocamlopt -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/basic/ml -I src/ocaml-output -I src/prettyprint/ml -I src/parser/ml -I src/ocaml-output/bootlibs -I src/fstar/ml -o src/basic/ml/FStar_Range.cmx src/basic/ml/FStar_Range.ml
''ocamlfind ocamlopt -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/ocaml-output -I src/prettyprint/ml -I src/parser/ml -I src/ocaml-output/bootlibs -I src/fstar/ml -I src/basic/ml -o src/ocaml-output/FStar_Ident.cmx src/ocaml-output/FStar_Ident.ml
''ocamlfind ocamlopt -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/ocaml-output -I src/prettyprint/ml -I src/parser/ml -I src/ocaml-output/bootlibs -I src/fstar/ml -I src/basic/ml -o src/ocaml-output/FStar_Options.cmx src/ocaml-output/FStar_Options.ml
''ocamlfind ocamlopt -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/ocaml-output -I src/prettyprint/ml -I src/parser/ml -I src/ocaml-output/bootlibs -I src/fstar/ml -I src/basic/ml -o src/ocaml-output/FStar_Const.cmx src/ocaml-output/FStar_Const.ml
''ocamlfind ocamlopt -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/ocaml-output -I src/prettyprint/ml -I src/parser/ml -I src/ocaml-output/bootlibs -I src/fstar/ml -I src/basic/ml -o src/ocaml-output/FStar_Errors.cmx src/ocaml-output/FStar_Errors.ml
''ocamlfind ocamlopt -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/basic/ml -I src/ocaml-output -I src/prettyprint/ml -I src/parser/ml -I src/ocaml-output/bootlibs -I src/fstar/ml -o src/basic/ml/FStar_Unionfind.cmx src/basic/ml/FStar_Unionfind.ml
''ocamlfind ocamlopt -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/ocaml-output -I src/prettyprint/ml -I src/parser/ml -I src/ocaml-output/bootlibs -I src/fstar/ml -I src/basic/ml -o src/ocaml-output/FStar_Syntax_Syntax.cmx src/ocaml-output/FStar_Syntax_Syntax.ml
''ocamlfind ocamlopt -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/ocaml-output -I src/prettyprint/ml -I src/parser/ml -I src/ocaml-output/bootlibs -I src/fstar/ml -I src/basic/ml -o src/ocaml-output/FStar_Syntax_Const.cmx src/ocaml-output/FStar_Syntax_Const.ml
''ocamlfind ocamlopt -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/ocaml-output/bootlibs -I src/ocaml-output -I src/prettyprint/ml -I src/parser/ml -I src/fstar/ml -I src/basic/ml -o src/ocaml-output/bootlibs/FStar_Option.cmx src/ocaml-output/bootlibs/FStar_Option.ml
''ocamlfind ocamlopt -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/ocaml-output -I src/prettyprint/ml -I src/parser/ml -I src/ocaml-output/bootlibs -I src/fstar/ml -I src/basic/ml -o src/ocaml-output/FStar_Syntax_Subst.cmx src/ocaml-output/FStar_Syntax_Subst.ml
''ocamlfind ocamlopt -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/ocaml-output -I src/prettyprint/ml -I src/parser/ml -I src/ocaml-output/bootlibs -I src/fstar/ml -I src/basic/ml -o src/ocaml-output/FStar_Syntax_InstFV.cmx src/ocaml-output/FStar_Syntax_InstFV.ml
''ocamlfind ocamlopt -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/ocaml-output -I src/prettyprint/ml -I src/parser/ml -I src/ocaml-output/bootlibs -I src/fstar/ml -I src/basic/ml -o src/ocaml-output/FStar_Syntax_Util.cmx src/ocaml-output/FStar_Syntax_Util.ml
''ocamlfind ocamlopt -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/ocaml-output -I src/prettyprint/ml -I src/parser/ml -I src/ocaml-output/bootlibs -I src/fstar/ml -I src/basic/ml -o src/ocaml-output/FStar_Syntax_Print.cmx src/ocaml-output/FStar_Syntax_Print.ml
''ocamlfind ocamlopt -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/ocaml-output -I src/prettyprint/ml -I src/parser/ml -I src/ocaml-output/bootlibs -I src/fstar/ml -I src/basic/ml -o src/ocaml-output/FStar_Parser_AST.cmx src/ocaml-output/FStar_Parser_AST.ml
''ocamlfind ocamlopt -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/parser/ml -I src/ocaml-output -I src/prettyprint/ml -I src/ocaml-output/bootlibs -I src/fstar/ml -I src/basic/ml -o src/parser/ml/FStar_Parser_Util.cmx src/parser/ml/FStar_Parser_Util.ml
''ocamlfind ocamlopt -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/ocaml-output -I src/prettyprint/ml -I src/parser/ml -I src/ocaml-output/bootlibs -I src/fstar/ml -I src/basic/ml -o src/ocaml-output/FStar_Parser_Parse.cmx src/ocaml-output/FStar_Parser_Parse.ml
''ocamlfind ocamlopt -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/parser/ml -I src/ocaml-output -I src/prettyprint/ml -I src/ocaml-output/bootlibs -I src/fstar/ml -I src/basic/ml -o src/parser/ml/FStar_Parser_LexFStar.cmx src/parser/ml/FStar_Parser_LexFStar.ml
''ocamlfind ocamlopt -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/parser/ml -I src/ocaml-output -I src/prettyprint/ml -I src/ocaml-output/bootlibs -I src/fstar/ml -I src/basic/ml -o src/parser/ml/FStar_Parser_ParseIt.cmx src/parser/ml/FStar_Parser_ParseIt.ml
''ocamlfind ocamlopt -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/ocaml-output -I src/prettyprint/ml -I src/parser/ml -I src/ocaml-output/bootlibs -I src/fstar/ml -I src/basic/ml -o src/ocaml-output/FStar_Parser_Driver.cmx src/ocaml-output/FStar_Parser_Driver.ml
''ocamlfind ocamlopt -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/ocaml-output -I src/prettyprint/ml -I src/parser/ml -I src/ocaml-output/bootlibs -I src/fstar/ml -I src/basic/ml -o src/ocaml-output/FStar_Parser_Dep.cmx src/ocaml-output/FStar_Parser_Dep.ml
''ocamlfind ocamlopt -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/ocaml-output -I src/prettyprint/ml -I src/parser/ml -I src/ocaml-output/bootlibs -I src/fstar/ml -I src/basic/ml -o src/ocaml-output/FStar_Extraction_ML_Syntax.cmx src/ocaml-output/FStar_Extraction_ML_Syntax.ml
''ocamlfind ocamlopt -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/ocaml-output -I src/prettyprint/ml -I src/parser/ml -I src/ocaml-output/bootlibs -I src/fstar/ml -I src/basic/ml -o src/ocaml-output/FStar_Syntax_Free.cmx src/ocaml-output/FStar_Syntax_Free.ml
''ocamlfind ocamlopt -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/ocaml-output -I src/prettyprint/ml -I src/parser/ml -I src/ocaml-output/bootlibs -I src/fstar/ml -I src/basic/ml -o src/ocaml-output/FStar_TypeChecker_Common.cmx src/ocaml-output/FStar_TypeChecker_Common.ml
''ocamlfind ocamlopt -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/ocaml-output -I src/prettyprint/ml -I src/parser/ml -I src/ocaml-output/bootlibs -I src/fstar/ml -I src/basic/ml -o src/ocaml-output/FStar_TypeChecker_Env.cmx src/ocaml-output/FStar_TypeChecker_Env.ml
''ocamlfind ocamlopt -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/ocaml-output -I src/prettyprint/ml -I src/parser/ml -I src/ocaml-output/bootlibs -I src/fstar/ml -I src/basic/ml -o src/ocaml-output/FStar_Extraction_ML_UEnv.cmx src/ocaml-output/FStar_Extraction_ML_UEnv.ml
''ocamlfind ocamlopt -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/basic/ml -I src/ocaml-output -I src/prettyprint/ml -I src/parser/ml -I src/ocaml-output/bootlibs -I src/fstar/ml -o src/basic/ml/FStar_Bytes.cmx src/basic/ml/FStar_Bytes.ml
''ocamlfind ocamlopt -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/ocaml-output -I src/prettyprint/ml -I src/parser/ml -I src/ocaml-output/bootlibs -I src/fstar/ml -I src/basic/ml -o src/ocaml-output/FStar_Extraction_ML_Util.cmx src/ocaml-output/FStar_Extraction_ML_Util.ml
''ocamlfind ocamlopt -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/ocaml-output -I src/prettyprint/ml -I src/parser/ml -I src/ocaml-output/bootlibs -I src/fstar/ml -I src/basic/ml -o src/ocaml-output/FStar_Format.cmx src/ocaml-output/FStar_Format.ml
''ocamlfind ocamlopt -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/ocaml-output -I src/prettyprint/ml -I src/parser/ml -I src/ocaml-output/bootlibs -I src/fstar/ml -I src/basic/ml -o src/ocaml-output/FStar_Extraction_ML_Code.cmx src/ocaml-output/FStar_Extraction_ML_Code.ml
''ocamlfind ocamlopt -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/ocaml-output -I src/prettyprint/ml -I src/parser/ml -I src/ocaml-output/bootlibs -I src/fstar/ml -I src/basic/ml -o src/ocaml-output/FStar_TypeChecker_Normalize.cmx src/ocaml-output/FStar_TypeChecker_Normalize.ml
''ocamlfind ocamlopt -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/ocaml-output -I src/prettyprint/ml -I src/parser/ml -I src/ocaml-output/bootlibs -I src/fstar/ml -I src/basic/ml -o src/ocaml-output/FStar_TypeChecker_Err.cmx src/ocaml-output/FStar_TypeChecker_Err.ml
''ocamlfind ocamlopt -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/ocaml-output -I src/prettyprint/ml -I src/parser/ml -I src/ocaml-output/bootlibs -I src/fstar/ml -I src/basic/ml -o src/ocaml-output/FStar_TypeChecker_Rel.cmx src/ocaml-output/FStar_TypeChecker_Rel.ml
''ocamlfind ocamlopt -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/ocaml-output -I src/prettyprint/ml -I src/parser/ml -I src/ocaml-output/bootlibs -I src/fstar/ml -I src/basic/ml -o src/ocaml-output/FStar_TypeChecker_Util.cmx src/ocaml-output/FStar_TypeChecker_Util.ml
''ocamlfind ocamlopt -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/ocaml-output -I src/prettyprint/ml -I src/parser/ml -I src/ocaml-output/bootlibs -I src/fstar/ml -I src/basic/ml -o src/ocaml-output/FStar_TypeChecker_TcTerm.cmx src/ocaml-output/FStar_TypeChecker_TcTerm.ml
''ocamlfind ocamlopt -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/ocaml-output -I src/prettyprint/ml -I src/parser/ml -I src/ocaml-output/bootlibs -I src/fstar/ml -I src/basic/ml -o src/ocaml-output/FStar_Extraction_ML_Term.cmx src/ocaml-output/FStar_Extraction_ML_Term.ml
''ocamlfind ocamlopt -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/prettyprint/ml -I src/ocaml-output -I src/parser/ml -I src/ocaml-output/bootlibs -I src/fstar/ml -I src/basic/ml -o src/prettyprint/ml/FStar_Pprint.cmx src/prettyprint/ml/FStar_Pprint.ml
''ocamlfind ocamlopt -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/ocaml-output -I src/prettyprint/ml -I src/parser/ml -I src/ocaml-output/bootlibs -I src/fstar/ml -I src/basic/ml -o src/ocaml-output/FStar_Parser_ToDocument.cmx src/ocaml-output/FStar_Parser_ToDocument.ml
''ocamlfind ocamlopt -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/ocaml-output -I src/prettyprint/ml -I src/parser/ml -I src/ocaml-output/bootlibs -I src/fstar/ml -I src/basic/ml -o src/ocaml-output/FStar_Dependencies.cmx src/ocaml-output/FStar_Dependencies.ml
''ocamlfind ocamlopt -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/ocaml-output -I src/prettyprint/ml -I src/parser/ml -I src/ocaml-output/bootlibs -I src/fstar/ml -I src/basic/ml -o src/ocaml-output/FStar_SMTEncoding_Term.cmx src/ocaml-output/FStar_SMTEncoding_Term.ml
''ocamlfind ocamlopt -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/ocaml-output -I src/prettyprint/ml -I src/parser/ml -I src/ocaml-output/bootlibs -I src/fstar/ml -I src/basic/ml -o src/ocaml-output/FStar_SMTEncoding_Util.cmx src/ocaml-output/FStar_SMTEncoding_Util.ml
''ocamlfind ocamlopt -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/ocaml-output -I src/prettyprint/ml -I src/parser/ml -I src/ocaml-output/bootlibs -I src/fstar/ml -I src/basic/ml -o src/ocaml-output/FStar_SMTEncoding_Z3.cmx src/ocaml-output/FStar_SMTEncoding_Z3.ml
''ocamlfind ocamlopt -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/ocaml-output -I src/prettyprint/ml -I src/parser/ml -I src/ocaml-output/bootlibs -I src/fstar/ml -I src/basic/ml -o src/ocaml-output/FStar_SMTEncoding_ErrorReporting.cmx src/ocaml-output/FStar_SMTEncoding_ErrorReporting.ml
''ocamlfind ocamlopt -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/ocaml-output -I src/prettyprint/ml -I src/parser/ml -I src/ocaml-output/bootlibs -I src/fstar/ml -I src/basic/ml -o src/ocaml-output/FStar_SMTEncoding_Encode.cmx src/ocaml-output/FStar_SMTEncoding_Encode.ml
''ocamlfind ocamlopt -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/ocaml-output -I src/prettyprint/ml -I src/parser/ml -I src/ocaml-output/bootlibs -I src/fstar/ml -I src/basic/ml -o src/ocaml-output/FStar_SMTEncoding_SplitQueryCases.cmx src/ocaml-output/FStar_SMTEncoding_SplitQueryCases.ml
''ocamlfind ocamlopt -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/ocaml-output -I src/prettyprint/ml -I src/parser/ml -I src/ocaml-output/bootlibs -I src/fstar/ml -I src/basic/ml -o src/ocaml-output/FStar_SMTEncoding_Solver.cmx src/ocaml-output/FStar_SMTEncoding_Solver.ml
''ocamlfind ocamlopt -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/ocaml-output -I src/prettyprint/ml -I src/parser/ml -I src/ocaml-output/bootlibs -I src/fstar/ml -I src/basic/ml -o src/ocaml-output/FStar_ToSyntax_Env.cmx src/ocaml-output/FStar_ToSyntax_Env.ml
''ocamlfind ocamlopt -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/ocaml-output -I src/prettyprint/ml -I src/parser/ml -I src/ocaml-output/bootlibs -I src/fstar/ml -I src/basic/ml -o src/ocaml-output/FStar_Syntax_MutRecTy.cmx src/ocaml-output/FStar_Syntax_MutRecTy.ml
''ocamlfind ocamlopt -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/ocaml-output -I src/prettyprint/ml -I src/parser/ml -I src/ocaml-output/bootlibs -I src/fstar/ml -I src/basic/ml -o src/ocaml-output/FStar_TypeChecker_DMFF.cmx src/ocaml-output/FStar_TypeChecker_DMFF.ml
''ocamlfind ocamlopt -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/ocaml-output -I src/prettyprint/ml -I src/parser/ml -I src/ocaml-output/bootlibs -I src/fstar/ml -I src/basic/ml -o src/ocaml-output/FStar_TypeChecker_TcInductive.cmx src/ocaml-output/FStar_TypeChecker_TcInductive.ml
''ocamlfind ocamlopt -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/ocaml-output -I src/prettyprint/ml -I src/parser/ml -I src/ocaml-output/bootlibs -I src/fstar/ml -I src/basic/ml -o src/ocaml-output/FStar_Parser_Interleave.cmx src/ocaml-output/FStar_Parser_Interleave.ml
''ocamlfind ocamlopt -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/ocaml-output -I src/prettyprint/ml -I src/parser/ml -I src/ocaml-output/bootlibs -I src/fstar/ml -I src/basic/ml -o src/ocaml-output/FStar_ToSyntax_ToSyntax.cmx src/ocaml-output/FStar_ToSyntax_ToSyntax.ml
''ocamlfind ocamlopt -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/ocaml-output -I src/prettyprint/ml -I src/parser/ml -I src/ocaml-output/bootlibs -I src/fstar/ml -I src/basic/ml -o src/ocaml-output/FStar_TypeChecker_Tc.cmx src/ocaml-output/FStar_TypeChecker_Tc.ml
''ocamlfind ocamlopt -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/ocaml-output -I src/prettyprint/ml -I src/parser/ml -I src/ocaml-output/bootlibs -I src/fstar/ml -I src/basic/ml -o src/ocaml-output/FStar_Universal.cmx src/ocaml-output/FStar_Universal.ml
''ocamlfind ocamlopt -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/ocaml-output -I src/prettyprint/ml -I src/parser/ml -I src/ocaml-output/bootlibs -I src/fstar/ml -I src/basic/ml -o src/ocaml-output/FStar_Extraction_Kremlin.cmx src/ocaml-output/FStar_Extraction_Kremlin.ml
''ocamlfind ocamlopt -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/ocaml-output -I src/prettyprint/ml -I src/parser/ml -I src/ocaml-output/bootlibs -I src/fstar/ml -I src/basic/ml -o src/ocaml-output/FStar_Extraction_ML_Modul.cmx src/ocaml-output/FStar_Extraction_ML_Modul.ml
''ocamlfind ocamlopt -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/ocaml-output -I src/prettyprint/ml -I src/parser/ml -I src/ocaml-output/bootlibs -I src/fstar/ml -I src/basic/ml -o src/ocaml-output/FStar_Fsdoc_Generator.cmx src/ocaml-output/FStar_Fsdoc_Generator.ml
''ocamlfind ocamlopt -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/ocaml-output -I src/prettyprint/ml -I src/parser/ml -I src/ocaml-output/bootlibs -I src/fstar/ml -I src/basic/ml -o src/ocaml-output/FStar_Indent.cmx src/ocaml-output/FStar_Indent.ml
''ocamlfind ocamlopt -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/ocaml-output -I src/prettyprint/ml -I src/parser/ml -I src/ocaml-output/bootlibs -I src/fstar/ml -I src/basic/ml -o src/ocaml-output/FStar_Interactive.cmx src/ocaml-output/FStar_Interactive.ml
''ocamlfind ocamlopt -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/ocaml-output -I src/prettyprint/ml -I src/parser/ml -I src/ocaml-output/bootlibs -I src/fstar/ml -I src/basic/ml -o src/ocaml-output/FStar_Main.cmx src/ocaml-output/FStar_Main.ml
''ocamlfind ocamlopt -c -g -annot -bin-annot -thread -w -8-11-21-26-28 -package batteries -package zarith -package yojson -package pprint -I src/fstar/ml -I src/ocaml-output -I src/prettyprint/ml -I src/parser/ml -I src/ocaml-output/bootlibs -I src/basic/ml -o src/fstar/ml/main.cmx src/fstar/ml/main.ml
''ocamlfind ocamlopt -linkpkg -thread -package batteries -package zarith -package yojson -package pprint src/ocaml-output/bootlibs/FStar_List.cmx src/ocaml-output/bootlibs/MkPrims.cmx src/ocaml-output/bootlibs/prims.cmx src/basic/ml/FStar_Util.cmx src/basic/ml/FStar_Bytes.cmx src/basic/ml/FStar_Getopt.cmx src/basic/ml/FStar_Platform.cmx src/ocaml-output/bootlibs/FStar_Char.cmx src/ocaml-output/bootlibs/FStar_Float.cmx src/ocaml-output/bootlibs/FStar_Int16.cmx src/ocaml-output/bootlibs/FStar_Int32.cmx src/ocaml-output/bootlibs/FStar_Int64.cmx src/ocaml-output/bootlibs/FStar_Int8.cmx src/ocaml-output/bootlibs/FStar_UInt16.cmx src/ocaml-output/bootlibs/FStar_UInt8.cmx src/ocaml-output/bootlibs/FStar_BaseTypes.cmx src/basic/ml/FStar_Range.cmx src/basic/ml/FStar_Unionfind.cmx src/ocaml-output/bootlibs/FStar_All.cmx src/ocaml-output/bootlibs/FStar_ST.cmx src/ocaml-output/bootlibs/FStar_String.cmx src/ocaml-output/FStar_Ident.cmx src/ocaml-output/FStar_Const.cmx src/ocaml-output/FStar_Version.cmx src/ocaml-output/FStar_Options.cmx src/ocaml-output/FStar_Errors.cmx src/ocaml-output/FStar_Syntax_Syntax.cmx src/ocaml-output/FStar_Syntax_Const.cmx src/ocaml-output/bootlibs/FStar_Option.cmx src/ocaml-output/FStar_Syntax_Subst.cmx src/ocaml-output/FStar_Syntax_InstFV.cmx src/ocaml-output/FStar_Syntax_Util.cmx src/ocaml-output/FStar_Syntax_Print.cmx src/ocaml-output/FStar_Parser_AST.cmx src/parser/ml/FStar_Parser_Util.cmx src/ocaml-output/FStar_Parser_Parse.cmx src/parser/ml/FStar_Parser_LexFStar.cmx src/parser/ml/FStar_Parser_ParseIt.cmx src/ocaml-output/FStar_Parser_Driver.cmx src/ocaml-output/FStar_Parser_Dep.cmx src/ocaml-output/FStar_Dependencies.cmx src/ocaml-output/FStar_Extraction_ML_Syntax.cmx src/ocaml-output/FStar_Syntax_Free.cmx src/ocaml-output/FStar_TypeChecker_Common.cmx src/ocaml-output/FStar_TypeChecker_Env.cmx src/ocaml-output/FStar_Extraction_ML_UEnv.cmx src/ocaml-output/FStar_Extraction_ML_Util.cmx src/ocaml-output/FStar_Format.cmx src/ocaml-output/FStar_Extraction_ML_Code.cmx src/ocaml-output/FStar_Extraction_Kremlin.cmx src/ocaml-output/FStar_TypeChecker_Normalize.cmx src/ocaml-output/FStar_TypeChecker_Err.cmx src/ocaml-output/FStar_TypeChecker_Rel.cmx src/ocaml-output/FStar_TypeChecker_Util.cmx src/ocaml-output/FStar_TypeChecker_TcTerm.cmx src/ocaml-output/FStar_Extraction_ML_Term.cmx src/ocaml-output/FStar_Extraction_ML_Modul.cmx src/ocaml-output/FStar_Fsdoc_Generator.cmx src/prettyprint/ml/FStar_Pprint.cmx src/ocaml-output/FStar_Parser_ToDocument.cmx src/ocaml-output/FStar_Indent.cmx src/ocaml-output/FStar_Parser_Interleave.cmx src/ocaml-output/FStar_SMTEncoding_Term.cmx src/ocaml-output/FStar_SMTEncoding_Util.cmx src/ocaml-output/FStar_SMTEncoding_Z3.cmx src/ocaml-output/FStar_SMTEncoding_ErrorReporting.cmx src/ocaml-output/FStar_SMTEncoding_Encode.cmx src/ocaml-output/FStar_SMTEncoding_SplitQueryCases.cmx src/ocaml-output/FStar_SMTEncoding_Solver.cmx src/ocaml-output/FStar_Syntax_MutRecTy.cmx src/ocaml-output/FStar_ToSyntax_Env.cmx src/ocaml-output/FStar_ToSyntax_ToSyntax.cmx src/ocaml-output/FStar_TypeChecker_DMFF.cmx src/ocaml-output/FStar_TypeChecker_TcInductive.cmx src/ocaml-output/FStar_TypeChecker_Tc.cmx src/ocaml-output/FStar_Universal.cmx src/ocaml-output/FStar_Interactive.cmx src/ocaml-output/FStar_Main.cmx src/fstar/ml/main.cmx -o src/fstar/ml/main.native
# Parallel statistics: { count(total): 18(190), max: 8, min: 2, average(total): 3.778(1.263) }
cp _build/src/fstar/ml/main.native ../../bin/fstar.exe
cp _build/src/fstar/ml/main.native ../../bin/fstar.ocaml
make: Leaving directory '/cygdrive/c/Build/Agent/_work/36/s/fstar/src/ocaml-output'
make: Entering directory '/cygdrive/c/Build/Agent/_work/36/s/src/tls'
C:/Build/Agent/_work/36/s/fstar/bin/fstar.exe --version | grep ^commit | sed 's/commit=\([^ ]*\).*/\1/' > ../../.fstar_version
C:/Build/Agent/_work/36/s/fstar/bin/fstar.exe --fstar_home C:/Build/Agent/_work/36/s/fstar --record_hints --hint_info --trace_error --max_fuel 4 --initial_fuel 0 --max_ifuel 2 --initial_ifuel 1 --z3rlimit 20 --__temp_no_proj Handshake --__temp_no_proj Connection --use_hints --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/crypto/hacl \
--include C:/Build/Agent/_work/36/s/fstar/ucontrib/CoreCrypto/fst/ --include C:/Build/Agent/_work/36/s/fstar/ucontrib/Platform/fst/ --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/crypto/real --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/LowCProvider/fst --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/crypto --include ../../libs/ffi --include C:/Build/Agent/_work/36/s/fstar/ulib/hyperstack \
--include ideal-flags \
--verify_module Flags \
Flags.fst
C:/Build/Agent/_work/36/s/fstar/bin/fstar.exe --fstar_home C:/Build/Agent/_work/36/s/fstar --record_hints --hint_info --trace_error --max_fuel 4 --initial_fuel 0 --max_ifuel 2 --initial_ifuel 1 --z3rlimit 20 --__temp_no_proj Handshake --__temp_no_proj Connection --use_hints --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/crypto/hacl \
--include C:/Build/Agent/_work/36/s/fstar/ucontrib/CoreCrypto/fst/ --include C:/Build/Agent/_work/36/s/fstar/ucontrib/Platform/fst/ --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/crypto/real --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/LowCProvider/fst --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/crypto --include ../../libs/ffi --include C:/Build/Agent/_work/36/s/fstar/ulib/hyperstack \
--include ideal-flags \
--verify_module MonotoneMap \
MonotoneMap.fst
C:/Build/Agent/_work/36/s/fstar/bin/fstar.exe --fstar_home C:/Build/Agent/_work/36/s/fstar --record_hints --hint_info --trace_error --max_fuel 4 --initial_fuel 0 --max_ifuel 2 --initial_ifuel 1 --z3rlimit 20 --__temp_no_proj Handshake --__temp_no_proj Connection --use_hints --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/crypto/hacl \
--include C:/Build/Agent/_work/36/s/fstar/ucontrib/CoreCrypto/fst/ --include C:/Build/Agent/_work/36/s/fstar/ucontrib/Platform/fst/ --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/crypto/real --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/LowCProvider/fst --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/crypto --include ../../libs/ffi --include C:/Build/Agent/_work/36/s/fstar/ulib/hyperstack \
--include ideal-flags \
--verify_module TLSError \
TLSError.fst
C:/Build/Agent/_work/36/s/fstar/bin/fstar.exe --fstar_home C:/Build/Agent/_work/36/s/fstar --record_hints --hint_info --trace_error --max_fuel 4 --initial_fuel 0 --max_ifuel 2 --initial_ifuel 1 --z3rlimit 20 --__temp_no_proj Handshake --__temp_no_proj Connection --use_hints --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/crypto/hacl \
--include C:/Build/Agent/_work/36/s/fstar/ucontrib/CoreCrypto/fst/ --include C:/Build/Agent/_work/36/s/fstar/ucontrib/Platform/fst/ --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/crypto/real --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/LowCProvider/fst --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/crypto --include ../../libs/ffi --include C:/Build/Agent/_work/36/s/fstar/ulib/hyperstack \
--include ideal-flags \
--verify_module TLSConstants \
TLSConstants.fst
C:/Build/Agent/_work/36/s/fstar/bin/fstar.exe --fstar_home C:/Build/Agent/_work/36/s/fstar --record_hints --hint_info --trace_error --max_fuel 4 --initial_fuel 0 --max_ifuel 2 --initial_ifuel 1 --z3rlimit 20 --__temp_no_proj Handshake --__temp_no_proj Connection --use_hints --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/crypto/hacl \
--include C:/Build/Agent/_work/36/s/fstar/ucontrib/CoreCrypto/fst/ --include C:/Build/Agent/_work/36/s/fstar/ucontrib/Platform/fst/ --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/crypto/real --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/LowCProvider/fst --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/crypto --include ../../libs/ffi --include C:/Build/Agent/_work/36/s/fstar/ulib/hyperstack \
--include ideal-flags \
--verify_module Transport \
Transport.fst
C:/Build/Agent/_work/36/s/fstar/bin/fstar.exe --fstar_home C:/Build/Agent/_work/36/s/fstar --record_hints --hint_info --trace_error --max_fuel 4 --initial_fuel 0 --max_ifuel 2 --initial_ifuel 1 --z3rlimit 20 --__temp_no_proj Handshake --__temp_no_proj Connection --use_hints --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/crypto/hacl \
--include C:/Build/Agent/_work/36/s/fstar/ucontrib/CoreCrypto/fst/ --include C:/Build/Agent/_work/36/s/fstar/ucontrib/Platform/fst/ --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/crypto/real --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/LowCProvider/fst --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/crypto --include ../../libs/ffi --include C:/Build/Agent/_work/36/s/fstar/ulib/hyperstack \
--include ideal-flags \
--verify_module Nonce \
Nonce.fst
C:/Build/Agent/_work/36/s/fstar/bin/fstar.exe --fstar_home C:/Build/Agent/_work/36/s/fstar --record_hints --hint_info --trace_error --max_fuel 4 --initial_fuel 0 --max_ifuel 2 --initial_ifuel 1 --z3rlimit 20 --__temp_no_proj Handshake --__temp_no_proj Connection --use_hints --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/crypto/hacl \
--include C:/Build/Agent/_work/36/s/fstar/ucontrib/CoreCrypto/fst/ --include C:/Build/Agent/_work/36/s/fstar/ucontrib/Platform/fst/ --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/crypto/real --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/LowCProvider/fst --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/crypto --include ../../libs/ffi --include C:/Build/Agent/_work/36/s/fstar/ulib/hyperstack \
--include ideal-flags \
--verify_module RSAKey \
RSAKey.fst
C:/Build/Agent/_work/36/s/fstar/bin/fstar.exe --fstar_home C:/Build/Agent/_work/36/s/fstar --record_hints --hint_info --trace_error --max_fuel 4 --initial_fuel 0 --max_ifuel 2 --initial_ifuel 1 --z3rlimit 20 --__temp_no_proj Handshake --__temp_no_proj Connection --use_hints --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/crypto/hacl \
--include C:/Build/Agent/_work/36/s/fstar/ucontrib/CoreCrypto/fst/ --include C:/Build/Agent/_work/36/s/fstar/ucontrib/Platform/fst/ --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/crypto/real --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/LowCProvider/fst --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/crypto --include ../../libs/ffi --include C:/Build/Agent/_work/36/s/fstar/ulib/hyperstack \
--include ideal-flags \
--verify_module DHGroup \
DHGroup.fst
C:/Build/Agent/_work/36/s/fstar/bin/fstar.exe --fstar_home C:/Build/Agent/_work/36/s/fstar --record_hints --hint_info --trace_error --max_fuel 4 --initial_fuel 0 --max_ifuel 2 --initial_ifuel 1 --z3rlimit 20 --__temp_no_proj Handshake --__temp_no_proj Connection --use_hints --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/crypto/hacl \
--include C:/Build/Agent/_work/36/s/fstar/ucontrib/CoreCrypto/fst/ --include C:/Build/Agent/_work/36/s/fstar/ucontrib/Platform/fst/ --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/crypto/real --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/LowCProvider/fst --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/crypto --include ../../libs/ffi --include C:/Build/Agent/_work/36/s/fstar/ulib/hyperstack \
--include ideal-flags \
--verify_module ECGroup \
ECGroup.fst
C:/Build/Agent/_work/36/s/fstar/bin/fstar.exe --fstar_home C:/Build/Agent/_work/36/s/fstar --record_hints --hint_info --trace_error --max_fuel 4 --initial_fuel 0 --max_ifuel 2 --initial_ifuel 1 --z3rlimit 20 --__temp_no_proj Handshake --__temp_no_proj Connection --use_hints --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/crypto/hacl \
--include C:/Build/Agent/_work/36/s/fstar/ucontrib/CoreCrypto/fst/ --include C:/Build/Agent/_work/36/s/fstar/ucontrib/Platform/fst/ --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/crypto/real --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/LowCProvider/fst --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/crypto --include ../../libs/ffi --include C:/Build/Agent/_work/36/s/fstar/ulib/hyperstack \
--include ideal-flags \
--verify_module CommonDH \
CommonDH.fst
C:/Build/Agent/_work/36/s/fstar/bin/fstar.exe --fstar_home C:/Build/Agent/_work/36/s/fstar --record_hints --hint_info --trace_error --max_fuel 4 --initial_fuel 0 --max_ifuel 2 --initial_ifuel 1 --z3rlimit 20 --__temp_no_proj Handshake --__temp_no_proj Connection --use_hints --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/crypto/hacl \
--include C:/Build/Agent/_work/36/s/fstar/ucontrib/CoreCrypto/fst/ --include C:/Build/Agent/_work/36/s/fstar/ucontrib/Platform/fst/ --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/crypto/real --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/LowCProvider/fst --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/crypto --include ../../libs/ffi --include C:/Build/Agent/_work/36/s/fstar/ulib/hyperstack \
--include ideal-flags \
--verify_module PMS \
PMS.fst
C:/Build/Agent/_work/36/s/fstar/bin/fstar.exe --fstar_home C:/Build/Agent/_work/36/s/fstar --record_hints --hint_info --trace_error --max_fuel 4 --initial_fuel 0 --max_ifuel 2 --initial_ifuel 1 --z3rlimit 20 --__temp_no_proj Handshake --__temp_no_proj Connection --use_hints --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/crypto/hacl \
--include C:/Build/Agent/_work/36/s/fstar/ucontrib/CoreCrypto/fst/ --include C:/Build/Agent/_work/36/s/fstar/ucontrib/Platform/fst/ --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/crypto/real --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/LowCProvider/fst --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/crypto --include ../../libs/ffi --include C:/Build/Agent/_work/36/s/fstar/ulib/hyperstack \
--include ideal-flags \
--verify_module Hashing \
Hashing.fst
C:/Build/Agent/_work/36/s/fstar/bin/fstar.exe --fstar_home C:/Build/Agent/_work/36/s/fstar --record_hints --hint_info --trace_error --max_fuel 4 --initial_fuel 0 --max_ifuel 2 --initial_ifuel 1 --z3rlimit 20 --__temp_no_proj Handshake --__temp_no_proj Connection --use_hints --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/crypto/hacl \
--include C:/Build/Agent/_work/36/s/fstar/ucontrib/CoreCrypto/fst/ --include C:/Build/Agent/_work/36/s/fstar/ucontrib/Platform/fst/ --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/crypto/real --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/LowCProvider/fst --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/crypto --include ../../libs/ffi --include C:/Build/Agent/_work/36/s/fstar/ulib/hyperstack \
--include ideal-flags \
--verify_module HashMAC \
HashMAC.fst
C:/Build/Agent/_work/36/s/fstar/bin/fstar.exe --fstar_home C:/Build/Agent/_work/36/s/fstar --record_hints --hint_info --trace_error --max_fuel 4 --initial_fuel 0 --max_ifuel 2 --initial_ifuel 1 --z3rlimit 20 --__temp_no_proj Handshake --__temp_no_proj Connection --use_hints --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/crypto/hacl \
--include C:/Build/Agent/_work/36/s/fstar/ucontrib/CoreCrypto/fst/ --include C:/Build/Agent/_work/36/s/fstar/ucontrib/Platform/fst/ --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/crypto/real --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/LowCProvider/fst --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/crypto --include ../../libs/ffi --include C:/Build/Agent/_work/36/s/fstar/ulib/hyperstack \
--include ideal-flags \
--verify_module Cert \
Cert.fst
C:/Build/Agent/_work/36/s/fstar/bin/fstar.exe --fstar_home C:/Build/Agent/_work/36/s/fstar --record_hints --hint_info --trace_error --max_fuel 4 --initial_fuel 0 --max_ifuel 2 --initial_ifuel 1 --z3rlimit 20 --__temp_no_proj Handshake --__temp_no_proj Connection --use_hints --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/crypto/hacl \
--include C:/Build/Agent/_work/36/s/fstar/ucontrib/CoreCrypto/fst/ --include C:/Build/Agent/_work/36/s/fstar/ucontrib/Platform/fst/ --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/crypto/real --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/LowCProvider/fst --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/crypto --include ../../libs/ffi --include C:/Build/Agent/_work/36/s/fstar/ulib/hyperstack \
--include ideal-flags \
--verify_module Signature \
Signature.fst
C:/Build/Agent/_work/36/s/fstar/bin/fstar.exe --fstar_home C:/Build/Agent/_work/36/s/fstar --record_hints --hint_info --trace_error --max_fuel 4 --initial_fuel 0 --max_ifuel 2 --initial_ifuel 1 --z3rlimit 20 --__temp_no_proj Handshake --__temp_no_proj Connection --use_hints --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/crypto/hacl \
--include C:/Build/Agent/_work/36/s/fstar/ucontrib/CoreCrypto/fst/ --include C:/Build/Agent/_work/36/s/fstar/ucontrib/Platform/fst/ --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/crypto/real --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/LowCProvider/fst --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/crypto --include ../../libs/ffi --include C:/Build/Agent/_work/36/s/fstar/ulib/hyperstack \
--include ideal-flags \
--verify_module TLSInfo \
TLSInfo.fst
C:/Build/Agent/_work/36/s/fstar/bin/fstar.exe --fstar_home C:/Build/Agent/_work/36/s/fstar --record_hints --hint_info --trace_error --max_fuel 4 --initial_fuel 0 --max_ifuel 2 --initial_ifuel 1 --z3rlimit 20 --__temp_no_proj Handshake --__temp_no_proj Connection --use_hints --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/crypto/hacl \
--include C:/Build/Agent/_work/36/s/fstar/ucontrib/CoreCrypto/fst/ --include C:/Build/Agent/_work/36/s/fstar/ucontrib/Platform/fst/ --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/crypto/real --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/LowCProvider/fst --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/crypto --include ../../libs/ffi --include C:/Build/Agent/_work/36/s/fstar/ulib/hyperstack \
--include ideal-flags \
--verify_module IdNonce \
IdNonce.fst
C:/Build/Agent/_work/36/s/fstar/bin/fstar.exe --fstar_home C:/Build/Agent/_work/36/s/fstar --record_hints --hint_info --trace_error --max_fuel 4 --initial_fuel 0 --max_ifuel 2 --initial_ifuel 1 --z3rlimit 20 --__temp_no_proj Handshake --__temp_no_proj Connection --use_hints --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/crypto/hacl \
--include C:/Build/Agent/_work/36/s/fstar/ucontrib/CoreCrypto/fst/ --include C:/Build/Agent/_work/36/s/fstar/ucontrib/Platform/fst/ --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/crypto/real --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/LowCProvider/fst --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/crypto --include ../../libs/ffi --include C:/Build/Agent/_work/36/s/fstar/ulib/hyperstack \
--include ideal-flags \
--verify_module TLSExtensions \
TLSExtensions.fst
C:/Build/Agent/_work/36/s/fstar/bin/fstar.exe --fstar_home C:/Build/Agent/_work/36/s/fstar --record_hints --hint_info --trace_error --max_fuel 4 --initial_fuel 0 --max_ifuel 2 --initial_ifuel 1 --z3rlimit 20 --__temp_no_proj Handshake --__temp_no_proj Connection --use_hints --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/crypto/hacl \
--include C:/Build/Agent/_work/36/s/fstar/ucontrib/CoreCrypto/fst/ --include C:/Build/Agent/_work/36/s/fstar/ucontrib/Platform/fst/ --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/crypto/real --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/LowCProvider/fst --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/crypto --include ../../libs/ffi --include C:/Build/Agent/_work/36/s/fstar/ulib/hyperstack \
--include ideal-flags \
--verify_module Range \
Range.fst
C:/Build/Agent/_work/36/s/fstar/bin/fstar.exe --fstar_home C:/Build/Agent/_work/36/s/fstar --record_hints --hint_info --trace_error --max_fuel 4 --initial_fuel 0 --max_ifuel 2 --initial_ifuel 1 --z3rlimit 20 --__temp_no_proj Handshake --__temp_no_proj Connection --use_hints --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/crypto/hacl \
--include C:/Build/Agent/_work/36/s/fstar/ucontrib/CoreCrypto/fst/ --include C:/Build/Agent/_work/36/s/fstar/ucontrib/Platform/fst/ --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/crypto/real --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/LowCProvider/fst --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/crypto --include ../../libs/ffi --include C:/Build/Agent/_work/36/s/fstar/ulib/hyperstack \
--include ideal-flags \
--verify_module DataStream \
DataStream.fst
C:/Build/Agent/_work/36/s/fstar/bin/fstar.exe --fstar_home C:/Build/Agent/_work/36/s/fstar --record_hints --hint_info --trace_error --max_fuel 4 --initial_fuel 0 --max_ifuel 2 --initial_ifuel 1 --z3rlimit 20 --__temp_no_proj Handshake --__temp_no_proj Connection --use_hints --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/crypto/hacl \
--include C:/Build/Agent/_work/36/s/fstar/ucontrib/CoreCrypto/fst/ --include C:/Build/Agent/_work/36/s/fstar/ucontrib/Platform/fst/ --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/crypto/real --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/LowCProvider/fst --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/crypto --include ../../libs/ffi --include C:/Build/Agent/_work/36/s/fstar/ulib/hyperstack \
--include ideal-flags \
--verify_module Alert \
Alert.fst
C:/Build/Agent/_work/36/s/fstar/bin/fstar.exe --fstar_home C:/Build/Agent/_work/36/s/fstar --record_hints --hint_info --trace_error --max_fuel 4 --initial_fuel 0 --max_ifuel 2 --initial_ifuel 1 --z3rlimit 20 --__temp_no_proj Handshake --__temp_no_proj Connection --use_hints --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/crypto/hacl \
--include C:/Build/Agent/_work/36/s/fstar/ucontrib/CoreCrypto/fst/ --include C:/Build/Agent/_work/36/s/fstar/ucontrib/Platform/fst/ --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/crypto/real --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/LowCProvider/fst --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/crypto --include ../../libs/ffi --include C:/Build/Agent/_work/36/s/fstar/ulib/hyperstack \
--include ideal-flags \
--verify_module Content \
Content.fst
C:/Build/Agent/_work/36/s/fstar/bin/fstar.exe --fstar_home C:/Build/Agent/_work/36/s/fstar --record_hints --hint_info --trace_error --max_fuel 4 --initial_fuel 0 --max_ifuel 2 --initial_ifuel 1 --z3rlimit 20 --__temp_no_proj Handshake --__temp_no_proj Connection --use_hints --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/crypto/hacl \
--include C:/Build/Agent/_work/36/s/fstar/ucontrib/CoreCrypto/fst/ --include C:/Build/Agent/_work/36/s/fstar/ucontrib/Platform/fst/ --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/crypto/real --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/LowCProvider/fst --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/crypto --include ../../libs/ffi --include C:/Build/Agent/_work/36/s/fstar/ulib/hyperstack \
--include ideal-flags \
--verify_module StreamPlain \
StreamPlain.fst
C:/Build/Agent/_work/36/s/fstar/bin/fstar.exe --fstar_home C:/Build/Agent/_work/36/s/fstar --record_hints --hint_info --trace_error --max_fuel 4 --initial_fuel 0 --max_ifuel 2 --initial_ifuel 1 --z3rlimit 20 --__temp_no_proj Handshake --__temp_no_proj Connection --use_hints --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/crypto/hacl \
--include C:/Build/Agent/_work/36/s/fstar/ucontrib/CoreCrypto/fst/ --include C:/Build/Agent/_work/36/s/fstar/ucontrib/Platform/fst/ --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/crypto/real --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/LowCProvider/fst --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/crypto --include ../../libs/ffi --include C:/Build/Agent/_work/36/s/fstar/ulib/hyperstack \
--include ideal-flags \
--verify_module StreamAE \
StreamAE.fst
(C:\Build\Agent\_work\36\s\src\tls\ideal-flags\Flags.fst) digest is valid; using hints db.
Verified module: Flags (32 milliseconds)
All verification conditions discharged successfully
C:/Build/Agent/_work/36/s/fstar/bin/fstar.exe --fstar_home C:/Build/Agent/_work/36/s/fstar --record_hints --hint_info --trace_error --max_fuel 4 --initial_fuel 0 --max_ifuel 2 --initial_ifuel 1 --z3rlimit 20 --__temp_no_proj Handshake --__temp_no_proj Connection --use_hints --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/crypto/hacl \
--include C:/Build/Agent/_work/36/s/fstar/ucontrib/CoreCrypto/fst/ --include C:/Build/Agent/_work/36/s/fstar/ucontrib/Platform/fst/ --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/crypto/real --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/LowCProvider/fst --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/crypto --include ../../libs/ffi --include C:/Build/Agent/_work/36/s/fstar/ulib/hyperstack \
--include ideal-flags \
--verify_module MasterSecret \
MasterSecret.fst
(C:\Build\Agent\_work\36\s\src\tls\Transport.fst) digest is valid; using hints db.
(.\Transport.fst(22,0-22,49))
Query (Transport.wrap, 1)	succeeded (with hint) in 74 milliseconds with fuel 0 and ifuel 1
(.\Transport.fst(25,0-25,60))
Query (Transport.listen, 1)	succeeded (with hint) in 71 milliseconds with fuel 0 and ifuel 1
(C:\Build\Agent\_work\36\s\src\tls\TLSConstants.fst) digest is valid; using hints db.
(.\Transport.fst(36,0-40,17))
Query (Transport.test, 1)	succeeded (with hint) in 70 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(30,21-30,43))
Query (TLSConstants.is_tls_rgn, 1)	succeeded (with hint) in 73 milliseconds with fuel 0 and ifuel 1
(.\Transport.fst(45,8-45,88))
Query (Transport.really_read_rec, 1)	succeeded (with hint) in 86 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(31,21-31,45))
Query (TLSConstants.is_epoch_rgn, 1)	succeeded (with hint) in 91 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(32,21-32,42))
Query (TLSConstants.is_hs_rgn, 1)	succeeded (with hint) in 103 milliseconds with fuel 0 and ifuel 1
(.\Transport.fst(47,0-57,45))
Query (Transport.really_read_rec, 2)	succeeded (with hint) in 145 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(38,25-38,35))
Query (TLSConstants.rgn, 1)	succeeded (with hint) in 71 milliseconds with fuel 0 and ifuel 1
(.\Transport.fst(48,7-48,14))
Query (Transport.really_read_rec, 3)	succeeded (with hint) in 107 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(44,0-44,63))
.\TLSConstants.fst(44,0-44,63): (Warning) Top-level let-bindings must be total; this term may have effects
Query (TLSConstants.tls_region, 1)	succeeded (with hint) in 114 milliseconds with fuel 0 and ifuel 1
(.\Transport.fst(49,9-49,21))
Query (Transport.really_read_rec, 4)	succeeded (with hint) in 112 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(46,35-46,59))
Query (TLSConstants.tls_tables_region, 1)	succeeded (with hint) in 128 milliseconds with fuel 0 and ifuel 1
(.\Transport.fst(54,14-54,22))
Query (Transport.really_read_rec, 5)	succeeded (with hint) in 87 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(46,0-47,25))
Query (TLSConstants.tls_tables_region, 2)	succeeded (with hint) in 95 milliseconds with fuel 0 and ifuel 1
.\TLSConstants.fst(46,0-47,25): (Warning) Top-level let-bindings must be total; this term may have effects
(.\Transport.fst(54,28-54,46))
Query (Transport.really_read_rec, 6)	succeeded (with hint) in 78 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(52,4-52,10))
Query (TLSConstants.uu___is_Reader, 1)	succeeded (with hint) in 80 milliseconds with fuel 0 and ifuel 1
(.\Transport.fst(55,19-55,25))
Query (Transport.really_read_rec, 7)	succeeded (with hint) in 82 milliseconds with fuel 0 and ifuel 1
(.\Transport.fst(55,31-55,67))
Query (Transport.really_read_rec, 8)	succeeded (with hint) in 78 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(53,4-53,10))
Query (TLSConstants.uu___is_Writer, 1)	succeeded (with hint) in 115 milliseconds with fuel 0 and ifuel 1
(.\Transport.fst(57,19-57,45))
Query (Transport.really_read_rec, 9)	succeeded (with hint) in 79 milliseconds with fuel 0 and ifuel 1
Hint-info (.\Transport.fst(22,0-22,49)): Replay succeeded in 74 milliseconds
Hint-info (.\Transport.fst(25,0-25,60)): Replay succeeded in 71 milliseconds
Hint-info (.\Transport.fst(36,0-40,17)): Replay succeeded in 70 milliseconds
Hint-info (.\Transport.fst(45,8-45,88)): Replay succeeded in 86 milliseconds
Hint-info (.\Transport.fst(47,0-57,45)): Replay succeeded in 145 milliseconds
Hint-info (.\Transport.fst(48,7-48,14)): Replay succeeded in 107 milliseconds
Hint-info (.\Transport.fst(49,9-49,21)): Replay succeeded in 112 milliseconds
Hint-info (.\Transport.fst(54,14-54,22)): Replay succeeded in 87 milliseconds
Hint-info (.\Transport.fst(54,28-54,46)): Replay succeeded in 78 milliseconds
Hint-info (.\Transport.fst(55,19-55,25)): Replay succeeded in 82 milliseconds
Hint-info (.\Transport.fst(55,31-55,67)): Replay succeeded in 78 milliseconds
Hint-info (.\Transport.fst(57,19-57,45)): Replay succeeded in 79 milliseconds
(.\TLSConstants.fst(57,4-57,10))
Query (TLSConstants.uu___is_Client, 1)	succeeded (with hint) in 87 milliseconds with fuel 0 and ifuel 1
Verified module: Transport (1860 milliseconds)
All verification conditions discharged successfully
C:/Build/Agent/_work/36/s/fstar/bin/fstar.exe --fstar_home C:/Build/Agent/_work/36/s/fstar --record_hints --hint_info --trace_error --max_fuel 4 --initial_fuel 0 --max_ifuel 2 --initial_ifuel 1 --z3rlimit 20 --__temp_no_proj Handshake --__temp_no_proj Connection --use_hints --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/crypto/hacl \
--include C:/Build/Agent/_work/36/s/fstar/ucontrib/CoreCrypto/fst/ --include C:/Build/Agent/_work/36/s/fstar/ucontrib/Platform/fst/ --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/crypto/real --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/LowCProvider/fst --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/crypto --include ../../libs/ffi --include C:/Build/Agent/_work/36/s/fstar/ulib/hyperstack \
--include ideal-flags \
--verify_module StatefulPlain \
StatefulPlain.fst
(.\TLSConstants.fst(58,4-58,10))
Query (TLSConstants.uu___is_Server, 1)	succeeded (with hint) in 82 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(61,15-63,20))
Query (TLSConstants.dualRole, 1)	succeeded (with hint) in 108 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(67,4-67,11))
Query (TLSConstants.uu___is_SSL_3p0, 1)	succeeded (with hint) in 98 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(68,4-68,11))
Query (TLSConstants.uu___is_TLS_1p0, 1)	succeeded (with hint) in 96 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(69,4-69,11))
Query (TLSConstants.uu___is_TLS_1p1, 1)	succeeded (with hint) in 91 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(70,4-70,11))
Query (TLSConstants.uu___is_TLS_1p2, 1)	succeeded (with hint) in 83 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(71,4-71,11))
Query (TLSConstants.uu___is_TLS_1p3, 1)	succeeded (with hint) in 125 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(75,4-75,11))
Query (TLSConstants.uu___is_Kex_RSA, 1)	succeeded (with hint) in 92 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(76,4-76,10))
Query (TLSConstants.uu___is_Kex_DH, 1)	succeeded (with hint) in 122 milliseconds with fuel 0 and ifuel 1
(C:\Build\Agent\_work\36\s\src\tls\MonotoneMap.fst) digest is valid; using hints db.
(.\MonotoneMap.fst(17,4-17,31))
Query (MonotoneMap.map', 1)	succeeded (with hint) in 64 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(77,4-77,11))
Query (TLSConstants.uu___is_Kex_PSK, 1)	succeeded (with hint) in 119 milliseconds with fuel 0 and ifuel 1
(.\MonotoneMap.fst(21,2-21,19))
Query (MonotoneMap.map, 1)	succeeded (with hint) in 60 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(78,4-78,15))
Query (TLSConstants.uu___is_Kex_PSK_DHE, 1)	succeeded (with hint) in 111 milliseconds with fuel 0 and ifuel 1
(C:\Build\Agent\_work\36\s\src\tls\TLSError.fst) digest is valid; using hints db.
(.\MonotoneMap.fst(23,0-25,42))
Query (MonotoneMap.upd, 1)	succeeded (with hint) in 59 milliseconds with fuel 0 and ifuel 1
(.\MonotoneMap.fst(25,16-25,21))
Query (MonotoneMap.upd, 2)	succeeded (with hint) in 67 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(79,4-79,17))
Query (TLSConstants.uu___is_Kex_PSK_ECDHE, 1)	succeeded (with hint) in 109 milliseconds with fuel 0 and ifuel 1
(.\TLSError.fst(7,6-7,21))
Query (TLSError.uu___is_AD_close_notify, 1)	succeeded (with hint) in 92 milliseconds with fuel 0 and ifuel 1
(.\MonotoneMap.fst(31,9-33,71))
Query (MonotoneMap.grows, 1)	succeeded (with hint) in 78 milliseconds with fuel 0 and ifuel 1
(.\TLSError.fst(8,6-8,27))
Query (TLSError.uu___is_AD_unexpected_message, 1)	succeeded (with hint) in 65 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(80,4-80,11))
Query (TLSConstants.uu___is_Kex_DHE, 1)	succeeded (with hint) in 134 milliseconds with fuel 0 and ifuel 1
(.\MonotoneMap.fst(35,0-37,6))
Query (MonotoneMap.grows_reflexive, 1)	succeeded (with hint) in 68 milliseconds with fuel 0 and ifuel 1
(.\TLSError.fst(9,6-9,23))
Query (TLSError.uu___is_AD_bad_record_mac, 1)	succeeded (with hint) in 62 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(81,4-81,13))
Query (TLSConstants.uu___is_Kex_ECDHE, 1)	succeeded (with hint) in 87 milliseconds with fuel 0 and ifuel 1
(.\MonotoneMap.fst(39,0-41,6))
Query (MonotoneMap.grows_transitive, 1)	succeeded (with hint) in 58 milliseconds with fuel 0 and ifuel 1
(.\TLSError.fst(10,6-10,26))
Query (TLSError.uu___is_AD_decryption_failed, 1)	succeeded (with hint) in 83 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(90,4-90,9))
Query (TLSConstants.uu___is_Fresh, 1)	succeeded (with hint) in 98 milliseconds with fuel 0 and ifuel 1
(.\MonotoneMap.fst(43,0-45,6))
Query (MonotoneMap.grows_monotone, 1)	succeeded (with hint) in 71 milliseconds with fuel 0 and ifuel 1
(.\TLSError.fst(11,6-11,24))
Query (TLSError.uu___is_AD_record_overflow, 1)	succeeded (with hint) in 77 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(91,4-91,9))
Query (TLSConstants.uu___is_Stale, 1)	succeeded (with hint) in 84 milliseconds with fuel 0 and ifuel 1
(.\TLSError.fst(12,6-12,30))
Query (TLSError.uu___is_AD_decompression_failure, 1)	succeeded (with hint) in 62 milliseconds with fuel 0 and ifuel 1
(.\MonotoneMap.fst(56,0-63,50))
Query (MonotoneMap.alloc, 1)	succeeded (with hint) in 84 milliseconds with fuel 0 and ifuel 1
(.\TLSError.fst(13,6-13,26))
Query (TLSError.uu___is_AD_handshake_failure, 1)	succeeded (with hint) in 57 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(94,0-96,26))
Query (TLSConstants.encAlg, 1)	succeeded (with hint) in 90 milliseconds with fuel 0 and ifuel 1
(.\MonotoneMap.fst(69,0-71,65))
Query (MonotoneMap.contains, 1)	succeeded (with hint) in 60 milliseconds with fuel 0 and ifuel 1
(.\TLSError.fst(14,6-14,23))
Query (TLSError.uu___is_AD_no_certificate, 1)	succeeded (with hint) in 75 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(95,4-95,9))
Query (TLSConstants.uu___is_Block, 1)	succeeded (with hint) in 129 milliseconds with fuel 0 and ifuel 1
(.\MonotoneMap.fst(73,0-75,31))
Query (MonotoneMap.value, 1)	succeeded (with hint) in 68 milliseconds with fuel 0 and ifuel 1
(.\TLSError.fst(15,6-15,32))
Query (TLSError.uu___is_AD_bad_certificate_warning, 1)	succeeded (with hint) in 83 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(95,4-95,9))
Query (TLSConstants.__proj__Block__item___0, 1)	succeeded (with hint) in 135 milliseconds with fuel 0 and ifuel 1
(.\MonotoneMap.fst(81,0-84,6))
Query (MonotoneMap.map_contains, 1)	succeeded (with hint) in 71 milliseconds with fuel 0 and ifuel 1
(.\TLSError.fst(16,6-16,30))
Query (TLSError.uu___is_AD_bad_certificate_fatal, 1)	succeeded (with hint) in 55 milliseconds with fuel 0 and ifuel 1
(.\TLSError.fst(17,6-17,40))
Query (TLSError.uu___is_AD_unsupported_certificate_warning, 1)	succeeded (with hint) in 61 milliseconds with fuel 0 and ifuel 1
(.\MonotoneMap.fst(86,0-88,6))
Query (MonotoneMap.contains_stable, 1)	succeeded (with hint) in 66 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(96,4-96,10))
Query (TLSConstants.uu___is_Stream, 1)	succeeded (with hint) in 90 milliseconds with fuel 0 and ifuel 1
(.\TLSError.fst(18,6-18,38))
Query (TLSError.uu___is_AD_unsupported_certificate_fatal, 1)	succeeded (with hint) in 65 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(96,4-96,10))
Query (TLSConstants.__proj__Stream__item___0, 1)	succeeded (with hint) in 91 milliseconds with fuel 0 and ifuel 1
(.\TLSError.fst(19,6-19,36))
Query (TLSError.uu___is_AD_certificate_revoked_warning, 1)	succeeded (with hint) in 89 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(99,0-102,20))
Query (TLSConstants.hashAlg, 1)	succeeded (with hint) in 95 milliseconds with fuel 0 and ifuel 1
(.\MonotoneMap.fst(90,0-105,30))
Query (MonotoneMap.extend, 1)	succeeded (with hint) in 129 milliseconds with fuel 0 and ifuel 1
(.\TLSError.fst(20,6-20,34))
Query (TLSError.uu___is_AD_certificate_revoked_fatal, 1)	succeeded (with hint) in 72 milliseconds with fuel 0 and ifuel 1
(.\MonotoneMap.fst(97,22-97,39))
Query (MonotoneMap.extend, 2)	succeeded (with hint) in 65 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(100,4-100,8))
Query (TLSConstants.uu___is_NULL, 1)	succeeded (with hint) in 124 milliseconds with fuel 0 and ifuel 1
(.\TLSError.fst(21,6-21,36))
Query (TLSError.uu___is_AD_certificate_expired_warning, 1)	succeeded (with hint) in 85 milliseconds with fuel 0 and ifuel 1
(.\MonotoneMap.fst(97,22-97,39))
Query (MonotoneMap.extend, 3)	succeeded (with hint) in 59 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(101,4-101,11))
Query (TLSConstants.uu___is_MD5SHA1, 1)	succeeded (with hint) in 91 milliseconds with fuel 0 and ifuel 1
(.\TLSError.fst(22,6-22,34))
Query (TLSError.uu___is_AD_certificate_expired_fatal, 1)	succeeded (with hint) in 89 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(102,4-102,8))
Query (TLSConstants.uu___is_Hash, 1)	succeeded (with hint) in 111 milliseconds with fuel 0 and ifuel 1
(.\TLSError.fst(23,6-23,36))
Query (TLSError.uu___is_AD_certificate_unknown_warning, 1)	succeeded (with hint) in 69 milliseconds with fuel 0 and ifuel 1
(.\MonotoneMap.fst(107,0-121,2))
Query (MonotoneMap.lookup, 1)	succeeded (with hint) in 105 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(102,4-102,8))
Query (TLSConstants.__proj__Hash__item___0, 1)	succeeded (with hint) in 92 milliseconds with fuel 0 and ifuel 1
(.\TLSError.fst(24,6-24,34))
Query (TLSError.uu___is_AD_certificate_unknown_fatal, 1)	succeeded (with hint) in 92 milliseconds with fuel 0 and ifuel 1
Hint-info (.\MonotoneMap.fst(17,4-17,31)): Replay succeeded in 64 milliseconds
Hint-info (.\MonotoneMap.fst(21,2-21,19)): Replay succeeded in 60 milliseconds
Hint-info (.\MonotoneMap.fst(23,0-25,42)): Replay succeeded in 59 milliseconds
Hint-info (.\MonotoneMap.fst(25,16-25,21)): Replay succeeded in 67 milliseconds
Hint-info (.\MonotoneMap.fst(31,9-33,71)): Replay succeeded in 78 milliseconds
Hint-info (.\MonotoneMap.fst(35,0-37,6)): Replay succeeded in 68 milliseconds
Hint-info (.\MonotoneMap.fst(39,0-41,6)): Replay succeeded in 58 milliseconds
Hint-info (.\MonotoneMap.fst(43,0-45,6)): Replay succeeded in 71 milliseconds
Hint-info (.\MonotoneMap.fst(56,0-63,50)): Replay succeeded in 84 milliseconds
Hint-info (.\MonotoneMap.fst(69,0-71,65)): Replay succeeded in 60 milliseconds
Hint-info (.\MonotoneMap.fst(73,0-75,31)): Replay succeeded in 68 milliseconds
Hint-info (.\MonotoneMap.fst(81,0-84,6)): Replay succeeded in 71 milliseconds
Hint-info (.\MonotoneMap.fst(86,0-88,6)): Replay succeeded in 66 milliseconds
Hint-info (.\MonotoneMap.fst(90,0-105,30)): Replay succeeded in 129 milliseconds
Hint-info (.\MonotoneMap.fst(97,22-97,39)): Replay succeeded in 65 milliseconds
Hint-info (.\MonotoneMap.fst(97,22-97,39)): Replay succeeded in 59 milliseconds
Hint-info (.\MonotoneMap.fst(107,0-121,2)): Replay succeeded in 105 milliseconds
Verified module: MonotoneMap (2828 milliseconds)
All verification conditions discharged successfully
C:/Build/Agent/_work/36/s/fstar/bin/fstar.exe --fstar_home C:/Build/Agent/_work/36/s/fstar --record_hints --hint_info --trace_error --max_fuel 4 --initial_fuel 0 --max_ifuel 2 --initial_ifuel 1 --z3rlimit 20 --__temp_no_proj Handshake --__temp_no_proj Connection --use_hints --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/crypto/hacl \
--include C:/Build/Agent/_work/36/s/fstar/ucontrib/CoreCrypto/fst/ --include C:/Build/Agent/_work/36/s/fstar/ucontrib/Platform/fst/ --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/crypto/real --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/LowCProvider/fst --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/crypto --include ../../libs/ffi --include C:/Build/Agent/_work/36/s/fstar/ulib/hyperstack \
--include ideal-flags \
--verify_module LHAEPlain \
LHAEPlain.fst
(.\TLSError.fst(25,6-25,26))
Query (TLSError.uu___is_AD_illegal_parameter, 1)	succeeded (with hint) in 74 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(105,0-107,24))
Query (TLSConstants.macAlg, 1)	succeeded (with hint) in 85 milliseconds with fuel 0 and ifuel 1
(.\TLSError.fst(26,6-26,19))
Query (TLSError.uu___is_AD_unknown_ca, 1)	succeeded (with hint) in 68 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(106,4-106,8))
Query (TLSConstants.uu___is_HMAC, 1)	succeeded (with hint) in 96 milliseconds with fuel 0 and ifuel 1
(.\TLSError.fst(27,6-27,22))
Query (TLSError.uu___is_AD_access_denied, 1)	succeeded (with hint) in 58 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(106,4-106,8))
Query (TLSConstants.__proj__HMAC__item___0, 1)	succeeded (with hint) in 128 milliseconds with fuel 0 and ifuel 1
(.\TLSError.fst(28,6-28,21))
Query (TLSError.uu___is_AD_decode_error, 1)	succeeded (with hint) in 73 milliseconds with fuel 0 and ifuel 1
(.\TLSError.fst(29,6-29,22))
Query (TLSError.uu___is_AD_decrypt_error, 1)	succeeded (with hint) in 76 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(107,4-107,12))
Query (TLSConstants.uu___is_SSLKHASH, 1)	succeeded (with hint) in 125 milliseconds with fuel 0 and ifuel 1
(.\TLSError.fst(30,6-30,27))
Query (TLSError.uu___is_AD_export_restriction, 1)	succeeded (with hint) in 66 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(107,4-107,12))
Query (TLSConstants.__proj__SSLKHASH__item___0, 1)	succeeded (with hint) in 109 milliseconds with fuel 0 and ifuel 1
(.\TLSError.fst(31,6-31,25))
Query (TLSError.uu___is_AD_protocol_version, 1)	succeeded (with hint) in 97 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(110,0-113,38))
Query (TLSConstants.aeAlg, 1)	succeeded (with hint) in 93 milliseconds with fuel 0 and ifuel 1
(.\TLSError.fst(32,6-32,30))
Query (TLSError.uu___is_AD_insufficient_security, 1)	succeeded (with hint) in 75 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(111,4-111,11))
Query (TLSConstants.uu___is_MACOnly, 1)	succeeded (with hint) in 95 milliseconds with fuel 0 and ifuel 1
(.\TLSError.fst(33,6-33,23))
Query (TLSError.uu___is_AD_internal_error, 1)	succeeded (with hint) in 73 milliseconds with fuel 0 and ifuel 1
(.\TLSError.fst(34,6-34,31))
Query (TLSError.uu___is_AD_user_cancelled_warning, 1)	succeeded (with hint) in 65 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(111,4-111,11))
Query (TLSConstants.__proj__MACOnly__item___0, 1)	succeeded (with hint) in 94 milliseconds with fuel 0 and ifuel 1
(.\TLSError.fst(35,6-35,29))
Query (TLSError.uu___is_AD_user_cancelled_fatal, 1)	succeeded (with hint) in 76 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(112,4-112,7))
Query (TLSConstants.uu___is_MtE, 1)	succeeded (with hint) in 111 milliseconds with fuel 0 and ifuel 1
(.\TLSError.fst(36,6-36,25))
Query (TLSError.uu___is_AD_no_renegotiation, 1)	succeeded (with hint) in 84 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(112,4-112,7))
Query (TLSConstants.__proj__MtE__item___0, 1)	succeeded (with hint) in 84 milliseconds with fuel 0 and ifuel 1
(.\TLSError.fst(37,6-37,26))
Query (TLSError.uu___is_AD_unrecognized_name, 1)	succeeded (with hint) in 78 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(112,4-112,7))
Query (TLSConstants.__proj__MtE__item___1, 1)	succeeded (with hint) in 128 milliseconds with fuel 0 and ifuel 1
(.\TLSError.fst(38,6-38,26))
Query (TLSError.uu___is_AD_missing_extension, 1)	succeeded (with hint) in 76 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(113,4-113,8))
Query (TLSConstants.uu___is_AEAD, 1)	succeeded (with hint) in 93 milliseconds with fuel 0 and ifuel 1
(.\TLSError.fst(39,6-39,30))
Query (TLSError.uu___is_AD_unsupported_extension, 1)	succeeded (with hint) in 64 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(113,4-113,8))
Query (TLSConstants.__proj__AEAD__item___0, 1)	succeeded (with hint) in 73 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(113,4-113,8))
Query (TLSConstants.__proj__AEAD__item___1, 1)	succeeded (with hint) in 83 milliseconds with fuel 0 and ifuel 1
(.\TLSError.fst(41,19-74,60))
Query (TLSError.string_of_ad, 1)	succeeded (with hint) in 128 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(116,11-118,52))
Query (TLSConstants.lhae, 1)	succeeded (with hint) in 106 milliseconds with fuel 0 and ifuel 1
(.\TLSError.fst(77,0-102,16))
Query (TLSError.isFatal, 1)	succeeded (with hint) in 65 milliseconds with fuel 0 and ifuel 1
(.\TLSError.fst(113,0-113,39))
Query (TLSError.resT, 1)	succeeded (with hint) in 61 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(168,56-168,75))
Query (TLSConstants.pinverse_t, 1)	succeeded (with hint) in 125 milliseconds with fuel 0 and ifuel 1
(.\TLSError.fst(116,0-119,33))
Query (TLSError.mapResult, 1)	succeeded (with hint) in 75 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(174,2-174,48))
Query (TLSConstants.lemma_pinverse_f_g, 1)	succeeded (with hint) in 111 milliseconds with fuel 0 and ifuel 1
(.\TLSError.fst(122,0-125,23))
Query (TLSError.bindResult, 1)	succeeded (with hint) in 64 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(178,0-178,41))
Query (TLSConstants.sigAlgBytes, 1)	succeeded (with hint) in 87 milliseconds with fuel 0 and ifuel 1
(.\TLSError.fst(128,0-131,33))
Query (TLSError.resultMap, 1)	succeeded (with hint) in 61 milliseconds with fuel 0 and ifuel 1
(.\TLSError.fst(134,0-137,23))
Query (TLSError.resultBind, 1)	succeeded (with hint) in 62 milliseconds with fuel 0 and ifuel 1
Hint-info (.\TLSError.fst(7,6-7,21)): Replay succeeded in 92 milliseconds
Hint-info (.\TLSError.fst(8,6-8,27)): Replay succeeded in 65 milliseconds
Hint-info (.\TLSError.fst(9,6-9,23)): Replay succeeded in 62 milliseconds
Hint-info (.\TLSError.fst(10,6-10,26)): Replay succeeded in 83 milliseconds
Hint-info (.\TLSError.fst(11,6-11,24)): Replay succeeded in 77 milliseconds
Hint-info (.\TLSError.fst(12,6-12,30)): Replay succeeded in 62 milliseconds
Hint-info (.\TLSError.fst(13,6-13,26)): Replay succeeded in 57 milliseconds
Hint-info (.\TLSError.fst(14,6-14,23)): Replay succeeded in 75 milliseconds
Hint-info (.\TLSError.fst(15,6-15,32)): Replay succeeded in 83 milliseconds
Hint-info (.\TLSError.fst(16,6-16,30)): Replay succeeded in 55 milliseconds
Hint-info (.\TLSError.fst(17,6-17,40)): Replay succeeded in 61 milliseconds
Hint-info (.\TLSError.fst(18,6-18,38)): Replay succeeded in 65 milliseconds
Hint-info (.\TLSError.fst(19,6-19,36)): Replay succeeded in 89 milliseconds
Hint-info (.\TLSError.fst(20,6-20,34)): Replay succeeded in 72 milliseconds
Hint-info (.\TLSError.fst(21,6-21,36)): Replay succeeded in 85 milliseconds
Hint-info (.\TLSError.fst(22,6-22,34)): Replay succeeded in 89 milliseconds
Hint-info (.\TLSError.fst(23,6-23,36)): Replay succeeded in 69 milliseconds
Hint-info (.\TLSError.fst(24,6-24,34)): Replay succeeded in 92 milliseconds
Hint-info (.\TLSError.fst(25,6-25,26)): Replay succeeded in 74 milliseconds
Hint-info (.\TLSError.fst(26,6-26,19)): Replay succeeded in 68 milliseconds
Hint-info (.\TLSError.fst(27,6-27,22)): Replay succeeded in 58 milliseconds
Hint-info (.\TLSError.fst(28,6-28,21)): Replay succeeded in 73 milliseconds
Hint-info (.\TLSError.fst(29,6-29,22)): Replay succeeded in 76 milliseconds
Hint-info (.\TLSError.fst(30,6-30,27)): Replay succeeded in 66 milliseconds
Hint-info (.\TLSError.fst(31,6-31,25)): Replay succeeded in 97 milliseconds
Hint-info (.\TLSError.fst(32,6-32,30)): Replay succeeded in 75 milliseconds
Hint-info (.\TLSError.fst(33,6-33,23)): Replay succeeded in 73 milliseconds
Hint-info (.\TLSError.fst(34,6-34,31)): Replay succeeded in 65 milliseconds
Hint-info (.\TLSError.fst(35,6-35,29)): Replay succeeded in 76 milliseconds
Hint-info (.\TLSError.fst(36,6-36,25)): Replay succeeded in 84 milliseconds
Hint-info (.\TLSError.fst(37,6-37,26)): Replay succeeded in 78 milliseconds
Hint-info (.\TLSError.fst(38,6-38,26)): Replay succeeded in 76 milliseconds
Hint-info (.\TLSError.fst(39,6-39,30)): Replay succeeded in 64 milliseconds
Hint-info (.\TLSError.fst(41,19-74,60)): Replay succeeded in 128 milliseconds
Hint-info (.\TLSError.fst(77,0-102,16)): Replay succeeded in 65 milliseconds
Hint-info (.\TLSError.fst(113,0-113,39)): Replay succeeded in 61 milliseconds
Hint-info (.\TLSError.fst(116,0-119,33)): Replay succeeded in 75 milliseconds
Hint-info (.\TLSError.fst(122,0-125,23)): Replay succeeded in 64 milliseconds
Hint-info (.\TLSError.fst(128,0-131,33)): Replay succeeded in 61 milliseconds
Hint-info (.\TLSError.fst(134,0-137,23)): Replay succeeded in 62 milliseconds
(.\TLSConstants.fst(179,0-184,33))
Query (TLSConstants.sigAlgBytes, 2)	succeeded (with hint) in 151 milliseconds with fuel 0 and ifuel 1
Verified module: TLSError (5566 milliseconds)
All verification conditions discharged successfully
C:/Build/Agent/_work/36/s/fstar/bin/fstar.exe --fstar_home C:/Build/Agent/_work/36/s/fstar --record_hints --hint_info --trace_error --max_fuel 4 --initial_fuel 0 --max_ifuel 2 --initial_ifuel 1 --z3rlimit 20 --__temp_no_proj Handshake --__temp_no_proj Connection --use_hints --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/crypto/hacl \
--include C:/Build/Agent/_work/36/s/fstar/ucontrib/CoreCrypto/fst/ --include C:/Build/Agent/_work/36/s/fstar/ucontrib/Platform/fst/ --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/crypto/real --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/LowCProvider/fst --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/crypto --include ../../libs/ffi --include C:/Build/Agent/_work/36/s/fstar/ulib/hyperstack \
--include ideal-flags \
--verify_module AEAD_GCM \
AEAD_GCM.fst
(.\TLSConstants.fst(187,17-187,39))
Query (TLSConstants.parseSigAlg, 1)	succeeded (with hint) in 85 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(188,0-194,68))
Query (TLSConstants.parseSigAlg, 2)	succeeded (with hint) in 127 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(198,11-198,54))
Query (TLSConstants.inverse_sigAlg, 1)	succeeded (with hint) in 99 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(200,0-200,25))
Query (TLSConstants.inverse_sigAlg, 2)	succeeded (with hint) in 139 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(202,23-202,24))
Query (TLSConstants.pinverse_sigAlg, 1)	succeeded (with hint) in 115 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(204,11-204,67))
Query (TLSConstants.pinverse_sigAlg, 2)	succeeded (with hint) in 94 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(205,3-205,53))
Query (TLSConstants.pinverse_sigAlg, 3)	succeeded (with hint) in 83 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(206,0-206,26))
Query (TLSConstants.pinverse_sigAlg, 4)	succeeded (with hint) in 106 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(210,26-210,35))
Query (TLSConstants.hashAlg', 1)	succeeded (with hint) in 97 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(210,39-210,51))
Query (TLSConstants.hashAlg', 2)	succeeded (with hint) in 90 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(216,0-216,44))
Query (TLSConstants.hashAlgBytes, 1)	succeeded (with hint) in 116 milliseconds with fuel 0 and ifuel 2
(.\TLSConstants.fst(217,0-225,20))
Query (TLSConstants.hashAlgBytes, 2)	succeeded (with hint) in 115 milliseconds with fuel 0 and ifuel 2
(C:\Build\Agent\_work\36\s\src\tls\RSAKey.fst) digest is valid; using hints db.
(.\TLSConstants.fst(228,18-228,41))
Query (TLSConstants.parseHashAlg, 1)	succeeded (with hint) in 121 milliseconds with fuel 0 and ifuel 2
(.\RSAKey.fst(12,0-12,30))
Query (RSAKey.pred, 1)	succeeded (with hint) in 139 milliseconds with fuel 0 and ifuel 1
(C:\Build\Agent\_work\36\s\src\tls\HashMAC.fst) digest is valid; using hints db.
(C:\Build\Agent\_work\36\s\src\tls\ECGroup.fst) digest is valid; using hints db.
(C:\Build\Agent\_work\36\s\src\tls\DHGroup.fst) digest is valid; using hints db.
(.\TLSConstants.fst(229,0-239,68))
Query (TLSConstants.parseHashAlg, 2)	succeeded (with hint) in 145 milliseconds with fuel 0 and ifuel 2
(.\HashMAC.fst(13,0-13,40))
Query (HashMAC.ssl_pad1_md5, 1)	succeeded (with hint) in 113 milliseconds with fuel 0 and ifuel 1
(.\RSAKey.fst(12,14-12,19))
Query (RSAKey.__proj__SK_PK__item___0, 1)	succeeded (with hint) in 116 milliseconds with fuel 0 and ifuel 1
(.\DHGroup.fst(19,0-21,22))
Query (DHGroup.group, 1)	succeeded (with hint) in 120 milliseconds with fuel 0 and ifuel 1
(.\ECGroup.fst(13,3-13,55))
Query (ECGroup.key, 1)	succeeded (with hint) in 153 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(243,11-243,56))
Query (TLSConstants.inverse_hashAlg, 1)	succeeded (with hint) in 115 milliseconds with fuel 0 and ifuel 2
(.\HashMAC.fst(14,0-14,40))
Query (HashMAC.ssl_pad2_md5, 1)	succeeded (with hint) in 103 milliseconds with fuel 0 and ifuel 1
(.\RSAKey.fst(27,0-30,10))
Query (RSAKey.gen, 1)	succeeded (with hint) in 120 milliseconds with fuel 0 and ifuel 1
(.\ECGroup.fst(14,3-14,55))
Query (ECGroup.key, 2)	succeeded (with hint) in 98 milliseconds with fuel 0 and ifuel 1
(.\DHGroup.fst(20,4-20,9))
Query (DHGroup.uu___is_Named, 1)	succeeded (with hint) in 107 milliseconds with fuel 0 and ifuel 1
(C:\Build\Agent\_work\36\s\src\tls\Nonce.fst) digest is valid; using hints db.
(C:\Build\Agent\_work\36\s\src\tls\CommonDH.fst) digest is valid; using hints db.
(.\TLSConstants.fst(245,0-245,26))
Query (TLSConstants.inverse_hashAlg, 2)	succeeded (with hint) in 133 milliseconds with fuel 0 and ifuel 2
(.\HashMAC.fst(15,0-15,40))
Query (HashMAC.ssl_pad1_sha1, 1)	succeeded (with hint) in 116 milliseconds with fuel 0 and ifuel 1
(.\RSAKey.fst(38,0-38,101))
Query (RSAKey.create_rsapkey, 1)	succeeded (with hint) in 111 milliseconds with fuel 0 and ifuel 1
(.\DHGroup.fst(20,4-20,9))
Query (DHGroup.__proj__Named__item___0, 1)	succeeded (with hint) in 112 milliseconds with fuel 0 and ifuel 1
Hint-info (.\RSAKey.fst(12,0-12,30)): Replay succeeded in 139 milliseconds
Hint-info (.\RSAKey.fst(12,14-12,19)): Replay succeeded in 116 milliseconds
Hint-info (.\RSAKey.fst(27,0-30,10)): Replay succeeded in 120 milliseconds
Hint-info (.\RSAKey.fst(38,0-38,101)): Replay succeeded in 111 milliseconds
Verified module: RSAKey (828 milliseconds)
All verification conditions discharged successfully
(.\ECGroup.fst(22,0-26,22))
Query (ECGroup.ec_all_curve, 1)	succeeded (with hint) in 151 milliseconds with fuel 0 and ifuel 1
C:/Build/Agent/_work/36/s/fstar/bin/fstar.exe --fstar_home C:/Build/Agent/_work/36/s/fstar --record_hints --hint_info --trace_error --max_fuel 4 --initial_fuel 0 --max_ifuel 2 --initial_ifuel 1 --z3rlimit 20 --__temp_no_proj Handshake --__temp_no_proj Connection --use_hints --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/crypto/hacl \
--include C:/Build/Agent/_work/36/s/fstar/ucontrib/CoreCrypto/fst/ --include C:/Build/Agent/_work/36/s/fstar/ucontrib/Platform/fst/ --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/crypto/real --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/LowCProvider/fst --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/crypto --include ../../libs/ffi --include C:/Build/Agent/_work/36/s/fstar/ulib/hyperstack \
--include ideal-flags \
--verify_module MAC \
MAC.fst
(.\Nonce.fst(11,0-11,23))
Query (Nonce.random, 1)	succeeded (with hint) in 136 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(247,24-247,25))
Query (TLSConstants.pinverse_hashAlg, 1)	succeeded (with hint) in 86 milliseconds with fuel 0 and ifuel 2
(C:\Build\Agent\_work\36\s\src\tls\PMS.fst) digest is valid; using hints db.
(.\CommonDH.fst(8,0-10,25))
Query (CommonDH.group, 1)	succeeded (with hint) in 117 milliseconds with fuel 0 and ifuel 1
(.\HashMAC.fst(16,0-16,40))
Query (HashMAC.ssl_pad2_sha1, 1)	succeeded (with hint) in 137 milliseconds with fuel 0 and ifuel 1
(.\DHGroup.fst(21,4-21,12))
Query (DHGroup.uu___is_Explicit, 1)	succeeded (with hint) in 126 milliseconds with fuel 0 and ifuel 1
(C:\Build\Agent\_work\36\s\src\tls\Hashing.fst) digest is valid; using hints db.
(.\TLSConstants.fst(249,11-249,69))
Query (TLSConstants.pinverse_hashAlg, 2)	succeeded (with hint) in 86 milliseconds with fuel 0 and ifuel 2
(.\ECGroup.fst(23,4-23,11))
Query (ECGroup.uu___is_EC_CORE, 1)	succeeded (with hint) in 111 milliseconds with fuel 0 and ifuel 1
(C:\Build\Agent\_work\36\s\src\tls\Cert.fst) digest is valid; using hints db.
(.\Nonce.fst(17,39-17,48))
Query (Nonce.timestamp, 1)	succeeded (with hint) in 92 milliseconds with fuel 0 and ifuel 1
(.\CommonDH.fst(9,4-9,8))
Query (CommonDH.uu___is_FFDH, 1)	succeeded (with hint) in 114 milliseconds with fuel 0 and ifuel 1
(.\PMS.fst(16,0-16,30))
Query (PMS.rsaseed, 1)	succeeded (with hint) in 116 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(250,3-250,55))
Query (TLSConstants.pinverse_hashAlg, 3)	succeeded (with hint) in 85 milliseconds with fuel 0 and ifuel 2
(.\Hashing.fst(13,0-17,42))
Query (Hashing.hash', 1)	succeeded (with hint) in 135 milliseconds with fuel 0 and ifuel 1
(.\DHGroup.fst(21,4-21,12))
Query (DHGroup.__proj__Explicit__item___0, 1)	succeeded (with hint) in 118 milliseconds with fuel 0 and ifuel 1
(.\HashMAC.fst(19,30-19,42))
Query (HashMAC.sslHashAlg, 1)	succeeded (with hint) in 138 milliseconds with fuel 0 and ifuel 1
Hint-info (.\Hashing.fst(13,0-17,42)): Replay succeeded in 135 milliseconds
(.\Nonce.fst(15,0-17,56))
Query (Nonce.timestamp, 2)	succeeded (with hint) in 117 milliseconds with fuel 0 and ifuel 1
(.\ECGroup.fst(23,4-23,11))
Query (ECGroup.__proj__EC_CORE__item___0, 1)	succeeded (with hint) in 139 milliseconds with fuel 0 and ifuel 1
Verified module: Hashing (225 milliseconds)
All verification conditions discharged successfully
(.\Cert.fst(16,0-21,45))
Query (Cert.certificateListBytes, 1)	succeeded (with hint) in 115 milliseconds with fuel 0 and ifuel 1
(.\CommonDH.fst(9,4-9,8))
Query (CommonDH.__proj__FFDH__item___0, 1)	succeeded (with hint) in 95 milliseconds with fuel 0 and ifuel 1
C:/Build/Agent/_work/36/s/fstar/bin/fstar.exe --fstar_home C:/Build/Agent/_work/36/s/fstar --record_hints --hint_info --trace_error --max_fuel 4 --initial_fuel 0 --max_ifuel 2 --initial_ifuel 1 --z3rlimit 20 --__temp_no_proj Handshake --__temp_no_proj Connection --use_hints --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/crypto/hacl \
--include C:/Build/Agent/_work/36/s/fstar/ucontrib/CoreCrypto/fst/ --include C:/Build/Agent/_work/36/s/fstar/ucontrib/Platform/fst/ --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/crypto/real --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/LowCProvider/fst --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/crypto --include ../../libs/ffi --include C:/Build/Agent/_work/36/s/fstar/ulib/hyperstack \
--include ideal-flags \
--verify_module StatefulLHAE \
StatefulLHAE.fst
(.\PMS.fst(19,0-23,29))
Query (PMS.rsapms, 1)	succeeded (with hint) in 120 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(251,0-251,27))
Query (TLSConstants.pinverse_hashAlg, 4)	succeeded (with hint) in 105 milliseconds with fuel 0 and ifuel 2
(.\HashMAC.fst(19,46-19,59))
Query (HashMAC.sslHashAlg, 2)	succeeded (with hint) in 92 milliseconds with fuel 0 and ifuel 1
(.\ECGroup.fst(24,4-24,14))
Query (ECGroup.uu___is_EC_UNKNOWN, 1)	succeeded (with hint) in 91 milliseconds with fuel 0 and ifuel 1
(.\DHGroup.fst(26,0-27,37))
Query (DHGroup.share_of_key, 1)	succeeded (with hint) in 119 milliseconds with fuel 0 and ifuel 1
(.\Nonce.fst(18,0-21,21))
Query (Nonce.timestamp, 3)	succeeded (with hint) in 114 milliseconds with fuel 0 and ifuel 1
(.\CommonDH.fst(10,4-10,8))
Query (CommonDH.uu___is_ECDH, 1)	succeeded (with hint) in 116 milliseconds with fuel 0 and ifuel 1
(.\PMS.fst(21,4-21,15))
Query (PMS.uu___is_IdealRSAPMS, 1)	succeeded (with hint) in 122 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(254,17-261,29))
Query (TLSConstants.encKeySize, 1)	succeeded (with hint) in 139 milliseconds with fuel 0 and ifuel 2
(.\HashMAC.fst(21,23-23,49))
Query (HashMAC.sslKeyedHashPads, 1)	succeeded (with hint) in 100 milliseconds with fuel 0 and ifuel 1
(.\ECGroup.fst(24,4-24,14))
Query (ECGroup.__proj__EC_UNKNOWN__item___0, 1)	succeeded (with hint) in 104 milliseconds with fuel 0 and ifuel 1
(.\DHGroup.fst(30,0-36,3))
Query (DHGroup.make_ffdhe, 1)	succeeded (with hint) in 103 milliseconds with fuel 0 and ifuel 1
(.\CommonDH.fst(10,4-10,8))
Query (CommonDH.__proj__ECDH__item___0, 1)	succeeded (with hint) in 95 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(264,19-268,26))
Query (TLSConstants.aeadSaltSize, 1)	succeeded (with hint) in 73 milliseconds with fuel 0 and ifuel 2
(.\PMS.fst(21,4-21,15))
Query (PMS.__proj__IdealRSAPMS__item___0, 1)	succeeded (with hint) in 117 milliseconds with fuel 0 and ifuel 1
(.\Nonce.fst(34,0-37,17))
Query (Nonce.injective, 1)	succeeded (with hint) in 151 milliseconds with fuel 0 and ifuel 1
(.\HashMAC.fst(26,0-30,5))
Query (HashMAC.sslKeyedHash, 1)	succeeded (with hint) in 111 milliseconds with fuel 0 and ifuel 1
(.\ECGroup.fst(25,4-25,21))
Query (ECGroup.uu___is_EC_EXPLICIT_PRIME, 1)	succeeded (with hint) in 108 milliseconds with fuel 0 and ifuel 1
(.\DHGroup.fst(38,9-42,16))
Query (DHGroup.ffdhe2048, 1)	succeeded (with hint) in 96 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(271,23-275,26))
Query (TLSConstants.aeadRecordIVSize, 1)	succeeded (with hint) in 77 milliseconds with fuel 0 and ifuel 2
(.\CommonDH.fst(12,0-14,25))
Query (CommonDH.params, 1)	succeeded (with hint) in 109 milliseconds with fuel 0 and ifuel 1
(.\PMS.fst(23,4-23,18))
Query (PMS.uu___is_ConcreteRSAPMS, 1)	succeeded (with hint) in 97 milliseconds with fuel 0 and ifuel 1
(.\Nonce.fst(36,27-36,35))
Query (Nonce.injective, 2)	succeeded (with hint) in 95 milliseconds with fuel 0 and ifuel 1
(.\HashMAC.fst(40,0-41,48))
Query (HashMAC.hmac, 1)	succeeded (with hint) in 93 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(278,24-278,31))
Query (TLSConstants.hashSize, 1)	succeeded (with hint) in 69 milliseconds with fuel 0 and ifuel 2
(.\ECGroup.fst(26,4-26,22))
Query (ECGroup.uu___is_EC_EXPLICIT_BINARY, 1)	succeeded (with hint) in 115 milliseconds with fuel 0 and ifuel 1
(.\CommonDH.fst(13,4-13,7))
Query (CommonDH.uu___is_FFP, 1)	succeeded (with hint) in 95 milliseconds with fuel 0 and ifuel 1
(.\DHGroup.fst(44,9-48,16))
Query (DHGroup.ffdhe3072, 1)	succeeded (with hint) in 164 milliseconds with fuel 0 and ifuel 1
(.\PMS.fst(23,4-23,18))
Query (PMS.__proj__ConcreteRSAPMS__item___0, 1)	succeeded (with hint) in 97 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(279,15-281,22))
Query (TLSConstants.hashSize, 2)	succeeded (with hint) in 78 milliseconds with fuel 0 and ifuel 2
(.\Nonce.fst(47,0-48,55))
.\Nonce.fst(47,0-48,55): (Warning) Top-level let-bindings must be total; this term may have effects
Query (Nonce.nonce_rid_table, 1)	succeeded (with hint) in 102 milliseconds with fuel 0 and ifuel 1
(.\HashMAC.fst(45,0-47,23))
Query (HashMAC.hmacVerify, 1)	succeeded (with hint) in 111 milliseconds with fuel 0 and ifuel 1
(.\ECGroup.fst(28,0-30,45))
Query (ECGroup.point_format, 1)	succeeded (with hint) in 93 milliseconds with fuel 0 and ifuel 1
(.\CommonDH.fst(13,4-13,7))
Query (CommonDH.__proj__FFP__item___0, 1)	succeeded (with hint) in 120 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(284,17-286,39))
Query (TLSConstants.macKeySize, 1)	succeeded (with hint) in 105 milliseconds with fuel 0 and ifuel 2
(.\PMS.fst(27,0-30,30))
Query (PMS.honestRSAPMS, 1)	succeeded (with hint) in 97 milliseconds with fuel 0 and ifuel 1
(.\DHGroup.fst(50,9-54,16))
Query (DHGroup.ffdhe4096, 1)	succeeded (with hint) in 165 milliseconds with fuel 0 and ifuel 1
(.\ECGroup.fst(29,4-29,20))
Query (ECGroup.uu___is_ECP_UNCOMPRESSED, 1)	succeeded (with hint) in 90 milliseconds with fuel 0 and ifuel 1
(.\HashMAC.fst(50,17-54,14))
Query (HashMAC.is_tls_mac, 1)	succeeded (with hint) in 103 milliseconds with fuel 0 and ifuel 1
(C:\Build\Agent\_work\36\s\src\tls\TLSInfo.fst) digest is valid; using hints db.
(.\Nonce.fst(51,34-51,78))
Query (Nonce.fresh, 1)	succeeded (with hint) in 145 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(289,14-291,39))
Query (TLSConstants.macSize, 1)	succeeded (with hint) in 130 milliseconds with fuel 0 and ifuel 2
(.\Cert.fst(25,0-55,7))
Query (Cert.certificateListBytes_is_injective, 1)	succeeded (with hint) in 404 milliseconds with fuel 2 and ifuel 2
(.\CommonDH.fst(14,4-14,7))
Query (CommonDH.uu___is_ECP, 1)	succeeded (with hint) in 155 milliseconds with fuel 0 and ifuel 1
(.\PMS.fst(33,0-40,27))
Query (PMS.genRSA, 1)	succeeded (with hint) in 147 milliseconds with fuel 0 and ifuel 1
(.\ECGroup.fst(30,4-30,15))
Query (ECGroup.uu___is_ECP_UNKNOWN, 1)	succeeded (with hint) in 105 milliseconds with fuel 0 and ifuel 1
(.\HashMAC.fst(58,0-61,49))
Query (HashMAC.tls_mac, 1)	succeeded (with hint) in 110 milliseconds with fuel 0 and ifuel 1
(.\DHGroup.fst(56,9-60,16))
Query (DHGroup.ffdhe6144, 1)	succeeded (with hint) in 159 milliseconds with fuel 0 and ifuel 1
(.\TLSInfo.fst(85,4-85,16))
Query (TLSInfo.__proj__Mkconfig__item__compressions, 1)	succeeded (with hint) in 102 milliseconds with fuel 3 and ifuel 1
(.\Nonce.fst(51,41-51,69))
Query (Nonce.fresh, 2)	succeeded (with hint) in 157 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(314,0-318,106))
Query (TLSConstants.cipherSuite, 1)	succeeded (with hint) in 134 milliseconds with fuel 0 and ifuel 2
(.\Cert.fst(29,7-29,56))
Query (Cert.certificateListBytes_is_injective, 2)	succeeded (with hint) in 122 milliseconds with fuel 0 and ifuel 1
(.\CommonDH.fst(14,4-14,7))
Query (CommonDH.__proj__ECP__item___0, 1)	succeeded (with hint) in 157 milliseconds with fuel 0 and ifuel 1
(.\DHGroup.fst(62,9-66,16))
Query (DHGroup.ffdhe8192, 1)	succeeded (with hint) in 97 milliseconds with fuel 0 and ifuel 1
(.\PMS.fst(56,12-56,40))
Query (PMS.dhseed, 1)	succeeded (with hint) in 170 milliseconds with fuel 0 and ifuel 1
(.\ECGroup.fst(30,4-30,15))
Query (ECGroup.__proj__ECP_UNKNOWN__item___0, 1)	succeeded (with hint) in 165 milliseconds with fuel 0 and ifuel 1
(.\HashMAC.fst(63,0-66,57))
Query (HashMAC.tls_macVerify, 1)	succeeded (with hint) in 151 milliseconds with fuel 0 and ifuel 1
Hint-info (.\HashMAC.fst(13,0-13,40)): Replay succeeded in 113 milliseconds
Hint-info (.\HashMAC.fst(14,0-14,40)): Replay succeeded in 103 milliseconds
Hint-info (.\HashMAC.fst(15,0-15,40)): Replay succeeded in 116 milliseconds
Hint-info (.\HashMAC.fst(16,0-16,40)): Replay succeeded in 137 milliseconds
Hint-info (.\HashMAC.fst(19,30-19,42)): Replay succeeded in 138 milliseconds
Hint-info (.\HashMAC.fst(19,46-19,59)): Replay succeeded in 92 milliseconds
Hint-info (.\HashMAC.fst(21,23-23,49)): Replay succeeded in 100 milliseconds
Hint-info (.\HashMAC.fst(26,0-30,5)): Replay succeeded in 111 milliseconds
Hint-info (.\HashMAC.fst(40,0-41,48)): Replay succeeded in 93 milliseconds
Hint-info (.\HashMAC.fst(45,0-47,23)): Replay succeeded in 111 milliseconds
Hint-info (.\HashMAC.fst(50,17-54,14)): Replay succeeded in 103 milliseconds
Hint-info (.\HashMAC.fst(58,0-61,49)): Replay succeeded in 110 milliseconds
Hint-info (.\HashMAC.fst(63,0-66,57)): Replay succeeded in 151 milliseconds
(.\TLSConstants.fst(315,4-315,19))
Query (TLSConstants.uu___is_NullCipherSuite, 1)	succeeded (with hint) in 104 milliseconds with fuel 0 and ifuel 2
(.\Nonce.fst(55,12-55,59))
Query (Nonce.fresh_region, 1)	succeeded (with hint) in 126 milliseconds with fuel 0 and ifuel 1
Verified module: HashMAC (2490 milliseconds)
All verification conditions discharged successfully
(.\Cert.fst(44,8-44,46))
Query (Cert.certificateListBytes_is_injective, 3)	succeeded (with hint) in 92 milliseconds with fuel 0 and ifuel 1
(.\TLSInfo.fst(120,0-123,84))
Query (TLSInfo.sigAlgPref, 1)	succeeded (with hint) in 163 milliseconds with fuel 3 and ifuel 1
C:/Build/Agent/_work/36/s/fstar/bin/fstar.exe --fstar_home C:/Build/Agent/_work/36/s/fstar --record_hints --hint_info --trace_error --max_fuel 4 --initial_fuel 0 --max_ifuel 2 --initial_ifuel 1 --z3rlimit 20 --__temp_no_proj Handshake --__temp_no_proj Connection --use_hints --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/crypto/hacl \
--include C:/Build/Agent/_work/36/s/fstar/ucontrib/CoreCrypto/fst/ --include C:/Build/Agent/_work/36/s/fstar/ucontrib/Platform/fst/ --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/crypto/real --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/LowCProvider/fst --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/crypto --include ../../libs/ffi --include C:/Build/Agent/_work/36/s/fstar/ulib/hyperstack \
--include ideal-flags \
--verify_module Record \
Record.fst
(.\PMS.fst(59,0-63,27))
Query (PMS.dhpms, 1)	succeeded (with hint) in 97 milliseconds with fuel 0 and ifuel 1
(.\CommonDH.fst(16,0-18,24))
Query (CommonDH.key, 1)	succeeded (with hint) in 118 milliseconds with fuel 0 and ifuel 1
(.\ECGroup.fst(40,0-42,19))
Query (ECGroup.keygen, 1)	succeeded (with hint) in 95 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(316,4-316,15))
Query (TLSConstants.uu___is_CipherSuite, 1)	succeeded (with hint) in 72 milliseconds with fuel 0 and ifuel 2
(C:\Build\Agent\_work\36\s\src\tls\Signature.fst) digest is valid; using hints db.
(.\DHGroup.fst(69,22-75,29))
Query (DHGroup.params_of_group, 1)	succeeded (with hint) in 170 milliseconds with fuel 0 and ifuel 1
(.\Cert.fst(51,8-51,46))
Query (Cert.certificateListBytes_is_injective, 4)	succeeded (with hint) in 156 milliseconds with fuel 0 and ifuel 1
(.\Nonce.fst(55,29-55,57))
Query (Nonce.fresh_region, 2)	succeeded (with hint) in 171 milliseconds with fuel 0 and ifuel 1
(.\CommonDH.fst(17,4-17,9))
Query (CommonDH.uu___is_FFKey, 1)	succeeded (with hint) in 97 milliseconds with fuel 0 and ifuel 1
(.\PMS.fst(61,4-61,14))
Query (PMS.uu___is_IdealDHPMS, 1)	succeeded (with hint) in 98 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(316,4-316,15))
Query (TLSConstants.__proj__CipherSuite__item___0, 1)	succeeded (with hint) in 81 milliseconds with fuel 0 and ifuel 2
(.\ECGroup.fst(45,0-49,11))
Query (ECGroup.dh_responder, 1)	succeeded (with hint) in 96 milliseconds with fuel 0 and ifuel 1
(.\Signature.fst(21,9-21,13))
Query (Signature.__proj__Use__item__info, 1)	succeeded (with hint) in 132 milliseconds with fuel 0 and ifuel 1
(.\DHGroup.fst(78,0-80,19))
Query (DHGroup.keygen, 1)	succeeded (with hint) in 107 milliseconds with fuel 0 and ifuel 1
(.\TLSInfo.fst(126,0-131,15))
Query (TLSInfo.ec_ff_to_ng, 1)	succeeded (with hint) in 209 milliseconds with fuel 3 and ifuel 1
(.\Nonce.fst(59,0-61,48))
Query (Nonce.registered, 1)	succeeded (with hint) in 93 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(316,4-316,15))
Query (TLSConstants.__proj__CipherSuite__item___1, 1)	succeeded (with hint) in 98 milliseconds with fuel 0 and ifuel 2
(.\PMS.fst(61,4-61,14))
Query (PMS.__proj__IdealDHPMS__item___0, 1)	succeeded (with hint) in 98 milliseconds with fuel 0 and ifuel 1
(.\CommonDH.fst(17,4-17,9))
Query (CommonDH.__proj__FFKey__item___0, 1)	succeeded (with hint) in 95 milliseconds with fuel 0 and ifuel 1
(.\Cert.fst(57,0-60,42))
Query (Cert.endpoint_keytype, 1)	succeeded (with hint) in 166 milliseconds with fuel 0 and ifuel 1
(.\Signature.fst(22,10-22,14))
Query (Signature.__proj__Use__item__core, 1)	succeeded (with hint) in 107 milliseconds with fuel 0 and ifuel 1
(.\ECGroup.fst(52,0-53,30))
Query (ECGroup.dh_initiator, 1)	succeeded (with hint) in 124 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(316,4-316,15))
Query (TLSConstants.__proj__CipherSuite__item___2, 1)	succeeded (with hint) in 72 milliseconds with fuel 0 and ifuel 2
(.\Nonce.fst(61,15-61,48))
Query (Nonce.registered, 2)	succeeded (with hint) in 93 milliseconds with fuel 0 and ifuel 1
(.\DHGroup.fst(83,0-87,11))
Query (DHGroup.dh_responder, 1)	succeeded (with hint) in 157 milliseconds with fuel 0 and ifuel 1
(.\PMS.fst(63,4-63,17))
Query (PMS.uu___is_ConcreteDHPMS, 1)	succeeded (with hint) in 125 milliseconds with fuel 0 and ifuel 1
(.\CommonDH.fst(18,4-18,9))
Query (CommonDH.uu___is_ECKey, 1)	succeeded (with hint) in 94 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(317,4-317,8))
Query (TLSConstants.uu___is_SCSV, 1)	succeeded (with hint) in 72 milliseconds with fuel 0 and ifuel 2
(.\Signature.fst(23,10-23,16))
Query (Signature.__proj__Use__item__digest, 1)	succeeded (with hint) in 97 milliseconds with fuel 0 and ifuel 1
(.\TLSInfo.fst(135,0-182,5))
Query (TLSInfo.defaultConfig, 1)	succeeded (with hint) in 159 milliseconds with fuel 10 and ifuel 1
(.\Nonce.fst(63,0-69,48))
Query (Nonce.testify, 1)	succeeded (with hint) in 102 milliseconds with fuel 0 and ifuel 1
(.\DHGroup.fst(90,0-91,29))
Query (DHGroup.dh_initiator, 1)	succeeded (with hint) in 118 milliseconds with fuel 0 and ifuel 1
(.\CommonDH.fst(18,4-18,9))
Query (CommonDH.__proj__ECKey__item___0, 1)	succeeded (with hint) in 98 milliseconds with fuel 0 and ifuel 1
(.\Cert.fst(63,0-76,104))
Query (Cert.parseCertificateList, 1)	succeeded (with hint) in 133 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(317,4-317,8))
Query (TLSConstants.__proj__SCSV__item___0, 1)	succeeded (with hint) in 75 milliseconds with fuel 0 and ifuel 2
(.\PMS.fst(63,4-63,17))
Query (PMS.__proj__ConcreteDHPMS__item___0, 1)	succeeded (with hint) in 100 milliseconds with fuel 0 and ifuel 1
(.\ECGroup.fst(56,0-66,11))
Query (ECGroup.parse_curve, 1)	succeeded (with hint) in 141 milliseconds with fuel 0 and ifuel 1
(C:\Build\Agent\_work\36\s\src\tls\TLSExtensions.fst) digest is valid; using hints db.
(.\Signature.fst(24,10-24,21))
Query (Signature.__proj__Use__item__keyEncipher, 1)	succeeded (with hint) in 122 milliseconds with fuel 0 and ifuel 1
(.\TLSInfo.fst(190,0-190,23))
Query (TLSInfo.random, 1)	succeeded (with hint) in 105 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(318,4-318,22))
Query (TLSConstants.uu___is_UnknownCipherSuite, 1)	succeeded (with hint) in 71 milliseconds with fuel 0 and ifuel 2
(.\Nonce.fst(68,3-68,37))
Query (Nonce.testify, 2)	succeeded (with hint) in 132 milliseconds with fuel 0 and ifuel 1
(.\CommonDH.fst(20,0-22,44))
Query (CommonDH.share, 1)	succeeded (with hint) in 95 milliseconds with fuel 0 and ifuel 1
(.\ECGroup.fst(57,5-57,17))
Query (ECGroup.parse_curve, 2)	succeeded (with hint) in 98 milliseconds with fuel 0 and ifuel 1
(.\Cert.fst(75,10-75,22))
Query (Cert.parseCertificateList, 2)	succeeded (with hint) in 96 milliseconds with fuel 0 and ifuel 1
(.\DHGroup.fst(94,0-101,17))
Query (DHGroup.serialize, 1)	succeeded (with hint) in 112 milliseconds with fuel 0 and ifuel 1
(.\PMS.fst(66,0-69,29))
Query (PMS.honestDHPMS, 1)	succeeded (with hint) in 111 milliseconds with fuel 0 and ifuel 1
(.\Signature.fst(25,10-25,21))
Query (Signature.__proj__Use__item__keyExchange, 1)	succeeded (with hint) in 118 milliseconds with fuel 0 and ifuel 1
(.\TLSExtensions.fst(13,0-16,58))
Query (TLSExtensions.renegotiationInfo, 1)	succeeded (with hint) in 123 milliseconds with fuel 0 and ifuel 1
(.\TLSInfo.fst(193,0-193,24))
Query (TLSInfo.csRands, 1)	succeeded (with hint) in 105 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(318,24-318,25))
Query (TLSConstants.__proj__UnknownCipherSuite__item__a, 1)	succeeded (with hint) in 101 milliseconds with fuel 0 and ifuel 2
(.\ECGroup.fst(59,7-59,20))
Query (ECGroup.parse_curve, 3)	succeeded (with hint) in 93 milliseconds with fuel 0 and ifuel 1
(.\CommonDH.fst(21,4-21,11))
Query (CommonDH.uu___is_FFShare, 1)	succeeded (with hint) in 109 milliseconds with fuel 0 and ifuel 1
(.\Nonce.fst(68,3-68,37))
Query (Nonce.testify, 3)	succeeded (with hint) in 97 milliseconds with fuel 0 and ifuel 1
(.\Cert.fst(80,21-80,65))
Query (Cert.lemma_parseCertificateList_length, 1)	succeeded (with hint) in 92 milliseconds with fuel 0 and ifuel 1
(.\PMS.fst(85,0-87,70))
Query (PMS.pms, 1)	succeeded (with hint) in 126 milliseconds with fuel 0 and ifuel 1
(.\Signature.fst(34,51-34,74))
Query (Signature.int_cma_assumption, 1)	succeeded (with hint) in 96 milliseconds with fuel 0 and ifuel 1
(C:\Build\Agent\_work\36\s\src\tls\IdNonce.fst) digest is valid; using hints db.
(.\TLSConstants.fst(318,34-318,35))
Query (TLSConstants.__proj__UnknownCipherSuite__item__b, 1)	succeeded (with hint) in 94 milliseconds with fuel 0 and ifuel 2
(.\DHGroup.fst(105,0-108,13))
Query (DHGroup.serialize_public, 1)	succeeded (with hint) in 167 milliseconds with fuel 0 and ifuel 1
(.\TLSInfo.fst(206,0-208,83))
Query (TLSInfo.serverName, 1)	succeeded (with hint) in 109 milliseconds with fuel 0 and ifuel 1
(.\ECGroup.fst(68,0-68,38))
Query (ECGroup.curve_id, 1)	succeeded (with hint) in 91 milliseconds with fuel 0 and ifuel 1
(.\CommonDH.fst(21,4-21,11))
Query (CommonDH.__proj__FFShare__item___0, 1)	succeeded (with hint) in 97 milliseconds with fuel 0 and ifuel 1
(.\TLSExtensions.fst(14,4-14,19))
Query (TLSExtensions.uu___is_FirstConnection, 1)	succeeded (with hint) in 142 milliseconds with fuel 0 and ifuel 1
(.\Nonce.fst(69,15-69,48))
Query (Nonce.testify, 4)	succeeded (with hint) in 102 milliseconds with fuel 0 and ifuel 1
(.\Cert.fst(78,0-82,23))
Query (Cert.lemma_parseCertificateList_length, 2)	succeeded (with hint) in 143 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(326,34-326,41))
Query (TLSConstants.compression, 1)	succeeded (with hint) in 73 milliseconds with fuel 0 and ifuel 2
(.\PMS.fst(86,4-86,10))
Query (PMS.uu___is_RSAPMS, 1)	succeeded (with hint) in 97 milliseconds with fuel 0 and ifuel 1
(.\Signature.fst(37,22-39,12))
Query (Signature.int_cma, 1)	succeeded (with hint) in 124 milliseconds with fuel 0 and ifuel 1
(.\IdNonce.fst(16,28-16,45))
Query (IdNonce.n_id, 1)	succeeded (with hint) in 131 milliseconds with fuel 0 and ifuel 1
(.\ECGroup.fst(69,0-73,26))
Query (ECGroup.curve_id, 2)	succeeded (with hint) in 112 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(324,0-326,43))
Query (TLSConstants.compression, 2)	succeeded (with hint) in 71 milliseconds with fuel 0 and ifuel 2
(.\CommonDH.fst(22,4-22,11))
Query (CommonDH.uu___is_ECShare, 1)	succeeded (with hint) in 113 milliseconds with fuel 0 and ifuel 1
(.\Nonce.fst(81,35-81,62))
Query (Nonce.mkHelloRandom, 1)	succeeded (with hint) in 96 milliseconds with fuel 0 and ifuel 1
(.\TLSExtensions.fst(15,4-15,27))
Query (TLSExtensions.uu___is_ClientRenegotiationInfo, 1)	succeeded (with hint) in 116 milliseconds with fuel 0 and ifuel 1
(.\TLSInfo.fst(207,2-207,9))
Query (TLSInfo.uu___is_SNI_DNS, 1)	succeeded (with hint) in 155 milliseconds with fuel 0 and ifuel 1
(.\PMS.fst(86,4-86,10))
Query (PMS.__proj__RSAPMS__item___0, 1)	succeeded (with hint) in 111 milliseconds with fuel 0 and ifuel 1
(.\Signature.fst(37,53-37,76))
Query (Signature.int_cma, 2)	succeeded (with hint) in 95 milliseconds with fuel 0 and ifuel 1
(.\DHGroup.fst(111,0-114,22))
Query (DHGroup.parse_public, 1)	succeeded (with hint) in 190 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(324,0-326,43))
Query (TLSConstants.compression, 3)	succeeded (with hint) in 74 milliseconds with fuel 0 and ifuel 2
(.\IdNonce.fst(20,0-21,60))
.\IdNonce.fst(20,0-21,60): (Warning) Top-level let-bindings must be total; this term may have effects
Query (IdNonce.nonce_id_table, 1)	succeeded (with hint) in 136 milliseconds with fuel 0 and ifuel 1
(.\Nonce.fst(82,16-82,49))
Query (Nonce.mkHelloRandom, 2)	succeeded (with hint) in 94 milliseconds with fuel 0 and ifuel 1
(.\CommonDH.fst(22,4-22,11))
Query (CommonDH.__proj__ECShare__item___0, 1)	succeeded (with hint) in 98 milliseconds with fuel 0 and ifuel 1
(.\TLSExtensions.fst(15,4-15,27))
Query (TLSExtensions.__proj__ClientRenegotiationInfo__item___0, 1)	succeeded (with hint) in 121 milliseconds with fuel 0 and ifuel 1
(.\PMS.fst(87,4-87,9))
Query (PMS.uu___is_DHPMS, 1)	succeeded (with hint) in 98 milliseconds with fuel 0 and ifuel 1
(.\TLSInfo.fst(207,2-207,9))
Query (TLSInfo.__proj__SNI_DNS__item___0, 1)	succeeded (with hint) in 138 milliseconds with fuel 0 and ifuel 1
(.\ECGroup.fst(76,0-86,11))
Query (ECGroup.parse_point, 1)	succeeded (with hint) in 115 milliseconds with fuel 0 and ifuel 1
(.\Signature.fst(41,0-44,22))
Query (Signature.public_repr, 1)	succeeded (with hint) in 108 milliseconds with fuel 0 and ifuel 1
(.\Cert.fst(83,0-93,17))
Query (Cert.lemma_parseCertificateList_length, 3)	succeeded (with hint) in 242 milliseconds with fuel 2 and ifuel 2
(.\TLSConstants.fst(324,0-326,43))
Query (TLSConstants.compression, 4)	succeeded (with hint) in 112 milliseconds with fuel 0 and ifuel 2
(.\IdNonce.fst(23,53-23,85))
Query (IdNonce.id_of_nonce, 1)	succeeded (with hint) in 150 milliseconds with fuel 0 and ifuel 1
(.\PMS.fst(87,4-87,9))
Query (PMS.__proj__DHPMS__item___0, 1)	succeeded (with hint) in 113 milliseconds with fuel 0 and ifuel 1
(.\CommonDH.fst(27,0-31,13))
Query (CommonDH.group_of_namedGroup, 1)	succeeded (with hint) in 171 milliseconds with fuel 0 and ifuel 1
(.\TLSExtensions.fst(16,4-16,27))
Query (TLSExtensions.uu___is_ServerRenegotiationInfo, 1)	succeeded (with hint) in 118 milliseconds with fuel 0 and ifuel 1
(.\ECGroup.fst(78,5-78,40))
Query (ECGroup.parse_point, 2)	succeeded (with hint) in 91 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(325,4-325,19))
Query (TLSConstants.uu___is_NullCompression, 1)	succeeded (with hint) in 80 milliseconds with fuel 0 and ifuel 2
(.\Signature.fst(42,4-42,10))
Query (Signature.uu___is_PK_RSA, 1)	succeeded (with hint) in 98 milliseconds with fuel 0 and ifuel 1
(.\TLSInfo.fst(208,2-208,13))
Query (TLSInfo.uu___is_SNI_UNKNOWN, 1)	succeeded (with hint) in 140 milliseconds with fuel 0 and ifuel 1
(.\Cert.fst(99,8-102,47))
Query (Cert.list_chain_is_list_bytes, 1)	succeeded (with hint) in 138 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(326,4-326,22))
Query (TLSConstants.uu___is_UnknownCompression, 1)	succeeded (with hint) in 85 milliseconds with fuel 0 and ifuel 2
(.\PMS.fst(89,16-91,53))
Query (PMS.honestPMS, 1)	succeeded (with hint) in 107 milliseconds with fuel 0 and ifuel 1
(.\CommonDH.fst(34,0-37,14))
Query (CommonDH.same_group, 1)	succeeded (with hint) in 97 milliseconds with fuel 0 and ifuel 1
Hint-info (.\PMS.fst(16,0-16,30)): Replay succeeded in 116 milliseconds
Hint-info (.\PMS.fst(19,0-23,29)): Replay succeeded in 120 milliseconds
Hint-info (.\PMS.fst(21,4-21,15)): Replay succeeded in 122 milliseconds
Hint-info (.\PMS.fst(21,4-21,15)): Replay succeeded in 117 milliseconds
Hint-info (.\PMS.fst(23,4-23,18)): Replay succeeded in 97 milliseconds
Hint-info (.\PMS.fst(23,4-23,18)): Replay succeeded in 97 milliseconds
Hint-info (.\PMS.fst(27,0-30,30)): Replay succeeded in 97 milliseconds
Hint-info (.\PMS.fst(33,0-40,27)): Replay succeeded in 147 milliseconds
Hint-info (.\PMS.fst(56,12-56,40)): Replay succeeded in 170 milliseconds
Hint-info (.\PMS.fst(59,0-63,27)): Replay succeeded in 97 milliseconds
Hint-info (.\PMS.fst(61,4-61,14)): Replay succeeded in 98 milliseconds
Hint-info (.\PMS.fst(61,4-61,14)): Replay succeeded in 98 milliseconds
Hint-info (.\PMS.fst(63,4-63,17)): Replay succeeded in 125 milliseconds
Hint-info (.\PMS.fst(63,4-63,17)): Replay succeeded in 100 milliseconds
Hint-info (.\PMS.fst(66,0-69,29)): Replay succeeded in 111 milliseconds
Hint-info (.\PMS.fst(85,0-87,70)): Replay succeeded in 126 milliseconds
Hint-info (.\PMS.fst(86,4-86,10)): Replay succeeded in 97 milliseconds
Hint-info (.\PMS.fst(86,4-86,10)): Replay succeeded in 111 milliseconds
Hint-info (.\PMS.fst(87,4-87,9)): Replay succeeded in 98 milliseconds
Hint-info (.\PMS.fst(87,4-87,9)): Replay succeeded in 113 milliseconds
Hint-info (.\PMS.fst(89,16-91,53)): Replay succeeded in 107 milliseconds
(.\IdNonce.fst(26,29-26,56))
Query (IdNonce.insert, 1)	succeeded (with hint) in 119 milliseconds with fuel 0 and ifuel 1
Verified module: PMS (3794 milliseconds)
All verification conditions discharged successfully
(.\TLSExtensions.fst(16,4-16,27))
Query (TLSExtensions.__proj__ServerRenegotiationInfo__item___0, 1)	succeeded (with hint) in 151 milliseconds with fuel 0 and ifuel 1
(.\Cert.fst(110,0-115,13))
Query (Cert.check_length, 1)	succeeded (with hint) in 101 milliseconds with fuel 0 and ifuel 1
(.\Signature.fst(42,4-42,10))
Query (Signature.__proj__PK_RSA__item___0, 1)	succeeded (with hint) in 168 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(326,4-326,22))
Query (TLSConstants.__proj__UnknownCompression__item___0, 1)	succeeded (with hint) in 72 milliseconds with fuel 0 and ifuel 2
C:/Build/Agent/_work/36/s/fstar/bin/fstar.exe --fstar_home C:/Build/Agent/_work/36/s/fstar --record_hints --hint_info --trace_error --max_fuel 4 --initial_fuel 0 --max_ifuel 2 --initial_ifuel 1 --z3rlimit 20 --__temp_no_proj Handshake --__temp_no_proj Connection --use_hints --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/crypto/hacl \
--include C:/Build/Agent/_work/36/s/fstar/ucontrib/CoreCrypto/fst/ --include C:/Build/Agent/_work/36/s/fstar/ucontrib/Platform/fst/ --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/crypto/real --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/LowCProvider/fst --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/crypto --include ../../libs/ffi --include C:/Build/Agent/_work/36/s/fstar/ulib/hyperstack \
--include ideal-flags \
--verify_module MAC_SHA256 \
MAC_SHA256.fst
(.\DHGroup.fst(117,0-139,65))
Query (DHGroup.parse_partial, 1)	succeeded (with hint) in 216 milliseconds with fuel 0 and ifuel 1
(.\Nonce.fst(87,0-94,8))
Query (Nonce.mkHelloRandom, 3)	succeeded (with hint) in 344 milliseconds with fuel 0 and ifuel 1
(.\TLSInfo.fst(208,2-208,13))
Query (TLSInfo.__proj__SNI_UNKNOWN__item___0, 1)	succeeded (with hint) in 145 milliseconds with fuel 0 and ifuel 1
Hint-info (.\DHGroup.fst(19,0-21,22)): Replay succeeded in 120 milliseconds
Hint-info (.\DHGroup.fst(20,4-20,9)): Replay succeeded in 107 milliseconds
Hint-info (.\DHGroup.fst(20,4-20,9)): Replay succeeded in 112 milliseconds
Hint-info (.\DHGroup.fst(21,4-21,12)): Replay succeeded in 126 milliseconds
Hint-info (.\DHGroup.fst(21,4-21,12)): Replay succeeded in 118 milliseconds
Hint-info (.\DHGroup.fst(26,0-27,37)): Replay succeeded in 119 milliseconds
Hint-info (.\DHGroup.fst(30,0-36,3)): Replay succeeded in 103 milliseconds
Hint-info (.\DHGroup.fst(38,9-42,16)): Replay succeeded in 96 milliseconds
Hint-info (.\DHGroup.fst(44,9-48,16)): Replay succeeded in 164 milliseconds
Hint-info (.\DHGroup.fst(50,9-54,16)): Replay succeeded in 165 milliseconds
Hint-info (.\DHGroup.fst(56,9-60,16)): Replay succeeded in 159 milliseconds
Hint-info (.\DHGroup.fst(62,9-66,16)): Replay succeeded in 97 milliseconds
Hint-info (.\DHGroup.fst(69,22-75,29)): Replay succeeded in 170 milliseconds
Hint-info (.\DHGroup.fst(78,0-80,19)): Replay succeeded in 107 milliseconds
Hint-info (.\DHGroup.fst(83,0-87,11)): Replay succeeded in 157 milliseconds
Hint-info (.\DHGroup.fst(90,0-91,29)): Replay succeeded in 118 milliseconds
Hint-info (.\DHGroup.fst(94,0-101,17)): Replay succeeded in 112 milliseconds
Hint-info (.\DHGroup.fst(105,0-108,13)): Replay succeeded in 167 milliseconds
Hint-info (.\DHGroup.fst(111,0-114,22)): Replay succeeded in 190 milliseconds
Hint-info (.\DHGroup.fst(117,0-139,65)): Replay succeeded in 216 milliseconds
Verified module: DHGroup (4600 milliseconds)
All verification conditions discharged successfully
(.\CommonDH.fst(35,39-35,44))
Query (CommonDH.same_group, 2)	succeeded (with hint) in 109 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(326,4-326,22))
Query (TLSConstants.__proj__UnknownCompression__item___0, 2)	succeeded (with hint) in 76 milliseconds with fuel 0 and ifuel 2
C:/Build/Agent/_work/36/s/fstar/bin/fstar.exe --fstar_home C:/Build/Agent/_work/36/s/fstar --record_hints --hint_info --trace_error --max_fuel 4 --initial_fuel 0 --max_ifuel 2 --initial_ifuel 1 --z3rlimit 20 --__temp_no_proj Handshake --__temp_no_proj Connection --use_hints --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/crypto/hacl \
--include C:/Build/Agent/_work/36/s/fstar/ucontrib/CoreCrypto/fst/ --include C:/Build/Agent/_work/36/s/fstar/ucontrib/Platform/fst/ --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/crypto/real --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/LowCProvider/fst --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/crypto --include ../../libs/ffi --include C:/Build/Agent/_work/36/s/fstar/ulib/hyperstack \
--include ideal-flags \
--verify_module MAC_SHA1 \
MAC_SHA1.fst
(.\IdNonce.fst(28,36-28,62))
Query (IdNonce.insert, 2)	succeeded (with hint) in 125 milliseconds with fuel 0 and ifuel 1
(.\Signature.fst(43,4-43,10))
Query (Signature.uu___is_PK_DSA, 1)	succeeded (with hint) in 99 milliseconds with fuel 0 and ifuel 1
(.\Cert.fst(121,0-129,111))
Query (Cert.lookup_chain, 1)	succeeded (with hint) in 112 milliseconds with fuel 0 and ifuel 1
(.\TLSInfo.fst(211,2-211,16))
Query (TLSInfo.uu___is_RI_Unsupported, 1)	succeeded (with hint) in 107 milliseconds with fuel 0 and ifuel 1
Hint-info (.\Cert.fst(16,0-21,45)): Replay succeeded in 115 milliseconds
Hint-info (.\Cert.fst(25,0-55,7)): Replay succeeded in 404 milliseconds
Hint-info (.\Cert.fst(29,7-29,56)): Replay succeeded in 122 milliseconds
Hint-info (.\Cert.fst(44,8-44,46)): Replay succeeded in 92 milliseconds
Hint-info (.\Cert.fst(51,8-51,46)): Replay succeeded in 156 milliseconds
Hint-info (.\Cert.fst(57,0-60,42)): Replay succeeded in 166 milliseconds
Hint-info (.\Cert.fst(63,0-76,104)): Replay succeeded in 133 milliseconds
Hint-info (.\Cert.fst(75,10-75,22)): Replay succeeded in 96 milliseconds
Hint-info (.\Cert.fst(80,21-80,65)): Replay succeeded in 92 milliseconds
Hint-info (.\Cert.fst(78,0-82,23)): Replay succeeded in 143 milliseconds
Hint-info (.\Cert.fst(83,0-93,17)): Replay succeeded in 242 milliseconds
Hint-info (.\Cert.fst(99,8-102,47)): Replay succeeded in 138 milliseconds
Hint-info (.\Cert.fst(110,0-115,13)): Replay succeeded in 101 milliseconds
Hint-info (.\Cert.fst(121,0-129,111)): Replay succeeded in 112 milliseconds
(.\ECGroup.fst(89,0-101,67))
Query (ECGroup.parse_partial, 1)	succeeded (with hint) in 228 milliseconds with fuel 0 and ifuel 1
Verified module: Cert (3973 milliseconds)
All verification conditions discharged successfully
(.\CommonDH.fst(36,39-36,44))
Query (CommonDH.same_group, 3)	succeeded (with hint) in 98 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(329,0-329,51))
Query (TLSConstants.compressionBytes, 1)	succeeded (with hint) in 75 milliseconds with fuel 0 and ifuel 2
(.\Nonce.fst(88,2-88,29))
Query (Nonce.mkHelloRandom, 4)	succeeded (with hint) in 123 milliseconds with fuel 0 and ifuel 1
(.\TLSExtensions.fst(19,0-29,26))
Query (TLSExtensions.renegotiationInfoBytes, 1)	succeeded (with hint) in 148 milliseconds with fuel 0 and ifuel 1
C:/Build/Agent/_work/36/s/fstar/bin/fstar.exe --fstar_home C:/Build/Agent/_work/36/s/fstar --record_hints --hint_info --trace_error --max_fuel 4 --initial_fuel 0 --max_ifuel 2 --initial_ifuel 1 --z3rlimit 20 --__temp_no_proj Handshake --__temp_no_proj Connection --use_hints --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/crypto/hacl \
--include C:/Build/Agent/_work/36/s/fstar/ucontrib/CoreCrypto/fst/ --include C:/Build/Agent/_work/36/s/fstar/ucontrib/Platform/fst/ --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/crypto/real --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/LowCProvider/fst --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/crypto --include ../../libs/ffi --include C:/Build/Agent/_work/36/s/fstar/ulib/hyperstack \
--include ideal-flags \
--verify_module StAE \
StAE.fst
(.\Signature.fst(43,4-43,10))
Query (Signature.__proj__PK_DSA__item___0, 1)	succeeded (with hint) in 100 milliseconds with fuel 0 and ifuel 1
(.\IdNonce.fst(29,19-29,52))
Query (IdNonce.insert, 3)	succeeded (with hint) in 119 milliseconds with fuel 0 and ifuel 1
(.\ECGroup.fst(107,13-107,46))
Query (ECGroup.serialize_point, 1)	succeeded (with hint) in 94 milliseconds with fuel 0 and ifuel 1
(.\TLSInfo.fst(212,2-212,10))
Query (TLSInfo.uu___is_RI_Valid, 1)	succeeded (with hint) in 123 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(330,0-333,35))
Query (TLSConstants.compressionBytes, 2)	succeeded (with hint) in 89 milliseconds with fuel 0 and ifuel 2
(.\CommonDH.fst(40,19-42,65))
Query (CommonDH.share_of_key, 1)	succeeded (with hint) in 101 milliseconds with fuel 0 and ifuel 1
(.\Nonce.fst(91,10-91,37))
Query (Nonce.mkHelloRandom, 5)	succeeded (with hint) in 101 milliseconds with fuel 0 and ifuel 1
(.\Signature.fst(44,4-44,12))
Query (Signature.uu___is_PK_ECDSA, 1)	succeeded (with hint) in 99 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(338,0-339,60))
Query (TLSConstants.parseCompression, 1)	succeeded (with hint) in 73 milliseconds with fuel 0 and ifuel 2
(.\ECGroup.fst(107,50-107,83))
Query (ECGroup.serialize_point, 2)	succeeded (with hint) in 94 milliseconds with fuel 0 and ifuel 1
(.\IdNonce.fst(32,0-34,30))
Query (IdNonce.insert, 4)	succeeded (with hint) in 130 milliseconds with fuel 0 and ifuel 1
(.\TLSInfo.fst(213,2-213,12))
Query (TLSInfo.uu___is_RI_Invalid, 1)	succeeded (with hint) in 104 milliseconds with fuel 0 and ifuel 1
(.\Nonce.fst(92,16-92,45))
Query (Nonce.mkHelloRandom, 6)	succeeded (with hint) in 95 milliseconds with fuel 0 and ifuel 1
(.\CommonDH.fst(48,13-50,38))
Query (CommonDH.keygen, 1)	succeeded (with hint) in 115 milliseconds with fuel 0 and ifuel 1
(.\Signature.fst(44,4-44,12))
Query (Signature.__proj__PK_ECDSA__item___0, 1)	succeeded (with hint) in 105 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(340,0-343,30))
Query (TLSConstants.parseCompression, 2)	succeeded (with hint) in 86 milliseconds with fuel 0 and ifuel 2
(.\ECGroup.fst(108,18-108,53))
Query (ECGroup.serialize_point, 3)	succeeded (with hint) in 92 milliseconds with fuel 0 and ifuel 1
(.\TLSExtensions.fst(33,0-49,104))
Query (TLSExtensions.parseRenegotiationInfo, 1)	succeeded (with hint) in 185 milliseconds with fuel 0 and ifuel 1
(.\Nonce.fst(92,16-92,45))
Query (Nonce.mkHelloRandom, 7)	succeeded (with hint) in 99 milliseconds with fuel 0 and ifuel 1
(.\TLSInfo.fst(215,0-226,1))
Query (TLSInfo.negotiatedExtensions, 1)	succeeded (with hint) in 115 milliseconds with fuel 0 and ifuel 1
(.\CommonDH.fst(53,19-59,19))
Query (CommonDH.dh_responder, 1)	succeeded (with hint) in 108 milliseconds with fuel 0 and ifuel 1
(.\IdNonce.fst(33,2-33,28))
Query (IdNonce.insert, 5)	succeeded (with hint) in 135 milliseconds with fuel 0 and ifuel 1
(.\Signature.fst(46,0-49,47))
Query (Signature.secret_repr, 1)	succeeded (with hint) in 118 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(351,0-357,9))
Query (TLSConstants.parseCompressions, 1)	succeeded (with hint) in 90 milliseconds with fuel 0 and ifuel 2
(.\ECGroup.fst(109,0-112,3))
Query (ECGroup.serialize_point, 4)	succeeded (with hint) in 114 milliseconds with fuel 0 and ifuel 1
(.\Nonce.fst(96,0-102,26))
Query (Nonce.lookup, 1)	succeeded (with hint) in 101 milliseconds with fuel 0 and ifuel 1
(.\TLSExtensions.fst(51,5-77,45))
Query (TLSExtensions.preEarlyDataIndication, 1)	succeeded (with hint) in 129 milliseconds with fuel 0 and ifuel 1
(.\CommonDH.fst(61,29-63,30))
Query (CommonDH.has_priv, 1)	succeeded (with hint) in 97 milliseconds with fuel 0 and ifuel 1
(.\Signature.fst(47,4-47,10))
Query (Signature.uu___is_SK_RSA, 1)	succeeded (with hint) in 99 milliseconds with fuel 0 and ifuel 1
(.\IdNonce.fst(34,2-34,30))
Query (IdNonce.insert, 6)	succeeded (with hint) in 120 milliseconds with fuel 0 and ifuel 1
(.\TLSInfo.fst(283,0-287,50))
Query (TLSInfo.abbrInfo, 1)	succeeded (with hint) in 117 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(365,0-368,23))
Query (TLSConstants.compressionMethodsBytes, 1)	succeeded (with hint) in 113 milliseconds with fuel 1 and ifuel 1
(.\ECGroup.fst(115,13-115,46))
Query (ECGroup.serialize, 1)	succeeded (with hint) in 94 milliseconds with fuel 0 and ifuel 1
(.\Nonce.fst(103,0-103,47))
Query (Nonce.lookup, 2)	succeeded (with hint) in 108 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(374,0-374,51))
Query (TLSConstants.versionBytes, 1)	succeeded (with hint) in 72 milliseconds with fuel 0 and ifuel 1
(.\TLSExtensions.fst(59,4-59,29))
Query (TLSExtensions.uu___is_ClientEarlyDataIndication, 1)	succeeded (with hint) in 122 milliseconds with fuel 0 and ifuel 1
(.\CommonDH.fst(66,0-70,23))
Query (CommonDH.dh_initiator, 1)	succeeded (with hint) in 115 milliseconds with fuel 0 and ifuel 1
(.\Signature.fst(47,4-47,10))
Query (Signature.__proj__SK_RSA__item___0, 1)	succeeded (with hint) in 129 milliseconds with fuel 0 and ifuel 1
(.\ECGroup.fst(115,50-115,83))
Query (ECGroup.serialize, 2)	succeeded (with hint) in 106 milliseconds with fuel 0 and ifuel 1
(.\IdNonce.fst(34,2-34,30))
Query (IdNonce.insert, 7)	succeeded (with hint) in 122 milliseconds with fuel 0 and ifuel 1
(.\TLSInfo.fst(296,0-296,47))
Query (TLSInfo.csrands, 1)	succeeded (with hint) in 125 milliseconds with fuel 0 and ifuel 1
(.\Nonce.fst(103,20-103,47))
Query (Nonce.lookup, 3)	succeeded (with hint) in 102 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(375,0-381,32))
Query (TLSConstants.versionBytes, 2)	succeeded (with hint) in 96 milliseconds with fuel 0 and ifuel 1
(.\Signature.fst(48,4-48,10))
Query (Signature.uu___is_SK_DSA, 1)	succeeded (with hint) in 106 milliseconds with fuel 0 and ifuel 1
(.\CommonDH.fst(75,0-78,55))
Query (CommonDH.serialize, 1)	succeeded (with hint) in 112 milliseconds with fuel 0 and ifuel 1
(.\ECGroup.fst(116,18-116,53))
Query (ECGroup.serialize, 3)	succeeded (with hint) in 93 milliseconds with fuel 0 and ifuel 1
(.\TLSExtensions.fst(59,4-59,29))
Query (TLSExtensions.__proj__ClientEarlyDataIndication__item___0, 1)	succeeded (with hint) in 124 milliseconds with fuel 0 and ifuel 1
(.\TLSInfo.fst(301,49-301,61))
Query (TLSInfo.kefAlg, 1)	succeeded (with hint) in 124 milliseconds with fuel 0 and ifuel 1
(.\Nonce.fst(107,8-108,94))
Query (Nonce.nonce_rids_exists, 1)	succeeded (with hint) in 95 milliseconds with fuel 0 and ifuel 1
(.\IdNonce.fst(40,20-40,48))
Query (IdNonce.lookup, 1)	succeeded (with hint) in 126 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(384,18-384,41))
Query (TLSConstants.parseVersion, 1)	succeeded (with hint) in 120 milliseconds with fuel 0 and ifuel 1
(.\Signature.fst(48,4-48,10))
Query (Signature.__proj__SK_DSA__item___0, 1)	succeeded (with hint) in 100 milliseconds with fuel 0 and ifuel 1
(.\CommonDH.fst(81,0-93,7))
Query (CommonDH.parse_partial, 1)	succeeded (with hint) in 117 milliseconds with fuel 0 and ifuel 1
(.\ECGroup.fst(117,0-123,16))
Query (ECGroup.serialize, 4)	succeeded (with hint) in 130 milliseconds with fuel 0 and ifuel 1
(.\TLSExtensions.fst(60,4-60,29))
Query (TLSExtensions.uu___is_ServerEarlyDataIndication, 1)	succeeded (with hint) in 154 milliseconds with fuel 0 and ifuel 1
(.\TLSInfo.fst(302,0-308,36))
Query (TLSInfo.kefAlg, 2)	succeeded (with hint) in 122 milliseconds with fuel 0 and ifuel 1
(.\IdNonce.fst(36,0-43,35))
Query (IdNonce.lookup, 2)	succeeded (with hint) in 125 milliseconds with fuel 0 and ifuel 1
Hint-info (.\ECGroup.fst(13,3-13,55)): Replay succeeded in 153 milliseconds
Hint-info (.\ECGroup.fst(14,3-14,55)): Replay succeeded in 98 milliseconds
Hint-info (.\ECGroup.fst(22,0-26,22)): Replay succeeded in 151 milliseconds
Hint-info (.\ECGroup.fst(23,4-23,11)): Replay succeeded in 111 milliseconds
Hint-info (.\ECGroup.fst(23,4-23,11)): Replay succeeded in 139 milliseconds
Hint-info (.\ECGroup.fst(24,4-24,14)): Replay succeeded in 91 milliseconds
Hint-info (.\ECGroup.fst(24,4-24,14)): Replay succeeded in 104 milliseconds
Hint-info (.\ECGroup.fst(25,4-25,21)): Replay succeeded in 108 milliseconds
Hint-info (.\ECGroup.fst(26,4-26,22)): Replay succeeded in 115 milliseconds
Hint-info (.\ECGroup.fst(28,0-30,45)): Replay succeeded in 93 milliseconds
Hint-info (.\ECGroup.fst(29,4-29,20)): Replay succeeded in 90 milliseconds
Hint-info (.\ECGroup.fst(30,4-30,15)): Replay succeeded in 105 milliseconds
Hint-info (.\ECGroup.fst(30,4-30,15)): Replay succeeded in 165 milliseconds
Hint-info (.\ECGroup.fst(40,0-42,19)): Replay succeeded in 95 milliseconds
Hint-info (.\ECGroup.fst(45,0-49,11)): Replay succeeded in 96 milliseconds
Hint-info (.\ECGroup.fst(52,0-53,30)): Replay succeeded in 124 milliseconds
Hint-info (.\ECGroup.fst(56,0-66,11)): Replay succeeded in 141 milliseconds
Hint-info (.\ECGroup.fst(57,5-57,17)): Replay succeeded in 98 milliseconds
Hint-info (.\ECGroup.fst(59,7-59,20)): Replay succeeded in 93 milliseconds
Hint-info (.\ECGroup.fst(68,0-68,38)): Replay succeeded in 91 milliseconds
Hint-info (.\ECGroup.fst(69,0-73,26)): Replay succeeded in 112 milliseconds
Hint-info (.\ECGroup.fst(76,0-86,11)): Replay succeeded in 115 milliseconds
Hint-info (.\ECGroup.fst(78,5-78,40)): Replay succeeded in 91 milliseconds
Hint-info (.\ECGroup.fst(89,0-101,67)): Replay succeeded in 228 milliseconds
Hint-info (.\ECGroup.fst(107,13-107,46)): Replay succeeded in 94 milliseconds
Hint-info (.\ECGroup.fst(107,50-107,83)): Replay succeeded in 94 milliseconds
Hint-info (.\ECGroup.fst(108,18-108,53)): Replay succeeded in 92 milliseconds
Hint-info (.\ECGroup.fst(109,0-112,3)): Replay succeeded in 114 milliseconds
Hint-info (.\ECGroup.fst(115,13-115,46)): Replay succeeded in 94 milliseconds
Hint-info (.\ECGroup.fst(115,50-115,83)): Replay succeeded in 106 milliseconds
Hint-info (.\ECGroup.fst(116,18-116,53)): Replay succeeded in 93 milliseconds
Hint-info (.\ECGroup.fst(117,0-123,16)): Replay succeeded in 130 milliseconds
Verified module: ECGroup (6165 milliseconds)
All verification conditions discharged successfully
(.\Nonce.fst(124,0-129,38))
Query (Nonce.new_region, 1)	succeeded (with hint) in 141 milliseconds with fuel 0 and ifuel 1
(.\Signature.fst(49,4-49,12))
Query (Signature.uu___is_SK_ECDSA, 1)	succeeded (with hint) in 98 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(385,0-392,92))
Query (TLSConstants.parseVersion, 2)	succeeded (with hint) in 108 milliseconds with fuel 0 and ifuel 1
C:/Build/Agent/_work/36/s/fstar/bin/fstar.exe --fstar_home C:/Build/Agent/_work/36/s/fstar --record_hints --hint_info --trace_error --max_fuel 4 --initial_fuel 0 --max_ifuel 2 --initial_ifuel 1 --z3rlimit 20 --__temp_no_proj Handshake --__temp_no_proj Connection --use_hints --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/crypto/hacl \
--include C:/Build/Agent/_work/36/s/fstar/ucontrib/CoreCrypto/fst/ --include C:/Build/Agent/_work/36/s/fstar/ucontrib/Platform/fst/ --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/crypto/real --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/LowCProvider/fst --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/crypto --include ../../libs/ffi --include C:/Build/Agent/_work/36/s/fstar/ulib/hyperstack \
--include ideal-flags \
--verify_module KeySchedule \
KeySchedule.fst
(.\CommonDH.fst(99,20-101,77))
Query (CommonDH.serialize_raw, 1)	succeeded (with hint) in 106 milliseconds with fuel 0 and ifuel 1
(.\TLSExtensions.fst(64,4-64,15))
Query (TLSExtensions.uu___is_E_earlyData, 1)	succeeded (with hint) in 138 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(396,11-396,56))
Query (TLSConstants.inverse_version, 1)	succeeded (with hint) in 72 milliseconds with fuel 0 and ifuel 1
(.\IdNonce.fst(44,0-44,41))
Query (IdNonce.lookup, 3)	succeeded (with hint) in 125 milliseconds with fuel 0 and ifuel 1
(.\TLSInfo.fst(310,49-310,61))
Query (TLSInfo.kdfAlg, 1)	succeeded (with hint) in 119 milliseconds with fuel 0 and ifuel 1
(.\Signature.fst(49,4-49,12))
Query (Signature.__proj__SK_ECDSA__item___0, 1)	succeeded (with hint) in 98 milliseconds with fuel 0 and ifuel 1
(.\Nonce.fst(125,2-125,29))
Query (Nonce.new_region, 2)	succeeded (with hint) in 105 milliseconds with fuel 0 and ifuel 1
(.\Signature.fst(51,0-55,23))
Query (Signature.sigAlg_of_secret_repr, 1)	succeeded (with hint) in 100 milliseconds with fuel 0 and ifuel 1
(.\Nonce.fst(126,11-126,36))
Query (Nonce.new_region, 3)	succeeded (with hint) in 93 milliseconds with fuel 0 and ifuel 1
(.\TLSInfo.fst(311,0-316,36))
Query (TLSInfo.kdfAlg, 2)	succeeded (with hint) in 114 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(398,0-398,26))
Query (TLSConstants.inverse_version, 2)	succeeded (with hint) in 141 milliseconds with fuel 0 and ifuel 1
(.\TLSExtensions.fst(64,4-64,15))
Query (TLSExtensions.__proj__E_earlyData__item___0, 1)	succeeded (with hint) in 119 milliseconds with fuel 0 and ifuel 1
(.\IdNonce.fst(44,15-44,41))
Query (IdNonce.lookup, 4)	succeeded (with hint) in 116 milliseconds with fuel 0 and ifuel 1
(.\CommonDH.fst(104,0-115,13))
Query (CommonDH.parse, 1)	succeeded (with hint) in 177 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(400,24-400,25))
Query (TLSConstants.pinverse_version, 1)	succeeded (with hint) in 72 milliseconds with fuel 0 and ifuel 1
(.\Signature.fst(57,0-61,23))
Query (Signature.sigAlg_of_public_repr, 1)	succeeded (with hint) in 110 milliseconds with fuel 0 and ifuel 1
(.\CommonDH.fst(113,7-113,31))
Query (CommonDH.parse, 2)	succeeded (with hint) in 100 milliseconds with fuel 0 and ifuel 1
(.\Nonce.fst(128,2-128,23))
Query (Nonce.new_region, 4)	succeeded (with hint) in 133 milliseconds with fuel 0 and ifuel 1
(.\TLSInfo.fst(320,35-320,64))
Query (TLSInfo.siAuthEncAlg, 1)	succeeded (with hint) in 115 milliseconds with fuel 0 and ifuel 1
(.\TLSExtensions.fst(65,4-65,18))
Query (TLSExtensions.uu___is_E_preSharedKey, 1)	succeeded (with hint) in 123 milliseconds with fuel 0 and ifuel 1
(.\IdNonce.fst(47,22-47,27))
Query (IdNonce.injectivity, 1)	succeeded (with hint) in 126 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(402,11-402,69))
Query (TLSConstants.pinverse_version, 2)	succeeded (with hint) in 97 milliseconds with fuel 0 and ifuel 1
(.\Signature.fst(64,0-68,24))
.\Nonce.fst(132,0-132,40): (Warning) Top-level let-bindings must be total; this term may have effects
Query (Signature.sig_digest, 1)	succeeded (with hint) in 104 milliseconds with fuel 0 and ifuel 1
(.\Nonce.fst(132,0-132,40))
Query (Nonce.noCsr, 1)	succeeded (with hint) in 96 milliseconds with fuel 0 and ifuel 1
(.\CommonDH.fst(118,0-121,30))
Query (CommonDH.key_params, 1)	succeeded (with hint) in 100 milliseconds with fuel 0 and ifuel 1
(.\TLSInfo.fst(322,0-322,47))
Query (TLSInfo.siAuthEncAlg, 2)	succeeded (with hint) in 115 milliseconds with fuel 0 and ifuel 1
Hint-info (.\CommonDH.fst(8,0-10,25)): Replay succeeded in 117 milliseconds
Hint-info (.\CommonDH.fst(9,4-9,8)): Replay succeeded in 114 milliseconds
Hint-info (.\CommonDH.fst(9,4-9,8)): Replay succeeded in 95 milliseconds
Hint-info (.\CommonDH.fst(10,4-10,8)): Replay succeeded in 116 milliseconds
Hint-info (.\CommonDH.fst(10,4-10,8)): Replay succeeded in 95 milliseconds
Hint-info (.\CommonDH.fst(12,0-14,25)): Replay succeeded in 109 milliseconds
Hint-info (.\CommonDH.fst(13,4-13,7)): Replay succeeded in 95 milliseconds
Hint-info (.\CommonDH.fst(13,4-13,7)): Replay succeeded in 120 milliseconds
Hint-info (.\CommonDH.fst(14,4-14,7)): Replay succeeded in 155 milliseconds
Hint-info (.\CommonDH.fst(14,4-14,7)): Replay succeeded in 157 milliseconds
Hint-info (.\CommonDH.fst(16,0-18,24)): Replay succeeded in 118 milliseconds
Hint-info (.\CommonDH.fst(17,4-17,9)): Replay succeeded in 97 milliseconds
Hint-info (.\CommonDH.fst(17,4-17,9)): Replay succeeded in 95 milliseconds
Hint-info (.\CommonDH.fst(18,4-18,9)): Replay succeeded in 94 milliseconds
Hint-info (.\CommonDH.fst(18,4-18,9)): Replay succeeded in 98 milliseconds
Hint-info (.\CommonDH.fst(20,0-22,44)): Replay succeeded in 95 milliseconds
Hint-info (.\CommonDH.fst(21,4-21,11)): Replay succeeded in 109 milliseconds
Hint-info (.\CommonDH.fst(21,4-21,11)): Replay succeeded in 97 milliseconds
Hint-info (.\CommonDH.fst(22,4-22,11)): Replay succeeded in 113 milliseconds
Hint-info (.\CommonDH.fst(22,4-22,11)): Replay succeeded in 98 milliseconds
Hint-info (.\CommonDH.fst(27,0-31,13)): Replay succeeded in 171 milliseconds
Hint-info (.\CommonDH.fst(34,0-37,14)): Replay succeeded in 97 milliseconds
Hint-info (.\CommonDH.fst(35,39-35,44)): Replay succeeded in 109 milliseconds
Hint-info (.\CommonDH.fst(36,39-36,44)): Replay succeeded in 98 milliseconds
Hint-info (.\CommonDH.fst(40,19-42,65)): Replay succeeded in 101 milliseconds
Hint-info (.\CommonDH.fst(48,13-50,38)): Replay succeeded in 115 milliseconds
Hint-info (.\CommonDH.fst(53,19-59,19)): Replay succeeded in 108 milliseconds
Hint-info (.\CommonDH.fst(61,29-63,30)): Replay succeeded in 97 milliseconds
Hint-info (.\CommonDH.fst(66,0-70,23)): Replay succeeded in 115 milliseconds
Hint-info (.\CommonDH.fst(75,0-78,55)): Replay succeeded in 112 milliseconds
Hint-info (.\CommonDH.fst(81,0-93,7)): Replay succeeded in 117 milliseconds
Hint-info (.\CommonDH.fst(99,20-101,77)): Replay succeeded in 106 milliseconds
Hint-info (.\CommonDH.fst(104,0-115,13)): Replay succeeded in 177 milliseconds
Hint-info (.\CommonDH.fst(113,7-113,31)): Replay succeeded in 100 milliseconds
Hint-info (.\CommonDH.fst(118,0-121,30)): Replay succeeded in 100 milliseconds
(.\TLSConstants.fst(403,3-403,55))
Query (TLSConstants.pinverse_version, 3)	succeeded (with hint) in 72 milliseconds with fuel 0 and ifuel 1
(.\IdNonce.fst(48,27-48,31))
Query (IdNonce.injectivity, 2)	succeeded (with hint) in 120 milliseconds with fuel 0 and ifuel 1
Verified module: CommonDH (6397 milliseconds)
All verification conditions discharged successfully
(.\TLSExtensions.fst(65,4-65,18))
Query (TLSExtensions.__proj__E_preSharedKey__item___0, 1)	succeeded (with hint) in 141 milliseconds with fuel 0 and ifuel 1
Hint-info (.\Nonce.fst(11,0-11,23)): Replay succeeded in 136 milliseconds
Hint-info (.\Nonce.fst(17,39-17,48)): Replay succeeded in 92 milliseconds
Hint-info (.\Nonce.fst(15,0-17,56)): Replay succeeded in 117 milliseconds
Hint-info (.\Nonce.fst(18,0-21,21)): Replay succeeded in 114 milliseconds
Hint-info (.\Nonce.fst(34,0-37,17)): Replay succeeded in 151 milliseconds
Hint-info (.\Nonce.fst(36,27-36,35)): Replay succeeded in 95 milliseconds
Hint-info (.\Nonce.fst(47,0-48,55)): Replay succeeded in 102 milliseconds
Hint-info (.\Nonce.fst(51,34-51,78)): Replay succeeded in 145 milliseconds
Hint-info (.\Nonce.fst(51,41-51,69)): Replay succeeded in 157 milliseconds
Hint-info (.\Nonce.fst(55,12-55,59)): Replay succeeded in 126 milliseconds
Hint-info (.\Nonce.fst(55,29-55,57)): Replay succeeded in 171 milliseconds
Hint-info (.\Nonce.fst(59,0-61,48)): Replay succeeded in 93 milliseconds
Hint-info (.\Nonce.fst(61,15-61,48)): Replay succeeded in 93 milliseconds
Hint-info (.\Nonce.fst(63,0-69,48)): Replay succeeded in 102 milliseconds
Hint-info (.\Nonce.fst(68,3-68,37)): Replay succeeded in 132 milliseconds
Hint-info (.\Nonce.fst(68,3-68,37)): Replay succeeded in 97 milliseconds
Hint-info (.\Nonce.fst(69,15-69,48)): Replay succeeded in 102 milliseconds
Hint-info (.\Nonce.fst(81,35-81,62)): Replay succeeded in 96 milliseconds
Hint-info (.\Nonce.fst(82,16-82,49)): Replay succeeded in 94 milliseconds
Hint-info (.\Nonce.fst(87,0-94,8)): Replay succeeded in 344 milliseconds
Hint-info (.\Nonce.fst(88,2-88,29)): Replay succeeded in 123 milliseconds
Hint-info (.\Nonce.fst(91,10-91,37)): Replay succeeded in 101 milliseconds
Hint-info (.\Nonce.fst(92,16-92,45)): Replay succeeded in 95 milliseconds
Hint-info (.\Nonce.fst(92,16-92,45)): Replay succeeded in 99 milliseconds
Hint-info (.\Nonce.fst(96,0-102,26)): Replay succeeded in 101 milliseconds
Hint-info (.\Nonce.fst(103,0-103,47)): Replay succeeded in 108 milliseconds
Hint-info (.\Nonce.fst(103,20-103,47)): Replay succeeded in 102 milliseconds
Hint-info (.\Nonce.fst(107,8-108,94)): Replay succeeded in 95 milliseconds
Hint-info (.\Nonce.fst(124,0-129,38)): Replay succeeded in 141 milliseconds
Hint-info (.\Nonce.fst(125,2-125,29)): Replay succeeded in 105 milliseconds
Hint-info (.\Nonce.fst(126,11-126,36)): Replay succeeded in 93 milliseconds
Hint-info (.\Nonce.fst(128,2-128,23)): Replay succeeded in 133 milliseconds
Hint-info (.\Nonce.fst(132,0-132,40)): Replay succeeded in 96 milliseconds
Verified module: Nonce (6513 milliseconds)
All verification conditions discharged successfully
C:/Build/Agent/_work/36/s/fstar/bin/fstar.exe --fstar_home C:/Build/Agent/_work/36/s/fstar --record_hints --hint_info --trace_error --max_fuel 4 --initial_fuel 0 --max_ifuel 2 --initial_ifuel 1 --z3rlimit 20 --__temp_no_proj Handshake --__temp_no_proj Connection --use_hints --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/crypto/hacl \
--include C:/Build/Agent/_work/36/s/fstar/ucontrib/CoreCrypto/fst/ --include C:/Build/Agent/_work/36/s/fstar/ucontrib/Platform/fst/ --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/crypto/real --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/LowCProvider/fst --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/crypto --include ../../libs/ffi --include C:/Build/Agent/_work/36/s/fstar/ulib/hyperstack \
--include ideal-flags \
--verify_module StreamDeltas \
StreamDeltas.fst
(.\Signature.fst(73,4-73,10))
Query (Signature.uu___is_Signed, 1)	succeeded (with hint) in 112 milliseconds with fuel 0 and ifuel 1
C:/Build/Agent/_work/36/s/fstar/bin/fstar.exe --fstar_home C:/Build/Agent/_work/36/s/fstar --record_hints --hint_info --trace_error --max_fuel 4 --initial_fuel 0 --max_ifuel 2 --initial_ifuel 1 --z3rlimit 20 --__temp_no_proj Handshake --__temp_no_proj Connection --use_hints --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/crypto/hacl \
--include C:/Build/Agent/_work/36/s/fstar/ucontrib/CoreCrypto/fst/ --include C:/Build/Agent/_work/36/s/fstar/ucontrib/Platform/fst/ --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/crypto/real --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/LowCProvider/fst --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/crypto --include ../../libs/ffi --include C:/Build/Agent/_work/36/s/fstar/ulib/hyperstack \
--include ideal-flags \
--verify_module HKDF \
HKDF.fst
(.\TLSInfo.fst(324,0-327,57))
Query (TLSInfo.msId, 1)	succeeded (with hint) in 146 milliseconds with fuel 0 and ifuel 1
(.\IdNonce.fst(49,0-51,45))
Query (IdNonce.injectivity, 3)	succeeded (with hint) in 126 milliseconds with fuel 0 and ifuel 1
(.\TLSExtensions.fst(66,4-66,14))
Query (TLSExtensions.uu___is_E_keyShare, 1)	succeeded (with hint) in 142 milliseconds with fuel 0 and ifuel 1
(.\Signature.fst(73,12-73,15))
Query (Signature.__proj__Signed__item__log, 1)	succeeded (with hint) in 105 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(404,0-404,27))
Query (TLSConstants.pinverse_version, 4)	succeeded (with hint) in 197 milliseconds with fuel 0 and ifuel 1
(.\TLSInfo.fst(325,4-325,14))
Query (TLSInfo.uu___is_StandardMS, 1)	succeeded (with hint) in 110 milliseconds with fuel 0 and ifuel 1
(.\IdNonce.fst(50,13-50,45))
Query (IdNonce.injectivity, 4)	succeeded (with hint) in 121 milliseconds with fuel 0 and ifuel 1
(.\Signature.fst(74,4-74,11))
Query (Signature.uu___is_Corrupt, 1)	succeeded (with hint) in 97 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(407,0-413,39))
Query (TLSConstants.minPV, 1)	succeeded (with hint) in 88 milliseconds with fuel 0 and ifuel 1
(.\TLSExtensions.fst(66,4-66,14))
Query (TLSExtensions.__proj__E_keyShare__item___0, 1)	succeeded (with hint) in 126 milliseconds with fuel 0 and ifuel 1
(.\TLSInfo.fst(325,4-325,14))
Query (TLSInfo.__proj__StandardMS__item___0, 1)	succeeded (with hint) in 109 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(415,16-415,31))
Query (TLSConstants.geqPV, 1)	succeeded (with hint) in 72 milliseconds with fuel 0 and ifuel 1
(.\Signature.fst(82,9-84,71))
Query (Signature.evolves, 1)	succeeded (with hint) in 100 milliseconds with fuel 0 and ifuel 1
(.\IdNonce.fst(51,13-51,45))
Query (IdNonce.injectivity, 5)	succeeded (with hint) in 125 milliseconds with fuel 0 and ifuel 1
(.\TLSExtensions.fst(67,4-67,18))
Query (TLSExtensions.uu___is_E_draftVersion, 1)	succeeded (with hint) in 122 milliseconds with fuel 0 and ifuel 1
Hint-info (.\IdNonce.fst(16,28-16,45)): Replay succeeded in 131 milliseconds
Hint-info (.\IdNonce.fst(20,0-21,60)): Replay succeeded in 136 milliseconds
Hint-info (.\IdNonce.fst(23,53-23,85)): Replay succeeded in 150 milliseconds
Hint-info (.\IdNonce.fst(26,29-26,56)): Replay succeeded in 119 milliseconds
Hint-info (.\IdNonce.fst(28,36-28,62)): Replay succeeded in 125 milliseconds
Hint-info (.\IdNonce.fst(29,19-29,52)): Replay succeeded in 119 milliseconds
Hint-info (.\IdNonce.fst(32,0-34,30)): Replay succeeded in 130 milliseconds
Hint-info (.\IdNonce.fst(33,2-33,28)): Replay succeeded in 135 milliseconds
Hint-info (.\IdNonce.fst(34,2-34,30)): Replay succeeded in 120 milliseconds
Hint-info (.\IdNonce.fst(34,2-34,30)): Replay succeeded in 122 milliseconds
Hint-info (.\IdNonce.fst(40,20-40,48)): Replay succeeded in 126 milliseconds
Hint-info (.\IdNonce.fst(36,0-43,35)): Replay succeeded in 125 milliseconds
Hint-info (.\IdNonce.fst(44,0-44,41)): Replay succeeded in 125 milliseconds
Hint-info (.\IdNonce.fst(44,15-44,41)): Replay succeeded in 116 milliseconds
Hint-info (.\IdNonce.fst(47,22-47,27)): Replay succeeded in 126 milliseconds
Hint-info (.\IdNonce.fst(48,27-48,31)): Replay succeeded in 120 milliseconds
Hint-info (.\IdNonce.fst(49,0-51,45)): Replay succeeded in 126 milliseconds
Hint-info (.\IdNonce.fst(50,13-50,45)): Replay succeeded in 121 milliseconds
Hint-info (.\IdNonce.fst(51,13-51,45)): Replay succeeded in 125 milliseconds
Verified module: IdNonce (3931 milliseconds)
All verification conditions discharged successfully
(.\TLSConstants.fst(419,0-419,63))
Query (TLSConstants.cipherSuiteBytesOpt, 1)	succeeded (with hint) in 76 milliseconds with fuel 0 and ifuel 1
C:/Build/Agent/_work/36/s/fstar/bin/fstar.exe --fstar_home C:/Build/Agent/_work/36/s/fstar --record_hints --hint_info --trace_error --max_fuel 4 --initial_fuel 0 --max_ifuel 2 --initial_ifuel 1 --z3rlimit 20 --__temp_no_proj Handshake --__temp_no_proj Connection --use_hints --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/crypto/hacl \
--include C:/Build/Agent/_work/36/s/fstar/ucontrib/CoreCrypto/fst/ --include C:/Build/Agent/_work/36/s/fstar/ucontrib/Platform/fst/ --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/crypto/real --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/LowCProvider/fst --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/crypto --include ../../libs/ffi --include C:/Build/Agent/_work/36/s/fstar/ulib/hyperstack \
--include ideal-flags \
--verify_module Epochs \
Epochs.fst
(.\TLSInfo.fst(325,4-325,14))
Query (TLSInfo.__proj__StandardMS__item___1, 1)	succeeded (with hint) in 123 milliseconds with fuel 0 and ifuel 1
(.\Signature.fst(86,0-88,63))
Query (Signature.lemma_evolves_monotone, 1)	succeeded (with hint) in 115 milliseconds with fuel 0 and ifuel 1
(.\TLSExtensions.fst(67,4-67,18))
Query (TLSExtensions.__proj__E_draftVersion__item___0, 1)	succeeded (with hint) in 125 milliseconds with fuel 0 and ifuel 1
(.\TLSInfo.fst(325,4-325,14))
Query (TLSInfo.__proj__StandardMS__item___2, 1)	succeeded (with hint) in 116 milliseconds with fuel 0 and ifuel 1
(.\Signature.fst(94,0-97,24))
Query (Signature.st_update, 1)	succeeded (with hint) in 125 milliseconds with fuel 0 and ifuel 1
(.\TLSExtensions.fst(69,4-69,25))
Query (TLSExtensions.uu___is_E_signatureAlgorithms, 1)	succeeded (with hint) in 128 milliseconds with fuel 0 and ifuel 1
(.\TLSInfo.fst(327,4-327,14))
Query (TLSInfo.uu___is_ExtendedMS, 1)	succeeded (with hint) in 125 milliseconds with fuel 0 and ifuel 1
(.\Signature.fst(105,0-105,67))
Query (Signature.keyRegion, 1)	succeeded (with hint) in 109 milliseconds with fuel 0 and ifuel 1
.\Signature.fst(105,0-105,67): (Warning) Top-level let-bindings must be total; this term may have effects
(.\TLSExtensions.fst(69,4-69,25))
Query (TLSExtensions.__proj__E_signatureAlgorithms__item___0, 1)	succeeded (with hint) in 137 milliseconds with fuel 0 and ifuel 1
(.\Signature.fst(107,21-107,55))
Query (Signature.log_t, 1)	succeeded (with hint) in 104 milliseconds with fuel 0 and ifuel 1
(.\TLSInfo.fst(327,4-327,14))
Query (TLSInfo.__proj__ExtendedMS__item___0, 1)	succeeded (with hint) in 135 milliseconds with fuel 0 and ifuel 1
(.\TLSExtensions.fst(71,4-71,24))
Query (TLSExtensions.uu___is_E_renegotiation_info, 1)	succeeded (with hint) in 120 milliseconds with fuel 0 and ifuel 1
(.\Signature.fst(110,40-110,75))
Query (Signature.pubkey, 1)	succeeded (with hint) in 103 milliseconds with fuel 0 and ifuel 1
(.\TLSInfo.fst(327,4-327,14))
Query (TLSInfo.__proj__ExtendedMS__item___1, 1)	succeeded (with hint) in 114 milliseconds with fuel 0 and ifuel 1
(.\TLSExtensions.fst(71,4-71,24))
Query (TLSExtensions.__proj__E_renegotiation_info__item___0, 1)	succeeded (with hint) in 126 milliseconds with fuel 0 and ifuel 1
(.\Signature.fst(109,0-110,88))
Query (Signature.pubkey, 2)	succeeded (with hint) in 98 milliseconds with fuel 0 and ifuel 1
(.\TLSInfo.fst(327,4-327,14))
Query (TLSInfo.__proj__ExtendedMS__item___2, 1)	succeeded (with hint) in 113 milliseconds with fuel 0 and ifuel 1
(.\Signature.fst(109,0-110,88))
Query (Signature.pubkey, 3)	succeeded (with hint) in 103 milliseconds with fuel 0 and ifuel 1
(.\TLSExtensions.fst(72,4-72,17))
Query (TLSExtensions.uu___is_E_server_name, 1)	succeeded (with hint) in 122 milliseconds with fuel 0 and ifuel 1
(.\TLSInfo.fst(332,15-334,66))
Query (TLSInfo.honestMS, 1)	succeeded (with hint) in 115 milliseconds with fuel 0 and ifuel 1
(.\TLSExtensions.fst(72,4-72,17))
Query (TLSExtensions.__proj__E_server_name__item___0, 1)	succeeded (with hint) in 122 milliseconds with fuel 0 and ifuel 1
(.\Signature.fst(109,0-110,88))
Query (Signature.pubkey, 4)	succeeded (with hint) in 143 milliseconds with fuel 0 and ifuel 1
(.\TLSInfo.fst(352,0-356,46))
Query (TLSInfo.msid, 1)	succeeded (with hint) in 120 milliseconds with fuel 0 and ifuel 1
(.\Signature.fst(110,8-110,11))
Query (Signature.__proj__PK__item__log, 1)	succeeded (with hint) in 103 milliseconds with fuel 0 and ifuel 1
(.\TLSExtensions.fst(73,4-73,17))
Query (TLSExtensions.uu___is_E_extended_ms, 1)	succeeded (with hint) in 121 milliseconds with fuel 0 and ifuel 1
(.\TLSInfo.fst(371,30-371,59))
Query (TLSInfo.strongPRF, 1)	succeeded (with hint) in 116 milliseconds with fuel 0 and ifuel 1
(.\Signature.fst(110,23-110,27))
Query (Signature.__proj__PK__item__repr, 1)	succeeded (with hint) in 100 milliseconds with fuel 0 and ifuel 1
(.\TLSExtensions.fst(74,4-74,22))
Query (TLSExtensions.uu___is_E_extended_padding, 1)	succeeded (with hint) in 136 milliseconds with fuel 0 and ifuel 1
(.\TLSInfo.fst(372,0-372,94))
Query (TLSInfo.strongPRF, 2)	succeeded (with hint) in 113 milliseconds with fuel 0 and ifuel 1
(.\Signature.fst(110,23-110,27))
Query (Signature.__proj__PK__item__repr, 2)	succeeded (with hint) in 100 milliseconds with fuel 0 and ifuel 1
(.\TLSExtensions.fst(75,4-75,21))
Query (TLSExtensions.uu___is_E_ec_point_format, 1)	succeeded (with hint) in 134 milliseconds with fuel 0 and ifuel 1
(.\TLSInfo.fst(378,0-382,14))
Query (TLSInfo.strongHS, 1)	succeeded (with hint) in 119 milliseconds with fuel 0 and ifuel 1
(.\Signature.fst(115,0-115,38))
Query (Signature.pkey_repr, 1)	succeeded (with hint) in 106 milliseconds with fuel 0 and ifuel 1
(.\TLSInfo.fst(428,0-431,1))
Query (TLSInfo.logInfo_CH, 1)	succeeded (with hint) in 116 milliseconds with fuel 0 and ifuel 1
(.\TLSExtensions.fst(75,4-75,21))
Query (TLSExtensions.__proj__E_ec_point_format__item___0, 1)	succeeded (with hint) in 129 milliseconds with fuel 0 and ifuel 1
(.\Signature.fst(118,0-118,28))
Query (Signature.pkey_alg, 1)	succeeded (with hint) in 110 milliseconds with fuel 0 and ifuel 1
(.\TLSInfo.fst(433,0-437,1))
Query (TLSInfo.logInfo_SH, 1)	succeeded (with hint) in 121 milliseconds with fuel 0 and ifuel 1
(.\TLSExtensions.fst(76,4-76,22))
Query (TLSExtensions.uu___is_E_supported_groups, 1)	succeeded (with hint) in 134 milliseconds with fuel 0 and ifuel 1
(.\Signature.fst(121,2-121,79))
Query (Signature.skey, 1)	succeeded (with hint) in 172 milliseconds with fuel 0 and ifuel 1
(.\TLSInfo.fst(443,0-447,26))
Query (TLSInfo.logInfo, 1)	succeeded (with hint) in 118 milliseconds with fuel 0 and ifuel 1
(.\TLSExtensions.fst(76,4-76,22))
Query (TLSExtensions.__proj__E_supported_groups__item___0, 1)	succeeded (with hint) in 137 milliseconds with fuel 0 and ifuel 1
(.\Signature.fst(121,45-121,78))
Query (Signature.skey, 2)	succeeded (with hint) in 107 milliseconds with fuel 0 and ifuel 1
(.\TLSInfo.fst(444,2-444,12))
Query (TLSInfo.uu___is_LogInfo_CH, 1)	succeeded (with hint) in 117 milliseconds with fuel 0 and ifuel 1
(.\TLSExtensions.fst(77,4-77,23))
Query (TLSExtensions.uu___is_E_unknown_extension, 1)	succeeded (with hint) in 138 milliseconds with fuel 0 and ifuel 1
(.\Signature.fst(125,19-125,51))
Query (Signature.alloc_pubkey, 1)	succeeded (with hint) in 107 milliseconds with fuel 0 and ifuel 1
(.\TLSInfo.fst(444,2-444,12))
Query (TLSInfo.__proj__LogInfo_CH__item___0, 1)	succeeded (with hint) in 138 milliseconds with fuel 0 and ifuel 1
(.\Signature.fst(128,57-128,79))
Query (Signature.alloc_pubkey, 2)	succeeded (with hint) in 104 milliseconds with fuel 0 and ifuel 1
(.\TLSExtensions.fst(77,4-77,23))
Query (TLSExtensions.__proj__E_unknown_extension__item___0, 1)	succeeded (with hint) in 130 milliseconds with fuel 0 and ifuel 1
(.\TLSInfo.fst(445,2-445,12))
Query (TLSInfo.uu___is_LogInfo_SH, 1)	succeeded (with hint) in 117 milliseconds with fuel 0 and ifuel 1
(.\Signature.fst(129,30-129,44))
Query (Signature.alloc_pubkey, 3)	succeeded (with hint) in 111 milliseconds with fuel 0 and ifuel 1
(.\TLSExtensions.fst(77,4-77,23))
Query (TLSExtensions.__proj__E_unknown_extension__item___0, 2)	succeeded (with hint) in 137 milliseconds with fuel 0 and ifuel 1
(.\TLSInfo.fst(445,2-445,12))
Query (TLSInfo.__proj__LogInfo_SH__item___0, 1)	succeeded (with hint) in 118 milliseconds with fuel 0 and ifuel 1
(.\Signature.fst(130,30-130,55))
Query (Signature.alloc_pubkey, 4)	succeeded (with hint) in 118 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(420,0-517,15))
Query (TLSConstants.cipherSuiteBytesOpt, 2)	succeeded (with hint) in 242 milliseconds with fuel 0 and ifuel 1
(.\TLSExtensions.fst(79,0-94,14))
Query (TLSExtensions.sameExt, 1)	succeeded (with hint) in 149 milliseconds with fuel 0 and ifuel 1
(.\Signature.fst(123,0-130,57))
Query (Signature.alloc_pubkey, 5)	succeeded (with hint) in 106 milliseconds with fuel 0 and ifuel 1
(.\TLSInfo.fst(446,2-446,12))
Query (TLSInfo.uu___is_LogInfo_SF, 1)	succeeded (with hint) in 132 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(421,36-421,51))
Query (TLSConstants.cipherSuiteBytesOpt, 3)	succeeded (with hint) in 83 milliseconds with fuel 0 and ifuel 1
(.\TLSInfo.fst(446,2-446,12))
Query (TLSInfo.__proj__LogInfo_SF__item___0, 1)	succeeded (with hint) in 121 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(517,11-517,15))
Query (TLSConstants.cipherSuiteBytesOpt, 4)	succeeded (with hint) in 79 milliseconds with fuel 0 and ifuel 1
(.\Signature.fst(131,0-134,10))
Query (Signature.alloc_pubkey, 6)	succeeded (with hint) in 137 milliseconds with fuel 0 and ifuel 1
(.\TLSExtensions.fst(97,0-110,32))
Query (TLSExtensions.extensionHeaderBytes, 1)	succeeded (with hint) in 154 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(519,39-519,68))
Query (TLSConstants.validCipherSuite, 1)	succeeded (with hint) in 84 milliseconds with fuel 0 and ifuel 1
(.\TLSInfo.fst(447,2-447,12))
Query (TLSInfo.uu___is_LogInfo_CF, 1)	succeeded (with hint) in 116 milliseconds with fuel 0 and ifuel 1
(.\Signature.fst(155,60-155,68))
Query (Signature.strong_excluded_middle, 1)	succeeded (with hint) in 106 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(526,0-526,58))
Query (TLSConstants.cipherSuiteBytes, 1)	succeeded (with hint) in 75 milliseconds with fuel 0 and ifuel 1
(.\TLSExtensions.fst(112,0-114,16))
Query (TLSExtensions.canFail, 1)	succeeded (with hint) in 132 milliseconds with fuel 0 and ifuel 1
(.\TLSInfo.fst(447,2-447,12))
Query (TLSInfo.__proj__LogInfo_CF__item___0, 1)	succeeded (with hint) in 121 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(527,0-527,56))
Query (TLSConstants.cipherSuiteBytes, 2)	succeeded (with hint) in 79 milliseconds with fuel 0 and ifuel 1
(.\Signature.fst(156,8-159,70))
Query (Signature.memT, 1)	succeeded (with hint) in 110 milliseconds with fuel 0 and ifuel 1
(.\TLSExtensions.fst(113,2-113,8))
Query (TLSExtensions.uu___is_ExFail, 1)	succeeded (with hint) in 125 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(527,25-527,56))
Query (TLSConstants.cipherSuiteBytes, 3)	succeeded (with hint) in 73 milliseconds with fuel 0 and ifuel 1
(.\TLSInfo.fst(449,53-453,28))
Query (TLSInfo.logInfo_ae, 1)	succeeded (with hint) in 117 milliseconds with fuel 0 and ifuel 1
(.\Signature.fst(161,62-161,87))
Query (Signature.kset, 1)	succeeded (with hint) in 104 milliseconds with fuel 0 and ifuel 1
(.\TLSExtensions.fst(113,2-113,8))
Query (TLSExtensions.__proj__ExFail__item___0, 1)	succeeded (with hint) in 128 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(532,0-532,86))
Query (TLSConstants.parseCipherSuiteAux, 1)	succeeded (with hint) in 77 milliseconds with fuel 0 and ifuel 1
(.\TLSInfo.fst(455,0-459,64))
Query (TLSInfo.logInfo_nonce, 1)	succeeded (with hint) in 131 milliseconds with fuel 0 and ifuel 1
(.\Signature.fst(164,28-164,43))
Query (Signature.find_key, 1)	succeeded (with hint) in 114 milliseconds with fuel 0 and ifuel 1
(.\TLSExtensions.fst(114,2-114,6))
Query (TLSExtensions.uu___is_ExOK, 1)	succeeded (with hint) in 152 milliseconds with fuel 0 and ifuel 1
(.\Signature.fst(165,10-165,17))
Query (Signature.find_key, 2)	succeeded (with hint) in 110 milliseconds with fuel 0 and ifuel 1
(.\TLSInfo.fst(459,21-459,32))
Query (TLSInfo.logInfo_nonce, 2)	succeeded (with hint) in 133 milliseconds with fuel 0 and ifuel 1
(.\Signature.fst(165,47-165,63))
Query (Signature.find_key, 3)	succeeded (with hint) in 102 milliseconds with fuel 0 and ifuel 1
(.\TLSExtensions.fst(114,2-114,6))
Query (TLSExtensions.__proj__ExOK__item___0, 1)	succeeded (with hint) in 128 milliseconds with fuel 0 and ifuel 1
(.\TLSInfo.fst(464,0-465,9))
Query (TLSInfo.eq_logInfo, 1)	succeeded (with hint) in 116 milliseconds with fuel 0 and ifuel 1
(.\TLSInfo.fst(465,2-465,9))
Query (TLSInfo.eq_logInfo, 2)	succeeded (with hint) in 116 milliseconds with fuel 0 and ifuel 1
(.\TLSExtensions.fst(117,0-123,11))
Query (TLSExtensions.compile_sni_list, 1)	succeeded (with hint) in 146 milliseconds with fuel 0 and ifuel 1
(.\Signature.fst(166,0-168,62))
Query (Signature.find_key, 4)	succeeded (with hint) in 157 milliseconds with fuel 2 and ifuel 2
(.\TLSInfo.fst(493,62-493,70))
Query (TLSInfo.log_info, 1)	succeeded (with hint) in 124 milliseconds with fuel 0 and ifuel 1
(.\Signature.fst(167,12-167,16))
Query (Signature.find_key, 5)	succeeded (with hint) in 101 milliseconds with fuel 0 and ifuel 1
(.\Signature.fst(168,16-168,31))
Query (Signature.find_key, 6)	succeeded (with hint) in 102 milliseconds with fuel 0 and ifuel 1
(.\TLSInfo.fst(495,0-538,94))
Query (TLSInfo.pre_esId, 1)	succeeded (with hint) in 135 milliseconds with fuel 0 and ifuel 1
(.\Signature.fst(168,37-168,43))
Query (Signature.find_key, 7)	succeeded (with hint) in 108 milliseconds with fuel 0 and ifuel 1
(.\TLSInfo.fst(496,4-496,18))
Query (TLSInfo.uu___is_ApplicationPSK, 1)	succeeded (with hint) in 121 milliseconds with fuel 0 and ifuel 1
(C:\Build\Agent\_work\36\s\src\tls\MAC.fst) digest is valid; using hints db.
(.\Signature.fst(171,40-171,67))
Query (Signature.add_key, 1)	succeeded (with hint) in 115 milliseconds with fuel 0 and ifuel 1
(.\TLSInfo.fst(496,20-496,24))
Query (TLSInfo.__proj__ApplicationPSK__item__info, 1)	succeeded (with hint) in 119 milliseconds with fuel 0 and ifuel 1
(.\MAC.fst(20,0-20,80))
Query (MAC.id, 1)	succeeded (with hint) in 124 milliseconds with fuel 0 and ifuel 1
(.\TLSExtensions.fst(126,0-179,83))
Query (TLSExtensions.parse_sni_list, 1)	succeeded (with hint) in 248 milliseconds with fuel 0 and ifuel 1
(.\Signature.fst(173,0-173,24))
Query (Signature.add_key, 2)	succeeded (with hint) in 113 milliseconds with fuel 2 and ifuel 2
(.\TLSInfo.fst(496,40-496,41))
Query (TLSInfo.__proj__ApplicationPSK__item__i, 1)	succeeded (with hint) in 118 milliseconds with fuel 0 and ifuel 1
(.\MAC.fst(22,0-22,31))
Query (MAC.alg, 1)	succeeded (with hint) in 128 milliseconds with fuel 0 and ifuel 1
(.\TLSExtensions.fst(151,45-151,50))
Query (TLSExtensions.parse_sni_list, 2)	succeeded (with hint) in 130 milliseconds with fuel 0 and ifuel 1
(.\Signature.fst(179,0-179,43))
Query (Signature.rkeys, 1)	succeeded (with hint) in 107 milliseconds with fuel 0 and ifuel 1
(.\TLSInfo.fst(497,4-497,17))
Query (TLSInfo.uu___is_ResumptionPSK, 1)	succeeded (with hint) in 123 milliseconds with fuel 0 and ifuel 1
(.\MAC.fst(32,9-33,69))
Query (MAC.entry, 1)	succeeded (with hint) in 129 milliseconds with fuel 0 and ifuel 1
(.\Signature.fst(180,0-180,32))
.\Signature.fst(180,0-180,32): (Warning) Top-level let-bindings must be total; this term may have effects
Query (Signature.rkeys, 2)	succeeded (with hint) in 113 milliseconds with fuel 2 and ifuel 2
(.\TLSExtensions.fst(164,9-164,21))
Query (TLSExtensions.parse_sni_list, 3)	succeeded (with hint) in 130 milliseconds with fuel 0 and ifuel 1
(.\TLSInfo.fst(497,19-497,23))
Query (TLSInfo.__proj__ResumptionPSK__item__info, 1)	succeeded (with hint) in 120 milliseconds with fuel 0 and ifuel 1
(.\Signature.fst(182,49-182,64))
Query (Signature.generated, 1)	succeeded (with hint) in 105 milliseconds with fuel 0 and ifuel 1
(.\MAC.fst(33,11-33,12))
Query (MAC.__proj__Entry__item__t, 1)	succeeded (with hint) in 134 milliseconds with fuel 0 and ifuel 1
(.\TLSInfo.fst(497,39-497,40))
Query (TLSInfo.__proj__ResumptionPSK__item__i, 1)	succeeded (with hint) in 145 milliseconds with fuel 0 and ifuel 1
(.\TLSExtensions.fst(181,74-188,78))
Query (TLSExtensions.compile_curve_list_aux, 1)	succeeded (with hint) in 151 milliseconds with fuel 0 and ifuel 1
(.\Signature.fst(184,0-186,24))
Query (Signature.honestKey, 1)	succeeded (with hint) in 107 milliseconds with fuel 0 and ifuel 1
(.\MAC.fst(33,22-33,23))
Query (MAC.__proj__Entry__item__p, 1)	succeeded (with hint) in 126 milliseconds with fuel 0 and ifuel 1
(.\TLSInfo.fst(500,4-500,12))
Query (TLSInfo.uu___is_HSID_PSK, 1)	succeeded (with hint) in 115 milliseconds with fuel 0 and ifuel 1
(.\Signature.fst(186,2-186,24))
Query (Signature.honestKey, 2)	succeeded (with hint) in 98 milliseconds with fuel 0 and ifuel 1
(.\TLSExtensions.fst(191,0-195,4))
Query (TLSExtensions.compile_curve_list, 1)	succeeded (with hint) in 130 milliseconds with fuel 0 and ifuel 1
(.\MAC.fst(44,37-44,52))
Query (MAC.key, 1)	succeeded (with hint) in 123 milliseconds with fuel 0 and ifuel 1
(.\TLSInfo.fst(500,4-500,12))
Query (TLSInfo.__proj__HSID_PSK__item___0, 1)	succeeded (with hint) in 125 milliseconds with fuel 0 and ifuel 1
(.\Signature.fst(194,15-194,40))
Query (Signature.sign, 1)	succeeded (with hint) in 120 milliseconds with fuel 0 and ifuel 1
(.\MAC.fst(42,10-42,16))
Query (MAC.__proj__Key__item__region, 1)	succeeded (with hint) in 121 milliseconds with fuel 0 and ifuel 1
(.\TLSInfo.fst(501,4-501,16))
Query (TLSInfo.uu___is_HSID_PSK_DHE, 1)	succeeded (with hint) in 121 milliseconds with fuel 0 and ifuel 1
(.\Signature.fst(203,19-203,31))
Query (Signature.sign, 2)	succeeded (with hint) in 117 milliseconds with fuel 0 and ifuel 1
(.\MAC.fst(43,9-43,11))
Query (MAC.__proj__Key__item__kv, 1)	succeeded (with hint) in 121 milliseconds with fuel 0 and ifuel 1
(.\TLSInfo.fst(501,4-501,16))
Query (TLSInfo.__proj__HSID_PSK_DHE__item___0, 1)	succeeded (with hint) in 117 milliseconds with fuel 0 and ifuel 1
(.\Signature.fst(206,8-206,20))
Query (Signature.sign, 3)	succeeded (with hint) in 101 milliseconds with fuel 0 and ifuel 1
(.\TLSExtensions.fst(198,0-223,29))
Query (TLSExtensions.parse_curve_list, 1)	succeeded (with hint) in 247 milliseconds with fuel 0 and ifuel 1
(.\MAC.fst(44,2-44,5))
Query (MAC.__proj__Key__item__log, 1)	succeeded (with hint) in 126 milliseconds with fuel 0 and ifuel 1
(.\TLSInfo.fst(501,30-501,39))
Query (TLSInfo.__proj__HSID_PSK_DHE__item__initiator, 1)	succeeded (with hint) in 116 milliseconds with fuel 0 and ifuel 1
(.\Signature.fst(206,34-206,48))
Query (Signature.sign, 4)	succeeded (with hint) in 117 milliseconds with fuel 0 and ifuel 1
(.\TLSExtensions.fst(201,16-201,34))
Query (TLSExtensions.parse_curve_list, 2)	succeeded (with hint) in 131 milliseconds with fuel 0 and ifuel 1
(.\MAC.fst(44,2-44,5))
Query (MAC.__proj__Key__item__log, 2)	succeeded (with hint) in 124 milliseconds with fuel 0 and ifuel 1
(.\TLSInfo.fst(501,58-501,67))
Query (TLSInfo.__proj__HSID_PSK_DHE__item__responder, 1)	succeeded (with hint) in 117 milliseconds with fuel 0 and ifuel 1
(.\Signature.fst(207,20-207,29))
Query (Signature.sign, 5)	succeeded (with hint) in 100 milliseconds with fuel 0 and ifuel 1
(.\TLSExtensions.fst(217,23-217,41))
Query (TLSExtensions.parse_curve_list, 3)	succeeded (with hint) in 139 milliseconds with fuel 0 and ifuel 1
(.\Signature.fst(193,0-207,37))
Query (Signature.sign, 6)	succeeded (with hint) in 102 milliseconds with fuel 0 and ifuel 1
(.\TLSInfo.fst(502,4-502,12))
Query (TLSInfo.uu___is_HSID_DHE, 1)	succeeded (with hint) in 114 milliseconds with fuel 0 and ifuel 1
(.\MAC.fst(62,13-62,22))
Query (MAC.gen, 1)	succeeded (with hint) in 127 milliseconds with fuel 0 and ifuel 1
(.\TLSInfo.fst(502,4-502,12))
Query (TLSInfo.__proj__HSID_DHE__item___0, 1)	succeeded (with hint) in 125 milliseconds with fuel 0 and ifuel 1
(.\MAC.fst(64,0-64,89))
Query (MAC.gen, 2)	succeeded (with hint) in 195 milliseconds with fuel 0 and ifuel 1
(.\TLSExtensions.fst(226,0-246,105))
Query (TLSExtensions.parse_ecpf_list, 1)	succeeded (with hint) in 164 milliseconds with fuel 0 and ifuel 1
(.\Signature.fst(209,0-222,36))
Query (Signature.sign, 7)	succeeded (with hint) in 215 milliseconds with fuel 0 and ifuel 1
(.\TLSInfo.fst(502,37-502,46))
Query (TLSInfo.__proj__HSID_DHE__item__initiator, 1)	succeeded (with hint) in 127 milliseconds with fuel 0 and ifuel 1
(.\MAC.fst(69,13-69,22))
Query (MAC.coerce, 1)	succeeded (with hint) in 124 milliseconds with fuel 0 and ifuel 1
(.\Signature.fst(214,13-214,23))
Query (Signature.sign, 8)	succeeded (with hint) in 106 milliseconds with fuel 0 and ifuel 1
(.\TLSExtensions.fst(243,9-243,50))
Query (TLSExtensions.parse_ecpf_list, 2)	succeeded (with hint) in 127 milliseconds with fuel 0 and ifuel 1
(.\TLSInfo.fst(502,65-502,74))
Query (TLSInfo.__proj__HSID_DHE__item__responder, 1)	succeeded (with hint) in 117 milliseconds with fuel 0 and ifuel 1
(.\Signature.fst(215,4-215,16))
Query (Signature.sign, 9)	succeeded (with hint) in 110 milliseconds with fuel 0 and ifuel 1
(.\TLSInfo.fst(505,4-505,8))
Query (TLSInfo.__proj__ASID__item___0, 1)	succeeded (with hint) in 120 milliseconds with fuel 0 and ifuel 1
(.\TLSExtensions.fst(249,2-252,80))
Query (TLSExtensions.compile_ecpf_list_aux, 1)	succeeded (with hint) in 137 milliseconds with fuel 0 and ifuel 1
(.\MAC.fst(71,0-71,51))
Query (MAC.coerce, 2)	succeeded (with hint) in 200 milliseconds with fuel 0 and ifuel 1
(.\Signature.fst(216,4-216,32))
Query (Signature.sign, 10)	succeeded (with hint) in 99 milliseconds with fuel 0 and ifuel 1
(.\TLSInfo.fst(508,4-508,9))
Query (TLSInfo.__proj__RMSID__item___0, 1)	succeeded (with hint) in 118 milliseconds with fuel 0 and ifuel 1
(.\TLSExtensions.fst(255,0-259,4))
Query (TLSExtensions.compile_ecpf_list, 1)	succeeded (with hint) in 126 milliseconds with fuel 0 and ifuel 1
(.\MAC.fst(73,95-73,108))
Query (MAC.leak, 1)	succeeded (with hint) in 122 milliseconds with fuel 0 and ifuel 1
(.\Signature.fst(228,15-228,40))
Query (Signature.verify, 1)	succeeded (with hint) in 100 milliseconds with fuel 0 and ifuel 1
(.\TLSInfo.fst(508,4-508,9))
Query (TLSInfo.__proj__RMSID__item___1, 1)	succeeded (with hint) in 114 milliseconds with fuel 0 and ifuel 1
(.\Signature.fst(235,18-235,27))
Query (Signature.verify, 2)	succeeded (with hint) in 110 milliseconds with fuel 0 and ifuel 1
(.\MAC.fst(74,0-74,28))
Query (MAC.leak, 2)	succeeded (with hint) in 121 milliseconds with fuel 0 and ifuel 1
(.\TLSExtensions.fst(262,0-267,20))
Query (TLSExtensions.addOnce, 1)	succeeded (with hint) in 149 milliseconds with fuel 0 and ifuel 1
(.\TLSInfo.fst(508,4-508,9))
Query (TLSInfo.__proj__RMSID__item___2, 1)	succeeded (with hint) in 119 milliseconds with fuel 0 and ifuel 1
(.\Signature.fst(237,15-237,38))
Query (Signature.verify, 3)	succeeded (with hint) in 116 milliseconds with fuel 0 and ifuel 1
(.\MAC.fst(79,13-79,39))
Query (MAC.mac, 1)	succeeded (with hint) in 127 milliseconds with fuel 0 and ifuel 1
(.\TLSExtensions.fst(269,0-282,28))
Query (TLSExtensions.extension_depth, 1)	succeeded (with hint) in 154 milliseconds with fuel 0 and ifuel 1
(.\TLSInfo.fst(511,4-511,12))
Query (TLSInfo.__proj__ExportID__item___0, 1)	succeeded (with hint) in 134 milliseconds with fuel 0 and ifuel 1
(.\Signature.fst(227,0-237,55))
Query (Signature.verify, 4)	succeeded (with hint) in 121 milliseconds with fuel 0 and ifuel 1
(.\TLSInfo.fst(511,4-511,12))
Query (TLSInfo.__proj__ExportID__item___1, 1)	succeeded (with hint) in 112 milliseconds with fuel 0 and ifuel 1
(.\TLSExtensions.fst(269,0-282,28))
Query (TLSExtensions.extension_depth, 2)	succeeded (with hint) in 132 milliseconds with fuel 0 and ifuel 1
(.\MAC.fst(89,0-96,3))
Query (MAC.mac, 2)	succeeded (with hint) in 164 milliseconds with fuel 0 and ifuel 1
(.\Signature.fst(239,0-257,15))
Query (Signature.verify, 5)	succeeded (with hint) in 141 milliseconds with fuel 0 and ifuel 1
(.\TLSInfo.fst(511,4-511,12))
Query (TLSInfo.__proj__ExportID__item___2, 1)	succeeded (with hint) in 114 milliseconds with fuel 0 and ifuel 1
(.\TLSExtensions.fst(333,10-333,117))
Query (TLSExtensions.extensionsBytes_def, 1)	succeeded (with hint) in 126 milliseconds with fuel 0 and ifuel 1
(.\MAC.fst(99,0-99,44))
Query (MAC.matches, 1)	succeeded (with hint) in 121 milliseconds with fuel 0 and ifuel 1
(.\Signature.fst(250,10-250,29))
Query (Signature.verify, 6)	succeeded (with hint) in 107 milliseconds with fuel 0 and ifuel 1
(.\TLSInfo.fst(514,4-514,11))
Query (TLSInfo.__proj__RekeyID__item___0, 1)	succeeded (with hint) in 120 milliseconds with fuel 0 and ifuel 1
(.\TLSExtensions.fst(331,7-334,33))
Query (TLSExtensions.extensionsBytes_def, 2)	succeeded (with hint) in 139 milliseconds with fuel 0 and ifuel 1
(.\MAC.fst(99,38-99,44))
Query (MAC.matches, 2)	succeeded (with hint) in 140 milliseconds with fuel 0 and ifuel 1
(.\Signature.fst(252,61-252,67))
Query (Signature.verify, 7)	succeeded (with hint) in 103 milliseconds with fuel 0 and ifuel 1
(.\TLSInfo.fst(514,4-514,11))
Query (TLSInfo.__proj__RekeyID__item___1, 1)	succeeded (with hint) in 124 milliseconds with fuel 0 and ifuel 1
(.\Signature.fst(253,32-253,46))
Query (Signature.verify, 8)	succeeded (with hint) in 102 milliseconds with fuel 0 and ifuel 1
(.\TLSInfo.fst(514,4-514,11))
Query (TLSInfo.__proj__RekeyID__item___2, 1)	succeeded (with hint) in 116 milliseconds with fuel 0 and ifuel 1
(.\MAC.fst(106,0-110,54))
Query (MAC.verify, 1)	succeeded (with hint) in 151 milliseconds with fuel 0 and ifuel 1
Hint-info (.\MAC.fst(20,0-20,80)): Replay succeeded in 124 milliseconds
Hint-info (.\MAC.fst(22,0-22,31)): Replay succeeded in 128 milliseconds
Hint-info (.\MAC.fst(32,9-33,69)): Replay succeeded in 129 milliseconds
Hint-info (.\MAC.fst(33,11-33,12)): Replay succeeded in 134 milliseconds
Hint-info (.\MAC.fst(33,22-33,23)): Replay succeeded in 126 milliseconds
Hint-info (.\MAC.fst(44,37-44,52)): Replay succeeded in 123 milliseconds
Hint-info (.\MAC.fst(42,10-42,16)): Replay succeeded in 121 milliseconds
Hint-info (.\MAC.fst(43,9-43,11)): Replay succeeded in 121 milliseconds
Hint-info (.\MAC.fst(44,2-44,5)): Replay succeeded in 126 milliseconds
Hint-info (.\MAC.fst(44,2-44,5)): Replay succeeded in 124 milliseconds
Hint-info (.\MAC.fst(62,13-62,22)): Replay succeeded in 127 milliseconds
Hint-info (.\MAC.fst(64,0-64,89)): Replay succeeded in 195 milliseconds
Hint-info (.\MAC.fst(69,13-69,22)): Replay succeeded in 124 milliseconds
Hint-info (.\MAC.fst(71,0-71,51)): Replay succeeded in 200 milliseconds
Hint-info (.\MAC.fst(73,95-73,108)): Replay succeeded in 122 milliseconds
Hint-info (.\MAC.fst(74,0-74,28)): Replay succeeded in 121 milliseconds
Hint-info (.\MAC.fst(79,13-79,39)): Replay succeeded in 127 milliseconds
Hint-info (.\MAC.fst(89,0-96,3)): Replay succeeded in 164 milliseconds
Hint-info (.\MAC.fst(99,0-99,44)): Replay succeeded in 121 milliseconds
Hint-info (.\MAC.fst(99,38-99,44)): Replay succeeded in 140 milliseconds
Hint-info (.\MAC.fst(106,0-110,54)): Replay succeeded in 151 milliseconds
Verified module: MAC (4567 milliseconds)
All verification conditions discharged successfully
(.\Signature.fst(267,17-267,26))
Query (Signature.genrepr, 1)	succeeded (with hint) in 101 milliseconds with fuel 0 and ifuel 1
C:/Build/Agent/_work/36/s/fstar/bin/fstar.exe --fstar_home C:/Build/Agent/_work/36/s/fstar --record_hints --hint_info --trace_error --max_fuel 4 --initial_fuel 0 --max_ifuel 2 --initial_ifuel 1 --z3rlimit 20 --__temp_no_proj Handshake --__temp_no_proj Connection --use_hints --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/crypto/hacl \
--include C:/Build/Agent/_work/36/s/fstar/ucontrib/CoreCrypto/fst/ --include C:/Build/Agent/_work/36/s/fstar/ucontrib/Platform/fst/ --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/crypto/real --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/LowCProvider/fst --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/crypto --include ../../libs/ffi --include C:/Build/Agent/_work/36/s/fstar/ulib/hyperstack \
--include ideal-flags \
--verify_module Connection \
Connection.fst
(C:\Build\Agent\_work\36\s\src\tls\MAC_SHA256.fst) digest is valid; using hints db.
(.\TLSInfo.fst(514,4-514,11))
Query (TLSInfo.__proj__RekeyID__item___3, 1)	succeeded (with hint) in 118 milliseconds with fuel 0 and ifuel 1
(.\Signature.fst(268,4-268,55))
Query (Signature.genrepr, 2)	succeeded (with hint) in 98 milliseconds with fuel 0 and ifuel 1
(.\MAC_SHA256.fst(20,0-20,54))
Query (MAC_SHA256.id, 1)	succeeded (with hint) in 120 milliseconds with fuel 0 and ifuel 1
(.\TLSInfo.fst(517,4-517,17))
Query (TLSInfo.uu___is_EarlySecretID, 1)	succeeded (with hint) in 118 milliseconds with fuel 0 and ifuel 1
(.\TLSExtensions.fst(471,0-476,25))
Query (TLSExtensions.parseOptExtensions, 1)	succeeded (with hint) in 139 milliseconds with fuel 0 and ifuel 1
(.\Signature.fst(269,4-269,37))
Query (Signature.genrepr, 3)	succeeded (with hint) in 101 milliseconds with fuel 0 and ifuel 1
(C:\Build\Agent\_work\36\s\src\tls\HKDF.fst) digest is valid; using hints db.
(.\MAC_SHA256.fst(32,0-32,71))
Query (MAC_SHA256.entry, 1)	succeeded (with hint) in 122 milliseconds with fuel 0 and ifuel 1
(.\TLSInfo.fst(517,4-517,17))
Query (TLSInfo.__proj__EarlySecretID__item___0, 1)	succeeded (with hint) in 117 milliseconds with fuel 0 and ifuel 1
(.\Signature.fst(261,0-269,40))
Query (Signature.genrepr, 4)	succeeded (with hint) in 104 milliseconds with fuel 0 and ifuel 1
(.\TLSExtensions.fst(472,5-472,20))
Query (TLSExtensions.parseOptExtensions, 2)	succeeded (with hint) in 128 milliseconds with fuel 0 and ifuel 1
(C:\Build\Agent\_work\36\s\src\tls\MAC_SHA1.fst) digest is valid; using hints db.
(.\HKDF.fst(8,8-8,56))
Query (HKDF.max, 1)	succeeded (with hint) in 97 milliseconds with fuel 0 and ifuel 1
(.\TLSInfo.fst(518,4-518,21))
Query (TLSInfo.uu___is_HandshakeSecretID, 1)	succeeded (with hint) in 114 milliseconds with fuel 0 and ifuel 1
(.\MAC_SHA256.fst(32,29-32,30))
Query (MAC_SHA256.__proj__Entry__item__t, 1)	succeeded (with hint) in 137 milliseconds with fuel 0 and ifuel 1
(.\HKDF.fst(28,0-29,34))
Query (HKDF.hkdf_extract, 1)	succeeded (with hint) in 93 milliseconds with fuel 0 and ifuel 1
(.\MAC_SHA1.fst(21,0-21,54))
Query (MAC_SHA1.id, 1)	succeeded (with hint) in 119 milliseconds with fuel 0 and ifuel 1
(.\TLSExtensions.fst(479,0-480,73))
Query (TLSExtensions.list_valid_cs_is_list_cs, 1)	succeeded (with hint) in 131 milliseconds with fuel 0 and ifuel 1
(.\Signature.fst(271,0-276,63))
Query (Signature.genrepr, 5)	succeeded (with hint) in 156 milliseconds with fuel 0 and ifuel 1
(.\TLSInfo.fst(518,4-518,21))
Query (TLSInfo.__proj__HandshakeSecretID__item___0, 1)	succeeded (with hint) in 122 milliseconds with fuel 0 and ifuel 1
(.\MAC_SHA256.fst(32,40-32,41))
Query (MAC_SHA256.__proj__Entry__item__p, 1)	succeeded (with hint) in 122 milliseconds with fuel 0 and ifuel 1
(.\HKDF.fst(31,0-31,50))
Query (HKDF.hkdf_extract, 2)	succeeded (with hint) in 113 milliseconds with fuel 0 and ifuel 1
(.\MAC_SHA1.fst(32,0-32,71))
Query (MAC_SHA1.entry, 1)	succeeded (with hint) in 121 milliseconds with fuel 0 and ifuel 1
(.\Signature.fst(279,22-279,40))
Query (Signature.gen, 1)	succeeded (with hint) in 102 milliseconds with fuel 0 and ifuel 1
(.\TLSExtensions.fst(481,0-481,184))
Query (TLSExtensions.list_valid_ng_is_list_ng, 1)	succeeded (with hint) in 140 milliseconds with fuel 0 and ifuel 1
(.\TLSInfo.fst(519,4-519,23))
Query (TLSInfo.uu___is_ApplicationSecretID, 1)	succeeded (with hint) in 117 milliseconds with fuel 0 and ifuel 1
(.\MAC_SHA256.fst(41,27-41,42))
Query (MAC_SHA256.state, 1)	succeeded (with hint) in 122 milliseconds with fuel 0 and ifuel 1
(.\HKDF.fst(66,14-66,55))
Query (HKDF.hkdf_expand_int, 1)	succeeded (with hint) in 100 milliseconds with fuel 0 and ifuel 1
(.\Signature.fst(282,51-282,67))
Query (Signature.gen, 2)	succeeded (with hint) in 99 milliseconds with fuel 0 and ifuel 1
(.\MAC_SHA1.fst(32,29-32,30))
Query (MAC_SHA1.__proj__Entry__item__t, 1)	succeeded (with hint) in 126 milliseconds with fuel 0 and ifuel 1
(.\TLSInfo.fst(519,4-519,23))
Query (TLSInfo.__proj__ApplicationSecretID__item___0, 1)	succeeded (with hint) in 116 milliseconds with fuel 0 and ifuel 1
(.\MAC_SHA256.fst(39,3-39,9))
Query (MAC_SHA256.__proj__State__item__region, 1)	succeeded (with hint) in 123 milliseconds with fuel 0 and ifuel 1
(.\Signature.fst(283,18-283,37))
Query (Signature.gen, 3)	succeeded (with hint) in 101 milliseconds with fuel 0 and ifuel 1
(.\MAC_SHA1.fst(32,40-32,41))
Query (MAC_SHA1.__proj__Entry__item__p, 1)	succeeded (with hint) in 122 milliseconds with fuel 0 and ifuel 1
(.\HKDF.fst(70,0-78,18))
Query (HKDF.hkdf_expand_int, 2)	succeeded (with hint) in 172 milliseconds with fuel 0 and ifuel 1
(.\TLSInfo.fst(520,4-520,17))
Query (TLSInfo.uu___is_RekeySecretID, 1)	succeeded (with hint) in 115 milliseconds with fuel 0 and ifuel 1
(.\MAC_SHA256.fst(40,2-40,5))
Query (MAC_SHA256.__proj__State__item__key, 1)	succeeded (with hint) in 117 milliseconds with fuel 0 and ifuel 1
(.\Signature.fst(285,11-285,49))
Query (Signature.gen, 4)	succeeded (with hint) in 98 milliseconds with fuel 0 and ifuel 1
(.\MAC_SHA1.fst(41,27-41,42))
Query (MAC_SHA1.state, 1)	succeeded (with hint) in 119 milliseconds with fuel 0 and ifuel 1
(.\HKDF.fst(86,0-90,5))
Query (HKDF.hkdf_expand, 1)	succeeded (with hint) in 103 milliseconds with fuel 0 and ifuel 1
(.\TLSInfo.fst(520,4-520,17))
Query (TLSInfo.__proj__RekeySecretID__item___0, 1)	succeeded (with hint) in 117 milliseconds with fuel 0 and ifuel 1
(.\Signature.fst(286,19-286,54))
Query (Signature.gen, 5)	succeeded (with hint) in 99 milliseconds with fuel 0 and ifuel 1
(.\MAC_SHA256.fst(41,2-41,5))
Query (MAC_SHA256.__proj__State__item__log, 1)	succeeded (with hint) in 121 milliseconds with fuel 0 and ifuel 1
(.\MAC_SHA1.fst(39,3-39,9))
Query (MAC_SHA1.__proj__State__item__region, 1)	succeeded (with hint) in 128 milliseconds with fuel 0 and ifuel 1
(.\HKDF.fst(111,0-111,26))
Query (HKDF.tls13_prefix, 1)	succeeded (with hint) in 98 milliseconds with fuel 0 and ifuel 1
(.\TLSExtensions.fst(486,0-510,7))
Query (TLSExtensions.prepareExtensions, 1)	succeeded (with hint) in 227 milliseconds with fuel 0 and ifuel 1
(.\Signature.fst(278,0-286,57))
Query (Signature.gen, 6)	succeeded (with hint) in 103 milliseconds with fuel 0 and ifuel 1
(.\TLSInfo.fst(523,4-523,19))
Query (TLSInfo.uu___is_EarlyTrafficKey, 1)	succeeded (with hint) in 154 milliseconds with fuel 0 and ifuel 1
(.\MAC_SHA256.fst(41,2-41,5))
Query (MAC_SHA256.__proj__State__item__log, 2)	succeeded (with hint) in 124 milliseconds with fuel 0 and ifuel 1
(.\HKDF.fst(114,9-114,23))
Query (HKDF.tls13_prefix, 2)	succeeded (with hint) in 98 milliseconds with fuel 0 and ifuel 1
(.\MAC_SHA1.fst(40,2-40,5))
Query (MAC_SHA1.__proj__State__item__key, 1)	succeeded (with hint) in 123 milliseconds with fuel 0 and ifuel 1
(.\TLSExtensions.fst(507,13-507,19))
Query (TLSExtensions.prepareExtensions, 2)	succeeded (with hint) in 146 milliseconds with fuel 0 and ifuel 1
(.\TLSInfo.fst(524,4-524,27))
Query (TLSInfo.uu___is_EarlyApplicationDataKey, 1)	succeeded (with hint) in 133 milliseconds with fuel 0 and ifuel 1
(.\HKDF.fst(112,0-115,3))
Query (HKDF.tls13_prefix, 3)	succeeded (with hint) in 100 milliseconds with fuel 0 and ifuel 1
(.\MAC_SHA256.fst(57,13-57,38))
Query (MAC_SHA256.mac, 1)	succeeded (with hint) in 124 milliseconds with fuel 0 and ifuel 1
(.\MAC_SHA1.fst(41,2-41,5))
Query (MAC_SHA1.__proj__State__item__log, 1)	succeeded (with hint) in 125 milliseconds with fuel 0 and ifuel 1
(.\TLSExtensions.fst(513,0-516,28))
Query (TLSExtensions.replace_subtyping, 1)	succeeded (with hint) in 140 milliseconds with fuel 0 and ifuel 1
(.\TLSInfo.fst(525,4-525,16))
Query (TLSInfo.uu___is_HandshakeKey, 1)	succeeded (with hint) in 119 milliseconds with fuel 0 and ifuel 1
(.\MAC_SHA256.fst(54,0-58,55))
Query (MAC_SHA256.mac, 2)	succeeded (with hint) in 133 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(533,0-632,49))
Query (TLSConstants.parseCipherSuiteAux, 2)	succeeded (with hint) in 6913 milliseconds with fuel 1 and ifuel 2
(.\MAC_SHA1.fst(41,2-41,5))
Query (MAC_SHA1.__proj__State__item__log, 2)	succeeded (with hint) in 135 milliseconds with fuel 0 and ifuel 1
(.\HKDF.fst(124,0-132,29))
Query (HKDF.hkdf_expand_label, 1)	succeeded (with hint) in 164 milliseconds with fuel 0 and ifuel 1
Hint-info (.\HKDF.fst(8,8-8,56)): Replay succeeded in 97 milliseconds
Hint-info (.\HKDF.fst(28,0-29,34)): Replay succeeded in 93 milliseconds
Hint-info (.\HKDF.fst(31,0-31,50)): Replay succeeded in 113 milliseconds
Hint-info (.\HKDF.fst(66,14-66,55)): Replay succeeded in 100 milliseconds
Hint-info (.\HKDF.fst(70,0-78,18)): Replay succeeded in 172 milliseconds
Hint-info (.\HKDF.fst(86,0-90,5)): Replay succeeded in 103 milliseconds
Hint-info (.\HKDF.fst(111,0-111,26)): Replay succeeded in 98 milliseconds
Hint-info (.\HKDF.fst(114,9-114,23)): Replay succeeded in 98 milliseconds
Hint-info (.\HKDF.fst(112,0-115,3)): Replay succeeded in 100 milliseconds
Hint-info (.\HKDF.fst(124,0-132,29)): Replay succeeded in 164 milliseconds
Verified module: HKDF (1872 milliseconds)
All verification conditions discharged successfully
(.\Signature.fst(290,0-301,10))
Query (Signature.gen, 7)	succeeded (with hint) in 384 milliseconds with fuel 2 and ifuel 2
(.\TLSInfo.fst(526,4-526,22))
Query (TLSInfo.uu___is_ApplicationDataKey, 1)	succeeded (with hint) in 119 milliseconds with fuel 0 and ifuel 1
C:/Build/Agent/_work/36/s/fstar/bin/fstar.exe --fstar_home C:/Build/Agent/_work/36/s/fstar --record_hints --hint_info --trace_error --max_fuel 4 --initial_fuel 0 --max_ifuel 2 --initial_ifuel 1 --z3rlimit 20 --__temp_no_proj Handshake --__temp_no_proj Connection --use_hints --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/crypto/hacl \
--include C:/Build/Agent/_work/36/s/fstar/ucontrib/CoreCrypto/fst/ --include C:/Build/Agent/_work/36/s/fstar/ucontrib/Platform/fst/ --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/crypto/real --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/LowCProvider/fst --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/crypto --include ../../libs/ffi --include C:/Build/Agent/_work/36/s/fstar/ulib/hyperstack \
--include ideal-flags \
--verify_module ConnInvariant \
ConnInvariant.fst
(.\TLSConstants.fst(636,22-636,49))
Query (TLSConstants.parseCipherSuite, 1)	succeeded (with hint) in 117 milliseconds with fuel 0 and ifuel 1
(.\MAC_SHA256.fst(63,0-68,3))
Query (MAC_SHA256.mac, 3)	succeeded (with hint) in 155 milliseconds with fuel 0 and ifuel 1
(.\MAC_SHA1.fst(57,13-57,38))
Query (MAC_SHA1.mac, 1)	succeeded (with hint) in 155 milliseconds with fuel 0 and ifuel 1
(.\Signature.fst(292,13-292,25))
Query (Signature.gen, 8)	succeeded (with hint) in 123 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(637,0-640,22))
Query (TLSConstants.parseCipherSuite, 2)	succeeded (with hint) in 84 milliseconds with fuel 0 and ifuel 1
(.\TLSInfo.fst(527,4-527,20))
Query (TLSInfo.uu___is_ApplicationRekey, 1)	succeeded (with hint) in 158 milliseconds with fuel 0 and ifuel 1
(.\MAC_SHA256.fst(71,0-71,37))
Query (MAC_SHA256.matches, 1)	succeeded (with hint) in 134 milliseconds with fuel 0 and ifuel 1
(.\TLSExtensions.fst(522,0-566,126))
Query (TLSExtensions.serverToNegotiatedExtension, 1)	succeeded (with hint) in 192 milliseconds with fuel 0 and ifuel 1
(.\Signature.fst(299,4-299,23))
Query (Signature.gen, 9)	succeeded (with hint) in 104 milliseconds with fuel 0 and ifuel 1
(.\MAC_SHA1.fst(54,0-58,55))
Query (MAC_SHA1.mac, 2)	succeeded (with hint) in 121 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(650,2-650,9))
Query (TLSConstants.inverse_cipherSuite, 1)	succeeded (with hint) in 75 milliseconds with fuel 1 and ifuel 6
(.\TLSInfo.fst(530,4-530,9))
Query (TLSInfo.__proj__KeyID__item___0, 1)	succeeded (with hint) in 117 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(650,14-650,57))
Query (TLSConstants.inverse_cipherSuite, 2)	succeeded (with hint) in 77 milliseconds with fuel 1 and ifuel 6
(.\Signature.fst(300,4-300,40))
Query (Signature.gen, 10)	succeeded (with hint) in 100 milliseconds with fuel 0 and ifuel 1
(.\MAC_SHA256.fst(71,31-71,37))
Query (MAC_SHA256.matches, 2)	succeeded (with hint) in 121 milliseconds with fuel 0 and ifuel 1
(.\TLSInfo.fst(530,4-530,9))
Query (TLSInfo.__proj__KeyID__item___1, 1)	succeeded (with hint) in 116 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(650,34-650,45))
Query (TLSConstants.inverse_cipherSuite, 3)	succeeded (with hint) in 74 milliseconds with fuel 1 and ifuel 6
(.\MAC_SHA1.fst(63,0-68,3))
Query (MAC_SHA1.mac, 3)	succeeded (with hint) in 153 milliseconds with fuel 0 and ifuel 1
(.\Signature.fst(314,43-314,71))
Query (Signature.leak, 1)	succeeded (with hint) in 104 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(651,31-651,64))
Query (TLSConstants.inverse_cipherSuite, 4)	succeeded (with hint) in 75 milliseconds with fuel 1 and ifuel 6
(.\MAC_SHA256.fst(79,0-84,36))
Query (MAC_SHA256.verify, 1)	succeeded (with hint) in 138 milliseconds with fuel 0 and ifuel 1
(.\TLSInfo.fst(530,4-530,9))
Query (TLSInfo.__proj__KeyID__item___2, 1)	succeeded (with hint) in 117 milliseconds with fuel 0 and ifuel 1
(.\TLSExtensions.fst(569,0-597,8))
Query (TLSExtensions.negotiateClientExtensions, 1)	succeeded (with hint) in 163 milliseconds with fuel 0 and ifuel 1
(.\Signature.fst(315,19-315,47))
Query (Signature.leak, 2)	succeeded (with hint) in 102 milliseconds with fuel 0 and ifuel 1
Hint-info (.\MAC_SHA256.fst(20,0-20,54)): Replay succeeded in 120 milliseconds
Hint-info (.\MAC_SHA256.fst(32,0-32,71)): Replay succeeded in 122 milliseconds
Hint-info (.\MAC_SHA256.fst(32,29-32,30)): Replay succeeded in 137 milliseconds
Hint-info (.\MAC_SHA256.fst(32,40-32,41)): Replay succeeded in 122 milliseconds
Hint-info (.\MAC_SHA256.fst(41,27-41,42)): Replay succeeded in 122 milliseconds
Hint-info (.\MAC_SHA256.fst(39,3-39,9)): Replay succeeded in 123 milliseconds
Hint-info (.\MAC_SHA256.fst(40,2-40,5)): Replay succeeded in 117 milliseconds
Hint-info (.\MAC_SHA256.fst(41,2-41,5)): Replay succeeded in 121 milliseconds
Hint-info (.\MAC_SHA256.fst(41,2-41,5)): Replay succeeded in 124 milliseconds
Hint-info (.\MAC_SHA256.fst(57,13-57,38)): Replay succeeded in 124 milliseconds
Hint-info (.\MAC_SHA256.fst(54,0-58,55)): Replay succeeded in 133 milliseconds
Hint-info (.\MAC_SHA256.fst(63,0-68,3)): Replay succeeded in 155 milliseconds
Hint-info (.\MAC_SHA256.fst(71,0-71,37)): Replay succeeded in 134 milliseconds
Hint-info (.\MAC_SHA256.fst(71,31-71,37)): Replay succeeded in 121 milliseconds
Hint-info (.\MAC_SHA256.fst(79,0-84,36)): Replay succeeded in 138 milliseconds
(.\MAC_SHA1.fst(71,0-71,37))
Query (MAC_SHA1.matches, 1)	succeeded (with hint) in 164 milliseconds with fuel 0 and ifuel 1
Verified module: MAC_SHA256 (3121 milliseconds)
All verification conditions discharged successfully
(.\TLSConstants.fst(645,0-651,66))
Query (TLSConstants.inverse_cipherSuite, 5)	succeeded (with hint) in 79 milliseconds with fuel 1 and ifuel 6
C:/Build/Agent/_work/36/s/fstar/bin/fstar.exe --fstar_home C:/Build/Agent/_work/36/s/fstar --record_hints --hint_info --trace_error --max_fuel 4 --initial_fuel 0 --max_ifuel 2 --initial_ifuel 1 --z3rlimit 20 --__temp_no_proj Handshake --__temp_no_proj Connection --use_hints --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/crypto/hacl \
--include C:/Build/Agent/_work/36/s/fstar/ucontrib/CoreCrypto/fst/ --include C:/Build/Agent/_work/36/s/fstar/ucontrib/Platform/fst/ --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/crypto/real --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/LowCProvider/fst --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/crypto --include ../../libs/ffi --include C:/Build/Agent/_work/36/s/fstar/ulib/hyperstack \
--include ideal-flags \
--verify_module FFI \
FFI.fst
(.\Signature.fst(316,10-316,34))
Query (Signature.leak, 3)	succeeded (with hint) in 102 milliseconds with fuel 0 and ifuel 1
(.\TLSInfo.fst(530,4-530,9))
Query (TLSInfo.__proj__KeyID__item___3, 1)	succeeded (with hint) in 120 milliseconds with fuel 0 and ifuel 1
(.\MAC_SHA1.fst(71,31-71,37))
Query (MAC_SHA1.matches, 2)	succeeded (with hint) in 122 milliseconds with fuel 0 and ifuel 1
(.\TLSInfo.fst(530,4-530,9))
Query (TLSInfo.__proj__KeyID__item___4, 1)	succeeded (with hint) in 115 milliseconds with fuel 0 and ifuel 1
(.\TLSExtensions.fst(600,0-638,15))
Query (TLSExtensions.clientToServerExtension, 1)	succeeded (with hint) in 158 milliseconds with fuel 0 and ifuel 1
(.\Signature.fst(317,0-320,10))
Query (Signature.leak, 4)	succeeded (with hint) in 138 milliseconds with fuel 0 and ifuel 1
(.\MAC_SHA1.fst(79,0-84,34))
Query (MAC_SHA1.verify, 1)	succeeded (with hint) in 149 milliseconds with fuel 0 and ifuel 1
(.\TLSInfo.fst(533,4-533,17))
Query (TLSInfo.uu___is_EarlyFinished, 1)	succeeded (with hint) in 118 milliseconds with fuel 0 and ifuel 1
Hint-info (.\MAC_SHA1.fst(21,0-21,54)): Replay succeeded in 119 milliseconds
Hint-info (.\MAC_SHA1.fst(32,0-32,71)): Replay succeeded in 121 milliseconds
Hint-info (.\MAC_SHA1.fst(32,29-32,30)): Replay succeeded in 126 milliseconds
Hint-info (.\MAC_SHA1.fst(32,40-32,41)): Replay succeeded in 122 milliseconds
Hint-info (.\MAC_SHA1.fst(41,27-41,42)): Replay succeeded in 119 milliseconds
Hint-info (.\MAC_SHA1.fst(39,3-39,9)): Replay succeeded in 128 milliseconds
Hint-info (.\MAC_SHA1.fst(40,2-40,5)): Replay succeeded in 123 milliseconds
Hint-info (.\MAC_SHA1.fst(41,2-41,5)): Replay succeeded in 125 milliseconds
Hint-info (.\MAC_SHA1.fst(41,2-41,5)): Replay succeeded in 135 milliseconds
Hint-info (.\MAC_SHA1.fst(57,13-57,38)): Replay succeeded in 155 milliseconds
Hint-info (.\MAC_SHA1.fst(54,0-58,55)): Replay succeeded in 121 milliseconds
Hint-info (.\MAC_SHA1.fst(63,0-68,3)): Replay succeeded in 153 milliseconds
Hint-info (.\MAC_SHA1.fst(71,0-71,37)): Replay succeeded in 164 milliseconds
Hint-info (.\MAC_SHA1.fst(71,31-71,37)): Replay succeeded in 122 milliseconds
Hint-info (.\MAC_SHA1.fst(79,0-84,34)): Replay succeeded in 149 milliseconds
Verified module: MAC_SHA1 (3182 milliseconds)
All verification conditions discharged successfully
(.\TLSExtensions.fst(619,6-619,19))
Query (TLSExtensions.clientToServerExtension, 2)	succeeded (with hint) in 144 milliseconds with fuel 0 and ifuel 1
C:/Build/Agent/_work/36/s/fstar/bin/fstar.exe --fstar_home C:/Build/Agent/_work/36/s/fstar --record_hints --hint_info --trace_error --max_fuel 4 --initial_fuel 0 --max_ifuel 2 --initial_ifuel 1 --z3rlimit 20 --__temp_no_proj Handshake --__temp_no_proj Connection --use_hints --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/crypto/hacl \
--include C:/Build/Agent/_work/36/s/fstar/ucontrib/CoreCrypto/fst/ --include C:/Build/Agent/_work/36/s/fstar/ucontrib/Platform/fst/ --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/crypto/real --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/LowCProvider/fst --include C:/Build/Agent/_work/36/s/fstar/examples/low-level/crypto --include ../../libs/ffi --include C:/Build/Agent/_work/36/s/fstar/ulib/hyperstack \
--include ideal-flags \
--verify_module TLS \
TLS.fst
(.\Signature.fst(318,2-318,14))
Query (Signature.leak, 5)	succeeded (with hint) in 117 milliseconds with fuel 0 and ifuel 1
(.\TLSInfo.fst(534,4-534,21))
Query (TLSInfo.uu___is_HandshakeFinished, 1)	succeeded (with hint) in 119 milliseconds with fuel 0 and ifuel 1
(.\Signature.fst(319,2-319,21))
Query (Signature.leak, 6)	succeeded (with hint) in 102 milliseconds with fuel 0 and ifuel 1
(.\TLSExtensions.fst(624,23-624,35))
Query (TLSExtensions.clientToServerExtension, 3)	succeeded (with hint) in 124 milliseconds with fuel 0 and ifuel 1
(.\TLSInfo.fst(535,4-535,16))
Query (TLSInfo.uu___is_LateFinished, 1)	succeeded (with hint) in 117 milliseconds with fuel 0 and ifuel 1
(.\Signature.fst(324,38-324,72))
Query (Signature.coerce, 1)	succeeded (with hint) in 101 milliseconds with fuel 0 and ifuel 1
(.\TLSExtensions.fst(628,11-628,24))
Query (TLSExtensions.clientToServerExtension, 4)	succeeded (with hint) in 129 milliseconds with fuel 0 and ifuel 1
(.\Signature.fst(324,93-324,127))
Query (Signature.coerce, 2)	succeeded (with hint) in 112 milliseconds with fuel 0 and ifuel 1
(.\TLSInfo.fst(538,4-538,14))
Query (TLSInfo.__proj__FinishedID__item___0, 1)	succeeded (with hint) in 162 milliseconds with fuel 0 and ifuel 1
(.\Signature.fst(327,20-327,48))
Query (Signature.coerce, 3)	succeeded (with hint) in 105 milliseconds with fuel 0 and ifuel 1
(.\TLSInfo.fst(538,4-538,14))
Query (TLSInfo.__proj__FinishedID__item___1, 1)	succeeded (with hint) in 125 milliseconds with fuel 0 and ifuel 1
(.\TLSExtensions.fst(641,0-680,14))
Query (TLSExtensions.clientToNegotiatedExtension, 1)	succeeded (with hint) in 147 milliseconds with fuel 0 and ifuel 1
(.\Signature.fst(328,14-328,36))
Query (Signature.coerce, 4)	succeeded (with hint) in 126 milliseconds with fuel 0 and ifuel 1
(.\TLSInfo.fst(538,4-538,14))
Query (TLSInfo.__proj__FinishedID__item___2, 1)	succeeded (with hint) in 120 milliseconds with fuel 0 and ifuel 1
(.\TLSExtensions.fst(654,65-654,70))
Query (TLSExtensions.clientToNegotiatedExtension, 2)	succeeded (with hint) in 129 milliseconds with fuel 0 and ifuel 1
(.\Signature.fst(329,7-329,18))
Query (Signature.coerce, 5)	succeeded (with hint) in 100 milliseconds with fuel 0 and ifuel 1
(.\TLSInfo.fst(538,4-538,14))
Query (TLSInfo.__proj__FinishedID__item___3, 1)	succeeded (with hint) in 119 milliseconds with fuel 0 and ifuel 1
(.\TLSExtensions.fst(659,47-659,75))
Query (TLSExtensions.clientToNegotiatedExtension, 3)	succeeded (with hint) in 126 milliseconds with fuel 0 and ifuel 1
(.\TLSInfo.fst(538,4-538,14))
Query (TLSInfo.__proj__FinishedID__item___4, 1)	succeeded (with hint) in 117 milliseconds with fuel 0 and ifuel 1
(.\Signature.fst(330,0-331,31))
Query (Signature.coerce, 6)	succeeded (with hint) in 132 milliseconds with fuel 0 and ifuel 1
(.\Signature.fst(339,39-339,73))
Query (Signature.endorse, 1)	succeeded (with hint) in 100 milliseconds with fuel 0 and ifuel 1
(.\TLSExtensions.fst(683,0-699,113))
Query (TLSExtensions.negotiateServerExtensions, 1)	succeeded (with hint) in 138 milliseconds with fuel 0 and ifuel 1
(.\TLSInfo.fst(550,0-579,60))
Query (TLSInfo.esId_hash, 1)	succeeded (with hint) in 117 milliseconds with fuel 0 and ifuel 1
(.\Signature.fst(343,9-343,26))
Query (Signature.endorse, 2)	succeeded (with hint) in 101 milliseconds with fuel 0 and ifuel 1
(.\TLSExtensions.fst(702,0-705,15))
Query (TLSExtensions.isClientRenegotiationInfo, 1)	succeeded (with hint) in 125 milliseconds with fuel 0 and ifuel 1
(.\TLSInfo.fst(550,0-579,60))
Query (TLSInfo.esId_hash, 2)	succeeded (with hint) in 122 milliseconds with fuel 0 and ifuel 1
(.\Signature.fst(344,47-344,65))
Query (Signature.endorse, 3)	succeeded (with hint) in 101 milliseconds with fuel 0 and ifuel 1
(.\TLSInfo.fst(550,0-579,60))
Query (TLSInfo.esId_hash, 3)	succeeded (with hint) in 117 milliseconds with fuel 0 and ifuel 1
(.\TLSExtensions.fst(708,0-711,53))
Query (TLSExtensions.checkClientRenegotiationInfoExtension, 1)	succeeded (with hint) in 129 milliseconds with fuel 0 and ifuel 1
(.\Signature.fst(344,90-344,96))
Query (Signature.endorse, 4)	succeeded (with hint) in 109 milliseconds with fuel 0 and ifuel 1
(.\TLSInfo.fst(550,0-579,60))
Query (TLSInfo.esId_hash, 4)	succeeded (with hint) in 125 milliseconds with fuel 0 and ifuel 1
(.\TLSExtensions.fst(714,0-717,15))
Query (TLSExtensions.isServerRenegotiationInfo, 1)	succeeded (with hint) in 134 milliseconds with fuel 0 and ifuel 1
(.\Signature.fst(345,0-351,47))
Query (Signature.endorse, 5)	succeeded (with hint) in 164 milliseconds with fuel 0 and ifuel 1
(.\TLSInfo.fst(550,0-579,60))
Query (TLSInfo.esId_hash, 5)	succeeded (with hint) in 119 milliseconds with fuel 0 and ifuel 1
(.\TLSExtensions.fst(720,0-725,60))
Query (TLSExtensions.checkServerRenegotiationInfoExtension, 1)	succeeded (with hint) in 129 milliseconds with fuel 0 and ifuel 1
(.\Signature.fst(346,13-346,25))
Query (Signature.endorse, 6)	succeeded (with hint) in 111 milliseconds with fuel 0 and ifuel 1
(.\TLSInfo.fst(550,0-579,60))
Query (TLSInfo.esId_hash, 6)	succeeded (with hint) in 121 milliseconds with fuel 0 and ifuel 1
(.\TLSExtensions.fst(728,25-728,51))
Query (TLSExtensions.hasExtendedMS, 1)	succeeded (with hint) in 133 milliseconds with fuel 0 and ifuel 1
(.\Signature.fst(349,7-349,21))
Query (Signature.endorse, 7)	succeeded (with hint) in 99 milliseconds with fuel 0 and ifuel 1
(.\TLSInfo.fst(550,0-579,60))
Query (TLSInfo.esId_hash, 7)	succeeded (with hint) in 129 milliseconds with fuel 0 and ifuel 2
Hint-info (.\TLSExtensions.fst(13,0-16,58)): Replay succeeded in 123 milliseconds
Hint-info (.\TLSExtensions.fst(14,4-14,19)): Replay succeeded in 142 milliseconds
Hint-info (.\TLSExtensions.fst(15,4-15,27)): Replay succeeded in 116 milliseconds
Hint-info (.\TLSExtensions.fst(15,4-15,27)): Replay succeeded in 121 milliseconds
Hint-info (.\TLSExtensions.fst(16,4-16,27)): Replay succeeded in 118 milliseconds
Hint-info (.\TLSExtensions.fst(16,4-16,27)): Replay succeeded in 151 milliseconds
Hint-info (.\TLSExtensions.fst(19,0-29,26)): Replay succeeded in 148 milliseconds
Hint-info (.\TLSExtensions.fst(33,0-49,104)): Replay succeeded in 185 milliseconds
Hint-info (.\TLSExtensions.fst(51,5-77,45)): Replay succeeded in 129 milliseconds
Hint-info (.\TLSExtensions.fst(59,4-59,29)): Replay succeeded in 122 milliseconds
Hint-info (.\TLSExtensions.fst(59,4-59,29)): Replay succeeded in 124 milliseconds
Hint-info (.\TLSExtensions.fst(60,4-60,29)): Replay succeeded in 154 milliseconds
Hint-info (.\TLSExtensions.fst(64,4-64,15)): Replay succeeded in 138 milliseconds
Hint-info (.\TLSExtensions.fst(64,4-64,15)): Replay succeeded in 119 milliseconds
Hint-info (.\TLSExtensions.fst(65,4-65,18)): Replay succeeded in 123 milliseconds
Hint-info (.\TLSExtensions.fst(65,4-65,18)): Replay succeeded in 141 milliseconds
Hint-info (.\TLSExtensions.fst(66,4-66,14)): Replay succeeded in 142 milliseconds
Hint-info (.\TLSExtensions.fst(66,4-66,14)): Replay succeeded in 126 milliseconds
Hint-info (.\TLSExtensions.fst(67,4-67,18)): Replay succeeded in 122 milliseconds
Hint-info (.\TLSExtensions.fst(67,4-67,18)): Replay succeeded in 125 milliseconds
Hint-info (.\TLSExtensions.fst(69,4-69,25)): Replay succeeded in 128 milliseconds
Hint-info (.\TLSExtensions.fst(69,4-69,25)): Replay succeeded in 137 milliseconds
Hint-info (.\TLSExtensions.fst(71,4-71,24)): Replay succeeded in 120 milliseconds
Hint-info (.\TLSExtensions.fst(71,4-71,24)): Replay succeeded in 126 milliseconds
Hint-info (.\TLSExtensions.fst(72,4-72,17)): Replay succeeded in 122 milliseconds
Hint-info (.\TLSExtensions.fst(72,4-72,17)): Replay succeeded in 122 milliseconds
Hint-info (.\TLSExtensions.fst(73,4-73,17)): Replay succeeded in 121 milliseconds
Hint-info (.\TLSExtensions.fst(74,4-74,22)): Replay succeeded in 136 milliseconds
Hint-info (.\TLSExtensions.fst(75,4-75,21)): Replay succeeded in 134 milliseconds
Hint-info (.\TLSExtensions.fst(75,4-75,21)): Replay succeeded in 129 milliseconds
Hint-info (.\TLSExtensions.fst(76,4-76,22)): Replay succeeded in 134 milliseconds
Hint-info (.\TLSExtensions.fst(76,4-76,22)): Replay succeeded in 137 milliseconds
Hint-info (.\TLSExtensions.fst(77,4-77,23)): Replay succeeded in 138 milliseconds
Hint-info (.\TLSExtensions.fst(77,4-77,23)): Replay succeeded in 130 milliseconds
Hint-info (.\TLSExtensions.fst(77,4-77,23)): Replay succeeded in 137 milliseconds
Hint-info (.\TLSExtensions.fst(79,0-94,14)): Replay succeeded in 149 milliseconds
Hint-info (.\TLSExtensions.fst(97,0-110,32)): Replay succeeded in 154 milliseconds
Hint-info (.\TLSExtensions.fst(112,0-114,16)): Replay succeeded in 132 milliseconds
Hint-info (.\TLSExtensions.fst(113,2-113,8)): Replay succeeded in 125 milliseconds
Hint-info (.\TLSExtensions.fst(113,2-113,8)): Replay succeeded in 128 milliseconds
Hint-info (.\TLSExtensions.fst(114,2-114,6)): Replay succeeded in 152 milliseconds
Hint-info (.\TLSExtensions.fst(114,2-114,6)): Replay succeeded in 128 milliseconds
Hint-info (.\TLSExtensions.fst(117,0-123,11)): Replay succeeded in 146 milliseconds
Hint-info (.\TLSExtensions.fst(126,0-179,83)): Replay succeeded in 248 milliseconds
Hint-info (.\TLSExtensions.fst(151,45-151,50)): Replay succeeded in 130 milliseconds
Hint-info (.\TLSExtensions.fst(164,9-164,21)): Replay succeeded in 130 milliseconds
Hint-info (.\TLSExtensions.fst(181,74-188,78)): Replay succeeded in 151 milliseconds
Hint-info (.\TLSExtensions.fst(191,0-195,4)): Replay succeeded in 130 milliseconds
Hint-info (.\TLSExtensions.fst(198,0-223,29)): Replay succeeded in 247 milliseconds
Hint-info (.\TLSExtensions.fst(201,16-201,34)): Replay succeeded in 131 milliseconds
Hint-info (.\TLSExtensions.fst(217,23-217,41)): Replay succeeded in 139 milliseconds
Hint-info (.\TLSExtensions.fst(226,0-246,105)): Replay succeeded in 164 milliseconds
Hint-info (.\TLSExtensions.fst(243,9-243,50)): Replay succeeded in 127 milliseconds
Hint-info (.\TLSExtensions.fst(249,2-252,80)): Replay succeeded in 137 milliseconds
Hint-info (.\TLSExtensions.fst(255,0-259,4)): Replay succeeded in 126 milliseconds
Hint-info (.\TLSExtensions.fst(262,0-267,20)): Replay succeeded in 149 milliseconds
Hint-info (.\TLSExtensions.fst(269,0-282,28)): Replay succeeded in 154 milliseconds
Hint-info (.\TLSExtensions.fst(269,0-282,28)): Replay succeeded in 132 milliseconds
Hint-info (.\TLSExtensions.fst(333,10-333,117)): Replay succeeded in 126 milliseconds
Hint-info (.\TLSExtensions.fst(331,7-334,33)): Replay succeeded in 139 milliseconds
Hint-info (.\TLSExtensions.fst(471,0-476,25)): Replay succeeded in 139 milliseconds
Hint-info (.\TLSExtensions.fst(472,5-472,20)): Replay succeeded in 128 milliseconds
Hint-info (.\TLSExtensions.fst(479,0-480,73)): Replay succeeded in 131 milliseconds
Hint-info (.\TLSExtensions.fst(481,0-481,184)): Replay succeeded in 140 milliseconds
Hint-info (.\TLSExtensions.fst(486,0-510,7)): Replay succeeded in 227 milliseconds
Hint-info (.\TLSExtensions.fst(507,13-507,19)): Replay succeeded in 146 milliseconds
Hint-info (.\TLSExtensions.fst(513,0-516,28)): Replay succeeded in 140 milliseconds
Hint-info (.\TLSExtensions.fst(522,0-566,126)): Replay succeeded in 192 milliseconds
Hint-info (.\TLSExtensions.fst(569,0-597,8)): Replay succeeded in 163 milliseconds
Hint-info (.\TLSExtensions.fst(600,0-638,15)): Replay succeeded in 158 milliseconds
Hint-info (.\TLSExtensions.fst(619,6-619,19)): Replay succeeded in 144 milliseconds
Hint-info (.\TLSExtensions.fst(624,23-624,35)): Replay succeeded in 124 milliseconds
Hint-info (.\TLSExtensions.fst(628,11-628,24)): Replay succeeded in 129 milliseconds
Hint-info (.\TLSExtensions.fst(641,0-680,14)): Replay succeeded in 147 milliseconds
Hint-info (.\TLSExtensions.fst(654,65-654,70)): Replay succeeded in 129 milliseconds
Hint-info (.\TLSExtensions.fst(659,47-659,75)): Replay succeeded in 126 milliseconds
Hint-info (.\TLSExtensions.fst(683,0-699,113)): Replay succeeded in 138 milliseconds
Hint-info (.\TLSExtensions.fst(702,0-705,15)): Replay succeeded in 125 milliseconds
Hint-info (.\TLSExtensions.fst(708,0-711,53)): Replay succeeded in 129 milliseconds
Hint-info (.\TLSExtensions.fst(714,0-717,15)): Replay succeeded in 134 milliseconds
Hint-info (.\TLSExtensions.fst(720,0-725,60)): Replay succeeded in 129 milliseconds
Hint-info (.\TLSExtensions.fst(728,25-728,51)): Replay succeeded in 133 milliseconds
Verified module: TLSExtensions (21052 milliseconds)
All verification conditions discharged successfully
(.\TLSInfo.fst(550,0-579,60))
Query (TLSInfo.esId_hash, 8)	succeeded (with hint) in 121 milliseconds with fuel 0 and ifuel 1
(.\Signature.fst(356,0-373,13))
Query (Signature.get_chain_public_key, 1)	succeeded (with hint) in 135 milliseconds with fuel 0 and ifuel 1
(.\TLSInfo.fst(550,0-579,60))
Query (TLSInfo.esId_hash, 9)	succeeded (with hint) in 118 milliseconds with fuel 0 and ifuel 1
(.\Signature.fst(380,0-380,58))
Query (Signature.foo, 1)	succeeded (with hint) in 108 milliseconds with fuel 0 and ifuel 1
(.\TLSInfo.fst(582,2-582,34))
Query (TLSInfo.valid_hlen, 1)	succeeded (with hint) in 118 milliseconds with fuel 0 and ifuel 1
(.\TLSInfo.fst(594,0-638,24))
Query (TLSInfo.valid_esId, 1)	succeeded (with hint) in 121 milliseconds with fuel 0 and ifuel 1
(.\TLSInfo.fst(594,0-638,24))
Query (TLSInfo.valid_esId, 2)	succeeded (with hint) in 126 milliseconds with fuel 0 and ifuel 1
(.\TLSInfo.fst(594,0-638,24))
Query (TLSInfo.valid_esId, 3)	succeeded (with hint) in 118 milliseconds with fuel 0 and ifuel 1
(.\TLSInfo.fst(594,0-638,24))
Query (TLSInfo.valid_esId, 4)	succeeded (with hint) in 125 milliseconds with fuel 0 and ifuel 1
(.\Signature.fst(386,0-410,16))
Query (Signature.lookup_key, 1)	succeeded (with hint) in 471 milliseconds with fuel 2 and ifuel 2
(.\TLSInfo.fst(594,0-638,24))
Query (TLSInfo.valid_esId, 5)	succeeded (with hint) in 117 milliseconds with fuel 0 and ifuel 1
(.\Signature.fst(387,13-387,25))
Query (Signature.lookup_key, 2)	succeeded (with hint) in 100 milliseconds with fuel 0 and ifuel 1
(.\TLSInfo.fst(594,0-638,24))
Query (TLSInfo.valid_esId, 6)	succeeded (with hint) in 119 milliseconds with fuel 0 and ifuel 1
(.\Signature.fst(400,29-400,35))
Query (Signature.lookup_key, 3)	succeeded (with hint) in 101 milliseconds with fuel 0 and ifuel 1
(.\Signature.fst(405,6-405,20))
Query (Signature.lookup_key, 4)	succeeded (with hint) in 107 milliseconds with fuel 0 and ifuel 1
(.\TLSInfo.fst(594,0-638,24))
Query (TLSInfo.valid_esId, 7)	succeeded (with hint) in 132 milliseconds with fuel 0 and ifuel 1
(.\Signature.fst(406,6-406,25))
Query (Signature.lookup_key, 5)	succeeded (with hint) in 102 milliseconds with fuel 0 and ifuel 1
(.\TLSInfo.fst(594,0-638,24))
Query (TLSInfo.valid_esId, 8)	succeeded (with hint) in 120 milliseconds with fuel 0 and ifuel 1
(.\Signature.fst(407,6-407,40))
Query (Signature.lookup_key, 6)	succeeded (with hint) in 101 milliseconds with fuel 0 and ifuel 1
(.\TLSInfo.fst(594,0-638,24))
Query (TLSInfo.valid_esId, 9)	succeeded (with hint) in 121 milliseconds with fuel 0 and ifuel 1
Hint-info (.\Signature.fst(21,9-21,13)): Replay succeeded in 132 milliseconds
Hint-info (.\Signature.fst(22,10-22,14)): Replay succeeded in 107 milliseconds
Hint-info (.\Signature.fst(23,10-23,16)): Replay succeeded in 97 milliseconds
Hint-info (.\Signature.fst(24,10-24,21)): Replay succeeded in 122 milliseconds
Hint-info (.\Signature.fst(25,10-25,21)): Replay succeeded in 118 milliseconds
Hint-info (.\Signature.fst(34,51-34,74)): Replay succeeded in 96 milliseconds
Hint-info (.\Signature.fst(37,22-39,12)): Replay succeeded in 124 milliseconds
Hint-info (.\Signature.fst(37,53-37,76)): Replay succeeded in 95 milliseconds
Hint-info (.\Signature.fst(41,0-44,22)): Replay succeeded in 108 milliseconds
Hint-info (.\Signature.fst(42,4-42,10)): Replay succeeded in 98 milliseconds
Hint-info (.\Signature.fst(42,4-42,10)): Replay succeeded in 168 milliseconds
Hint-info (.\Signature.fst(43,4-43,10)): Replay succeeded in 99 milliseconds
Hint-info (.\Signature.fst(43,4-43,10)): Replay succeeded in 100 milliseconds
Hint-info (.\Signature.fst(44,4-44,12)): Replay succeeded in 99 milliseconds
Hint-info (.\Signature.fst(44,4-44,12)): Replay succeeded in 105 milliseconds
Hint-info (.\Signature.fst(46,0-49,47)): Replay succeeded in 118 milliseconds
Hint-info (.\Signature.fst(47,4-47,10)): Replay succeeded in 99 milliseconds
Hint-info (.\Signature.fst(47,4-47,10)): Replay succeeded in 129 milliseconds
Hint-info (.\Signature.fst(48,4-48,10)): Replay succeeded in 106 milliseconds
Hint-info (.\Signature.fst(48,4-48,10)): Replay succeeded in 100 milliseconds
Hint-info (.\Signature.fst(49,4-49,12)): Replay succeeded in 98 milliseconds
Hint-info (.\Signature.fst(49,4-49,12)): Replay succeeded in 98 milliseconds
Hint-info (.\Signature.fst(51,0-55,23)): Replay succeeded in 100 milliseconds
Hint-info (.\Signature.fst(57,0-61,23)): Replay succeeded in 110 milliseconds
Hint-info (.\Signature.fst(64,0-68,24)): Replay succeeded in 104 milliseconds
Hint-info (.\Signature.fst(73,4-73,10)): Replay succeeded in 112 milliseconds
Hint-info (.\Signature.fst(73,12-73,15)): Replay succeeded in 105 milliseconds
Hint-info (.\Signature.fst(74,4-74,11)): Replay succeeded in 97 milliseconds
Hint-info (.\Signature.fst(82,9-84,71)): Replay succeeded in 100 milliseconds
Hint-info (.\Signature.fst(86,0-88,63)): Replay succeeded in 115 milliseconds
Hint-info (.\Signature.fst(94,0-97,24)): Replay succeeded in 125 milliseconds
Hint-info (.\Signature.fst(105,0-105,67)): Replay succeeded in 109 milliseconds
Hint-info (.\Signature.fst(107,21-107,55)): Replay succeeded in 104 milliseconds
Hint-info (.\Signature.fst(110,40-110,75)): Replay succeeded in 103 milliseconds
Hint-info (.\Signature.fst(109,0-110,88)): Replay succeeded in 98 milliseconds
Hint-info (.\Signature.fst(109,0-110,88)): Replay succeeded in 103 milliseconds
Hint-info (.\Signature.fst(109,0-110,88)): Replay succeeded in 143 milliseconds
Hint-info (.\Signature.fst(110,8-110,11)): Replay succeeded in 103 milliseconds
Hint-info (.\Signature.fst(110,23-110,27)): Replay succeeded in 100 milliseconds
Hint-info (.\Signature.fst(110,23-110,27)): Replay succeeded in 100 milliseconds
Hint-info (.\Signature.fst(115,0-115,38)): Replay succeeded in 106 milliseconds
Hint-info (.\Signature.fst(118,0-118,28)): Replay succeeded in 110 milliseconds
Hint-info (.\Signature.fst(121,2-121,79)): Replay succeeded in 172 milliseconds
Hint-info (.\Signature.fst(121,45-121,78)): Replay succeeded in 107 milliseconds
Hint-info (.\Signature.fst(125,19-125,51)): Replay succeeded in 107 milliseconds
Hint-info (.\Signature.fst(128,57-128,79)): Replay succeeded in 104 milliseconds
Hint-info (.\Signature.fst(129,30-129,44)): Replay succeeded in 111 milliseconds
Hint-info (.\Signature.fst(130,30-130,55)): Replay succeeded in 118 milliseconds
Hint-info (.\Signature.fst(123,0-130,57)): Replay succeeded in 106 milliseconds
Hint-info (.\Signature.fst(131,0-134,10)): Replay succeeded in 137 milliseconds
Hint-info (.\Signature.fst(155,60-155,68)): Replay succeeded in 106 milliseconds
Hint-info (.\Signature.fst(156,8-159,70)): Replay succeeded in 110 milliseconds
Hint-info (.\Signature.fst(161,62-161,87)): Replay succeeded in 104 milliseconds
Hint-info (.\Signature.fst(164,28-164,43)): Replay succeeded in 114 milliseconds
Hint-info (.\Signature.fst(165,10-165,17)): Replay succeeded in 110 milliseconds
Hint-info (.\Signature.fst(165,47-165,63)): Replay succeeded in 102 milliseconds
Hint-info (.\Signature.fst(166,0-168,62)): Replay succeeded in 157 milliseconds
Hint-info (.\Signature.fst(167,12-167,16)): Replay succeeded in 101 milliseconds
Hint-info (.\Signature.fst(168,16-168,31)): Replay succeeded in 102 milliseconds
Hint-info (.\Signature.fst(168,37-168,43)): Replay succeeded in 108 milliseconds
Hint-info (.\Signature.fst(171,40-171,67)): Replay succeeded in 115 milliseconds
Hint-info (.\Signature.fst(173,0-173,24)): Replay succeeded in 113 milliseconds
Hint-info (.\Signature.fst(179,0-179,43)): Replay succeeded in 107 milliseconds
Hint-info (.\Signature.fst(180,0-180,32)): Replay succeeded in 113 milliseconds
Hint-info (.\Signature.fst(182,49-182,64)): Replay succeeded in 105 milliseconds
Hint-info (.\Signature.fst(184,0-186,24)): Replay succeeded in 107 milliseconds
Hint-info (.\Signature.fst(186,2-186,24)): Replay succeeded in 98 milliseconds
Hint-info (.\Signature.fst(194,15-194,40)): Replay succeeded in 120 milliseconds
Hint-info (.\Signature.fst(203,19-203,31)): Replay succeeded in 117 milliseconds
Hint-info (.\Signature.fst(206,8-206,20)): Replay succeeded in 101 milliseconds
Hint-info (.\Signature.fst(206,34-206,48)): Replay succeeded in 117 milliseconds
Hint-info (.\Signature.fst(207,20-207,29)): Replay succeeded in 100 milliseconds
Hint-info (.\Signature.fst(193,0-207,37)): Replay succeeded in 102 milliseconds
Hint-info (.\Signature.fst(209,0-222,36)): Replay succeeded in 215 milliseconds
Hint-info (.\Signature.fst(214,13-214,23)): Replay succeeded in 106 milliseconds
Hint-info (.\Signature.fst(215,4-215,16)): Replay succeeded in 110 milliseconds
Hint-info (.\Signature.fst(216,4-216,32)): Replay succeeded in 99 milliseconds
Hint-info (.\Signature.fst(228,15-228,40)): Replay succeeded in 100 milliseconds
Hint-info (.\Signature.fst(235,18-235,27)): Replay succeeded in 110 milliseconds
Hint-info (.\Signature.fst(237,15-237,38)): Replay succeeded in 116 milliseconds
Hint-info (.\Signature.fst(227,0-237,55)): Replay succeeded in 121 milliseconds
Hint-info (.\Signature.fst(239,0-257,15)): Replay succeeded in 141 milliseconds
Hint-info (.\Signature.fst(250,10-250,29)): Replay succeeded in 107 milliseconds
Hint-info (.\Signature.fst(252,61-252,67)): Replay succeeded in 103 milliseconds
Hint-info (.\Signature.fst(253,32-253,46)): Replay succeeded in 102 milliseconds
Hint-info (.\Signature.fst(267,17-267,26)): Replay succeeded in 101 milliseconds
Hint-info (.\Signature.fst(268,4-268,55)): Replay succeeded in 98 milliseconds
Hint-info (.\Signature.fst(269,4-269,37)): Replay succeeded in 101 milliseconds
Hint-info (.\Signature.fst(261,0-269,40)): Replay succeeded in 104 milliseconds
Hint-info (.\Signature.fst(271,0-276,63)): Replay succeeded in 156 milliseconds
Hint-info (.\Signature.fst(279,22-279,40)): Replay succeeded in 102 milliseconds
Hint-info (.\Signature.fst(282,51-282,67)): Replay succeeded in 99 milliseconds
Hint-info (.\Signature.fst(283,18-283,37)): Replay succeeded in 101 milliseconds
Hint-info (.\Signature.fst(285,11-285,49)): Replay succeeded in 98 milliseconds
Hint-info (.\Signature.fst(286,19-286,54)): Replay succeeded in 99 milliseconds
Hint-info (.\Signature.fst(278,0-286,57)): Replay succeeded in 103 milliseconds
Hint-info (.\Signature.fst(290,0-301,10)): Replay succeeded in 384 milliseconds
Hint-info (.\Signature.fst(292,13-292,25)): Replay succeeded in 123 milliseconds
Hint-info (.\Signature.fst(299,4-299,23)): Replay succeeded in 104 milliseconds
Hint-info (.\Signature.fst(300,4-300,40)): Replay succeeded in 100 milliseconds
Hint-info (.\Signature.fst(314,43-314,71)): Replay succeeded in 104 milliseconds
Hint-info (.\Signature.fst(315,19-315,47)): Replay succeeded in 102 milliseconds
Hint-info (.\Signature.fst(316,10-316,34)): Replay succeeded in 102 milliseconds
Hint-info (.\Signature.fst(317,0-320,10)): Replay succeeded in 138 milliseconds
Hint-info (.\Signature.fst(318,2-318,14)): Replay succeeded in 117 milliseconds
Hint-info (.\Signature.fst(319,2-319,21)): Replay succeeded in 102 milliseconds
Hint-info (.\Signature.fst(324,38-324,72)): Replay succeeded in 101 milliseconds
Hint-info (.\Signature.fst(324,93-324,127)): Replay succeeded in 112 milliseconds
Hint-info (.\Signature.fst(327,20-327,48)): Replay succeeded in 105 milliseconds
Hint-info (.\Signature.fst(328,14-328,36)): Replay succeeded in 126 milliseconds
Hint-info (.\Signature.fst(329,7-329,18)): Replay succeeded in 100 milliseconds
Hint-info (.\Signature.fst(330,0-331,31)): Replay succeeded in 132 milliseconds
Hint-info (.\Signature.fst(339,39-339,73)): Replay succeeded in 100 milliseconds
Hint-info (.\Signature.fst(343,9-343,26)): Replay succeeded in 101 milliseconds
Hint-info (.\Signature.fst(344,47-344,65)): Replay succeeded in 101 milliseconds
Hint-info (.\Signature.fst(344,90-344,96)): Replay succeeded in 109 milliseconds
Hint-info (.\Signature.fst(345,0-351,47)): Replay succeeded in 164 milliseconds
Hint-info (.\Signature.fst(346,13-346,25)): Replay succeeded in 111 milliseconds
Hint-info (.\Signature.fst(349,7-349,21)): Replay succeeded in 99 milliseconds
Hint-info (.\Signature.fst(356,0-373,13)): Replay succeeded in 135 milliseconds
Hint-info (.\Signature.fst(380,0-380,58)): Replay succeeded in 108 milliseconds
Hint-info (.\Signature.fst(386,0-410,16)): Replay succeeded in 471 milliseconds
Hint-info (.\Signature.fst(387,13-387,25)): Replay succeeded in 100 milliseconds
Hint-info (.\Signature.fst(400,29-400,35)): Replay succeeded in 101 milliseconds
Hint-info (.\Signature.fst(405,6-405,20)): Replay succeeded in 107 milliseconds
Hint-info (.\Signature.fst(406,6-406,25)): Replay succeeded in 102 milliseconds
Hint-info (.\Signature.fst(407,6-407,40)): Replay succeeded in 101 milliseconds
Verified module: Signature (24009 milliseconds)
All verification conditions discharged successfully
(.\TLSInfo.fst(653,27-653,40))
Query (TLSInfo.id, 1)	succeeded (with hint) in 118 milliseconds with fuel 0 and ifuel 1
(.\TLSInfo.fst(650,0-653,134))
Query (TLSInfo.id, 2)	succeeded (with hint) in 122 milliseconds with fuel 0 and ifuel 1
(.\TLSInfo.fst(650,0-653,134))
Query (TLSInfo.id, 3)	succeeded (with hint) in 128 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(652,0-652,30))
Query (TLSConstants.inverse_cipherSuite, 6)	succeeded (with hint) in 6276 milliseconds with fuel 1 and ifuel 6
(.\TLSInfo.fst(650,0-653,134))
Query (TLSInfo.id, 4)	succeeded (with hint) in 121 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(660,19-660,62))
Query (TLSConstants.pinverse_cipherSuite, 1)	succeeded (with hint) in 83 milliseconds with fuel 1 and ifuel 6
(.\TLSInfo.fst(651,2-651,13))
Query (TLSInfo.uu___is_PlaintextID, 1)	succeeded (with hint) in 129 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(661,30-661,77))
Query (TLSConstants.pinverse_cipherSuite, 2)	succeeded (with hint) in 80 milliseconds with fuel 1 and ifuel 6
(.\TLSInfo.fst(651,15-651,23))
Query (TLSInfo.__proj__PlaintextID__item__our_rand, 1)	succeeded (with hint) in 125 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(662,3-662,69))
Query (TLSConstants.pinverse_cipherSuite, 3)	succeeded (with hint) in 75 milliseconds with fuel 1 and ifuel 6
(.\TLSConstants.fst(655,0-662,70))
Query (TLSConstants.pinverse_cipherSuite, 4)	succeeded (with hint) in 87 milliseconds with fuel 1 and ifuel 6
(.\TLSInfo.fst(652,2-652,6))
Query (TLSInfo.uu___is_ID13, 1)	succeeded (with hint) in 120 milliseconds with fuel 0 and ifuel 1
(.\TLSInfo.fst(652,8-652,13))
Query (TLSInfo.__proj__ID13__item__keyId, 1)	succeeded (with hint) in 121 milliseconds with fuel 0 and ifuel 1
(.\TLSInfo.fst(653,2-653,6))
Query (TLSInfo.uu___is_ID12, 1)	succeeded (with hint) in 118 milliseconds with fuel 0 and ifuel 1
(.\TLSInfo.fst(653,8-653,10))
Query (TLSInfo.__proj__ID12__item__pv, 1)	succeeded (with hint) in 124 milliseconds with fuel 0 and ifuel 1
(.\TLSInfo.fst(653,8-653,10))
Query (TLSInfo.__proj__ID12__item__pv, 2)	succeeded (with hint) in 121 milliseconds with fuel 0 and ifuel 1
(.\TLSInfo.fst(653,45-653,49))
Query (TLSInfo.__proj__ID12__item__msId, 1)	succeeded (with hint) in 122 milliseconds with fuel 0 and ifuel 1
(.\TLSInfo.fst(653,58-653,64))
Query (TLSInfo.__proj__ID12__item__kdfAlg, 1)	succeeded (with hint) in 123 milliseconds with fuel 0 and ifuel 1
(.\TLSInfo.fst(653,77-653,82))
Query (TLSInfo.__proj__ID12__item__aeAlg, 1)	succeeded (with hint) in 123 milliseconds with fuel 0 and ifuel 1
(.\TLSInfo.fst(653,93-653,95))
Query (TLSInfo.__proj__ID12__item__cr, 1)	succeeded (with hint) in 126 milliseconds with fuel 0 and ifuel 1
(.\TLSInfo.fst(653,105-653,107))
Query (TLSInfo.__proj__ID12__item__sr, 1)	succeeded (with hint) in 121 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(663,0-663,31))
Query (TLSConstants.pinverse_cipherSuite, 5)	succeeded (with hint) in 1766 milliseconds with fuel 1 and ifuel 6
(.\TLSInfo.fst(653,117-653,123))
Query (TLSInfo.__proj__ID12__item__writer, 1)	succeeded (with hint) in 122 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(670,0-670,121))
Query (TLSConstants.cipherSuitesBytes, 1)	succeeded (with hint) in 75 milliseconds with fuel 1 and ifuel 1
(.\TLSInfo.fst(655,13-661,73))
Query (TLSInfo.peerId, 1)	succeeded (with hint) in 126 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(671,0-674,63))
Query (TLSConstants.cipherSuitesBytes, 2)	succeeded (with hint) in 92 milliseconds with fuel 1 and ifuel 1
(.\TLSInfo.fst(665,2-665,31))
Query (TLSInfo.siId, 1)	succeeded (with hint) in 120 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(681,0-692,84))
Query (TLSConstants.parseCipherSuites, 1)	succeeded (with hint) in 102 milliseconds with fuel 1 and ifuel 1
(.\TLSInfo.fst(668,0-670,107))
Query (TLSInfo.siId, 2)	succeeded (with hint) in 141 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(691,5-691,17))
Query (TLSConstants.parseCipherSuites, 2)	succeeded (with hint) in 75 milliseconds with fuel 1 and ifuel 1
(.\TLSInfo.fst(672,0-674,29))
Query (TLSInfo.pv_of_id, 1)	succeeded (with hint) in 123 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(701,11-701,64))
Query (TLSConstants.inverse_cipherSuites, 1)	succeeded (with hint) in 78 milliseconds with fuel 2 and ifuel 2
(.\TLSInfo.fst(677,18-680,51))
Query (TLSInfo.nonce_of_id, 1)	succeeded (with hint) in 125 milliseconds with fuel 0 and ifuel 1
(.\TLSInfo.fst(679,32-679,43))
Query (TLSInfo.nonce_of_id, 2)	succeeded (with hint) in 117 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(703,0-712,29))
Query (TLSConstants.inverse_cipherSuites, 2)	succeeded (with hint) in 171 milliseconds with fuel 2 and ifuel 2
(.\TLSInfo.fst(683,19-684,32))
Query (TLSInfo.kdfAlg_of_id, 1)	succeeded (with hint) in 120 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(723,0-726,14))
Query (TLSConstants.isAnonCipherSuite, 1)	succeeded (with hint) in 77 milliseconds with fuel 2 and ifuel 2
(.\TLSConstants.fst(729,0-735,14))
Query (TLSConstants.isDHECipherSuite, 1)	succeeded (with hint) in 80 milliseconds with fuel 2 and ifuel 2
(.\TLSInfo.fst(686,0-686,76))
Query (TLSInfo.macAlg_of_id, 1)	succeeded (with hint) in 121 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(738,0-742,14))
Query (TLSConstants.isECDHECipherSuite, 1)	succeeded (with hint) in 78 milliseconds with fuel 2 and ifuel 2
(.\TLSInfo.fst(687,19-689,25))
Query (TLSInfo.macAlg_of_id, 2)	succeeded (with hint) in 123 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(745,0-749,14))
Query (TLSConstants.isDHCipherSuite, 1)	succeeded (with hint) in 81 milliseconds with fuel 2 and ifuel 2
(.\TLSInfo.fst(691,0-691,83))
Query (TLSInfo.encAlg_of_id, 1)	succeeded (with hint) in 121 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(752,0-755,14))
Query (TLSConstants.isRSACipherSuite, 1)	succeeded (with hint) in 78 milliseconds with fuel 2 and ifuel 2
(.\TLSConstants.fst(758,0-761,14))
Query (TLSConstants.isOnlyMACCipherSuite, 1)	succeeded (with hint) in 77 milliseconds with fuel 2 and ifuel 2
(.\TLSInfo.fst(692,19-693,49))
Query (TLSInfo.encAlg_of_id, 2)	succeeded (with hint) in 131 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(785,0-790,15))
Query (TLSConstants.prePrfAlg, 1)	succeeded (with hint) in 78 milliseconds with fuel 2 and ifuel 2
(.\TLSInfo.fst(696,18-698,30))
Query (TLSInfo.aeAlg_of_id, 1)	succeeded (with hint) in 129 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(786,4-786,19))
Query (TLSConstants.uu___is_PRF_SSL3_nested, 1)	succeeded (with hint) in 77 milliseconds with fuel 2 and ifuel 2
(.\TLSConstants.fst(787,4-787,19))
Query (TLSConstants.uu___is_PRF_SSL3_concat, 1)	succeeded (with hint) in 78 milliseconds with fuel 2 and ifuel 2
(.\TLSInfo.fst(700,0-702,6))
Query (TLSInfo.lemma_MtE, 1)	succeeded (with hint) in 148 milliseconds with fuel 0 and ifuel 2
(.\TLSConstants.fst(788,4-788,16))
Query (TLSConstants.uu___is_PRF_TLS_1p01, 1)	succeeded (with hint) in 77 milliseconds with fuel 2 and ifuel 2
(.\TLSInfo.fst(704,0-706,6))
Query (TLSInfo.lemma_ID13, 1)	succeeded (with hint) in 131 milliseconds with fuel 0 and ifuel 2
(.\TLSConstants.fst(788,4-788,16))
Query (TLSConstants.__proj__PRF_TLS_1p01__item___0, 1)	succeeded (with hint) in 80 milliseconds with fuel 2 and ifuel 2
(.\TLSConstants.fst(789,4-789,15))
Query (TLSConstants.uu___is_PRF_TLS_1p2, 1)	succeeded (with hint) in 81 milliseconds with fuel 2 and ifuel 2
(.\TLSInfo.fst(708,0-710,6))
Query (TLSInfo.lemma_ID12, 1)	succeeded (with hint) in 125 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(789,4-789,15))
Query (TLSConstants.__proj__PRF_TLS_1p2__item___0, 1)	succeeded (with hint) in 79 milliseconds with fuel 2 and ifuel 2
(.\TLSInfo.fst(709,23-709,44))
Query (TLSInfo.lemma_ID12, 2)	succeeded (with hint) in 119 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(789,4-789,15))
Query (TLSConstants.__proj__PRF_TLS_1p2__item___1, 1)	succeeded (with hint) in 78 milliseconds with fuel 2 and ifuel 2
(.\TLSConstants.fst(790,4-790,15))
Query (TLSConstants.uu___is_PRF_TLS_1p3, 1)	succeeded (with hint) in 74 milliseconds with fuel 2 and ifuel 2
(.\TLSInfo.fst(709,23-709,44))
Query (TLSInfo.lemma_ID12, 3)	succeeded (with hint) in 119 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(805,35-809,43))
Query (TLSConstants.prfMacAlg_of_ciphersuite_aux, 1)	succeeded (with hint) in 78 milliseconds with fuel 2 and ifuel 2
(.\TLSInfo.fst(745,22-748,41))
Query (TLSInfo.authId, 1)	succeeded (with hint) in 123 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(813,0-816,29))
Query (TLSConstants.pvcs, 1)	succeeded (with hint) in 78 milliseconds with fuel 2 and ifuel 2
(.\TLSInfo.fst(750,22-753,41))
Query (TLSInfo.safeId, 1)	succeeded (with hint) in 122 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(819,2-819,27))
Query (TLSConstants.require_some, 1)	succeeded (with hint) in 75 milliseconds with fuel 2 and ifuel 2
(.\TLSConstants.fst(822,2-822,51))
Query (TLSConstants.prfMacAlg_of_ciphersuite, 1)	succeeded (with hint) in 78 milliseconds with fuel 2 and ifuel 2
(.\TLSInfo.fst(755,0-759,6))
Query (TLSInfo.plainText_is_not_auth, 1)	succeeded (with hint) in 122 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(831,43-835,43))
Query (TLSConstants.verifyDataHashAlg_of_ciphersuite_aux, 1)	succeeded (with hint) in 80 milliseconds with fuel 2 and ifuel 2
(.\TLSConstants.fst(839,2-839,59))
Query (TLSConstants.verifyDataHashAlg_of_ciphersuite, 1)	succeeded (with hint) in 73 milliseconds with fuel 2 and ifuel 2
(.\TLSInfo.fst(761,0-765,11))
Query (TLSInfo.safe_implies_auth, 1)	succeeded (with hint) in 120 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(843,0-846,77))
Query (TLSConstants.sessionHashAlg, 1)	succeeded (with hint) in 89 milliseconds with fuel 2 and ifuel 2
Hint-info (.\TLSInfo.fst(85,4-85,16)): Replay succeeded in 102 milliseconds
Hint-info (.\TLSInfo.fst(120,0-123,84)): Replay succeeded in 163 milliseconds
Hint-info (.\TLSInfo.fst(126,0-131,15)): Replay succeeded in 209 milliseconds
Hint-info (.\TLSInfo.fst(135,0-182,5)): Replay succeeded in 159 milliseconds
Hint-info (.\TLSInfo.fst(190,0-190,23)): Replay succeeded in 105 milliseconds
Hint-info (.\TLSInfo.fst(193,0-193,24)): Replay succeeded in 105 milliseconds
Hint-info (.\TLSInfo.fst(206,0-208,83)): Replay succeeded in 109 milliseconds
Hint-info (.\TLSInfo.fst(207,2-207,9)): Replay succeeded in 155 milliseconds
Hint-info (.\TLSInfo.fst(207,2-207,9)): Replay succeeded in 138 milliseconds
Hint-info (.\TLSInfo.fst(208,2-208,13)): Replay succeeded in 140 milliseconds
Hint-info (.\TLSInfo.fst(208,2-208,13)): Replay succeeded in 145 milliseconds
Hint-info (.\TLSInfo.fst(211,2-211,16)): Replay succeeded in 107 milliseconds
Hint-info (.\TLSInfo.fst(212,2-212,10)): Replay succeeded in 123 milliseconds
Hint-info (.\TLSInfo.fst(213,2-213,12)): Replay succeeded in 104 milliseconds
Hint-info (.\TLSInfo.fst(215,0-226,1)): Replay succeeded in 115 milliseconds
Hint-info (.\TLSInfo.fst(283,0-287,50)): Replay succeeded in 117 milliseconds
Hint-info (.\TLSInfo.fst(296,0-296,47)): Replay succeeded in 125 milliseconds
Hint-info (.\TLSInfo.fst(301,49-301,61)): Replay succeeded in 124 milliseconds
Hint-info (.\TLSInfo.fst(302,0-308,36)): Replay succeeded in 122 milliseconds
Hint-info (.\TLSInfo.fst(310,49-310,61)): Replay succeeded in 119 milliseconds
Hint-info (.\TLSInfo.fst(311,0-316,36)): Replay succeeded in 114 milliseconds
Hint-info (.\TLSInfo.fst(320,35-320,64)): Replay succeeded in 115 milliseconds
Hint-info (.\TLSInfo.fst(322,0-322,47)): Replay succeeded in 115 milliseconds
Hint-info (.\TLSInfo.fst(324,0-327,57)): Replay succeeded in 146 milliseconds
Hint-info (.\TLSInfo.fst(325,4-325,14)): Replay succeeded in 110 milliseconds
Hint-info (.\TLSInfo.fst(325,4-325,14)): Replay succeeded in 109 milliseconds
Hint-info (.\TLSInfo.fst(325,4-325,14)): Replay succeeded in 123 milliseconds
Hint-info (.\TLSInfo.fst(325,4-325,14)): Replay succeeded in 116 milliseconds
Hint-info (.\TLSInfo.fst(327,4-327,14)): Replay succeeded in 125 milliseconds
Hint-info (.\TLSInfo.fst(327,4-327,14)): Replay succeeded in 135 milliseconds
Hint-info (.\TLSInfo.fst(327,4-327,14)): Replay succeeded in 114 milliseconds
Hint-info (.\TLSInfo.fst(327,4-327,14)): Replay succeeded in 113 milliseconds
Hint-info (.\TLSInfo.fst(332,15-334,66)): Replay succeeded in 115 milliseconds
Hint-info (.\TLSInfo.fst(352,0-356,46)): Replay succeeded in 120 milliseconds
Hint-info (.\TLSInfo.fst(371,30-371,59)): Replay succeeded in 116 milliseconds
Hint-info (.\TLSInfo.fst(372,0-372,94)): Replay succeeded in 113 milliseconds
Hint-info (.\TLSInfo.fst(378,0-382,14)): Replay succeeded in 119 milliseconds
Hint-info (.\TLSInfo.fst(428,0-431,1)): Replay succeeded in 116 milliseconds
Hint-info (.\TLSInfo.fst(433,0-437,1)): Replay succeeded in 121 milliseconds
Hint-info (.\TLSInfo.fst(443,0-447,26)): Replay succeeded in 118 milliseconds
Hint-info (.\TLSInfo.fst(444,2-444,12)): Replay succeeded in 117 milliseconds
Hint-info (.\TLSInfo.fst(444,2-444,12)): Replay succeeded in 138 milliseconds
Hint-info (.\TLSInfo.fst(445,2-445,12)): Replay succeeded in 117 milliseconds
Hint-info (.\TLSInfo.fst(445,2-445,12)): Replay succeeded in 118 milliseconds
Hint-info (.\TLSInfo.fst(446,2-446,12)): Replay succeeded in 132 milliseconds
Hint-info (.\TLSInfo.fst(446,2-446,12)): Replay succeeded in 121 milliseconds
Hint-info (.\TLSInfo.fst(447,2-447,12)): Replay succeeded in 116 milliseconds
Hint-info (.\TLSInfo.fst(447,2-447,12)): Replay succeeded in 121 milliseconds
Hint-info (.\TLSInfo.fst(449,53-453,28)): Replay succeeded in 117 milliseconds
Hint-info (.\TLSInfo.fst(455,0-459,64)): Replay succeeded in 131 milliseconds
Hint-info (.\TLSInfo.fst(459,21-459,32)): Replay succeeded in 133 milliseconds
Hint-info (.\TLSInfo.fst(464,0-465,9)): Replay succeeded in 116 milliseconds
Hint-info (.\TLSInfo.fst(465,2-465,9)): Replay succeeded in 116 milliseconds
Hint-info (.\TLSInfo.fst(493,62-493,70)): Replay succeeded in 124 milliseconds
Hint-info (.\TLSInfo.fst(495,0-538,94)): Replay succeeded in 135 milliseconds
Hint-info (.\TLSInfo.fst(496,4-496,18)): Replay succeeded in 121 milliseconds
Hint-info (.\TLSInfo.fst(496,20-496,24)): Replay succeeded in 119 milliseconds
Hint-info (.\TLSInfo.fst(496,40-496,41)): Replay succeeded in 118 milliseconds
Hint-info (.\TLSInfo.fst(497,4-497,17)): Replay succeeded in 123 milliseconds
Hint-info (.\TLSInfo.fst(497,19-497,23)): Replay succeeded in 120 milliseconds
Hint-info (.\TLSInfo.fst(497,39-497,40)): Replay succeeded in 145 milliseconds
Hint-info (.\TLSInfo.fst(500,4-500,12)): Replay succeeded in 115 milliseconds
Hint-info (.\TLSInfo.fst(500,4-500,12)): Replay succeeded in 125 milliseconds
Hint-info (.\TLSInfo.fst(501,4-501,16)): Replay succeeded in 121 milliseconds
Hint-info (.\TLSInfo.fst(501,4-501,16)): Replay succeeded in 117 milliseconds
Hint-info (.\TLSInfo.fst(501,30-501,39)): Replay succeeded in 116 milliseconds
Hint-info (.\TLSInfo.fst(501,58-501,67)): Replay succeeded in 117 milliseconds
Hint-info (.\TLSInfo.fst(502,4-502,12)): Replay succeeded in 114 milliseconds
Hint-info (.\TLSInfo.fst(502,4-502,12)): Replay succeeded in 125 milliseconds
Hint-info (.\TLSInfo.fst(502,37-502,46)): Replay succeeded in 127 milliseconds
Hint-info (.\TLSInfo.fst(502,65-502,74)): Replay succeeded in 117 milliseconds
Hint-info (.\TLSInfo.fst(505,4-505,8)): Replay succeeded in 120 milliseconds
Hint-info (.\TLSInfo.fst(508,4-508,9)): Replay succeeded in 118 milliseconds
Hint-info (.\TLSInfo.fst(508,4-508,9)): Replay succeeded in 114 milliseconds
Hint-info (.\TLSInfo.fst(508,4-508,9)): Replay succeeded in 119 milliseconds
Hint-info (.\TLSInfo.fst(511,4-511,12)): Replay succeeded in 134 milliseconds
Hint-info (.\TLSInfo.fst(511,4-511,12)): Replay succeeded in 112 milliseconds
Hint-info (.\TLSInfo.fst(511,4-511,12)): Replay succeeded in 114 milliseconds
Hint-info (.\TLSInfo.fst(514,4-514,11)): Replay succeeded in 120 milliseconds
Hint-info (.\TLSInfo.fst(514,4-514,11)): Replay succeeded in 124 milliseconds
Hint-info (.\TLSInfo.fst(514,4-514,11)): Replay succeeded in 116 milliseconds
Hint-info (.\TLSInfo.fst(514,4-514,11)): Replay succeeded in 118 milliseconds
Hint-info (.\TLSInfo.fst(517,4-517,17)): Replay succeeded in 118 milliseconds
Hint-info (.\TLSInfo.fst(517,4-517,17)): Replay succeeded in 117 milliseconds
Hint-info (.\TLSInfo.fst(518,4-518,21)): Replay succeeded in 114 milliseconds
Hint-info (.\TLSInfo.fst(518,4-518,21)): Replay succeeded in 122 milliseconds
Hint-info (.\TLSInfo.fst(519,4-519,23)): Replay succeeded in 117 milliseconds
Hint-info (.\TLSInfo.fst(519,4-519,23)): Replay succeeded in 116 milliseconds
Hint-info (.\TLSInfo.fst(520,4-520,17)): Replay succeeded in 115 milliseconds
Hint-info (.\TLSInfo.fst(520,4-520,17)): Replay succeeded in 117 milliseconds
Hint-info (.\TLSInfo.fst(523,4-523,19)): Replay succeeded in 154 milliseconds
Hint-info (.\TLSInfo.fst(524,4-524,27)): Replay succeeded in 133 milliseconds
Hint-info (.\TLSInfo.fst(525,4-525,16)): Replay succeeded in 119 milliseconds
Hint-info (.\TLSInfo.fst(526,4-526,22)): Replay succeeded in 119 milliseconds
Hint-info (.\TLSInfo.fst(527,4-527,20)): Replay succeeded in 158 milliseconds
Hint-info (.\TLSInfo.fst(530,4-530,9)): Replay succeeded in 117 milliseconds
Hint-info (.\TLSInfo.fst(530,4-530,9)): Replay succeeded in 116 milliseconds
Hint-info (.\TLSInfo.fst(530,4-530,9)): Replay succeeded in 117 milliseconds
Hint-info (.\TLSInfo.fst(530,4-530,9)): Replay succeeded in 120 milliseconds
Hint-info (.\TLSInfo.fst(530,4-530,9)): Replay succeeded in 115 milliseconds
Hint-info (.\TLSInfo.fst(533,4-533,17)): Replay succeeded in 118 milliseconds
Hint-info (.\TLSInfo.fst(534,4-534,21)): Replay succeeded in 119 milliseconds
Hint-info (.\TLSInfo.fst(535,4-535,16)): Replay succeeded in 117 milliseconds
Hint-info (.\TLSInfo.fst(538,4-538,14)): Replay succeeded in 162 milliseconds
Hint-info (.\TLSInfo.fst(538,4-538,14)): Replay succeeded in 125 milliseconds
Hint-info (.\TLSInfo.fst(538,4-538,14)): Replay succeeded in 120 milliseconds
Hint-info (.\TLSInfo.fst(538,4-538,14)): Replay succeeded in 119 milliseconds
Hint-info (.\TLSInfo.fst(538,4-538,14)): Replay succeeded in 117 milliseconds
Hint-info (.\TLSInfo.fst(550,0-579,60)): Replay succeeded in 117 milliseconds
Hint-info (.\TLSInfo.fst(550,0-579,60)): Replay succeeded in 122 milliseconds
Hint-info (.\TLSInfo.fst(550,0-579,60)): Replay succeeded in 117 milliseconds
Hint-info (.\TLSInfo.fst(550,0-579,60)): Replay succeeded in 125 milliseconds
Hint-info (.\TLSInfo.fst(550,0-579,60)): Replay succeeded in 119 milliseconds
Hint-info (.\TLSInfo.fst(550,0-579,60)): Replay succeeded in 121 milliseconds
Hint-info (.\TLSInfo.fst(550,0-579,60)): Replay succeeded in 129 milliseconds
Hint-info (.\TLSInfo.fst(550,0-579,60)): Replay succeeded in 121 milliseconds
Hint-info (.\TLSInfo.fst(550,0-579,60)): Replay succeeded in 118 milliseconds
Hint-info (.\TLSInfo.fst(582,2-582,34)): Replay succeeded in 118 milliseconds
Hint-info (.\TLSInfo.fst(594,0-638,24)): Replay succeeded in 121 milliseconds
Hint-info (.\TLSInfo.fst(594,0-638,24)): Replay succeeded in 126 milliseconds
Hint-info (.\TLSInfo.fst(594,0-638,24)): Replay succeeded in 118 milliseconds
Hint-info (.\TLSInfo.fst(594,0-638,24)): Replay succeeded in 125 milliseconds
Hint-info (.\TLSInfo.fst(594,0-638,24)): Replay succeeded in 117 milliseconds
Hint-info (.\TLSInfo.fst(594,0-638,24)): Replay succeeded in 119 milliseconds
Hint-info (.\TLSInfo.fst(594,0-638,24)): Replay succeeded in 132 milliseconds
Hint-info (.\TLSInfo.fst(594,0-638,24)): Replay succeeded in 120 milliseconds
Hint-info (.\TLSInfo.fst(594,0-638,24)): Replay succeeded in 121 milliseconds
Hint-info (.\TLSInfo.fst(653,27-653,40)): Replay succeeded in 118 milliseconds
Hint-info (.\TLSInfo.fst(650,0-653,134)): Replay succeeded in 122 milliseconds
Hint-info (.\TLSInfo.fst(650,0-653,134)): Replay succeeded in 128 milliseconds
Hint-info (.\TLSInfo.fst(650,0-653,134)): Replay succeeded in 121 milliseconds
Hint-info (.\TLSInfo.fst(651,2-651,13)): Replay succeeded in 129 milliseconds
Hint-info (.\TLSInfo.fst(651,15-651,23)): Replay succeeded in 125 milliseconds
Hint-info (.\TLSInfo.fst(652,2-652,6)): Replay succeeded in 120 milliseconds
Hint-info (.\TLSInfo.fst(652,8-652,13)): Replay succeeded in 121 milliseconds
Hint-info (.\TLSInfo.fst(653,2-653,6)): Replay succeeded in 118 milliseconds
Hint-info (.\TLSInfo.fst(653,8-653,10)): Replay succeeded in 124 milliseconds
Hint-info (.\TLSInfo.fst(653,8-653,10)): Replay succeeded in 121 milliseconds
Hint-info (.\TLSInfo.fst(653,45-653,49)): Replay succeeded in 122 milliseconds
Hint-info (.\TLSInfo.fst(653,58-653,64)): Replay succeeded in 123 milliseconds
Hint-info (.\TLSInfo.fst(653,77-653,82)): Replay succeeded in 123 milliseconds
Hint-info (.\TLSInfo.fst(653,93-653,95)): Replay succeeded in 126 milliseconds
Hint-info (.\TLSInfo.fst(653,105-653,107)): Replay succeeded in 121 milliseconds
Hint-info (.\TLSInfo.fst(653,117-653,123)): Replay succeeded in 122 milliseconds
Hint-info (.\TLSInfo.fst(655,13-661,73)): Replay succeeded in 126 milliseconds
Hint-info (.\TLSInfo.fst(665,2-665,31)): Replay succeeded in 120 milliseconds
Hint-info (.\TLSInfo.fst(668,0-670,107)): Replay succeeded in 141 milliseconds
Hint-info (.\TLSInfo.fst(672,0-674,29)): Replay succeeded in 123 milliseconds
Hint-info (.\TLSInfo.fst(677,18-680,51)): Replay succeeded in 125 milliseconds
Hint-info (.\TLSInfo.fst(679,32-679,43)): Replay succeeded in 117 milliseconds
Hint-info (.\TLSInfo.fst(683,19-684,32)): Replay succeeded in 120 milliseconds
Hint-info (.\TLSInfo.fst(686,0-686,76)): Replay succeeded in 121 milliseconds
Hint-info (.\TLSInfo.fst(687,19-689,25)): Replay succeeded in 123 milliseconds
Hint-info (.\TLSInfo.fst(691,0-691,83)): Replay succeeded in 121 milliseconds
Hint-info (.\TLSInfo.fst(692,19-693,49)): Replay succeeded in 131 milliseconds
Hint-info (.\TLSInfo.fst(696,18-698,30)): Replay succeeded in 129 milliseconds
Hint-info (.\TLSInfo.fst(700,0-702,6)): Replay succeeded in 148 milliseconds
Hint-info (.\TLSInfo.fst(704,0-706,6)): Replay succeeded in 131 milliseconds
Hint-info (.\TLSInfo.fst(708,0-710,6)): Replay succeeded in 125 milliseconds
Hint-info (.\TLSInfo.fst(709,23-709,44)): Replay succeeded in 119 milliseconds
Hint-info (.\TLSInfo.fst(709,23-709,44)): Replay succeeded in 119 milliseconds
Hint-info (.\TLSInfo.fst(745,22-748,41)): Replay succeeded in 123 milliseconds
Hint-info (.\TLSInfo.fst(750,22-753,41)): Replay succeeded in 122 milliseconds
Hint-info (.\TLSInfo.fst(755,0-759,6)): Replay succeeded in 122 milliseconds
Hint-info (.\TLSInfo.fst(761,0-765,11)): Replay succeeded in 120 milliseconds
Verified module: TLSInfo (32148 milliseconds)
All verification conditions discharged successfully
(.\TLSConstants.fst(853,0-855,28))
Query (TLSConstants.get_aeAlg, 1)	succeeded (with hint) in 77 milliseconds with fuel 2 and ifuel 2
(.\TLSConstants.fst(863,0-867,25))
Query (TLSConstants.encAlg_of_aeAlg, 1)	succeeded (with hint) in 87 milliseconds with fuel 2 and ifuel 2
(.\TLSConstants.fst(869,56-869,69))
Query (TLSConstants.macAlg_of_aeAlg, 1)	succeeded (with hint) in 79 milliseconds with fuel 2 and ifuel 2
(.\TLSConstants.fst(870,0-875,35))
Query (TLSConstants.macAlg_of_aeAlg, 2)	succeeded (with hint) in 85 milliseconds with fuel 2 and ifuel 2
(.\TLSConstants.fst(879,4-879,27))
Query (TLSConstants.uu___is_TLS_NULL_WITH_NULL_NULL, 1)	succeeded (with hint) in 84 milliseconds with fuel 2 and ifuel 2
(.\TLSConstants.fst(881,4-881,25))
Query (TLSConstants.uu___is_TLS_RSA_WITH_NULL_MD5, 1)	succeeded (with hint) in 86 milliseconds with fuel 2 and ifuel 2
(.\TLSConstants.fst(882,4-882,25))
Query (TLSConstants.uu___is_TLS_RSA_WITH_NULL_SHA, 1)	succeeded (with hint) in 83 milliseconds with fuel 2 and ifuel 2
(.\TLSConstants.fst(883,4-883,28))
Query (TLSConstants.uu___is_TLS_RSA_WITH_NULL_SHA256, 1)	succeeded (with hint) in 86 milliseconds with fuel 2 and ifuel 2
(.\TLSConstants.fst(884,4-884,28))
Query (TLSConstants.uu___is_TLS_RSA_WITH_RC4_128_MD5, 1)	succeeded (with hint) in 83 milliseconds with fuel 2 and ifuel 2
(.\TLSConstants.fst(885,4-885,28))
Query (TLSConstants.uu___is_TLS_RSA_WITH_RC4_128_SHA, 1)	succeeded (with hint) in 87 milliseconds with fuel 2 and ifuel 2
(.\TLSConstants.fst(886,4-886,33))
Query (TLSConstants.uu___is_TLS_RSA_WITH_3DES_EDE_CBC_SHA, 1)	succeeded (with hint) in 88 milliseconds with fuel 2 and ifuel 2
(.\TLSConstants.fst(887,4-887,32))
Query (TLSConstants.uu___is_TLS_RSA_WITH_AES_128_CBC_SHA, 1)	succeeded (with hint) in 86 milliseconds with fuel 2 and ifuel 2
(.\TLSConstants.fst(888,4-888,32))
Query (TLSConstants.uu___is_TLS_RSA_WITH_AES_256_CBC_SHA, 1)	succeeded (with hint) in 84 milliseconds with fuel 2 and ifuel 2
(.\TLSConstants.fst(889,4-889,35))
Query (TLSConstants.uu___is_TLS_RSA_WITH_AES_128_CBC_SHA256, 1)	succeeded (with hint) in 86 milliseconds with fuel 2 and ifuel 2
(.\TLSConstants.fst(890,4-890,35))
Query (TLSConstants.uu___is_TLS_RSA_WITH_AES_256_CBC_SHA256, 1)	succeeded (with hint) in 83 milliseconds with fuel 2 and ifuel 2
(.\TLSConstants.fst(892,4-892,37))
Query (TLSConstants.uu___is_TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA, 1)	succeeded (with hint) in 83 milliseconds with fuel 2 and ifuel 2
(.\TLSConstants.fst(893,4-893,37))
Query (TLSConstants.uu___is_TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA, 1)	succeeded (with hint) in 82 milliseconds with fuel 2 and ifuel 2
(.\TLSConstants.fst(894,4-894,36))
Query (TLSConstants.uu___is_TLS_DHE_DSS_WITH_AES_128_CBC_SHA, 1)	succeeded (with hint) in 83 milliseconds with fuel 2 and ifuel 2
(.\TLSConstants.fst(895,4-895,36))
Query (TLSConstants.uu___is_TLS_DHE_RSA_WITH_AES_128_CBC_SHA, 1)	succeeded (with hint) in 85 milliseconds with fuel 2 and ifuel 2
(.\TLSConstants.fst(896,4-896,36))
Query (TLSConstants.uu___is_TLS_DHE_DSS_WITH_AES_256_CBC_SHA, 1)	succeeded (with hint) in 88 milliseconds with fuel 2 and ifuel 2
(.\TLSConstants.fst(897,4-897,36))
Query (TLSConstants.uu___is_TLS_DHE_RSA_WITH_AES_256_CBC_SHA, 1)	succeeded (with hint) in 86 milliseconds with fuel 2 and ifuel 2
(.\TLSConstants.fst(898,4-898,39))
Query (TLSConstants.uu___is_TLS_DHE_DSS_WITH_AES_128_CBC_SHA256, 1)	succeeded (with hint) in 84 milliseconds with fuel 2 and ifuel 2
(.\TLSConstants.fst(899,4-899,39))
Query (TLSConstants.uu___is_TLS_DHE_RSA_WITH_AES_128_CBC_SHA256, 1)	succeeded (with hint) in 82 milliseconds with fuel 2 and ifuel 2
(.\TLSConstants.fst(900,4-900,39))
Query (TLSConstants.uu___is_TLS_DHE_DSS_WITH_AES_256_CBC_SHA256, 1)	succeeded (with hint) in 83 milliseconds with fuel 2 and ifuel 2
(.\TLSConstants.fst(901,4-901,39))
Query (TLSConstants.uu___is_TLS_DHE_RSA_WITH_AES_256_CBC_SHA256, 1)	succeeded (with hint) in 87 milliseconds with fuel 2 and ifuel 2
(.\TLSConstants.fst(903,4-903,34))
Query (TLSConstants.uu___is_TLS_ECDHE_RSA_WITH_RC4_128_SHA, 1)	succeeded (with hint) in 87 milliseconds with fuel 2 and ifuel 2
(.\TLSConstants.fst(904,4-904,39))
Query (TLSConstants.uu___is_TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA, 1)	succeeded (with hint) in 82 milliseconds with fuel 2 and ifuel 2
(.\TLSConstants.fst(905,4-905,38))
Query (TLSConstants.uu___is_TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA, 1)	succeeded (with hint) in 83 milliseconds with fuel 2 and ifuel 2
(.\TLSConstants.fst(906,4-906,41))
Query (TLSConstants.uu___is_TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256, 1)	succeeded (with hint) in 82 milliseconds with fuel 2 and ifuel 2
(.\TLSConstants.fst(907,4-907,38))
Query (TLSConstants.uu___is_TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA, 1)	succeeded (with hint) in 85 milliseconds with fuel 2 and ifuel 2
(.\TLSConstants.fst(908,4-908,41))
Query (TLSConstants.uu___is_TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384, 1)	succeeded (with hint) in 88 milliseconds with fuel 2 and ifuel 2
(.\TLSConstants.fst(910,4-910,43))
Query (TLSConstants.uu___is_TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256, 1)	succeeded (with hint) in 87 milliseconds with fuel 2 and ifuel 2
(.\TLSConstants.fst(911,4-911,41))
Query (TLSConstants.uu___is_TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256, 1)	succeeded (with hint) in 85 milliseconds with fuel 2 and ifuel 2
(.\TLSConstants.fst(912,4-912,43))
Query (TLSConstants.uu___is_TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384, 1)	succeeded (with hint) in 83 milliseconds with fuel 2 and ifuel 2
(.\TLSConstants.fst(913,4-913,41))
Query (TLSConstants.uu___is_TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384, 1)	succeeded (with hint) in 83 milliseconds with fuel 2 and ifuel 2
(.\TLSConstants.fst(915,4-915,32))
Query (TLSConstants.uu___is_TLS_DH_anon_WITH_RC4_128_MD5, 1)	succeeded (with hint) in 86 milliseconds with fuel 2 and ifuel 2
(.\TLSConstants.fst(916,4-916,37))
Query (TLSConstants.uu___is_TLS_DH_anon_WITH_3DES_EDE_CBC_SHA, 1)	succeeded (with hint) in 82 milliseconds with fuel 2 and ifuel 2
(.\TLSConstants.fst(917,4-917,36))
Query (TLSConstants.uu___is_TLS_DH_anon_WITH_AES_128_CBC_SHA, 1)	succeeded (with hint) in 82 milliseconds with fuel 2 and ifuel 2
(.\TLSConstants.fst(918,4-918,36))
Query (TLSConstants.uu___is_TLS_DH_anon_WITH_AES_256_CBC_SHA, 1)	succeeded (with hint) in 87 milliseconds with fuel 2 and ifuel 2
(.\TLSConstants.fst(919,4-919,39))
Query (TLSConstants.uu___is_TLS_DH_anon_WITH_AES_128_CBC_SHA256, 1)	succeeded (with hint) in 87 milliseconds with fuel 2 and ifuel 2
(.\TLSConstants.fst(920,4-920,39))
Query (TLSConstants.uu___is_TLS_DH_anon_WITH_AES_256_CBC_SHA256, 1)	succeeded (with hint) in 86 milliseconds with fuel 2 and ifuel 2
(.\TLSConstants.fst(922,4-922,35))
Query (TLSConstants.uu___is_TLS_RSA_WITH_AES_128_GCM_SHA256, 1)	succeeded (with hint) in 83 milliseconds with fuel 2 and ifuel 2
(.\TLSConstants.fst(923,4-923,35))
Query (TLSConstants.uu___is_TLS_RSA_WITH_AES_256_GCM_SHA384, 1)	succeeded (with hint) in 87 milliseconds with fuel 2 and ifuel 2
(.\TLSConstants.fst(924,4-924,39))
Query (TLSConstants.uu___is_TLS_DHE_RSA_WITH_AES_128_GCM_SHA256, 1)	succeeded (with hint) in 82 milliseconds with fuel 2 and ifuel 2
(.\TLSConstants.fst(925,4-925,39))
Query (TLSConstants.uu___is_TLS_DHE_RSA_WITH_AES_256_GCM_SHA384, 1)	succeeded (with hint) in 83 milliseconds with fuel 2 and ifuel 2
(.\TLSConstants.fst(926,4-926,38))
Query (TLSConstants.uu___is_TLS_DH_RSA_WITH_AES_128_GCM_SHA256, 1)	succeeded (with hint) in 82 milliseconds with fuel 2 and ifuel 2
(.\TLSConstants.fst(927,4-927,38))
Query (TLSConstants.uu___is_TLS_DH_RSA_WITH_AES_256_GCM_SHA384, 1)	succeeded (with hint) in 85 milliseconds with fuel 2 and ifuel 2
(.\TLSConstants.fst(928,4-928,39))
Query (TLSConstants.uu___is_TLS_DHE_DSS_WITH_AES_128_GCM_SHA256, 1)	succeeded (with hint) in 98 milliseconds with fuel 2 and ifuel 2
(.\TLSConstants.fst(929,4-929,39))
Query (TLSConstants.uu___is_TLS_DHE_DSS_WITH_AES_256_GCM_SHA384, 1)	succeeded (with hint) in 87 milliseconds with fuel 2 and ifuel 2
(.\TLSConstants.fst(930,4-930,38))
Query (TLSConstants.uu___is_TLS_DH_DSS_WITH_AES_128_GCM_SHA256, 1)	succeeded (with hint) in 85 milliseconds with fuel 2 and ifuel 2
(.\TLSConstants.fst(931,4-931,38))
Query (TLSConstants.uu___is_TLS_DH_DSS_WITH_AES_256_GCM_SHA384, 1)	succeeded (with hint) in 84 milliseconds with fuel 2 and ifuel 2
(.\TLSConstants.fst(932,4-932,39))
Query (TLSConstants.uu___is_TLS_DH_anon_WITH_AES_128_GCM_SHA256, 1)	succeeded (with hint) in 83 milliseconds with fuel 2 and ifuel 2
(.\TLSConstants.fst(933,4-933,39))
Query (TLSConstants.uu___is_TLS_DH_anon_WITH_AES_256_GCM_SHA384, 1)	succeeded (with hint) in 82 milliseconds with fuel 2 and ifuel 2
(.\TLSConstants.fst(935,4-935,47))
Query (TLSConstants.uu___is_TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256, 1)	succeeded (with hint) in 88 milliseconds with fuel 2 and ifuel 2
(.\TLSConstants.fst(936,4-936,49))
Query (TLSConstants.uu___is_TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256, 1)	succeeded (with hint) in 85 milliseconds with fuel 2 and ifuel 2
(.\TLSConstants.fst(937,4-937,45))
Query (TLSConstants.uu___is_TLS_DHE_RSA_WITH_CHACHA20_POLY1305_SHA256, 1)	succeeded (with hint) in 84 milliseconds with fuel 2 and ifuel 2
(.\TLSConstants.fst(938,4-938,41))
Query (TLSConstants.uu___is_TLS_PSK_WITH_CHACHA20_POLY1305_SHA256, 1)	succeeded (with hint) in 85 milliseconds with fuel 2 and ifuel 2
(.\TLSConstants.fst(939,4-939,47))
Query (TLSConstants.uu___is_TLS_ECDHE_PSK_WITH_CHACHA20_POLY1305_SHA256, 1)	succeeded (with hint) in 84 milliseconds with fuel 2 and ifuel 2
(.\TLSConstants.fst(940,4-940,45))
Query (TLSConstants.uu___is_TLS_DHE_PSK_WITH_CHACHA20_POLY1305_SHA256, 1)	succeeded (with hint) in 85 milliseconds with fuel 2 and ifuel 2
(C:\Build\Agent\_work\36\s\src\tls\StreamAE.fst) digest is valid; using hints db.
(.\StreamAE.fst(34,0-35,37))
Query (StreamAE.alg, 1)	succeeded (with hint) in 235 milliseconds with fuel 0 and ifuel 2
(.\StreamAE.fst(37,0-37,49))
Query (StreamAE.ltag, 1)	succeeded (with hint) in 231 milliseconds with fuel 0 and ifuel 1
(.\StreamAE.fst(38,0-38,47))
Query (StreamAE.cipherLen, 1)	succeeded (with hint) in 233 milliseconds with fuel 0 and ifuel 1
(.\StreamAE.fst(42,0-42,74))
Query (StreamAE.lenCipher, 1)	succeeded (with hint) in 236 milliseconds with fuel 0 and ifuel 1
(.\StreamAE.fst(44,0-45,63))
Query (StreamAE.entry, 1)	succeeded (with hint) in 241 milliseconds with fuel 0 and ifuel 1
(.\StreamAE.fst(45,11-45,12))
Query (StreamAE.__proj__Entry__item__l, 1)	succeeded (with hint) in 231 milliseconds with fuel 0 and ifuel 1
(.\StreamAE.fst(45,25-45,26))
Query (StreamAE.__proj__Entry__item__c, 1)	succeeded (with hint) in 237 milliseconds with fuel 0 and ifuel 1
(.\StreamAE.fst(45,41-45,42))
Query (StreamAE.__proj__Entry__item__p, 1)	succeeded (with hint) in 237 milliseconds with fuel 0 and ifuel 1
(.\StreamAE.fst(47,15-47,63))
Query (StreamAE.min, 1)	succeeded (with hint) in 234 milliseconds with fuel 0 and ifuel 1
(C:\Build\Agent\_work\36\s\src\tls\MasterSecret.fst) digest is valid; using hints db.
(.\StreamAE.fst(48,15-48,63))
Query (StreamAE.max, 1)	succeeded (with hint) in 231 milliseconds with fuel 0 and ifuel 1
(.\MasterSecret.fst(18,0-24,1))
Query (MasterSecret.writer, 1)	succeeded (with hint) in 240 milliseconds with fuel 0 and ifuel 1
(.\StreamAE.fst(51,18-51,28))
Query (StreamAE.key, 1)	succeeded (with hint) in 237 milliseconds with fuel 0 and ifuel 2
(.\TLSConstants.fst(949,26-1010,114))
Query (TLSConstants.cipherSuite_of_name, 1)	succeeded (with hint) in 5895 milliseconds with fuel 1 and ifuel 1
(.\TLSConstants.fst(1014,33-1014,72))
Query (TLSConstants.cipherSuites_of_nameList, 1)	succeeded (with hint) in 84 milliseconds with fuel 2 and ifuel 2
(.\TLSConstants.fst(1015,0-1018,43))
Query (TLSConstants.cipherSuites_of_nameList, 2)	succeeded (with hint) in 87 milliseconds with fuel 2 and ifuel 2
(.\StreamAE.fst(52,18-52,29))
Query (StreamAE.iv, 1)	succeeded (with hint) in 241 milliseconds with fuel 0 and ifuel 2
(.\StreamAE.fst(56,0-57,42))
Query (StreamAE.log_ref, 1)	succeeded (with hint) in 236 milliseconds with fuel 0 and ifuel 1
(.\MasterSecret.fst(28,0-32,17))
Query (MasterSecret.region_injective, 1)	succeeded (with hint) in 236 milliseconds with fuel 0 and ifuel 1
(.\StreamAE.fst(59,0-60,3))
Query (StreamAE.ilog, 1)	succeeded (with hint) in 232 milliseconds with fuel 0 and ifuel 1
(.\StreamAE.fst(63,14-63,50))
Query (StreamAE.max_ctr, 1)	succeeded (with hint) in 243 milliseconds with fuel 0 and ifuel 1
(.\MasterSecret.fst(31,27-31,49))
Query (MasterSecret.region_injective, 2)	succeeded (with hint) in 246 milliseconds with fuel 0 and ifuel 1
(.\StreamAE.fst(62,31-62,55))
Query (StreamAE.max_ctr, 2)	succeeded (with hint) in 238 milliseconds with fuel 0 and ifuel 1
(.\MasterSecret.fst(34,0-35,75))
Query (MasterSecret.ms_tab, 1)	succeeded (with hint) in 247 milliseconds with fuel 0 and ifuel 1
.\MasterSecret.fst(34,0-35,75): (Warning) Top-level let-bindings must be total; this term may have effects
(.\TLSConstants.fst(1021,0-1086,104))
Query (TLSConstants.name_of_cipherSuite, 1)	succeeded (with hint) in 152 milliseconds with fuel 2 and ifuel 2
(.\StreamAE.fst(62,12-64,13))
Query (StreamAE.max_ctr, 3)	succeeded (with hint) in 236 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(1093,0-1106,7))
Query (TLSConstants.names_of_cipherSuites, 1)	succeeded (with hint) in 113 milliseconds with fuel 1 and ifuel 5
(.\TLSConstants.fst(1113,0-1113,39))
Query (TLSConstants.bytes_of_seq, 1)	succeeded (with hint) in 86 milliseconds with fuel 1 and ifuel 5
(.\StreamAE.fst(75,0-78,33))
Query (StreamAE.ctr_ref, 1)	succeeded (with hint) in 235 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(1120,82-1120,109))
Query (TLSConstants.vlbytes, 1)	succeeded (with hint) in 85 milliseconds with fuel 1 and ifuel 5
(.\TLSConstants.fst(1121,0-1121,56))
Query (TLSConstants.vlbytes, 2)	succeeded (with hint) in 87 milliseconds with fuel 1 and ifuel 5
(.\MasterSecret.fst(38,0-41,21))
Query (MasterSecret.fresh_in_ms_tab, 1)	succeeded (with hint) in 237 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(1125,20-1125,57))
Query (TLSConstants.lemma_vlbytes_len, 1)	succeeded (with hint) in 84 milliseconds with fuel 1 and ifuel 5
(.\StreamAE.fst(80,0-85,3))
Query (StreamAE.ctr, 1)	succeeded (with hint) in 248 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(1124,0-1125,58))
Query (TLSConstants.lemma_vlbytes_len, 2)	succeeded (with hint) in 85 milliseconds with fuel 1 and ifuel 5
(.\TLSConstants.fst(1126,0-1126,30))
Query (TLSConstants.lemma_vlbytes_len, 3)	succeeded (with hint) in 86 milliseconds with fuel 1 and ifuel 5
(.\MasterSecret.fst(39,25-39,44))
Query (MasterSecret.fresh_in_ms_tab, 2)	succeeded (with hint) in 235 milliseconds with fuel 0 and ifuel 1
(.\StreamAE.fst(90,32-90,43))
Query (StreamAE.state, 1)	succeeded (with hint) in 230 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(1128,0-1132,29))
Query (TLSConstants.lemma_vlbytes_inj, 1)	succeeded (with hint) in 88 milliseconds with fuel 1 and ifuel 5
(.\TLSConstants.fst(1133,0-1135,31))
Query (TLSConstants.lemma_vlbytes_inj, 2)	succeeded (with hint) in 101 milliseconds with fuel 1 and ifuel 5
(.\StreamAE.fst(90,49-90,68))
Query (StreamAE.state, 2)	succeeded (with hint) in 230 milliseconds with fuel 0 and ifuel 1
(.\MasterSecret.fst(40,19-40,32))
Query (MasterSecret.fresh_in_ms_tab, 3)	succeeded (with hint) in 233 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(1139,17-1139,38))
Query (TLSConstants.vlbytes_length_lemma, 1)	succeeded (with hint) in 85 milliseconds with fuel 1 and ifuel 5
(.\TLSConstants.fst(1137,0-1139,39))
Query (TLSConstants.vlbytes_length_lemma, 2)	succeeded (with hint) in 93 milliseconds with fuel 1 and ifuel 5
(.\StreamAE.fst(93,21-93,41))
Query (StreamAE.state, 3)	succeeded (with hint) in 237 milliseconds with fuel 0 and ifuel 1
(.\MasterSecret.fst(43,8-44,102))
Query (MasterSecret.id_rgns_witnessed, 1)	succeeded (with hint) in 234 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(1140,0-1145,68))
Query (TLSConstants.vlbytes_length_lemma, 3)	succeeded (with hint) in 120 milliseconds with fuel 1 and ifuel 5
(.\TLSConstants.fst(1151,0-1155,72))
Query (TLSConstants.vlsplit, 1)	succeeded (with hint) in 83 milliseconds with fuel 0 and ifuel 1
(C:\Build\Agent\_work\36\s\src\tls\Range.fst) digest is valid; using hints db.
(.\StreamAE.fst(88,5-94,22))
Query (StreamAE.state, 4)	succeeded (with hint) in 243 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(1156,0-1161,65))
Query (TLSConstants.vlsplit, 2)	succeeded (with hint) in 136 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(1160,7-1160,40))
Query (TLSConstants.vlsplit, 3)	succeeded (with hint) in 85 milliseconds with fuel 0 and ifuel 1
(.\Range.fst(24,0-24,33))
Query (Range.point, 1)	succeeded (with hint) in 228 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(1161,7-1161,65))
Query (TLSConstants.vlsplit, 4)	succeeded (with hint) in 87 milliseconds with fuel 0 and ifuel 1
(.\StreamAE.fst(89,12-89,18))
Query (StreamAE.__proj__State__item__region, 1)	succeeded (with hint) in 239 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(1164,0-1165,94))
Query (TLSConstants.vlparse, 1)	succeeded (with hint) in 88 milliseconds with fuel 0 and ifuel 1
(C:\Build\Agent\_work\36\s\src\tls\Alert.fst) digest is valid; using hints db.
(C:\Build\Agent\_work\36\s\src\tls\DataStream.fst) digest is valid; using hints db.
(.\Range.fst(25,0-25,18))
Query (Range.zero, 1)	succeeded (with hint) in 226 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(1166,0-1170,65))
Query (TLSConstants.vlparse, 2)	succeeded (with hint) in 117 milliseconds with fuel 0 and ifuel 1
(.\StreamAE.fst(90,13-90,23))
Query (StreamAE.__proj__State__item__log_region, 1)	succeeded (with hint) in 233 milliseconds with fuel 0 and ifuel 1
(C:\Build\Agent\_work\36\s\src\tls\StreamPlain.fst) digest is valid; using hints db.
(.\TLSConstants.fst(1168,5-1168,31))
Query (TLSConstants.vlparse, 3)	succeeded (with hint) in 85 milliseconds with fuel 0 and ifuel 1
(.\MasterSecret.fst(46,8-48,90))
Query (MasterSecret.contains_id_rgns, 1)	succeeded (with hint) in 232 milliseconds with fuel 0 and ifuel 1
(.\DataStream.fst(39,86-39,105))
Query (DataStream.repr, 1)	succeeded (with hint) in 222 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(1169,7-1169,16))
Query (TLSConstants.vlparse, 4)	succeeded (with hint) in 81 milliseconds with fuel 0 and ifuel 1
(.\Range.fst(28,0-28,44))
Query (Range.sum, 1)	succeeded (with hint) in 233 milliseconds with fuel 0 and ifuel 1
(.\StreamPlain.fst(37,50-37,80))
Query (StreamPlain.plain, 1)	succeeded (with hint) in 223 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(1170,7-1170,65))
Query (TLSConstants.vlparse, 5)	succeeded (with hint) in 82 milliseconds with fuel 0 and ifuel 1
(.\StreamAE.fst(90,13-90,23))
Query (StreamAE.__proj__State__item__log_region, 2)	succeeded (with hint) in 235 milliseconds with fuel 0 and ifuel 1
(.\MasterSecret.fst(47,12-47,29))
Query (MasterSecret.contains_id_rgns, 2)	succeeded (with hint) in 243 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(1175,11-1175,61))
Query (TLSConstants.vlparse_vlbytes, 1)	succeeded (with hint) in 82 milliseconds with fuel 0 and ifuel 1
(.\DataStream.fst(40,0-40,20))
Query (DataStream.repr, 2)	succeeded (with hint) in 224 milliseconds with fuel 0 and ifuel 1
(C:\Build\Agent\_work\36\s\src\tls\Content.fst) digest is valid; using hints db.
(.\Range.fst(30,0-31,26))
Query (Range.aeAlg, 1)	succeeded (with hint) in 225 milliseconds with fuel 0 and ifuel 1
(.\Alert.fst(19,0-54,64))
Query (Alert.alertBytes, 1)	succeeded (with hint) in 321 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(1175,49-1175,60))
Query (TLSConstants.vlparse_vlbytes, 2)	succeeded (with hint) in 83 milliseconds with fuel 0 and ifuel 1
(.\StreamPlain.fst(39,0-40,68))
Query (StreamPlain.pad, 1)	succeeded (with hint) in 238 milliseconds with fuel 0 and ifuel 1
(.\StreamAE.fst(91,12-91,16))
Query (StreamAE.__proj__State__item__aead, 1)	succeeded (with hint) in 237 milliseconds with fuel 0 and ifuel 2
(.\TLSConstants.fst(1176,3-1176,45))
Query (TLSConstants.vlparse_vlbytes, 3)	succeeded (with hint) in 84 milliseconds with fuel 0 and ifuel 1
(.\MasterSecret.fst(48,42-48,90))
Query (MasterSecret.contains_id_rgns, 3)	succeeded (with hint) in 236 milliseconds with fuel 0 and ifuel 1
(.\DataStream.fst(42,93-42,112))
Query (DataStream.mk_fragment, 1)	succeeded (with hint) in 227 milliseconds with fuel 0 and ifuel 1
(.\Content.fst(21,0-25,84))
Query (Content.fragment, 1)	succeeded (with hint) in 227 milliseconds with fuel 0 and ifuel 1
(.\Range.fst(34,0-34,74))
Query (Range.ivSize, 1)	succeeded (with hint) in 227 milliseconds with fuel 0 and ifuel 1
(.\Alert.fst(59,44-59,58))
Query (Alert.parse, 1)	succeeded (with hint) in 226 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(1173,0-1176,46))
Query (TLSConstants.vlparse_vlbytes, 4)	succeeded (with hint) in 91 milliseconds with fuel 0 and ifuel 1
(.\StreamPlain.fst(52,0-52,80))
Query (StreamPlain.ghost_repr, 1)	succeeded (with hint) in 225 milliseconds with fuel 0 and ifuel 1
(.\StreamAE.fst(91,12-91,16))
Query (StreamAE.__proj__State__item__aead, 2)	succeeded (with hint) in 244 milliseconds with fuel 0 and ifuel 1
(.\Content.fst(21,0-25,84))
Query (Content.fragment, 2)	succeeded (with hint) in 220 milliseconds with fuel 0 and ifuel 1
(.\DataStream.fst(43,0-43,27))
Query (DataStream.mk_fragment, 2)	succeeded (with hint) in 222 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(1177,0-1183,46))
Query (TLSConstants.vlparse_vlbytes, 5)	succeeded (with hint) in 122 milliseconds with fuel 0 and ifuel 1
(.\MasterSecret.fst(57,2-57,20))
Query (MasterSecret.all_ms_tab_regions_exists, 1)	succeeded (with hint) in 236 milliseconds with fuel 0 and ifuel 1
(.\Range.fst(35,0-39,38))
Query (Range.ivSize, 2)	succeeded (with hint) in 238 milliseconds with fuel 0 and ifuel 1
(.\Alert.fst(58,0-59,85))
Query (Alert.parse, 2)	succeeded (with hint) in 222 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(1188,4-1188,12))
Query (TLSConstants.uu___is_RSA_sign, 1)	succeeded (with hint) in 83 milliseconds with fuel 0 and ifuel 1
(.\StreamPlain.fst(53,0-56,20))
Query (StreamPlain.ghost_repr, 2)	succeeded (with hint) in 247 milliseconds with fuel 0 and ifuel 0
(.\TLSConstants.fst(1189,4-1189,12))
Query (TLSConstants.uu___is_DSA_sign, 1)	succeeded (with hint) in 82 milliseconds with fuel 0 and ifuel 1
(.\StreamAE.fst(92,12-92,15))
Query (StreamAE.__proj__State__item__log, 1)	succeeded (with hint) in 231 milliseconds with fuel 0 and ifuel 1
(.\DataStream.fst(49,0-49,26))
Query (DataStream.appFragment, 1)	succeeded (with hint) in 219 milliseconds with fuel 0 and ifuel 1
(.\MasterSecret.fst(58,11-58,27))
Query (MasterSecret.all_ms_tab_regions_exists, 2)	succeeded (with hint) in 236 milliseconds with fuel 0 and ifuel 1
(.\Content.fst(21,0-25,84))
Query (Content.fragment, 3)	succeeded (with hint) in 224 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(1190,4-1190,16))
Query (TLSConstants.uu___is_RSA_fixed_dh, 1)	succeeded (with hint) in 85 milliseconds with fuel 0 and ifuel 1
(.\Range.fst(43,0-49,26))
Query (Range.fixedPadSize, 1)	succeeded (with hint) in 228 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(1191,4-1191,16))
Query (TLSConstants.uu___is_DSA_fixed_dh, 1)	succeeded (with hint) in 83 milliseconds with fuel 0 and ifuel 1
(.\StreamPlain.fst(59,85-59,109))
Query (StreamPlain.repr, 1)	succeeded (with hint) in 236 milliseconds with fuel 0 and ifuel 1
(.\StreamAE.fst(92,12-92,15))
Query (StreamAE.__proj__State__item__log, 2)	succeeded (with hint) in 234 milliseconds with fuel 0 and ifuel 1
(.\DataStream.fst(50,0-50,26))
Query (DataStream.appBytes, 1)	succeeded (with hint) in 229 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(1194,0-1194,45))
Query (TLSConstants.certTypeBytes, 1)	succeeded (with hint) in 88 milliseconds with fuel 0 and ifuel 1
(.\Content.fst(21,0-25,84))
Query (Content.fragment, 4)	succeeded (with hint) in 230 milliseconds with fuel 0 and ifuel 1
(.\MasterSecret.fst(60,2-60,23))
Query (MasterSecret.all_ms_tab_regions_exists, 3)	succeeded (with hint) in 250 milliseconds with fuel 0 and ifuel 1
(.\Range.fst(55,0-63,40))
Query (Range.maxPadSize, 1)	succeeded (with hint) in 247 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(1195,0-1200,28))
Query (TLSConstants.certTypeBytes, 2)	succeeded (with hint) in 101 milliseconds with fuel 0 and ifuel 1
(.\StreamPlain.fst(59,0-59,111))
Query (StreamPlain.repr, 2)	succeeded (with hint) in 239 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(1203,19-1203,43))
Query (TLSConstants.parseCertType, 1)	succeeded (with hint) in 85 milliseconds with fuel 0 and ifuel 1
(.\DataStream.fst(66,0-69,29))
Query (DataStream.delta, 1)	succeeded (with hint) in 225 milliseconds with fuel 0 and ifuel 1
(.\Content.fst(21,0-25,84))
Query (Content.fragment, 5)	succeeded (with hint) in 227 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(1204,0-1210,67))
Query (TLSConstants.parseCertType, 2)	succeeded (with hint) in 90 milliseconds with fuel 0 and ifuel 1
(.\StreamAE.fst(93,12-93,19))
Query (StreamAE.__proj__State__item__counter, 1)	succeeded (with hint) in 251 milliseconds with fuel 0 and ifuel 2
(C:\Build\Agent\_work\36\s\src\tls\StatefulPlain.fst) digest is valid; using hints db.
(.\Range.fst(67,0-76,13))
Query (Range.minimalPadding, 1)	succeeded (with hint) in 249 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(1216,11-1216,58))
Query (TLSConstants.inverse_certType, 1)	succeeded (with hint) in 83 milliseconds with fuel 0 and ifuel 1
(.\DataStream.fst(67,4-67,8))
Query (DataStream.uu___is_Data, 1)	succeeded (with hint) in 225 milliseconds with fuel 0 and ifuel 1
(.\StreamPlain.fst(60,0-63,20))
Query (StreamPlain.repr, 3)	succeeded (with hint) in 269 milliseconds with fuel 0 and ifuel 0
(.\Content.fst(21,0-25,84))
Query (Content.fragment, 6)	succeeded (with hint) in 230 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(1218,0-1218,27))
Query (TLSConstants.inverse_certType, 2)	succeeded (with hint) in 102 milliseconds with fuel 0 and ifuel 1
(.\StreamAE.fst(93,12-93,19))
Query (StreamAE.__proj__State__item__counter, 2)	succeeded (with hint) in 238 milliseconds with fuel 0 and ifuel 1
(.\StatefulPlain.fst(23,0-23,64))
Query (StatefulPlain.makeAD, 1)	succeeded (with hint) in 236 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(1220,25-1220,26))
Query (TLSConstants.pinverse_certType, 1)	succeeded (with hint) in 90 milliseconds with fuel 0 and ifuel 1
(.\Range.fst(82,0-82,49))
Query (Range.minimalPadding_at_least_fixedPadSize, 1)	succeeded (with hint) in 230 milliseconds with fuel 0 and ifuel 2
(.\DataStream.fst(67,4-67,8))
Query (DataStream.__proj__Data__item___0, 1)	succeeded (with hint) in 222 milliseconds with fuel 0 and ifuel 1
(.\StreamPlain.fst(65,15-65,68))
Query (StreamPlain.min, 1)	succeeded (with hint) in 228 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(1222,11-1222,71))
Query (TLSConstants.pinverse_certType, 2)	succeeded (with hint) in 84 milliseconds with fuel 0 and ifuel 1
(.\Content.fst(22,4-22,12))
Query (Content.uu___is_CT_Alert, 1)	succeeded (with hint) in 232 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(1223,3-1223,57))
Query (TLSConstants.pinverse_certType, 3)	succeeded (with hint) in 87 milliseconds with fuel 0 and ifuel 1
(.\StatefulPlain.fst(24,0-25,45))
Query (StatefulPlain.makeAD, 2)	succeeded (with hint) in 237 milliseconds with fuel 0 and ifuel 1
(.\StreamAE.fst(106,0-118,32))
Query (StreamAE.genPost, 1)	succeeded (with hint) in 236 milliseconds with fuel 0 and ifuel 1
(.\DataStream.fst(68,4-68,9))
Query (DataStream.uu___is_Close, 1)	succeeded (with hint) in 227 milliseconds with fuel 0 and ifuel 1
(.\Range.fst(86,0-86,48))
Query (Range.minMaxPad, 1)	succeeded (with hint) in 258 milliseconds with fuel 0 and ifuel 2
(.\TLSConstants.fst(1224,0-1224,28))
Query (TLSConstants.pinverse_certType, 4)	succeeded (with hint) in 109 milliseconds with fuel 0 and ifuel 1
(.\StreamPlain.fst(79,73-79,92))
Query (StreamPlain.scan, 1)	succeeded (with hint) in 228 milliseconds with fuel 0 and ifuel 1
(.\Content.fst(22,18-22,20))
Query (Content.__proj__CT_Alert__item__rg, 1)	succeeded (with hint) in 241 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(1231,0-1236,36))
Query (TLSConstants.certificateTypeListBytes, 1)	succeeded (with hint) in 95 milliseconds with fuel 1 and ifuel 1
(.\StatefulPlain.fst(32,0-32,52))
Query (StatefulPlain.lemma_12, 1)	succeeded (with hint) in 231 milliseconds with fuel 0 and ifuel 1
(.\StreamAE.fst(107,11-107,20))
Query (StreamAE.genPost, 2)	succeeded (with hint) in 516 milliseconds with fuel 0 and ifuel 1
(.\Alert.fst(60,0-96,80))
Query (Alert.parse, 3)	succeeded (with hint) in 1620 milliseconds with fuel 0 and ifuel 1
(.\DataStream.fst(69,4-69,9))
Query (DataStream.uu___is_Alert, 1)	succeeded (with hint) in 789 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(1240,0-1249,15))
Query (TLSConstants.parseCertificateTypeList, 1)	succeeded (with hint) in 542 milliseconds with fuel 1 and ifuel 1
(.\Content.fst(22,18-22,20))
Query (Content.__proj__CT_Alert__item__rg, 2)	succeeded (with hint) in 792 milliseconds with fuel 0 and ifuel 1
Hint-info (.\Alert.fst(19,0-54,64)): Replay succeeded in 321 milliseconds
Hint-info (.\Alert.fst(59,44-59,58)): Replay succeeded in 226 milliseconds
Hint-info (.\Alert.fst(58,0-59,85)): Replay succeeded in 222 milliseconds
Hint-info (.\Alert.fst(60,0-96,80)): Replay succeeded in 1620 milliseconds
Verified module: Alert (4328 milliseconds)
All verification conditions discharged successfully
(.\StreamPlain.fst(77,0-82,61))
Query (StreamPlain.scan, 2)	succeeded (with hint) in 801 milliseconds with fuel 0 and ifuel 1
(.\Range.fst(95,1-117,8))
Query (Range.valid_clen, 1)	succeeded (with hint) in 819 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(1241,5-1241,20))
Query (TLSConstants.parseCertificateTypeList, 2)	succeeded (with hint) in 88 milliseconds with fuel 1 and ifuel 1
(.\DataStream.fst(69,4-69,9))
Query (DataStream.__proj__Alert__item___0, 1)	succeeded (with hint) in 231 milliseconds with fuel 0 and ifuel 1
(.\StreamAE.fst(108,2-108,29))
Query (StreamAE.genPost, 3)	succeeded (with hint) in 234 milliseconds with fuel 0 and ifuel 1
(.\Content.fst(22,18-22,20))
Query (Content.__proj__CT_Alert__item___1, 1)	succeeded (with hint) in 226 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(1257,0-1268,78))
Query (TLSConstants.defaultCertTypes, 1)	succeeded (with hint) in 134 milliseconds with fuel 2 and ifuel 4
(.\Range.fst(119,0-121,8))
Query (Range.min0, 1)	succeeded (with hint) in 230 milliseconds with fuel 0 and ifuel 1
(.\StatefulPlain.fst(35,0-42,6))
Query (StatefulPlain.parseAD, 1)	succeeded (with hint) in 332 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(1279,0-1285,40))
Query (TLSConstants.distinguishedNameListBytes, 1)	succeeded (with hint) in 104 milliseconds with fuel 1 and ifuel 2
(.\DataStream.fst(72,0-76,24))
Query (DataStream.final, 1)	succeeded (with hint) in 230 milliseconds with fuel 0 and ifuel 1
(.\StreamAE.fst(110,2-110,31))
Query (StreamAE.genPost, 4)	succeeded (with hint) in 240 milliseconds with fuel 0 and ifuel 1
(.\Content.fst(23,4-23,16))
Query (Content.uu___is_CT_Handshake, 1)	succeeded (with hint) in 223 milliseconds with fuel 0 and ifuel 1
(.\Range.fst(123,0-125,8))
Query (Range.minP, 1)	succeeded (with hint) in 230 milliseconds with fuel 0 and ifuel 1
(.\StatefulPlain.fst(41,11-41,21))
Query (StatefulPlain.parseAD, 2)	succeeded (with hint) in 236 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(1289,0-1307,11))
Query (TLSConstants.parseDistinguishedNameList, 1)	succeeded (with hint) in 140 milliseconds with fuel 1 and ifuel 2
(.\DataStream.fst(81,0-84,28))
Query (DataStream.wellformed, 1)	succeeded (with hint) in 232 milliseconds with fuel 0 and ifuel 1
(.\Content.fst(23,18-23,20))
Query (Content.__proj__CT_Handshake__item__rg, 1)	succeeded (with hint) in 224 milliseconds with fuel 0 and ifuel 1
(.\StreamAE.fst(111,10-111,30))
Query (StreamAE.genPost, 5)	succeeded (with hint) in 240 milliseconds with fuel 0 and ifuel 2
(.\TLSConstants.fst(1290,5-1290,20))
Query (TLSConstants.parseDistinguishedNameList, 2)	succeeded (with hint) in 85 milliseconds with fuel 1 and ifuel 2
(.\Range.fst(143,73-143,87))
Query (Range.cipherRangeClass, 1)	succeeded (with hint) in 220 milliseconds with fuel 1 and ifuel 1
(.\StatefulPlain.fst(47,11-47,41))
Query (StatefulPlain.lemma_makeAD_parseAD, 1)	succeeded (with hint) in 228 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(1311,2-1311,61))
Query (TLSConstants.contains_TLS_EMPTY_RENEGOTIATION_INFO_SCSV, 1)	succeeded (with hint) in 86 milliseconds with fuel 1 and ifuel 2
(.\DataStream.fst(91,0-91,31))
Query (DataStream.empty_is_well_formed, 1)	succeeded (with hint) in 227 milliseconds with fuel 2 and ifuel 2
(.\TLSConstants.fst(1323,4-1323,13))
Query (TLSConstants.uu___is_FFDHE2048, 1)	succeeded (with hint) in 87 milliseconds with fuel 1 and ifuel 2
(.\Content.fst(23,33-23,34))
Query (Content.__proj__CT_Handshake__item__f, 1)	succeeded (with hint) in 225 milliseconds with fuel 0 and ifuel 1
(.\StreamAE.fst(112,24-112,44))
Query (StreamAE.genPost, 6)	succeeded (with hint) in 245 milliseconds with fuel 0 and ifuel 2
(.\TLSConstants.fst(1324,4-1324,13))
Query (TLSConstants.uu___is_FFDHE3072, 1)	succeeded (with hint) in 86 milliseconds with fuel 1 and ifuel 2
(.\StatefulPlain.fst(48,3-48,23))
Query (StatefulPlain.lemma_makeAD_parseAD, 2)	succeeded (with hint) in 229 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(1325,4-1325,13))
Query (TLSConstants.uu___is_FFDHE4096, 1)	succeeded (with hint) in 83 milliseconds with fuel 1 and ifuel 2
(.\Range.fst(130,0-143,88))
Query (Range.cipherRangeClass, 2)	succeeded (with hint) in 268 milliseconds with fuel 1 and ifuel 1
(.\DataStream.fst(105,12-105,18))
Query (DataStream.__proj__State__item__region, 1)	succeeded (with hint) in 220 milliseconds with fuel 0 and ifuel 1
(.\Content.fst(23,33-23,34))
Query (Content.__proj__CT_Handshake__item__f, 2)	succeeded (with hint) in 243 milliseconds with fuel 0 and ifuel 1
(.\StreamAE.fst(113,2-113,43))
Query (StreamAE.genPost, 7)	succeeded (with hint) in 234 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(1326,4-1326,13))
Query (TLSConstants.uu___is_FFDHE6144, 1)	succeeded (with hint) in 86 milliseconds with fuel 1 and ifuel 2
(.\StatefulPlain.fst(45,0-48,24))
Query (StatefulPlain.lemma_makeAD_parseAD, 3)	succeeded (with hint) in 228 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(1327,4-1327,13))
Query (TLSConstants.uu___is_FFDHE8192, 1)	succeeded (with hint) in 92 milliseconds with fuel 1 and ifuel 2
(.\DataStream.fst(106,11-106,14))
Query (DataStream.__proj__State__item__log, 1)	succeeded (with hint) in 242 milliseconds with fuel 0 and ifuel 1
(.\Content.fst(24,4-24,10))
Query (Content.uu___is_CT_CCS, 1)	succeeded (with hint) in 257 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(1337,33-1337,42))
Query (TLSConstants.namedGroup, 1)	succeeded (with hint) in 91 milliseconds with fuel 1 and ifuel 2
(.\Range.fst(145,0-163,18))
Query (Range.cipherRangeClass, 3)	succeeded (with hint) in 308 milliseconds with fuel 1 and ifuel 1
(.\StreamAE.fst(113,8-113,28))
Query (StreamAE.genPost, 8)	succeeded (with hint) in 248 milliseconds with fuel 0 and ifuel 2
(.\TLSConstants.fst(1337,46-1337,55))
Query (TLSConstants.namedGroup, 2)	succeeded (with hint) in 90 milliseconds with fuel 1 and ifuel 2
(.\StatefulPlain.fst(49,0-49,34))
Query (StatefulPlain.lemma_makeAD_parseAD, 4)	succeeded (with hint) in 281 milliseconds with fuel 0 and ifuel 0
(.\DataStream.fst(107,11-107,14))
Query (DataStream.__proj__State__item__ctr, 1)	succeeded (with hint) in 242 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(1337,59-1337,68))
Query (TLSConstants.namedGroup, 3)	succeeded (with hint) in 93 milliseconds with fuel 1 and ifuel 2
(.\Content.fst(24,18-24,20))
Query (Content.__proj__CT_CCS__item__rg, 1)	succeeded (with hint) in 243 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(1337,72-1337,80))
Query (TLSConstants.namedGroup, 4)	succeeded (with hint) in 92 milliseconds with fuel 1 and ifuel 2
(.\Range.fst(165,0-167,104))
Query (Range.cipherRangeClass_width, 1)	succeeded (with hint) in 243 milliseconds with fuel 0 and ifuel 1
(.\StreamAE.fst(115,7-115,33))
Query (StreamAE.genPost, 9)	succeeded (with hint) in 250 milliseconds with fuel 0 and ifuel 1
(.\StatefulPlain.fst(54,2-54,32))
Query (StatefulPlain.is_plain, 1)	succeeded (with hint) in 248 milliseconds with fuel 0 and ifuel 0
(.\TLSConstants.fst(1335,30-1335,40))
Query (TLSConstants.namedGroup, 5)	succeeded (with hint) in 93 milliseconds with fuel 1 and ifuel 2
(C:\Build\Agent\_work\36\s\src\tls\LHAEPlain.fst) digest is valid; using hints db.
(.\Content.fst(24,18-24,20))
Query (Content.__proj__CT_CCS__item__rg, 2)	succeeded (with hint) in 252 milliseconds with fuel 0 and ifuel 1
(.\DataStream.fst(114,0-122,10))
Query (DataStream.gen, 1)	succeeded (with hint) in 274 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(1335,44-1335,54))
Query (TLSConstants.namedGroup, 6)	succeeded (with hint) in 92 milliseconds with fuel 1 and ifuel 2
(.\Range.fst(169,0-169,38))
Query (Range.cipherRangeClass_width, 2)	succeeded (with hint) in 256 milliseconds with fuel 1 and ifuel 2
(.\TLSConstants.fst(1335,58-1335,68))
Query (TLSConstants.namedGroup, 7)	succeeded (with hint) in 90 milliseconds with fuel 1 and ifuel 2
(.\StreamAE.fst(115,18-115,30))
Query (StreamAE.genPost, 10)	succeeded (with hint) in 248 milliseconds with fuel 0 and ifuel 1
(.\StatefulPlain.fst(66,0-66,33))
Query (StatefulPlain.assert_is_plain, 1)	succeeded (with hint) in 243 milliseconds with fuel 0 and ifuel 1
(.\LHAEPlain.fst(25,0-25,30))
Query (LHAEPlain.parseAD, 1)	succeeded (with hint) in 259 milliseconds with fuel 0 and ifuel 1
(.\Content.fst(25,4-25,11))
Query (Content.uu___is_CT_Data, 1)	succeeded (with hint) in 225 milliseconds with fuel 0 and ifuel 1
(.\DataStream.fst(129,0-130,27))
Query (DataStream.min, 1)	succeeded (with hint) in 225 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(1333,0-1338,29))
Query (TLSConstants.namedGroup, 8)	succeeded (with hint) in 84 milliseconds with fuel 1 and ifuel 2
Hint-info (.\DataStream.fst(39,86-39,105)): Replay succeeded in 222 milliseconds
Hint-info (.\DataStream.fst(40,0-40,20)): Replay succeeded in 224 milliseconds
Hint-info (.\DataStream.fst(42,93-42,112)): Replay succeeded in 227 milliseconds
Hint-info (.\DataStream.fst(43,0-43,27)): Replay succeeded in 222 milliseconds
Hint-info (.\DataStream.fst(49,0-49,26)): Replay succeeded in 219 milliseconds
Hint-info (.\DataStream.fst(50,0-50,26)): Replay succeeded in 229 milliseconds
Hint-info (.\DataStream.fst(66,0-69,29)): Replay succeeded in 225 milliseconds
Hint-info (.\DataStream.fst(67,4-67,8)): Replay succeeded in 225 milliseconds
Hint-info (.\DataStream.fst(67,4-67,8)): Replay succeeded in 222 milliseconds
Hint-info (.\DataStream.fst(68,4-68,9)): Replay succeeded in 227 milliseconds
Hint-info (.\DataStream.fst(69,4-69,9)): Replay succeeded in 789 milliseconds
Hint-info (.\DataStream.fst(69,4-69,9)): Replay succeeded in 231 milliseconds
Hint-info (.\DataStream.fst(72,0-76,24)): Replay succeeded in 230 milliseconds
Hint-info (.\DataStream.fst(81,0-84,28)): Replay succeeded in 232 milliseconds
Hint-info (.\DataStream.fst(91,0-91,31)): Replay succeeded in 227 milliseconds
Hint-info (.\DataStream.fst(105,12-105,18)): Replay succeeded in 220 milliseconds
Hint-info (.\DataStream.fst(106,11-106,14)): Replay succeeded in 242 milliseconds
Hint-info (.\DataStream.fst(107,11-107,14)): Replay succeeded in 242 milliseconds
Hint-info (.\DataStream.fst(114,0-122,10)): Replay succeeded in 274 milliseconds
Hint-info (.\DataStream.fst(129,0-130,27)): Replay succeeded in 225 milliseconds
Verified module: DataStream (7398 milliseconds)
All verification conditions discharged successfully
(.\TLSConstants.fst(1333,0-1338,29))
Query (TLSConstants.namedGroup, 9)	succeeded (with hint) in 88 milliseconds with fuel 1 and ifuel 2
(.\Range.fst(180,18-180,31))
Query (Range.targetLength, 1)	succeeded (with hint) in 232 milliseconds with fuel 0 and ifuel 0
(.\StatefulPlain.fst(69,0-70,37))
Query (StatefulPlain.ghost_repr, 1)	succeeded (with hint) in 228 milliseconds with fuel 0 and ifuel 1
(.\StreamAE.fst(116,7-116,28))
Query (StreamAE.genPost, 11)	succeeded (with hint) in 233 milliseconds with fuel 0 and ifuel 1
(.\LHAEPlain.fst(27,20-28,55))
Query (LHAEPlain.adata, 1)	succeeded (with hint) in 235 milliseconds with fuel 0 and ifuel 1
(.\Content.fst(25,18-25,20))
Query (Content.__proj__CT_Data__item__rg, 1)	succeeded (with hint) in 226 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(1333,0-1338,29))
Query (TLSConstants.namedGroup, 10)	succeeded (with hint) in 92 milliseconds with fuel 1 and ifuel 2
(.\TLSConstants.fst(1333,0-1338,29))
Query (TLSConstants.namedGroup, 11)	succeeded (with hint) in 87 milliseconds with fuel 1 and ifuel 2
(.\StatefulPlain.fst(72,95-72,122))
Query (StatefulPlain.repr, 1)	succeeded (with hint) in 231 milliseconds with fuel 0 and ifuel 1
(.\StreamAE.fst(116,16-116,28))
Query (StreamAE.genPost, 12)	succeeded (with hint) in 229 milliseconds with fuel 0 and ifuel 1
(.\LHAEPlain.fst(28,4-28,54))
Query (LHAEPlain.adata, 2)	succeeded (with hint) in 225 milliseconds with fuel 0 and ifuel 1
(.\Content.fst(25,33-25,34))
Query (Content.__proj__CT_Data__item__f, 1)	succeeded (with hint) in 219 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(1334,4-1334,7))
Query (TLSConstants.uu___is_SEC, 1)	succeeded (with hint) in 86 milliseconds with fuel 1 and ifuel 2
(.\Range.fst(174,0-183,39))
Query (Range.targetLength, 2)	succeeded (with hint) in 241 milliseconds with fuel 1 and ifuel 2
(.\StreamPlain.fst(84,0-147,57))
Query (StreamPlain.scan, 3)	succeeded (with hint) in 2252 milliseconds with fuel 0 and ifuel 0
(.\TLSConstants.fst(1334,4-1334,7))
Query (TLSConstants.__proj__SEC__item___0, 1)	succeeded (with hint) in 87 milliseconds with fuel 1 and ifuel 2
(.\StatefulPlain.fst(73,0-73,37))
Query (StatefulPlain.repr, 2)	succeeded (with hint) in 232 milliseconds with fuel 0 and ifuel 0
(.\TLSConstants.fst(1335,4-1335,18))
Query (TLSConstants.uu___is_EC_UNSUPPORTED, 1)	succeeded (with hint) in 87 milliseconds with fuel 1 and ifuel 2
(.\Content.fst(25,33-25,34))
Query (Content.__proj__CT_Data__item__f, 2)	succeeded (with hint) in 227 milliseconds with fuel 0 and ifuel 1
(.\MasterSecret.fst(62,0-96,7))
Query (MasterSecret.derive, 1)	succeeded (with hint) in 297 milliseconds with fuel 0 and ifuel 1
(.\LHAEPlain.fst(30,0-33,3))
Query (LHAEPlain.makeAD, 1)	succeeded (with hint) in 247 milliseconds with fuel 0 and ifuel 1
(.\StreamAE.fst(117,2-117,31))
Query (StreamAE.genPost, 13)	succeeded (with hint) in 240 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(1335,4-1335,18))
Query (TLSConstants.__proj__EC_UNSUPPORTED__item___0, 1)	succeeded (with hint) in 86 milliseconds with fuel 1 and ifuel 2
(.\StreamPlain.fst(90,9-90,55))
Query (StreamPlain.scan, 4)	succeeded (with hint) in 235 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(1335,4-1335,18))
Query (TLSConstants.__proj__EC_UNSUPPORTED__item___0, 2)	succeeded (with hint) in 91 milliseconds with fuel 1 and ifuel 2
(.\StatefulPlain.fst(76,2-78,50))
Query (StatefulPlain.wf_ad_rg, 1)	succeeded (with hint) in 224 milliseconds with fuel 0 and ifuel 1
(.\Content.fst(32,0-34,38))
Query (Content.split, 1)	succeeded (with hint) in 223 milliseconds with fuel 0 and ifuel 1
(.\MasterSecret.fst(69,26-69,44))
Query (MasterSecret.derive, 2)	succeeded (with hint) in 232 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(1336,4-1336,9))
Query (TLSConstants.uu___is_FFDHE, 1)	succeeded (with hint) in 87 milliseconds with fuel 1 and ifuel 2
(.\LHAEPlain.fst(36,0-38,20))
Query (LHAEPlain.seqN, 1)	succeeded (with hint) in 233 milliseconds with fuel 0 and ifuel 1
(.\StreamAE.fst(117,2-117,31))
Query (StreamAE.genPost, 14)	succeeded (with hint) in 238 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(1336,4-1336,9))
Query (TLSConstants.__proj__FFDHE__item___0, 1)	succeeded (with hint) in 88 milliseconds with fuel 1 and ifuel 2
(.\StatefulPlain.fst(77,6-77,39))
Query (StatefulPlain.wf_ad_rg, 2)	succeeded (with hint) in 230 milliseconds with fuel 0 and ifuel 1
(.\Range.fst(186,0-226,8))
Query (Range.targetLength, 3)	succeeded (with hint) in 442 milliseconds with fuel 1 and ifuel 4
(.\StreamPlain.fst(94,11-94,69))
Query (StreamPlain.scan, 5)	succeeded (with hint) in 241 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(1337,4-1337,21))
Query (TLSConstants.uu___is_FFDHE_PRIVATE_USE, 1)	succeeded (with hint) in 87 milliseconds with fuel 1 and ifuel 2
(.\MasterSecret.fst(73,7-73,29))
Query (MasterSecret.derive, 3)	succeeded (with hint) in 233 milliseconds with fuel 0 and ifuel 1
(.\LHAEPlain.fst(42,28-42,56))
Query (LHAEPlain.lemma_makeAD_seqN, 1)	succeeded (with hint) in 226 milliseconds with fuel 0 and ifuel 1
(.\StreamAE.fst(117,2-117,31))
Query (StreamAE.genPost, 15)	succeeded (with hint) in 231 milliseconds with fuel 0 and ifuel 1
(C:\Build\Agent\_work\36\s\src\tls\AEAD_GCM.fst) digest is valid; using hints db.
(.\Content.fst(46,0-56,13))
Query (Content.project, 1)	succeeded (with hint) in 251 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(1337,4-1337,21))
Query (TLSConstants.__proj__FFDHE_PRIVATE_USE__item___0, 1)	succeeded (with hint) in 87 milliseconds with fuel 1 and ifuel 2
(.\StatefulPlain.fst(78,6-78,26))
Query (StatefulPlain.wf_ad_rg, 3)	succeeded (with hint) in 222 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(1337,4-1337,21))
Query (TLSConstants.__proj__FFDHE_PRIVATE_USE__item___0, 2)	succeeded (with hint) in 88 milliseconds with fuel 1 and ifuel 2
(.\Range.fst(220,7-220,15))
Query (Range.targetLength, 4)	succeeded (with hint) in 225 milliseconds with fuel 1 and ifuel 1
(.\StreamPlain.fst(98,9-98,27))
Query (StreamPlain.scan, 6)	succeeded (with hint) in 229 milliseconds with fuel 0 and ifuel 1
(.\LHAEPlain.fst(40,0-43,43))
Query (LHAEPlain.lemma_makeAD_seqN, 2)	succeeded (with hint) in 230 milliseconds with fuel 0 and ifuel 1
(.\MasterSecret.fst(75,16-75,49))
Query (MasterSecret.derive, 4)	succeeded (with hint) in 227 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(1338,4-1338,21))
Query (TLSConstants.uu___is_ECDHE_PRIVATE_USE, 1)	succeeded (with hint) in 87 milliseconds with fuel 1 and ifuel 2
(.\Content.fst(47,5-47,22))
Query (Content.project, 2)	succeeded (with hint) in 220 milliseconds with fuel 0 and ifuel 1
(.\StreamAE.fst(117,13-117,28))
Query (StreamAE.genPost, 16)	succeeded (with hint) in 231 milliseconds with fuel 0 and ifuel 1
(.\AEAD_GCM.fst(25,0-25,50))
Query (AEAD_GCM.id, 1)	succeeded (with hint) in 230 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(1338,4-1338,21))
Query (TLSConstants.__proj__ECDHE_PRIVATE_USE__item___0, 1)	succeeded (with hint) in 87 milliseconds with fuel 1 and ifuel 2
(.\StatefulPlain.fst(81,2-82,72))
Query (StatefulPlain.wf_payload_ad_rg, 1)	succeeded (with hint) in 230 milliseconds with fuel 0 and ifuel 1
(.\Range.fst(222,7-222,35))
Query (Range.targetLength, 5)	succeeded (with hint) in 216 milliseconds with fuel 1 and ifuel 1
(.\TLSConstants.fst(1341,0-1341,49))
Query (TLSConstants.namedGroupBytes, 1)	succeeded (with hint) in 87 milliseconds with fuel 1 and ifuel 2
(.\MasterSecret.fst(78,20-78,44))
Query (MasterSecret.derive, 5)	succeeded (with hint) in 231 milliseconds with fuel 0 and ifuel 1
(.\Content.fst(61,0-62,68))
Query (Content.project_ignores_Handshake, 1)	succeeded (with hint) in 219 milliseconds with fuel 0 and ifuel 1
(.\StreamPlain.fst(102,8-102,17))
Query (StreamPlain.scan, 7)	succeeded (with hint) in 230 milliseconds with fuel 0 and ifuel 1
(.\AEAD_GCM.fst(26,0-26,52))
Query (AEAD_GCM.alg, 1)	succeeded (with hint) in 229 milliseconds with fuel 0 and ifuel 1
(.\StreamAE.fst(117,13-117,28))
Query (StreamAE.genPost, 17)	succeeded (with hint) in 237 milliseconds with fuel 0 and ifuel 1
(.\LHAEPlain.fst(45,0-47,55))
Query (LHAEPlain.lemma_makeAD_seqN, 3)	succeeded (with hint) in 254 milliseconds with fuel 0 and ifuel 1
(.\StatefulPlain.fst(81,3-81,36))
Query (StatefulPlain.wf_payload_ad_rg, 2)	succeeded (with hint) in 224 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(1342,0-1362,44))
Query (TLSConstants.namedGroupBytes, 2)	succeeded (with hint) in 135 milliseconds with fuel 1 and ifuel 2
(.\Range.fst(277,21-277,34))
Query (Range.targetLength_at_most_max_TLSCiphertext_fragment_length, 1)	succeeded (with hint) in 225 milliseconds with fuel 0 and ifuel 2
(.\MasterSecret.fst(79,21-79,39))
Query (MasterSecret.derive, 6)	succeeded (with hint) in 227 milliseconds with fuel 0 and ifuel 1
(.\Content.fst(63,0-63,38))
Query (Content.project_ignores_Handshake, 2)	succeeded (with hint) in 233 milliseconds with fuel 2 and ifuel 2
(.\TLSConstants.fst(1365,21-1365,47))
Query (TLSConstants.parseNamedGroup, 1)	succeeded (with hint) in 86 milliseconds with fuel 1 and ifuel 2
(.\AEAD_GCM.fst(30,18-30,28))
Query (AEAD_GCM.key, 1)	succeeded (with hint) in 230 milliseconds with fuel 0 and ifuel 1
(.\LHAEPlain.fst(51,28-51,58))
Query (LHAEPlain.lemma_makeAD_parseAD, 1)	succeeded (with hint) in 221 milliseconds with fuel 0 and ifuel 1
(.\StreamPlain.fst(105,1-105,63))
Query (StreamPlain.scan, 8)	succeeded (with hint) in 257 milliseconds with fuel 0 and ifuel 1
(.\StatefulPlain.fst(81,41-81,53))
Query (StatefulPlain.wf_payload_ad_rg, 3)	succeeded (with hint) in 226 milliseconds with fuel 0 and ifuel 1
(.\StreamAE.fst(118,2-118,32))
Query (StreamAE.genPost, 18)	succeeded (with hint) in 239 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(1366,0-1382,85))
Query (TLSConstants.parseNamedGroup, 2)	succeeded (with hint) in 108 milliseconds with fuel 1 and ifuel 2
(.\Content.fst(69,4-69,22))
Query (Content.uu___is_Change_cipher_spec, 1)	succeeded (with hint) in 225 milliseconds with fuel 0 and ifuel 1
(.\MasterSecret.fst(80,20-80,38))
Query (MasterSecret.derive, 7)	succeeded (with hint) in 226 milliseconds with fuel 0 and ifuel 1
(.\AEAD_GCM.fst(31,18-31,29))
Query (AEAD_GCM.iv, 1)	succeeded (with hint) in 226 milliseconds with fuel 0 and ifuel 1
(.\Range.fst(271,0-278,67))
Query (Range.targetLength_at_most_max_TLSCiphertext_fragment_length, 2)	succeeded (with hint) in 255 milliseconds with fuel 0 and ifuel 2
(.\TLSConstants.fst(1378,7-1378,16))
Query (TLSConstants.parseNamedGroup, 3)	succeeded (with hint) in 86 milliseconds with fuel 1 and ifuel 2
(.\StatefulPlain.fst(82,6-82,26))
Query (StatefulPlain.wf_payload_ad_rg, 4)	succeeded (with hint) in 223 milliseconds with fuel 0 and ifuel 1
(.\LHAEPlain.fst(49,0-52,43))
Query (LHAEPlain.lemma_makeAD_parseAD, 2)	succeeded (with hint) in 231 milliseconds with fuel 0 and ifuel 1
(.\StreamAE.fst(118,2-118,26))
Query (StreamAE.genPost, 19)	succeeded (with hint) in 235 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(1378,20-1378,29))
Query (TLSConstants.parseNamedGroup, 4)	succeeded (with hint) in 86 milliseconds with fuel 1 and ifuel 2
(.\StreamPlain.fst(106,11-106,73))
Query (StreamPlain.scan, 9)	succeeded (with hint) in 238 milliseconds with fuel 0 and ifuel 1
(.\Content.fst(70,4-70,9))
Query (Content.uu___is_Alert, 1)	succeeded (with hint) in 223 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(1378,33-1378,42))
Query (TLSConstants.parseNamedGroup, 5)	succeeded (with hint) in 86 milliseconds with fuel 1 and ifuel 2
(.\AEAD_GCM.fst(33,12-35,13))
Query (AEAD_GCM.max_ctr, 1)	succeeded (with hint) in 233 milliseconds with fuel 0 and ifuel 1
(.\MasterSecret.fst(83,17-83,34))
Query (MasterSecret.derive, 8)	succeeded (with hint) in 229 milliseconds with fuel 0 and ifuel 1
(.\StatefulPlain.fst(82,31-82,43))
Query (StatefulPlain.wf_payload_ad_rg, 5)	succeeded (with hint) in 225 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(1378,46-1378,55))
Query (TLSConstants.parseNamedGroup, 6)	succeeded (with hint) in 89 milliseconds with fuel 1 and ifuel 2
(.\Range.fst(283,0-283,67))
Query (Range.targetLength_at_most_max_TLSCiphertext_fragment_length, 3)	succeeded (with hint) in 322 milliseconds with fuel 0 and ifuel 2
(.\LHAEPlain.fst(53,0-53,78))
Query (LHAEPlain.lemma_makeAD_parseAD, 3)	succeeded (with hint) in 251 milliseconds with fuel 0 and ifuel 1
(C:\Build\Agent\_work\36\s\src\tls\StatefulLHAE.fst) digest is valid; using hints db.
(.\StreamAE.fst(118,2-118,26))
Query (StreamAE.genPost, 20)	succeeded (with hint) in 239 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(1387,11-1387,62))
Query (TLSConstants.inverse_namedGroup, 1)	succeeded (with hint) in 87 milliseconds with fuel 1 and ifuel 2
(.\Content.fst(71,4-71,13))
Query (Content.uu___is_Handshake, 1)	succeeded (with hint) in 223 milliseconds with fuel 0 and ifuel 1
(.\StreamPlain.fst(111,11-111,58))
Query (StreamPlain.scan, 10)	succeeded (with hint) in 237 milliseconds with fuel 0 and ifuel 1
(.\MasterSecret.fst(84,32-84,59))
Query (MasterSecret.derive, 9)	succeeded (with hint) in 238 milliseconds with fuel 0 and ifuel 1
(.\AEAD_GCM.fst(33,49-33,73))
Query (AEAD_GCM.max_ctr, 2)	succeeded (with hint) in 227 milliseconds with fuel 0 and ifuel 1
(.\StatefulPlain.fst(86,24-86,51))
Query (StatefulPlain.mk_plain, 1)	succeeded (with hint) in 227 milliseconds with fuel 0 and ifuel 1
(.\StatefulLHAE.fst(32,21-32,43))
Query (StatefulLHAE.cipher, 1)	succeeded (with hint) in 231 milliseconds with fuel 0 and ifuel 1
(.\LHAEPlain.fst(58,43-58,79))
Query (LHAEPlain.plain, 1)	succeeded (with hint) in 228 milliseconds with fuel 0 and ifuel 1
(.\Range.fst(292,20-292,33))
Query (Range.targetLength_converges, 1)	succeeded (with hint) in 218 milliseconds with fuel 0 and ifuel 2
(.\StreamAE.fst(118,2-118,26))
Query (StreamAE.genPost, 21)	succeeded (with hint) in 228 milliseconds with fuel 0 and ifuel 1
(.\Content.fst(72,4-72,20))
Query (Content.uu___is_Application_data, 1)	succeeded (with hint) in 222 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(1389,0-1389,29))
Query (TLSConstants.inverse_namedGroup, 2)	succeeded (with hint) in 302 milliseconds with fuel 1 and ifuel 2
(.\StreamPlain.fst(112,11-112,54))
Query (StreamPlain.scan, 11)	succeeded (with hint) in 235 milliseconds with fuel 0 and ifuel 1
(.\AEAD_GCM.fst(33,49-33,73))
Query (AEAD_GCM.max_ctr, 3)	succeeded (with hint) in 225 milliseconds with fuel 0 and ifuel 1
(.\MasterSecret.fst(84,44-84,59))
Query (MasterSecret.derive, 10)	succeeded (with hint) in 233 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(1391,27-1391,28))
Query (TLSConstants.pinverse_namedGroup, 1)	succeeded (with hint) in 85 milliseconds with fuel 1 and ifuel 2
(.\StatefulPlain.fst(88,0-88,66))
Query (StatefulPlain.mk_plain, 2)	succeeded (with hint) in 249 milliseconds with fuel 0 and ifuel 0
(.\LHAEPlain.fst(61,0-61,79))
Query (LHAEPlain.ghost_repr, 1)	succeeded (with hint) in 226 milliseconds with fuel 0 and ifuel 1
(.\StatefulLHAE.fst(36,2-36,58))
Query (StatefulLHAE.dplain, 1)	succeeded (with hint) in 231 milliseconds with fuel 0 and ifuel 1
Hint-info (.\StatefulPlain.fst(23,0-23,64)): Replay succeeded in 236 milliseconds
Hint-info (.\StatefulPlain.fst(24,0-25,45)): Replay succeeded in 237 milliseconds
Hint-info (.\StatefulPlain.fst(32,0-32,52)): Replay succeeded in 231 milliseconds
Hint-info (.\StatefulPlain.fst(35,0-42,6)): Replay succeeded in 332 milliseconds
Hint-info (.\StatefulPlain.fst(41,11-41,21)): Replay succeeded in 236 milliseconds
Hint-info (.\StatefulPlain.fst(47,11-47,41)): Replay succeeded in 228 milliseconds
Hint-info (.\StatefulPlain.fst(48,3-48,23)): Replay succeeded in 229 milliseconds
Hint-info (.\StatefulPlain.fst(45,0-48,24)): Replay succeeded in 228 milliseconds
Hint-info (.\StatefulPlain.fst(49,0-49,34)): Replay succeeded in 281 milliseconds
Hint-info (.\StatefulPlain.fst(54,2-54,32)): Replay succeeded in 248 milliseconds
Hint-info (.\StatefulPlain.fst(66,0-66,33)): Replay succeeded in 243 milliseconds
Hint-info (.\StatefulPlain.fst(69,0-70,37)): Replay succeeded in 228 milliseconds
Hint-info (.\StatefulPlain.fst(72,95-72,122)): Replay succeeded in 231 milliseconds
Hint-info (.\StatefulPlain.fst(73,0-73,37)): Replay succeeded in 232 milliseconds
Hint-info (.\StatefulPlain.fst(76,2-78,50)): Replay succeeded in 224 milliseconds
Hint-info (.\StatefulPlain.fst(77,6-77,39)): Replay succeeded in 230 milliseconds
Hint-info (.\StatefulPlain.fst(78,6-78,26)): Replay succeeded in 222 milliseconds
Hint-info (.\StatefulPlain.fst(81,2-82,72)): Replay succeeded in 230 milliseconds
Hint-info (.\StatefulPlain.fst(81,3-81,36)): Replay succeeded in 224 milliseconds
Hint-info (.\StatefulPlain.fst(81,41-81,53)): Replay succeeded in 226 milliseconds
Hint-info (.\StatefulPlain.fst(82,6-82,26)): Replay succeeded in 223 milliseconds
Hint-info (.\StatefulPlain.fst(82,31-82,43)): Replay succeeded in 225 milliseconds
Hint-info (.\StatefulPlain.fst(86,24-86,51)): Replay succeeded in 227 milliseconds
Hint-info (.\StatefulPlain.fst(88,0-88,66)): Replay succeeded in 249 milliseconds
(.\Range.fst(293,11-293,86))
Query (Range.targetLength_converges, 2)	succeeded (with hint) in 219 milliseconds with fuel 0 and ifuel 2
Verified module: StatefulPlain (9021 milliseconds)
All verification conditions discharged successfully
(.\StreamAE.fst(118,11-118,26))
Query (StreamAE.genPost, 22)	succeeded (with hint) in 233 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(1393,11-1393,75))
Query (TLSConstants.pinverse_namedGroup, 2)	succeeded (with hint) in 87 milliseconds with fuel 1 and ifuel 2
(.\Content.fst(74,39-74,63))
Query (Content.contentType13, 1)	succeeded (with hint) in 224 milliseconds with fuel 0 and ifuel 1
(.\AEAD_GCM.fst(34,14-34,50))
Query (AEAD_GCM.max_ctr, 4)	succeeded (with hint) in 229 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(1394,3-1394,61))
Query (TLSConstants.pinverse_namedGroup, 3)	succeeded (with hint) in 85 milliseconds with fuel 1 and ifuel 2
(.\MasterSecret.fst(69,26-69,44))
Query (MasterSecret.derive, 11)	succeeded (with hint) in 234 milliseconds with fuel 0 and ifuel 1
(.\StreamPlain.fst(121,8-121,17))
Query (StreamPlain.scan, 12)	succeeded (with hint) in 241 milliseconds with fuel 0 and ifuel 1
(.\LHAEPlain.fst(63,92-63,118))
Query (LHAEPlain.repr, 1)	succeeded (with hint) in 230 milliseconds with fuel 0 and ifuel 1
(.\StatefulLHAE.fst(35,0-36,58))
Query (StatefulLHAE.dplain, 2)	succeeded (with hint) in 230 milliseconds with fuel 0 and ifuel 1
(.\Content.fst(76,0-76,42))
Query (Content.ctBytes, 1)	succeeded (with hint) in 224 milliseconds with fuel 0 and ifuel 1
(.\StreamAE.fst(118,11-118,26))
Query (StreamAE.genPost, 23)	succeeded (with hint) in 233 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(1395,0-1395,30))
Query (TLSConstants.pinverse_namedGroup, 4)	succeeded (with hint) in 208 milliseconds with fuel 1 and ifuel 2
(.\AEAD_GCM.fst(41,2-41,44))
Query (AEAD_GCM.dplain, 1)	succeeded (with hint) in 229 milliseconds with fuel 0 and ifuel 1
(.\MasterSecret.fst(73,7-73,29))
Query (MasterSecret.derive, 12)	succeeded (with hint) in 233 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(1399,20-1399,69))
Query (TLSConstants.namedGroupsBytes0, 1)	succeeded (with hint) in 84 milliseconds with fuel 1 and ifuel 2
(.\StatefulLHAE.fst(55,0-55,65))
Query (StatefulLHAE.leak, 1)	succeeded (with hint) in 233 milliseconds with fuel 0 and ifuel 1
(.\LHAEPlain.fst(64,0-64,59))
Query (LHAEPlain.repr, 2)	succeeded (with hint) in 231 milliseconds with fuel 0 and ifuel 1
(.\StreamPlain.fst(122,19-122,26))
Query (StreamPlain.scan, 13)	succeeded (with hint) in 237 milliseconds with fuel 0 and ifuel 1
(.\Content.fst(77,14-81,35))
Query (Content.ctBytes, 2)	succeeded (with hint) in 240 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(1400,0-1403,54))
Query (TLSConstants.namedGroupsBytes0, 2)	succeeded (with hint) in 97 milliseconds with fuel 1 and ifuel 2
(.\AEAD_GCM.fst(43,0-44,65))
Query (AEAD_GCM.entry, 1)	succeeded (with hint) in 236 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(1407,20-1407,73))
Query (TLSConstants.namedGroupsBytes, 1)	succeeded (with hint) in 85 milliseconds with fuel 1 and ifuel 2
(.\MasterSecret.fst(75,16-75,49))
Query (MasterSecret.derive, 13)	succeeded (with hint) in 226 milliseconds with fuel 0 and ifuel 1
(.\LHAEPlain.fst(69,26-69,53))
Query (LHAEPlain.mk_plain, 1)	succeeded (with hint) in 219 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(1406,0-1407,75))
Query (TLSConstants.namedGroupsBytes, 2)	succeeded (with hint) in 83 milliseconds with fuel 1 and ifuel 2
(.\Content.fst(83,13-83,31))
Query (Content.parseCT, 1)	succeeded (with hint) in 219 milliseconds with fuel 0 and ifuel 1
(.\StreamPlain.fst(124,11-124,62))
Query (StreamPlain.scan, 14)	succeeded (with hint) in 235 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(1408,0-1411,14))
Query (TLSConstants.namedGroupsBytes, 3)	succeeded (with hint) in 92 milliseconds with fuel 1 and ifuel 2
(.\StatefulLHAE.fst(60,13-60,26))
Query (StatefulLHAE.encrypt, 1)	succeeded (with hint) in 226 milliseconds with fuel 0 and ifuel 1
(.\AEAD_GCM.fst(44,11-44,12))
Query (AEAD_GCM.__proj__Entry__item__c, 1)	succeeded (with hint) in 227 milliseconds with fuel 0 and ifuel 1
(.\MasterSecret.fst(78,20-78,44))
Query (MasterSecret.derive, 14)	succeeded (with hint) in 227 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(1414,41-1414,98))
Query (TLSConstants.parseNamedGroups0, 1)	succeeded (with hint) in 87 milliseconds with fuel 1 and ifuel 2
(.\LHAEPlain.fst(66,0-69,55))
Query (LHAEPlain.mk_plain, 2)	succeeded (with hint) in 231 milliseconds with fuel 0 and ifuel 1
(.\Content.fst(84,0-90,67))
Query (Content.parseCT, 2)	succeeded (with hint) in 223 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(1413,8-1415,24))
Query (TLSConstants.parseNamedGroups0, 2)	succeeded (with hint) in 84 milliseconds with fuel 1 and ifuel 2
(.\StreamPlain.fst(127,7-127,12))
Query (StreamPlain.scan, 15)	succeeded (with hint) in 223 milliseconds with fuel 0 and ifuel 1
(.\StreamAE.fst(129,0-140,53))
Query (StreamAE.gen, 1)	succeeded (with hint) in 675 milliseconds with fuel 0 and ifuel 1
(.\AEAD_GCM.fst(44,25-44,27))
Query (AEAD_GCM.__proj__Entry__item__ad, 1)	succeeded (with hint) in 227 milliseconds with fuel 0 and ifuel 1
(.\StatefulLHAE.fst(64,35-64,67))
Query (StatefulLHAE.encrypt, 2)	succeeded (with hint) in 230 milliseconds with fuel 0 and ifuel 0
(.\MasterSecret.fst(79,21-79,39))
Query (MasterSecret.derive, 15)	succeeded (with hint) in 229 milliseconds with fuel 0 and ifuel 1
(.\LHAEPlain.fst(70,0-70,67))
Query (LHAEPlain.mk_plain, 3)	succeeded (with hint) in 235 milliseconds with fuel 0 and ifuel 1
(.\Content.fst(94,11-94,46))
Query (Content.inverse_ct, 1)	succeeded (with hint) in 221 milliseconds with fuel 0 and ifuel 1
Hint-info (.\LHAEPlain.fst(25,0-25,30)): Replay succeeded in 259 milliseconds
Hint-info (.\LHAEPlain.fst(27,20-28,55)): Replay succeeded in 235 milliseconds
Hint-info (.\LHAEPlain.fst(28,4-28,54)): Replay succeeded in 225 milliseconds
Hint-info (.\LHAEPlain.fst(30,0-33,3)): Replay succeeded in 247 milliseconds
Hint-info (.\LHAEPlain.fst(36,0-38,20)): Replay succeeded in 233 milliseconds
Hint-info (.\LHAEPlain.fst(42,28-42,56)): Replay succeeded in 226 milliseconds
Hint-info (.\LHAEPlain.fst(40,0-43,43)): Replay succeeded in 230 milliseconds
Hint-info (.\LHAEPlain.fst(45,0-47,55)): Replay succeeded in 254 milliseconds
Hint-info (.\LHAEPlain.fst(51,28-51,58)): Replay succeeded in 221 milliseconds
Hint-info (.\LHAEPlain.fst(49,0-52,43)): Replay succeeded in 231 milliseconds
Hint-info (.\LHAEPlain.fst(53,0-53,78)): Replay succeeded in 251 milliseconds
Hint-info (.\LHAEPlain.fst(58,43-58,79)): Replay succeeded in 228 milliseconds
Hint-info (.\LHAEPlain.fst(61,0-61,79)): Replay succeeded in 226 milliseconds
Hint-info (.\LHAEPlain.fst(63,92-63,118)): Replay succeeded in 230 milliseconds
Hint-info (.\LHAEPlain.fst(64,0-64,59)): Replay succeeded in 231 milliseconds
Hint-info (.\LHAEPlain.fst(69,26-69,53)): Replay succeeded in 219 milliseconds
Hint-info (.\LHAEPlain.fst(66,0-69,55)): Replay succeeded in 231 milliseconds
Hint-info (.\LHAEPlain.fst(70,0-70,67)): Replay succeeded in 235 milliseconds
Verified module: LHAEPlain (6391 milliseconds)
All verification conditions discharged successfully
(.\TLSConstants.fst(1416,0-1430,15))
Query (TLSConstants.parseNamedGroups0, 3)	succeeded (with hint) in 169 milliseconds with fuel 1 and ifuel 2
(.\AEAD_GCM.fst(44,39-44,40))
Query (AEAD_GCM.__proj__Entry__item__p, 1)	succeeded (with hint) in 230 milliseconds with fuel 0 and ifuel 1
(.\StreamPlain.fst(127,18-127,69))
Query (StreamPlain.scan, 16)	succeeded (with hint) in 232 milliseconds with fuel 0 and ifuel 1
(.\MasterSecret.fst(80,20-80,38))
Query (MasterSecret.derive, 16)	succeeded (with hint) in 233 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(1425,22-1425,29))
Query (TLSConstants.parseNamedGroups0, 4)	succeeded (with hint) in 87 milliseconds with fuel 1 and ifuel 2
(.\StreamAE.fst(145,28-145,48))
Query (StreamAE.genReader, 1)	succeeded (with hint) in 238 milliseconds with fuel 0 and ifuel 2
(.\StatefulLHAE.fst(65,7-65,31))
Query (StatefulLHAE.encrypt, 3)	succeeded (with hint) in 234 milliseconds with fuel 0 and ifuel 0
(.\TLSConstants.fst(1426,9-1426,68))
Query (TLSConstants.parseNamedGroups0, 5)	succeeded (with hint) in 89 milliseconds with fuel 1 and ifuel 2
(.\Content.fst(96,0-96,21))
Query (Content.inverse_ct, 2)	succeeded (with hint) in 236 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(1430,3-1430,15))
Query (TLSConstants.parseNamedGroups0, 6)	succeeded (with hint) in 86 milliseconds with fuel 1 and ifuel 2
(.\AEAD_GCM.fst(46,0-46,48))
Query (AEAD_GCM.ideal_log, 1)	succeeded (with hint) in 228 milliseconds with fuel 0 and ifuel 1
(.\MasterSecret.fst(83,17-83,34))
Query (MasterSecret.derive, 17)	succeeded (with hint) in 227 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(1434,41-1434,84))
Query (TLSConstants.parseNamedGroups, 1)	succeeded (with hint) in 86 milliseconds with fuel 1 and ifuel 2
(.\StatefulLHAE.fst(65,7-65,31))
Query (StatefulLHAE.encrypt, 4)	succeeded (with hint) in 240 milliseconds with fuel 0 and ifuel 0
(.\StreamPlain.fst(130,1-130,75))
Query (StreamPlain.scan, 17)	succeeded (with hint) in 226 milliseconds with fuel 0 and ifuel 1
(.\StreamAE.fst(147,18-147,27))
Query (StreamAE.genReader, 2)	succeeded (with hint) in 253 milliseconds with fuel 0 and ifuel 1
(.\Content.fst(98,19-98,20))
Query (Content.pinverse_ct, 1)	succeeded (with hint) in 223 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(1433,0-1434,87))
Query (TLSConstants.parseNamedGroups, 2)	succeeded (with hint) in 88 milliseconds with fuel 1 and ifuel 2
(.\AEAD_GCM.fst(48,0-49,42))
Query (AEAD_GCM.log_ref, 1)	succeeded (with hint) in 226 milliseconds with fuel 0 and ifuel 1
(.\MasterSecret.fst(84,32-84,59))
Query (MasterSecret.derive, 18)	succeeded (with hint) in 227 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(1435,0-1439,90))
Query (TLSConstants.parseNamedGroups, 3)	succeeded (with hint) in 105 milliseconds with fuel 1 and ifuel 2
(.\StreamAE.fst(148,9-148,32))
Query (StreamAE.genReader, 3)	succeeded (with hint) in 232 milliseconds with fuel 0 and ifuel 1
(.\StatefulLHAE.fst(65,7-65,31))
Query (StatefulLHAE.encrypt, 5)	succeeded (with hint) in 233 milliseconds with fuel 0 and ifuel 0
(.\Content.fst(100,11-100,59))
Query (Content.pinverse_ct, 2)	succeeded (with hint) in 221 milliseconds with fuel 0 and ifuel 1
(.\StreamPlain.fst(136,8-136,17))
Query (StreamPlain.scan, 18)	succeeded (with hint) in 235 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(1439,4-1439,90))
Query (TLSConstants.parseNamedGroups, 4)	succeeded (with hint) in 89 milliseconds with fuel 1 and ifuel 2
(C:\Build\Agent\_work\36\s\src\tls\Record.fst) digest is valid; using hints db.
(.\AEAD_GCM.fst(51,0-52,3))
Query (AEAD_GCM.ilog, 1)	succeeded (with hint) in 230 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(1447,0-1449,15))
Query (TLSConstants.configurationIdBytes, 1)	succeeded (with hint) in 90 milliseconds with fuel 1 and ifuel 2
(.\MasterSecret.fst(84,44-84,59))
Query (MasterSecret.derive, 19)	succeeded (with hint) in 230 milliseconds with fuel 0 and ifuel 1
(.\StreamAE.fst(149,9-149,36))
Query (StreamAE.genReader, 4)	succeeded (with hint) in 225 milliseconds with fuel 0 and ifuel 1
(.\StatefulLHAE.fst(67,16-67,75))
Query (StatefulLHAE.encrypt, 6)	succeeded (with hint) in 224 milliseconds with fuel 0 and ifuel 0
(.\Content.fst(101,3-101,45))
Query (Content.pinverse_ct, 3)	succeeded (with hint) in 222 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(1453,0-1456,26))
Query (TLSConstants.parseConfigurationId, 1)	succeeded (with hint) in 97 milliseconds with fuel 1 and ifuel 2
(.\Record.fst(29,0-29,24))
Query (Record.header, 1)	succeeded (with hint) in 231 milliseconds with fuel 0 and ifuel 1
(.\StreamPlain.fst(139,6-139,80))
Query (StreamPlain.scan, 19)	succeeded (with hint) in 235 milliseconds with fuel 0 and ifuel 1
(.\AEAD_GCM.fst(55,0-56,50))
Query (AEAD_GCM.ideal_ctr, 1)	succeeded (with hint) in 225 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(1463,0-1464,36))
Query (TLSConstants.inverse_configurationId, 1)	succeeded (with hint) in 94 milliseconds with fuel 1 and ifuel 2
(.\MasterSecret.fst(85,4-85,22))
Query (MasterSecret.derive, 20)	succeeded (with hint) in 229 milliseconds with fuel 0 and ifuel 1
(.\StreamAE.fst(150,8-150,37))
Query (StreamAE.genReader, 5)	succeeded (with hint) in 230 milliseconds with fuel 0 and ifuel 1
(.\StatefulLHAE.fst(67,43-67,73))
Query (StatefulLHAE.encrypt, 7)	succeeded (with hint) in 232 milliseconds with fuel 0 and ifuel 0
(.\TLSConstants.fst(1466,0-1469,72))
Query (TLSConstants.pinverse_configurationId, 1)	succeeded (with hint) in 85 milliseconds with fuel 1 and ifuel 2
(.\Content.fst(102,0-102,22))
Query (Content.pinverse_ct, 4)	succeeded (with hint) in 241 milliseconds with fuel 0 and ifuel 1
(.\Record.fst(34,0-47,16))
Query (Record.makePacket, 1)	succeeded (with hint) in 241 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(1470,0-1470,35))
Query (TLSConstants.pinverse_configurationId, 2)	succeeded (with hint) in 103 milliseconds with fuel 1 and ifuel 2
(.\AEAD_GCM.fst(56,2-56,50))
Query (AEAD_GCM.ideal_ctr, 2)	succeeded (with hint) in 237 milliseconds with fuel 0 and ifuel 1
(.\StreamPlain.fst(146,6-146,15))
Query (StreamPlain.scan, 20)	succeeded (with hint) in 243 milliseconds with fuel 0 and ifuel 1
(.\MasterSecret.fst(86,10-86,28))
Query (MasterSecret.derive, 21)	succeeded (with hint) in 242 milliseconds with fuel 0 and ifuel 1
(.\StreamAE.fst(153,8-153,37))
Query (StreamAE.genReader, 6)	succeeded (with hint) in 245 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(1477,0-1477,24))
Query (TLSConstants.uint32, 1)	succeeded (with hint) in 93 milliseconds with fuel 1 and ifuel 2
(.\StatefulLHAE.fst(68,10-68,39))
Query (StatefulLHAE.encrypt, 8)	succeeded (with hint) in 250 milliseconds with fuel 0 and ifuel 0
(.\Content.fst(104,17-108,32))
Query (Content.ctToString, 1)	succeeded (with hint) in 244 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(1479,0-1479,41))
Query (TLSConstants.uint32Bytes, 1)	succeeded (with hint) in 92 milliseconds with fuel 1 and ifuel 2
(.\Record.fst(36,8-36,21))
Query (Record.makePacket, 2)	succeeded (with hint) in 251 milliseconds with fuel 0 and ifuel 1
(.\AEAD_GCM.fst(58,0-59,38))
Query (AEAD_GCM.concrete_ctr, 1)	succeeded (with hint) in 252 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(1482,17-1482,39))
Query (TLSConstants.parseUint32, 1)	succeeded (with hint) in 94 milliseconds with fuel 1 and ifuel 2
(.\MasterSecret.fst(91,6-91,26))
Query (MasterSecret.derive, 22)	succeeded (with hint) in 246 milliseconds with fuel 0 and ifuel 1
(.\StreamAE.fst(153,8-153,37))
Query (StreamAE.genReader, 7)	succeeded (with hint) in 252 milliseconds with fuel 0 and ifuel 1
(.\Content.fst(114,0-118,27))
Query (Content.rg, 1)	succeeded (with hint) in 246 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(1483,0-1485,66))
Query (TLSConstants.parseUint32, 2)	succeeded (with hint) in 98 milliseconds with fuel 1 and ifuel 2
(.\StreamPlain.fst(147,11-147,57))
Query (StreamPlain.scan, 21)	succeeded (with hint) in 257 milliseconds with fuel 0 and ifuel 1
(.\StatefulLHAE.fst(68,10-68,39))
Query (StatefulLHAE.encrypt, 9)	succeeded (with hint) in 259 milliseconds with fuel 0 and ifuel 0
(.\TLSConstants.fst(1484,5-1484,17))
Query (TLSConstants.parseUint32, 3)	succeeded (with hint) in 92 milliseconds with fuel 1 and ifuel 2
(.\AEAD_GCM.fst(61,0-64,43))
Query (AEAD_GCM.ctr_ref, 1)	succeeded (with hint) in 250 milliseconds with fuel 0 and ifuel 1
(.\MasterSecret.fst(91,6-91,26))
Query (MasterSecret.derive, 23)	succeeded (with hint) in 247 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(1489,11-1489,54))
Query (TLSConstants.inverse_uint32, 1)	succeeded (with hint) in 92 milliseconds with fuel 1 and ifuel 2
(.\StreamAE.fst(153,8-153,37))
Query (StreamAE.genReader, 8)	succeeded (with hint) in 244 milliseconds with fuel 0 and ifuel 1
(.\Content.fst(121,0-125,29))
Query (Content.ct, 1)	succeeded (with hint) in 244 milliseconds with fuel 0 and ifuel 1
(.\StatefulLHAE.fst(68,10-68,39))
Query (StatefulLHAE.encrypt, 10)	succeeded (with hint) in 249 milliseconds with fuel 0 and ifuel 0
(.\Record.fst(53,0-65,33))
Query (Record.parseHeader, 1)	succeeded (with hint) in 290 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(1491,0-1491,25))
Query (TLSConstants.inverse_uint32, 2)	succeeded (with hint) in 95 milliseconds with fuel 1 and ifuel 2
(.\StreamPlain.fst(152,25-152,39))
Query (StreamPlain.scan_pad_correct, 1)	succeeded (with hint) in 241 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(1493,23-1493,24))
Query (TLSConstants.pinverse_uint32, 1)	succeeded (with hint) in 90 milliseconds with fuel 1 and ifuel 2
(.\AEAD_GCM.fst(67,0-72,3))
Query (AEAD_GCM.ctr, 1)	succeeded (with hint) in 268 milliseconds with fuel 0 and ifuel 1
(.\StreamAE.fst(153,19-153,34))
Query (StreamAE.genReader, 9)	succeeded (with hint) in 250 milliseconds with fuel 0 and ifuel 1
(.\Content.fst(131,0-131,50))
Query (Content.is_stlhae, 1)	succeeded (with hint) in 242 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(1495,11-1495,67))
Query (TLSConstants.pinverse_uint32, 2)	succeeded (with hint) in 93 milliseconds with fuel 1 and ifuel 2
(.\StatefulLHAE.fst(69,10-69,67))
Query (StatefulLHAE.encrypt, 11)	succeeded (with hint) in 255 milliseconds with fuel 0 and ifuel 0
(.\TLSConstants.fst(1496,3-1496,53))
Query (TLSConstants.pinverse_uint32, 3)	succeeded (with hint) in 92 milliseconds with fuel 1 and ifuel 2
(.\StreamPlain.fst(153,11-153,34))
Query (StreamPlain.scan_pad_correct, 2)	succeeded (with hint) in 241 milliseconds with fuel 0 and ifuel 1
(.\AEAD_GCM.fst(77,32-77,43))
Query (AEAD_GCM.state, 1)	succeeded (with hint) in 247 milliseconds with fuel 0 and ifuel 1
(.\Record.fst(92,0-101,38))
Query (Record.read, 1)	succeeded (with hint) in 272 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(1497,0-1497,26))
Query (TLSConstants.pinverse_uint32, 4)	succeeded (with hint) in 94 milliseconds with fuel 1 and ifuel 2
(.\StreamAE.fst(153,19-153,34))
Query (StreamAE.genReader, 10)	succeeded (with hint) in 250 milliseconds with fuel 0 and ifuel 1
(C:\Build\Agent\_work\36\s\src\tls\StAE.fst) digest is valid; using hints db.
(.\TLSConstants.fst(1503,4-1503,24))
Query (TLSConstants.uu___is_ClientAuthentication, 1)	succeeded (with hint) in 93 milliseconds with fuel 1 and ifuel 2
(.\StatefulLHAE.fst(69,10-69,34))
Query (StatefulLHAE.encrypt, 12)	succeeded (with hint) in 250 milliseconds with fuel 0 and ifuel 0
(.\StreamPlain.fst(153,39-153,57))
Query (StreamPlain.scan_pad_correct, 3)	succeeded (with hint) in 243 milliseconds with fuel 0 and ifuel 1
(.\Content.fst(134,0-146,12))
Query (Content.cipherLen, 1)	succeeded (with hint) in 293 milliseconds with fuel 0 and ifuel 2
(.\TLSConstants.fst(1504,4-1504,13))
Query (TLSConstants.uu___is_EarlyData, 1)	succeeded (with hint) in 93 milliseconds with fuel 1 and ifuel 2
(.\AEAD_GCM.fst(77,49-77,68))
Query (AEAD_GCM.state, 2)	succeeded (with hint) in 248 milliseconds with fuel 0 and ifuel 1
(.\StreamAE.fst(154,8-154,38))
Query (StreamAE.genReader, 11)	succeeded (with hint) in 261 milliseconds with fuel 0 and ifuel 1
Hint-info (.\Record.fst(29,0-29,24)): Replay succeeded in 231 milliseconds
Hint-info (.\Record.fst(34,0-47,16)): Replay succeeded in 241 milliseconds
Hint-info (.\Record.fst(36,8-36,21)): Replay succeeded in 251 milliseconds
Hint-info (.\Record.fst(53,0-65,33)): Replay succeeded in 290 milliseconds
Hint-info (.\Record.fst(92,0-101,38)): Replay succeeded in 272 milliseconds
Verified module: Record (2750 milliseconds)
All verification conditions discharged successfully
(.\TLSConstants.fst(1505,4-1505,31))
Query (TLSConstants.uu___is_ClientAuthenticationAndData, 1)	succeeded (with hint) in 92 milliseconds with fuel 1 and ifuel 2
(.\StAE.fst(33,0-35,53))
Query (StAE.is_stlhae, 1)	succeeded (with hint) in 252 milliseconds with fuel 0 and ifuel 1
(.\StreamPlain.fst(154,11-154,21))
Query (StreamPlain.scan_pad_correct, 4)	succeeded (with hint) in 242 milliseconds with fuel 0 and ifuel 1
(.\StatefulLHAE.fst(69,10-69,34))
Query (StatefulLHAE.encrypt, 13)	succeeded (with hint) in 259 milliseconds with fuel 0 and ifuel 0
(.\TLSConstants.fst(1508,0-1508,55))
Query (TLSConstants.earlyDataTypeBytes, 1)	succeeded (with hint) in 95 milliseconds with fuel 1 and ifuel 2
(.\AEAD_GCM.fst(75,5-81,22))
Query (AEAD_GCM.state, 3)	succeeded (with hint) in 253 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(1509,0-1513,43))
Query (TLSConstants.earlyDataTypeBytes, 2)	succeeded (with hint) in 102 milliseconds with fuel 1 and ifuel 2
(.\StreamAE.fst(154,8-154,32))
Query (StreamAE.genReader, 12)	succeeded (with hint) in 251 milliseconds with fuel 0 and ifuel 1
(.\StAE.fst(34,3-34,52))
Query (StAE.is_stlhae, 2)	succeeded (with hint) in 250 milliseconds with fuel 0 and ifuel 1
(.\Content.fst(154,0-159,43))
Query (Content.ghost_repr, 1)	succeeded (with hint) in 450 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(1516,24-1516,53))
Query (TLSConstants.parseEarlyDataType, 1)	succeeded (with hint) in 92 milliseconds with fuel 1 and ifuel 2
(.\StatefulLHAE.fst(69,10-69,34))
Query (StatefulLHAE.encrypt, 14)	succeeded (with hint) in 250 milliseconds with fuel 0 and ifuel 0
(.\StreamPlain.fst(155,10-155,28))
Query (StreamPlain.scan_pad_correct, 5)	succeeded (with hint) in 244 milliseconds with fuel 0 and ifuel 1
(.\AEAD_GCM.fst(76,12-76,18))
Query (AEAD_GCM.__proj__State__item__region, 1)	succeeded (with hint) in 249 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(1517,0-1522,100))
Query (TLSConstants.parseEarlyDataType, 2)	succeeded (with hint) in 98 milliseconds with fuel 1 and ifuel 2
(.\StAE.fst(35,3-35,52))
Query (StAE.is_stlhae, 3)	succeeded (with hint) in 250 milliseconds with fuel 0 and ifuel 1
(.\StreamAE.fst(154,8-154,32))
Query (StreamAE.genReader, 13)	succeeded (with hint) in 256 milliseconds with fuel 0 and ifuel 1
(.\Content.fst(161,63-161,82))
Query (Content.repr, 1)	succeeded (with hint) in 240 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(1528,11-1528,68))
Query (TLSConstants.inverse_earlyDataType, 1)	succeeded (with hint) in 91 milliseconds with fuel 1 and ifuel 2
(.\StatefulLHAE.fst(69,39-69,63))
Query (StatefulLHAE.encrypt, 15)	succeeded (with hint) in 252 milliseconds with fuel 0 and ifuel 0
(.\TLSConstants.fst(1530,0-1530,32))
Query (TLSConstants.inverse_earlyDataType, 2)	succeeded (with hint) in 107 milliseconds with fuel 1 and ifuel 2
(.\AEAD_GCM.fst(77,13-77,23))
Query (AEAD_GCM.__proj__State__item__log_region, 1)	succeeded (with hint) in 247 milliseconds with fuel 0 and ifuel 1
(.\StreamPlain.fst(156,12-156,52))
Query (StreamPlain.scan_pad_correct, 6)	succeeded (with hint) in 260 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(1532,30-1532,31))
Query (TLSConstants.pinverse_earlyDataType, 1)	succeeded (with hint) in 93 milliseconds with fuel 1 and ifuel 2
(.\StreamAE.fst(154,8-154,32))
Query (StreamAE.genReader, 14)	succeeded (with hint) in 256 milliseconds with fuel 0 and ifuel 1
(.\StAE.fst(48,0-49,20))
Query (StAE.frag_plain_len, 1)	succeeded (with hint) in 258 milliseconds with fuel 0 and ifuel 1
(.\Content.fst(162,0-167,43))
Query (Content.repr, 2)	succeeded (with hint) in 255 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(1534,11-1534,81))
Query (TLSConstants.pinverse_earlyDataType, 2)	succeeded (with hint) in 95 milliseconds with fuel 1 and ifuel 2
(.\StatefulLHAE.fst(69,39-69,63))
Query (StatefulLHAE.encrypt, 16)	succeeded (with hint) in 256 milliseconds with fuel 0 and ifuel 0
(.\AEAD_GCM.fst(77,13-77,23))
Query (AEAD_GCM.__proj__State__item__log_region, 2)	succeeded (with hint) in 251 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(1535,3-1535,67))
Query (TLSConstants.pinverse_earlyDataType, 3)	succeeded (with hint) in 94 milliseconds with fuel 1 and ifuel 2
(.\StreamPlain.fst(149,0-156,54))
Query (StreamPlain.scan_pad_correct, 7)	succeeded (with hint) in 267 milliseconds with fuel 0 and ifuel 0
(.\StreamAE.fst(154,17-154,32))
Query (StreamAE.genReader, 15)	succeeded (with hint) in 249 milliseconds with fuel 0 and ifuel 1
(.\StAE.fst(54,0-61,30))
Query (StAE.aeKeySize, 1)	succeeded (with hint) in 263 milliseconds with fuel 0 and ifuel 1
(.\Content.fst(171,0-175,30))
Query (Content.fragmentRepr, 1)	succeeded (with hint) in 247 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(1536,0-1536,33))
Query (TLSConstants.pinverse_earlyDataType, 4)	succeeded (with hint) in 108 milliseconds with fuel 1 and ifuel 2
(.\StatefulLHAE.fst(69,39-69,63))
Query (StatefulLHAE.encrypt, 17)	succeeded (with hint) in 248 milliseconds with fuel 0 and ifuel 0
(.\TLSConstants.fst(1541,5-1543,99))
Query (TLSConstants.configurationExtension, 1)	succeeded (with hint) in 95 milliseconds with fuel 1 and ifuel 2
(.\AEAD_GCM.fst(78,12-78,16))
Query (AEAD_GCM.__proj__State__item__aead, 1)	succeeded (with hint) in 250 milliseconds with fuel 0 and ifuel 1
(.\StreamAE.fst(154,17-154,32))
Query (StreamAE.genReader, 16)	succeeded (with hint) in 253 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(1543,6-1543,9))
Query (TLSConstants.__proj__UnknownConfigurationExtension__item__typ, 1)	succeeded (with hint) in 94 milliseconds with fuel 1 and ifuel 2
(.\Content.fst(173,48-173,60))
Query (Content.fragmentRepr, 2)	succeeded (with hint) in 243 milliseconds with fuel 0 and ifuel 1
(.\StAE.fst(63,28-63,48))
Query (StAE.keyBytes, 1)	succeeded (with hint) in 271 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(1543,6-1543,9))
Query (TLSConstants.__proj__UnknownConfigurationExtension__item__typ, 2)	succeeded (with hint) in 93 milliseconds with fuel 1 and ifuel 2
(.\StatefulLHAE.fst(70,10-70,43))
Query (StatefulLHAE.encrypt, 18)	succeeded (with hint) in 247 milliseconds with fuel 0 and ifuel 0
(.\AEAD_GCM.fst(78,12-78,16))
Query (AEAD_GCM.__proj__State__item__aead, 2)	succeeded (with hint) in 249 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(1543,22-1543,29))
Query (TLSConstants.__proj__UnknownConfigurationExtension__item__payload, 1)	succeeded (with hint) in 95 milliseconds with fuel 1 and ifuel 2
(.\Content.fst(174,48-174,60))
Query (Content.fragmentRepr, 3)	succeeded (with hint) in 241 milliseconds with fuel 0 and ifuel 1
(.\StreamAE.fst(143,0-154,40))
Query (StreamAE.genReader, 17)	succeeded (with hint) in 261 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(1548,0-1550,73))
Query (TLSConstants.configurationExtensionBytes, 1)	succeeded (with hint) in 100 milliseconds with fuel 1 and ifuel 2
(.\StAE.fst(69,5-71,66))
Query (StAE.state, 1)	succeeded (with hint) in 252 milliseconds with fuel 0 and ifuel 1
(.\AEAD_GCM.fst(79,12-79,15))
Query (AEAD_GCM.__proj__State__item__log, 1)	succeeded (with hint) in 249 milliseconds with fuel 0 and ifuel 1
(.\StatefulLHAE.fst(73,18-73,30))
Query (StatefulLHAE.encrypt, 19)	succeeded (with hint) in 253 milliseconds with fuel 0 and ifuel 1
(.\StreamPlain.fst(160,0-175,45))
Query (StreamPlain.scan_pad_correct, 8)	succeeded (with hint) in 467 milliseconds with fuel 1 and ifuel 0
(.\TLSConstants.fst(1554,0-1560,114))
Query (TLSConstants.parseConfigurationExtension, 1)	succeeded (with hint) in 112 milliseconds with fuel 1 and ifuel 2
(.\Content.fst(178,21-178,37))
Query (Content.mk_fragment, 1)	succeeded (with hint) in 245 milliseconds with fuel 0 and ifuel 1
(.\StAE.fst(69,5-71,66))
Query (StAE.state, 2)	succeeded (with hint) in 248 milliseconds with fuel 0 and ifuel 1
(.\StreamPlain.fst(162,5-162,23))
Query (StreamPlain.scan_pad_correct, 9)	succeeded (with hint) in 239 milliseconds with fuel 1 and ifuel 0
(.\StatefulLHAE.fst(74,18-74,42))
Query (StatefulLHAE.encrypt, 20)	succeeded (with hint) in 252 milliseconds with fuel 0 and ifuel 0
(.\AEAD_GCM.fst(80,12-80,19))
Query (AEAD_GCM.__proj__State__item__counter, 1)	succeeded (with hint) in 255 milliseconds with fuel 0 and ifuel 1
(C:\Build\Agent\_work\36\s\src\tls\StreamDeltas.fst) digest is valid; using hints db.
(.\TLSConstants.fst(1568,0-1577,30))
Query (TLSConstants.inverse_configurationExtension, 1)	succeeded (with hint) in 224 milliseconds with fuel 1 and ifuel 2
(.\Content.fst(179,0-184,87))
Query (Content.mk_fragment, 2)	succeeded (with hint) in 273 milliseconds with fuel 0 and ifuel 1
(.\StAE.fst(70,4-70,10))
Query (StAE.uu___is_Stream, 1)	succeeded (with hint) in 250 milliseconds with fuel 0 and ifuel 1
(.\StreamPlain.fst(164,8-164,41))
Query (StreamPlain.scan_pad_correct, 10)	succeeded (with hint) in 239 milliseconds with fuel 1 and ifuel 0
(.\TLSConstants.fst(1583,0-1583,42))
Query (TLSConstants.pinverse_configurationExtension, 1)	succeeded (with hint) in 192 milliseconds with fuel 1 and ifuel 2
(.\AEAD_GCM.fst(80,12-80,19))
Query (AEAD_GCM.__proj__State__item__counter, 2)	succeeded (with hint) in 247 milliseconds with fuel 0 and ifuel 1
(.\StreamDeltas.fst(20,0-20,56))
Query (StreamDeltas.singleton, 1)	succeeded (with hint) in 255 milliseconds with fuel 0 and ifuel 1
(.\StatefulLHAE.fst(74,18-74,42))
Query (StatefulLHAE.encrypt, 21)	succeeded (with hint) in 263 milliseconds with fuel 0 and ifuel 0
(.\Content.fst(187,33-187,74))
Query (Content.mk_ct_rg, 1)	succeeded (with hint) in 254 milliseconds with fuel 0 and ifuel 1
(.\StAE.fst(70,12-70,13))
Query (StAE.__proj__Stream__item__u, 1)	succeeded (with hint) in 253 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(1589,0-1600,13))
Query (TLSConstants.configurationExtensionsBytes, 1)	succeeded (with hint) in 115 milliseconds with fuel 1 and ifuel 2
(.\StreamPlain.fst(168,17-168,24))
Query (StreamPlain.scan_pad_correct, 11)	succeeded (with hint) in 245 milliseconds with fuel 1 and ifuel 0
(.\StreamAE.fst(160,0-171,54))
Query (StreamAE.genReader, 18)	succeeded (with hint) in 863 milliseconds with fuel 0 and ifuel 1
(.\AEAD_GCM.fst(98,0-110,32))
Query (AEAD_GCM.genPost, 1)	succeeded (with hint) in 246 milliseconds with fuel 0 and ifuel 1
(.\StatefulLHAE.fst(74,18-74,42))
Query (StatefulLHAE.encrypt, 22)	succeeded (with hint) in 251 milliseconds with fuel 0 and ifuel 0
(.\StreamDeltas.fst(27,0-32,26))
Query (StreamDeltas.project_one_frag, 1)	succeeded (with hint) in 260 milliseconds with fuel 1 and ifuel 1
(.\Content.fst(186,0-188,43))
Query (Content.mk_ct_rg, 2)	succeeded (with hint) in 250 milliseconds with fuel 0 and ifuel 1
(.\StAE.fst(70,12-70,13))
Query (StAE.__proj__Stream__item___1, 1)	succeeded (with hint) in 252 milliseconds with fuel 0 and ifuel 1
(.\StreamPlain.fst(169,17-169,24))
Query (StreamPlain.scan_pad_correct, 12)	succeeded (with hint) in 244 milliseconds with fuel 1 and ifuel 0
(.\TLSConstants.fst(1604,0-1623,104))
Query (TLSConstants.parseConfigurationExtensions, 1)	succeeded (with hint) in 153 milliseconds with fuel 1 and ifuel 2
(.\StreamAE.fst(168,41-168,64))
Query (StreamAE.genReader, 19)	succeeded (with hint) in 251 milliseconds with fuel 0 and ifuel 1
(.\AEAD_GCM.fst(99,11-99,20))
Query (AEAD_GCM.genPost, 2)	succeeded (with hint) in 246 milliseconds with fuel 0 and ifuel 1
(.\StreamDeltas.fst(34,0-34,59))
Query (StreamDeltas.project_deltas, 1)	succeeded (with hint) in 253 milliseconds with fuel 1 and ifuel 1
(.\StatefulLHAE.fst(79,7-79,24))
Query (StatefulLHAE.encrypt, 23)	succeeded (with hint) in 253 milliseconds with fuel 0 and ifuel 0
(.\TLSConstants.fst(1630,0-1630,49))
Query (TLSConstants.sigHashAlgBytes, 1)	succeeded (with hint) in 94 milliseconds with fuel 1 and ifuel 2
(.\Content.fst(189,0-189,27))
Query (Content.mk_ct_rg, 3)	succeeded (with hint) in 252 milliseconds with fuel 0 and ifuel 1
(.\StAE.fst(70,12-70,13))
Query (StAE.__proj__Stream__item___1, 2)	succeeded (with hint) in 251 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(1631,0-1634,14))
Query (TLSConstants.sigHashAlgBytes, 2)	succeeded (with hint) in 99 milliseconds with fuel 1 and ifuel 2
Hint-info (.\Content.fst(21,0-25,84)): Replay succeeded in 227 milliseconds
Hint-info (.\Content.fst(21,0-25,84)): Replay succeeded in 220 milliseconds
Hint-info (.\Content.fst(21,0-25,84)): Replay succeeded in 224 milliseconds
Hint-info (.\Content.fst(21,0-25,84)): Replay succeeded in 230 milliseconds
Hint-info (.\Content.fst(21,0-25,84)): Replay succeeded in 227 milliseconds
Hint-info (.\Content.fst(21,0-25,84)): Replay succeeded in 230 milliseconds
Hint-info (.\Content.fst(22,4-22,12)): Replay succeeded in 232 milliseconds
Hint-info (.\Content.fst(22,18-22,20)): Replay succeeded in 241 milliseconds
Hint-info (.\Content.fst(22,18-22,20)): Replay succeeded in 792 milliseconds
Hint-info (.\Content.fst(22,18-22,20)): Replay succeeded in 226 milliseconds
Hint-info (.\Content.fst(23,4-23,16)): Replay succeeded in 223 milliseconds
Hint-info (.\Content.fst(23,18-23,20)): Replay succeeded in 224 milliseconds
Hint-info (.\Content.fst(23,33-23,34)): Replay succeeded in 225 milliseconds
Hint-info (.\Content.fst(23,33-23,34)): Replay succeeded in 243 milliseconds
Hint-info (.\Content.fst(24,4-24,10)): Replay succeeded in 257 milliseconds
Hint-info (.\Content.fst(24,18-24,20)): Replay succeeded in 243 milliseconds
Hint-info (.\Content.fst(24,18-24,20)): Replay succeeded in 252 milliseconds
Hint-info (.\Content.fst(25,4-25,11)): Replay succeeded in 225 milliseconds
Hint-info (.\Content.fst(25,18-25,20)): Replay succeeded in 226 milliseconds
Hint-info (.\Content.fst(25,33-25,34)): Replay succeeded in 219 milliseconds
Hint-info (.\Content.fst(25,33-25,34)): Replay succeeded in 227 milliseconds
Hint-info (.\Content.fst(32,0-34,38)): Replay succeeded in 223 milliseconds
Hint-info (.\Content.fst(46,0-56,13)): Replay succeeded in 251 milliseconds
Hint-info (.\Content.fst(47,5-47,22)): Replay succeeded in 220 milliseconds
Hint-info (.\Content.fst(61,0-62,68)): Replay succeeded in 219 milliseconds
Hint-info (.\Content.fst(63,0-63,38)): Replay succeeded in 233 milliseconds
Hint-info (.\Content.fst(69,4-69,22)): Replay succeeded in 225 milliseconds
Hint-info (.\Content.fst(70,4-70,9)): Replay succeeded in 223 milliseconds
Hint-info (.\Content.fst(71,4-71,13)): Replay succeeded in 223 milliseconds
Hint-info (.\Content.fst(72,4-72,20)): Replay succeeded in 222 milliseconds
Hint-info (.\Content.fst(74,39-74,63)): Replay succeeded in 224 milliseconds
Hint-info (.\Content.fst(76,0-76,42)): Replay succeeded in 224 milliseconds
Hint-info (.\Content.fst(77,14-81,35)): Replay succeeded in 240 milliseconds
Hint-info (.\Content.fst(83,13-83,31)): Replay succeeded in 219 milliseconds
Hint-info (.\Content.fst(84,0-90,67)): Replay succeeded in 223 milliseconds
Hint-info (.\Content.fst(94,11-94,46)): Replay succeeded in 221 milliseconds
Hint-info (.\Content.fst(96,0-96,21)): Replay succeeded in 236 milliseconds
Hint-info (.\Content.fst(98,19-98,20)): Replay succeeded in 223 milliseconds
Hint-info (.\Content.fst(100,11-100,59)): Replay succeeded in 221 milliseconds
Hint-info (.\Content.fst(101,3-101,45)): Replay succeeded in 222 milliseconds
Hint-info (.\Content.fst(102,0-102,22)): Replay succeeded in 241 milliseconds
Hint-info (.\Content.fst(104,17-108,32)): Replay succeeded in 244 milliseconds
Hint-info (.\Content.fst(114,0-118,27)): Replay succeeded in 246 milliseconds
Hint-info (.\Content.fst(121,0-125,29)): Replay succeeded in 244 milliseconds
Hint-info (.\Content.fst(131,0-131,50)): Replay succeeded in 242 milliseconds
Hint-info (.\Content.fst(134,0-146,12)): Replay succeeded in 293 milliseconds
Hint-info (.\Content.fst(154,0-159,43)): Replay succeeded in 450 milliseconds
Hint-info (.\Content.fst(161,63-161,82)): Replay succeeded in 240 milliseconds
Hint-info (.\Content.fst(162,0-167,43)): Replay succeeded in 255 milliseconds
Hint-info (.\Content.fst(171,0-175,30)): Replay succeeded in 247 milliseconds
Hint-info (.\Content.fst(173,48-173,60)): Replay succeeded in 243 milliseconds
Hint-info (.\Content.fst(174,48-174,60)): Replay succeeded in 241 milliseconds
Hint-info (.\Content.fst(178,21-178,37)): Replay succeeded in 245 milliseconds
Hint-info (.\Content.fst(179,0-184,87)): Replay succeeded in 273 milliseconds
Hint-info (.\Content.fst(187,33-187,74)): Replay succeeded in 254 milliseconds
Hint-info (.\Content.fst(186,0-188,43)): Replay succeeded in 250 milliseconds
Hint-info (.\Content.fst(189,0-189,27)): Replay succeeded in 252 milliseconds
Verified module: Content (20684 milliseconds)
All verification conditions discharged successfully
(.\AEAD_GCM.fst(102,20-102,44))
Query (AEAD_GCM.genPost, 3)	succeeded (with hint) in 244 milliseconds with fuel 0 and ifuel 1
(.\StreamAE.fst(168,14-168,38))
Query (StreamAE.genReader, 20)	succeeded (with hint) in 247 milliseconds with fuel 0 and ifuel 1
(.\StreamPlain.fst(180,8-180,22))
Query (StreamPlain.inverse_scan, 1)	succeeded (with hint) in 233 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(1637,21-1637,47))
Query (TLSConstants.parseSigHashAlg, 1)	succeeded (with hint) in 87 milliseconds with fuel 1 and ifuel 2
(.\StreamDeltas.fst(38,0-38,66))
Query (StreamDeltas.stream_deltas, 1)	succeeded (with hint) in 243 milliseconds with fuel 1 and ifuel 1
(.\StatefulLHAE.fst(80,21-80,41))
Query (StatefulLHAE.encrypt, 24)	succeeded (with hint) in 244 milliseconds with fuel 0 and ifuel 0
(.\TLSConstants.fst(1638,0-1647,22))
Query (TLSConstants.parseSigHashAlg, 2)	succeeded (with hint) in 106 milliseconds with fuel 1 and ifuel 2
(.\StAE.fst(71,4-71,10))
Query (StAE.uu___is_StLHAE, 1)	succeeded (with hint) in 243 milliseconds with fuel 0 and ifuel 1
(.\AEAD_GCM.fst(103,2-103,31))
Query (AEAD_GCM.genPost, 4)	succeeded (with hint) in 247 milliseconds with fuel 0 and ifuel 1
(.\StreamPlain.fst(181,9-181,32))
Query (StreamPlain.inverse_scan, 2)	succeeded (with hint) in 232 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(1653,0-1654,53))
Query (TLSConstants.sigHashAlgsBytes, 1)	succeeded (with hint) in 95 milliseconds with fuel 1 and ifuel 2
(.\StreamDeltas.fst(40,0-42,44))
Query (StreamDeltas.stream_deltas_snoc, 1)	succeeded (with hint) in 252 milliseconds with fuel 1 and ifuel 1
(.\StatefulLHAE.fst(81,10-81,22))
Query (StatefulLHAE.encrypt, 25)	succeeded (with hint) in 254 milliseconds with fuel 0 and ifuel 0
(.\StreamAE.fst(179,0-184,51))
Query (StreamAE.coerce, 1)	succeeded (with hint) in 283 milliseconds with fuel 0 and ifuel 1
(.\StAE.fst(71,12-71,13))
Query (StAE.__proj__StLHAE__item__u, 1)	succeeded (with hint) in 253 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(1655,0-1667,13))
Query (TLSConstants.sigHashAlgsBytes, 2)	succeeded (with hint) in 121 milliseconds with fuel 1 and ifuel 2
(.\StreamPlain.fst(181,37-181,55))
Query (StreamPlain.inverse_scan, 3)	succeeded (with hint) in 246 milliseconds with fuel 0 and ifuel 1
(.\AEAD_GCM.fst(104,10-104,30))
Query (AEAD_GCM.genPost, 5)	succeeded (with hint) in 246 milliseconds with fuel 0 and ifuel 1
(.\StreamDeltas.fst(45,0-47,50))
Query (StreamDeltas.deltas_prefix, 1)	succeeded (with hint) in 246 milliseconds with fuel 1 and ifuel 1
(.\TLSConstants.fst(1670,22-1670,49))
Query (TLSConstants.parseSigHashAlgs, 1)	succeeded (with hint) in 94 milliseconds with fuel 1 and ifuel 2
(.\StreamAE.fst(188,37-188,46))
Query (StreamAE.leak, 1)	succeeded (with hint) in 245 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(1672,2-1683,104))
Query (TLSConstants.parseSigHashAlgs, 2)	succeeded (with hint) in 95 milliseconds with fuel 1 and ifuel 2
(.\StAE.fst(71,12-71,13))
Query (StAE.__proj__StLHAE__item___1, 1)	succeeded (with hint) in 252 milliseconds with fuel 0 and ifuel 1
(.\StatefulLHAE.fst(59,0-81,43))
Query (StatefulLHAE.encrypt, 26)	succeeded (with hint) in 300 milliseconds with fuel 0 and ifuel 0
(.\StreamPlain.fst(182,9-182,19))
Query (StreamPlain.inverse_scan, 4)	succeeded (with hint) in 248 milliseconds with fuel 0 and ifuel 1
(.\AEAD_GCM.fst(105,24-105,44))
Query (AEAD_GCM.genPost, 6)	succeeded (with hint) in 248 milliseconds with fuel 0 and ifuel 1
(.\StreamDeltas.fst(49,0-51,61))
Query (StreamDeltas.project_fragment_deltas, 1)	succeeded (with hint) in 252 milliseconds with fuel 1 and ifuel 1
(.\StreamAE.fst(190,0-192,36))
Query (StreamAE.leak, 2)	succeeded (with hint) in 246 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(1671,0-1683,104))
Query (TLSConstants.parseSigHashAlgs, 3)	succeeded (with hint) in 139 milliseconds with fuel 1 and ifuel 2
(.\StAE.fst(71,12-71,13))
Query (StAE.__proj__StLHAE__item___1, 2)	succeeded (with hint) in 232 milliseconds with fuel 0 and ifuel 1
(.\AEAD_GCM.fst(106,2-106,43))
Query (AEAD_GCM.genPost, 7)	succeeded (with hint) in 228 milliseconds with fuel 0 and ifuel 1
(.\StreamPlain.fst(183,8-183,26))
Query (StreamPlain.inverse_scan, 5)	succeeded (with hint) in 243 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(1678,23-1678,30))
Query (TLSConstants.parseSigHashAlgs, 4)	succeeded (with hint) in 88 milliseconds with fuel 1 and ifuel 2
(.\StreamDeltas.fst(52,0-62,9))
Query (StreamDeltas.project_fragment_deltas, 2)	succeeded (with hint) in 250 milliseconds with fuel 1 and ifuel 1
(.\StatefulLHAE.fst(83,0-87,31))
Query (StatefulLHAE.encrypt, 27)	succeeded (with hint) in 255 milliseconds with fuel 0 and ifuel 0
(.\TLSConstants.fst(1679,11-1679,106))
Query (TLSConstants.parseSigHashAlgs, 5)	succeeded (with hint) in 86 milliseconds with fuel 1 and ifuel 2
(.\AEAD_GCM.fst(106,8-106,28))
Query (AEAD_GCM.genPost, 8)	succeeded (with hint) in 223 milliseconds with fuel 0 and ifuel 1
(.\StAE.fst(73,0-75,27))
Query (StAE.stream_state, 1)	succeeded (with hint) in 236 milliseconds with fuel 0 and ifuel 1
(.\StreamAE.fst(206,6-206,30))
Query (StreamAE.encrypt, 1)	succeeded (with hint) in 230 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(1680,9-1680,21))
Query (TLSConstants.parseSigHashAlgs, 6)	succeeded (with hint) in 83 milliseconds with fuel 1 and ifuel 2
(.\TLSConstants.fst(1683,17-1683,104))
Query (TLSConstants.parseSigHashAlgs, 7)	succeeded (with hint) in 85 milliseconds with fuel 1 and ifuel 2
(.\StreamPlain.fst(184,10-184,60))
Query (StreamPlain.inverse_scan, 6)	succeeded (with hint) in 230 milliseconds with fuel 0 and ifuel 1
(.\StreamDeltas.fst(60,15-60,47))
Query (StreamDeltas.project_fragment_deltas, 3)	succeeded (with hint) in 230 milliseconds with fuel 1 and ifuel 1
(.\StatefulLHAE.fst(84,13-84,35))
Query (StatefulLHAE.encrypt, 28)	succeeded (with hint) in 229 milliseconds with fuel 0 and ifuel 0
(.\TLSConstants.fst(1691,0-1691,71))
Query (TLSConstants.clientKeyShare, 1)	succeeded (with hint) in 85 milliseconds with fuel 1 and ifuel 2
(.\AEAD_GCM.fst(107,2-107,26))
Query (AEAD_GCM.genPost, 9)	succeeded (with hint) in 224 milliseconds with fuel 0 and ifuel 1
(.\StreamAE.fst(206,6-206,30))
Query (StreamAE.encrypt, 2)	succeeded (with hint) in 232 milliseconds with fuel 0 and ifuel 1
(.\StAE.fst(77,0-79,27))
Query (StAE.stlhae_state, 1)	succeeded (with hint) in 233 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(1699,4-1699,18))
Query (TLSConstants.uu___is_ClientKeyShare, 1)	succeeded (with hint) in 88 milliseconds with fuel 1 and ifuel 2
(.\StreamPlain.fst(177,0-184,62))
Query (StreamPlain.inverse_scan, 7)	succeeded (with hint) in 230 milliseconds with fuel 0 and ifuel 1
(.\StreamDeltas.fst(64,0-67,73))
Query (StreamDeltas.stream_deltas_snoc2, 1)	succeeded (with hint) in 238 milliseconds with fuel 1 and ifuel 1
(.\TLSConstants.fst(1699,4-1699,18))
Query (TLSConstants.__proj__ClientKeyShare__item___0, 1)	succeeded (with hint) in 88 milliseconds with fuel 1 and ifuel 2
(.\StatefulLHAE.fst(84,13-84,35))
Query (StatefulLHAE.encrypt, 29)	succeeded (with hint) in 240 milliseconds with fuel 0 and ifuel 0
(.\TLSConstants.fst(1700,4-1700,18))
Query (TLSConstants.uu___is_ServerKeyShare, 1)	succeeded (with hint) in 84 milliseconds with fuel 1 and ifuel 2
(.\StreamAE.fst(206,6-206,30))
Query (StreamAE.encrypt, 3)	succeeded (with hint) in 224 milliseconds with fuel 0 and ifuel 1
(.\StAE.fst(82,0-85,33))
Query (StAE.region, 1)	succeeded (with hint) in 228 milliseconds with fuel 0 and ifuel 1
(.\AEAD_GCM.fst(108,17-108,43))
Query (AEAD_GCM.genPost, 10)	succeeded (with hint) in 224 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(1700,4-1700,18))
Query (TLSConstants.__proj__ServerKeyShare__item___0, 1)	succeeded (with hint) in 87 milliseconds with fuel 1 and ifuel 2
(.\StreamDeltas.fst(65,23-65,78))
Query (StreamDeltas.stream_deltas_snoc2, 2)	succeeded (with hint) in 226 milliseconds with fuel 1 and ifuel 1
(.\StatefulLHAE.fst(84,13-84,35))
Query (StatefulLHAE.encrypt, 30)	succeeded (with hint) in 229 milliseconds with fuel 0 and ifuel 0
(.\StreamPlain.fst(185,0-188,45))
Query (StreamPlain.inverse_scan, 8)	succeeded (with hint) in 241 milliseconds with fuel 1 and ifuel 0
(.\TLSConstants.fst(1704,0-1706,25))
Query (TLSConstants.keyShareEntryBytes, 1)	succeeded (with hint) in 95 milliseconds with fuel 1 and ifuel 2
(.\StreamAE.fst(206,15-206,30))
Query (StreamAE.encrypt, 4)	succeeded (with hint) in 225 milliseconds with fuel 0 and ifuel 1
(.\AEAD_GCM.fst(108,47-108,68))
Query (AEAD_GCM.genPost, 11)	succeeded (with hint) in 224 milliseconds with fuel 0 and ifuel 1
(.\StAE.fst(84,18-84,40))
Query (StAE.region, 2)	succeeded (with hint) in 230 milliseconds with fuel 0 and ifuel 1
Hint-info (.\MasterSecret.fst(18,0-24,1)): Replay succeeded in 240 milliseconds
Hint-info (.\MasterSecret.fst(28,0-32,17)): Replay succeeded in 236 milliseconds
Hint-info (.\MasterSecret.fst(31,27-31,49)): Replay succeeded in 246 milliseconds
Hint-info (.\MasterSecret.fst(34,0-35,75)): Replay succeeded in 247 milliseconds
Hint-info (.\MasterSecret.fst(38,0-41,21)): Replay succeeded in 237 milliseconds
Hint-info (.\MasterSecret.fst(39,25-39,44)): Replay succeeded in 235 milliseconds
Hint-info (.\MasterSecret.fst(40,19-40,32)): Replay succeeded in 233 milliseconds
Hint-info (.\MasterSecret.fst(43,8-44,102)): Replay succeeded in 234 milliseconds
Hint-info (.\MasterSecret.fst(46,8-48,90)): Replay succeeded in 232 milliseconds
Hint-info (.\MasterSecret.fst(47,12-47,29)): Replay succeeded in 243 milliseconds
Hint-info (.\MasterSecret.fst(48,42-48,90)): Replay succeeded in 236 milliseconds
Hint-info (.\MasterSecret.fst(57,2-57,20)): Replay succeeded in 236 milliseconds
Hint-info (.\MasterSecret.fst(58,11-58,27)): Replay succeeded in 236 milliseconds
Hint-info (.\MasterSecret.fst(60,2-60,23)): Replay succeeded in 250 milliseconds
Hint-info (.\MasterSecret.fst(62,0-96,7)): Replay succeeded in 297 milliseconds
Hint-info (.\MasterSecret.fst(69,26-69,44)): Replay succeeded in 232 milliseconds
Hint-info (.\MasterSecret.fst(73,7-73,29)): Replay succeeded in 233 milliseconds
Hint-info (.\MasterSecret.fst(75,16-75,49)): Replay succeeded in 227 milliseconds
Hint-info (.\MasterSecret.fst(78,20-78,44)): Replay succeeded in 231 milliseconds
Hint-info (.\MasterSecret.fst(79,21-79,39)): Replay succeeded in 227 milliseconds
Hint-info (.\MasterSecret.fst(80,20-80,38)): Replay succeeded in 226 milliseconds
Hint-info (.\MasterSecret.fst(83,17-83,34)): Replay succeeded in 229 milliseconds
Hint-info (.\MasterSecret.fst(84,32-84,59)): Replay succeeded in 238 milliseconds
Hint-info (.\MasterSecret.fst(84,44-84,59)): Replay succeeded in 233 milliseconds
Hint-info (.\MasterSecret.fst(69,26-69,44)): Replay succeeded in 234 milliseconds
Hint-info (.\MasterSecret.fst(73,7-73,29)): Replay succeeded in 233 milliseconds
Hint-info (.\MasterSecret.fst(75,16-75,49)): Replay succeeded in 226 milliseconds
Hint-info (.\MasterSecret.fst(78,20-78,44)): Replay succeeded in 227 milliseconds
Hint-info (.\MasterSecret.fst(79,21-79,39)): Replay succeeded in 229 milliseconds
Hint-info (.\MasterSecret.fst(80,20-80,38)): Replay succeeded in 233 milliseconds
Hint-info (.\MasterSecret.fst(83,17-83,34)): Replay succeeded in 227 milliseconds
Hint-info (.\MasterSecret.fst(84,32-84,59)): Replay succeeded in 227 milliseconds
Hint-info (.\MasterSecret.fst(84,44-84,59)): Replay succeeded in 230 milliseconds
Hint-info (.\MasterSecret.fst(85,4-85,22)): Replay succeeded in 229 milliseconds
Hint-info (.\MasterSecret.fst(86,10-86,28)): Replay succeeded in 242 milliseconds
Hint-info (.\MasterSecret.fst(91,6-91,26)): Replay succeeded in 246 milliseconds
Hint-info (.\MasterSecret.fst(91,6-91,26)): Replay succeeded in 247 milliseconds
Verified module: MasterSecret (29593 milliseconds)
All verification conditions discharged successfully
(.\StreamDeltas.fst(65,23-65,78))
Query (StreamDeltas.stream_deltas_snoc2, 3)	succeeded (with hint) in 230 milliseconds with fuel 1 and ifuel 1
(.\TLSConstants.fst(1710,0-1719,22))
Query (TLSConstants.parseKeyShareEntry, 1)	succeeded (with hint) in 103 milliseconds with fuel 1 and ifuel 2
(.\StreamPlain.fst(190,18-190,71))
Query (StreamPlain.goodrepr, 1)	succeeded (with hint) in 228 milliseconds with fuel 0 and ifuel 1
(.\StreamAE.fst(206,15-206,30))
Query (StreamAE.encrypt, 5)	succeeded (with hint) in 230 milliseconds with fuel 0 and ifuel 1
(.\AEAD_GCM.fst(109,2-109,31))
Query (AEAD_GCM.genPost, 12)	succeeded (with hint) in 234 milliseconds with fuel 0 and ifuel 1
(.\StAE.fst(85,18-85,33))
Query (StAE.region, 3)	succeeded (with hint) in 234 milliseconds with fuel 0 and ifuel 1
(.\StatefulLHAE.fst(93,23-93,47))
Query (StatefulLHAE.decrypt, 1)	succeeded (with hint) in 282 milliseconds with fuel 0 and ifuel 1
(.\StreamDeltas.fst(76,10-76,49))
Query (StreamDeltas.encrypt, 1)	succeeded (with hint) in 232 milliseconds with fuel 1 and ifuel 1
(.\TLSConstants.fst(1727,0-1734,24))
Query (TLSConstants.inverse_keyShareEntry, 1)	succeeded (with hint) in 232 milliseconds with fuel 1 and ifuel 2
(.\StreamPlain.fst(190,33-190,69))
Query (StreamPlain.goodrepr, 2)	succeeded (with hint) in 232 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(1736,0-1739,68))
Query (TLSConstants.pinverse_keyShareEntry, 1)	succeeded (with hint) in 87 milliseconds with fuel 1 and ifuel 2
(.\StreamAE.fst(209,15-209,69))
Query (StreamAE.encrypt, 6)	succeeded (with hint) in 256 milliseconds with fuel 0 and ifuel 1
(.\StAE.fst(88,0-91,46))
Query (StAE.log_region, 1)	succeeded (with hint) in 241 milliseconds with fuel 0 and ifuel 1
(.\AEAD_GCM.fst(109,2-109,31))
Query (AEAD_GCM.genPost, 13)	succeeded (with hint) in 288 milliseconds with fuel 0 and ifuel 1
(.\StreamDeltas.fst(78,5-78,62))
Query (StreamDeltas.encrypt, 2)	succeeded (with hint) in 230 milliseconds with fuel 1 and ifuel 1
(.\StatefulLHAE.fst(93,23-93,47))
Query (StatefulLHAE.decrypt, 2)	succeeded (with hint) in 248 milliseconds with fuel 0 and ifuel 0
(.\StreamPlain.fst(195,32-195,58))
Query (StreamPlain.mk_plain, 1)	succeeded (with hint) in 226 milliseconds with fuel 0 and ifuel 1
(.\StreamAE.fst(210,6-210,35))
Query (StreamAE.encrypt, 7)	succeeded (with hint) in 227 milliseconds with fuel 0 and ifuel 1
(.\StAE.fst(90,18-90,44))
Query (StAE.log_region, 2)	succeeded (with hint) in 240 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(1740,0-1740,33))
Query (TLSConstants.pinverse_keyShareEntry, 2)	succeeded (with hint) in 320 milliseconds with fuel 1 and ifuel 2
(.\AEAD_GCM.fst(109,2-109,31))
Query (AEAD_GCM.genPost, 14)	succeeded (with hint) in 289 milliseconds with fuel 0 and ifuel 1
(.\StatefulLHAE.fst(93,23-93,47))
Query (StatefulLHAE.decrypt, 3)	succeeded (with hint) in 235 milliseconds with fuel 0 and ifuel 0
(.\StreamDeltas.fst(72,0-81,64))
Query (StreamDeltas.encrypt, 3)	succeeded (with hint) in 278 milliseconds with fuel 1 and ifuel 1
(.\StreamPlain.fst(192,0-195,61))
Query (StreamPlain.mk_plain, 2)	succeeded (with hint) in 228 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(1746,0-1758,13))
Query (TLSConstants.keyShareEntriesBytes, 1)	succeeded (with hint) in 105 milliseconds with fuel 1 and ifuel 2
(.\StreamAE.fst(210,6-210,35))
Query (StreamAE.encrypt, 8)	succeeded (with hint) in 233 milliseconds with fuel 0 and ifuel 1
(.\StAE.fst(91,18-91,46))
Query (StAE.log_region, 3)	succeeded (with hint) in 244 milliseconds with fuel 0 and ifuel 1
(.\StatefulLHAE.fst(95,13-95,37))
Query (StatefulLHAE.decrypt, 4)	succeeded (with hint) in 229 milliseconds with fuel 0 and ifuel 0
(.\AEAD_GCM.fst(110,2-110,32))
Query (AEAD_GCM.genPost, 15)	succeeded (with hint) in 230 milliseconds with fuel 0 and ifuel 1
(.\StreamDeltas.fst(82,0-89,5))
Query (StreamDeltas.encrypt, 4)	succeeded (with hint) in 236 milliseconds with fuel 1 and ifuel 1
Hint-info (.\StreamDeltas.fst(20,0-20,56)): Replay succeeded in 255 milliseconds
Hint-info (.\StreamDeltas.fst(27,0-32,26)): Replay succeeded in 260 milliseconds
Hint-info (.\StreamDeltas.fst(34,0-34,59)): Replay succeeded in 253 milliseconds
Hint-info (.\StreamDeltas.fst(38,0-38,66)): Replay succeeded in 243 milliseconds
Hint-info (.\StreamDeltas.fst(40,0-42,44)): Replay succeeded in 252 milliseconds
Hint-info (.\StreamDeltas.fst(45,0-47,50)): Replay succeeded in 246 milliseconds
Hint-info (.\StreamDeltas.fst(49,0-51,61)): Replay succeeded in 252 milliseconds
Hint-info (.\StreamDeltas.fst(52,0-62,9)): Replay succeeded in 250 milliseconds
Hint-info (.\StreamDeltas.fst(60,15-60,47)): Replay succeeded in 230 milliseconds
Hint-info (.\StreamDeltas.fst(64,0-67,73)): Replay succeeded in 238 milliseconds
Hint-info (.\StreamDeltas.fst(65,23-65,78)): Replay succeeded in 226 milliseconds
Hint-info (.\StreamDeltas.fst(65,23-65,78)): Replay succeeded in 230 milliseconds
Hint-info (.\StreamDeltas.fst(76,10-76,49)): Replay succeeded in 232 milliseconds
Hint-info (.\StreamDeltas.fst(78,5-78,62)): Replay succeeded in 230 milliseconds
Hint-info (.\StreamDeltas.fst(72,0-81,64)): Replay succeeded in 278 milliseconds
Hint-info (.\StreamDeltas.fst(82,0-89,5)): Replay succeeded in 236 milliseconds
Verified module: StreamDeltas (5758 milliseconds)
All verification conditions discharged successfully
(.\TLSConstants.fst(1762,0-1779,108))
Query (TLSConstants.parseKeyShareEntries, 1)	succeeded (with hint) in 146 milliseconds with fuel 1 and ifuel 2
(.\StreamAE.fst(210,6-210,35))
Query (StreamAE.encrypt, 9)	succeeded (with hint) in 226 milliseconds with fuel 0 and ifuel 1
(.\StAE.fst(107,0-112,12))
Query (StAE.ideal_log, 1)	succeeded (with hint) in 240 milliseconds with fuel 0 and ifuel 1
(.\StreamPlain.fst(196,0-199,19))
Query (StreamPlain.mk_plain, 3)	succeeded (with hint) in 242 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(1783,0-1783,54))
Query (TLSConstants.clientKeyShareBytes, 1)	succeeded (with hint) in 88 milliseconds with fuel 1 and ifuel 2
(.\StatefulLHAE.fst(95,13-95,37))
Query (StatefulLHAE.decrypt, 5)	succeeded (with hint) in 237 milliseconds with fuel 0 and ifuel 0
(.\AEAD_GCM.fst(110,2-110,26))
Query (AEAD_GCM.genPost, 16)	succeeded (with hint) in 269 milliseconds with fuel 0 and ifuel 1
(.\StreamAE.fst(210,17-210,32))
Query (StreamAE.encrypt, 10)	succeeded (with hint) in 244 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(1788,0-1794,22))
Query (TLSConstants.parseClientKeyShare, 1)	succeeded (with hint) in 151 milliseconds with fuel 1 and ifuel 2
(.\TLSConstants.fst(1798,0-1798,52))
Query (TLSConstants.serverKeyShareBytes, 1)	succeeded (with hint) in 94 milliseconds with fuel 1 and ifuel 2
(.\StAE.fst(114,0-117,55))
Query (StAE.ilog, 1)	succeeded (with hint) in 259 milliseconds with fuel 0 and ifuel 1
(.\StatefulLHAE.fst(95,13-95,37))
Query (StatefulLHAE.decrypt, 6)	succeeded (with hint) in 247 milliseconds with fuel 0 and ifuel 0
(.\StreamPlain.fst(198,17-198,23))
Query (StreamPlain.mk_plain, 4)	succeeded (with hint) in 255 milliseconds with fuel 0 and ifuel 1
(.\AEAD_GCM.fst(110,2-110,26))
Query (AEAD_GCM.genPost, 17)	succeeded (with hint) in 256 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(1802,0-1802,48))
Query (TLSConstants.parseServerKeyShare, 1)	succeeded (with hint) in 94 milliseconds with fuel 1 and ifuel 2
(.\StreamAE.fst(210,17-210,32))
Query (StreamAE.encrypt, 11)	succeeded (with hint) in 256 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(1806,20-1808,49))
Query (TLSConstants.keyShareBytes, 1)	succeeded (with hint) in 96 milliseconds with fuel 1 and ifuel 2
(.\StatefulLHAE.fst(97,18-97,39))
Query (StatefulLHAE.decrypt, 7)	succeeded (with hint) in 254 milliseconds with fuel 0 and ifuel 0
(.\StAE.fst(116,18-116,51))
Query (StAE.ilog, 2)	succeeded (with hint) in 289 milliseconds with fuel 0 and ifuel 1
(.\StreamPlain.fst(199,15-199,19))
Query (StreamPlain.mk_plain, 5)	succeeded (with hint) in 251 milliseconds with fuel 0 and ifuel 1
(.\AEAD_GCM.fst(110,2-110,26))
Query (AEAD_GCM.genPost, 18)	succeeded (with hint) in 247 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(1812,0-1830,92))
Query (TLSConstants.parseKeyShare, 1)	succeeded (with hint) in 121 milliseconds with fuel 1 and ifuel 2
(.\StreamAE.fst(211,6-211,63))
Query (StreamAE.encrypt, 12)	succeeded (with hint) in 255 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(1839,0-1840,16))
Query (TLSConstants.pskIdentityBytes, 1)	succeeded (with hint) in 100 milliseconds with fuel 1 and ifuel 2
(.\StAE.fst(116,18-116,51))
Query (StAE.ilog, 3)	succeeded (with hint) in 253 milliseconds with fuel 0 and ifuel 1
Hint-info (.\StreamPlain.fst(37,50-37,80)): Replay succeeded in 223 milliseconds
Hint-info (.\StreamPlain.fst(39,0-40,68)): Replay succeeded in 238 milliseconds
Hint-info (.\StreamPlain.fst(52,0-52,80)): Replay succeeded in 225 milliseconds
Hint-info (.\StreamPlain.fst(53,0-56,20)): Replay succeeded in 247 milliseconds
Hint-info (.\StreamPlain.fst(59,85-59,109)): Replay succeeded in 236 milliseconds
Hint-info (.\StreamPlain.fst(59,0-59,111)): Replay succeeded in 239 milliseconds
Hint-info (.\StreamPlain.fst(60,0-63,20)): Replay succeeded in 269 milliseconds
Hint-info (.\StreamPlain.fst(65,15-65,68)): Replay succeeded in 228 milliseconds
Hint-info (.\StreamPlain.fst(79,73-79,92)): Replay succeeded in 228 milliseconds
Hint-info (.\StreamPlain.fst(77,0-82,61)): Replay succeeded in 801 milliseconds
Hint-info (.\StreamPlain.fst(84,0-147,57)): Replay succeeded in 2252 milliseconds
Hint-info (.\StreamPlain.fst(90,9-90,55)): Replay succeeded in 235 milliseconds
Hint-info (.\StreamPlain.fst(94,11-94,69)): Replay succeeded in 241 milliseconds
Hint-info (.\StreamPlain.fst(98,9-98,27)): Replay succeeded in 229 milliseconds
Hint-info (.\StreamPlain.fst(102,8-102,17)): Replay succeeded in 230 milliseconds
Hint-info (.\StreamPlain.fst(105,1-105,63)): Replay succeeded in 257 milliseconds
Hint-info (.\StreamPlain.fst(106,11-106,73)): Replay succeeded in 238 milliseconds
Hint-info (.\StreamPlain.fst(111,11-111,58)): Replay succeeded in 237 milliseconds
Hint-info (.\StreamPlain.fst(112,11-112,54)): Replay succeeded in 235 milliseconds
Hint-info (.\StreamPlain.fst(121,8-121,17)): Replay succeeded in 241 milliseconds
Hint-info (.\StreamPlain.fst(122,19-122,26)): Replay succeeded in 237 milliseconds
Hint-info (.\StreamPlain.fst(124,11-124,62)): Replay succeeded in 235 milliseconds
Hint-info (.\StreamPlain.fst(127,7-127,12)): Replay succeeded in 223 milliseconds
Hint-info (.\StreamPlain.fst(127,18-127,69)): Replay succeeded in 232 milliseconds
Hint-info (.\StreamPlain.fst(130,1-130,75)): Replay succeeded in 226 milliseconds
Hint-info (.\StreamPlain.fst(136,8-136,17)): Replay succeeded in 235 milliseconds
Hint-info (.\StreamPlain.fst(139,6-139,80)): Replay succeeded in 235 milliseconds
Hint-info (.\StreamPlain.fst(146,6-146,15)): Replay succeeded in 243 milliseconds
Hint-info (.\StreamPlain.fst(147,11-147,57)): Replay succeeded in 257 milliseconds
Hint-info (.\StreamPlain.fst(152,25-152,39)): Replay succeeded in 241 milliseconds
Hint-info (.\StreamPlain.fst(153,11-153,34)): Replay succeeded in 241 milliseconds
Hint-info (.\StreamPlain.fst(153,39-153,57)): Replay succeeded in 243 milliseconds
Hint-info (.\StreamPlain.fst(154,11-154,21)): Replay succeeded in 242 milliseconds
Hint-info (.\StreamPlain.fst(155,10-155,28)): Replay succeeded in 244 milliseconds
Hint-info (.\StreamPlain.fst(156,12-156,52)): Replay succeeded in 260 milliseconds
Hint-info (.\StreamPlain.fst(149,0-156,54)): Replay succeeded in 267 milliseconds
Hint-info (.\StreamPlain.fst(160,0-175,45)): Replay succeeded in 467 milliseconds
Hint-info (.\StreamPlain.fst(162,5-162,23)): Replay succeeded in 239 milliseconds
Hint-info (.\StreamPlain.fst(164,8-164,41)): Replay succeeded in 239 milliseconds
Hint-info (.\StreamPlain.fst(168,17-168,24)): Replay succeeded in 245 milliseconds
Hint-info (.\StreamPlain.fst(169,17-169,24)): Replay succeeded in 244 milliseconds
Hint-info (.\StreamPlain.fst(180,8-180,22)): Replay succeeded in 233 milliseconds
Hint-info (.\StreamPlain.fst(181,9-181,32)): Replay succeeded in 232 milliseconds
Hint-info (.\StreamPlain.fst(181,37-181,55)): Replay succeeded in 246 milliseconds
Hint-info (.\StreamPlain.fst(182,9-182,19)): Replay succeeded in 248 milliseconds
Hint-info (.\StreamPlain.fst(183,8-183,26)): Replay succeeded in 243 milliseconds
Hint-info (.\StreamPlain.fst(184,10-184,60)): Replay succeeded in 230 milliseconds
Hint-info (.\StreamPlain.fst(177,0-184,62)): Replay succeeded in 230 milliseconds
Hint-info (.\StreamPlain.fst(185,0-188,45)): Replay succeeded in 241 milliseconds
Hint-info (.\StreamPlain.fst(190,18-190,71)): Replay succeeded in 228 milliseconds
Hint-info (.\StreamPlain.fst(190,33-190,69)): Replay succeeded in 232 milliseconds
Hint-info (.\StreamPlain.fst(195,32-195,58)): Replay succeeded in 226 milliseconds
Hint-info (.\StreamPlain.fst(192,0-195,61)): Replay succeeded in 228 milliseconds
Hint-info (.\StreamPlain.fst(196,0-199,19)): Replay succeeded in 242 milliseconds
Hint-info (.\StreamPlain.fst(198,17-198,23)): Replay succeeded in 255 milliseconds
Hint-info (.\StreamPlain.fst(199,15-199,19)): Replay succeeded in 251 milliseconds
(.\StatefulLHAE.fst(98,12-98,36))
Query (StatefulLHAE.decrypt, 8)	succeeded (with hint) in 313 milliseconds with fuel 0 and ifuel 0
Verified module: StreamPlain (27005 milliseconds)
All verification conditions discharged successfully
(.\TLSConstants.fst(1844,0-1847,101))
Query (TLSConstants.parsePskIdentity, 1)	succeeded (with hint) in 106 milliseconds with fuel 1 and ifuel 2
(.\StreamAE.fst(211,6-211,30))
Query (StreamAE.encrypt, 13)	succeeded (with hint) in 256 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(1854,0-1866,13))
Query (TLSConstants.pskIdentitiesBytes, 1)	succeeded (with hint) in 117 milliseconds with fuel 1 and ifuel 2
(.\StAE.fst(116,30-116,51))
Query (StAE.ilog, 4)	succeeded (with hint) in 285 milliseconds with fuel 0 and ifuel 1
(.\StatefulLHAE.fst(98,12-98,36))
Query (StatefulLHAE.decrypt, 9)	succeeded (with hint) in 256 milliseconds with fuel 0 and ifuel 0
(.\StreamAE.fst(211,6-211,30))
Query (StreamAE.encrypt, 14)	succeeded (with hint) in 257 milliseconds with fuel 0 and ifuel 1
(.\StatefulLHAE.fst(98,12-98,36))
Query (StatefulLHAE.decrypt, 10)	succeeded (with hint) in 245 milliseconds with fuel 0 and ifuel 0
(.\TLSConstants.fst(1870,0-1888,105))
Query (TLSConstants.parsePskIdentities, 1)	succeeded (with hint) in 146 milliseconds with fuel 1 and ifuel 2
(.\StAE.fst(117,18-117,55))
Query (StAE.ilog, 5)	succeeded (with hint) in 248 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(1892,0-1892,99))
Query (TLSConstants.clientPreSharedKey, 1)	succeeded (with hint) in 95 milliseconds with fuel 1 and ifuel 2
(.\StreamAE.fst(211,6-211,30))
Query (StreamAE.encrypt, 15)	succeeded (with hint) in 246 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(1899,4-1899,22))
Query (TLSConstants.uu___is_ClientPreSharedKey, 1)	succeeded (with hint) in 115 milliseconds with fuel 1 and ifuel 2
(.\StAE.fst(117,18-117,55))
Query (StAE.ilog, 6)	succeeded (with hint) in 254 milliseconds with fuel 0 and ifuel 1
(.\AEAD_GCM.fst(122,0-131,53))
Query (AEAD_GCM.gen, 1)	succeeded (with hint) in 955 milliseconds with fuel 0 and ifuel 1
(.\StatefulLHAE.fst(102,12-102,51))
Query (StatefulLHAE.decrypt, 11)	succeeded (with hint) in 322 milliseconds with fuel 0 and ifuel 0
(.\TLSConstants.fst(1899,4-1899,22))
Query (TLSConstants.__proj__ClientPreSharedKey__item___0, 1)	succeeded (with hint) in 101 milliseconds with fuel 1 and ifuel 2
(.\StreamAE.fst(211,15-211,30))
Query (StreamAE.encrypt, 16)	succeeded (with hint) in 248 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(1900,4-1900,22))
Query (TLSConstants.uu___is_ServerPreSharedKey, 1)	succeeded (with hint) in 96 milliseconds with fuel 1 and ifuel 2
(.\StAE.fst(117,32-117,55))
Query (StAE.ilog, 7)	succeeded (with hint) in 256 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(1900,4-1900,22))
Query (TLSConstants.__proj__ServerPreSharedKey__item___0, 1)	succeeded (with hint) in 98 milliseconds with fuel 1 and ifuel 2
(.\StatefulLHAE.fst(103,12-103,22))
Query (StatefulLHAE.decrypt, 12)	succeeded (with hint) in 249 milliseconds with fuel 0 and ifuel 0
(.\StreamAE.fst(211,15-211,30))
Query (StreamAE.encrypt, 17)	succeeded (with hint) in 247 milliseconds with fuel 0 and ifuel 1
(.\AEAD_GCM.fst(136,30-136,50))
Query (AEAD_GCM.genReader, 1)	succeeded (with hint) in 305 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(1904,0-1904,58))
Query (TLSConstants.clientPreSharedKeyBytes, 1)	succeeded (with hint) in 98 milliseconds with fuel 1 and ifuel 2
(.\StAE.fst(119,0-124,13))
Query (StAE.entry, 1)	succeeded (with hint) in 253 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(1909,0-1916,22))
Query (TLSConstants.parseClientPreSharedKey, 1)	succeeded (with hint) in 109 milliseconds with fuel 1 and ifuel 2
(.\StatefulLHAE.fst(105,34-105,58))
Query (StatefulLHAE.decrypt, 13)	succeeded (with hint) in 251 milliseconds with fuel 0 and ifuel 1
(.\AEAD_GCM.fst(138,13-138,22))
Query (AEAD_GCM.genReader, 2)	succeeded (with hint) in 247 milliseconds with fuel 0 and ifuel 1
(.\StreamAE.fst(211,35-211,59))
Query (StreamAE.encrypt, 18)	succeeded (with hint) in 310 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(1920,0-1920,56))
Query (TLSConstants.serverPreSharedKeyBytes, 1)	succeeded (with hint) in 106 milliseconds with fuel 1 and ifuel 2
(.\TLSConstants.fst(1924,0-1924,50))
Query (TLSConstants.parseServerPreSharedKey, 1)	succeeded (with hint) in 95 milliseconds with fuel 1 and ifuel 2
(C:\Build\Agent\_work\36\s\src\tls\Epochs.fst) digest is valid; using hints db.
(.\StatefulLHAE.fst(105,34-105,58))
Query (StatefulLHAE.decrypt, 14)	succeeded (with hint) in 252 milliseconds with fuel 0 and ifuel 0
(.\StAE.fst(126,0-130,28))
Query (StAE.ptext, 1)	succeeded (with hint) in 324 milliseconds with fuel 0 and ifuel 1
(.\AEAD_GCM.fst(139,4-139,27))
Query (AEAD_GCM.genReader, 3)	succeeded (with hint) in 244 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(1928,24-1930,59))
Query (TLSConstants.preSharedKeyBytes, 1)	succeeded (with hint) in 100 milliseconds with fuel 1 and ifuel 2
(.\StreamAE.fst(211,35-211,59))
Query (StreamAE.encrypt, 19)	succeeded (with hint) in 269 milliseconds with fuel 0 and ifuel 1
(.\TLSConstants.fst(1934,0-1956,103))
Query (TLSConstants.parsePreSharedKey, 1)	succeeded (with hint) in 124 milliseconds with fuel 1 and ifuel 2
(.\AEAD_GCM.fst(141,4-141,33))
Query (AEAD_GCM.genReader, 4)	succeeded (with hint) in 243 milliseconds with fuel 0 and ifuel 1
(.\StatefulLHAE.fst(105,34-105,58))
Query (StatefulLHAE.decrypt, 15)	succeeded (with hint) in 322 milliseconds with fuel 0 and ifuel 0
(.\StreamAE.fst(211,35-211,59))
Query (StreamAE.encrypt, 20)	succeeded (with hint) in 244 milliseconds with fuel 0 and ifuel 1
(.\Epochs.fst(29,2-38,18))
Query (Epochs.epoch_region_inv, 1)	succeeded (with hint) in 287 milliseconds with fuel 0 and ifuel 1
(.\StAE.fst(133,0-135,22))
Query (StAE.fragments, 1)	succeeded (with hint) in 315 milliseconds with fuel 0 and ifuel 1
Hint-info (.\TLSConstants.fst(30,21-30,43)): Replay succeeded in 73 milliseconds
Hint-info (.\TLSConstants.fst(31,21-31,45)): Replay succeeded in 91 milliseconds
Hint-info (.\TLSConstants.fst(32,21-32,42)): Replay succeeded in 103 milliseconds
Hint-info (.\TLSConstants.fst(38,25-38,35)): Replay succeeded in 71 milliseconds
Hint-info (.\TLSConstants.fst(44,0-44,63)): Replay succeeded in 114 milliseconds
Hint-info (.\TLSConstants.fst(46,35-46,59)): Replay succeeded in 128 milliseconds
Hint-info (.\TLSConstants.fst(46,0-47,25)): Replay succeeded in 95 milliseconds
Hint-info (.\TLSConstants.fst(52,4-52,10)): Replay succeeded in 80 milliseconds
Hint-info (.\TLSConstants.fst(53,4-53,10)): Replay succeeded in 115 milliseconds
Hint-info (.\TLSConstants.fst(57,4-57,10)): Replay succeeded in 87 milliseconds
Hint-info (.\TLSConstants.fst(58,4-58,10)): Replay succeeded in 82 milliseconds
Hint-info (.\TLSConstants.fst(61,15-63,20)): Replay succeeded in 108 milliseconds
Hint-info (.\TLSConstants.fst(67,4-67,11)): Replay succeeded in 98 milliseconds
Hint-info (.\TLSConstants.fst(68,4-68,11)): Replay succeeded in 96 milliseconds
Hint-info (.\TLSConstants.fst(69,4-69,11)): Replay succeeded in 91 milliseconds
Hint-info (.\TLSConstants.fst(70,4-70,11)): Replay succeeded in 83 milliseconds
Hint-info (.\TLSConstants.fst(71,4-71,11)): Replay succeeded in 125 milliseconds
Hint-info (.\TLSConstants.fst(75,4-75,11)): Replay succeeded in 92 milliseconds
Hint-info (.\TLSConstants.fst(76,4-76,10)): Replay succeeded in 122 milliseconds
Hint-info (.\TLSConstants.fst(77,4-77,11)): Replay succeeded in 119 milliseconds
Hint-info (.\TLSConstants.fst(78,4-78,15)): Replay succeeded in 111 milliseconds
Hint-info (.\TLSConstants.fst(79,4-79,17)): Replay succeeded in 109 milliseconds
Hint-info (.\TLSConstants.fst(80,4-80,11)): Replay succeeded in 134 milliseconds
Hint-info (.\TLSConstants.fst(81,4-81,13)): Replay succeeded in 87 milliseconds
Hint-info (.\TLSConstants.fst(90,4-90,9)): Replay succeeded in 98 milliseconds
Hint-info (.\TLSConstants.fst(91,4-91,9)): Replay succeeded in 84 milliseconds
Hint-info (.\TLSConstants.fst(94,0-96,26)): Replay succeeded in 90 milliseconds
Hint-info (.\TLSConstants.fst(95,4-95,9)): Replay succeeded in 129 milliseconds
Hint-info (.\TLSConstants.fst(95,4-95,9)): Replay succeeded in 135 milliseconds
Hint-info (.\TLSConstants.fst(96,4-96,10)): Replay succeeded in 90 milliseconds
Hint-info (.\TLSConstants.fst(96,4-96,10)): Replay succeeded in 91 milliseconds
Hint-info (.\TLSConstants.fst(99,0-102,20)): Replay succeeded in 95 milliseconds
Hint-info (.\TLSConstants.fst(100,4-100,8)): Replay succeeded in 124 milliseconds
Hint-info (.\TLSConstants.fst(101,4-101,11)): Replay succeeded in 91 milliseconds
Hint-info (.\TLSConstants.fst(102,4-102,8)): Replay succeeded in 111 milliseconds
Hint-info (.\TLSConstants.fst(102,4-102,8)): Replay succeeded in 92 milliseconds
Hint-info (.\TLSConstants.fst(105,0-107,24)): Replay succeeded in 85 milliseconds
Hint-info (.\TLSConstants.fst(106,4-106,8)): Replay succeeded in 96 milliseconds
Hint-info (.\TLSConstants.fst(106,4-106,8)): Replay succeeded in 128 milliseconds
Hint-info (.\TLSConstants.fst(107,4-107,12)): Replay succeeded in 125 milliseconds
Hint-info (.\TLSConstants.fst(107,4-107,12)): Replay succeeded in 109 milliseconds
Hint-info (.\TLSConstants.fst(110,0-113,38)): Replay succeeded in 93 milliseconds
Hint-info (.\TLSConstants.fst(111,4-111,11)): Replay succeeded in 95 milliseconds
Hint-info (.\TLSConstants.fst(111,4-111,11)): Replay succeeded in 94 milliseconds
Hint-info (.\TLSConstants.fst(112,4-112,7)): Replay succeeded in 111 milliseconds
Hint-info (.\TLSConstants.fst(112,4-112,7)): Replay succeeded in 84 milliseconds
Hint-info (.\TLSConstants.fst(112,4-112,7)): Replay succeeded in 128 milliseconds
Hint-info (.\TLSConstants.fst(113,4-113,8)): Replay succeeded in 93 milliseconds
Hint-info (.\TLSConstants.fst(113,4-113,8)): Replay succeeded in 73 milliseconds
Hint-info (.\TLSConstants.fst(113,4-113,8)): Replay succeeded in 83 milliseconds
Hint-info (.\TLSConstants.fst(116,11-118,52)): Replay succeeded in 106 milliseconds
Hint-info (.\TLSConstants.fst(168,56-168,75)): Replay succeeded in 125 milliseconds
Hint-info (.\TLSConstants.fst(174,2-174,48)): Replay succeeded in 111 milliseconds
Hint-info (.\TLSConstants.fst(178,0-178,41)): Replay succeeded in 87 milliseconds
Hint-info (.\TLSConstants.fst(179,0-184,33)): Replay succeeded in 151 milliseconds
Hint-info (.\TLSConstants.fst(187,17-187,39)): Replay succeeded in 85 milliseconds
Hint-info (.\TLSConstants.fst(188,0-194,68)): Replay succeeded in 127 milliseconds
Hint-info (.\TLSConstants.fst(198,11-198,54)): Replay succeeded in 99 milliseconds
Hint-info (.\TLSConstants.fst(200,0-200,25)): Replay succeeded in 139 milliseconds
Hint-info (.\TLSConstants.fst(202,23-202,24)): Replay succeeded in 115 milliseconds
Hint-info (.\TLSConstants.fst(204,11-204,67)): Replay succeeded in 94 milliseconds
Hint-info (.\TLSConstants.fst(205,3-205,53)): Replay succeeded in 83 milliseconds
Hint-info (.\TLSConstants.fst(206,0-206,26)): Replay succeeded in 106 milliseconds
Hint-info (.\TLSConstants.fst(210,26-210,35)): Replay succeeded in 97 milliseconds
Hint-info (.\TLSConstants.fst(210,39-210,51)): Replay succeeded in 90 milliseconds
Hint-info (.\TLSConstants.fst(216,0-216,44)): Replay succeeded in 116 milliseconds
Hint-info (.\TLSConstants.fst(217,0-225,20)): Replay succeeded in 115 milliseconds
Hint-info (.\TLSConstants.fst(228,18-228,41)): Replay succeeded in 121 milliseconds
Hint-info (.\TLSConstants.fst(229,0-239,68)): Replay succeeded in 145 milliseconds
Hint-info (.\TLSConstants.fst(243,11-243,56)): Replay succeeded in 115 milliseconds
Hint-info (.\TLSConstants.fst(245,0-245,26)): Replay succeeded in 133 milliseconds
Hint-info (.\TLSConstants.fst(247,24-247,25)): Replay succeeded in 86 milliseconds
Hint-info (.\TLSConstants.fst(249,11-249,69)): Replay succeeded in 86 milliseconds
Hint-info (.\TLSConstants.fst(250,3-250,55)): Replay succeeded in 85 milliseconds
Hint-info (.\TLSConstants.fst(251,0-251,27)): Replay succeeded in 105 milliseconds
Hint-info (.\TLSConstants.fst(254,17-261,29)): Replay succeeded in 139 milliseconds
Hint-info (.\TLSConstants.fst(264,19-268,26)): Replay succeeded in 73 milliseconds
Hint-info (.\TLSConstants.fst(271,23-275,26)): Replay succeeded in 77 milliseconds
Hint-info (.\TLSConstants.fst(278,24-278,31)): Replay succeeded in 69 milliseconds
Hint-info (.\TLSConstants.fst(279,15-281,22)): Replay succeeded in 78 milliseconds
Hint-info (.\TLSConstants.fst(284,17-286,39)): Replay succeeded in 105 milliseconds
Hint-info (.\TLSConstants.fst(289,14-291,39)): Replay succeeded in 130 milliseconds
Hint-info (.\TLSConstants.fst(314,0-318,106)): Replay succeeded in 134 milliseconds
Hint-info (.\TLSConstants.fst(315,4-315,19)): Replay succeeded in 104 milliseconds
Hint-info (.\TLSConstants.fst(316,4-316,15)): Replay succeeded in 72 milliseconds
Hint-info (.\TLSConstants.fst(316,4-316,15)): Replay succeeded in 81 milliseconds
Hint-info (.\TLSConstants.fst(316,4-316,15)): Replay succeeded in 98 milliseconds
Hint-info (.\TLSConstants.fst(316,4-316,15)): Replay succeeded in 72 milliseconds
Hint-info (.\TLSConstants.fst(317,4-317,8)): Replay succeeded in 72 milliseconds
Hint-info (.\TLSConstants.fst(317,4-317,8)): Replay succeeded in 75 milliseconds
Hint-info (.\TLSConstants.fst(318,4-318,22)): Replay succeeded in 71 milliseconds
Hint-info (.\TLSConstants.fst(318,24-318,25)): Replay succeeded in 101 milliseconds
Hint-info (.\TLSConstants.fst(318,34-318,35)): Replay succeeded in 94 milliseconds
Hint-info (.\TLSConstants.fst(326,34-326,41)): Replay succeeded in 73 milliseconds
Hint-info (.\TLSConstants.fst(324,0-326,43)): Replay succeeded in 71 milliseconds
Hint-info (.\TLSConstants.fst(324,0-326,43)): Replay succeeded in 74 milliseconds
Hint-info (.\TLSConstants.fst(324,0-326,43)): Replay succeeded in 112 milliseconds
Hint-info (.\TLSConstants.fst(325,4-325,19)): Replay succeeded in 80 milliseconds
Hint-info (.\TLSConstants.fst(326,4-326,22)): Replay succeeded in 85 milliseconds
Hint-info (.\TLSConstants.fst(326,4-326,22)): Replay succeeded in 72 milliseconds
Hint-info (.\TLSConstants.fst(326,4-326,22)): Replay succeeded in 76 milliseconds
Hint-info (.\TLSConstants.fst(329,0-329,51)): Replay succeeded in 75 milliseconds
Hint-info (.\TLSConstants.fst(330,0-333,35)): Replay succeeded in 89 milliseconds
Hint-info (.\TLSConstants.fst(338,0-339,60)): Replay succeeded in 73 milliseconds
Hint-info (.\TLSConstants.fst(340,0-343,30)): Replay succeeded in 86 milliseconds
Hint-info (.\TLSConstants.fst(351,0-357,9)): Replay succeeded in 90 milliseconds
Hint-info (.\TLSConstants.fst(365,0-368,23)): Replay succeeded in 113 milliseconds
Hint-info (.\TLSConstants.fst(374,0-374,51)): Replay succeeded in 72 milliseconds
Hint-info (.\TLSConstants.fst(375,0-381,32)): Replay succeeded in 96 milliseconds
Hint-info (.\TLSConstants.fst(384,18-384,41)): Replay succeeded in 120 milliseconds
Hint-info (.\TLSConstants.fst(385,0-392,92)): Replay succeeded in 108 milliseconds
Hint-info (.\TLSConstants.fst(396,11-396,56)): Replay succeeded in 72 milliseconds
Hint-info (.\TLSConstants.fst(398,0-398,26)): Replay succeeded in 141 milliseconds
Hint-info (.\TLSConstants.fst(400,24-400,25)): Replay succeeded in 72 milliseconds
Hint-info (.\TLSConstants.fst(402,11-402,69)): Replay succeeded in 97 milliseconds
Hint-info (.\TLSConstants.fst(403,3-403,55)): Replay succeeded in 72 milliseconds
Hint-info (.\TLSConstants.fst(404,0-404,27)): Replay succeeded in 197 milliseconds
Hint-info (.\TLSConstants.fst(407,0-413,39)): Replay succeeded in 88 milliseconds
Hint-info (.\TLSConstants.fst(415,16-415,31)): Replay succeeded in 72 milliseconds
Hint-info (.\TLSConstants.fst(419,0-419,63)): Replay succeeded in 76 milliseconds
Hint-info (.\TLSConstants.fst(420,0-517,15)): Replay succeeded in 242 milliseconds
Hint-info (.\TLSConstants.fst(421,36-421,51)): Replay succeeded in 83 milliseconds
Hint-info (.\TLSConstants.fst(517,11-517,15)): Replay succeeded in 79 milliseconds
Hint-info (.\TLSConstants.fst(519,39-519,68)): Replay succeeded in 84 milliseconds
Hint-info (.\TLSConstants.fst(526,0-526,58)): Replay succeeded in 75 milliseconds
Hint-info (.\TLSConstants.fst(527,0-527,56)): Replay succeeded in 79 milliseconds
Hint-info (.\TLSConstants.fst(527,25-527,56)): Replay succeeded in 73 milliseconds
Hint-info (.\TLSConstants.fst(532,0-532,86)): Replay succeeded in 77 milliseconds
Hint-info (.\TLSConstants.fst(533,0-632,49)): Replay succeeded in 6913 milliseconds
Hint-info (.\TLSConstants.fst(636,22-636,49)): Replay succeeded in 117 milliseconds
Hint-info (.\TLSConstants.fst(637,0-640,22)): Replay succeeded in 84 milliseconds
Hint-info (.\TLSConstants.fst(650,2-650,9)): Replay succeeded in 75 milliseconds
Hint-info (.\TLSConstants.fst(650,14-650,57)): Replay succeeded in 77 milliseconds
Hint-info (.\TLSConstants.fst(650,34-650,45)): Replay succeeded in 74 milliseconds
Hint-info (.\TLSConstants.fst(651,31-651,64)): Replay succeeded in 75 milliseconds
Hint-info (.\TLSConstants.fst(645,0-651,66)): Replay succeeded in 79 milliseconds
Hint-info (.\TLSConstants.fst(652,0-652,30)): Replay succeeded in 6276 milliseconds
Hint-info (.\TLSConstants.fst(660,19-660,62)): Replay succeeded in 83 milliseconds
Hint-info (.\TLSConstants.fst(661,30-661,77)): Replay succeeded in 80 milliseconds
Hint-info (.\TLSConstants.fst(662,3-662,69)): Replay succeeded in 75 milliseconds
Hint-info (.\TLSConstants.fst(655,0-662,70)): Replay succeeded in 87 milliseconds
Hint-info (.\TLSConstants.fst(663,0-663,31)): Replay succeeded in 1766 milliseconds
Hint-info (.\TLSConstants.fst(670,0-670,121)): Replay succeeded in 75 milliseconds
Hint-info (.\TLSConstants.fst(671,0-674,63)): Replay succeeded in 92 milliseconds
Hint-info (.\TLSConstants.fst(681,0-692,84)): Replay succeeded in 102 milliseconds
Hint-info (.\TLSConstants.fst(691,5-691,17)): Replay succeeded in 75 milliseconds
Hint-info (.\TLSConstants.fst(701,11-701,64)): Replay succeeded in 78 milliseconds
Hint-info (.\TLSConstants.fst(703,0-712,29)): Replay succeeded in 171 milliseconds
Hint-info (.\TLSConstants.fst(723,0-726,14)): Replay succeeded in 77 milliseconds
Hint-info (.\TLSConstants.fst(729,0-735,14)): Replay succeeded in 80 milliseconds
Hint-info (.\TLSConstants.fst(738,0-742,14)): Replay succeeded in 78 milliseconds
Hint-info (.\TLSConstants.fst(745,0-749,14)): Replay succeeded in 81 milliseconds
Hint-info (.\TLSConstants.fst(752,0-755,14)): Replay succeeded in 78 milliseconds
Hint-info (.\TLSConstants.fst(758,0-761,14)): Replay succeeded in 77 milliseconds
Hint-info (.\TLSConstants.fst(785,0-790,15)): Replay succeeded in 78 milliseconds
Hint-info (.\TLSConstants.fst(786,4-786,19)): Replay succeeded in 77 milliseconds
Hint-info (.\TLSConstants.fst(787,4-787,19)): Replay succeeded in 78 milliseconds
Hint-info (.\TLSConstants.fst(788,4-788,16)): Replay succeeded in 77 milliseconds
Hint-info (.\TLSConstants.fst(788,4-788,16)): Replay succeeded in 80 milliseconds
Hint-info (.\TLSConstants.fst(789,4-789,15)): Replay succeeded in 81 milliseconds
Hint-info (.\TLSConstants.fst(789,4-789,15)): Replay succeeded in 79 milliseconds
Hint-info (.\TLSConstants.fst(789,4-789,15)): Replay succeeded in 78 milliseconds
Hint-info (.\TLSConstants.fst(790,4-790,15)): Replay succeeded in 74 milliseconds
Hint-info (.\TLSConstants.fst(805,35-809,43)): Replay succeeded in 78 milliseconds
Hint-info (.\TLSConstants.fst(813,0-816,29)): Replay succeeded in 78 milliseconds
Hint-info (.\TLSConstants.fst(819,2-819,27)): Replay succeeded in 75 milliseconds
Hint-info (.\TLSConstants.fst(822,2-822,51)): Replay succeeded in 78 milliseconds
Hint-info (.\TLSConstants.fst(831,43-835,43)): Replay succeeded in 80 milliseconds
Hint-info (.\TLSConstants.fst(839,2-839,59)): Replay succeeded in 73 milliseconds
Hint-info (.\TLSConstants.fst(843,0-846,77)): Replay succeeded in 89 milliseconds
Hint-info (.\TLSConstants.fst(853,0-855,28)): Replay succeeded in 77 milliseconds
Hint-info (.\TLSConstants.fst(863,0-867,25)): Replay succeeded in 87 milliseconds
Hint-info (.\TLSConstants.fst(869,56-869,69)): Replay succeeded in 79 milliseconds
Hint-info (.\TLSConstants.fst(870,0-875,35)): Replay succeeded in 85 milliseconds
Hint-info (.\TLSConstants.fst(879,4-879,27)): Replay succeeded in 84 milliseconds
Hint-info (.\TLSConstants.fst(881,4-881,25)): Replay succeeded in 86 milliseconds
Hint-info (.\TLSConstants.fst(882,4-882,25)): Replay succeeded in 83 milliseconds
Hint-info (.\TLSConstants.fst(883,4-883,28)): Replay succeeded in 86 milliseconds
Hint-info (.\TLSConstants.fst(884,4-884,28)): Replay succeeded in 83 milliseconds
Hint-info (.\TLSConstants.fst(885,4-885,28)): Replay succeeded in 87 milliseconds
Hint-info (.\TLSConstants.fst(886,4-886,33)): Replay succeeded in 88 milliseconds
Hint-info (.\TLSConstants.fst(887,4-887,32)): Replay succeeded in 86 milliseconds
Hint-info (.\TLSConstants.fst(888,4-888,32)): Replay succeeded in 84 milliseconds
Hint-info (.\TLSConstants.fst(889,4-889,35)): Replay succeeded in 86 milliseconds
Hint-info (.\TLSConstants.fst(890,4-890,35)): Replay succeeded in 83 milliseconds
Hint-info (.\TLSConstants.fst(892,4-892,37)): Replay succeeded in 83 milliseconds
Hint-info (.\TLSConstants.fst(893,4-893,37)): Replay succeeded in 82 milliseconds
Hint-info (.\TLSConstants.fst(894,4-894,36)): Replay succeeded in 83 milliseconds
Hint-info (.\TLSConstants.fst(895,4-895,36)): Replay succeeded in 85 milliseconds
Hint-info (.\TLSConstants.fst(896,4-896,36)): Replay succeeded in 88 milliseconds
Hint-info (.\TLSConstants.fst(897,4-897,36)): Replay succeeded in 86 milliseconds
Hint-info (.\TLSConstants.fst(898,4-898,39)): Replay succeeded in 84 milliseconds
Hint-info (.\TLSConstants.fst(899,4-899,39)): Replay succeeded in 82 milliseconds
Hint-info (.\TLSConstants.fst(900,4-900,39)): Replay succeeded in 83 milliseconds
Hint-info (.\TLSConstants.fst(901,4-901,39)): Replay succeeded in 87 milliseconds
Hint-info (.\TLSConstants.fst(903,4-903,34)): Replay succeeded in 87 milliseconds
Hint-info (.\TLSConstants.fst(904,4-904,39)): Replay succeeded in 82 milliseconds
Hint-info (.\TLSConstants.fst(905,4-905,38)): Replay succeeded in 83 milliseconds
Hint-info (.\TLSConstants.fst(906,4-906,41)): Replay succeeded in 82 milliseconds
Hint-info (.\TLSConstants.fst(907,4-907,38)): Replay succeeded in 85 milliseconds
Hint-info (.\TLSConstants.fst(908,4-908,41)): Replay succeeded in 88 milliseconds
Hint-info (.\TLSConstants.fst(910,4-910,43)): Replay succeeded in 87 milliseconds
Hint-info (.\TLSConstants.fst(911,4-911,41)): Replay succeeded in 85 milliseconds
Hint-info (.\TLSConstants.fst(912,4-912,43)): Replay succeeded in 83 milliseconds
Hint-info (.\TLSConstants.fst(913,4-913,41)): Replay succeeded in 83 milliseconds
Hint-info (.\TLSConstants.fst(915,4-915,32)): Replay succeeded in 86 milliseconds
Hint-info (.\TLSConstants.fst(916,4-916,37)): Replay succeeded in 82 milliseconds
Hint-info (.\TLSConstants.fst(917,4-917,36)): Replay succeeded in 82 milliseconds
Hint-info (.\TLSConstants.fst(918,4-918,36)): Replay succeeded in 87 milliseconds
Hint-info (.\TLSConstants.fst(919,4-919,39)): Replay succeeded in 87 milliseconds
Hint-info (.\TLSConstants.fst(920,4-920,39)): Replay succeeded in 86 milliseconds
Hint-info (.\TLSConstants.fst(922,4-922,35)): Replay succeeded in 83 milliseconds
Hint-info (.\TLSConstants.fst(923,4-923,35)): Replay succeeded in 87 milliseconds
Hint-info (.\TLSConstants.fst(924,4-924,39)): Replay succeeded in 82 milliseconds
Hint-info (.\TLSConstants.fst(925,4-925,39)): Replay succeeded in 83 milliseconds
Hint-info (.\TLSConstants.fst(926,4-926,38)): Replay succeeded in 82 milliseconds
Hint-info (.\TLSConstants.fst(927,4-927,38)): Replay succeeded in 85 milliseconds
Hint-info (.\TLSConstants.fst(928,4-928,39)): Replay succeeded in 98 milliseconds
Hint-info (.\TLSConstants.fst(929,4-929,39)): Replay succeeded in 87 milliseconds
Hint-info (.\TLSConstants.fst(930,4-930,38)): Replay succeeded in 85 milliseconds
Hint-info (.\TLSConstants.fst(931,4-931,38)): Replay succeeded in 84 milliseconds
Hint-info (.\TLSConstants.fst(932,4-932,39)): Replay succeeded in 83 milliseconds
Hint-info (.\TLSConstants.fst(933,4-933,39)): Replay succeeded in 82 milliseconds
Hint-info (.\TLSConstants.fst(935,4-935,47)): Replay succeeded in 88 milliseconds
Hint-info (.\TLSConstants.fst(936,4-936,49)): Replay succeeded in 85 milliseconds
Hint-info (.\TLSConstants.fst(937,4-937,45)): Replay succeeded in 84 milliseconds
Hint-info (.\TLSConstants.fst(938,4-938,41)): Replay succeeded in 85 milliseconds
Hint-info (.\TLSConstants.fst(939,4-939,47)): Replay succeeded in 84 milliseconds
Hint-info (.\TLSConstants.fst(940,4-940,45)): Replay succeeded in 85 milliseconds
Hint-info (.\TLSConstants.fst(949,26-1010,114)): Replay succeeded in 5895 milliseconds
Hint-info (.\TLSConstants.fst(1014,33-1014,72)): Replay succeeded in 84 milliseconds
Hint-info (.\TLSConstants.fst(1015,0-1018,43)): Replay succeeded in 87 milliseconds
Hint-info (.\TLSConstants.fst(1021,0-1086,104)): Replay succeeded in 152 milliseconds
Hint-info (.\TLSConstants.fst(1093,0-1106,7)): Replay succeeded in 113 milliseconds
Hint-info (.\TLSConstants.fst(1113,0-1113,39)): Replay succeeded in 86 milliseconds
Hint-info (.\TLSConstants.fst(1120,82-1120,109)): Replay succeeded in 85 milliseconds
Hint-info (.\TLSConstants.fst(1121,0-1121,56)): Replay succeeded in 87 milliseconds
Hint-info (.\TLSConstants.fst(1125,20-1125,57)): Replay succeeded in 84 milliseconds
Hint-info (.\TLSConstants.fst(1124,0-1125,58)): Replay succeeded in 85 milliseconds
Hint-info (.\TLSConstants.fst(1126,0-1126,30)): Replay succeeded in 86 milliseconds
Hint-info (.\TLSConstants.fst(1128,0-1132,29)): Replay succeeded in 88 milliseconds
Hint-info (.\TLSConstants.fst(1133,0-1135,31)): Replay succeeded in 101 milliseconds
Hint-info (.\TLSConstants.fst(1139,17-1139,38)): Replay succeeded in 85 milliseconds
Hint-info (.\TLSConstants.fst(1137,0-1139,39)): Replay succeeded in 93 milliseconds
Hint-info (.\TLSConstants.fst(1140,0-1145,68)): Replay succeeded in 120 milliseconds
Hint-info (.\TLSConstants.fst(1151,0-1155,72)): Replay succeeded in 83 milliseconds
Hint-info (.\TLSConstants.fst(1156,0-1161,65)): Replay succeeded in 136 milliseconds
Hint-info (.\TLSConstants.fst(1160,7-1160,40)): Replay succeeded in 85 milliseconds
Hint-info (.\TLSConstants.fst(1161,7-1161,65)): Replay succeeded in 87 milliseconds
Hint-info (.\TLSConstants.fst(1164,0-1165,94)): Replay succeeded in 88 milliseconds
Hint-info (.\TLSConstants.fst(1166,0-1170,65)): Replay succeeded in 117 milliseconds
Hint-info (.\TLSConstants.fst(1168,5-1168,31)): Replay succeeded in 85 milliseconds
Hint-info (.\TLSConstants.fst(1169,7-1169,16)): Replay succeeded in 81 milliseconds
Hint-info (.\TLSConstants.fst(1170,7-1170,65)): Replay succeeded in 82 milliseconds
Hint-info (.\TLSConstants.fst(1175,11-1175,61)): Replay succeeded in 82 milliseconds
Hint-info (.\TLSConstants.fst(1175,49-1175,60)): Replay succeeded in 83 milliseconds
Hint-info (.\TLSConstants.fst(1176,3-1176,45)): Replay succeeded in 84 milliseconds
Hint-info (.\TLSConstants.fst(1173,0-1176,46)): Replay succeeded in 91 milliseconds
Hint-info (.\TLSConstants.fst(1177,0-1183,46)): Replay succeeded in 122 milliseconds
Hint-info (.\TLSConstants.fst(1188,4-1188,12)): Replay succeeded in 83 milliseconds
Hint-info (.\TLSConstants.fst(1189,4-1189,12)): Replay succeeded in 82 milliseconds
Hint-info (.\TLSConstants.fst(1190,4-1190,16)): Replay succeeded in 85 milliseconds
Hint-info (.\TLSConstants.fst(1191,4-1191,16)): Replay succeeded in 83 milliseconds
Hint-info (.\TLSConstants.fst(1194,0-1194,45)): Replay succeeded in 88 milliseconds
Hint-info (.\TLSConstants.fst(1195,0-1200,28)): Replay succeeded in 101 milliseconds
Hint-info (.\TLSConstants.fst(1203,19-1203,43)): Replay succeeded in 85 milliseconds
Hint-info (.\TLSConstants.fst(1204,0-1210,67)): Replay succeeded in 90 milliseconds
Hint-info (.\TLSConstants.fst(1216,11-1216,58)): Replay succeeded in 83 milliseconds
Hint-info (.\TLSConstants.fst(1218,0-1218,27)): Replay succeeded in 102 milliseconds
Hint-info (.\TLSConstants.fst(1220,25-1220,26)): Replay succeeded in 90 milliseconds
Hint-info (.\TLSConstants.fst(1222,11-1222,71)): Replay succeeded in 84 milliseconds
Hint-info (.\TLSConstants.fst(1223,3-1223,57)): Replay succeeded in 87 milliseconds
Hint-info (.\TLSConstants.fst(1224,0-1224,28)): Replay succeeded in 109 milliseconds
Hint-info (.\TLSConstants.fst(1231,0-1236,36)): Replay succeeded in 95 milliseconds
Hint-info (.\TLSConstants.fst(1240,0-1249,15)): Replay succeeded in 542 milliseconds
Hint-info (.\TLSConstants.fst(1241,5-1241,20)): Replay succeeded in 88 milliseconds
Hint-info (.\TLSConstants.fst(1257,0-1268,78)): Replay succeeded in 134 milliseconds
Hint-info (.\TLSConstants.fst(1279,0-1285,40)): Replay succeeded in 104 milliseconds
Hint-info (.\TLSConstants.fst(1289,0-1307,11)): Replay succeeded in 140 milliseconds
Hint-info (.\TLSConstants.fst(1290,5-1290,20)): Replay succeeded in 85 milliseconds
Hint-info (.\TLSConstants.fst(1311,2-1311,61)): Replay succeeded in 86 milliseconds
Hint-info (.\TLSConstants.fst(1323,4-1323,13)): Replay succeeded in 87 milliseconds
Hint-info (.\TLSConstants.fst(1324,4-1324,13)): Replay succeeded in 86 milliseconds
Hint-info (.\TLSConstants.fst(1325,4-1325,13)): Replay succeeded in 83 milliseconds
Hint-info (.\TLSConstants.fst(1326,4-1326,13)): Replay succeeded in 86 milliseconds
Hint-info (.\TLSConstants.fst(1327,4-1327,13)): Replay succeeded in 92 milliseconds
Hint-info (.\TLSConstants.fst(1337,33-1337,42)): Replay succeeded in 91 milliseconds
Hint-info (.\TLSConstants.fst(1337,46-1337,55)): Replay succeeded in 90 milliseconds
Hint-info (.\TLSConstants.fst(1337,59-1337,68)): Replay succeeded in 93 milliseconds
Hint-info (.\TLSConstants.fst(1337,72-1337,80)): Replay succeeded in 92 milliseconds
Hint-info (.\TLSConstants.fst(1335,30-1335,40)): Replay succeeded in 93 milliseconds
Hint-info (.\TLSConstants.fst(1335,44-1335,54)): Replay succeeded in 92 milliseconds
Hint-info (.\TLSConstants.fst(1335,58-1335,68)): Replay succeeded in 90 milliseconds
Hint-info (.\TLSConstants.fst(1333,0-1338,29)): Replay succeeded in 84 milliseconds
Hint-info (.\TLSConstants.fst(1333,0-1338,29)): Replay succeeded in 88 milliseconds
Hint-info (.\TLSConstants.fst(1333,0-1338,29)): Replay succeeded in 92 milliseconds
Hint-info (.\TLSConstants.fst(1333,0-1338,29)): Replay succeeded in 87 milliseconds
Hint-info (.\TLSConstants.fst(1334,4-1334,7)): Replay succeeded in 86 milliseconds
Hint-info (.\TLSConstants.fst(1334,4-1334,7)): Replay succeeded in 87 milliseconds
Hint-info (.\TLSConstants.fst(1335,4-1335,18)): Replay succeeded in 87 milliseconds
Hint-info (.\TLSConstants.fst(1335,4-1335,18)): Replay succeeded in 86 milliseconds
Hint-info (.\TLSConstants.fst(1335,4-1335,18)): Replay succeeded in 91 milliseconds
Hint-info (.\TLSConstants.fst(1336,4-1336,9)): Replay succeeded in 87 milliseconds
Hint-info (.\TLSConstants.fst(1336,4-1336,9)): Replay succeeded in 88 milliseconds
Hint-info (.\TLSConstants.fst(1337,4-1337,21)): Replay succeeded in 87 milliseconds
Hint-info (.\TLSConstants.fst(1337,4-1337,21)): Replay succeeded in 87 milliseconds
Hint-info (.\TLSConstants.fst(1337,4-1337,21)): Replay succeeded in 88 milliseconds
Hint-info (.\TLSConstants.fst(1338,4-1338,21)): Replay succeeded in 87 milliseconds
Hint-info (.\TLSConstants.fst(1338,4-1338,21)): Replay succeeded in 87 milliseconds
Hint-info (.\TLSConstants.fst(1341,0-1341,49)): Replay succeeded in 87 milliseconds
Hint-info (.\TLSConstants.fst(1342,0-1362,44)): Replay succeeded in 135 milliseconds
Hint-info (.\TLSConstants.fst(1365,21-1365,47)): Replay succeeded in 86 milliseconds
Hint-info (.\TLSConstants.fst(1366,0-1382,85)): Replay succeeded in 108 milliseconds
Hint-info (.\TLSConstants.fst(1378,7-1378,16)): Replay succeeded in 86 milliseconds
Hint-info (.\TLSConstants.fst(1378,20-1378,29)): Replay succeeded in 86 milliseconds
Hint-info (.\TLSConstants.fst(1378,33-1378,42)): Replay succeeded in 86 milliseconds
Hint-info (.\TLSConstants.fst(1378,46-1378,55)): Replay succeeded in 89 milliseconds
Hint-info (.\TLSConstants.fst(1387,11-1387,62)): Replay succeeded in 87 milliseconds
Hint-info (.\TLSConstants.fst(1389,0-1389,29)): Replay succeeded in 302 milliseconds
Hint-info (.\TLSConstants.fst(1391,27-1391,28)): Replay succeeded in 85 milliseconds
Hint-info (.\TLSConstants.fst(1393,11-1393,75)): Replay succeeded in 87 milliseconds
Hint-info (.\TLSConstants.fst(1394,3-1394,61)): Replay succeeded in 85 milliseconds
Hint-info (.\TLSConstants.fst(1395,0-1395,30)): Replay succeeded in 208 milliseconds
Hint-info (.\TLSConstants.fst(1399,20-1399,69)): Replay succeeded in 84 milliseconds
Hint-info (.\TLSConstants.fst(1400,0-1403,54)): Replay succeeded in 97 milliseconds
Hint-info (.\TLSConstants.fst(1407,20-1407,73)): Replay succeeded in 85 milliseconds
Hint-info (.\TLSConstants.fst(1406,0-1407,75)): Replay succeeded in 83 milliseconds
Hint-info (.\TLSConstants.fst(1408,0-1411,14)): Replay succeeded in 92 milliseconds
Hint-info (.\TLSConstants.fst(1414,41-1414,98)): Replay succeeded in 87 milliseconds
Hint-info (.\TLSConstants.fst(1413,8-1415,24)): Replay succeeded in 84 milliseconds
Hint-info (.\TLSConstants.fst(1416,0-1430,15)): Replay succeeded in 169 milliseconds
Hint-info (.\TLSConstants.fst(1425,22-1425,29)): Replay succeeded in 87 milliseconds
Hint-info (.\TLSConstants.fst(1426,9-1426,68)): Replay succeeded in 89 milliseconds
Hint-info (.\TLSConstants.fst(1430,3-1430,15)): Replay succeeded in 86 milliseconds
Hint-info (.\TLSConstants.fst(1434,41-1434,84)): Replay succeeded in 86 milliseconds
Hint-info (.\TLSConstants.fst(1433,0-1434,87)): Replay succeeded in 88 milliseconds
Hint-info (.\TLSConstants.fst(1435,0-1439,90)): Replay succeeded in 105 milliseconds
Hint-info (.\TLSConstants.fst(1439,4-1439,90)): Replay succeeded in 89 milliseconds
Hint-info (.\TLSConstants.fst(1447,0-1449,15)): Replay succeeded in 90 milliseconds
Hint-info (.\TLSConstants.fst(1453,0-1456,26)): Replay succeeded in 97 milliseconds
Hint-info (.\TLSConstants.fst(1463,0-1464,36)): Replay succeeded in 94 milliseconds
Hint-info (.\TLSConstants.fst(1466,0-1469,72)): Replay succeeded in 85 milliseconds
Hint-info (.\TLSConstants.fst(1470,0-1470,35)): Replay succeeded in 103 milliseconds
Hint-info (.\TLSConstants.fst(1477,0-1477,24)): Replay succeeded in 93 milliseconds
Hint-info (.\TLSConstants.fst(1479,0-1479,41)): Replay succeeded in 92 milliseconds
Hint-info (.\TLSConstants.fst(1482,17-1482,39)): Replay succeeded in 94 milliseconds
Hint-info (.\TLSConstants.fst(1483,0-1485,66)): Replay succeeded in 98 milliseconds
Hint-info (.\TLSConstants.fst(1484,5-1484,17)): Replay succeeded in 92 milliseconds
Hint-info (.\TLSConstants.fst(1489,11-1489,54)): Replay succeeded in 92 milliseconds
Hint-info (.\TLSConstants.fst(1491,0-1491,25)): Replay succeeded in 95 milliseconds
Hint-info (.\TLSConstants.fst(1493,23-1493,24)): Replay succeeded in 90 milliseconds
Hint-info (.\TLSConstants.fst(1495,11-1495,67)): Replay succeeded in 93 milliseconds
Hint-info (.\TLSConstants.fst(1496,3-1496,53)): Replay succeeded in 92 milliseconds
Hint-info (.\TLSConstants.fst(1497,0-1497,26)): Replay succeeded in 94 milliseconds
Hint-info (.\TLSConstants.fst(1503,4-1503,24)): Replay succeeded in 93 milliseconds
Hint-info (.\TLSConstants.fst(1504,4-1504,13)): Replay succeeded in 93 milliseconds
Hint-info (.\TLSConstants.fst(1505,4-1505,31)): Replay succeeded in 92 milliseconds
Hint-info (.\TLSConstants.fst(1508,0-1508,55)): Replay succeeded in 95 milliseconds
Hint-info (.\TLSConstants.fst(1509,0-1513,43)): Replay succeeded in 102 milliseconds
Hint-info (.\TLSConstants.fst(1516,24-1516,53)): Replay succeeded in 92 milliseconds
Hint-info (.\TLSConstants.fst(1517,0-1522,100)): Replay succeeded in 98 milliseconds
Hint-info (.\TLSConstants.fst(1528,11-1528,68)): Replay succeeded in 91 milliseconds
Hint-info (.\TLSConstants.fst(1530,0-1530,32)): Replay succeeded in 107 milliseconds
Hint-info (.\TLSConstants.fst(1532,30-1532,31)): Replay succeeded in 93 milliseconds
Hint-info (.\TLSConstants.fst(1534,11-1534,81)): Replay succeeded in 95 milliseconds
Hint-info (.\TLSConstants.fst(1535,3-1535,67)): Replay succeeded in 94 milliseconds
Hint-info (.\TLSConstants.fst(1536,0-1536,33)): Replay succeeded in 108 milliseconds
Hint-info (.\TLSConstants.fst(1541,5-1543,99)): Replay succeeded in 95 milliseconds
Hint-info (.\TLSConstants.fst(1543,6-1543,9)): Replay succeeded in 94 milliseconds
Hint-info (.\TLSConstants.fst(1543,6-1543,9)): Replay succeeded in 93 milliseconds
Hint-info (.\TLSConstants.fst(1543,22-1543,29)): Replay succeeded in 95 milliseconds
Hint-info (.\TLSConstants.fst(1548,0-1550,73)): Replay succeeded in 100 milliseconds
Hint-info (.\TLSConstants.fst(1554,0-1560,114)): Replay succeeded in 112 milliseconds
Hint-info (.\TLSConstants.fst(1568,0-1577,30)): Replay succeeded in 224 milliseconds
Hint-info (.\TLSConstants.fst(1583,0-1583,42)): Replay succeeded in 192 milliseconds
Hint-info (.\TLSConstants.fst(1589,0-1600,13)): Replay succeeded in 115 milliseconds
Hint-info (.\TLSConstants.fst(1604,0-1623,104)): Replay succeeded in 153 milliseconds
Hint-info (.\TLSConstants.fst(1630,0-1630,49)): Replay succeeded in 94 milliseconds
Hint-info (.\TLSConstants.fst(1631,0-1634,14)): Replay succeeded in 99 milliseconds
Hint-info (.\TLSConstants.fst(1637,21-1637,47)): Replay succeeded in 87 milliseconds
Hint-info (.\TLSConstants.fst(1638,0-1647,22)): Replay succeeded in 106 milliseconds
Hint-info (.\TLSConstants.fst(1653,0-1654,53)): Replay succeeded in 95 milliseconds
Hint-info (.\TLSConstants.fst(1655,0-1667,13)): Replay succeeded in 121 milliseconds
Hint-info (.\TLSConstants.fst(1670,22-1670,49)): Replay succeeded in 94 milliseconds
Hint-info (.\TLSConstants.fst(1672,2-1683,104)): Replay succeeded in 95 milliseconds
Hint-info (.\TLSConstants.fst(1671,0-1683,104)): Replay succeeded in 139 milliseconds
Hint-info (.\TLSConstants.fst(1678,23-1678,30)): Replay succeeded in 88 milliseconds
Hint-info (.\TLSConstants.fst(1679,11-1679,106)): Replay succeeded in 86 milliseconds
Hint-info (.\TLSConstants.fst(1680,9-1680,21)): Replay succeeded in 83 milliseconds
Hint-info (.\TLSConstants.fst(1683,17-1683,104)): Replay succeeded in 85 milliseconds
Hint-info (.\TLSConstants.fst(1691,0-1691,71)): Replay succeeded in 85 milliseconds
Hint-info (.\TLSConstants.fst(1699,4-1699,18)): Replay succeeded in 88 milliseconds
Hint-info (.\TLSConstants.fst(1699,4-1699,18)): Replay succeeded in 88 milliseconds
Hint-info (.\TLSConstants.fst(1700,4-1700,18)): Replay succeeded in 84 milliseconds
Hint-info (.\TLSConstants.fst(1700,4-1700,18)): Replay succeeded in 87 milliseconds
Hint-info (.\TLSConstants.fst(1704,0-1706,25)): Replay succeeded in 95 milliseconds
Hint-info (.\TLSConstants.fst(1710,0-1719,22)): Replay succeeded in 103 milliseconds
Hint-info (.\TLSConstants.fst(1727,0-1734,24)): Replay succeeded in 232 milliseconds
Hint-info (.\TLSConstants.fst(1736,0-1739,68)): Replay succeeded in 87 milliseconds
Hint-info (.\TLSConstants.fst(1740,0-1740,33)): Replay succeeded in 320 milliseconds
Hint-info (.\TLSConstants.fst(1746,0-1758,13)): Replay succeeded in 105 milliseconds
Hint-info (.\TLSConstants.fst(1762,0-1779,108)): Replay succeeded in 146 milliseconds
Hint-info (.\TLSConstants.fst(1783,0-1783,54)): Replay succeeded in 88 milliseconds
Hint-info (.\TLSConstants.fst(1788,0-1794,22)): Replay succeeded in 151 milliseconds
Hint-info (.\TLSConstants.fst(1798,0-1798,52)): Replay succeeded in 94 milliseconds
Hint-info (.\TLSConstants.fst(1802,0-1802,48)): Replay succeeded in 94 milliseconds
Hint-info (.\TLSConstants.fst(1806,20-1808,49)): Replay succeeded in 96 milliseconds
Hint-info (.\TLSConstants.fst(1812,0-1830,92)): Replay succeeded in 121 milliseconds
Hint-info (.\TLSConstants.fst(1839,0-1840,16)): Replay succeeded in 100 milliseconds
Hint-info (.\TLSConstants.fst(1844,0-1847,101)): Replay succeeded in 106 milliseconds
Hint-info (.\TLSConstants.fst(1854,0-1866,13)): Replay succeeded in 117 milliseconds
Hint-info (.\TLSConstants.fst(1870,0-1888,105)): Replay succeeded in 146 milliseconds
Hint-info (.\TLSConstants.fst(1892,0-1892,99)): Replay succeeded in 95 milliseconds
Hint-info (.\TLSConstants.fst(1899,4-1899,22)): Replay succeeded in 115 milliseconds
Hint-info (.\TLSConstants.fst(1899,4-1899,22)): Replay succeeded in 101 milliseconds
Hint-info (.\TLSConstants.fst(1900,4-1900,22)): Replay succeeded in 96 milliseconds
Hint-info (.\TLSConstants.fst(1900,4-1900,22)): Replay succeeded in 98 milliseconds
Hint-info (.\TLSConstants.fst(1904,0-1904,58)): Replay succeeded in 98 milliseconds
Hint-info (.\TLSConstants.fst(1909,0-1916,22)): Replay succeeded in 109 milliseconds
Hint-info (.\TLSConstants.fst(1920,0-1920,56)): Replay succeeded in 106 milliseconds
Hint-info (.\TLSConstants.fst(1924,0-1924,50)): Replay succeeded in 95 milliseconds
Hint-info (.\TLSConstants.fst(1928,24-1930,59)): Replay succeeded in 100 milliseconds
Hint-info (.\TLSConstants.fst(1934,0-1956,103)): Replay succeeded in 124 milliseconds
Verified module: TLSConstants (95033 milliseconds)
All verification conditions discharged successfully
(.\AEAD_GCM.fst(144,4-144,33))
Query (AEAD_GCM.genReader, 5)	succeeded (with hint) in 240 milliseconds with fuel 0 and ifuel 1
(.\StreamAE.fst(211,44-211,59))
Query (StreamAE.encrypt, 21)	succeeded (with hint) in 246 milliseconds with fuel 0 and ifuel 1
(.\StatefulLHAE.fst(107,26-107,35))
Query (StatefulLHAE.decrypt, 16)	succeeded (with hint) in 233 milliseconds with fuel 0 and ifuel 0
(.\StAE.fst(142,4-142,57))
Query (StAE.lemma_fragments_snoc_commutes, 1)	succeeded (with hint) in 232 milliseconds with fuel 0 and ifuel 1
(.\Epochs.fst(30,2-30,30))
Query (Epochs.epoch_region_inv, 2)	succeeded (with hint) in 266 milliseconds with fuel 0 and ifuel 1
(.\StreamAE.fst(211,44-211,59))
Query (StreamAE.encrypt, 22)	succeeded (with hint) in 223 milliseconds with fuel 0 and ifuel 1
(.\AEAD_GCM.fst(144,4-144,33))
Query (AEAD_GCM.genReader, 6)	succeeded (with hint) in 231 milliseconds with fuel 0 and ifuel 1
(.\StatefulLHAE.fst(109,42-109,72))
Query (StatefulLHAE.decrypt, 17)	succeeded (with hint) in 227 milliseconds with fuel 0 and ifuel 0
(.\StAE.fst(137,0-142,58))
Query (StAE.lemma_fragments_snoc_commutes, 2)	succeeded (with hint) in 234 milliseconds with fuel 0 and ifuel 1
(.\Epochs.fst(31,2-31,30))
Query (Epochs.epoch_region_inv, 3)	succeeded (with hint) in 251 milliseconds with fuel 0 and ifuel 1
.\KeySchedule.fst(526,4-526,30): Warning: Admitting ks_server_13_1rtt_psk_init without a definition
(C:\Build\Agent\_work\36\s\src\tls\KeySchedule.fst) digest is valid; using hints db.
(.\StreamAE.fst(213,17-213,27))
Query (StreamAE.encrypt, 23)	succeeded (with hint) in 231 milliseconds with fuel 0 and ifuel 1
(.\AEAD_GCM.fst(144,4-144,33))
Query (AEAD_GCM.genReader, 7)	succeeded (with hint) in 220 milliseconds with fuel 0 and ifuel 1
(.\StatefulLHAE.fst(109,44-109,71))
Query (StatefulLHAE.decrypt, 18)	succeeded (with hint) in 228 milliseconds with fuel 0 and ifuel 0
(.\StAE.fst(143,0-145,68))
Query (StAE.lemma_fragments_snoc_commutes, 3)	succeeded (with hint) in 237 milliseconds with fuel 0 and ifuel 1
(.\Epochs.fst(32,2-32,44))
Query (Epochs.epoch_region_inv, 4)	succeeded (with hint) in 250 milliseconds with fuel 0 and ifuel 1
(.\KeySchedule.fst(46,0-49,43))
Query (KeySchedule.print_share, 1)	succeeded (with hint) in 286 milliseconds with fuel 0 and ifuel 1
(.\StreamAE.fst(215,25-215,39))
Query (StreamAE.encrypt, 24)	succeeded (with hint) in 242 milliseconds with fuel 0 and ifuel 1
(.\AEAD_GCM.fst(145,4-145,34))
Query (AEAD_GCM.genReader, 8)	succeeded (with hint) in 243 milliseconds with fuel 0 and ifuel 1
(.\StatefulLHAE.fst(110,12-110,46))
Query (StatefulLHAE.decrypt, 19)	succeeded (with hint) in 232 milliseconds with fuel 0 and ifuel 0
(.\StAE.fst(148,0-149,57))
Query (StAE.fragments_prefix, 1)	succeeded (with hint) in 233 milliseconds with fuel 0 and ifuel 1
(.\Epochs.fst(46,17-46,34))
Query (Epochs.epoch, 1)	succeeded (with hint) in 253 milliseconds with fuel 0 and ifuel 1
(.\KeySchedule.fst(51,15-56,56))
Query (KeySchedule.keyLabel, 1)	succeeded (with hint) in 264 milliseconds with fuel 0 and ifuel 1
(.\StreamAE.fst(216,6-216,23))
Query (StreamAE.encrypt, 25)	succeeded (with hint) in 223 milliseconds with fuel 0 and ifuel 1
(.\StatefulLHAE.fst(110,12-110,36))
Query (StatefulLHAE.decrypt, 20)	succeeded (with hint) in 229 milliseconds with fuel 0 and ifuel 1
(.\AEAD_GCM.fst(145,4-145,28))
Query (AEAD_GCM.genReader, 9)	succeeded (with hint) in 273 milliseconds with fuel 0 and ifuel 1
(.\Epochs.fst(46,12-46,13))
Query (Epochs.__proj__Epoch__item__i, 1)	succeeded (with hint) in 257 milliseconds with fuel 0 and ifuel 1
(.\StAE.fst(152,0-157,30))
Query (StAE.fragments_prefix_stable, 1)	succeeded (with hint) in 284 milliseconds with fuel 0 and ifuel 1
(.\KeySchedule.fst(101,10-101,54))
Query (KeySchedule.psk, 1)	succeeded (with hint) in 259 milliseconds with fuel 0 and ifuel 1
(.\StreamAE.fst(217,16-217,36))
Query (StreamAE.encrypt, 26)	succeeded (with hint) in 277 milliseconds with fuel 0 and ifuel 1
(.\StatefulLHAE.fst(110,12-110,36))
Query (StatefulLHAE.decrypt, 21)	succeeded (with hint) in 232 milliseconds with fuel 0 and ifuel 0
(.\AEAD_GCM.fst(145,4-145,28))
Query (AEAD_GCM.genReader, 10)	succeeded (with hint) in 230 milliseconds with fuel 0 and ifuel 1
(.\Epochs.fst(46,12-46,13))
Query (Epochs.__proj__Epoch__item__i, 2)	succeeded (with hint) in 257 milliseconds with fuel 0 and ifuel 1
(.\StAE.fst(158,0-162,57))
Query (StAE.fragments_prefix_stable, 2)	succeeded (with hint) in 240 milliseconds with fuel 0 and ifuel 1
(.\StreamAE.fst(218,6-218,18))
Query (StreamAE.encrypt, 27)	succeeded (with hint) in 224 milliseconds with fuel 0 and ifuel 1
(.\KeySchedule.fst(103,0-106,27))
Query (KeySchedule.get_psk_info, 1)	succeeded (with hint) in 259 milliseconds with fuel 0 and ifuel 1
(.\AEAD_GCM.fst(145,4-145,28))
Query (AEAD_GCM.genReader, 11)	succeeded (with hint) in 229 milliseconds with fuel 0 and ifuel 1
(.\StatefulLHAE.fst(110,12-110,36))
Query (StatefulLHAE.decrypt, 22)	succeeded (with hint) in 247 milliseconds with fuel 0 and ifuel 0
(.\StreamAE.fst(218,27-218,41))
Query (StreamAE.encrypt, 28)	succeeded (with hint) in 225 milliseconds with fuel 0 and ifuel 1
(.\StAE.fst(169,0-172,62))
Query (StAE.seqnT, 1)	succeeded (with hint) in 234 milliseconds with fuel 0 and ifuel 1
(.\Epochs.fst(47,11-47,12))
Query (Epochs.__proj__Epoch__item__h, 1)	succeeded (with hint) in 250 milliseconds with fuel 0 and ifuel 1
(.\KeySchedule.fst(117,8-120,26))
Query (KeySchedule.zH, 1)	succeeded (with hint) in 282 milliseconds with fuel 0 and ifuel 1
(.\AEAD_GCM.fst(133,0-145,36))
Query (AEAD_GCM.genReader, 12)	succeeded (with hint) in 246 milliseconds with fuel 0 and ifuel 1
(.\StAE.fst(171,18-171,67))
Query (StAE.seqnT, 2)	succeeded (with hint) in 240 milliseconds with fuel 0 and ifuel 1
(.\Epochs.fst(48,11-48,12))
Query (Epochs.__proj__Epoch__item__r, 1)	succeeded (with hint) in 262 milliseconds with fuel 0 and ifuel 1
(.\StreamAE.fst(201,0-218,49))
Query (StreamAE.encrypt, 29)	succeeded (with hint) in 266 milliseconds with fuel 0 and ifuel 1
(.\StatefulLHAE.fst(91,0-110,49))
Query (StatefulLHAE.decrypt, 23)	succeeded (with hint) in 287 milliseconds with fuel 0 and ifuel 0
(.\Epochs.fst(49,11-49,12))
Query (Epochs.__proj__Epoch__item__w, 1)	succeeded (with hint) in 250 milliseconds with fuel 0 and ifuel 1
(.\StAE.fst(171,18-171,67))
Query (StAE.seqnT, 3)	succeeded (with hint) in 299 milliseconds with fuel 0 and ifuel 1
(.\StatefulLHAE.fst(111,0-115,26))
Query (StatefulLHAE.decrypt, 24)	succeeded (with hint) in 252 milliseconds with fuel 0 and ifuel 0
(.\StAE.fst(171,18-171,67))
Query (StAE.seqnT, 4)	succeeded (with hint) in 227 milliseconds with fuel 0 and ifuel 1
(.\Epochs.fst(49,11-49,12))
Query (Epochs.__proj__Epoch__item__w, 2)	succeeded (with hint) in 253 milliseconds with fuel 0 and ifuel 1
(.\StatefulLHAE.fst(112,13-112,35))
Query (StatefulLHAE.decrypt, 25)	succeeded (with hint) in 228 milliseconds with fuel 0 and ifuel 0
(.\AEAD_GCM.fst(146,0-158,48))
Query (AEAD_GCM.genReader, 13)	succeeded (with hint) in 693 milliseconds with fuel 0 and ifuel 1
(.\StAE.fst(171,29-171,67))
Query (StAE.seqnT, 5)	succeeded (with hint) in 244 milliseconds with fuel 0 and ifuel 1
(.\Epochs.fst(55,0-55,60))
Query (Epochs.epoch_id, 1)	succeeded (with hint) in 274 milliseconds with fuel 0 and ifuel 2
(.\StreamAE.fst(225,0-251,3))
Query (StreamAE.encrypt, 30)	failed (with hint) in 479 milliseconds with fuel 0 and ifuel 0
(.\StatefulLHAE.fst(112,13-112,35))
Query (StatefulLHAE.decrypt, 26)	succeeded (with hint) in 249 milliseconds with fuel 0 and ifuel 0
(.\AEAD_GCM.fst(150,14-150,42))
Query (AEAD_GCM.genReader, 14)	succeeded (with hint) in 246 milliseconds with fuel 0 and ifuel 1
(.\StAE.fst(171,29-171,67))
Query (StAE.seqnT, 6)	succeeded (with hint) in 250 milliseconds with fuel 0 and ifuel 1
(.\StatefulLHAE.fst(112,13-112,35))
Query (StatefulLHAE.decrypt, 27)	succeeded (with hint) in 247 milliseconds with fuel 0 and ifuel 0
(.\Epochs.fst(57,0-62,6))
Query (Epochs.reveal_epoch_region_inv_all, 1)	succeeded (with hint) in 310 milliseconds with fuel 0 and ifuel 1
(.\AEAD_GCM.fst(153,41-153,64))
Query (AEAD_GCM.genReader, 15)	succeeded (with hint) in 249 milliseconds with fuel 0 and ifuel 1
Hint-info (.\StatefulLHAE.fst(32,21-32,43)): Replay succeeded in 231 milliseconds
Hint-info (.\StatefulLHAE.fst(36,2-36,58)): Replay succeeded in 231 milliseconds
Hint-info (.\StatefulLHAE.fst(35,0-36,58)): Replay succeeded in 230 milliseconds
Hint-info (.\StatefulLHAE.fst(55,0-55,65)): Replay succeeded in 233 milliseconds
Hint-info (.\StatefulLHAE.fst(60,13-60,26)): Replay succeeded in 226 milliseconds
Hint-info (.\StatefulLHAE.fst(64,35-64,67)): Replay succeeded in 230 milliseconds
Hint-info (.\StatefulLHAE.fst(65,7-65,31)): Replay succeeded in 234 milliseconds
Hint-info (.\StatefulLHAE.fst(65,7-65,31)): Replay succeeded in 240 milliseconds
Hint-info (.\StatefulLHAE.fst(65,7-65,31)): Replay succeeded in 233 milliseconds
Hint-info (.\StatefulLHAE.fst(67,16-67,75)): Replay succeeded in 224 milliseconds
Hint-info (.\StatefulLHAE.fst(67,43-67,73)): Replay succeeded in 232 milliseconds
Hint-info (.\StatefulLHAE.fst(68,10-68,39)): Replay succeeded in 250 milliseconds
Hint-info (.\StatefulLHAE.fst(68,10-68,39)): Replay succeeded in 259 milliseconds
Hint-info (.\StatefulLHAE.fst(68,10-68,39)): Replay succeeded in 249 milliseconds
Hint-info (.\StatefulLHAE.fst(69,10-69,67)): Replay succeeded in 255 milliseconds
Hint-info (.\StatefulLHAE.fst(69,10-69,34)): Replay succeeded in 250 milliseconds
Hint-info (.\StatefulLHAE.fst(69,10-69,34)): Replay succeeded in 259 milliseconds
Hint-info (.\StatefulLHAE.fst(69,10-69,34)): Replay succeeded in 250 milliseconds
Hint-info (.\StatefulLHAE.fst(69,39-69,63)): Replay succeeded in 252 milliseconds
Hint-info (.\StatefulLHAE.fst(69,39-69,63)): Replay succeeded in 256 milliseconds
Hint-info (.\StatefulLHAE.fst(69,39-69,63)): Replay succeeded in 248 milliseconds
Hint-info (.\StatefulLHAE.fst(70,10-70,43)): Replay succeeded in 247 milliseconds
Hint-info (.\StatefulLHAE.fst(73,18-73,30)): Replay succeeded in 253 milliseconds
Hint-info (.\StatefulLHAE.fst(74,18-74,42)): Replay succeeded in 252 milliseconds
Hint-info (.\StatefulLHAE.fst(74,18-74,42)): Replay succeeded in 263 milliseconds
Hint-info (.\StatefulLHAE.fst(74,18-74,42)): Replay succeeded in 251 milliseconds
Hint-info (.\StatefulLHAE.fst(79,7-79,24)): Replay succeeded in 253 milliseconds
Hint-info (.\StatefulLHAE.fst(80,21-80,41)): Replay succeeded in 244 milliseconds
Hint-info (.\StatefulLHAE.fst(81,10-81,22)): Replay succeeded in 254 milliseconds
Hint-info (.\StatefulLHAE.fst(59,0-81,43)): Replay succeeded in 300 milliseconds
Hint-info (.\StatefulLHAE.fst(83,0-87,31)): Replay succeeded in 255 milliseconds
Hint-info (.\StatefulLHAE.fst(84,13-84,35)): Replay succeeded in 229 milliseconds
Hint-info (.\StatefulLHAE.fst(84,13-84,35)): Replay succeeded in 240 milliseconds
Hint-info (.\StatefulLHAE.fst(84,13-84,35)): Replay succeeded in 229 milliseconds
Hint-info (.\StatefulLHAE.fst(93,23-93,47)): Replay succeeded in 282 milliseconds
Hint-info (.\StatefulLHAE.fst(93,23-93,47)): Replay succeeded in 248 milliseconds
Hint-info (.\StatefulLHAE.fst(93,23-93,47)): Replay succeeded in 235 milliseconds
Hint-info (.\StatefulLHAE.fst(95,13-95,37)): Replay succeeded in 229 milliseconds
Hint-info (.\StatefulLHAE.fst(95,13-95,37)): Replay succeeded in 237 milliseconds
Hint-info (.\StatefulLHAE.fst(95,13-95,37)): Replay succeeded in 247 milliseconds
Hint-info (.\StatefulLHAE.fst(97,18-97,39)): Replay succeeded in 254 milliseconds
Hint-info (.\StatefulLHAE.fst(98,12-98,36)): Replay succeeded in 313 milliseconds
Hint-info (.\StatefulLHAE.fst(98,12-98,36)): Replay succeeded in 256 milliseconds
Hint-info (.\StatefulLHAE.fst(98,12-98,36)): Replay succeeded in 245 milliseconds
Hint-info (.\StatefulLHAE.fst(102,12-102,51)): Replay succeeded in 322 milliseconds
Hint-info (.\StatefulLHAE.fst(103,12-103,22)): Replay succeeded in 249 milliseconds
Hint-info (.\StatefulLHAE.fst(105,34-105,58)): Replay succeeded in 251 milliseconds
Hint-info (.\StatefulLHAE.fst(105,34-105,58)): Replay succeeded in 252 milliseconds
Hint-info (.\StatefulLHAE.fst(105,34-105,58)): Replay succeeded in 322 milliseconds
Hint-info (.\StatefulLHAE.fst(107,26-107,35)): Replay succeeded in 233 milliseconds
Hint-info (.\StatefulLHAE.fst(109,42-109,72)): Replay succeeded in 227 milliseconds
Hint-info (.\StatefulLHAE.fst(109,44-109,71)): Replay succeeded in 228 milliseconds
Hint-info (.\StatefulLHAE.fst(110,12-110,46)): Replay succeeded in 232 milliseconds
Hint-info (.\StatefulLHAE.fst(110,12-110,36)): Replay succeeded in 229 milliseconds
Hint-info (.\StatefulLHAE.fst(110,12-110,36)): Replay succeeded in 232 milliseconds
Hint-info (.\StatefulLHAE.fst(110,12-110,36)): Replay succeeded in 247 milliseconds
Hint-info (.\StatefulLHAE.fst(91,0-110,49)): Replay succeeded in 287 milliseconds
Hint-info (.\StatefulLHAE.fst(111,0-115,26)): Replay succeeded in 252 milliseconds
Hint-info (.\StatefulLHAE.fst(112,13-112,35)): Replay succeeded in 228 milliseconds
Hint-info (.\StatefulLHAE.fst(112,13-112,35)): Replay succeeded in 249 milliseconds
Hint-info (.\StatefulLHAE.fst(112,13-112,35)): Replay succeeded in 247 milliseconds
Verified module: StatefulLHAE (23926 milliseconds)
All verification conditions discharged successfully
(.\StAE.fst(171,29-171,67))
Query (StAE.seqnT, 7)	succeeded (with hint) in 285 milliseconds with fuel 0 and ifuel 1
(.\Epochs.fst(64,0-68,6))
Query (Epochs.reveal_epoch_region_inv, 1)	succeeded (with hint) in 291 milliseconds with fuel 0 and ifuel 1
(.\StAE.fst(171,29-171,67))
Query (StAE.seqnT, 8)	succeeded (with hint) in 252 milliseconds with fuel 0 and ifuel 1
(.\AEAD_GCM.fst(166,0-171,51))
Query (AEAD_GCM.coerce, 1)	succeeded (with hint) in 280 milliseconds with fuel 0 and ifuel 1
(.\Epochs.fst(70,0-72,14))
Query (Epochs.writer_epoch, 1)	succeeded (with hint) in 282 milliseconds with fuel 0 and ifuel 1
(.\StAE.fst(171,41-171,66))
Query (StAE.seqnT, 9)	succeeded (with hint) in 250 milliseconds with fuel 0 and ifuel 1
(.\AEAD_GCM.fst(176,37-176,46))
Query (AEAD_GCM.leak, 1)	succeeded (with hint) in 255 milliseconds with fuel 0 and ifuel 1
(.\Epochs.fst(74,0-76,14))
Query (Epochs.reader_epoch, 1)	succeeded (with hint) in 281 milliseconds with fuel 0 and ifuel 1
(.\StAE.fst(172,18-172,62))
Query (StAE.seqnT, 10)	succeeded (with hint) in 254 milliseconds with fuel 0 and ifuel 1
(.\AEAD_GCM.fst(177,0-178,27))
Query (AEAD_GCM.leak, 2)	succeeded (with hint) in 251 milliseconds with fuel 0 and ifuel 1
(.\Epochs.fst(79,0-87,40))
Query (Epochs.epochs_inv, 1)	succeeded (with hint) in 286 milliseconds with fuel 0 and ifuel 1
(.\AEAD_GCM.fst(178,2-178,27))
Query (AEAD_GCM.leak, 3)	succeeded (with hint) in 249 milliseconds with fuel 0 and ifuel 1
(.\StAE.fst(172,18-172,62))
Query (StAE.seqnT, 11)	succeeded (with hint) in 266 milliseconds with fuel 0 and ifuel 1
(.\Epochs.fst(81,4-87,40))
Query (Epochs.epochs_inv, 2)	succeeded (with hint) in 337 milliseconds with fuel 0 and ifuel 1
(.\StAE.fst(172,18-172,62))
Query (StAE.seqnT, 12)	succeeded (with hint) in 253 milliseconds with fuel 0 and ifuel 1
(.\AEAD_GCM.fst(180,0-180,56))
Query (AEAD_GCM.lemma_12, 1)	succeeded (with hint) in 250 milliseconds with fuel 0 and ifuel 1
(.\StAE.fst(172,29-172,62))
Query (StAE.seqnT, 13)	succeeded (with hint) in 256 milliseconds with fuel 0 and ifuel 1
(.\AEAD_GCM.fst(180,28-180,51))
Query (AEAD_GCM.lemma_12, 2)	succeeded (with hint) in 247 milliseconds with fuel 0 and ifuel 1
(.\Epochs.fst(81,34-81,40))
Query (Epochs.epochs_inv, 3)	succeeded (with hint) in 346 milliseconds with fuel 0 and ifuel 1
(.\StAE.fst(172,29-172,62))
Query (StAE.seqnT, 14)	succeeded (with hint) in 301 milliseconds with fuel 0 and ifuel 1
(.\AEAD_GCM.fst(180,28-180,51))
Query (AEAD_GCM.lemma_12, 3)	succeeded (with hint) in 243 milliseconds with fuel 0 and ifuel 1
(.\Epochs.fst(85,4-85,47))
Query (Epochs.epochs_inv, 4)	succeeded (with hint) in 355 milliseconds with fuel 0 and ifuel 1
.\KeySchedule.fst(526,4-526,30): Warning: Admitting ks_server_13_1rtt_psk_init without a definition
(.\StAE.fst(172,29-172,62))
Query (StAE.seqnT, 15)	succeeded (with hint) in 294 milliseconds with fuel 0 and ifuel 1
(.\Epochs.fst(92,0-97,6))
Query (Epochs.reveal_epochs_inv', 1)	succeeded (with hint) in 341 milliseconds with fuel 0 and ifuel 1
.\KeySchedule.fst(526,4-526,30): Warning: Admitting ks_server_13_1rtt_psk_init without a definition
(.\StAE.fst(172,29-172,62))
Query (StAE.seqnT, 16)	succeeded (with hint) in 264 milliseconds with fuel 0 and ifuel 1
(.\Epochs.fst(107,5-111,15))
Query (Epochs.epochs, 1)	succeeded (with hint) in 339 milliseconds with fuel 0 and ifuel 1
(.\StAE.fst(172,43-172,61))
Query (StAE.seqnT, 17)	succeeded (with hint) in 292 milliseconds with fuel 0 and ifuel 1
(.\Epochs.fst(108,14-108,16))
Query (Epochs.__proj__MkEpochs__item__es, 1)	succeeded (with hint) in 271 milliseconds with fuel 0 and ifuel 1
(.\AEAD_GCM.fst(182,0-210,57))
Query (AEAD_GCM.concrete_encrypt, 1)	failed (with hint) in 591 milliseconds with fuel 0 and ifuel 1
(.\StAE.fst(192,10-192,43))
Query (StAE.frame_fragments, 1)	succeeded (with hint) in 243 milliseconds with fuel 0 and ifuel 1
(.\Epochs.fst(108,14-108,16))
Query (Epochs.__proj__MkEpochs__item__es, 2)	succeeded (with hint) in 266 milliseconds with fuel 0 and ifuel 1
(.\StAE.fst(193,14-193,41))
Query (StAE.frame_fragments, 2)	succeeded (with hint) in 272 milliseconds with fuel 0 and ifuel 1
Hint-info (.\KeySchedule.fst(46,0-49,43)): Replay succeeded in 286 milliseconds
Hint-info (.\KeySchedule.fst(51,15-56,56)): Replay succeeded in 264 milliseconds
Hint-info (.\KeySchedule.fst(101,10-101,54)): Replay succeeded in 259 milliseconds
Hint-info (.\KeySchedule.fst(103,0-106,27)): Replay succeeded in 259 milliseconds
Hint-info (.\KeySchedule.fst(117,8-120,26)): Replay succeeded in 282 milliseconds
Verified module: KeySchedule (8796 milliseconds)
All verification conditions discharged successfully
(.\Epochs.fst(109,9-109,13))
Query (Epochs.__proj__MkEpochs__item__read, 1)	succeeded (with hint) in 317 milliseconds with fuel 0 and ifuel 1
(.\StAE.fst(194,26-194,60))
Query (StAE.frame_fragments, 3)	succeeded (with hint) in 289 milliseconds with fuel 0 and ifuel 1
(.\Epochs.fst(109,9-109,13))
Query (Epochs.__proj__MkEpochs__item__read, 2)	succeeded (with hint) in 264 milliseconds with fuel 0 and ifuel 1
(.\StAE.fst(189,0-194,61))
Query (StAE.frame_fragments, 4)	succeeded (with hint) in 240 milliseconds with fuel 0 and ifuel 1
(.\Epochs.fst(110,5-110,10))
Query (Epochs.__proj__MkEpochs__item__write, 1)	succeeded (with hint) in 320 milliseconds with fuel 0 and ifuel 1
(.\StAE.fst(195,0-195,42))
Query (StAE.frame_fragments, 5)	succeeded (with hint) in 271 milliseconds with fuel 0 and ifuel 1
.\KeySchedule.fst(526,4-526,30): Warning: Admitting ks_server_13_1rtt_psk_init without a definition
(.\StAE.fst(201,10-201,39))
Query (StAE.frame_seqnT, 1)	succeeded (with hint) in 243 milliseconds with fuel 0 and ifuel 1
(.\Epochs.fst(110,5-110,10))
Query (Epochs.__proj__MkEpochs__item__write, 2)	succeeded (with hint) in 250 milliseconds with fuel 0 and ifuel 1
(.\StAE.fst(202,14-202,37))
Query (StAE.frame_seqnT, 2)	succeeded (with hint) in 286 milliseconds with fuel 0 and ifuel 1
(.\Epochs.fst(114,4-114,37))
Query (Epochs.containsT, 1)	succeeded (with hint) in 315 milliseconds with fuel 0 and ifuel 1
(.\StAE.fst(203,13-203,38))
Query (StAE.frame_seqnT, 3)	succeeded (with hint) in 285 milliseconds with fuel 0 and ifuel 1
(.\Epochs.fst(125,3-125,19))
Query (Epochs.alloc_log_and_ctrs, 1)	succeeded (with hint) in 345 milliseconds with fuel 0 and ifuel 1
(.\StAE.fst(198,0-203,39))
Query (StAE.frame_seqnT, 4)	succeeded (with hint) in 252 milliseconds with fuel 0 and ifuel 1
(.\Epochs.fst(126,6-126,22))
Query (Epochs.alloc_log_and_ctrs, 2)	succeeded (with hint) in 364 milliseconds with fuel 0 and ifuel 1
.\KeySchedule.fst(526,4-526,30): Warning: Admitting ks_server_13_1rtt_psk_init without a definition
(.\StAE.fst(204,0-204,38))
Query (StAE.frame_seqnT, 5)	succeeded (with hint) in 361 milliseconds with fuel 3 and ifuel 3
(.\Epochs.fst(126,6-126,22))
Query (Epochs.alloc_log_and_ctrs, 3)	succeeded (with hint) in 354 milliseconds with fuel 0 and ifuel 1
(.\StAE.fst(208,0-211,53))
Query (StAE.frame_f, 1)	succeeded (with hint) in 260 milliseconds with fuel 0 and ifuel 1
(.\Epochs.fst(127,6-127,22))
Query (Epochs.alloc_log_and_ctrs, 4)	succeeded (with hint) in 328 milliseconds with fuel 0 and ifuel 1
(.\StAE.fst(214,32-214,58))
Query (StAE.frame_seqT_auto, 1)	succeeded (with hint) in 320 milliseconds with fuel 0 and ifuel 1
(.\Epochs.fst(127,6-127,22))
Query (Epochs.alloc_log_and_ctrs, 5)	succeeded (with hint) in 362 milliseconds with fuel 0 and ifuel 1
(.\StAE.fst(215,7-215,35))
Query (StAE.frame_seqT_auto, 2)	succeeded (with hint) in 299 milliseconds with fuel 0 and ifuel 1
(.\Epochs.fst(128,6-128,36))
Query (Epochs.alloc_log_and_ctrs, 6)	succeeded (with hint) in 356 milliseconds with fuel 0 and ifuel 1
(.\StAE.fst(216,17-216,40))
Query (StAE.frame_seqT_auto, 3)	succeeded (with hint) in 326 milliseconds with fuel 0 and ifuel 1
(.\Epochs.fst(128,6-128,17))
Query (Epochs.alloc_log_and_ctrs, 7)	succeeded (with hint) in 309 milliseconds with fuel 0 and ifuel 1
(.\StAE.fst(220,0-220,37))
Query (StAE.frame_seqT_auto, 4)	succeeded (with hint) in 339 milliseconds with fuel 3 and ifuel 3
(.\Epochs.fst(116,0-128,39))
Query (Epochs.alloc_log_and_ctrs, 8)	succeeded (with hint) in 362 milliseconds with fuel 0 and ifuel 1
(.\StAE.fst(223,33-223,63))
Query (StAE.frame_fragments_auto, 1)	succeeded (with hint) in 320 milliseconds with fuel 0 and ifuel 1
(.\StAE.fst(224,7-224,39))
Query (StAE.frame_fragments_auto, 2)	succeeded (with hint) in 318 milliseconds with fuel 0 and ifuel 1
(.\Epochs.fst(129,0-135,18))
Query (Epochs.alloc_log_and_ctrs, 9)	succeeded (with hint) in 420 milliseconds with fuel 0 and ifuel 1
(.\StAE.fst(225,17-225,49))
Query (StAE.frame_fragments_auto, 3)	succeeded (with hint) in 235 milliseconds with fuel 0 and ifuel 1
(.\StAE.fst(226,2-226,25))
Query (StAE.frame_fragments_auto, 4)	succeeded (with hint) in 237 milliseconds with fuel 0 and ifuel 1
(.\Epochs.fst(132,2-132,34))
Query (Epochs.alloc_log_and_ctrs, 10)	succeeded (with hint) in 275 milliseconds with fuel 0 and ifuel 1
(.\StAE.fst(227,2-227,25))
Query (StAE.frame_fragments_auto, 5)	succeeded (with hint) in 288 milliseconds with fuel 0 and ifuel 1
(.\Epochs.fst(132,13-132,34))
Query (Epochs.alloc_log_and_ctrs, 11)	succeeded (with hint) in 325 milliseconds with fuel 0 and ifuel 1
(.\StAE.fst(222,0-227,26))
Query (StAE.frame_fragments_auto, 6)	succeeded (with hint) in 240 milliseconds with fuel 0 and ifuel 1
(.\Epochs.fst(133,34-133,48))
Query (Epochs.alloc_log_and_ctrs, 12)	succeeded (with hint) in 322 milliseconds with fuel 0 and ifuel 1
(.\StAE.fst(229,0-229,42))
Query (StAE.frame_fragments_auto, 7)	succeeded (with hint) in 309 milliseconds with fuel 3 and ifuel 3
(.\Epochs.fst(134,34-134,48))
Query (Epochs.alloc_log_and_ctrs, 13)	succeeded (with hint) in 322 milliseconds with fuel 0 and ifuel 1
(.\StAE.fst(235,0-237,23))
Query (StAE.reads, 1)	succeeded (with hint) in 291 milliseconds with fuel 0 and ifuel 1
(.\Epochs.fst(135,2-135,18))
Query (Epochs.alloc_log_and_ctrs, 14)	succeeded (with hint) in 326 milliseconds with fuel 0 and ifuel 1
(.\StAE.fst(236,67-236,97))
Query (StAE.reads, 2)	succeeded (with hint) in 287 milliseconds with fuel 0 and ifuel 1
(.\Epochs.fst(135,2-135,18))
Query (Epochs.alloc_log_and_ctrs, 15)	succeeded (with hint) in 319 milliseconds with fuel 0 and ifuel 1
(.\StAE.fst(236,80-236,97))
Query (StAE.reads, 3)	succeeded (with hint) in 281 milliseconds with fuel 0 and ifuel 1
(.\Epochs.fst(135,2-135,18))
Query (Epochs.alloc_log_and_ctrs, 16)	succeeded (with hint) in 328 milliseconds with fuel 0 and ifuel 1
(.\StAE.fst(239,75-239,105))
Query (StAE.fragments', 1)	succeeded (with hint) in 294 milliseconds with fuel 0 and ifuel 1
(.\Epochs.fst(140,27-140,38))
Query (Epochs.incr_epoch_ctr, 1)	succeeded (with hint) in 314 milliseconds with fuel 0 and ifuel 1
(.\StAE.fst(239,0-239,116))
Query (StAE.fragments', 2)	succeeded (with hint) in 312 milliseconds with fuel 0 and ifuel 1
(.\Epochs.fst(140,27-140,38))
Query (Epochs.incr_epoch_ctr, 2)	succeeded (with hint) in 308 milliseconds with fuel 0 and ifuel 1
(.\StAE.fst(240,0-240,37))
Query (StAE.fragments', 3)	succeeded (with hint) in 294 milliseconds with fuel 3 and ifuel 3
(.\Epochs.fst(140,52-140,64))
Query (Epochs.incr_epoch_ctr, 3)	succeeded (with hint) in 271 milliseconds with fuel 0 and ifuel 1
(.\StAE.fst(244,0-251,61))
Query (StAE.genPost, 1)	succeeded (with hint) in 285 milliseconds with fuel 0 and ifuel 1
(.\StAE.fst(246,14-246,23))
Query (StAE.genPost, 2)	succeeded (with hint) in 281 milliseconds with fuel 0 and ifuel 1
(.\Epochs.fst(142,37-142,52))
Query (Epochs.incr_epoch_ctr, 4)	succeeded (with hint) in 319 milliseconds with fuel 0 and ifuel 1
(.\StAE.fst(249,2-249,24))
Query (StAE.genPost, 3)	succeeded (with hint) in 274 milliseconds with fuel 0 and ifuel 1
(.\Epochs.fst(142,37-142,52))
Query (Epochs.incr_epoch_ctr, 5)	succeeded (with hint) in 310 milliseconds with fuel 0 and ifuel 1
(.\StAE.fst(250,2-250,27))
Query (StAE.genPost, 4)	succeeded (with hint) in 272 milliseconds with fuel 0 and ifuel 1
(.\Epochs.fst(144,23-144,45))
Query (Epochs.incr_epoch_ctr, 6)	succeeded (with hint) in 305 milliseconds with fuel 0 and ifuel 1
(.\Epochs.fst(144,25-144,44))
Query (Epochs.incr_epoch_ctr, 7)	succeeded (with hint) in 296 milliseconds with fuel 0 and ifuel 1
(.\StAE.fst(258,0-262,35))
Query (StAE.gen, 1)	succeeded (with hint) in 477 milliseconds with fuel 1 and ifuel 1
(.\Epochs.fst(145,7-145,38))
Query (Epochs.incr_epoch_ctr, 8)	succeeded (with hint) in 310 milliseconds with fuel 0 and ifuel 1
(.\StAE.fst(268,24-268,33))
Query (StAE.genReader, 1)	succeeded (with hint) in 248 milliseconds with fuel 1 and ifuel 1
(.\Epochs.fst(145,7-145,19))
Query (Epochs.incr_epoch_ctr, 9)	succeeded (with hint) in 318 milliseconds with fuel 0 and ifuel 1
(.\StAE.fst(269,15-269,49))
Query (StAE.genReader, 2)	succeeded (with hint) in 292 milliseconds with fuel 1 and ifuel 1
(.\Epochs.fst(145,7-145,19))
Query (Epochs.incr_epoch_ctr, 10)	succeeded (with hint) in 329 milliseconds with fuel 0 and ifuel 1
(.\StAE.fst(271,8-271,39))
Query (StAE.genReader, 3)	succeeded (with hint) in 286 milliseconds with fuel 1 and ifuel 1
(.\Epochs.fst(145,22-145,34))
Query (Epochs.incr_epoch_ctr, 11)	succeeded (with hint) in 311 milliseconds with fuel 0 and ifuel 1
(.\StAE.fst(274,15-274,29))
Query (StAE.genReader, 4)	succeeded (with hint) in 275 milliseconds with fuel 1 and ifuel 1
(.\Epochs.fst(145,22-145,34))
Query (Epochs.incr_epoch_ctr, 12)	succeeded (with hint) in 269 milliseconds with fuel 0 and ifuel 1
(.\StAE.fst(276,0-285,44))
Query (StAE.genReader, 5)	succeeded (with hint) in 283 milliseconds with fuel 1 and ifuel 1
(.\Epochs.fst(137,0-145,40))
Query (Epochs.incr_epoch_ctr, 13)	succeeded (with hint) in 323 milliseconds with fuel 0 and ifuel 1
(.\StAE.fst(280,71-280,77))
Query (StAE.genReader, 6)	succeeded (with hint) in 293 milliseconds with fuel 1 and ifuel 1
(.\StAE.fst(284,71-284,77))
Query (StAE.genReader, 7)	succeeded (with hint) in 284 milliseconds with fuel 1 and ifuel 1
(.\Epochs.fst(146,0-151,23))
Query (Epochs.incr_epoch_ctr, 14)	succeeded (with hint) in 351 milliseconds with fuel 0 and ifuel 1
(.\Epochs.fst(147,2-147,14))
Query (Epochs.incr_epoch_ctr, 15)	succeeded (with hint) in 310 milliseconds with fuel 0 and ifuel 1
(.\StAE.fst(298,0-304,44))
Query (StAE.coerce, 1)	succeeded (with hint) in 463 milliseconds with fuel 1 and ifuel 1
(.\Epochs.fst(147,2-147,14))
Query (Epochs.incr_epoch_ctr, 16)	succeeded (with hint) in 318 milliseconds with fuel 0 and ifuel 1
(.\StAE.fst(309,37-309,46))
Query (StAE.leak, 1)	succeeded (with hint) in 291 milliseconds with fuel 0 and ifuel 2
(.\Epochs.fst(148,12-148,22))
Query (Epochs.incr_epoch_ctr, 17)	succeeded (with hint) in 327 milliseconds with fuel 0 and ifuel 1
(.\StAE.fst(307,0-309,55))
Query (StAE.leak, 2)	succeeded (with hint) in 281 milliseconds with fuel 0 and ifuel 2
(.\Epochs.fst(148,12-148,22))
Query (Epochs.incr_epoch_ctr, 18)	succeeded (with hint) in 284 milliseconds with fuel 0 and ifuel 1
(.\StAE.fst(310,0-313,55))
Query (StAE.leak, 3)	succeeded (with hint) in 315 milliseconds with fuel 0 and ifuel 2
(.\Epochs.fst(149,2-149,39))
Query (Epochs.incr_epoch_ctr, 19)	succeeded (with hint) in 330 milliseconds with fuel 0 and ifuel 1
(.\StAE.fst(312,30-312,43))
Query (StAE.leak, 4)	succeeded (with hint) in 291 milliseconds with fuel 0 and ifuel 2
(.\Epochs.fst(150,2-150,39))
Query (Epochs.incr_epoch_ctr, 20)	succeeded (with hint) in 337 milliseconds with fuel 0 and ifuel 1
(.\StAE.fst(313,30-313,43))
Query (StAE.leak, 5)	succeeded (with hint) in 247 milliseconds with fuel 0 and ifuel 2
(.\Epochs.fst(150,13-150,39))
Query (Epochs.incr_epoch_ctr, 21)	succeeded (with hint) in 307 milliseconds with fuel 0 and ifuel 1
Hint-info (.\StAE.fst(33,0-35,53)): Replay succeeded in 252 milliseconds
Hint-info (.\StAE.fst(34,3-34,52)): Replay succeeded in 250 milliseconds
Hint-info (.\StAE.fst(35,3-35,52)): Replay succeeded in 250 milliseconds
Hint-info (.\StAE.fst(48,0-49,20)): Replay succeeded in 258 milliseconds
Hint-info (.\StAE.fst(54,0-61,30)): Replay succeeded in 263 milliseconds
Hint-info (.\StAE.fst(63,28-63,48)): Replay succeeded in 271 milliseconds
Hint-info (.\StAE.fst(69,5-71,66)): Replay succeeded in 252 milliseconds
Hint-info (.\StAE.fst(69,5-71,66)): Replay succeeded in 248 milliseconds
Hint-info (.\StAE.fst(70,4-70,10)): Replay succeeded in 250 milliseconds
Hint-info (.\StAE.fst(70,12-70,13)): Replay succeeded in 253 milliseconds
Hint-info (.\StAE.fst(70,12-70,13)): Replay succeeded in 252 milliseconds
Hint-info (.\StAE.fst(70,12-70,13)): Replay succeeded in 251 milliseconds
Hint-info (.\StAE.fst(71,4-71,10)): Replay succeeded in 243 milliseconds
Hint-info (.\StAE.fst(71,12-71,13)): Replay succeeded in 253 milliseconds
Hint-info (.\StAE.fst(71,12-71,13)): Replay succeeded in 252 milliseconds
Hint-info (.\StAE.fst(71,12-71,13)): Replay succeeded in 232 milliseconds
Hint-info (.\StAE.fst(73,0-75,27)): Replay succeeded in 236 milliseconds
Hint-info (.\StAE.fst(77,0-79,27)): Replay succeeded in 233 milliseconds
Hint-info (.\StAE.fst(82,0-85,33)): Replay succeeded in 228 milliseconds
Hint-info (.\StAE.fst(84,18-84,40)): Replay succeeded in 230 milliseconds
Hint-info (.\StAE.fst(85,18-85,33)): Replay succeeded in 234 milliseconds
Hint-info (.\StAE.fst(88,0-91,46)): Replay succeeded in 241 milliseconds
Hint-info (.\StAE.fst(90,18-90,44)): Replay succeeded in 240 milliseconds
Hint-info (.\StAE.fst(91,18-91,46)): Replay succeeded in 244 milliseconds
Hint-info (.\StAE.fst(107,0-112,12)): Replay succeeded in 240 milliseconds
Hint-info (.\StAE.fst(114,0-117,55)): Replay succeeded in 259 milliseconds
Hint-info (.\StAE.fst(116,18-116,51)): Replay succeeded in 289 milliseconds
Hint-info (.\StAE.fst(116,18-116,51)): Replay succeeded in 253 milliseconds
Hint-info (.\StAE.fst(116,30-116,51)): Replay succeeded in 285 milliseconds
Hint-info (.\StAE.fst(117,18-117,55)): Replay succeeded in 248 milliseconds
Hint-info (.\StAE.fst(117,18-117,55)): Replay succeeded in 254 milliseconds
Hint-info (.\StAE.fst(117,32-117,55)): Replay succeeded in 256 milliseconds
Hint-info (.\StAE.fst(119,0-124,13)): Replay succeeded in 253 milliseconds
Hint-info (.\StAE.fst(126,0-130,28)): Replay succeeded in 324 milliseconds
Hint-info (.\StAE.fst(133,0-135,22)): Replay succeeded in 315 milliseconds
Hint-info (.\StAE.fst(142,4-142,57)): Replay succeeded in 232 milliseconds
Hint-info (.\StAE.fst(137,0-142,58)): Replay succeeded in 234 milliseconds
Hint-info (.\StAE.fst(143,0-145,68)): Replay succeeded in 237 milliseconds
Hint-info (.\StAE.fst(148,0-149,57)): Replay succeeded in 233 milliseconds
Hint-info (.\StAE.fst(152,0-157,30)): Replay succeeded in 284 milliseconds
Hint-info (.\StAE.fst(158,0-162,57)): Replay succeeded in 240 milliseconds
Hint-info (.\StAE.fst(169,0-172,62)): Replay succeeded in 234 milliseconds
Hint-info (.\StAE.fst(171,18-171,67)): Replay succeeded in 240 milliseconds
Hint-info (.\StAE.fst(171,18-171,67)): Replay succeeded in 299 milliseconds
Hint-info (.\StAE.fst(171,18-171,67)): Replay succeeded in 227 milliseconds
Hint-info (.\StAE.fst(171,29-171,67)): Replay succeeded in 244 milliseconds
Hint-info (.\StAE.fst(171,29-171,67)): Replay succeeded in 250 milliseconds
Hint-info (.\StAE.fst(171,29-171,67)): Replay succeeded in 285 milliseconds
Hint-info (.\StAE.fst(171,29-171,67)): Replay succeeded in 252 milliseconds
Hint-info (.\StAE.fst(171,41-171,66)): Replay succeeded in 250 milliseconds
Hint-info (.\StAE.fst(172,18-172,62)): Replay succeeded in 254 milliseconds
Hint-info (.\StAE.fst(172,18-172,62)): Replay succeeded in 266 milliseconds
Hint-info (.\StAE.fst(172,18-172,62)): Replay succeeded in 253 milliseconds
Hint-info (.\StAE.fst(172,29-172,62)): Replay succeeded in 256 milliseconds
Hint-info (.\StAE.fst(172,29-172,62)): Replay succeeded in 301 milliseconds
Hint-info (.\StAE.fst(172,29-172,62)): Replay succeeded in 294 milliseconds
Hint-info (.\StAE.fst(172,29-172,62)): Replay succeeded in 264 milliseconds
Hint-info (.\StAE.fst(172,43-172,61)): Replay succeeded in 292 milliseconds
Hint-info (.\StAE.fst(192,10-192,43)): Replay succeeded in 243 milliseconds
Hint-info (.\StAE.fst(193,14-193,41)): Replay succeeded in 272 milliseconds
Hint-info (.\StAE.fst(194,26-194,60)): Replay succeeded in 289 milliseconds
Hint-info (.\StAE.fst(189,0-194,61)): Replay succeeded in 240 milliseconds
Hint-info (.\StAE.fst(195,0-195,42)): Replay succeeded in 271 milliseconds
Hint-info (.\StAE.fst(201,10-201,39)): Replay succeeded in 243 milliseconds
Hint-info (.\StAE.fst(202,14-202,37)): Replay succeeded in 286 milliseconds
Hint-info (.\StAE.fst(203,13-203,38)): Replay succeeded in 285 milliseconds
Hint-info (.\StAE.fst(198,0-203,39)): Replay succeeded in 252 milliseconds
Hint-info (.\StAE.fst(204,0-204,38)): Replay succeeded in 361 milliseconds
Hint-info (.\StAE.fst(208,0-211,53)): Replay succeeded in 260 milliseconds
Hint-info (.\StAE.fst(214,32-214,58)): Replay succeeded in 320 milliseconds
Hint-info (.\StAE.fst(215,7-215,35)): Replay succeeded in 299 milliseconds
Hint-info (.\StAE.fst(216,17-216,40)): Replay succeeded in 326 milliseconds
Hint-info (.\StAE.fst(220,0-220,37)): Replay succeeded in 339 milliseconds
Hint-info (.\StAE.fst(223,33-223,63)): Replay succeeded in 320 milliseconds
Hint-info (.\StAE.fst(224,7-224,39)): Replay succeeded in 318 milliseconds
Hint-info (.\StAE.fst(225,17-225,49)): Replay succeeded in 235 milliseconds
Hint-info (.\StAE.fst(226,2-226,25)): Replay succeeded in 237 milliseconds
Hint-info (.\StAE.fst(227,2-227,25)): Replay succeeded in 288 milliseconds
Hint-info (.\StAE.fst(222,0-227,26)): Replay succeeded in 240 milliseconds
Hint-info (.\StAE.fst(229,0-229,42)): Replay succeeded in 309 milliseconds
Hint-info (.\StAE.fst(235,0-237,23)): Replay succeeded in 291 milliseconds
Hint-info (.\StAE.fst(236,67-236,97)): Replay succeeded in 287 milliseconds
Hint-info (.\StAE.fst(236,80-236,97)): Replay succeeded in 281 milliseconds
Hint-info (.\StAE.fst(239,75-239,105)): Replay succeeded in 294 milliseconds
Hint-info (.\StAE.fst(239,0-239,116)): Replay succeeded in 312 milliseconds
Hint-info (.\StAE.fst(240,0-240,37)): Replay succeeded in 294 milliseconds
Hint-info (.\StAE.fst(244,0-251,61)): Replay succeeded in 285 milliseconds
Hint-info (.\StAE.fst(246,14-246,23)): Replay succeeded in 281 milliseconds
Hint-info (.\StAE.fst(249,2-249,24)): Replay succeeded in 274 milliseconds
Hint-info (.\StAE.fst(250,2-250,27)): Replay succeeded in 272 milliseconds
Hint-info (.\StAE.fst(258,0-262,35)): Replay succeeded in 477 milliseconds
Hint-info (.\StAE.fst(268,24-268,33)): Replay succeeded in 248 milliseconds
Hint-info (.\StAE.fst(269,15-269,49)): Replay succeeded in 292 milliseconds
Hint-info (.\StAE.fst(271,8-271,39)): Replay succeeded in 286 milliseconds
Hint-info (.\StAE.fst(274,15-274,29)): Replay succeeded in 275 milliseconds
Hint-info (.\StAE.fst(276,0-285,44)): Replay succeeded in 283 milliseconds
Hint-info (.\StAE.fst(280,71-280,77)): Replay succeeded in 293 milliseconds
Hint-info (.\StAE.fst(284,71-284,77)): Replay succeeded in 284 milliseconds
Hint-info (.\StAE.fst(298,0-304,44)): Replay succeeded in 463 milliseconds
Hint-info (.\StAE.fst(309,37-309,46)): Replay succeeded in 291 milliseconds
Hint-info (.\StAE.fst(307,0-309,55)): Replay succeeded in 281 milliseconds
Hint-info (.\StAE.fst(310,0-313,55)): Replay succeeded in 315 milliseconds
Hint-info (.\StAE.fst(312,30-312,43)): Replay succeeded in 291 milliseconds
Hint-info (.\StAE.fst(313,30-313,43)): Replay succeeded in 247 milliseconds
Verified module: StAE (42396 milliseconds)
All verification conditions discharged successfully
(.\Epochs.fst(151,2-151,23))
Query (Epochs.incr_epoch_ctr, 22)	succeeded (with hint) in 344 milliseconds with fuel 0 and ifuel 1
(.\Epochs.fst(151,2-151,23))
Query (Epochs.incr_epoch_ctr, 23)	succeeded (with hint) in 280 milliseconds with fuel 0 and ifuel 1
(.\Epochs.fst(156,0-158,22))
Query (Epochs.epochs_init, 1)	succeeded (with hint) in 333 milliseconds with fuel 0 and ifuel 1
(.\Epochs.fst(160,7-163,50))
Query (Epochs.incr_pre, 1)	succeeded (with hint) in 333 milliseconds with fuel 0 and ifuel 1
(.\Epochs.fst(162,12-162,23))
Query (Epochs.incr_pre, 2)	succeeded (with hint) in 329 milliseconds with fuel 0 and ifuel 1
(.\Epochs.fst(162,12-162,23))
Query (Epochs.incr_pre, 3)	succeeded (with hint) in 274 milliseconds with fuel 0 and ifuel 1
(.\Epochs.fst(163,23-163,50))
Query (Epochs.incr_pre, 4)	succeeded (with hint) in 379 milliseconds with fuel 0 and ifuel 1
(.\Epochs.fst(165,7-172,20))
Query (Epochs.incr_post, 1)	succeeded (with hint) in 334 milliseconds with fuel 0 and ifuel 1
(.\Epochs.fst(167,13-167,25))
Query (Epochs.incr_post, 2)	succeeded (with hint) in 286 milliseconds with fuel 0 and ifuel 1
(.\Epochs.fst(167,13-167,25))
Query (Epochs.incr_post, 3)	succeeded (with hint) in 256 milliseconds with fuel 0 and ifuel 1
(.\Epochs.fst(168,13-168,25))
Query (Epochs.incr_post, 4)	succeeded (with hint) in 259 milliseconds with fuel 0 and ifuel 1
(.\Epochs.fst(168,13-168,25))
Query (Epochs.incr_post, 5)	succeeded (with hint) in 255 milliseconds with fuel 0 and ifuel 1
(.\Epochs.fst(169,21-169,36))
Query (Epochs.incr_post, 6)	succeeded (with hint) in 261 milliseconds with fuel 0 and ifuel 1
(.\Epochs.fst(169,21-169,36))
Query (Epochs.incr_post, 7)	succeeded (with hint) in 262 milliseconds with fuel 0 and ifuel 1
(.\Epochs.fst(171,24-171,62))
Query (Epochs.incr_post, 8)	succeeded (with hint) in 270 milliseconds with fuel 0 and ifuel 1
(.\Epochs.fst(171,26-171,61))
Query (Epochs.incr_post, 9)	succeeded (with hint) in 260 milliseconds with fuel 0 and ifuel 1
(.\Epochs.fst(171,26-171,61))
Query (Epochs.incr_post, 10)	succeeded (with hint) in 320 milliseconds with fuel 0 and ifuel 1
(.\Epochs.fst(171,36-171,61))
Query (Epochs.incr_post, 11)	succeeded (with hint) in 319 milliseconds with fuel 0 and ifuel 1
(.\Epochs.fst(172,5-172,20))
Query (Epochs.incr_post, 12)	succeeded (with hint) in 321 milliseconds with fuel 0 and ifuel 1
(.\Epochs.fst(178,31-178,43))
Query (Epochs.add_epoch, 1)	succeeded (with hint) in 257 milliseconds with fuel 0 and ifuel 1
(.\Epochs.fst(181,23-181,37))
Query (Epochs.add_epoch, 2)	succeeded (with hint) in 255 milliseconds with fuel 0 and ifuel 1
(.\Epochs.fst(184,9-184,20))
Query (Epochs.add_epoch, 3)	succeeded (with hint) in 260 milliseconds with fuel 0 and ifuel 1
(.\Epochs.fst(184,33-184,46))
Query (Epochs.add_epoch, 4)	succeeded (with hint) in 258 milliseconds with fuel 0 and ifuel 1
(.\Epochs.fst(185,0-186,26))
Query (Epochs.add_epoch, 5)	succeeded (with hint) in 264 milliseconds with fuel 0 and ifuel 1
(.\Epochs.fst(186,4-186,26))
Query (Epochs.add_epoch, 6)	succeeded (with hint) in 260 milliseconds with fuel 0 and ifuel 1
(.\Epochs.fst(188,0-191,40))
Query (Epochs.incr_reader, 1)	succeeded (with hint) in 272 milliseconds with fuel 0 and ifuel 1
(.\Epochs.fst(193,0-196,41))
Query (Epochs.incr_writer, 1)	succeeded (with hint) in 331 milliseconds with fuel 0 and ifuel 1
(.\Epochs.fst(200,0-202,21))
Query (Epochs.ctr, 1)	succeeded (with hint) in 253 milliseconds with fuel 0 and ifuel 1
(.\Epochs.fst(204,0-204,110))
Query (Epochs.readerT, 1)	succeeded (with hint) in 333 milliseconds with fuel 0 and ifuel 1
(C:\Build\Agent\_work\36\s\src\tls\TLS.fst) digest is valid; using hints db.
(.\Epochs.fst(205,0-205,57))
Query (Epochs.readerT, 2)	succeeded (with hint) in 317 milliseconds with fuel 0 and ifuel 1
(.\Epochs.fst(205,48-205,57))
Query (Epochs.readerT, 3)	succeeded (with hint) in 320 milliseconds with fuel 0 and ifuel 1
(.\TLS.fst(51,0-56,17))
Query (TLS.outerPV, 1)	succeeded (with hint) in 361 milliseconds with fuel 0 and ifuel 0
(.\Epochs.fst(205,48-205,57))
Query (Epochs.readerT, 4)	succeeded (with hint) in 253 milliseconds with fuel 0 and ifuel 1
(.\TLS.fst(65,13-65,22))
Query (TLS.create, 1)	succeeded (with hint) in 341 milliseconds with fuel 0 and ifuel 0
(.\Epochs.fst(207,0-207,110))
Query (Epochs.writerT, 1)	succeeded (with hint) in 318 milliseconds with fuel 0 and ifuel 1
(.\TLS.fst(68,4-68,40))
Query (TLS.create, 2)	succeeded (with hint) in 282 milliseconds with fuel 0 and ifuel 0
(.\Epochs.fst(208,0-208,57))
Query (Epochs.writerT, 2)	succeeded (with hint) in 282 milliseconds with fuel 0 and ifuel 1
(.\TLS.fst(70,4-70,16))
Query (TLS.create, 3)	succeeded (with hint) in 352 milliseconds with fuel 0 and ifuel 0
(.\Epochs.fst(208,48-208,57))
Query (Epochs.writerT, 3)	succeeded (with hint) in 275 milliseconds with fuel 0 and ifuel 1
(.\TLS.fst(72,4-72,23))
Query (TLS.create, 4)	succeeded (with hint) in 288 milliseconds with fuel 0 and ifuel 0
(.\Epochs.fst(208,48-208,57))
Query (Epochs.writerT, 4)	succeeded (with hint) in 308 milliseconds with fuel 0 and ifuel 1
(.\TLS.fst(74,5-74,15))
Query (TLS.create, 5)	succeeded (with hint) in 285 milliseconds with fuel 0 and ifuel 0
(.\Epochs.fst(213,5-213,29))
Query (Epochs.get_ctr_post, 1)	succeeded (with hint) in 304 milliseconds with fuel 0 and ifuel 1
(.\TLS.fst(74,20-74,33))
Query (TLS.create, 6)	succeeded (with hint) in 360 milliseconds with fuel 0 and ifuel 0
(.\Epochs.fst(213,9-213,29))
Query (Epochs.get_ctr_post, 2)	succeeded (with hint) in 261 milliseconds with fuel 0 and ifuel 1
(C:\Build\Agent\_work\36\s\src\tls\Connection.fst) digest is valid; using hints db.
(.\TLS.fst(75,4-75,34))
Query (TLS.create, 7)	succeeded (with hint) in 340 milliseconds with fuel 0 and ifuel 0
(.\Epochs.fst(213,9-213,29))
Query (Epochs.get_ctr_post, 3)	succeeded (with hint) in 260 milliseconds with fuel 0 and ifuel 1
(.\Connection.fst(29,0-37,9))
Query (Connection.tlsState, 1)	succeeded (with hint) in 341 milliseconds with fuel 0 and ifuel 1
(.\Epochs.fst(215,5-215,31))
Query (Epochs.get_ctr_post, 4)	succeeded (with hint) in 288 milliseconds with fuel 0 and ifuel 1
(.\TLS.fst(76,4-76,27))
Query (TLS.create, 8)	succeeded (with hint) in 287 milliseconds with fuel 0 and ifuel 0
(.\Connection.fst(48,24-48,41))
Query (Connection.connection, 1)	succeeded (with hint) in 350 milliseconds with fuel 0 and ifuel 1
(.\Epochs.fst(217,0-223,5))
Query (Epochs.get_ctr, 1)	succeeded (with hint) in 265 milliseconds with fuel 0 and ifuel 1
(.\TLS.fst(79,0-83,21))
Query (TLS.create, 9)	failed (with hint) in 291 milliseconds with fuel 0 and ifuel 0
(.\Connection.fst(48,2-48,7))
Query (Connection.__proj__C__item__state, 1)	succeeded (with hint) in 317 milliseconds with fuel 0 and ifuel 1
(.\Epochs.fst(221,12-221,30))
Query (Epochs.get_ctr, 2)	succeeded (with hint) in 255 milliseconds with fuel 0 and ifuel 1
(.\Connection.fst(54,0-54,51))
Query (Connection.c_resume, 1)	succeeded (with hint) in 283 milliseconds with fuel 0 and ifuel 1
(.\Epochs.fst(221,12-221,30))
Query (Epochs.get_ctr, 3)	succeeded (with hint) in 254 milliseconds with fuel 0 and ifuel 1
(.\Connection.fst(74,0-74,28))
Query (Connection.epochs, 1)	succeeded (with hint) in 281 milliseconds with fuel 0 and ifuel 0
(.\Epochs.fst(222,12-222,37))
Query (Epochs.get_ctr, 4)	succeeded (with hint) in 251 milliseconds with fuel 0 and ifuel 1
(.\Epochs.fst(228,0-228,72))
Query (Epochs.epochsT, 1)	succeeded (with hint) in 252 milliseconds with fuel 0 and ifuel 1
(.\Connection.fst(79,13-79,65))
Query (Connection.frame_epochs, 1)	succeeded (with hint) in 283 milliseconds with fuel 0 and ifuel 0
(.\Epochs.fst(228,44-228,72))
Query (Epochs.epochsT, 2)	succeeded (with hint) in 257 milliseconds with fuel 0 and ifuel 1
(C:\Build\Agent\_work\36\s\src\tls\FFI.fst) digest is valid; using hints db.
(C:\Build\Agent\_work\36\s\src\tls\ConnInvariant.fst) digest is valid; using hints db.
(.\Connection.fst(80,25-80,58))
Query (Connection.frame_epochs, 2)	succeeded (with hint) in 284 milliseconds with fuel 0 and ifuel 0
Verified module: FFI (186 milliseconds)
All verification conditions discharged successfully
(.\Epochs.fst(230,0-241,22))
Query (Epochs.get_current_epoch, 1)	succeeded (with hint) in 271 milliseconds with fuel 0 and ifuel 1
(.\ConnInvariant.fst(22,0-27,51))
Query (ConnInvariant.epoch_regions_exist, 1)	succeeded (with hint) in 287 milliseconds with fuel 0 and ifuel 1
(.\Connection.fst(82,0-82,29))
Query (Connection.frame_epochs, 3)	succeeded (with hint) in 393 milliseconds with fuel 0 and ifuel 0
(.\ConnInvariant.fst(24,2-24,44))
Query (ConnInvariant.epoch_regions_exist, 2)	succeeded (with hint) in 284 milliseconds with fuel 0 and ifuel 1
(.\Epochs.fst(232,32-232,50))
Query (Epochs.get_current_epoch, 2)	succeeded (with hint) in 328 milliseconds with fuel 0 and ifuel 1
(.\Connection.fst(112,81-112,89))
Query (Connection.equal_on_disjoint, 1)	succeeded (with hint) in 280 milliseconds with fuel 0 and ifuel 0
(.\Epochs.fst(232,32-232,50))
Query (Epochs.get_current_epoch, 3)	succeeded (with hint) in 249 milliseconds with fuel 0 and ifuel 1
(.\ConnInvariant.fst(27,6-27,50))
Query (ConnInvariant.epoch_regions_exist, 3)	succeeded (with hint) in 373 milliseconds with fuel 0 and ifuel 1
(.\Connection.fst(112,142-112,159))
Query (Connection.equal_on_disjoint, 2)	succeeded (with hint) in 283 milliseconds with fuel 0 and ifuel 0
(.\Epochs.fst(234,13-234,32))
Query (Epochs.get_current_epoch, 4)	succeeded (with hint) in 256 milliseconds with fuel 0 and ifuel 1
(.\ConnInvariant.fst(27,34-27,50))
Query (ConnInvariant.epoch_regions_exist, 4)	succeeded (with hint) in 300 milliseconds with fuel 0 and ifuel 1
(.\Epochs.fst(234,13-234,32))
Query (Epochs.get_current_epoch, 5)	succeeded (with hint) in 252 milliseconds with fuel 0 and ifuel 1
(.\Connection.fst(112,0-112,233))
Query (Connection.equal_on_disjoint, 3)	succeeded (with hint) in 365 milliseconds with fuel 0 and ifuel 0
(.\Epochs.fst(235,18-235,34))
Query (Epochs.get_current_epoch, 6)	succeeded (with hint) in 254 milliseconds with fuel 0 and ifuel 1
(.\ConnInvariant.fst(41,6-43,83))
Query (ConnInvariant.frame_epoch_writer, 1)	succeeded (with hint) in 288 milliseconds with fuel 0 and ifuel 0
(.\Connection.fst(113,0-113,40))
Query (Connection.equal_on_disjoint, 4)	succeeded (with hint) in 310 milliseconds with fuel 0 and ifuel 0
(.\Epochs.fst(232,32-232,50))
Query (Epochs.get_current_epoch, 7)	succeeded (with hint) in 256 milliseconds with fuel 0 and ifuel 1
Hint-info (.\Connection.fst(29,0-37,9)): Replay succeeded in 341 milliseconds
Hint-info (.\Connection.fst(48,24-48,41)): Replay succeeded in 350 milliseconds
Hint-info (.\Connection.fst(48,2-48,7)): Replay succeeded in 317 milliseconds
Hint-info (.\Connection.fst(54,0-54,51)): Replay succeeded in 283 milliseconds
Hint-info (.\Connection.fst(74,0-74,28)): Replay succeeded in 281 milliseconds
Hint-info (.\Connection.fst(79,13-79,65)): Replay succeeded in 283 milliseconds
Hint-info (.\Connection.fst(80,25-80,58)): Replay succeeded in 284 milliseconds
Hint-info (.\Connection.fst(82,0-82,29)): Replay succeeded in 393 milliseconds
Hint-info (.\Connection.fst(112,81-112,89)): Replay succeeded in 280 milliseconds
Hint-info (.\Connection.fst(112,142-112,159)): Replay succeeded in 283 milliseconds
Hint-info (.\Connection.fst(112,0-112,233)): Replay succeeded in 365 milliseconds
Hint-info (.\Connection.fst(113,0-113,40)): Replay succeeded in 310 milliseconds
Verified module: Connection (6051 milliseconds)
All verification conditions discharged successfully
(.\ConnInvariant.fst(41,47-41,51))
Query (ConnInvariant.frame_epoch_writer, 2)	succeeded (with hint) in 376 milliseconds with fuel 0 and ifuel 0
(.\Epochs.fst(232,32-232,50))
Query (Epochs.get_current_epoch, 8)	succeeded (with hint) in 284 milliseconds with fuel 0 and ifuel 1
(.\ConnInvariant.fst(43,20-43,52))
Query (ConnInvariant.frame_epoch_writer, 3)	succeeded (with hint) in 288 milliseconds with fuel 0 and ifuel 0
(.\Epochs.fst(234,13-234,32))
Query (Epochs.get_current_epoch, 9)	succeeded (with hint) in 262 milliseconds with fuel 0 and ifuel 1
(.\Epochs.fst(234,13-234,32))
Query (Epochs.get_current_epoch, 10)	succeeded (with hint) in 249 milliseconds with fuel 0 and ifuel 1
(.\ConnInvariant.fst(43,35-43,51))
Query (ConnInvariant.frame_epoch_writer, 4)	succeeded (with hint) in 279 milliseconds with fuel 0 and ifuel 0
(.\Epochs.fst(235,18-235,34))
Query (Epochs.get_current_epoch, 11)	succeeded (with hint) in 300 milliseconds with fuel 0 and ifuel 1
(.\ConnInvariant.fst(30,0-43,85))
Query (ConnInvariant.frame_epoch_writer, 5)	succeeded (with hint) in 286 milliseconds with fuel 0 and ifuel 0
(.\Epochs.fst(240,17-240,31))
Query (Epochs.get_current_epoch, 12)	succeeded (with hint) in 299 milliseconds with fuel 0 and ifuel 1
(.\TLS.fst(79,0-83,21))
Query (TLS.create, 9)	succeeded in 5993 milliseconds with fuel 0 and ifuel 0
(.\ConnInvariant.fst(45,0-57,34))
Query (ConnInvariant.frame_epoch_writer, 6)	failed (with hint) in 300 milliseconds with fuel 0 and ifuel 0
Hint-info (.\Epochs.fst(29,2-38,18)): Replay succeeded in 287 milliseconds
Hint-info (.\Epochs.fst(30,2-30,30)): Replay succeeded in 266 milliseconds
Hint-info (.\Epochs.fst(31,2-31,30)): Replay succeeded in 251 milliseconds
Hint-info (.\Epochs.fst(32,2-32,44)): Replay succeeded in 250 milliseconds
Hint-info (.\Epochs.fst(46,17-46,34)): Replay succeeded in 253 milliseconds
Hint-info (.\Epochs.fst(46,12-46,13)): Replay succeeded in 257 milliseconds
Hint-info (.\Epochs.fst(46,12-46,13)): Replay succeeded in 257 milliseconds
Hint-info (.\Epochs.fst(47,11-47,12)): Replay succeeded in 250 milliseconds
Hint-info (.\Epochs.fst(48,11-48,12)): Replay succeeded in 262 milliseconds
Hint-info (.\Epochs.fst(49,11-49,12)): Replay succeeded in 250 milliseconds
Hint-info (.\Epochs.fst(49,11-49,12)): Replay succeeded in 253 milliseconds
Hint-info (.\Epochs.fst(55,0-55,60)): Replay succeeded in 274 milliseconds
Hint-info (.\Epochs.fst(57,0-62,6)): Replay succeeded in 310 milliseconds
Hint-info (.\Epochs.fst(64,0-68,6)): Replay succeeded in 291 milliseconds
Hint-info (.\Epochs.fst(70,0-72,14)): Replay succeeded in 282 milliseconds
Hint-info (.\Epochs.fst(74,0-76,14)): Replay succeeded in 281 milliseconds
Hint-info (.\Epochs.fst(79,0-87,40)): Replay succeeded in 286 milliseconds
Hint-info (.\Epochs.fst(81,4-87,40)): Replay succeeded in 337 milliseconds
Hint-info (.\Epochs.fst(81,34-81,40)): Replay succeeded in 346 milliseconds
Hint-info (.\Epochs.fst(85,4-85,47)): Replay succeeded in 355 milliseconds
Hint-info (.\Epochs.fst(92,0-97,6)): Replay succeeded in 341 milliseconds
Hint-info (.\Epochs.fst(107,5-111,15)): Replay succeeded in 339 milliseconds
Hint-info (.\Epochs.fst(108,14-108,16)): Replay succeeded in 271 milliseconds
Hint-info (.\Epochs.fst(108,14-108,16)): Replay succeeded in 266 milliseconds
Hint-info (.\Epochs.fst(109,9-109,13)): Replay succeeded in 317 milliseconds
Hint-info (.\Epochs.fst(109,9-109,13)): Replay succeeded in 264 milliseconds
Hint-info (.\Epochs.fst(110,5-110,10)): Replay succeeded in 320 milliseconds
Hint-info (.\Epochs.fst(110,5-110,10)): Replay succeeded in 250 milliseconds
Hint-info (.\Epochs.fst(114,4-114,37)): Replay succeeded in 315 milliseconds
Hint-info (.\Epochs.fst(125,3-125,19)): Replay succeeded in 345 milliseconds
Hint-info (.\Epochs.fst(126,6-126,22)): Replay succeeded in 364 milliseconds
Hint-info (.\Epochs.fst(126,6-126,22)): Replay succeeded in 354 milliseconds
Hint-info (.\Epochs.fst(127,6-127,22)): Replay succeeded in 328 milliseconds
Hint-info (.\Epochs.fst(127,6-127,22)): Replay succeeded in 362 milliseconds
Hint-info (.\Epochs.fst(128,6-128,36)): Replay succeeded in 356 milliseconds
Hint-info (.\Epochs.fst(128,6-128,17)): Replay succeeded in 309 milliseconds
Hint-info (.\Epochs.fst(116,0-128,39)): Replay succeeded in 362 milliseconds
Hint-info (.\Epochs.fst(129,0-135,18)): Replay succeeded in 420 milliseconds
Hint-info (.\Epochs.fst(132,2-132,34)): Replay succeeded in 275 milliseconds
Hint-info (.\Epochs.fst(132,13-132,34)): Replay succeeded in 325 milliseconds
Hint-info (.\Epochs.fst(133,34-133,48)): Replay succeeded in 322 milliseconds
Hint-info (.\Epochs.fst(134,34-134,48)): Replay succeeded in 322 milliseconds
Hint-info (.\Epochs.fst(135,2-135,18)): Replay succeeded in 326 milliseconds
Hint-info (.\Epochs.fst(135,2-135,18)): Replay succeeded in 319 milliseconds
Hint-info (.\Epochs.fst(135,2-135,18)): Replay succeeded in 328 milliseconds
Hint-info (.\Epochs.fst(140,27-140,38)): Replay succeeded in 314 milliseconds
Hint-info (.\Epochs.fst(140,27-140,38)): Replay succeeded in 308 milliseconds
Hint-info (.\Epochs.fst(140,52-140,64)): Replay succeeded in 271 milliseconds
Hint-info (.\Epochs.fst(142,37-142,52)): Replay succeeded in 319 milliseconds
Hint-info (.\Epochs.fst(142,37-142,52)): Replay succeeded in 310 milliseconds
Hint-info (.\Epochs.fst(144,23-144,45)): Replay succeeded in 305 milliseconds
Hint-info (.\Epochs.fst(144,25-144,44)): Replay succeeded in 296 milliseconds
Hint-info (.\Epochs.fst(145,7-145,38)): Replay succeeded in 310 milliseconds
Hint-info (.\Epochs.fst(145,7-145,19)): Replay succeeded in 318 milliseconds
Hint-info (.\Epochs.fst(145,7-145,19)): Replay succeeded in 329 milliseconds
Hint-info (.\Epochs.fst(145,22-145,34)): Replay succeeded in 311 milliseconds
Hint-info (.\Epochs.fst(145,22-145,34)): Replay succeeded in 269 milliseconds
Hint-info (.\Epochs.fst(137,0-145,40)): Replay succeeded in 323 milliseconds
Hint-info (.\Epochs.fst(146,0-151,23)): Replay succeeded in 351 milliseconds
Hint-info (.\Epochs.fst(147,2-147,14)): Replay succeeded in 310 milliseconds
Hint-info (.\Epochs.fst(147,2-147,14)): Replay succeeded in 318 milliseconds
Hint-info (.\Epochs.fst(148,12-148,22)): Replay succeeded in 327 milliseconds
Hint-info (.\Epochs.fst(148,12-148,22)): Replay succeeded in 284 milliseconds
Hint-info (.\Epochs.fst(149,2-149,39)): Replay succeeded in 330 milliseconds
Hint-info (.\Epochs.fst(150,2-150,39)): Replay succeeded in 337 milliseconds
Hint-info (.\Epochs.fst(150,13-150,39)): Replay succeeded in 307 milliseconds
Hint-info (.\Epochs.fst(151,2-151,23)): Replay succeeded in 344 milliseconds
Hint-info (.\Epochs.fst(151,2-151,23)): Replay succeeded in 280 milliseconds
Hint-info (.\Epochs.fst(156,0-158,22)): Replay succeeded in 333 milliseconds
Hint-info (.\Epochs.fst(160,7-163,50)): Replay succeeded in 333 milliseconds
Hint-info (.\Epochs.fst(162,12-162,23)): Replay succeeded in 329 milliseconds
Hint-info (.\Epochs.fst(162,12-162,23)): Replay succeeded in 274 milliseconds
Hint-info (.\Epochs.fst(163,23-163,50)): Replay succeeded in 379 milliseconds
Hint-info (.\Epochs.fst(165,7-172,20)): Replay succeeded in 334 milliseconds
Hint-info (.\Epochs.fst(167,13-167,25)): Replay succeeded in 286 milliseconds
Hint-info (.\Epochs.fst(167,13-167,25)): Replay succeeded in 256 milliseconds
Hint-info (.\Epochs.fst(168,13-168,25)): Replay succeeded in 259 milliseconds
Hint-info (.\Epochs.fst(168,13-168,25)): Replay succeeded in 255 milliseconds
Hint-info (.\Epochs.fst(169,21-169,36)): Replay succeeded in 261 milliseconds
Hint-info (.\Epochs.fst(169,21-169,36)): Replay succeeded in 262 milliseconds
Hint-info (.\Epochs.fst(171,24-171,62)): Replay succeeded in 270 milliseconds
Hint-info (.\Epochs.fst(171,26-171,61)): Replay succeeded in 260 milliseconds
Hint-info (.\Epochs.fst(171,26-171,61)): Replay succeeded in 320 milliseconds
Hint-info (.\Epochs.fst(171,36-171,61)): Replay succeeded in 319 milliseconds
Hint-info (.\Epochs.fst(172,5-172,20)): Replay succeeded in 321 milliseconds
Hint-info (.\Epochs.fst(178,31-178,43)): Replay succeeded in 257 milliseconds
Hint-info (.\Epochs.fst(181,23-181,37)): Replay succeeded in 255 milliseconds
Hint-info (.\Epochs.fst(184,9-184,20)): Replay succeeded in 260 milliseconds
Hint-info (.\Epochs.fst(184,33-184,46)): Replay succeeded in 258 milliseconds
Hint-info (.\Epochs.fst(185,0-186,26)): Replay succeeded in 264 milliseconds
Hint-info (.\Epochs.fst(186,4-186,26)): Replay succeeded in 260 milliseconds
Hint-info (.\Epochs.fst(188,0-191,40)): Replay succeeded in 272 milliseconds
Hint-info (.\Epochs.fst(193,0-196,41)): Replay succeeded in 331 milliseconds
Hint-info (.\Epochs.fst(200,0-202,21)): Replay succeeded in 253 milliseconds
Hint-info (.\Epochs.fst(204,0-204,110)): Replay succeeded in 333 milliseconds
Hint-info (.\Epochs.fst(205,0-205,57)): Replay succeeded in 317 milliseconds
Hint-info (.\Epochs.fst(205,48-205,57)): Replay succeeded in 320 milliseconds
Hint-info (.\Epochs.fst(205,48-205,57)): Replay succeeded in 253 milliseconds
Hint-info (.\Epochs.fst(207,0-207,110)): Replay succeeded in 318 milliseconds
Hint-info (.\Epochs.fst(208,0-208,57)): Replay succeeded in 282 milliseconds
Hint-info (.\Epochs.fst(208,48-208,57)): Replay succeeded in 275 milliseconds
Hint-info (.\Epochs.fst(208,48-208,57)): Replay succeeded in 308 milliseconds
Hint-info (.\Epochs.fst(213,5-213,29)): Replay succeeded in 304 milliseconds
Hint-info (.\Epochs.fst(213,9-213,29)): Replay succeeded in 261 milliseconds
Hint-info (.\Epochs.fst(213,9-213,29)): Replay succeeded in 260 milliseconds
Hint-info (.\Epochs.fst(215,5-215,31)): Replay succeeded in 288 milliseconds
Hint-info (.\Epochs.fst(217,0-223,5)): Replay succeeded in 265 milliseconds
Hint-info (.\Epochs.fst(221,12-221,30)): Replay succeeded in 255 milliseconds
Hint-info (.\Epochs.fst(221,12-221,30)): Replay succeeded in 254 milliseconds
Hint-info (.\Epochs.fst(222,12-222,37)): Replay succeeded in 251 milliseconds
Hint-info (.\Epochs.fst(228,0-228,72)): Replay succeeded in 252 milliseconds
Hint-info (.\Epochs.fst(228,44-228,72)): Replay succeeded in 257 milliseconds
Hint-info (.\Epochs.fst(230,0-241,22)): Replay succeeded in 271 milliseconds
Hint-info (.\Epochs.fst(232,32-232,50)): Replay succeeded in 328 milliseconds
Hint-info (.\Epochs.fst(232,32-232,50)): Replay succeeded in 249 milliseconds
Hint-info (.\Epochs.fst(234,13-234,32)): Replay succeeded in 256 milliseconds
Hint-info (.\Epochs.fst(234,13-234,32)): Replay succeeded in 252 milliseconds
Hint-info (.\Epochs.fst(235,18-235,34)): Replay succeeded in 254 milliseconds
Hint-info (.\Epochs.fst(232,32-232,50)): Replay succeeded in 256 milliseconds
Hint-info (.\Epochs.fst(232,32-232,50)): Replay succeeded in 284 milliseconds
Hint-info (.\Epochs.fst(234,13-234,32)): Replay succeeded in 262 milliseconds
Hint-info (.\Epochs.fst(234,13-234,32)): Replay succeeded in 249 milliseconds
Hint-info (.\Epochs.fst(235,18-235,34)): Replay succeeded in 300 milliseconds
Hint-info (.\Epochs.fst(240,17-240,31)): Replay succeeded in 299 milliseconds
Verified module: Epochs (55408 milliseconds)
All verification conditions discharged successfully
(.\TLS.fst(155,0-167,7))
Query (TLS.no_seqn_overflow, 1)	succeeded (with hint) in 371 milliseconds with fuel 0 and ifuel 0
(.\TLS.fst(169,0-180,11))
Query (TLS.no_seqn_overflow, 2)	succeeded (with hint) in 297 milliseconds with fuel 0 and ifuel 0
(.\TLS.fst(170,11-170,44))
Query (TLS.no_seqn_overflow, 3)	succeeded (with hint) in 285 milliseconds with fuel 0 and ifuel 0
(.\TLS.fst(193,0-202,62))
Query (TLS.ioresult_w, 1)	succeeded (with hint) in 279 milliseconds with fuel 0 and ifuel 0
(.\TLS.fst(195,6-195,13))
Query (TLS.uu___is_Written, 1)	succeeded (with hint) in 280 milliseconds with fuel 0 and ifuel 0
(.\TLS.fst(196,6-196,16))
Query (TLS.uu___is_WriteClose, 1)	succeeded (with hint) in 315 milliseconds with fuel 0 and ifuel 0
(.\TLS.fst(197,6-197,16))
Query (TLS.uu___is_WriteError, 1)	succeeded (with hint) in 316 milliseconds with fuel 0 and ifuel 0
(.\TLS.fst(197,18-197,19))
Query (TLS.__proj__WriteError__item__o, 1)	succeeded (with hint) in 315 milliseconds with fuel 0 and ifuel 0
(.\TLS.fst(197,47-197,50))
Query (TLS.__proj__WriteError__item__txt, 1)	succeeded (with hint) in 374 milliseconds with fuel 0 and ifuel 0
(.\TLS.fst(202,6-202,15))
Query (TLS.uu___is_WrittenHS, 1)	succeeded (with hint) in 321 milliseconds with fuel 0 and ifuel 0
(.\TLS.fst(202,17-202,26))
Query (TLS.__proj__WrittenHS__item__newWriter, 1)	succeeded (with hint) in 323 milliseconds with fuel 0 and ifuel 0
(.\TLS.fst(202,35-202,43))
Query (TLS.__proj__WrittenHS__item__complete, 1)	succeeded (with hint) in 324 milliseconds with fuel 0 and ifuel 0
(.\TLS.fst(221,51-221,80))
Query (TLS.disconnect, 1)	succeeded (with hint) in 318 milliseconds with fuel 0 and ifuel 0
(.\TLS.fst(223,0-225,20))
Query (TLS.disconnect, 2)	failed (with hint) in 390 milliseconds with fuel 0 and ifuel 0
(.\TLS.fst(223,0-225,20))
Query (TLS.disconnect, 2)	succeeded in 6970 milliseconds with fuel 0 and ifuel 0
(.\ConnInvariant.fst(45,0-57,34))
Query (ConnInvariant.frame_epoch_writer, 6)	succeeded in 13576 milliseconds with fuel 0 and ifuel 0
(.\TLS.fst(231,19-231,48))
Query (TLS.unrecoverable, 1)	succeeded (with hint) in 285 milliseconds with fuel 0 and ifuel 0
(.\ConnInvariant.fst(56,24-56,40))
Query (ConnInvariant.frame_epoch_writer, 7)	succeeded (with hint) in 285 milliseconds with fuel 0 and ifuel 0
(.\TLS.fst(232,3-232,24))
Query (TLS.unrecoverable, 2)	succeeded (with hint) in 288 milliseconds with fuel 0 and ifuel 0
(.\ConnInvariant.fst(51,44-51,48))
Query (ConnInvariant.frame_epoch_writer, 8)	succeeded (with hint) in 338 milliseconds with fuel 0 and ifuel 0
(.\TLS.fst(233,0-235,26))
Query (TLS.unrecoverable, 3)	succeeded (with hint) in 298 milliseconds with fuel 0 and ifuel 0
(.\ConnInvariant.fst(53,17-53,49))
Query (ConnInvariant.frame_epoch_writer, 9)	succeeded (with hint) in 289 milliseconds with fuel 0 and ifuel 0
(.\TLS.fst(237,0-241,13))
Query (TLS.currentId_T, 1)	succeeded (with hint) in 344 milliseconds with fuel 0 and ifuel 0
(.\ConnInvariant.fst(53,32-53,48))
Query (ConnInvariant.frame_epoch_writer, 10)	succeeded (with hint) in 283 milliseconds with fuel 0 and ifuel 0
(.\TLS.fst(243,0-250,12))
Query (TLS.currentId, 1)	succeeded (with hint) in 346 milliseconds with fuel 0 and ifuel 0
(.\ConnInvariant.fst(57,2-57,34))
Query (ConnInvariant.frame_epoch_writer, 11)	succeeded (with hint) in 296 milliseconds with fuel 0 and ifuel 0
(.\TLS.fst(246,41-246,62))
Query (TLS.currentId, 2)	succeeded (with hint) in 346 milliseconds with fuel 0 and ifuel 0
(.\ConnInvariant.fst(57,2-57,34))
Query (ConnInvariant.frame_epoch_writer, 12)	succeeded (with hint) in 289 milliseconds with fuel 0 and ifuel 0
(.\TLS.fst(246,41-246,62))
Query (TLS.currentId, 3)	succeeded (with hint) in 358 milliseconds with fuel 0 and ifuel 0
(.\ConnInvariant.fst(67,42-67,60))
Query (ConnInvariant.r_conn, 1)	succeeded (with hint) in 339 milliseconds with fuel 0 and ifuel 1
(.\TLS.fst(252,42-252,48))
Query (TLS.maybe_indexable, 1)	succeeded (with hint) in 293 milliseconds with fuel 0 and ifuel 0
(.\ConnInvariant.fst(81,0-86,45))
Query (ConnInvariant.pairwise_disjoint, 1)	succeeded (with hint) in 281 milliseconds with fuel 0 and ifuel 1
(.\TLS.fst(263,0-265,44))
Query (TLS.appfragment, 1)	succeeded (with hint) in 344 milliseconds with fuel 0 and ifuel 0
(.\ConnInvariant.fst(84,1-84,7))
Query (ConnInvariant.pairwise_disjoint, 2)	succeeded (with hint) in 297 milliseconds with fuel 0 and ifuel 1
(.\TLS.fst(267,0-270,40))
Query (TLS.datafragment, 1)	succeeded (with hint) in 293 milliseconds with fuel 0 and ifuel 0
(.\ConnInvariant.fst(88,0-88,72))
Query (ConnInvariant.conn_tab_t, 1)	succeeded (with hint) in 281 milliseconds with fuel 0 and ifuel 1
(.\TLS.fst(296,0-302,22))
Query (TLS.current_writer_pre, 1)	succeeded (with hint) in 358 milliseconds with fuel 0 and ifuel 0
(.\ConnInvariant.fst(90,0-91,64))
Query (ConnInvariant.conn_tab, 1)	succeeded (with hint) in 312 milliseconds with fuel 0 and ifuel 1
.\ConnInvariant.fst(90,0-91,64): (Warning) Top-level let-bindings must be total; this term may have effects
(.\TLS.fst(302,2-302,22))
Query (TLS.current_writer_pre, 2)	succeeded (with hint) in 283 milliseconds with fuel 0 and ifuel 0
(.\ConnInvariant.fst(113,0-117,48))
Query (ConnInvariant.registered, 1)	succeeded (with hint) in 297 milliseconds with fuel 0 and ifuel 1
(.\TLS.fst(304,0-311,13))
Query (TLS.current_writer_T, 1)	succeeded (with hint) in 331 milliseconds with fuel 0 and ifuel 0
(.\ConnInvariant.fst(116,8-116,12))
Query (ConnInvariant.registered, 2)	succeeded (with hint) in 322 milliseconds with fuel 0 and ifuel 1
(.\TLS.fst(313,0-319,43))
Query (TLS.current_writer, 1)	succeeded (with hint) in 285 milliseconds with fuel 0 and ifuel 0
(.\ConnInvariant.fst(117,5-117,48))
Query (ConnInvariant.registered, 3)	succeeded (with hint) in 348 milliseconds with fuel 0 and ifuel 1
(.\TLS.fst(320,0-327,24))
Query (TLS.current_writer, 2)	failed (with hint) in 305 milliseconds with fuel 0 and ifuel 0
(.\ConnInvariant.fst(120,0-136,58))
Query (ConnInvariant.ms_conn_inv, 1)	succeeded (with hint) in 300 milliseconds with fuel 0 and ifuel 1
(.\ConnInvariant.fst(128,27-128,78))
Query (ConnInvariant.ms_conn_inv, 2)	succeeded (with hint) in 328 milliseconds with fuel 0 and ifuel 1
(.\ConnInvariant.fst(128,39-128,78))
Query (ConnInvariant.ms_conn_inv, 3)	succeeded (with hint) in 327 milliseconds with fuel 0 and ifuel 1
(.\ConnInvariant.fst(130,1-130,54))
Query (ConnInvariant.ms_conn_inv, 4)	succeeded (with hint) in 348 milliseconds with fuel 0 and ifuel 1
(.\ConnInvariant.fst(134,2-134,52))
Query (ConnInvariant.ms_conn_inv, 5)	succeeded (with hint) in 312 milliseconds with fuel 0 and ifuel 1
(.\ConnInvariant.fst(134,13-134,52))
Query (ConnInvariant.ms_conn_inv, 6)	succeeded (with hint) in 284 milliseconds with fuel 0 and ifuel 1
(.\ConnInvariant.fst(146,0-151,42))
Query (ConnInvariant.handshake_regions_exists, 1)	succeeded (with hint) in 284 milliseconds with fuel 0 and ifuel 1
(.\ConnInvariant.fst(150,6-150,27))
Query (ConnInvariant.handshake_regions_exists, 2)	succeeded (with hint) in 278 milliseconds with fuel 0 and ifuel 1
(.\ConnInvariant.fst(155,28-155,48))
Query (ConnInvariant.mc_inv, 1)	succeeded (with hint) in 284 milliseconds with fuel 0 and ifuel 1
(.\ConnInvariant.fst(156,26-156,47))
Query (ConnInvariant.mc_inv, 2)	succeeded (with hint) in 287 milliseconds with fuel 0 and ifuel 1
(.\ConnInvariant.fst(160,32-160,53))
Query (ConnInvariant.mc_inv, 3)	succeeded (with hint) in 337 milliseconds with fuel 0 and ifuel 1
(.\ConnInvariant.fst(161,25-161,47))
Query (ConnInvariant.mc_inv, 4)	succeeded (with hint) in 360 milliseconds with fuel 0 and ifuel 1
(.\ConnInvariant.fst(161,48-161,69))
Query (ConnInvariant.mc_inv, 5)	succeeded (with hint) in 339 milliseconds with fuel 0 and ifuel 1
(.\TLS.fst(320,0-327,24))
Query (TLS.current_writer, 2)	succeeded in 10284 milliseconds with fuel 0 and ifuel 0
(.\TLS.fst(324,20-324,53))
Query (TLS.current_writer, 3)	succeeded (with hint) in 287 milliseconds with fuel 0 and ifuel 0
(.\TLS.fst(329,0-344,40))
Query (TLS.recall_current_writer, 1)	succeeded (with hint) in 399 milliseconds with fuel 0 and ifuel 0
(.\TLS.fst(336,20-336,64))
Query (TLS.recall_current_writer, 2)	succeeded (with hint) in 284 milliseconds with fuel 0 and ifuel 0
(.\TLS.fst(337,13-337,61))
Query (TLS.recall_current_writer, 3)	succeeded (with hint) in 309 milliseconds with fuel 0 and ifuel 0
(.\TLS.fst(336,20-336,64))
Query (TLS.recall_current_writer, 4)	succeeded (with hint) in 288 milliseconds with fuel 0 and ifuel 0
(.\TLS.fst(337,13-337,61))
Query (TLS.recall_current_writer, 5)	succeeded (with hint) in 288 milliseconds with fuel 0 and ifuel 0
(.\TLS.fst(347,8-355,23))
Query (TLS.check_incrementable, 1)	succeeded (with hint) in 342 milliseconds with fuel 0 and ifuel 0
(.\ConnInvariant.fst(179,21-179,41))
Query (ConnInvariant.ms_derive_is_ok, 1)	succeeded (with hint) in 282 milliseconds with fuel 0 and ifuel 1
(.\TLS.fst(360,0-363,45))
Query (TLS.opt_writer_regions, 1)	succeeded (with hint) in 365 milliseconds with fuel 0 and ifuel 0
(.\ConnInvariant.fst(180,23-180,44))
Query (ConnInvariant.ms_derive_is_ok, 2)	succeeded (with hint) in 300 milliseconds with fuel 0 and ifuel 1
(.\TLS.fst(362,12-362,21))
Query (TLS.opt_writer_regions, 2)	succeeded (with hint) in 326 milliseconds with fuel 0 and ifuel 0
(.\ConnInvariant.fst(181,16-181,37))
Query (ConnInvariant.ms_derive_is_ok, 3)	succeeded (with hint) in 325 milliseconds with fuel 0 and ifuel 1
(.\TLS.fst(363,15-363,45))
Query (TLS.opt_writer_regions, 3)	succeeded (with hint) in 359 milliseconds with fuel 0 and ifuel 0
(.\ConnInvariant.fst(182,25-182,46))
Query (ConnInvariant.ms_derive_is_ok, 4)	succeeded (with hint) in 284 milliseconds with fuel 0 and ifuel 1
(.\TLS.fst(365,0-370,60))
Query (TLS.sendFragment_inv, 1)	succeeded (with hint) in 316 milliseconds with fuel 0 and ifuel 0
(.\ConnInvariant.fst(184,3-184,57))
Query (ConnInvariant.ms_derive_is_ok, 5)	succeeded (with hint) in 303 milliseconds with fuel 0 and ifuel 0
(.\TLS.fst(369,19-369,62))
Query (TLS.sendFragment_inv, 2)	succeeded (with hint) in 296 milliseconds with fuel 0 and ifuel 0
(.\TLS.fst(370,12-370,59))
Query (TLS.sendFragment_inv, 3)	succeeded (with hint) in 282 milliseconds with fuel 0 and ifuel 0
(.\ConnInvariant.fst(187,15-187,48))
Query (ConnInvariant.ms_derive_is_ok, 6)	succeeded (with hint) in 353 milliseconds with fuel 0 and ifuel 1
(.\ConnInvariant.fst(191,17-191,34))
Query (ConnInvariant.ms_derive_is_ok, 7)	succeeded (with hint) in 282 milliseconds with fuel 0 and ifuel 1
(.\TLS.fst(378,0-389,77))
Query (TLS.sendFragment_success, 1)	succeeded (with hint) in 317 milliseconds with fuel 0 and ifuel 1
(.\ConnInvariant.fst(193,31-193,82))
Query (ConnInvariant.ms_derive_is_ok, 8)	succeeded (with hint) in 289 milliseconds with fuel 0 and ifuel 1
(.\TLS.fst(381,21-381,70))
Query (TLS.sendFragment_success, 2)	succeeded (with hint) in 343 milliseconds with fuel 0 and ifuel 1
(.\ConnInvariant.fst(193,43-193,82))
Query (ConnInvariant.ms_derive_is_ok, 9)	succeeded (with hint) in 303 milliseconds with fuel 0 and ifuel 1
(.\TLS.fst(381,37-381,69))
Query (TLS.sendFragment_success, 3)	succeeded (with hint) in 315 milliseconds with fuel 0 and ifuel 1
(.\ConnInvariant.fst(195,5-195,50))
Query (ConnInvariant.ms_derive_is_ok, 10)	succeeded (with hint) in 369 milliseconds with fuel 0 and ifuel 1
(.\TLS.fst(382,8-382,47))
Query (TLS.sendFragment_success, 4)	succeeded (with hint) in 288 milliseconds with fuel 0 and ifuel 1
(.\ConnInvariant.fst(195,17-195,50))
Query (ConnInvariant.ms_derive_is_ok, 11)	succeeded (with hint) in 288 milliseconds with fuel 0 and ifuel 1
(.\TLS.fst(385,6-385,59))
Query (TLS.sendFragment_success, 5)	succeeded (with hint) in 319 milliseconds with fuel 0 and ifuel 1
(.\ConnInvariant.fst(177,0-196,23))
Query (ConnInvariant.ms_derive_is_ok, 12)	succeeded (with hint) in 356 milliseconds with fuel 0 and ifuel 1
(.\TLS.fst(387,9-387,31))
Query (TLS.sendFragment_success, 6)	succeeded (with hint) in 287 milliseconds with fuel 0 and ifuel 1
(.\ConnInvariant.fst(201,0-201,23))
Query (ConnInvariant.invertOption, 1)	succeeded (with hint) in 288 milliseconds with fuel 0 and ifuel 1
(.\TLS.fst(387,46-387,70))
Query (TLS.sendFragment_success, 7)	succeeded (with hint) in 300 milliseconds with fuel 0 and ifuel 1
(.\TLS.fst(387,71-387,94))
Query (TLS.sendFragment_success, 8)	succeeded (with hint) in 306 milliseconds with fuel 0 and ifuel 1
(.\TLS.fst(389,29-389,75))
Query (TLS.sendFragment_success, 9)	succeeded (with hint) in 303 milliseconds with fuel 0 and ifuel 1
(.\TLS.fst(389,50-389,74))
Query (TLS.sendFragment_success, 10)	succeeded (with hint) in 311 milliseconds with fuel 0 and ifuel 1
(.\TLS.fst(399,7-399,58))
Query (TLS.sendFragment, 1)	succeeded (with hint) in 360 milliseconds with fuel 0 and ifuel 1
(.\AEAD_GCM.fst(182,0-210,57))
Query (AEAD_GCM.concrete_encrypt, 1)	succeeded in 89620 milliseconds with fuel 0 and ifuel 1
(.\TLS.fst(401,20-401,33))
Query (TLS.sendFragment, 2)	succeeded (with hint) in 348 milliseconds with fuel 0 and ifuel 1
(.\AEAD_GCM.fst(184,12-184,27))
Query (AEAD_GCM.concrete_encrypt, 2)	succeeded (with hint) in 218 milliseconds with fuel 0 and ifuel 1
(.\AEAD_GCM.fst(188,4-188,25))
Query (AEAD_GCM.concrete_encrypt, 3)	succeeded (with hint) in 217 milliseconds with fuel 0 and ifuel 1
(.\TLS.fst(401,47-401,56))
Query (TLS.sendFragment, 3)	succeeded (with hint) in 280 milliseconds with fuel 0 and ifuel 1
(.\AEAD_GCM.fst(190,4-190,38))
Query (AEAD_GCM.concrete_encrypt, 4)	succeeded (with hint) in 261 milliseconds with fuel 0 and ifuel 1
(.\TLS.fst(402,8-402,21))
Query (TLS.sendFragment, 4)	succeeded (with hint) in 285 milliseconds with fuel 0 and ifuel 1
(.\ConnInvariant.fst(204,0-219,34))
Query (ConnInvariant.ms_derive_is_ok, 13)	failed (with hint) in 400 milliseconds with fuel 0 and ifuel 0
(.\AEAD_GCM.fst(191,17-191,41))
Query (AEAD_GCM.concrete_encrypt, 5)	succeeded (with hint) in 216 milliseconds with fuel 0 and ifuel 1
(.\TLS.fst(404,8-404,22))
Query (TLS.sendFragment, 5)	succeeded (with hint) in 359 milliseconds with fuel 0 and ifuel 1
(.\AEAD_GCM.fst(188,4-188,25))
Query (AEAD_GCM.concrete_encrypt, 6)	succeeded (with hint) in 278 milliseconds with fuel 0 and ifuel 1
(.\TLS.fst(404,48-404,57))
Query (TLS.sendFragment, 6)	succeeded (with hint) in 284 milliseconds with fuel 0 and ifuel 1
(.\AEAD_GCM.fst(190,4-190,38))
Query (AEAD_GCM.concrete_encrypt, 7)	succeeded (with hint) in 260 milliseconds with fuel 0 and ifuel 1
(.\AEAD_GCM.fst(191,17-191,41))
Query (AEAD_GCM.concrete_encrypt, 8)	succeeded (with hint) in 215 milliseconds with fuel 0 and ifuel 1
(.\TLS.fst(391,0-404,75))
Query (TLS.sendFragment, 7)	succeeded (with hint) in 294 milliseconds with fuel 0 and ifuel 1
(.\AEAD_GCM.fst(199,11-199,38))
Query (AEAD_GCM.concrete_encrypt, 9)	succeeded (with hint) in 217 milliseconds with fuel 0 and ifuel 1
(.\AEAD_GCM.fst(203,13-203,29))
Query (AEAD_GCM.concrete_encrypt, 10)	succeeded (with hint) in 227 milliseconds with fuel 0 and ifuel 1
(.\TLS.fst(407,0-436,5))
Query (TLS.sendFragment, 8)	failed (with hint) in 413 milliseconds with fuel 0 and ifuel 1
(.\AEAD_GCM.fst(205,8-205,25))
Query (AEAD_GCM.concrete_encrypt, 11)	succeeded (with hint) in 273 milliseconds with fuel 0 and ifuel 1
(.\AEAD_GCM.fst(220,13-220,26))
Query (AEAD_GCM.encrypt, 1)	succeeded (with hint) in 217 milliseconds with fuel 0 and ifuel 1
(.\AEAD_GCM.fst(224,37-224,61))
Query (AEAD_GCM.encrypt, 2)	succeeded (with hint) in 227 milliseconds with fuel 0 and ifuel 1
(.\AEAD_GCM.fst(225,9-225,33))
Query (AEAD_GCM.encrypt, 3)	succeeded (with hint) in 270 milliseconds with fuel 0 and ifuel 1
(.\AEAD_GCM.fst(225,9-225,33))
Query (AEAD_GCM.encrypt, 4)	succeeded (with hint) in 242 milliseconds with fuel 0 and ifuel 1
(.\AEAD_GCM.fst(225,9-225,33))
Query (AEAD_GCM.encrypt, 5)	succeeded (with hint) in 258 milliseconds with fuel 0 and ifuel 1
(.\AEAD_GCM.fst(227,17-227,68))
Query (AEAD_GCM.encrypt, 6)	succeeded (with hint) in 272 milliseconds with fuel 0 and ifuel 1
(.\AEAD_GCM.fst(227,44-227,66))
Query (AEAD_GCM.encrypt, 7)	succeeded (with hint) in 215 milliseconds with fuel 0 and ifuel 1
(.\Range.fst(286,0-293,86))
Query (Range.targetLength_converges, 3)	succeeded (with hint) in 123979 milliseconds with fuel 1 and ifuel 1
(.\AEAD_GCM.fst(228,7-228,36))
Query (AEAD_GCM.encrypt, 8)	succeeded (with hint) in 223 milliseconds with fuel 0 and ifuel 1
(.\AEAD_GCM.fst(228,7-228,36))
Query (AEAD_GCM.encrypt, 9)	succeeded (with hint) in 225 milliseconds with fuel 0 and ifuel 1
(.\AEAD_GCM.fst(228,7-228,36))
Query (AEAD_GCM.encrypt, 10)	succeeded (with hint) in 228 milliseconds with fuel 0 and ifuel 1
(.\AEAD_GCM.fst(229,7-229,64))
Query (AEAD_GCM.encrypt, 11)	succeeded (with hint) in 240 milliseconds with fuel 0 and ifuel 1
(.\AEAD_GCM.fst(229,7-229,31))
Query (AEAD_GCM.encrypt, 12)	succeeded (with hint) in 227 milliseconds with fuel 0 and ifuel 1
(.\AEAD_GCM.fst(229,7-229,31))
Query (AEAD_GCM.encrypt, 13)	succeeded (with hint) in 283 milliseconds with fuel 0 and ifuel 1
(.\AEAD_GCM.fst(229,7-229,31))
Query (AEAD_GCM.encrypt, 14)	succeeded (with hint) in 219 milliseconds with fuel 0 and ifuel 1
(.\AEAD_GCM.fst(229,36-229,60))
Query (AEAD_GCM.encrypt, 15)	succeeded (with hint) in 224 milliseconds with fuel 0 and ifuel 1
(.\AEAD_GCM.fst(229,36-229,60))
Query (AEAD_GCM.encrypt, 16)	succeeded (with hint) in 227 milliseconds with fuel 0 and ifuel 1
(.\AEAD_GCM.fst(229,36-229,60))
Query (AEAD_GCM.encrypt, 17)	succeeded (with hint) in 219 milliseconds with fuel 0 and ifuel 1
(.\AEAD_GCM.fst(230,7-230,40))
Query (AEAD_GCM.encrypt, 18)	succeeded (with hint) in 218 milliseconds with fuel 0 and ifuel 1
(.\AEAD_GCM.fst(234,30-234,44))
Query (AEAD_GCM.encrypt, 19)	succeeded (with hint) in 223 milliseconds with fuel 0 and ifuel 1
(.\AEAD_GCM.fst(235,9-235,26))
Query (AEAD_GCM.encrypt, 20)	succeeded (with hint) in 225 milliseconds with fuel 0 and ifuel 1
(.\AEAD_GCM.fst(236,20-236,40))
Query (AEAD_GCM.encrypt, 21)	succeeded (with hint) in 220 milliseconds with fuel 0 and ifuel 1
(.\AEAD_GCM.fst(237,9-237,21))
Query (AEAD_GCM.encrypt, 22)	succeeded (with hint) in 220 milliseconds with fuel 0 and ifuel 1
(.\AEAD_GCM.fst(237,30-237,44))
Query (AEAD_GCM.encrypt, 23)	succeeded (with hint) in 219 milliseconds with fuel 0 and ifuel 1
(.\AEAD_GCM.fst(219,0-239,4))
Query (AEAD_GCM.encrypt, 24)	succeeded (with hint) in 245 milliseconds with fuel 0 and ifuel 1
(.\AEAD_GCM.fst(242,0-265,3))
Query (AEAD_GCM.encrypt, 25)	succeeded (with hint) in 977 milliseconds with fuel 3 and ifuel 3
(.\AEAD_GCM.fst(245,2-245,14))
Query (AEAD_GCM.encrypt, 26)	succeeded (with hint) in 223 milliseconds with fuel 3 and ifuel 3
(.\AEAD_GCM.fst(245,2-245,14))
Query (AEAD_GCM.encrypt, 27)	succeeded (with hint) in 229 milliseconds with fuel 3 and ifuel 3
(.\AEAD_GCM.fst(245,2-245,14))
Query (AEAD_GCM.encrypt, 28)	succeeded (with hint) in 219 milliseconds with fuel 3 and ifuel 3
(.\AEAD_GCM.fst(246,10-246,20))
Query (AEAD_GCM.encrypt, 29)	succeeded (with hint) in 240 milliseconds with fuel 3 and ifuel 3
(.\Range.fst(295,0-296,27))
Query (Range.targetLength_converges, 4)	succeeded (with hint) in 8446 milliseconds with fuel 1 and ifuel 1
(.\AEAD_GCM.fst(246,10-246,20))
Query (AEAD_GCM.encrypt, 30)	succeeded (with hint) in 285 milliseconds with fuel 3 and ifuel 3
(.\Range.fst(303,33-303,46))
Query (Range.rangeClass, 1)	succeeded (with hint) in 254 milliseconds with fuel 0 and ifuel 1
(.\AEAD_GCM.fst(246,10-246,20))
Query (AEAD_GCM.encrypt, 31)	succeeded (with hint) in 287 milliseconds with fuel 3 and ifuel 3
(.\Range.fst(304,7-304,49))
Query (Range.rangeClass, 2)	succeeded (with hint) in 256 milliseconds with fuel 0 and ifuel 1
(.\AEAD_GCM.fst(247,8-247,31))
Query (AEAD_GCM.encrypt, 32)	succeeded (with hint) in 269 milliseconds with fuel 3 and ifuel 3
(.\Range.fst(299,0-304,52))
Query (Range.rangeClass, 3)	succeeded (with hint) in 280 milliseconds with fuel 0 and ifuel 1
(.\AEAD_GCM.fst(252,4-252,16))
Query (AEAD_GCM.encrypt, 33)	succeeded (with hint) in 264 milliseconds with fuel 3 and ifuel 3
(.\AEAD_GCM.fst(254,4-254,21))
Query (AEAD_GCM.encrypt, 34)	succeeded (with hint) in 271 milliseconds with fuel 3 and ifuel 3
(.\Range.fst(305,0-329,67))
Query (Range.rangeClass, 4)	succeeded (with hint) in 325 milliseconds with fuel 0 and ifuel 1
(.\AEAD_GCM.fst(254,4-254,21))
Query (AEAD_GCM.encrypt, 35)	succeeded (with hint) in 261 milliseconds with fuel 3 and ifuel 3
(.\Range.fst(307,8-307,77))
Query (Range.rangeClass, 5)	succeeded (with hint) in 283 milliseconds with fuel 0 and ifuel 1
(.\AEAD_GCM.fst(255,4-255,35))
Query (AEAD_GCM.encrypt, 36)	succeeded (with hint) in 278 milliseconds with fuel 3 and ifuel 3
(.\Range.fst(311,41-311,54))
Query (Range.rangeClass, 6)	succeeded (with hint) in 247 milliseconds with fuel 0 and ifuel 1
(.\AEAD_GCM.fst(256,4-256,17))
Query (AEAD_GCM.encrypt, 37)	succeeded (with hint) in 268 milliseconds with fuel 3 and ifuel 3
(.\Range.fst(326,20-326,86))
Query (Range.rangeClass, 7)	succeeded (with hint) in 281 milliseconds with fuel 0 and ifuel 1
(.\AEAD_GCM.fst(256,4-256,17))
Query (AEAD_GCM.encrypt, 38)	succeeded (with hint) in 258 milliseconds with fuel 3 and ifuel 3
(.\AEAD_GCM.fst(257,4-257,23))
Query (AEAD_GCM.encrypt, 39)	succeeded (with hint) in 282 milliseconds with fuel 3 and ifuel 3
(.\Range.fst(329,12-329,67))
Query (Range.rangeClass, 8)	succeeded (with hint) in 237 milliseconds with fuel 0 and ifuel 1
(.\Range.fst(333,0-333,64))
Query (Range.fragment_range, 1)	succeeded (with hint) in 240 milliseconds with fuel 0 and ifuel 1
(.\AEAD_GCM.fst(257,4-257,23))
Query (AEAD_GCM.encrypt, 40)	succeeded (with hint) in 222 milliseconds with fuel 3 and ifuel 3
(.\Range.fst(337,21-342,1))
Query (Range.frange, 1)	succeeded (with hint) in 242 milliseconds with fuel 0 and ifuel 1
(.\AEAD_GCM.fst(258,4-258,17))
Query (AEAD_GCM.encrypt, 41)	succeeded (with hint) in 260 milliseconds with fuel 3 and ifuel 3
(.\Range.fst(341,5-341,20))
Query (Range.frange, 2)	succeeded (with hint) in 258 milliseconds with fuel 0 and ifuel 1
(.\AEAD_GCM.fst(258,4-258,17))
Query (AEAD_GCM.encrypt, 42)	succeeded (with hint) in 269 milliseconds with fuel 3 and ifuel 3
(.\Range.fst(345,56-345,71))
Query (Range.frange_any, 1)	succeeded (with hint) in 206 milliseconds with fuel 0 and ifuel 1
Hint-info (.\Range.fst(24,0-24,33)): Replay succeeded in 228 milliseconds
Hint-info (.\Range.fst(25,0-25,18)): Replay succeeded in 226 milliseconds
Hint-info (.\Range.fst(28,0-28,44)): Replay succeeded in 233 milliseconds
Hint-info (.\Range.fst(30,0-31,26)): Replay succeeded in 225 milliseconds
Hint-info (.\Range.fst(34,0-34,74)): Replay succeeded in 227 milliseconds
Hint-info (.\Range.fst(35,0-39,38)): Replay succeeded in 238 milliseconds
Hint-info (.\Range.fst(43,0-49,26)): Replay succeeded in 228 milliseconds
Hint-info (.\Range.fst(55,0-63,40)): Replay succeeded in 247 milliseconds
Hint-info (.\Range.fst(67,0-76,13)): Replay succeeded in 249 milliseconds
Hint-info (.\Range.fst(82,0-82,49)): Replay succeeded in 230 milliseconds
Hint-info (.\Range.fst(86,0-86,48)): Replay succeeded in 258 milliseconds
Hint-info (.\Range.fst(95,1-117,8)): Replay succeeded in 819 milliseconds
Hint-info (.\Range.fst(119,0-121,8)): Replay succeeded in 230 milliseconds
Hint-info (.\Range.fst(123,0-125,8)): Replay succeeded in 230 milliseconds
Hint-info (.\Range.fst(143,73-143,87)): Replay succeeded in 220 milliseconds
Hint-info (.\Range.fst(130,0-143,88)): Replay succeeded in 268 milliseconds
Hint-info (.\Range.fst(145,0-163,18)): Replay succeeded in 308 milliseconds
Hint-info (.\Range.fst(165,0-167,104)): Replay succeeded in 243 milliseconds
Hint-info (.\Range.fst(169,0-169,38)): Replay succeeded in 256 milliseconds
Hint-info (.\Range.fst(180,18-180,31)): Replay succeeded in 232 milliseconds
Hint-info (.\Range.fst(174,0-183,39)): Replay succeeded in 241 milliseconds
Hint-info (.\Range.fst(186,0-226,8)): Replay succeeded in 442 milliseconds
Hint-info (.\Range.fst(220,7-220,15)): Replay succeeded in 225 milliseconds
Hint-info (.\Range.fst(222,7-222,35)): Replay succeeded in 216 milliseconds
Hint-info (.\Range.fst(277,21-277,34)): Replay succeeded in 225 milliseconds
Hint-info (.\Range.fst(271,0-278,67)): Replay succeeded in 255 milliseconds
Hint-info (.\Range.fst(283,0-283,67)): Replay succeeded in 322 milliseconds
Hint-info (.\Range.fst(292,20-292,33)): Replay succeeded in 218 milliseconds
Hint-info (.\Range.fst(293,11-293,86)): Replay succeeded in 219 milliseconds
Hint-info (.\Range.fst(286,0-293,86)): Replay succeeded in 123979 milliseconds
Hint-info (.\Range.fst(295,0-296,27)): Replay succeeded in 8446 milliseconds
Hint-info (.\Range.fst(303,33-303,46)): Replay succeeded in 254 milliseconds
Hint-info (.\Range.fst(304,7-304,49)): Replay succeeded in 256 milliseconds
Hint-info (.\Range.fst(299,0-304,52)): Replay succeeded in 280 milliseconds
Hint-info (.\Range.fst(305,0-329,67)): Replay succeeded in 325 milliseconds
Hint-info (.\Range.fst(307,8-307,77)): Replay succeeded in 283 milliseconds
Hint-info (.\Range.fst(311,41-311,54)): Replay succeeded in 247 milliseconds
Hint-info (.\Range.fst(326,20-326,86)): Replay succeeded in 281 milliseconds
Hint-info (.\Range.fst(329,12-329,67)): Replay succeeded in 237 milliseconds
Hint-info (.\Range.fst(333,0-333,64)): Replay succeeded in 240 milliseconds
Hint-info (.\Range.fst(337,21-342,1)): Replay succeeded in 242 milliseconds
Hint-info (.\Range.fst(341,5-341,20)): Replay succeeded in 258 milliseconds
Hint-info (.\Range.fst(345,56-345,71)): Replay succeeded in 206 milliseconds
Verified module: Range (150593 milliseconds)
All verification conditions discharged successfully
(.\AEAD_GCM.fst(262,4-262,16))
Query (AEAD_GCM.encrypt, 43)	succeeded (with hint) in 284 milliseconds with fuel 3 and ifuel 3
(.\AEAD_GCM.fst(262,4-262,16))
Query (AEAD_GCM.encrypt, 44)	succeeded (with hint) in 288 milliseconds with fuel 3 and ifuel 3
(.\AEAD_GCM.fst(262,4-262,16))
Query (AEAD_GCM.encrypt, 45)	succeeded (with hint) in 276 milliseconds with fuel 3 and ifuel 3
(.\AEAD_GCM.fst(263,4-263,23))
Query (AEAD_GCM.encrypt, 46)	succeeded (with hint) in 275 milliseconds with fuel 3 and ifuel 3
(.\AEAD_GCM.fst(263,4-263,23))
Query (AEAD_GCM.encrypt, 47)	succeeded (with hint) in 264 milliseconds with fuel 3 and ifuel 3
(.\AEAD_GCM.fst(263,4-263,23))
Query (AEAD_GCM.encrypt, 48)	succeeded (with hint) in 278 milliseconds with fuel 3 and ifuel 3
(.\AEAD_GCM.fst(268,0-268,57))
Query (AEAD_GCM.matches, 1)	succeeded (with hint) in 276 milliseconds with fuel 0 and ifuel 0
(.\AEAD_GCM.fst(268,39-268,45))
Query (AEAD_GCM.matches, 2)	succeeded (with hint) in 260 milliseconds with fuel 0 and ifuel 0
(.\AEAD_GCM.fst(268,49-268,57))
Query (AEAD_GCM.matches, 3)	succeeded (with hint) in 211 milliseconds with fuel 3 and ifuel 3
(.\AEAD_GCM.fst(273,23-273,47))
Query (AEAD_GCM.decrypt, 1)	succeeded (with hint) in 280 milliseconds with fuel 0 and ifuel 0
(.\AEAD_GCM.fst(273,23-273,47))
Query (AEAD_GCM.decrypt, 2)	succeeded (with hint) in 286 milliseconds with fuel 3 and ifuel 3
(.\AEAD_GCM.fst(273,23-273,47))
Query (AEAD_GCM.decrypt, 3)	succeeded (with hint) in 284 milliseconds with fuel 3 and ifuel 3
(.\AEAD_GCM.fst(275,32-275,56))
Query (AEAD_GCM.decrypt, 4)	succeeded (with hint) in 251 milliseconds with fuel 3 and ifuel 3
(.\AEAD_GCM.fst(275,32-275,56))
Query (AEAD_GCM.decrypt, 5)	succeeded (with hint) in 261 milliseconds with fuel 3 and ifuel 3
(.\AEAD_GCM.fst(275,32-275,56))
Query (AEAD_GCM.decrypt, 6)	succeeded (with hint) in 277 milliseconds with fuel 3 and ifuel 3
(.\AEAD_GCM.fst(276,13-276,37))
Query (AEAD_GCM.decrypt, 7)	succeeded (with hint) in 353 milliseconds with fuel 3 and ifuel 3
(.\TLS.fst(407,0-436,5))
Query (TLS.sendFragment, 8)	succeeded in 22686 milliseconds with fuel 0 and ifuel 1
(.\AEAD_GCM.fst(276,13-276,37))
Query (AEAD_GCM.decrypt, 8)	succeeded (with hint) in 231 milliseconds with fuel 3 and ifuel 3
(.\AEAD_GCM.fst(276,13-276,37))
Query (AEAD_GCM.decrypt, 9)	succeeded (with hint) in 254 milliseconds with fuel 3 and ifuel 3
(.\TLS.fst(426,6-426,21))
Query (TLS.sendFragment, 9)	succeeded (with hint) in 286 milliseconds with fuel 0 and ifuel 1
(.\AEAD_GCM.fst(278,18-278,39))
Query (AEAD_GCM.decrypt, 10)	succeeded (with hint) in 256 milliseconds with fuel 3 and ifuel 3
(.\AEAD_GCM.fst(280,12-280,51))
Query (AEAD_GCM.decrypt, 11)	succeeded (with hint) in 255 milliseconds with fuel 3 and ifuel 3
(.\TLS.fst(449,8-492,13))
Query (TLS.sendAlert, 1)	failed (with hint) in 461 milliseconds with fuel 0 and ifuel 1
(.\AEAD_GCM.fst(281,12-281,22))
Query (AEAD_GCM.decrypt, 12)	succeeded (with hint) in 252 milliseconds with fuel 3 and ifuel 3
(.\AEAD_GCM.fst(283,26-283,35))
Query (AEAD_GCM.decrypt, 13)	succeeded (with hint) in 304 milliseconds with fuel 3 and ifuel 3
(.\AEAD_GCM.fst(285,42-285,72))
Query (AEAD_GCM.decrypt, 14)	succeeded (with hint) in 229 milliseconds with fuel 3 and ifuel 3
(.\AEAD_GCM.fst(285,44-285,71))
Query (AEAD_GCM.decrypt, 15)	succeeded (with hint) in 234 milliseconds with fuel 3 and ifuel 3
(.\AEAD_GCM.fst(286,12-286,46))
Query (AEAD_GCM.decrypt, 16)	succeeded (with hint) in 226 milliseconds with fuel 3 and ifuel 3
(.\AEAD_GCM.fst(286,12-286,36))
Query (AEAD_GCM.decrypt, 17)	succeeded (with hint) in 223 milliseconds with fuel 3 and ifuel 3
(.\AEAD_GCM.fst(286,12-286,36))
Query (AEAD_GCM.decrypt, 18)	succeeded (with hint) in 265 milliseconds with fuel 3 and ifuel 3
(.\AEAD_GCM.fst(286,12-286,36))
Query (AEAD_GCM.decrypt, 19)	succeeded (with hint) in 219 milliseconds with fuel 3 and ifuel 3
(.\AEAD_GCM.fst(271,0-286,49))
Query (AEAD_GCM.decrypt, 20)	succeeded (with hint) in 305 milliseconds with fuel 3 and ifuel 3
(.\AEAD_GCM.fst(289,0-346,4))
Query (AEAD_GCM.decrypt, 21)	succeeded (with hint) in 1269 milliseconds with fuel 1 and ifuel 0
(.\AEAD_GCM.fst(291,2-291,14))
Query (AEAD_GCM.decrypt, 22)	succeeded (with hint) in 277 milliseconds with fuel 1 and ifuel 0
(.\AEAD_GCM.fst(291,2-291,14))
Query (AEAD_GCM.decrypt, 23)	succeeded (with hint) in 275 milliseconds with fuel 1 and ifuel 0
(.\AEAD_GCM.fst(291,2-291,14))
Query (AEAD_GCM.decrypt, 24)	succeeded (with hint) in 218 milliseconds with fuel 1 and ifuel 0
(.\AEAD_GCM.fst(293,12-293,22))
Query (AEAD_GCM.decrypt, 25)	succeeded (with hint) in 228 milliseconds with fuel 1 and ifuel 0
(.\AEAD_GCM.fst(293,12-293,22))
Query (AEAD_GCM.decrypt, 26)	succeeded (with hint) in 237 milliseconds with fuel 1 and ifuel 0
(.\TLS.fst(449,8-492,13))
Query (TLS.sendAlert, 1)	succeeded in 6697 milliseconds with fuel 0 and ifuel 1
(.\AEAD_GCM.fst(293,12-293,22))
Query (AEAD_GCM.decrypt, 27)	succeeded (with hint) in 254 milliseconds with fuel 1 and ifuel 0
(.\AEAD_GCM.fst(295,14-295,25))
Query (AEAD_GCM.decrypt, 28)	succeeded (with hint) in 297 milliseconds with fuel 1 and ifuel 0
(.\TLS.fst(461,17-461,46))
Query (TLS.sendAlert, 2)	succeeded (with hint) in 304 milliseconds with fuel 0 and ifuel 1
(.\AEAD_GCM.fst(297,12-297,29))
Query (AEAD_GCM.decrypt, 29)	succeeded (with hint) in 238 milliseconds with fuel 1 and ifuel 0
(.\TLS.fst(466,17-466,46))
Query (TLS.sendAlert, 3)	succeeded (with hint) in 283 milliseconds with fuel 0 and ifuel 1
(.\AEAD_GCM.fst(297,12-297,29))
Query (AEAD_GCM.decrypt, 30)	succeeded (with hint) in 224 milliseconds with fuel 1 and ifuel 0
(.\TLS.fst(472,29-472,58))
Query (TLS.sendAlert, 4)	succeeded (with hint) in 286 milliseconds with fuel 0 and ifuel 1
(.\AEAD_GCM.fst(300,6-300,25))
Query (AEAD_GCM.decrypt, 31)	succeeded (with hint) in 223 milliseconds with fuel 1 and ifuel 0
(.\TLS.fst(473,11-473,77))
Query (TLS.sendAlert, 5)	succeeded (with hint) in 281 milliseconds with fuel 0 and ifuel 1
(.\AEAD_GCM.fst(300,6-300,25))
Query (AEAD_GCM.decrypt, 32)	succeeded (with hint) in 276 milliseconds with fuel 1 and ifuel 0
(.\TLS.fst(473,32-473,48))
Query (TLS.sendAlert, 6)	succeeded (with hint) in 290 milliseconds with fuel 0 and ifuel 1
(.\AEAD_GCM.fst(301,6-301,18))
Query (AEAD_GCM.decrypt, 33)	succeeded (with hint) in 277 milliseconds with fuel 0 and ifuel 0
(.\TLS.fst(461,17-461,46))
Query (TLS.sendAlert, 7)	succeeded (with hint) in 278 milliseconds with fuel 0 and ifuel 1
(.\AEAD_GCM.fst(301,6-301,18))
Query (AEAD_GCM.decrypt, 34)	succeeded (with hint) in 288 milliseconds with fuel 1 and ifuel 0
(.\ConnInvariant.fst(204,0-219,34))
Query (ConnInvariant.ms_derive_is_ok, 13)	succeeded in 37301 milliseconds with fuel 0 and ifuel 0
(.\AEAD_GCM.fst(301,6-301,18))
Query (AEAD_GCM.decrypt, 35)	succeeded (with hint) in 227 milliseconds with fuel 1 and ifuel 0
(.\TLS.fst(466,17-466,46))
Query (TLS.sendAlert, 8)	succeeded (with hint) in 278 milliseconds with fuel 0 and ifuel 1
(.\AEAD_GCM.fst(309,7-309,46))
Query (AEAD_GCM.decrypt, 36)	succeeded (with hint) in 240 milliseconds with fuel 1 and ifuel 0
(.\TLS.fst(472,29-472,58))
Query (TLS.sendAlert, 9)	succeeded (with hint) in 287 milliseconds with fuel 0 and ifuel 1
(.\ConnInvariant.fst(209,19-209,40))
Query (ConnInvariant.ms_derive_is_ok, 14)	succeeded (with hint) in 298 milliseconds with fuel 0 and ifuel 0
(.\AEAD_GCM.fst(310,30-310,40))
Query (AEAD_GCM.decrypt, 37)	succeeded (with hint) in 221 milliseconds with fuel 1 and ifuel 0
(.\TLS.fst(473,11-473,77))
Query (TLS.sendAlert, 10)	succeeded (with hint) in 342 milliseconds with fuel 0 and ifuel 1
(.\ConnInvariant.fst(210,19-210,40))
Query (ConnInvariant.ms_derive_is_ok, 15)	succeeded (with hint) in 342 milliseconds with fuel 0 and ifuel 0
(.\AEAD_GCM.fst(310,30-310,40))
Query (AEAD_GCM.decrypt, 38)	succeeded (with hint) in 225 milliseconds with fuel 1 and ifuel 0
(.\TLS.fst(473,32-473,48))
Query (TLS.sendAlert, 11)	succeeded (with hint) in 322 milliseconds with fuel 0 and ifuel 1
(.\AEAD_GCM.fst(310,30-310,40))
Query (AEAD_GCM.decrypt, 39)	succeeded (with hint) in 215 milliseconds with fuel 1 and ifuel 0
(.\ConnInvariant.fst(215,15-215,18))
Query (ConnInvariant.ms_derive_is_ok, 16)	succeeded (with hint) in 281 milliseconds with fuel 0 and ifuel 0
(.\AEAD_GCM.fst(316,8-316,38))
Query (AEAD_GCM.decrypt, 40)	succeeded (with hint) in 271 milliseconds with fuel 1 and ifuel 0
(.\TLS.fst(483,11-483,31))
Query (TLS.sendAlert, 12)	succeeded (with hint) in 361 milliseconds with fuel 0 and ifuel 1
(.\ConnInvariant.fst(205,41-205,62))
Query (ConnInvariant.ms_derive_is_ok, 17)	succeeded (with hint) in 292 milliseconds with fuel 0 and ifuel 0
(.\AEAD_GCM.fst(318,14-318,59))
Query (AEAD_GCM.decrypt, 41)	succeeded (with hint) in 218 milliseconds with fuel 1 and ifuel 0
(.\ConnInvariant.fst(206,22-206,42))
Query (ConnInvariant.ms_derive_is_ok, 18)	succeeded (with hint) in 299 milliseconds with fuel 0 and ifuel 0
(.\TLS.fst(485,27-485,43))
Query (TLS.sendAlert, 13)	succeeded (with hint) in 358 milliseconds with fuel 0 and ifuel 1
(.\AEAD_GCM.fst(319,8-319,35))
Query (AEAD_GCM.decrypt, 42)	succeeded (with hint) in 223 milliseconds with fuel 1 and ifuel 0
(.\AEAD_GCM.fst(323,10-323,27))
Query (AEAD_GCM.decrypt, 43)	succeeded (with hint) in 222 milliseconds with fuel 1 and ifuel 0
(.\TLS.fst(497,0-526,34))
Query (TLS.sendHandshake_post, 1)	succeeded (with hint) in 312 milliseconds with fuel 0 and ifuel 1
(.\AEAD_GCM.fst(336,9-336,84))
Query (AEAD_GCM.decrypt, 44)	succeeded (with hint) in 275 milliseconds with fuel 1 and ifuel 0
(.\ConnInvariant.fst(219,2-219,34))
Query (ConnInvariant.ms_derive_is_ok, 19)	succeeded (with hint) in 348 milliseconds with fuel 0 and ifuel 0
(.\AEAD_GCM.fst(336,88-336,112))
Query (AEAD_GCM.decrypt, 45)	succeeded (with hint) in 216 milliseconds with fuel 1 and ifuel 0
(.\TLS.fst(508,18-508,42))
Query (TLS.sendHandshake_post, 2)	succeeded (with hint) in 303 milliseconds with fuel 0 and ifuel 1
(.\AEAD_GCM.fst(338,14-338,76))
Query (AEAD_GCM.decrypt, 46)	succeeded (with hint) in 282 milliseconds with fuel 1 and ifuel 0
(.\ConnInvariant.fst(223,0-240,5))
Query (ConnInvariant.try_ms_derive, 1)	failed (with hint) in 310 milliseconds with fuel 0 and ifuel 0
(.\TLS.fst(508,43-508,67))
Query (TLS.sendHandshake_post, 3)	succeeded (with hint) in 299 milliseconds with fuel 0 and ifuel 1
(.\AEAD_GCM.fst(338,81-338,97))
Query (AEAD_GCM.decrypt, 47)	succeeded (with hint) in 276 milliseconds with fuel 1 and ifuel 0
(.\TLS.fst(516,6-516,20))
Query (TLS.sendHandshake_post, 4)	succeeded (with hint) in 336 milliseconds with fuel 0 and ifuel 1
(.\AEAD_GCM.fst(342,1-342,20))
Query (AEAD_GCM.decrypt, 48)	succeeded (with hint) in 218 milliseconds with fuel 1 and ifuel 0
(.\TLS.fst(520,14-520,63))
Query (TLS.sendHandshake_post, 5)	succeeded (with hint) in 337 milliseconds with fuel 0 and ifuel 1
(.\AEAD_GCM.fst(342,1-342,20))
Query (AEAD_GCM.decrypt, 49)	succeeded (with hint) in 290 milliseconds with fuel 1 and ifuel 0
(.\AEAD_GCM.fst(342,1-342,20))
Query (AEAD_GCM.decrypt, 50)	succeeded (with hint) in 257 milliseconds with fuel 1 and ifuel 0
(.\TLS.fst(521,14-521,28))
Query (TLS.sendHandshake_post, 6)	succeeded (with hint) in 342 milliseconds with fuel 0 and ifuel 1
Hint-info (.\AEAD_GCM.fst(25,0-25,50)): Replay succeeded in 230 milliseconds
Hint-info (.\AEAD_GCM.fst(26,0-26,52)): Replay succeeded in 229 milliseconds
Hint-info (.\AEAD_GCM.fst(30,18-30,28)): Replay succeeded in 230 milliseconds
Hint-info (.\AEAD_GCM.fst(31,18-31,29)): Replay succeeded in 226 milliseconds
Hint-info (.\AEAD_GCM.fst(33,12-35,13)): Replay succeeded in 233 milliseconds
Hint-info (.\AEAD_GCM.fst(33,49-33,73)): Replay succeeded in 227 milliseconds
Hint-info (.\AEAD_GCM.fst(33,49-33,73)): Replay succeeded in 225 milliseconds
Hint-info (.\AEAD_GCM.fst(34,14-34,50)): Replay succeeded in 229 milliseconds
Hint-info (.\AEAD_GCM.fst(41,2-41,44)): Replay succeeded in 229 milliseconds
Hint-info (.\AEAD_GCM.fst(43,0-44,65)): Replay succeeded in 236 milliseconds
Hint-info (.\AEAD_GCM.fst(44,11-44,12)): Replay succeeded in 227 milliseconds
Hint-info (.\AEAD_GCM.fst(44,25-44,27)): Replay succeeded in 227 milliseconds
Hint-info (.\AEAD_GCM.fst(44,39-44,40)): Replay succeeded in 230 milliseconds
Hint-info (.\AEAD_GCM.fst(46,0-46,48)): Replay succeeded in 228 milliseconds
Hint-info (.\AEAD_GCM.fst(48,0-49,42)): Replay succeeded in 226 milliseconds
Hint-info (.\AEAD_GCM.fst(51,0-52,3)): Replay succeeded in 230 milliseconds
Hint-info (.\AEAD_GCM.fst(55,0-56,50)): Replay succeeded in 225 milliseconds
Hint-info (.\AEAD_GCM.fst(56,2-56,50)): Replay succeeded in 237 milliseconds
Hint-info (.\AEAD_GCM.fst(58,0-59,38)): Replay succeeded in 252 milliseconds
Hint-info (.\AEAD_GCM.fst(61,0-64,43)): Replay succeeded in 250 milliseconds
Hint-info (.\AEAD_GCM.fst(67,0-72,3)): Replay succeeded in 268 milliseconds
Hint-info (.\AEAD_GCM.fst(77,32-77,43)): Replay succeeded in 247 milliseconds
Hint-info (.\AEAD_GCM.fst(77,49-77,68)): Replay succeeded in 248 milliseconds
Hint-info (.\AEAD_GCM.fst(75,5-81,22)): Replay succeeded in 253 milliseconds
Hint-info (.\AEAD_GCM.fst(76,12-76,18)): Replay succeeded in 249 milliseconds
Hint-info (.\AEAD_GCM.fst(77,13-77,23)): Replay succeeded in 247 milliseconds
Hint-info (.\AEAD_GCM.fst(77,13-77,23)): Replay succeeded in 251 milliseconds
Hint-info (.\AEAD_GCM.fst(78,12-78,16)): Replay succeeded in 250 milliseconds
Hint-info (.\AEAD_GCM.fst(78,12-78,16)): Replay succeeded in 249 milliseconds
Hint-info (.\AEAD_GCM.fst(79,12-79,15)): Replay succeeded in 249 milliseconds
Hint-info (.\AEAD_GCM.fst(80,12-80,19)): Replay succeeded in 255 milliseconds
Hint-info (.\AEAD_GCM.fst(80,12-80,19)): Replay succeeded in 247 milliseconds
Hint-info (.\AEAD_GCM.fst(98,0-110,32)): Replay succeeded in 246 milliseconds
Hint-info (.\AEAD_GCM.fst(99,11-99,20)): Replay succeeded in 246 milliseconds
Hint-info (.\AEAD_GCM.fst(102,20-102,44)): Replay succeeded in 244 milliseconds
Hint-info (.\AEAD_GCM.fst(103,2-103,31)): Replay succeeded in 247 milliseconds
Hint-info (.\AEAD_GCM.fst(104,10-104,30)): Replay succeeded in 246 milliseconds
Hint-info (.\AEAD_GCM.fst(105,24-105,44)): Replay succeeded in 248 milliseconds
Hint-info (.\AEAD_GCM.fst(106,2-106,43)): Replay succeeded in 228 milliseconds
Hint-info (.\AEAD_GCM.fst(106,8-106,28)): Replay succeeded in 223 milliseconds
Hint-info (.\AEAD_GCM.fst(107,2-107,26)): Replay succeeded in 224 milliseconds
Hint-info (.\AEAD_GCM.fst(108,17-108,43)): Replay succeeded in 224 milliseconds
Hint-info (.\AEAD_GCM.fst(108,47-108,68)): Replay succeeded in 224 milliseconds
Hint-info (.\AEAD_GCM.fst(109,2-109,31)): Replay succeeded in 234 milliseconds
Hint-info (.\AEAD_GCM.fst(109,2-109,31)): Replay succeeded in 288 milliseconds
Hint-info (.\AEAD_GCM.fst(109,2-109,31)): Replay succeeded in 289 milliseconds
Hint-info (.\AEAD_GCM.fst(110,2-110,32)): Replay succeeded in 230 milliseconds
Hint-info (.\AEAD_GCM.fst(110,2-110,26)): Replay succeeded in 269 milliseconds
Hint-info (.\AEAD_GCM.fst(110,2-110,26)): Replay succeeded in 256 milliseconds
Hint-info (.\AEAD_GCM.fst(110,2-110,26)): Replay succeeded in 247 milliseconds
Hint-info (.\AEAD_GCM.fst(122,0-131,53)): Replay succeeded in 955 milliseconds
Hint-info (.\AEAD_GCM.fst(136,30-136,50)): Replay succeeded in 305 milliseconds
Hint-info (.\AEAD_GCM.fst(138,13-138,22)): Replay succeeded in 247 milliseconds
Hint-info (.\AEAD_GCM.fst(139,4-139,27)): Replay succeeded in 244 milliseconds
Hint-info (.\AEAD_GCM.fst(141,4-141,33)): Replay succeeded in 243 milliseconds
Hint-info (.\AEAD_GCM.fst(144,4-144,33)): Replay succeeded in 240 milliseconds
Hint-info (.\AEAD_GCM.fst(144,4-144,33)): Replay succeeded in 231 milliseconds
Hint-info (.\AEAD_GCM.fst(144,4-144,33)): Replay succeeded in 220 milliseconds
Hint-info (.\AEAD_GCM.fst(145,4-145,34)): Replay succeeded in 243 milliseconds
Hint-info (.\AEAD_GCM.fst(145,4-145,28)): Replay succeeded in 273 milliseconds
Hint-info (.\AEAD_GCM.fst(145,4-145,28)): Replay succeeded in 230 milliseconds
Hint-info (.\AEAD_GCM.fst(145,4-145,28)): Replay succeeded in 229 milliseconds
Hint-info (.\AEAD_GCM.fst(133,0-145,36)): Replay succeeded in 246 milliseconds
Hint-info (.\AEAD_GCM.fst(146,0-158,48)): Replay succeeded in 693 milliseconds
Hint-info (.\AEAD_GCM.fst(150,14-150,42)): Replay succeeded in 246 milliseconds
Hint-info (.\AEAD_GCM.fst(153,41-153,64)): Replay succeeded in 249 milliseconds
Hint-info (.\AEAD_GCM.fst(166,0-171,51)): Replay succeeded in 280 milliseconds
Hint-info (.\AEAD_GCM.fst(176,37-176,46)): Replay succeeded in 255 milliseconds
Hint-info (.\AEAD_GCM.fst(177,0-178,27)): Replay succeeded in 251 milliseconds
Hint-info (.\AEAD_GCM.fst(178,2-178,27)): Replay succeeded in 249 milliseconds
Hint-info (.\AEAD_GCM.fst(180,0-180,56)): Replay succeeded in 250 milliseconds
Hint-info (.\AEAD_GCM.fst(180,28-180,51)): Replay succeeded in 247 milliseconds
Hint-info (.\AEAD_GCM.fst(180,28-180,51)): Replay succeeded in 243 milliseconds
Hint-info (.\AEAD_GCM.fst(182,0-210,57)): Replay failed in 591 milliseconds
Hint-info (.\AEAD_GCM.fst(184,12-184,27)): Replay succeeded in 218 milliseconds
Hint-info (.\AEAD_GCM.fst(188,4-188,25)): Replay succeeded in 217 milliseconds
Hint-info (.\AEAD_GCM.fst(190,4-190,38)): Replay succeeded in 261 milliseconds
Hint-info (.\AEAD_GCM.fst(191,17-191,41)): Replay succeeded in 216 milliseconds
Hint-info (.\AEAD_GCM.fst(188,4-188,25)): Replay succeeded in 278 milliseconds
Hint-info (.\AEAD_GCM.fst(190,4-190,38)): Replay succeeded in 260 milliseconds
Hint-info (.\AEAD_GCM.fst(191,17-191,41)): Replay succeeded in 215 milliseconds
Hint-info (.\AEAD_GCM.fst(199,11-199,38)): Replay succeeded in 217 milliseconds
Hint-info (.\AEAD_GCM.fst(203,13-203,29)): Replay succeeded in 227 milliseconds
Hint-info (.\AEAD_GCM.fst(205,8-205,25)): Replay succeeded in 273 milliseconds
Hint-info (.\AEAD_GCM.fst(220,13-220,26)): Replay succeeded in 217 milliseconds
Hint-info (.\AEAD_GCM.fst(224,37-224,61)): Replay succeeded in 227 milliseconds
Hint-info (.\AEAD_GCM.fst(225,9-225,33)): Replay succeeded in 270 milliseconds
Hint-info (.\AEAD_GCM.fst(225,9-225,33)): Replay succeeded in 242 milliseconds
Hint-info (.\AEAD_GCM.fst(225,9-225,33)): Replay succeeded in 258 milliseconds
Hint-info (.\AEAD_GCM.fst(227,17-227,68)): Replay succeeded in 272 milliseconds
Hint-info (.\AEAD_GCM.fst(227,44-227,66)): Replay succeeded in 215 milliseconds
Hint-info (.\AEAD_GCM.fst(228,7-228,36)): Replay succeeded in 223 milliseconds
Hint-info (.\AEAD_GCM.fst(228,7-228,36)): Replay succeeded in 225 milliseconds
Hint-info (.\AEAD_GCM.fst(228,7-228,36)): Replay succeeded in 228 milliseconds
Hint-info (.\AEAD_GCM.fst(229,7-229,64)): Replay succeeded in 240 milliseconds
Hint-info (.\AEAD_GCM.fst(229,7-229,31)): Replay succeeded in 227 milliseconds
Hint-info (.\AEAD_GCM.fst(229,7-229,31)): Replay succeeded in 283 milliseconds
Hint-info (.\AEAD_GCM.fst(229,7-229,31)): Replay succeeded in 219 milliseconds
Hint-info (.\AEAD_GCM.fst(229,36-229,60)): Replay succeeded in 224 milliseconds
Hint-info (.\AEAD_GCM.fst(229,36-229,60)): Replay succeeded in 227 milliseconds
Hint-info (.\AEAD_GCM.fst(229,36-229,60)): Replay succeeded in 219 milliseconds
Hint-info (.\AEAD_GCM.fst(230,7-230,40)): Replay succeeded in 218 milliseconds
Hint-info (.\AEAD_GCM.fst(234,30-234,44)): Replay succeeded in 223 milliseconds
Hint-info (.\AEAD_GCM.fst(235,9-235,26)): Replay succeeded in 225 milliseconds
Hint-info (.\AEAD_GCM.fst(236,20-236,40)): Replay succeeded in 220 milliseconds
Hint-info (.\AEAD_GCM.fst(237,9-237,21)): Replay succeeded in 220 milliseconds
Hint-info (.\AEAD_GCM.fst(237,30-237,44)): Replay succeeded in 219 milliseconds
Hint-info (.\AEAD_GCM.fst(219,0-239,4)): Replay succeeded in 245 milliseconds
Hint-info (.\AEAD_GCM.fst(242,0-265,3)): Replay succeeded in 977 milliseconds
Hint-info (.\AEAD_GCM.fst(245,2-245,14)): Replay succeeded in 223 milliseconds
Hint-info (.\AEAD_GCM.fst(245,2-245,14)): Replay succeeded in 229 milliseconds
Hint-info (.\AEAD_GCM.fst(245,2-245,14)): Replay succeeded in 219 milliseconds
Hint-info (.\AEAD_GCM.fst(246,10-246,20)): Replay succeeded in 240 milliseconds
Hint-info (.\AEAD_GCM.fst(246,10-246,20)): Replay succeeded in 285 milliseconds
Hint-info (.\AEAD_GCM.fst(246,10-246,20)): Replay succeeded in 287 milliseconds
Hint-info (.\AEAD_GCM.fst(247,8-247,31)): Replay succeeded in 269 milliseconds
Hint-info (.\AEAD_GCM.fst(252,4-252,16)): Replay succeeded in 264 milliseconds
Hint-info (.\AEAD_GCM.fst(254,4-254,21)): Replay succeeded in 271 milliseconds
Hint-info (.\AEAD_GCM.fst(254,4-254,21)): Replay succeeded in 261 milliseconds
Hint-info (.\AEAD_GCM.fst(255,4-255,35)): Replay succeeded in 278 milliseconds
Hint-info (.\AEAD_GCM.fst(256,4-256,17)): Replay succeeded in 268 milliseconds
Hint-info (.\AEAD_GCM.fst(256,4-256,17)): Replay succeeded in 258 milliseconds
Hint-info (.\AEAD_GCM.fst(257,4-257,23)): Replay succeeded in 282 milliseconds
Hint-info (.\AEAD_GCM.fst(257,4-257,23)): Replay succeeded in 222 milliseconds
Hint-info (.\AEAD_GCM.fst(258,4-258,17)): Replay succeeded in 260 milliseconds
Hint-info (.\AEAD_GCM.fst(258,4-258,17)): Replay succeeded in 269 milliseconds
Hint-info (.\AEAD_GCM.fst(262,4-262,16)): Replay succeeded in 284 milliseconds
Hint-info (.\AEAD_GCM.fst(262,4-262,16)): Replay succeeded in 288 milliseconds
Hint-info (.\AEAD_GCM.fst(262,4-262,16)): Replay succeeded in 276 milliseconds
Hint-info (.\AEAD_GCM.fst(263,4-263,23)): Replay succeeded in 275 milliseconds
Hint-info (.\AEAD_GCM.fst(263,4-263,23)): Replay succeeded in 264 milliseconds
Hint-info (.\AEAD_GCM.fst(263,4-263,23)): Replay succeeded in 278 milliseconds
Hint-info (.\AEAD_GCM.fst(268,0-268,57)): Replay succeeded in 276 milliseconds
Hint-info (.\AEAD_GCM.fst(268,39-268,45)): Replay succeeded in 260 milliseconds
Hint-info (.\AEAD_GCM.fst(268,49-268,57)): Replay succeeded in 211 milliseconds
Hint-info (.\AEAD_GCM.fst(273,23-273,47)): Replay succeeded in 280 milliseconds
Hint-info (.\AEAD_GCM.fst(273,23-273,47)): Replay succeeded in 286 milliseconds
Hint-info (.\AEAD_GCM.fst(273,23-273,47)): Replay succeeded in 284 milliseconds
Hint-info (.\AEAD_GCM.fst(275,32-275,56)): Replay succeeded in 251 milliseconds
Hint-info (.\AEAD_GCM.fst(275,32-275,56)): Replay succeeded in 261 milliseconds
Hint-info (.\AEAD_GCM.fst(275,32-275,56)): Replay succeeded in 277 milliseconds
Hint-info (.\AEAD_GCM.fst(276,13-276,37)): Replay succeeded in 353 milliseconds
Hint-info (.\AEAD_GCM.fst(276,13-276,37)): Replay succeeded in 231 milliseconds
Hint-info (.\AEAD_GCM.fst(276,13-276,37)): Replay succeeded in 254 milliseconds
Hint-info (.\AEAD_GCM.fst(278,18-278,39)): Replay succeeded in 256 milliseconds
Hint-info (.\AEAD_GCM.fst(280,12-280,51)): Replay succeeded in 255 milliseconds
Hint-info (.\AEAD_GCM.fst(281,12-281,22)): Replay succeeded in 252 milliseconds
Hint-info (.\AEAD_GCM.fst(283,26-283,35)): Replay succeeded in 304 milliseconds
Hint-info (.\AEAD_GCM.fst(285,42-285,72)): Replay succeeded in 229 milliseconds
Hint-info (.\AEAD_GCM.fst(285,44-285,71)): Replay succeeded in 234 milliseconds
Hint-info (.\AEAD_GCM.fst(286,12-286,46)): Replay succeeded in 226 milliseconds
Hint-info (.\AEAD_GCM.fst(286,12-286,36)): Replay succeeded in 223 milliseconds
Hint-info (.\AEAD_GCM.fst(286,12-286,36)): Replay succeeded in 265 milliseconds
Hint-info (.\AEAD_GCM.fst(286,12-286,36)): Replay succeeded in 219 milliseconds
Hint-info (.\AEAD_GCM.fst(271,0-286,49)): Replay succeeded in 305 milliseconds
Hint-info (.\AEAD_GCM.fst(289,0-346,4)): Replay succeeded in 1269 milliseconds
Hint-info (.\AEAD_GCM.fst(291,2-291,14)): Replay succeeded in 277 milliseconds
Hint-info (.\AEAD_GCM.fst(291,2-291,14)): Replay succeeded in 275 milliseconds
Hint-info (.\AEAD_GCM.fst(291,2-291,14)): Replay succeeded in 218 milliseconds
Hint-info (.\AEAD_GCM.fst(293,12-293,22)): Replay succeeded in 228 milliseconds
Hint-info (.\AEAD_GCM.fst(293,12-293,22)): Replay succeeded in 237 milliseconds
Hint-info (.\AEAD_GCM.fst(293,12-293,22)): Replay succeeded in 254 milliseconds
Hint-info (.\AEAD_GCM.fst(295,14-295,25)): Replay succeeded in 297 milliseconds
Hint-info (.\AEAD_GCM.fst(297,12-297,29)): Replay succeeded in 238 milliseconds
Hint-info (.\AEAD_GCM.fst(297,12-297,29)): Replay succeeded in 224 milliseconds
Hint-info (.\AEAD_GCM.fst(300,6-300,25)): Replay succeeded in 223 milliseconds
Hint-info (.\AEAD_GCM.fst(300,6-300,25)): Replay succeeded in 276 milliseconds
Hint-info (.\AEAD_GCM.fst(301,6-301,18)): Replay succeeded in 277 milliseconds
Hint-info (.\AEAD_GCM.fst(301,6-301,18)): Replay succeeded in 288 milliseconds
Hint-info (.\AEAD_GCM.fst(301,6-301,18)): Replay succeeded in 227 milliseconds
Hint-info (.\AEAD_GCM.fst(309,7-309,46)): Replay succeeded in 240 milliseconds
Hint-info (.\AEAD_GCM.fst(310,30-310,40)): Replay succeeded in 221 milliseconds
Hint-info (.\AEAD_GCM.fst(310,30-310,40)): Replay succeeded in 225 milliseconds
Hint-info (.\AEAD_GCM.fst(310,30-310,40)): Replay succeeded in 215 milliseconds
Hint-info (.\AEAD_GCM.fst(316,8-316,38)): Replay succeeded in 271 milliseconds
Hint-info (.\AEAD_GCM.fst(318,14-318,59)): Replay succeeded in 218 milliseconds
Hint-info (.\AEAD_GCM.fst(319,8-319,35)): Replay succeeded in 223 milliseconds
Hint-info (.\AEAD_GCM.fst(323,10-323,27)): Replay succeeded in 222 milliseconds
Hint-info (.\AEAD_GCM.fst(336,9-336,84)): Replay succeeded in 275 milliseconds
Hint-info (.\AEAD_GCM.fst(336,88-336,112)): Replay succeeded in 216 milliseconds
Hint-info (.\AEAD_GCM.fst(338,14-338,76)): Replay succeeded in 282 milliseconds
Hint-info (.\AEAD_GCM.fst(338,81-338,97)): Replay succeeded in 276 milliseconds
Hint-info (.\AEAD_GCM.fst(342,1-342,20)): Replay succeeded in 218 milliseconds
Hint-info (.\AEAD_GCM.fst(342,1-342,20)): Replay succeeded in 290 milliseconds
Hint-info (.\AEAD_GCM.fst(342,1-342,20)): Replay succeeded in 257 milliseconds
Verified module: AEAD_GCM (165012 milliseconds)
All verification conditions discharged successfully
(.\TLS.fst(525,14-525,64))
Query (TLS.sendHandshake_post, 7)	succeeded (with hint) in 397 milliseconds with fuel 0 and ifuel 1
(.\TLS.fst(526,14-526,29))
Query (TLS.sendHandshake_post, 8)	succeeded (with hint) in 508 milliseconds with fuel 0 and ifuel 1
(.\TLS.fst(529,8-572,5))
Query (TLS.sendHandshake, 1)	failed (with hint) in 426 milliseconds with fuel 0 and ifuel 1
(.\ConnInvariant.fst(223,0-240,5))
Query (ConnInvariant.try_ms_derive, 1)	succeeded in 14691 milliseconds with fuel 0 and ifuel 0
(.\ConnInvariant.fst(234,4-234,24))
Query (ConnInvariant.try_ms_derive, 2)	succeeded (with hint) in 355 milliseconds with fuel 0 and ifuel 0
(.\ConnInvariant.fst(235,4-235,25))
Query (ConnInvariant.try_ms_derive, 3)	succeeded (with hint) in 355 milliseconds with fuel 0 and ifuel 0
(.\ConnInvariant.fst(237,4-237,49))
Query (ConnInvariant.try_ms_derive, 4)	succeeded (with hint) in 374 milliseconds with fuel 0 and ifuel 0
(.\ConnInvariant.fst(237,16-237,49))
Query (ConnInvariant.try_ms_derive, 5)	succeeded (with hint) in 297 milliseconds with fuel 0 and ifuel 0
(.\ConnInvariant.fst(243,0-246,8))
Query (ConnInvariant.all_epoch_writers_share_conn_nonce, 1)	succeeded (with hint) in 305 milliseconds with fuel 0 and ifuel 0
(.\ConnInvariant.fst(245,21-245,49))
Query (ConnInvariant.all_epoch_writers_share_conn_nonce, 2)	succeeded (with hint) in 300 milliseconds with fuel 0 and ifuel 0
(.\ConnInvariant.fst(245,21-245,49))
Query (ConnInvariant.all_epoch_writers_share_conn_nonce, 3)	succeeded (with hint) in 296 milliseconds with fuel 0 and ifuel 0
(.\ConnInvariant.fst(248,0-254,8))
Query (ConnInvariant.writer_registered_to_at_most_one_connection, 1)	succeeded (with hint) in 313 milliseconds with fuel 0 and ifuel 0
(.\ConnInvariant.fst(250,30-250,38))
Query (ConnInvariant.writer_registered_to_at_most_one_connection, 2)	succeeded (with hint) in 296 milliseconds with fuel 0 and ifuel 0
(.\ConnInvariant.fst(251,14-251,32))
Query (ConnInvariant.writer_registered_to_at_most_one_connection, 3)	succeeded (with hint) in 352 milliseconds with fuel 0 and ifuel 0
(.\ConnInvariant.fst(256,0-261,36))
Query (ConnInvariant.writer_region_within_connection, 1)	failed (with hint) in 351 milliseconds with fuel 0 and ifuel 0
(.\StreamAE.fst(225,0-251,3))
Query (StreamAE.encrypt, 30)	succeeded in 160834 milliseconds with fuel 0 and ifuel 0
(.\StreamAE.fst(227,12-227,25))
Query (StreamAE.encrypt, 31)	succeeded (with hint) in 285 milliseconds with fuel 0 and ifuel 0
(.\TLS.fst(529,8-572,5))
Query (TLS.sendHandshake, 1)	succeeded in 20090 milliseconds with fuel 0 and ifuel 1
(.\StreamAE.fst(227,12-227,25))
Query (StreamAE.encrypt, 32)	succeeded (with hint) in 277 milliseconds with fuel 0 and ifuel 0
(.\StreamAE.fst(228,2-228,14))
Query (StreamAE.encrypt, 33)	succeeded (with hint) in 250 milliseconds with fuel 0 and ifuel 0
(.\TLS.fst(561,10-561,42))
Query (TLS.sendHandshake, 2)	succeeded (with hint) in 405 milliseconds with fuel 0 and ifuel 1
(.\StreamAE.fst(228,2-228,14))
Query (StreamAE.encrypt, 34)	succeeded (with hint) in 300 milliseconds with fuel 0 and ifuel 0
(.\TLS.fst(562,3-562,35))
Query (TLS.sendHandshake, 3)	succeeded (with hint) in 335 milliseconds with fuel 0 and ifuel 1
(.\StreamAE.fst(228,2-228,14))
Query (StreamAE.encrypt, 35)	succeeded (with hint) in 279 milliseconds with fuel 0 and ifuel 0
(.\TLS.fst(563,29-563,61))
Query (TLS.sendHandshake, 4)	succeeded (with hint) in 267 milliseconds with fuel 0 and ifuel 1
(.\StreamAE.fst(230,10-230,20))
Query (StreamAE.encrypt, 36)	succeeded (with hint) in 281 milliseconds with fuel 0 and ifuel 0
(.\TLS.fst(567,79-567,88))
Query (TLS.sendHandshake, 5)	succeeded (with hint) in 346 milliseconds with fuel 0 and ifuel 1
(.\StreamAE.fst(230,10-230,20))
Query (StreamAE.encrypt, 37)	succeeded (with hint) in 289 milliseconds with fuel 0 and ifuel 0
(.\StreamAE.fst(230,10-230,20))
Query (StreamAE.encrypt, 38)	succeeded (with hint) in 289 milliseconds with fuel 0 and ifuel 0
(.\TLS.fst(567,89-567,98))
Query (TLS.sendHandshake, 6)	succeeded (with hint) in 345 milliseconds with fuel 0 and ifuel 1
(.\StreamAE.fst(233,11-233,38))
Query (StreamAE.encrypt, 39)	succeeded (with hint) in 214 milliseconds with fuel 0 and ifuel 2
(.\TLS.fst(568,27-568,38))
Query (TLS.sendHandshake, 7)	succeeded (with hint) in 348 milliseconds with fuel 0 and ifuel 1
(.\StreamAE.fst(235,8-235,31))
Query (StreamAE.encrypt, 40)	succeeded (with hint) in 216 milliseconds with fuel 0 and ifuel 2
(.\StreamAE.fst(240,15-240,25))
Query (StreamAE.encrypt, 41)	succeeded (with hint) in 280 milliseconds with fuel 0 and ifuel 0
(.\TLS.fst(592,0-600,61))
Query (TLS.next_fragment_pre, 1)	succeeded (with hint) in 361 milliseconds with fuel 0 and ifuel 1
(.\StreamAE.fst(241,4-241,17))
Query (StreamAE.encrypt, 42)	succeeded (with hint) in 282 milliseconds with fuel 0 and ifuel 0
(.\TLS.fst(596,4-596,29))
Query (TLS.next_fragment_pre, 2)	succeeded (with hint) in 367 milliseconds with fuel 0 and ifuel 1
(.\StreamAE.fst(242,14-242,39))
Query (StreamAE.encrypt, 43)	succeeded (with hint) in 288 milliseconds with fuel 0 and ifuel 0
(.\ConnInvariant.fst(256,0-261,36))
Query (ConnInvariant.writer_region_within_connection, 1)	succeeded in 7985 milliseconds with fuel 0 and ifuel 0
(.\TLS.fst(600,8-600,14))
Query (TLS.next_fragment_pre, 3)	succeeded (with hint) in 363 milliseconds with fuel 0 and ifuel 1
(.\StreamAE.fst(243,4-243,21))
Query (StreamAE.encrypt, 44)	succeeded (with hint) in 278 milliseconds with fuel 0 and ifuel 0
(.\ConnInvariant.fst(258,14-258,31))
Query (ConnInvariant.writer_region_within_connection, 2)	succeeded (with hint) in 340 milliseconds with fuel 0 and ifuel 0
(.\StreamAE.fst(243,4-243,21))
Query (StreamAE.encrypt, 45)	succeeded (with hint) in 277 milliseconds with fuel 0 and ifuel 0
(.\TLS.fst(601,0-607,82))
Query (TLS.next_fragment, 1)	succeeded (with hint) in 308 milliseconds with fuel 0 and ifuel 1
(.\StreamAE.fst(244,4-244,35))
Query (StreamAE.encrypt, 46)	succeeded (with hint) in 284 milliseconds with fuel 0 and ifuel 0
(.\StreamAE.fst(245,4-245,17))
Query (StreamAE.encrypt, 47)	succeeded (with hint) in 289 milliseconds with fuel 0 and ifuel 0
(.\TLS.fst(608,0-625,5))
Query (TLS.next_fragment, 2)	succeeded (with hint) in 438 milliseconds with fuel 0 and ifuel 1
(.\ConnInvariant.fst(272,24-272,44))
Query (ConnInvariant.register_writer_in_epoch_ok, 1)	succeeded (with hint) in 368 milliseconds with fuel 0 and ifuel 0
(.\StreamAE.fst(245,4-245,17))
Query (StreamAE.encrypt, 48)	succeeded (with hint) in 291 milliseconds with fuel 0 and ifuel 0
(.\TLS.fst(614,10-614,65))
Query (TLS.next_fragment, 3)	succeeded (with hint) in 368 milliseconds with fuel 0 and ifuel 1
(.\ConnInvariant.fst(273,18-273,39))
Query (ConnInvariant.register_writer_in_epoch_ok, 2)	succeeded (with hint) in 343 milliseconds with fuel 0 and ifuel 0
(.\StreamAE.fst(246,4-246,23))
Query (StreamAE.encrypt, 49)	succeeded (with hint) in 293 milliseconds with fuel 0 and ifuel 0
(.\TLS.fst(614,37-614,55))
Query (TLS.next_fragment, 4)	succeeded (with hint) in 363 milliseconds with fuel 0 and ifuel 1
(.\StreamAE.fst(246,4-246,23))
Query (StreamAE.encrypt, 50)	succeeded (with hint) in 279 milliseconds with fuel 0 and ifuel 0
(.\ConnInvariant.fst(279,6-279,50))
Query (ConnInvariant.register_writer_in_epoch_ok, 3)	succeeded (with hint) in 360 milliseconds with fuel 0 and ifuel 0
(.\TLS.fst(615,28-615,46))
Query (TLS.next_fragment, 5)	succeeded (with hint) in 360 milliseconds with fuel 0 and ifuel 1
(.\StreamAE.fst(247,4-247,17))
Query (StreamAE.encrypt, 51)	succeeded (with hint) in 285 milliseconds with fuel 0 and ifuel 1
(.\ConnInvariant.fst(280,6-280,50))
Query (ConnInvariant.register_writer_in_epoch_ok, 4)	succeeded (with hint) in 377 milliseconds with fuel 0 and ifuel 0
(.\StreamAE.fst(247,4-247,17))
Query (StreamAE.encrypt, 52)	succeeded (with hint) in 280 milliseconds with fuel 0 and ifuel 0
(.\TLS.fst(615,50-615,68))
Query (TLS.next_fragment, 6)	succeeded (with hint) in 367 milliseconds with fuel 0 and ifuel 1
(.\ConnInvariant.fst(281,6-281,27))
Query (ConnInvariant.register_writer_in_epoch_ok, 5)	failed (with hint) in 350 milliseconds with fuel 0 and ifuel 0
(.\StreamAE.fst(250,4-250,23))
Query (StreamAE.encrypt, 53)	succeeded (with hint) in 273 milliseconds with fuel 0 and ifuel 0
(.\TLS.fst(616,10-616,73))
Query (TLS.next_fragment, 7)	succeeded (with hint) in 358 milliseconds with fuel 0 and ifuel 1
(.\StreamAE.fst(250,4-250,23))
Query (StreamAE.encrypt, 54)	succeeded (with hint) in 293 milliseconds with fuel 0 and ifuel 0
(.\TLS.fst(616,26-616,73))
Query (TLS.next_fragment, 8)	succeeded (with hint) in 370 milliseconds with fuel 0 and ifuel 1
(.\StreamAE.fst(250,4-250,23))
Query (StreamAE.encrypt, 55)	succeeded (with hint) in 272 milliseconds with fuel 0 and ifuel 0
(.\StreamAE.fst(254,0-256,18))
Query (StreamAE.matches, 1)	succeeded (with hint) in 280 milliseconds with fuel 0 and ifuel 1
(.\TLS.fst(616,44-616,62))
Query (TLS.next_fragment, 9)	succeeded (with hint) in 511 milliseconds with fuel 0 and ifuel 1
(.\StreamAE.fst(256,2-256,8))
Query (StreamAE.matches, 2)	succeeded (with hint) in 265 milliseconds with fuel 0 and ifuel 1
(.\TLS.fst(624,19-624,66))
Query (TLS.next_fragment, 10)	succeeded (with hint) in 344 milliseconds with fuel 0 and ifuel 1
(.\StreamAE.fst(256,12-256,18))
Query (StreamAE.matches, 3)	succeeded (with hint) in 272 milliseconds with fuel 0 and ifuel 1
(.\TLS.fst(624,37-624,55))
Query (TLS.next_fragment, 11)	succeeded (with hint) in 363 milliseconds with fuel 0 and ifuel 1
(.\StreamAE.fst(263,5-263,29))
Query (StreamAE.decrypt, 1)	succeeded (with hint) in 291 milliseconds with fuel 0 and ifuel 1
(.\TLS.fst(629,7-641,20))
Query (TLS.writeHandshake_requires, 1)	succeeded (with hint) in 376 milliseconds with fuel 0 and ifuel 1
(.\StreamAE.fst(263,5-263,29))
Query (StreamAE.decrypt, 2)	succeeded (with hint) in 279 milliseconds with fuel 0 and ifuel 0
(.\StreamAE.fst(263,5-263,29))
Query (StreamAE.decrypt, 3)	succeeded (with hint) in 280 milliseconds with fuel 0 and ifuel 0
(.\TLS.fst(644,7-664,35))
Query (TLS.writeHandshake_ensures, 1)	succeeded (with hint) in 413 milliseconds with fuel 0 and ifuel 1
(.\StreamAE.fst(263,14-263,29))
Query (StreamAE.decrypt, 4)	succeeded (with hint) in 279 milliseconds with fuel 0 and ifuel 0
(.\StreamAE.fst(263,14-263,29))
Query (StreamAE.decrypt, 5)	succeeded (with hint) in 273 milliseconds with fuel 0 and ifuel 0
(.\TLS.fst(663,4-663,16))
Query (TLS.writeHandshake_ensures, 2)	succeeded (with hint) in 494 milliseconds with fuel 0 and ifuel 1
(.\StreamAE.fst(265,14-265,38))
Query (StreamAE.decrypt, 6)	succeeded (with hint) in 283 milliseconds with fuel 0 and ifuel 1
(.\StreamAE.fst(265,14-265,38))
Query (StreamAE.decrypt, 7)	succeeded (with hint) in 290 milliseconds with fuel 0 and ifuel 0
(.\TLS.fst(674,0-714,40))
Query (TLS.writeHandshake, 1)	failed (with hint) in 464 milliseconds with fuel 0 and ifuel 1
(.\StreamAE.fst(265,14-265,38))
Query (StreamAE.decrypt, 8)	succeeded (with hint) in 273 milliseconds with fuel 0 and ifuel 0
(.\StreamAE.fst(265,23-265,38))
Query (StreamAE.decrypt, 9)	succeeded (with hint) in 263 milliseconds with fuel 0 and ifuel 0
(.\StreamAE.fst(265,23-265,38))
Query (StreamAE.decrypt, 10)	succeeded (with hint) in 272 milliseconds with fuel 0 and ifuel 0
(.\StreamAE.fst(267,16-267,37))
Query (StreamAE.decrypt, 11)	succeeded (with hint) in 271 milliseconds with fuel 0 and ifuel 0
(.\StreamAE.fst(267,25-267,37))
Query (StreamAE.decrypt, 12)	succeeded (with hint) in 229 milliseconds with fuel 0 and ifuel 0
(.\StreamAE.fst(269,11-269,50))
Query (StreamAE.decrypt, 13)	succeeded (with hint) in 250 milliseconds with fuel 0 and ifuel 0
(.\StreamAE.fst(269,17-269,50))
Query (StreamAE.decrypt, 14)	succeeded (with hint) in 270 milliseconds with fuel 0 and ifuel 1
(.\StreamAE.fst(270,11-270,21))
Query (StreamAE.decrypt, 15)	succeeded (with hint) in 276 milliseconds with fuel 0 and ifuel 0
(.\StreamAE.fst(270,17-270,21))
Query (StreamAE.decrypt, 16)	succeeded (with hint) in 279 milliseconds with fuel 0 and ifuel 1
(.\StreamAE.fst(272,31-272,40))
Query (StreamAE.decrypt, 17)	succeeded (with hint) in 233 milliseconds with fuel 0 and ifuel 1
(.\StreamAE.fst(274,43-274,67))
Query (StreamAE.decrypt, 18)	succeeded (with hint) in 305 milliseconds with fuel 0 and ifuel 1
(.\StreamAE.fst(274,43-274,67))
Query (StreamAE.decrypt, 19)	succeeded (with hint) in 277 milliseconds with fuel 0 and ifuel 1
(.\StreamAE.fst(274,43-274,67))
Query (StreamAE.decrypt, 20)	succeeded (with hint) in 268 milliseconds with fuel 0 and ifuel 0
(.\StreamAE.fst(274,52-274,67))
Query (StreamAE.decrypt, 21)	succeeded (with hint) in 280 milliseconds with fuel 0 and ifuel 0
(.\StreamAE.fst(274,52-274,67))
Query (StreamAE.decrypt, 22)	succeeded (with hint) in 232 milliseconds with fuel 0 and ifuel 0
(.\StreamAE.fst(276,39-276,69))
Query (StreamAE.decrypt, 23)	succeeded (with hint) in 283 milliseconds with fuel 0 and ifuel 0
(.\StreamAE.fst(276,41-276,68))
Query (StreamAE.decrypt, 24)	succeeded (with hint) in 278 milliseconds with fuel 0 and ifuel 0
(.\StreamAE.fst(277,18-277,52))
Query (StreamAE.decrypt, 25)	succeeded (with hint) in 290 milliseconds with fuel 0 and ifuel 0
(.\StreamAE.fst(277,18-277,42))
Query (StreamAE.decrypt, 26)	succeeded (with hint) in 236 milliseconds with fuel 0 and ifuel 1
(.\TLS.fst(674,0-714,40))
Query (TLS.writeHandshake, 1)	succeeded in 6663 milliseconds with fuel 0 and ifuel 1
(.\ConnInvariant.fst(281,6-281,27))
Query (ConnInvariant.register_writer_in_epoch_ok, 5)	succeeded in 12502 milliseconds with fuel 0 and ifuel 0
(.\StreamAE.fst(277,18-277,42))
Query (StreamAE.decrypt, 27)	succeeded (with hint) in 285 milliseconds with fuel 0 and ifuel 0
(.\TLS.fst(703,23-703,30))
Query (TLS.writeHandshake, 2)	succeeded (with hint) in 343 milliseconds with fuel 0 and ifuel 1
(.\StreamAE.fst(277,18-277,42))
Query (StreamAE.decrypt, 28)	succeeded (with hint) in 271 milliseconds with fuel 0 and ifuel 0
(.\ConnInvariant.fst(283,29-283,64))
Query (ConnInvariant.register_writer_in_epoch_ok, 6)	succeeded (with hint) in 365 milliseconds with fuel 0 and ifuel 0
(.\StreamAE.fst(277,27-277,42))
Query (StreamAE.decrypt, 29)	succeeded (with hint) in 271 milliseconds with fuel 0 and ifuel 0
(.\TLS.fst(719,0-731,21))
Query (TLS.write, 1)	failed (with hint) in 297 milliseconds with fuel 0 and ifuel 1
(.\StreamAE.fst(277,27-277,42))
Query (StreamAE.decrypt, 30)	succeeded (with hint) in 227 milliseconds with fuel 0 and ifuel 0
(.\ConnInvariant.fst(288,46-288,68))
Query (ConnInvariant.register_writer_in_epoch_ok, 7)	succeeded (with hint) in 361 milliseconds with fuel 0 and ifuel 0
(.\StreamAE.fst(259,0-277,55))
Query (StreamAE.decrypt, 31)	succeeded (with hint) in 299 milliseconds with fuel 0 and ifuel 0
(.\ConnInvariant.fst(269,0-294,22))
Query (ConnInvariant.register_writer_in_epoch_ok, 8)	succeeded (with hint) in 377 milliseconds with fuel 0 and ifuel 0
(.\StreamAE.fst(281,0-311,8))
Query (StreamAE.decrypt, 32)	succeeded (with hint) in 492 milliseconds with fuel 0 and ifuel 1
(.\StreamAE.fst(282,12-282,25))
Query (StreamAE.decrypt, 33)	succeeded (with hint) in 283 milliseconds with fuel 0 and ifuel 1
(.\StreamAE.fst(282,12-282,25))
Query (StreamAE.decrypt, 34)	succeeded (with hint) in 283 milliseconds with fuel 0 and ifuel 1
(.\StreamAE.fst(283,2-283,14))
Query (StreamAE.decrypt, 35)	succeeded (with hint) in 289 milliseconds with fuel 0 and ifuel 1
(.\StreamAE.fst(283,2-283,14))
Query (StreamAE.decrypt, 36)	succeeded (with hint) in 301 milliseconds with fuel 0 and ifuel 1
(.\StreamAE.fst(283,2-283,14))
Query (StreamAE.decrypt, 37)	succeeded (with hint) in 272 milliseconds with fuel 0 and ifuel 1
(.\StreamAE.fst(284,10-284,20))
Query (StreamAE.decrypt, 38)	succeeded (with hint) in 240 milliseconds with fuel 0 and ifuel 1
(.\StreamAE.fst(284,10-284,20))
Query (StreamAE.decrypt, 39)	succeeded (with hint) in 288 milliseconds with fuel 0 and ifuel 1
(.\StreamAE.fst(284,10-284,20))
Query (StreamAE.decrypt, 40)	succeeded (with hint) in 268 milliseconds with fuel 0 and ifuel 1
(.\StreamAE.fst(287,15-287,25))
Query (StreamAE.decrypt, 41)	succeeded (with hint) in 289 milliseconds with fuel 0 and ifuel 1
(.\ConnInvariant.fst(295,0-340,34))
Query (ConnInvariant.register_writer_in_epoch_ok, 9)	failed (with hint) in 429 milliseconds with fuel 0 and ifuel 0
(.\StreamAE.fst(288,15-288,26))
Query (StreamAE.decrypt, 42)	succeeded (with hint) in 279 milliseconds with fuel 0 and ifuel 1
(.\StreamAE.fst(289,14-289,39))
Query (StreamAE.decrypt, 43)	succeeded (with hint) in 271 milliseconds with fuel 0 and ifuel 1
(.\StreamAE.fst(290,12-290,29))
Query (StreamAE.decrypt, 44)	succeeded (with hint) in 237 milliseconds with fuel 0 and ifuel 1
(.\StreamAE.fst(290,12-290,29))
Query (StreamAE.decrypt, 45)	succeeded (with hint) in 263 milliseconds with fuel 0 and ifuel 1
(.\StreamAE.fst(293,6-293,25))
Query (StreamAE.decrypt, 46)	succeeded (with hint) in 237 milliseconds with fuel 0 and ifuel 1
(.\StreamAE.fst(293,6-293,25))
Query (StreamAE.decrypt, 47)	succeeded (with hint) in 283 milliseconds with fuel 0 and ifuel 1
(.\StreamAE.fst(294,6-294,18))
Query (StreamAE.decrypt, 48)	succeeded (with hint) in 232 milliseconds with fuel 0 and ifuel 1
(.\StreamAE.fst(294,6-294,18))
Query (StreamAE.decrypt, 49)	succeeded (with hint) in 295 milliseconds with fuel 0 and ifuel 1
(.\StreamAE.fst(294,6-294,18))
Query (StreamAE.decrypt, 50)	succeeded (with hint) in 288 milliseconds with fuel 0 and ifuel 1
(.\StreamAE.fst(295,6-295,39))
Query (StreamAE.decrypt, 51)	succeeded (with hint) in 281 milliseconds with fuel 0 and ifuel 1
(.\StreamAE.fst(297,9-297,13))
Query (StreamAE.decrypt, 52)	succeeded (with hint) in 289 milliseconds with fuel 0 and ifuel 1
(.\StreamAE.fst(299,29-299,65))
Query (StreamAE.decrypt, 53)	succeeded (with hint) in 278 milliseconds with fuel 0 and ifuel 1
(.\StreamAE.fst(302,12-302,39))
Query (StreamAE.decrypt, 54)	failed (with hint) in 226 milliseconds with fuel 0 and ifuel 1
(.\StreamAE.fst(302,12-302,39))
Query (StreamAE.decrypt, 54)	succeeded in 4759 milliseconds with fuel 0 and ifuel 1
(.\StreamAE.fst(304,13-304,17))
Query (StreamAE.decrypt, 55)	succeeded (with hint) in 288 milliseconds with fuel 0 and ifuel 1
(.\StreamAE.fst(307,14-307,44))
Query (StreamAE.decrypt, 56)	succeeded (with hint) in 266 milliseconds with fuel 0 and ifuel 1
(.\StreamAE.fst(309,20-309,39))
Query (StreamAE.decrypt, 57)	succeeded (with hint) in 281 milliseconds with fuel 0 and ifuel 1
(.\StreamAE.fst(309,20-309,39))
Query (StreamAE.decrypt, 58)	succeeded (with hint) in 286 milliseconds with fuel 0 and ifuel 1
(.\StreamAE.fst(309,20-309,39))
Query (StreamAE.decrypt, 59)	succeeded (with hint) in 284 milliseconds with fuel 0 and ifuel 1
(.\StreamAE.fst(309,41-309,47))
Query (StreamAE.decrypt, 60)	succeeded (with hint) in 276 milliseconds with fuel 0 and ifuel 1
(.\StreamAE.fst(310,19-310,23))
Query (StreamAE.decrypt, 61)	succeeded (with hint) in 288 milliseconds with fuel 0 and ifuel 1
Hint-info (.\StreamAE.fst(34,0-35,37)): Replay succeeded in 235 milliseconds
Hint-info (.\StreamAE.fst(37,0-37,49)): Replay succeeded in 231 milliseconds
Hint-info (.\StreamAE.fst(38,0-38,47)): Replay succeeded in 233 milliseconds
Hint-info (.\StreamAE.fst(42,0-42,74)): Replay succeeded in 236 milliseconds
Hint-info (.\StreamAE.fst(44,0-45,63)): Replay succeeded in 241 milliseconds
Hint-info (.\StreamAE.fst(45,11-45,12)): Replay succeeded in 231 milliseconds
Hint-info (.\StreamAE.fst(45,25-45,26)): Replay succeeded in 237 milliseconds
Hint-info (.\StreamAE.fst(45,41-45,42)): Replay succeeded in 237 milliseconds
Hint-info (.\StreamAE.fst(47,15-47,63)): Replay succeeded in 234 milliseconds
Hint-info (.\StreamAE.fst(48,15-48,63)): Replay succeeded in 231 milliseconds
Hint-info (.\StreamAE.fst(51,18-51,28)): Replay succeeded in 237 milliseconds
Hint-info (.\StreamAE.fst(52,18-52,29)): Replay succeeded in 241 milliseconds
Hint-info (.\StreamAE.fst(56,0-57,42)): Replay succeeded in 236 milliseconds
Hint-info (.\StreamAE.fst(59,0-60,3)): Replay succeeded in 232 milliseconds
Hint-info (.\StreamAE.fst(63,14-63,50)): Replay succeeded in 243 milliseconds
Hint-info (.\StreamAE.fst(62,31-62,55)): Replay succeeded in 238 milliseconds
Hint-info (.\StreamAE.fst(62,12-64,13)): Replay succeeded in 236 milliseconds
Hint-info (.\StreamAE.fst(75,0-78,33)): Replay succeeded in 235 milliseconds
Hint-info (.\StreamAE.fst(80,0-85,3)): Replay succeeded in 248 milliseconds
Hint-info (.\StreamAE.fst(90,32-90,43)): Replay succeeded in 230 milliseconds
Hint-info (.\StreamAE.fst(90,49-90,68)): Replay succeeded in 230 milliseconds
Hint-info (.\StreamAE.fst(93,21-93,41)): Replay succeeded in 237 milliseconds
Hint-info (.\StreamAE.fst(88,5-94,22)): Replay succeeded in 243 milliseconds
Hint-info (.\StreamAE.fst(89,12-89,18)): Replay succeeded in 239 milliseconds
Hint-info (.\StreamAE.fst(90,13-90,23)): Replay succeeded in 233 milliseconds
Hint-info (.\StreamAE.fst(90,13-90,23)): Replay succeeded in 235 milliseconds
Hint-info (.\StreamAE.fst(91,12-91,16)): Replay succeeded in 237 milliseconds
Hint-info (.\StreamAE.fst(91,12-91,16)): Replay succeeded in 244 milliseconds
Hint-info (.\StreamAE.fst(92,12-92,15)): Replay succeeded in 231 milliseconds
Hint-info (.\StreamAE.fst(92,12-92,15)): Replay succeeded in 234 milliseconds
Hint-info (.\StreamAE.fst(93,12-93,19)): Replay succeeded in 251 milliseconds
Hint-info (.\StreamAE.fst(93,12-93,19)): Replay succeeded in 238 milliseconds
Hint-info (.\StreamAE.fst(106,0-118,32)): Replay succeeded in 236 milliseconds
Hint-info (.\StreamAE.fst(107,11-107,20)): Replay succeeded in 516 milliseconds
Hint-info (.\StreamAE.fst(108,2-108,29)): Replay succeeded in 234 milliseconds
Hint-info (.\StreamAE.fst(110,2-110,31)): Replay succeeded in 240 milliseconds
Hint-info (.\StreamAE.fst(111,10-111,30)): Replay succeeded in 240 milliseconds
Hint-info (.\StreamAE.fst(112,24-112,44)): Replay succeeded in 245 milliseconds
Hint-info (.\StreamAE.fst(113,2-113,43)): Replay succeeded in 234 milliseconds
Hint-info (.\StreamAE.fst(113,8-113,28)): Replay succeeded in 248 milliseconds
Hint-info (.\StreamAE.fst(115,7-115,33)): Replay succeeded in 250 milliseconds
Hint-info (.\StreamAE.fst(115,18-115,30)): Replay succeeded in 248 milliseconds
Hint-info (.\StreamAE.fst(116,7-116,28)): Replay succeeded in 233 milliseconds
Hint-info (.\StreamAE.fst(116,16-116,28)): Replay succeeded in 229 milliseconds
Hint-info (.\StreamAE.fst(117,2-117,31)): Replay succeeded in 240 milliseconds
Hint-info (.\StreamAE.fst(117,2-117,31)): Replay succeeded in 238 milliseconds
Hint-info (.\StreamAE.fst(117,2-117,31)): Replay succeeded in 231 milliseconds
Hint-info (.\StreamAE.fst(117,13-117,28)): Replay succeeded in 231 milliseconds
Hint-info (.\StreamAE.fst(117,13-117,28)): Replay succeeded in 237 milliseconds
Hint-info (.\StreamAE.fst(118,2-118,32)): Replay succeeded in 239 milliseconds
Hint-info (.\StreamAE.fst(118,2-118,26)): Replay succeeded in 235 milliseconds
Hint-info (.\StreamAE.fst(118,2-118,26)): Replay succeeded in 239 milliseconds
Hint-info (.\StreamAE.fst(118,2-118,26)): Replay succeeded in 228 milliseconds
Hint-info (.\StreamAE.fst(118,11-118,26)): Replay succeeded in 233 milliseconds
Hint-info (.\StreamAE.fst(118,11-118,26)): Replay succeeded in 233 milliseconds
Hint-info (.\StreamAE.fst(129,0-140,53)): Replay succeeded in 675 milliseconds
Hint-info (.\StreamAE.fst(145,28-145,48)): Replay succeeded in 238 milliseconds
Hint-info (.\StreamAE.fst(147,18-147,27)): Replay succeeded in 253 milliseconds
Hint-info (.\StreamAE.fst(148,9-148,32)): Replay succeeded in 232 milliseconds
Hint-info (.\StreamAE.fst(149,9-149,36)): Replay succeeded in 225 milliseconds
Hint-info (.\StreamAE.fst(150,8-150,37)): Replay succeeded in 230 milliseconds
Hint-info (.\StreamAE.fst(153,8-153,37)): Replay succeeded in 245 milliseconds
Hint-info (.\StreamAE.fst(153,8-153,37)): Replay succeeded in 252 milliseconds
Hint-info (.\StreamAE.fst(153,8-153,37)): Replay succeeded in 244 milliseconds
Hint-info (.\StreamAE.fst(153,19-153,34)): Replay succeeded in 250 milliseconds
Hint-info (.\StreamAE.fst(153,19-153,34)): Replay succeeded in 250 milliseconds
Hint-info (.\StreamAE.fst(154,8-154,38)): Replay succeeded in 261 milliseconds
Hint-info (.\StreamAE.fst(154,8-154,32)): Replay succeeded in 251 milliseconds
Hint-info (.\StreamAE.fst(154,8-154,32)): Replay succeeded in 256 milliseconds
Hint-info (.\StreamAE.fst(154,8-154,32)): Replay succeeded in 256 milliseconds
Hint-info (.\StreamAE.fst(154,17-154,32)): Replay succeeded in 249 milliseconds
Hint-info (.\StreamAE.fst(154,17-154,32)): Replay succeeded in 253 milliseconds
Hint-info (.\StreamAE.fst(143,0-154,40)): Replay succeeded in 261 milliseconds
Hint-info (.\StreamAE.fst(160,0-171,54)): Replay succeeded in 863 milliseconds
Hint-info (.\StreamAE.fst(168,41-168,64)): Replay succeeded in 251 milliseconds
Hint-info (.\StreamAE.fst(168,14-168,38)): Replay succeeded in 247 milliseconds
Hint-info (.\StreamAE.fst(179,0-184,51)): Replay succeeded in 283 milliseconds
Hint-info (.\StreamAE.fst(188,37-188,46)): Replay succeeded in 245 milliseconds
Hint-info (.\StreamAE.fst(190,0-192,36)): Replay succeeded in 246 milliseconds
Hint-info (.\StreamAE.fst(206,6-206,30)): Replay succeeded in 230 milliseconds
Hint-info (.\StreamAE.fst(206,6-206,30)): Replay succeeded in 232 milliseconds
Hint-info (.\StreamAE.fst(206,6-206,30)): Replay succeeded in 224 milliseconds
Hint-info (.\StreamAE.fst(206,15-206,30)): Replay succeeded in 225 milliseconds
Hint-info (.\StreamAE.fst(206,15-206,30)): Replay succeeded in 230 milliseconds
Hint-info (.\StreamAE.fst(209,15-209,69)): Replay succeeded in 256 milliseconds
Hint-info (.\StreamAE.fst(210,6-210,35)): Replay succeeded in 227 milliseconds
Hint-info (.\StreamAE.fst(210,6-210,35)): Replay succeeded in 233 milliseconds
Hint-info (.\StreamAE.fst(210,6-210,35)): Replay succeeded in 226 milliseconds
Hint-info (.\StreamAE.fst(210,17-210,32)): Replay succeeded in 244 milliseconds
Hint-info (.\StreamAE.fst(210,17-210,32)): Replay succeeded in 256 milliseconds
Hint-info (.\StreamAE.fst(211,6-211,63)): Replay succeeded in 255 milliseconds
Hint-info (.\StreamAE.fst(211,6-211,30)): Replay succeeded in 256 milliseconds
Hint-info (.\StreamAE.fst(211,6-211,30)): Replay succeeded in 257 milliseconds
Hint-info (.\StreamAE.fst(211,6-211,30)): Replay succeeded in 246 milliseconds
Hint-info (.\StreamAE.fst(211,15-211,30)): Replay succeeded in 248 milliseconds
Hint-info (.\StreamAE.fst(211,15-211,30)): Replay succeeded in 247 milliseconds
Hint-info (.\StreamAE.fst(211,35-211,59)): Replay succeeded in 310 milliseconds
Hint-info (.\StreamAE.fst(211,35-211,59)): Replay succeeded in 269 milliseconds
Hint-info (.\StreamAE.fst(211,35-211,59)): Replay succeeded in 244 milliseconds
Hint-info (.\StreamAE.fst(211,44-211,59)): Replay succeeded in 246 milliseconds
Hint-info (.\StreamAE.fst(211,44-211,59)): Replay succeeded in 223 milliseconds
Hint-info (.\StreamAE.fst(213,17-213,27)): Replay succeeded in 231 milliseconds
Hint-info (.\StreamAE.fst(215,25-215,39)): Replay succeeded in 242 milliseconds
Hint-info (.\StreamAE.fst(216,6-216,23)): Replay succeeded in 223 milliseconds
Hint-info (.\StreamAE.fst(217,16-217,36)): Replay succeeded in 277 milliseconds
Hint-info (.\StreamAE.fst(218,6-218,18)): Replay succeeded in 224 milliseconds
Hint-info (.\StreamAE.fst(218,27-218,41)): Replay succeeded in 225 milliseconds
Hint-info (.\StreamAE.fst(201,0-218,49)): Replay succeeded in 266 milliseconds
Hint-info (.\StreamAE.fst(225,0-251,3)): Replay failed in 479 milliseconds
Hint-info (.\StreamAE.fst(227,12-227,25)): Replay succeeded in 285 milliseconds
Hint-info (.\StreamAE.fst(227,12-227,25)): Replay succeeded in 277 milliseconds
Hint-info (.\StreamAE.fst(228,2-228,14)): Replay succeeded in 250 milliseconds
Hint-info (.\StreamAE.fst(228,2-228,14)): Replay succeeded in 300 milliseconds
Hint-info (.\StreamAE.fst(228,2-228,14)): Replay succeeded in 279 milliseconds
Hint-info (.\StreamAE.fst(230,10-230,20)): Replay succeeded in 281 milliseconds
Hint-info (.\StreamAE.fst(230,10-230,20)): Replay succeeded in 289 milliseconds
Hint-info (.\StreamAE.fst(230,10-230,20)): Replay succeeded in 289 milliseconds
Hint-info (.\StreamAE.fst(233,11-233,38)): Replay succeeded in 214 milliseconds
Hint-info (.\StreamAE.fst(235,8-235,31)): Replay succeeded in 216 milliseconds
Hint-info (.\StreamAE.fst(240,15-240,25)): Replay succeeded in 280 milliseconds
Hint-info (.\StreamAE.fst(241,4-241,17)): Replay succeeded in 282 milliseconds
Hint-info (.\StreamAE.fst(242,14-242,39)): Replay succeeded in 288 milliseconds
Hint-info (.\StreamAE.fst(243,4-243,21)): Replay succeeded in 278 milliseconds
Hint-info (.\StreamAE.fst(243,4-243,21)): Replay succeeded in 277 milliseconds
Hint-info (.\StreamAE.fst(244,4-244,35)): Replay succeeded in 284 milliseconds
Hint-info (.\StreamAE.fst(245,4-245,17)): Replay succeeded in 289 milliseconds
Hint-info (.\StreamAE.fst(245,4-245,17)): Replay succeeded in 291 milliseconds
Hint-info (.\StreamAE.fst(246,4-246,23)): Replay succeeded in 293 milliseconds
Hint-info (.\StreamAE.fst(246,4-246,23)): Replay succeeded in 279 milliseconds
Hint-info (.\StreamAE.fst(247,4-247,17)): Replay succeeded in 285 milliseconds
Hint-info (.\StreamAE.fst(247,4-247,17)): Replay succeeded in 280 milliseconds
Hint-info (.\StreamAE.fst(250,4-250,23)): Replay succeeded in 273 milliseconds
Hint-info (.\StreamAE.fst(250,4-250,23)): Replay succeeded in 293 milliseconds
Hint-info (.\StreamAE.fst(250,4-250,23)): Replay succeeded in 272 milliseconds
Hint-info (.\StreamAE.fst(254,0-256,18)): Replay succeeded in 280 milliseconds
Hint-info (.\StreamAE.fst(256,2-256,8)): Replay succeeded in 265 milliseconds
Hint-info (.\StreamAE.fst(256,12-256,18)): Replay succeeded in 272 milliseconds
Hint-info (.\StreamAE.fst(263,5-263,29)): Replay succeeded in 291 milliseconds
Hint-info (.\StreamAE.fst(263,5-263,29)): Replay succeeded in 279 milliseconds
Hint-info (.\StreamAE.fst(263,5-263,29)): Replay succeeded in 280 milliseconds
Hint-info (.\StreamAE.fst(263,14-263,29)): Replay succeeded in 279 milliseconds
Hint-info (.\StreamAE.fst(263,14-263,29)): Replay succeeded in 273 milliseconds
Hint-info (.\StreamAE.fst(265,14-265,38)): Replay succeeded in 283 milliseconds
Hint-info (.\StreamAE.fst(265,14-265,38)): Replay succeeded in 290 milliseconds
Hint-info (.\StreamAE.fst(265,14-265,38)): Replay succeeded in 273 milliseconds
Hint-info (.\StreamAE.fst(265,23-265,38)): Replay succeeded in 263 milliseconds
Hint-info (.\StreamAE.fst(265,23-265,38)): Replay succeeded in 272 milliseconds
Hint-info (.\StreamAE.fst(267,16-267,37)): Replay succeeded in 271 milliseconds
Hint-info (.\StreamAE.fst(267,25-267,37)): Replay succeeded in 229 milliseconds
Hint-info (.\StreamAE.fst(269,11-269,50)): Replay succeeded in 250 milliseconds
Hint-info (.\StreamAE.fst(269,17-269,50)): Replay succeeded in 270 milliseconds
Hint-info (.\StreamAE.fst(270,11-270,21)): Replay succeeded in 276 milliseconds
Hint-info (.\StreamAE.fst(270,17-270,21)): Replay succeeded in 279 milliseconds
Hint-info (.\StreamAE.fst(272,31-272,40)): Replay succeeded in 233 milliseconds
Hint-info (.\StreamAE.fst(274,43-274,67)): Replay succeeded in 305 milliseconds
Hint-info (.\StreamAE.fst(274,43-274,67)): Replay succeeded in 277 milliseconds
Hint-info (.\StreamAE.fst(274,43-274,67)): Replay succeeded in 268 milliseconds
Hint-info (.\StreamAE.fst(274,52-274,67)): Replay succeeded in 280 milliseconds
Hint-info (.\StreamAE.fst(274,52-274,67)): Replay succeeded in 232 milliseconds
Hint-info (.\StreamAE.fst(276,39-276,69)): Replay succeeded in 283 milliseconds
Hint-info (.\StreamAE.fst(276,41-276,68)): Replay succeeded in 278 milliseconds
Hint-info (.\StreamAE.fst(277,18-277,52)): Replay succeeded in 290 milliseconds
Hint-info (.\StreamAE.fst(277,18-277,42)): Replay succeeded in 236 milliseconds
Hint-info (.\StreamAE.fst(277,18-277,42)): Replay succeeded in 285 milliseconds
Hint-info (.\StreamAE.fst(277,18-277,42)): Replay succeeded in 271 milliseconds
Hint-info (.\StreamAE.fst(277,27-277,42)): Replay succeeded in 271 milliseconds
Hint-info (.\StreamAE.fst(277,27-277,42)): Replay succeeded in 227 milliseconds
Hint-info (.\StreamAE.fst(259,0-277,55)): Replay succeeded in 299 milliseconds
Hint-info (.\StreamAE.fst(281,0-311,8)): Replay succeeded in 492 milliseconds
Hint-info (.\StreamAE.fst(282,12-282,25)): Replay succeeded in 283 milliseconds
Hint-info (.\StreamAE.fst(282,12-282,25)): Replay succeeded in 283 milliseconds
Hint-info (.\StreamAE.fst(283,2-283,14)): Replay succeeded in 289 milliseconds
Hint-info (.\StreamAE.fst(283,2-283,14)): Replay succeeded in 301 milliseconds
Hint-info (.\StreamAE.fst(283,2-283,14)): Replay succeeded in 272 milliseconds
Hint-info (.\StreamAE.fst(284,10-284,20)): Replay succeeded in 240 milliseconds
Hint-info (.\StreamAE.fst(284,10-284,20)): Replay succeeded in 288 milliseconds
Hint-info (.\StreamAE.fst(284,10-284,20)): Replay succeeded in 268 milliseconds
Hint-info (.\StreamAE.fst(287,15-287,25)): Replay succeeded in 289 milliseconds
Hint-info (.\StreamAE.fst(288,15-288,26)): Replay succeeded in 279 milliseconds
Hint-info (.\StreamAE.fst(289,14-289,39)): Replay succeeded in 271 milliseconds
Hint-info (.\StreamAE.fst(290,12-290,29)): Replay succeeded in 237 milliseconds
Hint-info (.\StreamAE.fst(290,12-290,29)): Replay succeeded in 263 milliseconds
Hint-info (.\StreamAE.fst(293,6-293,25)): Replay succeeded in 237 milliseconds
Hint-info (.\StreamAE.fst(293,6-293,25)): Replay succeeded in 283 milliseconds
Hint-info (.\StreamAE.fst(294,6-294,18)): Replay succeeded in 232 milliseconds
Hint-info (.\StreamAE.fst(294,6-294,18)): Replay succeeded in 295 milliseconds
Hint-info (.\StreamAE.fst(294,6-294,18)): Replay succeeded in 288 milliseconds
Hint-info (.\StreamAE.fst(295,6-295,39)): Replay succeeded in 281 milliseconds
Hint-info (.\StreamAE.fst(297,9-297,13)): Replay succeeded in 289 milliseconds
Hint-info (.\StreamAE.fst(299,29-299,65)): Replay succeeded in 278 milliseconds
Hint-info (.\StreamAE.fst(302,12-302,39)): Replay failed in 226 milliseconds
Hint-info (.\StreamAE.fst(304,13-304,17)): Replay succeeded in 288 milliseconds
Hint-info (.\StreamAE.fst(307,14-307,44)): Replay succeeded in 266 milliseconds
Hint-info (.\StreamAE.fst(309,20-309,39)): Replay succeeded in 281 milliseconds
Hint-info (.\StreamAE.fst(309,20-309,39)): Replay succeeded in 286 milliseconds
Hint-info (.\StreamAE.fst(309,20-309,39)): Replay succeeded in 284 milliseconds
Hint-info (.\StreamAE.fst(309,41-309,47)): Replay succeeded in 276 milliseconds
Hint-info (.\StreamAE.fst(310,19-310,23)): Replay succeeded in 288 milliseconds
Verified module: StreamAE (247639 milliseconds)
All verification conditions discharged successfully
(.\ConnInvariant.fst(295,0-340,34))
Query (ConnInvariant.register_writer_in_epoch_ok, 9)	succeeded in 14304 milliseconds with fuel 0 and ifuel 0
(.\ConnInvariant.fst(304,19-304,40))
Query (ConnInvariant.register_writer_in_epoch_ok, 10)	succeeded (with hint) in 294 milliseconds with fuel 0 and ifuel 0
(.\ConnInvariant.fst(305,19-305,40))
Query (ConnInvariant.register_writer_in_epoch_ok, 11)	succeeded (with hint) in 301 milliseconds with fuel 0 and ifuel 0
(.\ConnInvariant.fst(306,21-306,41))
Query (ConnInvariant.register_writer_in_epoch_ok, 12)	succeeded (with hint) in 367 milliseconds with fuel 0 and ifuel 0
(.\TLS.fst(719,0-731,21))
Query (TLS.write, 1)	succeeded in 21845 milliseconds with fuel 0 and ifuel 1
(.\ConnInvariant.fst(307,21-307,41))
Query (ConnInvariant.register_writer_in_epoch_ok, 13)	succeeded (with hint) in 355 milliseconds with fuel 0 and ifuel 0
(.\ConnInvariant.fst(320,26-320,64))
Query (ConnInvariant.register_writer_in_epoch_ok, 14)	succeeded (with hint) in 367 milliseconds with fuel 0 and ifuel 0
(.\TLS.fst(734,0-747,10))
Query (TLS.write, 2)	failed (with hint) in 357 milliseconds with fuel 1 and ifuel 1
(.\ConnInvariant.fst(321,29-321,48))
Query (ConnInvariant.register_writer_in_epoch_ok, 15)	succeeded (with hint) in 366 milliseconds with fuel 0 and ifuel 0
(.\ConnInvariant.fst(322,19-322,76))
Query (ConnInvariant.register_writer_in_epoch_ok, 16)	succeeded (with hint) in 357 milliseconds with fuel 0 and ifuel 0
(.\ConnInvariant.fst(325,23-325,42))
Query (ConnInvariant.register_writer_in_epoch_ok, 17)	succeeded (with hint) in 322 milliseconds with fuel 0 and ifuel 0
(.\ConnInvariant.fst(326,23-326,42))
Query (ConnInvariant.register_writer_in_epoch_ok, 18)	succeeded (with hint) in 354 milliseconds with fuel 0 and ifuel 0
(.\ConnInvariant.fst(331,15-331,30))
Query (ConnInvariant.register_writer_in_epoch_ok, 19)	succeeded (with hint) in 365 milliseconds with fuel 0 and ifuel 0
(.\ConnInvariant.fst(300,41-300,62))
Query (ConnInvariant.register_writer_in_epoch_ok, 20)	succeeded (with hint) in 377 milliseconds with fuel 0 and ifuel 0
(.\ConnInvariant.fst(301,21-301,41))
Query (ConnInvariant.register_writer_in_epoch_ok, 21)	succeeded (with hint) in 329 milliseconds with fuel 0 and ifuel 0
(.\ConnInvariant.fst(340,2-340,34))
Query (ConnInvariant.register_writer_in_epoch_ok, 22)	succeeded (with hint) in 370 milliseconds with fuel 0 and ifuel 0
(.\ConnInvariant.fst(351,15-351,38))
Query (ConnInvariant.mutate_registered_writer_ok, 1)	succeeded (with hint) in 361 milliseconds with fuel 0 and ifuel 0
(.\ConnInvariant.fst(352,15-352,37))
Query (ConnInvariant.mutate_registered_writer_ok, 2)	succeeded (with hint) in 366 milliseconds with fuel 0 and ifuel 0
(.\ConnInvariant.fst(353,33-353,84))
Query (ConnInvariant.mutate_registered_writer_ok, 3)	succeeded (with hint) in 291 milliseconds with fuel 0 and ifuel 0
(.\ConnInvariant.fst(353,45-353,84))
Query (ConnInvariant.mutate_registered_writer_ok, 4)	succeeded (with hint) in 300 milliseconds with fuel 0 and ifuel 0
(.\ConnInvariant.fst(347,0-355,25))
Query (ConnInvariant.mutate_registered_writer_ok, 5)	succeeded (with hint) in 316 milliseconds with fuel 0 and ifuel 0
(.\TLS.fst(734,0-747,10))
Query (TLS.write, 2)	succeeded in 6668 milliseconds with fuel 1 and ifuel 1
(.\ConnInvariant.fst(357,0-368,36))
Query (ConnInvariant.mutate_registered_writer_ok, 6)	succeeded (with hint) in 307 milliseconds with fuel 0 and ifuel 1
Hint-info (.\TLS.fst(51,0-56,17)): Replay succeeded in 361 milliseconds
Hint-info (.\TLS.fst(65,13-65,22)): Replay succeeded in 341 milliseconds
Hint-info (.\TLS.fst(68,4-68,40)): Replay succeeded in 282 milliseconds
Hint-info (.\TLS.fst(70,4-70,16)): Replay succeeded in 352 milliseconds
Hint-info (.\TLS.fst(72,4-72,23)): Replay succeeded in 288 milliseconds
Hint-info (.\TLS.fst(74,5-74,15)): Replay succeeded in 285 milliseconds
Hint-info (.\TLS.fst(74,20-74,33)): Replay succeeded in 360 milliseconds
Hint-info (.\TLS.fst(75,4-75,34)): Replay succeeded in 340 milliseconds
Hint-info (.\TLS.fst(76,4-76,27)): Replay succeeded in 287 milliseconds
Hint-info (.\TLS.fst(79,0-83,21)): Replay failed in 291 milliseconds
Hint-info (.\TLS.fst(155,0-167,7)): Replay succeeded in 371 milliseconds
Hint-info (.\TLS.fst(169,0-180,11)): Replay succeeded in 297 milliseconds
Hint-info (.\TLS.fst(170,11-170,44)): Replay succeeded in 285 milliseconds
Hint-info (.\TLS.fst(193,0-202,62)): Replay succeeded in 279 milliseconds
Hint-info (.\TLS.fst(195,6-195,13)): Replay succeeded in 280 milliseconds
Hint-info (.\TLS.fst(196,6-196,16)): Replay succeeded in 315 milliseconds
Hint-info (.\TLS.fst(197,6-197,16)): Replay succeeded in 316 milliseconds
Hint-info (.\TLS.fst(197,18-197,19)): Replay succeeded in 315 milliseconds
Hint-info (.\TLS.fst(197,47-197,50)): Replay succeeded in 374 milliseconds
Hint-info (.\TLS.fst(202,6-202,15)): Replay succeeded in 321 milliseconds
Hint-info (.\TLS.fst(202,17-202,26)): Replay succeeded in 323 milliseconds
Hint-info (.\TLS.fst(202,35-202,43)): Replay succeeded in 324 milliseconds
Hint-info (.\TLS.fst(221,51-221,80)): Replay succeeded in 318 milliseconds
Hint-info (.\TLS.fst(223,0-225,20)): Replay failed in 390 milliseconds
Hint-info (.\TLS.fst(231,19-231,48)): Replay succeeded in 285 milliseconds
Hint-info (.\TLS.fst(232,3-232,24)): Replay succeeded in 288 milliseconds
Hint-info (.\TLS.fst(233,0-235,26)): Replay succeeded in 298 milliseconds
Hint-info (.\TLS.fst(237,0-241,13)): Replay succeeded in 344 milliseconds
Hint-info (.\TLS.fst(243,0-250,12)): Replay succeeded in 346 milliseconds
Hint-info (.\TLS.fst(246,41-246,62)): Replay succeeded in 346 milliseconds
Hint-info (.\TLS.fst(246,41-246,62)): Replay succeeded in 358 milliseconds
Hint-info (.\TLS.fst(252,42-252,48)): Replay succeeded in 293 milliseconds
Hint-info (.\TLS.fst(263,0-265,44)): Replay succeeded in 344 milliseconds
Hint-info (.\TLS.fst(267,0-270,40)): Replay succeeded in 293 milliseconds
Hint-info (.\TLS.fst(296,0-302,22)): Replay succeeded in 358 milliseconds
Hint-info (.\TLS.fst(302,2-302,22)): Replay succeeded in 283 milliseconds
Hint-info (.\TLS.fst(304,0-311,13)): Replay succeeded in 331 milliseconds
Hint-info (.\TLS.fst(313,0-319,43)): Replay succeeded in 285 milliseconds
Hint-info (.\TLS.fst(320,0-327,24)): Replay failed in 305 milliseconds
Hint-info (.\TLS.fst(324,20-324,53)): Replay succeeded in 287 milliseconds
Hint-info (.\TLS.fst(329,0-344,40)): Replay succeeded in 399 milliseconds
Hint-info (.\TLS.fst(336,20-336,64)): Replay succeeded in 284 milliseconds
Hint-info (.\TLS.fst(337,13-337,61)): Replay succeeded in 309 milliseconds
Hint-info (.\TLS.fst(336,20-336,64)): Replay succeeded in 288 milliseconds
Hint-info (.\TLS.fst(337,13-337,61)): Replay succeeded in 288 milliseconds
Hint-info (.\TLS.fst(347,8-355,23)): Replay succeeded in 342 milliseconds
Hint-info (.\TLS.fst(360,0-363,45)): Replay succeeded in 365 milliseconds
Hint-info (.\TLS.fst(362,12-362,21)): Replay succeeded in 326 milliseconds
Hint-info (.\TLS.fst(363,15-363,45)): Replay succeeded in 359 milliseconds
Hint-info (.\TLS.fst(365,0-370,60)): Replay succeeded in 316 milliseconds
Hint-info (.\TLS.fst(369,19-369,62)): Replay succeeded in 296 milliseconds
Hint-info (.\TLS.fst(370,12-370,59)): Replay succeeded in 282 milliseconds
Hint-info (.\TLS.fst(378,0-389,77)): Replay succeeded in 317 milliseconds
Hint-info (.\TLS.fst(381,21-381,70)): Replay succeeded in 343 milliseconds
Hint-info (.\TLS.fst(381,37-381,69)): Replay succeeded in 315 milliseconds
Hint-info (.\TLS.fst(382,8-382,47)): Replay succeeded in 288 milliseconds
Hint-info (.\TLS.fst(385,6-385,59)): Replay succeeded in 319 milliseconds
Hint-info (.\TLS.fst(387,9-387,31)): Replay succeeded in 287 milliseconds
Hint-info (.\TLS.fst(387,46-387,70)): Replay succeeded in 300 milliseconds
Hint-info (.\TLS.fst(387,71-387,94)): Replay succeeded in 306 milliseconds
Hint-info (.\TLS.fst(389,29-389,75)): Replay succeeded in 303 milliseconds
Hint-info (.\TLS.fst(389,50-389,74)): Replay succeeded in 311 milliseconds
Hint-info (.\TLS.fst(399,7-399,58)): Replay succeeded in 360 milliseconds
Hint-info (.\TLS.fst(401,20-401,33)): Replay succeeded in 348 milliseconds
Hint-info (.\TLS.fst(401,47-401,56)): Replay succeeded in 280 milliseconds
Hint-info (.\TLS.fst(402,8-402,21)): Replay succeeded in 285 milliseconds
Hint-info (.\TLS.fst(404,8-404,22)): Replay succeeded in 359 milliseconds
Hint-info (.\TLS.fst(404,48-404,57)): Replay succeeded in 284 milliseconds
Hint-info (.\TLS.fst(391,0-404,75)): Replay succeeded in 294 milliseconds
Hint-info (.\TLS.fst(407,0-436,5)): Replay failed in 413 milliseconds
Hint-info (.\TLS.fst(426,6-426,21)): Replay succeeded in 286 milliseconds
Hint-info (.\TLS.fst(449,8-492,13)): Replay failed in 461 milliseconds
Hint-info (.\TLS.fst(461,17-461,46)): Replay succeeded in 304 milliseconds
Hint-info (.\TLS.fst(466,17-466,46)): Replay succeeded in 283 milliseconds
Hint-info (.\TLS.fst(472,29-472,58)): Replay succeeded in 286 milliseconds
Hint-info (.\TLS.fst(473,11-473,77)): Replay succeeded in 281 milliseconds
Hint-info (.\TLS.fst(473,32-473,48)): Replay succeeded in 290 milliseconds
Hint-info (.\TLS.fst(461,17-461,46)): Replay succeeded in 278 milliseconds
Hint-info (.\TLS.fst(466,17-466,46)): Replay succeeded in 278 milliseconds
Hint-info (.\TLS.fst(472,29-472,58)): Replay succeeded in 287 milliseconds
Hint-info (.\TLS.fst(473,11-473,77)): Replay succeeded in 342 milliseconds
Hint-info (.\TLS.fst(473,32-473,48)): Replay succeeded in 322 milliseconds
Hint-info (.\TLS.fst(483,11-483,31)): Replay succeeded in 361 milliseconds
Hint-info (.\TLS.fst(485,27-485,43)): Replay succeeded in 358 milliseconds
Hint-info (.\TLS.fst(497,0-526,34)): Replay succeeded in 312 milliseconds
Hint-info (.\TLS.fst(508,18-508,42)): Replay succeeded in 303 milliseconds
Hint-info (.\TLS.fst(508,43-508,67)): Replay succeeded in 299 milliseconds
Hint-info (.\TLS.fst(516,6-516,20)): Replay succeeded in 336 milliseconds
Hint-info (.\TLS.fst(520,14-520,63)): Replay succeeded in 337 milliseconds
Hint-info (.\TLS.fst(521,14-521,28)): Replay succeeded in 342 milliseconds
Hint-info (.\TLS.fst(525,14-525,64)): Replay succeeded in 397 milliseconds
Hint-info (.\TLS.fst(526,14-526,29)): Replay succeeded in 508 milliseconds
Hint-info (.\TLS.fst(529,8-572,5)): Replay failed in 426 milliseconds
Hint-info (.\TLS.fst(561,10-561,42)): Replay succeeded in 405 milliseconds
Hint-info (.\TLS.fst(562,3-562,35)): Replay succeeded in 335 milliseconds
Hint-info (.\TLS.fst(563,29-563,61)): Replay succeeded in 267 milliseconds
Hint-info (.\TLS.fst(567,79-567,88)): Replay succeeded in 346 milliseconds
Hint-info (.\TLS.fst(567,89-567,98)): Replay succeeded in 345 milliseconds
Hint-info (.\TLS.fst(568,27-568,38)): Replay succeeded in 348 milliseconds
Hint-info (.\TLS.fst(592,0-600,61)): Replay succeeded in 361 milliseconds
Hint-info (.\TLS.fst(596,4-596,29)): Replay succeeded in 367 milliseconds
Hint-info (.\TLS.fst(600,8-600,14)): Replay succeeded in 363 milliseconds
Hint-info (.\TLS.fst(601,0-607,82)): Replay succeeded in 308 milliseconds
Hint-info (.\TLS.fst(608,0-625,5)): Replay succeeded in 438 milliseconds
Hint-info (.\TLS.fst(614,10-614,65)): Replay succeeded in 368 milliseconds
Hint-info (.\TLS.fst(614,37-614,55)): Replay succeeded in 363 milliseconds
Hint-info (.\TLS.fst(615,28-615,46)): Replay succeeded in 360 milliseconds
Hint-info (.\TLS.fst(615,50-615,68)): Replay succeeded in 367 milliseconds
Hint-info (.\TLS.fst(616,10-616,73)): Replay succeeded in 358 milliseconds
Hint-info (.\TLS.fst(616,26-616,73)): Replay succeeded in 370 milliseconds
Hint-info (.\TLS.fst(616,44-616,62)): Replay succeeded in 511 milliseconds
Hint-info (.\TLS.fst(624,19-624,66)): Replay succeeded in 344 milliseconds
Hint-info (.\TLS.fst(624,37-624,55)): Replay succeeded in 363 milliseconds
Hint-info (.\TLS.fst(629,7-641,20)): Replay succeeded in 376 milliseconds
Hint-info (.\TLS.fst(644,7-664,35)): Replay succeeded in 413 milliseconds
Hint-info (.\TLS.fst(663,4-663,16)): Replay succeeded in 494 milliseconds
Hint-info (.\TLS.fst(674,0-714,40)): Replay failed in 464 milliseconds
Hint-info (.\TLS.fst(703,23-703,30)): Replay succeeded in 343 milliseconds
Hint-info (.\TLS.fst(719,0-731,21)): Replay failed in 297 milliseconds
Hint-info (.\TLS.fst(734,0-747,10)): Replay failed in 357 milliseconds
Verified module: TLS (178661 milliseconds)
All verification conditions discharged successfully
(.\ConnInvariant.fst(359,17-359,38))
Query (ConnInvariant.mutate_registered_writer_ok, 7)	succeeded (with hint) in 362 milliseconds with fuel 0 and ifuel 1
(.\ConnInvariant.fst(360,19-360,39))
Query (ConnInvariant.mutate_registered_writer_ok, 8)	succeeded (with hint) in 371 milliseconds with fuel 0 and ifuel 1
(.\ConnInvariant.fst(382,3-382,36))
Query (ConnInvariant.conn_hs_region_exists, 1)	succeeded (with hint) in 357 milliseconds with fuel 0 and ifuel 0
(.\ConnInvariant.fst(386,37-386,57))
Query (ConnInvariant.add_connection_ok, 1)	succeeded (with hint) in 374 milliseconds with fuel 0 and ifuel 0
(.\ConnInvariant.fst(388,18-388,51))
Query (ConnInvariant.add_connection_ok, 2)	succeeded (with hint) in 351 milliseconds with fuel 0 and ifuel 0
(.\ConnInvariant.fst(391,22-391,42))
Query (ConnInvariant.add_connection_ok, 3)	succeeded (with hint) in 300 milliseconds with fuel 0 and ifuel 0
(.\ConnInvariant.fst(392,26-392,46))
Query (ConnInvariant.add_connection_ok, 4)	succeeded (with hint) in 294 milliseconds with fuel 0 and ifuel 0
(.\ConnInvariant.fst(395,19-395,42))
Query (ConnInvariant.add_connection_ok, 5)	succeeded (with hint) in 353 milliseconds with fuel 0 and ifuel 1
(.\ConnInvariant.fst(385,0-396,23))
Query (ConnInvariant.add_connection_ok, 6)	succeeded (with hint) in 353 milliseconds with fuel 0 and ifuel 1
(.\ConnInvariant.fst(398,0-416,58))
Query (ConnInvariant.add_connection_ok, 7)	succeeded (with hint) in 391 milliseconds with fuel 0 and ifuel 1
(.\ConnInvariant.fst(399,33-399,53))
Query (ConnInvariant.add_connection_ok, 8)	succeeded (with hint) in 369 milliseconds with fuel 0 and ifuel 1
(.\ConnInvariant.fst(401,17-401,38))
Query (ConnInvariant.add_connection_ok, 9)	succeeded (with hint) in 335 milliseconds with fuel 0 and ifuel 1
(.\ConnInvariant.fst(402,17-402,38))
Query (ConnInvariant.add_connection_ok, 10)	succeeded (with hint) in 365 milliseconds with fuel 0 and ifuel 1
(.\ConnInvariant.fst(403,19-403,39))
Query (ConnInvariant.add_connection_ok, 11)	succeeded (with hint) in 353 milliseconds with fuel 0 and ifuel 1
(.\ConnInvariant.fst(404,19-404,39))
Query (ConnInvariant.add_connection_ok, 12)	succeeded (with hint) in 548 milliseconds with fuel 0 and ifuel 1
(.\ConnInvariant.fst(412,15-412,23))
Query (ConnInvariant.add_connection_ok, 13)	succeeded (with hint) in 331 milliseconds with fuel 0 and ifuel 1
(.\ConnInvariant.fst(414,51-414,60))
Query (ConnInvariant.add_connection_ok, 14)	succeeded (with hint) in 291 milliseconds with fuel 0 and ifuel 1
(.\ConnInvariant.fst(415,4-415,49))
Query (ConnInvariant.add_connection_ok, 15)	succeeded (with hint) in 287 milliseconds with fuel 0 and ifuel 1
Hint-info (.\ConnInvariant.fst(22,0-27,51)): Replay succeeded in 287 milliseconds
Hint-info (.\ConnInvariant.fst(24,2-24,44)): Replay succeeded in 284 milliseconds
Hint-info (.\ConnInvariant.fst(27,6-27,50)): Replay succeeded in 373 milliseconds
Hint-info (.\ConnInvariant.fst(27,34-27,50)): Replay succeeded in 300 milliseconds
Hint-info (.\ConnInvariant.fst(41,6-43,83)): Replay succeeded in 288 milliseconds
Hint-info (.\ConnInvariant.fst(41,47-41,51)): Replay succeeded in 376 milliseconds
Hint-info (.\ConnInvariant.fst(43,20-43,52)): Replay succeeded in 288 milliseconds
Hint-info (.\ConnInvariant.fst(43,35-43,51)): Replay succeeded in 279 milliseconds
Hint-info (.\ConnInvariant.fst(30,0-43,85)): Replay succeeded in 286 milliseconds
Hint-info (.\ConnInvariant.fst(45,0-57,34)): Replay failed in 300 milliseconds
Hint-info (.\ConnInvariant.fst(56,24-56,40)): Replay succeeded in 285 milliseconds
Hint-info (.\ConnInvariant.fst(51,44-51,48)): Replay succeeded in 338 milliseconds
Hint-info (.\ConnInvariant.fst(53,17-53,49)): Replay succeeded in 289 milliseconds
Hint-info (.\ConnInvariant.fst(53,32-53,48)): Replay succeeded in 283 milliseconds
Hint-info (.\ConnInvariant.fst(57,2-57,34)): Replay succeeded in 296 milliseconds
Hint-info (.\ConnInvariant.fst(57,2-57,34)): Replay succeeded in 289 milliseconds
Hint-info (.\ConnInvariant.fst(67,42-67,60)): Replay succeeded in 339 milliseconds
Hint-info (.\ConnInvariant.fst(81,0-86,45)): Replay succeeded in 281 milliseconds
Hint-info (.\ConnInvariant.fst(84,1-84,7)): Replay succeeded in 297 milliseconds
Hint-info (.\ConnInvariant.fst(88,0-88,72)): Replay succeeded in 281 milliseconds
Hint-info (.\ConnInvariant.fst(90,0-91,64)): Replay succeeded in 312 milliseconds
Hint-info (.\ConnInvariant.fst(113,0-117,48)): Replay succeeded in 297 milliseconds
Hint-info (.\ConnInvariant.fst(116,8-116,12)): Replay succeeded in 322 milliseconds
Hint-info (.\ConnInvariant.fst(117,5-117,48)): Replay succeeded in 348 milliseconds
Hint-info (.\ConnInvariant.fst(120,0-136,58)): Replay succeeded in 300 milliseconds
Hint-info (.\ConnInvariant.fst(128,27-128,78)): Replay succeeded in 328 milliseconds
Hint-info (.\ConnInvariant.fst(128,39-128,78)): Replay succeeded in 327 milliseconds
Hint-info (.\ConnInvariant.fst(130,1-130,54)): Replay succeeded in 348 milliseconds
Hint-info (.\ConnInvariant.fst(134,2-134,52)): Replay succeeded in 312 milliseconds
Hint-info (.\ConnInvariant.fst(134,13-134,52)): Replay succeeded in 284 milliseconds
Hint-info (.\ConnInvariant.fst(146,0-151,42)): Replay succeeded in 284 milliseconds
Hint-info (.\ConnInvariant.fst(150,6-150,27)): Replay succeeded in 278 milliseconds
Hint-info (.\ConnInvariant.fst(155,28-155,48)): Replay succeeded in 284 milliseconds
Hint-info (.\ConnInvariant.fst(156,26-156,47)): Replay succeeded in 287 milliseconds
Hint-info (.\ConnInvariant.fst(160,32-160,53)): Replay succeeded in 337 milliseconds
Hint-info (.\ConnInvariant.fst(161,25-161,47)): Replay succeeded in 360 milliseconds
Hint-info (.\ConnInvariant.fst(161,48-161,69)): Replay succeeded in 339 milliseconds
Hint-info (.\ConnInvariant.fst(179,21-179,41)): Replay succeeded in 282 milliseconds
Hint-info (.\ConnInvariant.fst(180,23-180,44)): Replay succeeded in 300 milliseconds
Hint-info (.\ConnInvariant.fst(181,16-181,37)): Replay succeeded in 325 milliseconds
Hint-info (.\ConnInvariant.fst(182,25-182,46)): Replay succeeded in 284 milliseconds
Hint-info (.\ConnInvariant.fst(184,3-184,57)): Replay succeeded in 303 milliseconds
Hint-info (.\ConnInvariant.fst(187,15-187,48)): Replay succeeded in 353 milliseconds
Hint-info (.\ConnInvariant.fst(191,17-191,34)): Replay succeeded in 282 milliseconds
Hint-info (.\ConnInvariant.fst(193,31-193,82)): Replay succeeded in 289 milliseconds
Hint-info (.\ConnInvariant.fst(193,43-193,82)): Replay succeeded in 303 milliseconds
Hint-info (.\ConnInvariant.fst(195,5-195,50)): Replay succeeded in 369 milliseconds
Hint-info (.\ConnInvariant.fst(195,17-195,50)): Replay succeeded in 288 milliseconds
Hint-info (.\ConnInvariant.fst(177,0-196,23)): Replay succeeded in 356 milliseconds
Hint-info (.\ConnInvariant.fst(201,0-201,23)): Replay succeeded in 288 milliseconds
Hint-info (.\ConnInvariant.fst(204,0-219,34)): Replay failed in 400 milliseconds
Hint-info (.\ConnInvariant.fst(209,19-209,40)): Replay succeeded in 298 milliseconds
Hint-info (.\ConnInvariant.fst(210,19-210,40)): Replay succeeded in 342 milliseconds
Hint-info (.\ConnInvariant.fst(215,15-215,18)): Replay succeeded in 281 milliseconds
Hint-info (.\ConnInvariant.fst(205,41-205,62)): Replay succeeded in 292 milliseconds
Hint-info (.\ConnInvariant.fst(206,22-206,42)): Replay succeeded in 299 milliseconds
Hint-info (.\ConnInvariant.fst(219,2-219,34)): Replay succeeded in 348 milliseconds
Hint-info (.\ConnInvariant.fst(223,0-240,5)): Replay failed in 310 milliseconds
Hint-info (.\ConnInvariant.fst(234,4-234,24)): Replay succeeded in 355 milliseconds
Hint-info (.\ConnInvariant.fst(235,4-235,25)): Replay succeeded in 355 milliseconds
Hint-info (.\ConnInvariant.fst(237,4-237,49)): Replay succeeded in 374 milliseconds
Hint-info (.\ConnInvariant.fst(237,16-237,49)): Replay succeeded in 297 milliseconds
Hint-info (.\ConnInvariant.fst(243,0-246,8)): Replay succeeded in 305 milliseconds
Hint-info (.\ConnInvariant.fst(245,21-245,49)): Replay succeeded in 300 milliseconds
Hint-info (.\ConnInvariant.fst(245,21-245,49)): Replay succeeded in 296 milliseconds
Hint-info (.\ConnInvariant.fst(248,0-254,8)): Replay succeeded in 313 milliseconds
Hint-info (.\ConnInvariant.fst(250,30-250,38)): Replay succeeded in 296 milliseconds
Hint-info (.\ConnInvariant.fst(251,14-251,32)): Replay succeeded in 352 milliseconds
Hint-info (.\ConnInvariant.fst(256,0-261,36)): Replay failed in 351 milliseconds
Hint-info (.\ConnInvariant.fst(258,14-258,31)): Replay succeeded in 340 milliseconds
Hint-info (.\ConnInvariant.fst(272,24-272,44)): Replay succeeded in 368 milliseconds
Hint-info (.\ConnInvariant.fst(273,18-273,39)): Replay succeeded in 343 milliseconds
Hint-info (.\ConnInvariant.fst(279,6-279,50)): Replay succeeded in 360 milliseconds
Hint-info (.\ConnInvariant.fst(280,6-280,50)): Replay succeeded in 377 milliseconds
Hint-info (.\ConnInvariant.fst(281,6-281,27)): Replay failed in 350 milliseconds
Hint-info (.\ConnInvariant.fst(283,29-283,64)): Replay succeeded in 365 milliseconds
Hint-info (.\ConnInvariant.fst(288,46-288,68)): Replay succeeded in 361 milliseconds
Hint-info (.\ConnInvariant.fst(269,0-294,22)): Replay succeeded in 377 milliseconds
Hint-info (.\ConnInvariant.fst(295,0-340,34)): Replay failed in 429 milliseconds
Hint-info (.\ConnInvariant.fst(304,19-304,40)): Replay succeeded in 294 milliseconds
Hint-info (.\ConnInvariant.fst(305,19-305,40)): Replay succeeded in 301 milliseconds
Hint-info (.\ConnInvariant.fst(306,21-306,41)): Replay succeeded in 367 milliseconds
Hint-info (.\ConnInvariant.fst(307,21-307,41)): Replay succeeded in 355 milliseconds
Hint-info (.\ConnInvariant.fst(320,26-320,64)): Replay succeeded in 367 milliseconds
Hint-info (.\ConnInvariant.fst(321,29-321,48)): Replay succeeded in 366 milliseconds
Hint-info (.\ConnInvariant.fst(322,19-322,76)): Replay succeeded in 357 milliseconds
Hint-info (.\ConnInvariant.fst(325,23-325,42)): Replay succeeded in 322 milliseconds
Hint-info (.\ConnInvariant.fst(326,23-326,42)): Replay succeeded in 354 milliseconds
Hint-info (.\ConnInvariant.fst(331,15-331,30)): Replay succeeded in 365 milliseconds
Hint-info (.\ConnInvariant.fst(300,41-300,62)): Replay succeeded in 377 milliseconds
Hint-info (.\ConnInvariant.fst(301,21-301,41)): Replay succeeded in 329 milliseconds
Hint-info (.\ConnInvariant.fst(340,2-340,34)): Replay succeeded in 370 milliseconds
Hint-info (.\ConnInvariant.fst(351,15-351,38)): Replay succeeded in 361 milliseconds
Hint-info (.\ConnInvariant.fst(352,15-352,37)): Replay succeeded in 366 milliseconds
Hint-info (.\ConnInvariant.fst(353,33-353,84)): Replay succeeded in 291 milliseconds
Hint-info (.\ConnInvariant.fst(353,45-353,84)): Replay succeeded in 300 milliseconds
Hint-info (.\ConnInvariant.fst(347,0-355,25)): Replay succeeded in 316 milliseconds
Hint-info (.\ConnInvariant.fst(357,0-368,36)): Replay succeeded in 307 milliseconds
Hint-info (.\ConnInvariant.fst(359,17-359,38)): Replay succeeded in 362 milliseconds
Hint-info (.\ConnInvariant.fst(360,19-360,39)): Replay succeeded in 371 milliseconds
Hint-info (.\ConnInvariant.fst(382,3-382,36)): Replay succeeded in 357 milliseconds
Hint-info (.\ConnInvariant.fst(386,37-386,57)): Replay succeeded in 374 milliseconds
Hint-info (.\ConnInvariant.fst(388,18-388,51)): Replay succeeded in 351 milliseconds
Hint-info (.\ConnInvariant.fst(391,22-391,42)): Replay succeeded in 300 milliseconds
Hint-info (.\ConnInvariant.fst(392,26-392,46)): Replay succeeded in 294 milliseconds
Hint-info (.\ConnInvariant.fst(395,19-395,42)): Replay succeeded in 353 milliseconds
Hint-info (.\ConnInvariant.fst(385,0-396,23)): Replay succeeded in 353 milliseconds
Hint-info (.\ConnInvariant.fst(398,0-416,58)): Replay succeeded in 391 milliseconds
Hint-info (.\ConnInvariant.fst(399,33-399,53)): Replay succeeded in 369 milliseconds
Hint-info (.\ConnInvariant.fst(401,17-401,38)): Replay succeeded in 335 milliseconds
Hint-info (.\ConnInvariant.fst(402,17-402,38)): Replay succeeded in 365 milliseconds
Hint-info (.\ConnInvariant.fst(403,19-403,39)): Replay succeeded in 353 milliseconds
Hint-info (.\ConnInvariant.fst(404,19-404,39)): Replay succeeded in 548 milliseconds
Hint-info (.\ConnInvariant.fst(412,15-412,23)): Replay succeeded in 331 milliseconds
Hint-info (.\ConnInvariant.fst(414,51-414,60)): Replay succeeded in 291 milliseconds
Hint-info (.\ConnInvariant.fst(415,4-415,49)): Replay succeeded in 287 milliseconds
Verified module: ConnInvariant (191174 milliseconds)
All verification conditions discharged successfully
make: Leaving directory '/cygdrive/c/Build/Agent/_work/36/s/src/tls'
warning: CRLF will be replaced by LF in src/tls/AEAD_GCM.fst.hints.
The file will have its original line endings in your working directory.
warning: CRLF will be replaced by LF in src/tls/Alert.fst.hints.
The file will have its original line endings in your working directory.
warning: CRLF will be replaced by LF in src/tls/Cert.fst.hints.
The file will have its original line endings in your working directory.
warning: CRLF will be replaced by LF in src/tls/CommonDH.fst.hints.
The file will have its original line endings in your working directory.
warning: CRLF will be replaced by LF in src/tls/ConnInvariant.fst.hints.
The file will have its original line endings in your working directory.
warning: CRLF will be replaced by LF in src/tls/Connection.fst.hints.
The file will have its original line endings in your working directory.
warning: CRLF will be replaced by LF in src/tls/Content.fst.hints.
The file will have its original line endings in your working directory.
warning: CRLF will be replaced by LF in src/tls/DHGroup.fst.hints.
The file will have its original line endings in your working directory.
warning: CRLF will be replaced by LF in src/tls/DataStream.fst.hints.
The file will have its original line endings in your working directory.
warning: CRLF will be replaced by LF in src/tls/ECGroup.fst.hints.
The file will have its original line endings in your working directory.
warning: CRLF will be replaced by LF in src/tls/Epochs.fst.hints.
The file will have its original line endings in your working directory.
warning: CRLF will be replaced by LF in src/tls/HKDF.fst.hints.
The file will have its original line endings in your working directory.
warning: CRLF will be replaced by LF in src/tls/HashMAC.fst.hints.
The file will have its original line endings in your working directory.
warning: CRLF will be replaced by LF in src/tls/Hashing.fst.hints.
The file will have its original line endings in your working directory.
warning: CRLF will be replaced by LF in src/tls/IdNonce.fst.hints.
The file will have its original line endings in your working directory.
warning: CRLF will be replaced by LF in src/tls/KeySchedule.fst.hints.
The file will have its original line endings in your working directory.
warning: CRLF will be replaced by LF in src/tls/LHAEPlain.fst.hints.
The file will have its original line endings in your working directory.
warning: CRLF will be replaced by LF in src/tls/MAC.fst.hints.
The file will have its original line endings in your working directory.
warning: CRLF will be replaced by LF in src/tls/MAC_SHA1.fst.hints.
The file will have its original line endings in your working directory.
warning: CRLF will be replaced by LF in src/tls/MAC_SHA256.fst.hints.
The file will have its original line endings in your working directory.
warning: CRLF will be replaced by LF in src/tls/MasterSecret.fst.hints.
The file will have its original line endings in your working directory.
warning: CRLF will be replaced by LF in src/tls/MonotoneMap.fst.hints.
The file will have its original line endings in your working directory.
warning: CRLF will be replaced by LF in src/tls/Nonce.fst.hints.
The file will have its original line endings in your working directory.
warning: CRLF will be replaced by LF in src/tls/PMS.fst.hints.
The file will have its original line endings in your working directory.
warning: CRLF will be replaced by LF in src/tls/RSAKey.fst.hints.
The file will have its original line endings in your working directory.
warning: CRLF will be replaced by LF in src/tls/Range.fst.hints.
The file will have its original line endings in your working directory.
warning: CRLF will be replaced by LF in src/tls/Record.fst.hints.
The file will have its original line endings in your working directory.
warning: CRLF will be replaced by LF in src/tls/Signature.fst.hints.
The file will have its original line endings in your working directory.
warning: CRLF will be replaced by LF in src/tls/StAE.fst.hints.
The file will have its original line endings in your working directory.
warning: CRLF will be replaced by LF in src/tls/StatefulLHAE.fst.hints.
The file will have its original line endings in your working directory.
warning: CRLF will be replaced by LF in src/tls/StatefulPlain.fst.hints.
The file will have its original line endings in your working directory.
warning: CRLF will be replaced by LF in src/tls/StreamAE.fst.hints.
The file will have its original line endings in your working directory.
warning: CRLF will be replaced by LF in src/tls/StreamDeltas.fst.hints.
The file will have its original line endings in your working directory.
warning: CRLF will be replaced by LF in src/tls/StreamPlain.fst.hints.
The file will have its original line endings in your working directory.
warning: CRLF will be replaced by LF in src/tls/TLS.fst.hints.
The file will have its original line endings in your working directory.
warning: CRLF will be replaced by LF in src/tls/TLSConstants.fst.hints.
The file will have its original line endings in your working directory.
warning: CRLF will be replaced by LF in src/tls/TLSError.fst.hints.
The file will have its original line endings in your working directory.
warning: CRLF will be replaced by LF in src/tls/TLSExtensions.fst.hints.
The file will have its original line endings in your working directory.
warning: CRLF will be replaced by LF in src/tls/TLSInfo.fst.hints.
The file will have its original line endings in your working directory.
warning: CRLF will be replaced by LF in src/tls/Transport.fst.hints.
The file will have its original line endings in your working directory.
diff --git a/.fstar_version b/.fstar_version
index 29f17ba..a9013f0 100644
--- a/.fstar_version
+++ b/.fstar_version
@@ -1 +1 @@
-803422c5cbe10a32bd3832457ebdfeb913e3296b
+803422c
diff --git a/.gitattributes b/.gitattributes
index d5103eb..960173b 100644
--- a/.gitattributes
+++ b/.gitattributes
@@ -1,3 +1,3 @@
-*.fs* eol=lf
-*.ml* eol=lf
-Makefile eol=lf
+*.fs* eol=lf
+*.ml* eol=lf
+Makefile eol=lf
diff --git a/.gitignore b/.gitignore
index 9f18795..509844d 100644
--- a/.gitignore
+++ b/.gitignore
@@ -1,42 +1,42 @@
-*~
-\#*\#
-*.vspx
-*.psess
-*.suo
-*.smt2
-*.sav
-*.p.fs*
-transcript*
-cache/
-/VS/packages
-
-src/tls-ml/*.ml
-
-attic/
-_build/
-
-*.native*
-*.byte*
-
-/.nubuild
-/nucache
-/nuobj
-
-*.swp
-*~
-
-src/tls/libmitls.dll
-libs/ffi/FFI.o
-libs/ffi/dllFFICallbacks.dll
-libs/ffi/dllFFICallbacks.so
-libs/ffi/FFICallbacks.a
-libs/ffi/FFICallbacks.cmi
-libs/ffi/FFICallbacks.cmx
-libs/ffi/FFICallbacks.cmxa
-libs/ffi/FFICallbacks.o
-libs/ffi/FFIRegister.cmi
-libs/ffi/FFIRegister.cmx
-libs/ffi/FFIRegister.o
-libs/ffi/libFFIcallbacks.a
-src/tls/server13.exe
+*~
+\#*\#
+*.vspx
+*.psess
+*.suo
+*.smt2
+*.sav
+*.p.fs*
+transcript*
+cache/
+/VS/packages
+
+src/tls-ml/*.ml
+
+attic/
+_build/
+
+*.native*
+*.byte*
+
+/.nubuild
+/nucache
+/nuobj
+
+*.swp
+*~
+
+src/tls/libmitls.dll
+libs/ffi/FFI.o
+libs/ffi/dllFFICallbacks.dll
+libs/ffi/dllFFICallbacks.so
+libs/ffi/FFICallbacks.a
+libs/ffi/FFICallbacks.cmi
+libs/ffi/FFICallbacks.cmx
+libs/ffi/FFICallbacks.cmxa
+libs/ffi/FFICallbacks.o
+libs/ffi/FFIRegister.cmi
+libs/ffi/FFIRegister.cmx
+libs/ffi/FFIRegister.o
+libs/ffi/libFFIcallbacks.a
+src/tls/server13.exe
src/tls/client13.exe
\ No newline at end of file
diff --git a/.gitmodules b/.gitmodules
index 05a5e83..333e91a 100644
--- a/.gitmodules
+++ b/.gitmodules
@@ -1,3 +1,3 @@
-[submodule ".fstar"]
-	path = .fstar
-	url = https://github.com/FStarLang/FStar.git
+[submodule ".fstar"]
+	path = .fstar
+	url = https://github.com/FStarLang/FStar.git
diff --git a/.travis.yml b/.travis.yml
index 53599a0..7f465b0 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -1,37 +1,37 @@
-sudo: required
-dist: trusty
-language: csharp
-
-before_install:
-  - sudo add-apt-repository --yes ppa:avsm/ppa
-  - sudo add-apt-repository --yes ppa:ubuntu-toolchain-r/test
-  - sudo add-apt-repository --yes ppa:0k53d-karl-f830m/openssl
-  - sudo apt-get -qq update
-
-install:
-  - sudo apt-get install --yes libssl-dev opam libsqlite3-dev libgmp-dev
-  - export OPAMYES=true
-  - opam init
-  - eval $(opam config env)
-  - opam install batteries sqlite3 fileutils stdint zarith yojson
-  - export Z3=z3-4.4.1-x64-ubuntu-14.04
-  - wget https://github.com/Z3Prover/z3/releases/download/z3-4.4.1/$Z3.zip
-  - unzip $Z3.zip
-  - export PATH=/home/travis/build/mitls/mitls-fstar/$Z3/bin:/home/travis/build/mitls/mitls-fstar/.fstar/bin:$PATH
-  - ocamlfind ocamlopt -config
-
-script:
-  - ./scripts/travis.sh
-  - make -C .fstar/src/ocaml-output
-  - make -C src/tls -k all-ver
-  - make -C src/tls tls-ffi
-
-notifications:
-  slack:
-    rooms:
-      # Regenerate with `travis encrypt "everestexpedition:<token>#mitls-travis-build"`
-      # where <token> comes from the Travis CI settings at https://everestexpedition.slack.com/services/
-      secure: dG9lvoeKxFVEVGApx8eGfXS8vunDu4h6SWMwE4EFms5vLgclCS7/hixn07y1OX7BypUOOc4DHK9hOYvEuDE1YoM47bBkmEQOW5CxQmId73shMSmRcmBgsX/clXJv5d6eTQcRu8hsvIW/IMYJGeQQH0P+p4Cxck+6Dve5lgDF19WthVS79C/3z17a2fGYegnTX4gI1oRlCfQmrrs6UcK+yJfUn/gXrHj3fMsXxwPIcuEF2L5aG5kIBk5JbUVmj9N25pBNO1w9n+8ysXk3GS9HlPzNctTT9R9PybPBdU7VfdWXwTErLAKCQTOU0ZBgoFSMhnZenOOPuEnL+AIVfCJogOb7auStUCvBWjwYHzk/wZ9SL7+RMMc0LmA+ODvNow6bYpinQuG8pWrGvz3Y8vAnt/zYNNvXPbJsX2PinfwrDehEr7EJegiXpo0f30nT1CoU+xU427lBKPBh8bEGmW1wMkGrExQGEwtxxIMoWcx1UYx/5boToLNdksH9YJ8j1VEUNMhZEwcYwApDKk9BKx9YIUsGPgElEF7q4BhaprW7srduvHhw2xbWAHfV01xN2lg/GzWhSoQuNWF0RTJVtR81kKSLF/eFsb/Smpeo6eqYlgI6JY955C+MA+ex8G+8gOpWS8kJwImfYYVXazSV7XJ/XtVC0Zd0A3r2UQG8BtbtGIk=
-
-git:
-    depth: 3
+sudo: required
+dist: trusty
+language: csharp
+
+before_install:
+  - sudo add-apt-repository --yes ppa:avsm/ppa
+  - sudo add-apt-repository --yes ppa:ubuntu-toolchain-r/test
+  - sudo add-apt-repository --yes ppa:0k53d-karl-f830m/openssl
+  - sudo apt-get -qq update
+
+install:
+  - sudo apt-get install --yes libssl-dev opam libsqlite3-dev libgmp-dev
+  - export OPAMYES=true
+  - opam init
+  - eval $(opam config env)
+  - opam install batteries sqlite3 fileutils stdint zarith yojson
+  - export Z3=z3-4.4.1-x64-ubuntu-14.04
+  - wget https://github.com/Z3Prover/z3/releases/download/z3-4.4.1/$Z3.zip
+  - unzip $Z3.zip
+  - export PATH=/home/travis/build/mitls/mitls-fstar/$Z3/bin:/home/travis/build/mitls/mitls-fstar/.fstar/bin:$PATH
+  - ocamlfind ocamlopt -config
+
+script:
+  - ./scripts/travis.sh
+  - make -C .fstar/src/ocaml-output
+  - make -C src/tls -k all-ver
+  - make -C src/tls tls-ffi
+
+notifications:
+  slack:
+    rooms:
+      # Regenerate with `travis encrypt "everestexpedition:<token>#mitls-travis-build"`
+      # where <token> comes from the Travis CI settings at https://everestexpedition.slack.com/services/
+      secure: dG9lvoeKxFVEVGApx8eGfXS8vunDu4h6SWMwE4EFms5vLgclCS7/hixn07y1OX7BypUOOc4DHK9hOYvEuDE1YoM47bBkmEQOW5CxQmId73shMSmRcmBgsX/clXJv5d6eTQcRu8hsvIW/IMYJGeQQH0P+p4Cxck+6Dve5lgDF19WthVS79C/3z17a2fGYegnTX4gI1oRlCfQmrrs6UcK+yJfUn/gXrHj3fMsXxwPIcuEF2L5aG5kIBk5JbUVmj9N25pBNO1w9n+8ysXk3GS9HlPzNctTT9R9PybPBdU7VfdWXwTErLAKCQTOU0ZBgoFSMhnZenOOPuEnL+AIVfCJogOb7auStUCvBWjwYHzk/wZ9SL7+RMMc0LmA+ODvNow6bYpinQuG8pWrGvz3Y8vAnt/zYNNvXPbJsX2PinfwrDehEr7EJegiXpo0f30nT1CoU+xU427lBKPBh8bEGmW1wMkGrExQGEwtxxIMoWcx1UYx/5boToLNdksH9YJ8j1VEUNMhZEwcYwApDKk9BKx9YIUsGPgElEF7q4BhaprW7srduvHhw2xbWAHfV01xN2lg/GzWhSoQuNWF0RTJVtR81kKSLF/eFsb/Smpeo6eqYlgI6JY955C+MA+ex8G+8gOpWS8kJwImfYYVXazSV7XJ/XtVC0Zd0A3r2UQG8BtbtGIk=
+
+git:
+    depth: 3
diff --git a/Dockerfile b/Dockerfile
index cd2f157..cc87fd8 100644
--- a/Dockerfile
+++ b/Dockerfile
@@ -1,22 +1,22 @@
-FROM ubuntu:14.04
-MAINTAINER Sreekanth Kannepalli
-RUN apt-get update && apt-get install -y software-properties-common
-RUN add-apt-repository --yes ppa:avsm/ppa
-RUN add-apt-repository --yes ppa:ubuntu-toolchain-r/test
-RUN add-apt-repository --yes ppa:0k53d-karl-f830m/openssl
-RUN apt-get -qq update
-
-RUN apt-get install --yes make m4 sqlite3 libssl-dev opam libsqlite3-dev libgmp-dev
-RUN export OPAMYES=true
-RUN opam init
-RUN eval $(opam config env)
-RUN opam install depext conf-m4 batteries fileutils stdint zarith yojson
-WORKDIR root
-ENV Z3 z3-4.4.1-x64-ubuntu-14.04
-RUN wget https://github.com/Z3Prover/z3/releases/download/z3-4.4.1/$Z3.zip
-RUN unzip $Z3.zip
-RUN echo "export PATH=~/z3-4.4.1-x64-ubuntu-14.04/bin:\$PATH" >> ~/.bashrc
-RUN echo "eval \$(opam config env)" >> ~/.bashrc
-
-
-
+FROM ubuntu:14.04
+MAINTAINER Sreekanth Kannepalli 
+RUN apt-get update && apt-get install -y software-properties-common
+RUN add-apt-repository --yes ppa:avsm/ppa
+RUN add-apt-repository --yes ppa:ubuntu-toolchain-r/test
+RUN add-apt-repository --yes ppa:0k53d-karl-f830m/openssl
+RUN apt-get -qq update 
+
+RUN apt-get install --yes make m4 sqlite3 libssl-dev opam libsqlite3-dev libgmp-dev
+RUN export OPAMYES=true
+RUN opam init 
+RUN eval $(opam config env)
+RUN opam install depext conf-m4 batteries fileutils stdint zarith yojson 
+WORKDIR root
+ENV Z3 z3-4.4.1-x64-ubuntu-14.04
+RUN wget https://github.com/Z3Prover/z3/releases/download/z3-4.4.1/$Z3.zip 
+RUN unzip $Z3.zip
+RUN echo "export PATH=~/z3-4.4.1-x64-ubuntu-14.04/bin:\$PATH" >> ~/.bashrc
+RUN echo "eval \$(opam config env)" >> ~/.bashrc 
+
+
+
diff --git a/LICENSE b/LICENSE
index 4456755..0748dc7 100644
--- a/LICENSE
+++ b/LICENSE
@@ -1,13 +1,13 @@
-Copyright 2015 INRIA and Microsoft Corporation
-
-Licensed under the Apache License, Version 2.0 (the "License");
-you may not use this file except in compliance with the License.
-You may obtain a copy of the License at
-
-    http://www.apache.org/licenses/LICENSE-2.0
-
-Unless required by applicable law or agreed to in writing, software
-distributed under the License is distributed on an "AS IS" BASIS,
-WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-See the License for the specific language governing permissions and
+Copyright 2015 INRIA and Microsoft Corporation
+
+Licensed under the Apache License, Version 2.0 (the "License");
+you may not use this file except in compliance with the License.
+You may obtain a copy of the License at
+
+    http://www.apache.org/licenses/LICENSE-2.0
+
+Unless required by applicable law or agreed to in writing, software
+distributed under the License is distributed on an "AS IS" BASIS,
+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+See the License for the specific language governing permissions and
limitations under the License.
\ No newline at end of file
diff --git a/README.md b/README.md
index 8826986..bce5f84 100644
--- a/README.md
+++ b/README.md
@@ -1,145 +1,145 @@
-miTLS: A verified reference implementation of TLS
-=================================================
-
-This repository contains the new F* development a port of the stable [F# development](https://github.com/mitls/mitls-flex) to F* 0.9.
-
-| Build  | Status |
-| ------------- | ------------- |
-| Windows CI  | <img src="https://msresearch-ext.visualstudio.com/_apis/public/build/definitions/83f09286-c288-4766-89cd-d267b6d93772/12/badge" /> |
-| Windows Nightly  | <img src="https://msresearch-ext.visualstudio.com/_apis/public/build/definitions/83f09286-c288-4766-89cd-d267b6d93772/14/badge" />  |
-| Linux CI  | <img src="https://msresearch-ext.visualstudio.com/_apis/public/build/definitions/83f09286-c288-4766-89cd-d267b6d93772/20/badge" /> |
-| Linux Nightly  | <img src="https://msresearch-ext.visualstudio.com/_apis/public/build/definitions/83f09286-c288-4766-89cd-d267b6d93772/15/badge" /> |
-
-
-### miTLS website
-
-More information on miTLS can be found at www.mitls.org
-More information on F\* can be found at www.fstar-lang.org
-
-### Table of contents
-
-  * [Building](#building)
-  * [Directory structure](#directory-structure)
-  	* [Legacy, imported from mitls-f7](#legacy-imported-from-mitls-f7)
-  * [Configuring Emacs and Atom F* modes](#configuring-emacs-and-atom-f-modes)
-
-### Building
-
-There are two ways to setup your build environment.
-  * [Using Docker](#docker)
-  * [Custom setup using Cygwin and OCaml](#cygwin)
-
-#### Using Docker
-Head over to https://github.com/mitls/mitls-fstar/wiki/Setting-up-a-Docker-based-Development-environment for instructions on setup
-
-#### Custom setup using Cygwin and OCaml
-There are numerous dependencies. Follow the instructions at https://github.com/protz/ocaml-installer/wiki to have a working Cygwin and OCaml setup. In addition to `ocamlfind`, `batteries`, `stdint`, and `zarith`, you will also need to install the `sqlite3` package (hint: `opam install sqlite3`). To build CoreCrypto, you will need to install `libssl-dev`. On Windows, you can use `opam depext ssl` to install the appropriate Cygwin packages.
-
-Once this is done, head over to https://github.com/mitls/mitls-fstar/wiki/Development-environment for some tips on our development environment, including how to attain happiness with Cygwin & Git on Windows (hopefully).
-
-After the setup is done, check that you have the F\* compiler set up and running in `.fstar` (`git submodule update --init` if you need to). Note: we do not support the F\# build of F\*; please use the OCaml build of F\* (i.e. `make -C .fstar/src/ocaml-output`).
-
-To verify the current miTLS:
-```
-cd src/tls
-make all-ver -j N
-```
-where N is the number of parallel jobs to use.
-
-To build the mitls.exe command line tool:
-```
-cd src/tls
-make mitls.exe
-./mitls.exe -v 1.2 google.com
-./mitls.exe -s 0.0.0.0 4443 &
-./mitls.exe 127.0.0.1 4443
-```
-
-**Caveats:**
-
-There is a script that detects if the `fstar` module has changed since the last build, and rebuilds it. If you get strange errors, the script may have failed to reubild `fstar` properly, and the main `Makefile` keeps attempting to extract/verify using an outdated version of F\*. In that case, it's a good idea to run `make -C .fstar/src/ocaml-output clean all`.
-
-### Directory structure
-
-- `src/`
-
- - `tls/` In-progress miTLS port. Most files have been ported and fully typecheck; others only lax typecheck or still need to be ported. The `Makefile` here has two targets that are also part of regression testing:
-
-    - `tls-ver` Full type checking of files that have been ported so far (listed in variable `VERIFY`)
-    - `tls-gen`  OCaml code generation for files ported so far---generated files go to the `output/` directory
-    - `mitls.exe` openssl-like command line client and server. See `mitls.exe --help` for details on how to use the tool.
-
-  - `fstar_proof/` an independent POPL'16 example, verifying the state machine in F* (out of date, JK is the expert; it could be moved to FStarLang/FStar).
-
-  - `mipki/` Antoine's development on certificate management.
-
-  - `flex/` WIP port of flexTLS to F*
-
-#### Legacy, imported from mitls-f7
-
-- `apps/` Sample apps built on top of miTLS --- not ported yet.
-
-- `data/` Persistent data used by miTLS, e.g. the OpenSSL root certificate store; sample chains for the test server; a DH parameter cache --- not ported yet.
-
-- `libs/` miTLS libraries; CoreCrypto and Platform had been moved to `FStarLang/FStar/contrib` and remaining files are deprecated, DHDB remains to be ported.
-  - `fst` F* specification
-  - `fs` F# implementation
-  - `ml` OCaml implementation
-
-- `scripts/` Legacy scripts for distribution-management.
-
-- `tests/` Legacy test suit
-
-- `VS/` miTLS Visual Studio solution, for browsing/building the old F# files in `src/tls-fs` --- used to build as reference; currently broken.
-
-
-### Configuring Emacs mode
-
-The Makefile in `src/tls` has the following targets:
-
-- `make <file.fst(i)>-ver` verifies an individual file.
-- `make <file.fst(i)>-in` generates command-line arguments to use with the `--in` flag to verify `<file.fst(i)>`.
-This target can be used to pass appropriate arguments in `fstar-mode.el` using this snippet:
-
-```elisp
-(defun my-fstar-compute-prover-args-using-make ()
-  "Construct arguments to pass to F* by calling make."
-  (with-demoted-errors "Error when constructing arg string: %S"
-    (let* ((fname (file-name-nondirectory buffer-file-name))
-	   (target (concat fname "-in"))
-	   (argstr (car (process-lines "make" "--quiet" target))))
-      (split-string argstr))))
-
-(setq fstar-subp-prover-args #'my-fstar-compute-prover-args-using-make)
-```
-
-If you use F* for other projects that lack a Makefile with a <file.fst(i)-in> target, you may want to use some default list of command-line arguments if `make <file.fst(i)-in>` fails, using, e.g.
-
-```elisp
-(defun my-fstar-compute-prover-args-using-make ()
-  "Construct arguments to pass to F* by calling make."
-  (with-demoted-errors "Error when constructing arg string: %S"
-    (let* ((fname (file-name-nondirectory buffer-file-name))
-	   (target (concat fname "-in"))
-	   (argstr (condition-case nil
-		       (car (process-lines "make" "--quiet" target))
-		     (error "--debug Low"))))
-      (split-string argstr))))
-```
-
-Error messages shown in the mini-buffer are sometimes truncated. It can be convenient to set the debug flag and open the `*Messages*` buffer in another window to see exactly what is going on. To make Emacs follow the end of the `*Messages*` buffer, use this snippet:
-
-```elisp
-(setq fstar-subp-debug t)
-
-(defadvice message (after message-tail activate)
-  "goto point max after a message"
-  (with-current-buffer "*Messages*"
-    (goto-char (point-max))
-    (walk-windows
-     (lambda (window)
-       (if (string-equal (buffer-name (window-buffer window)) "*Messages*")
-           (set-window-point window (point-max))))
-     nil
-     t)))
-```
+miTLS: A verified reference implementation of TLS
+=================================================
+
+This repository contains the new F* development a port of the stable [F# development](https://github.com/mitls/mitls-flex) to F* 0.9.
+
+| Build  | Status |
+| ------------- | ------------- |
+| Windows CI  | <img src="https://msresearch-ext.visualstudio.com/_apis/public/build/definitions/83f09286-c288-4766-89cd-d267b6d93772/12/badge" /> |
+| Windows Nightly  | <img src="https://msresearch-ext.visualstudio.com/_apis/public/build/definitions/83f09286-c288-4766-89cd-d267b6d93772/14/badge" />  |
+| Linux CI  | <img src="https://msresearch-ext.visualstudio.com/_apis/public/build/definitions/83f09286-c288-4766-89cd-d267b6d93772/20/badge" /> |
+| Linux Nightly  | <img src="https://msresearch-ext.visualstudio.com/_apis/public/build/definitions/83f09286-c288-4766-89cd-d267b6d93772/15/badge" /> |
+
+
+### miTLS website
+
+More information on miTLS can be found at www.mitls.org
+More information on F\* can be found at www.fstar-lang.org
+
+### Table of contents
+
+  * [Building](#building)
+  * [Directory structure](#directory-structure)
+  	* [Legacy, imported from mitls-f7](#legacy-imported-from-mitls-f7)
+  * [Configuring Emacs and Atom F* modes](#configuring-emacs-and-atom-f-modes)
+
+### Building
+
+There are two ways to setup your build environment. 
+  * [Using Docker](#docker)
+  * [Custom setup using Cygwin and OCaml](#cygwin)
+
+#### Using Docker 
+Head over to https://github.com/mitls/mitls-fstar/wiki/Setting-up-a-Docker-based-Development-environment for instructions on setup
+
+#### Custom setup using Cygwin and OCaml
+There are numerous dependencies. Follow the instructions at https://github.com/protz/ocaml-installer/wiki to have a working Cygwin and OCaml setup. In addition to `ocamlfind`, `batteries`, `stdint`, and `zarith`, you will also need to install the `sqlite3` package (hint: `opam install sqlite3`). To build CoreCrypto, you will need to install `libssl-dev`. On Windows, you can use `opam depext ssl` to install the appropriate Cygwin packages.
+
+Once this is done, head over to https://github.com/mitls/mitls-fstar/wiki/Development-environment for some tips on our development environment, including how to attain happiness with Cygwin & Git on Windows (hopefully).
+
+After the setup is done, check that you have the F\* compiler set up and running in `.fstar` (`git submodule update --init` if you need to). Note: we do not support the F\# build of F\*; please use the OCaml build of F\* (i.e. `make -C .fstar/src/ocaml-output`).
+
+To verify the current miTLS:
+```
+cd src/tls
+make all-ver -j N
+```
+where N is the number of parallel jobs to use.
+
+To build the mitls.exe command line tool:
+```
+cd src/tls
+make mitls.exe
+./mitls.exe -v 1.2 google.com
+./mitls.exe -s 0.0.0.0 4443 &
+./mitls.exe 127.0.0.1 4443
+```
+
+**Caveats:**
+
+There is a script that detects if the `fstar` module has changed since the last build, and rebuilds it. If you get strange errors, the script may have failed to reubild `fstar` properly, and the main `Makefile` keeps attempting to extract/verify using an outdated version of F\*. In that case, it's a good idea to run `make -C .fstar/src/ocaml-output clean all`.
+
+### Directory structure
+
+- `src/`
+
+ - `tls/` In-progress miTLS port. Most files have been ported and fully typecheck; others only lax typecheck or still need to be ported. The `Makefile` here has two targets that are also part of regression testing:
+
+    - `tls-ver` Full type checking of files that have been ported so far (listed in variable `VERIFY`)
+    - `tls-gen`  OCaml code generation for files ported so far---generated files go to the `output/` directory
+    - `mitls.exe` openssl-like command line client and server. See `mitls.exe --help` for details on how to use the tool.
+
+  - `fstar_proof/` an independent POPL'16 example, verifying the state machine in F* (out of date, JK is the expert; it could be moved to FStarLang/FStar).
+
+  - `mipki/` Antoine's development on certificate management.
+
+  - `flex/` WIP port of flexTLS to F*
+
+#### Legacy, imported from mitls-f7
+
+- `apps/` Sample apps built on top of miTLS --- not ported yet.
+
+- `data/` Persistent data used by miTLS, e.g. the OpenSSL root certificate store; sample chains for the test server; a DH parameter cache --- not ported yet.
+
+- `libs/` miTLS libraries; CoreCrypto and Platform had been moved to `FStarLang/FStar/contrib` and remaining files are deprecated, DHDB remains to be ported.
+  - `fst` F* specification
+  - `fs` F# implementation
+  - `ml` OCaml implementation
+
+- `scripts/` Legacy scripts for distribution-management.
+
+- `tests/` Legacy test suit
+
+- `VS/` miTLS Visual Studio solution, for browsing/building the old F# files in `src/tls-fs` --- used to build as reference; currently broken.
+
+
+### Configuring Emacs mode
+
+The Makefile in `src/tls` has the following targets:
+
+- `make <file.fst(i)>-ver` verifies an individual file.
+- `make <file.fst(i)>-in` generates command-line arguments to use with the `--in` flag to verify `<file.fst(i)>`.
+This target can be used to pass appropriate arguments in `fstar-mode.el` using this snippet:
+
+```elisp
+(defun my-fstar-compute-prover-args-using-make ()
+  "Construct arguments to pass to F* by calling make."
+  (with-demoted-errors "Error when constructing arg string: %S"
+    (let* ((fname (file-name-nondirectory buffer-file-name))
+	   (target (concat fname "-in"))
+	   (argstr (car (process-lines "make" "--quiet" target))))
+      (split-string argstr))))
+
+(setq fstar-subp-prover-args #'my-fstar-compute-prover-args-using-make)
+```
+
+If you use F* for other projects that lack a Makefile with a <file.fst(i)-in> target, you may want to use some default list of command-line arguments if `make <file.fst(i)-in>` fails, using, e.g.
+
+```elisp
+(defun my-fstar-compute-prover-args-using-make ()
+  "Construct arguments to pass to F* by calling make."
+  (with-demoted-errors "Error when constructing arg string: %S"
+    (let* ((fname (file-name-nondirectory buffer-file-name))
+	   (target (concat fname "-in"))
+	   (argstr (condition-case nil
+		       (car (process-lines "make" "--quiet" target))
+		     (error "--debug Low"))))
+      (split-string argstr))))
+```
+
+Error messages shown in the mini-buffer are sometimes truncated. It can be convenient to set the debug flag and open the `*Messages*` buffer in another window to see exactly what is going on. To make Emacs follow the end of the `*Messages*` buffer, use this snippet:
+
+```elisp
+(setq fstar-subp-debug t)
+
+(defadvice message (after message-tail activate)
+  "goto point max after a message"
+  (with-current-buffer "*Messages*"
+    (goto-char (point-max))
+    (walk-windows
+     (lambda (window)
+       (if (string-equal (buffer-name (window-buffer window)) "*Messages*")
+           (set-window-point window (point-max))))
+     nil
+     t)))
+```
diff --git a/VS/miTLS.sln b/VS/miTLS.sln
index 3707fd4..c0b8c3e 100644
--- a/VS/miTLS.sln
+++ b/VS/miTLS.sln
@@ -1,302 +1,302 @@
-﻿
-Microsoft Visual Studio Solution File, Format Version 12.00
-# Visual Studio 2013
-VisualStudioVersion = 12.0.31101.0
-MinimumVisualStudioVersion = 10.0.40219.1
-Project("{F2A71F9B-5D33-465A-A702-920D77279786}") = "tls", "..\src\tls-fs\tls.fsproj", "{7283C0EF-3C40-495D-9969-79CB71B3AACC}"
-EndProject
-Project("{F2A71F9B-5D33-465A-A702-920D77279786}") = "TLSharp", "..\apps\TLSharp\TLSharp.fsproj", "{BDBA21EB-CB44-435B-BF9A-C9393AD2A613}"
-EndProject
-Project("{F2A71F9B-5D33-465A-A702-920D77279786}") = "HttpServer", "..\apps\HttpServer\HttpServer.fsproj", "{A5EFB536-6469-42DA-BBA7-416A65A02F9C}"
-EndProject
-Project("{F2A71F9B-5D33-465A-A702-920D77279786}") = "echo", "..\apps\echo\echo.fsproj", "{4937472B-5D63-4C48-B951-DD896CDDAF97}"
-EndProject
-Project("{F2A71F9B-5D33-465A-A702-920D77279786}") = "CoreCrypto", "..\libs\fs\CoreCrypto\CoreCrypto.fsproj", "{6D4E3F46-DBF9-473B-93BA-58614114AA57}"
-EndProject
-Project("{F2A71F9B-5D33-465A-A702-920D77279786}") = "pwapp", "..\apps\pwapp\pwapp.fsproj", "{8753264A-ACA0-4A11-A46F-CB04F86D7DF8}"
-EndProject
-Project("{F2A71F9B-5D33-465A-A702-920D77279786}") = "DB", "..\libs\fs\DB\DB.fsproj", "{CAD78B05-0ADC-433B-954B-1F31FC6477F6}"
-EndProject
-Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "OpenSSL", "..\libs\fs\OpenSSL\OpenSSL.csproj", "{DB787D27-C33E-4D14-BF2C-B92CBDBF0C54}"
-EndProject
-Project("{F2A71F9B-5D33-465A-A702-920D77279786}") = "Platform", "..\libs\fs\Platform\Platform.fsproj", "{408E6F53-363A-4C58-9808-84A0B526324B}"
-EndProject
-Project("{F2A71F9B-5D33-465A-A702-920D77279786}") = "mihttp", "..\apps\mihttp\mihttp.fsproj", "{F5B505A7-EA88-45CC-A001-46D67077F382}"
-	ProjectSection(ProjectDependencies) = postProject
-		{6D4E3F46-DBF9-473B-93BA-58614114AA57} = {6D4E3F46-DBF9-473B-93BA-58614114AA57}
-		{408E6F53-363A-4C58-9808-84A0B526324B} = {408E6F53-363A-4C58-9808-84A0B526324B}
-		{7283C0EF-3C40-495D-9969-79CB71B3AACC} = {7283C0EF-3C40-495D-9969-79CB71B3AACC}
-	EndProjectSection
-EndProject
-Project("{F2A71F9B-5D33-465A-A702-920D77279786}") = "DHDBManager", "..\libs\fs\DHDBManager\DHDBManager.fsproj", "{2DA9CE8A-C82F-4CF2-8329-79B8A3F19F1F}"
-EndProject
-Global
-	GlobalSection(SolutionConfigurationPlatforms) = preSolution
-		Debug|Any CPU = Debug|Any CPU
-		Debug|Mixed Platforms = Debug|Mixed Platforms
-		Debug|Win32 = Debug|Win32
-		Debug|x64 = Debug|x64
-		Debug|x86 = Debug|x86
-		Ideal|Any CPU = Ideal|Any CPU
-		Ideal|Mixed Platforms = Ideal|Mixed Platforms
-		Ideal|Win32 = Ideal|Win32
-		Ideal|x64 = Ideal|x64
-		Ideal|x86 = Ideal|x86
-		Release|Any CPU = Release|Any CPU
-		Release|Mixed Platforms = Release|Mixed Platforms
-		Release|Win32 = Release|Win32
-		Release|x64 = Release|x64
-		Release|x86 = Release|x86
-	EndGlobalSection
-	GlobalSection(ProjectConfigurationPlatforms) = postSolution
-		{7283C0EF-3C40-495D-9969-79CB71B3AACC}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
-		{7283C0EF-3C40-495D-9969-79CB71B3AACC}.Debug|Any CPU.Build.0 = Debug|Any CPU
-		{7283C0EF-3C40-495D-9969-79CB71B3AACC}.Debug|Mixed Platforms.ActiveCfg = Debug|Any CPU
-		{7283C0EF-3C40-495D-9969-79CB71B3AACC}.Debug|Mixed Platforms.Build.0 = Debug|Any CPU
-		{7283C0EF-3C40-495D-9969-79CB71B3AACC}.Debug|Win32.ActiveCfg = Debug|Any CPU
-		{7283C0EF-3C40-495D-9969-79CB71B3AACC}.Debug|x64.ActiveCfg = Debug|Any CPU
-		{7283C0EF-3C40-495D-9969-79CB71B3AACC}.Debug|x86.ActiveCfg = Debug|Any CPU
-		{7283C0EF-3C40-495D-9969-79CB71B3AACC}.Ideal|Any CPU.ActiveCfg = Ideal|Any CPU
-		{7283C0EF-3C40-495D-9969-79CB71B3AACC}.Ideal|Any CPU.Build.0 = Ideal|Any CPU
-		{7283C0EF-3C40-495D-9969-79CB71B3AACC}.Ideal|Mixed Platforms.ActiveCfg = Ideal|Any CPU
-		{7283C0EF-3C40-495D-9969-79CB71B3AACC}.Ideal|Mixed Platforms.Build.0 = Ideal|Any CPU
-		{7283C0EF-3C40-495D-9969-79CB71B3AACC}.Ideal|Win32.ActiveCfg = Release|Any CPU
-		{7283C0EF-3C40-495D-9969-79CB71B3AACC}.Ideal|x64.ActiveCfg = Release|Any CPU
-		{7283C0EF-3C40-495D-9969-79CB71B3AACC}.Ideal|x86.ActiveCfg = Release|Any CPU
-		{7283C0EF-3C40-495D-9969-79CB71B3AACC}.Release|Any CPU.ActiveCfg = Release|Any CPU
-		{7283C0EF-3C40-495D-9969-79CB71B3AACC}.Release|Any CPU.Build.0 = Release|Any CPU
-		{7283C0EF-3C40-495D-9969-79CB71B3AACC}.Release|Mixed Platforms.ActiveCfg = Release|Any CPU
-		{7283C0EF-3C40-495D-9969-79CB71B3AACC}.Release|Mixed Platforms.Build.0 = Release|Any CPU
-		{7283C0EF-3C40-495D-9969-79CB71B3AACC}.Release|Win32.ActiveCfg = Release|Any CPU
-		{7283C0EF-3C40-495D-9969-79CB71B3AACC}.Release|x64.ActiveCfg = Release|Any CPU
-		{7283C0EF-3C40-495D-9969-79CB71B3AACC}.Release|x86.ActiveCfg = Release|Any CPU
-		{BDBA21EB-CB44-435B-BF9A-C9393AD2A613}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
-		{BDBA21EB-CB44-435B-BF9A-C9393AD2A613}.Debug|Any CPU.Build.0 = Debug|Any CPU
-		{BDBA21EB-CB44-435B-BF9A-C9393AD2A613}.Debug|Mixed Platforms.ActiveCfg = Debug|Any CPU
-		{BDBA21EB-CB44-435B-BF9A-C9393AD2A613}.Debug|Mixed Platforms.Build.0 = Debug|Any CPU
-		{BDBA21EB-CB44-435B-BF9A-C9393AD2A613}.Debug|Win32.ActiveCfg = Debug|Any CPU
-		{BDBA21EB-CB44-435B-BF9A-C9393AD2A613}.Debug|x64.ActiveCfg = Debug|Any CPU
-		{BDBA21EB-CB44-435B-BF9A-C9393AD2A613}.Debug|x86.ActiveCfg = Debug|Any CPU
-		{BDBA21EB-CB44-435B-BF9A-C9393AD2A613}.Ideal|Any CPU.ActiveCfg = Debug|Any CPU
-		{BDBA21EB-CB44-435B-BF9A-C9393AD2A613}.Ideal|Any CPU.Build.0 = Debug|Any CPU
-		{BDBA21EB-CB44-435B-BF9A-C9393AD2A613}.Ideal|Mixed Platforms.ActiveCfg = Release|Any CPU
-		{BDBA21EB-CB44-435B-BF9A-C9393AD2A613}.Ideal|Mixed Platforms.Build.0 = Release|Any CPU
-		{BDBA21EB-CB44-435B-BF9A-C9393AD2A613}.Ideal|Win32.ActiveCfg = Release|Any CPU
-		{BDBA21EB-CB44-435B-BF9A-C9393AD2A613}.Ideal|x64.ActiveCfg = Release|Any CPU
-		{BDBA21EB-CB44-435B-BF9A-C9393AD2A613}.Ideal|x86.ActiveCfg = Release|Any CPU
-		{BDBA21EB-CB44-435B-BF9A-C9393AD2A613}.Release|Any CPU.ActiveCfg = Release|Any CPU
-		{BDBA21EB-CB44-435B-BF9A-C9393AD2A613}.Release|Any CPU.Build.0 = Release|Any CPU
-		{BDBA21EB-CB44-435B-BF9A-C9393AD2A613}.Release|Mixed Platforms.ActiveCfg = Release|Any CPU
-		{BDBA21EB-CB44-435B-BF9A-C9393AD2A613}.Release|Mixed Platforms.Build.0 = Release|Any CPU
-		{BDBA21EB-CB44-435B-BF9A-C9393AD2A613}.Release|Win32.ActiveCfg = Release|Any CPU
-		{BDBA21EB-CB44-435B-BF9A-C9393AD2A613}.Release|x64.ActiveCfg = Release|Any CPU
-		{BDBA21EB-CB44-435B-BF9A-C9393AD2A613}.Release|x86.ActiveCfg = Release|Any CPU
-		{A5EFB536-6469-42DA-BBA7-416A65A02F9C}.Debug|Any CPU.ActiveCfg = Debug|x86
-		{A5EFB536-6469-42DA-BBA7-416A65A02F9C}.Debug|Any CPU.Build.0 = Debug|x86
-		{A5EFB536-6469-42DA-BBA7-416A65A02F9C}.Debug|Mixed Platforms.ActiveCfg = Debug|x86
-		{A5EFB536-6469-42DA-BBA7-416A65A02F9C}.Debug|Mixed Platforms.Build.0 = Debug|x86
-		{A5EFB536-6469-42DA-BBA7-416A65A02F9C}.Debug|Win32.ActiveCfg = Debug|x86
-		{A5EFB536-6469-42DA-BBA7-416A65A02F9C}.Debug|x64.ActiveCfg = Debug|x86
-		{A5EFB536-6469-42DA-BBA7-416A65A02F9C}.Debug|x86.ActiveCfg = Debug|x86
-		{A5EFB536-6469-42DA-BBA7-416A65A02F9C}.Debug|x86.Build.0 = Debug|x86
-		{A5EFB536-6469-42DA-BBA7-416A65A02F9C}.Ideal|Any CPU.ActiveCfg = Debug|x86
-		{A5EFB536-6469-42DA-BBA7-416A65A02F9C}.Ideal|Any CPU.Build.0 = Debug|x86
-		{A5EFB536-6469-42DA-BBA7-416A65A02F9C}.Ideal|Mixed Platforms.ActiveCfg = Release|x86
-		{A5EFB536-6469-42DA-BBA7-416A65A02F9C}.Ideal|Mixed Platforms.Build.0 = Release|x86
-		{A5EFB536-6469-42DA-BBA7-416A65A02F9C}.Ideal|Win32.ActiveCfg = Release|x86
-		{A5EFB536-6469-42DA-BBA7-416A65A02F9C}.Ideal|x64.ActiveCfg = Release|x86
-		{A5EFB536-6469-42DA-BBA7-416A65A02F9C}.Ideal|x86.ActiveCfg = Release|x86
-		{A5EFB536-6469-42DA-BBA7-416A65A02F9C}.Ideal|x86.Build.0 = Release|x86
-		{A5EFB536-6469-42DA-BBA7-416A65A02F9C}.Release|Any CPU.ActiveCfg = Release|x86
-		{A5EFB536-6469-42DA-BBA7-416A65A02F9C}.Release|Any CPU.Build.0 = Release|x86
-		{A5EFB536-6469-42DA-BBA7-416A65A02F9C}.Release|Mixed Platforms.ActiveCfg = Release|x86
-		{A5EFB536-6469-42DA-BBA7-416A65A02F9C}.Release|Mixed Platforms.Build.0 = Release|x86
-		{A5EFB536-6469-42DA-BBA7-416A65A02F9C}.Release|Win32.ActiveCfg = Release|x86
-		{A5EFB536-6469-42DA-BBA7-416A65A02F9C}.Release|x64.ActiveCfg = Release|x86
-		{A5EFB536-6469-42DA-BBA7-416A65A02F9C}.Release|x86.ActiveCfg = Release|x86
-		{A5EFB536-6469-42DA-BBA7-416A65A02F9C}.Release|x86.Build.0 = Release|x86
-		{4937472B-5D63-4C48-B951-DD896CDDAF97}.Debug|Any CPU.ActiveCfg = Debug|x86
-		{4937472B-5D63-4C48-B951-DD896CDDAF97}.Debug|Any CPU.Build.0 = Debug|x86
-		{4937472B-5D63-4C48-B951-DD896CDDAF97}.Debug|Mixed Platforms.ActiveCfg = Debug|x86
-		{4937472B-5D63-4C48-B951-DD896CDDAF97}.Debug|Mixed Platforms.Build.0 = Debug|x86
-		{4937472B-5D63-4C48-B951-DD896CDDAF97}.Debug|Win32.ActiveCfg = Debug|x86
-		{4937472B-5D63-4C48-B951-DD896CDDAF97}.Debug|x64.ActiveCfg = Debug|x86
-		{4937472B-5D63-4C48-B951-DD896CDDAF97}.Debug|x86.ActiveCfg = Debug|x86
-		{4937472B-5D63-4C48-B951-DD896CDDAF97}.Debug|x86.Build.0 = Debug|x86
-		{4937472B-5D63-4C48-B951-DD896CDDAF97}.Ideal|Any CPU.ActiveCfg = Debug|x86
-		{4937472B-5D63-4C48-B951-DD896CDDAF97}.Ideal|Any CPU.Build.0 = Debug|x86
-		{4937472B-5D63-4C48-B951-DD896CDDAF97}.Ideal|Mixed Platforms.ActiveCfg = Release|x86
-		{4937472B-5D63-4C48-B951-DD896CDDAF97}.Ideal|Mixed Platforms.Build.0 = Release|x86
-		{4937472B-5D63-4C48-B951-DD896CDDAF97}.Ideal|Win32.ActiveCfg = Release|x86
-		{4937472B-5D63-4C48-B951-DD896CDDAF97}.Ideal|x64.ActiveCfg = Release|x86
-		{4937472B-5D63-4C48-B951-DD896CDDAF97}.Ideal|x86.ActiveCfg = Release|x86
-		{4937472B-5D63-4C48-B951-DD896CDDAF97}.Ideal|x86.Build.0 = Release|x86
-		{4937472B-5D63-4C48-B951-DD896CDDAF97}.Release|Any CPU.ActiveCfg = Release|x86
-		{4937472B-5D63-4C48-B951-DD896CDDAF97}.Release|Any CPU.Build.0 = Release|x86
-		{4937472B-5D63-4C48-B951-DD896CDDAF97}.Release|Mixed Platforms.ActiveCfg = Release|x86
-		{4937472B-5D63-4C48-B951-DD896CDDAF97}.Release|Mixed Platforms.Build.0 = Release|x86
-		{4937472B-5D63-4C48-B951-DD896CDDAF97}.Release|Win32.ActiveCfg = Release|x86
-		{4937472B-5D63-4C48-B951-DD896CDDAF97}.Release|x64.ActiveCfg = Release|x86
-		{4937472B-5D63-4C48-B951-DD896CDDAF97}.Release|x86.ActiveCfg = Release|x86
-		{4937472B-5D63-4C48-B951-DD896CDDAF97}.Release|x86.Build.0 = Release|x86
-		{6D4E3F46-DBF9-473B-93BA-58614114AA57}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
-		{6D4E3F46-DBF9-473B-93BA-58614114AA57}.Debug|Any CPU.Build.0 = Debug|Any CPU
-		{6D4E3F46-DBF9-473B-93BA-58614114AA57}.Debug|Mixed Platforms.ActiveCfg = Debug|Any CPU
-		{6D4E3F46-DBF9-473B-93BA-58614114AA57}.Debug|Mixed Platforms.Build.0 = Debug|Any CPU
-		{6D4E3F46-DBF9-473B-93BA-58614114AA57}.Debug|Win32.ActiveCfg = Debug|Any CPU
-		{6D4E3F46-DBF9-473B-93BA-58614114AA57}.Debug|x64.ActiveCfg = Debug|Any CPU
-		{6D4E3F46-DBF9-473B-93BA-58614114AA57}.Debug|x86.ActiveCfg = Debug|Any CPU
-		{6D4E3F46-DBF9-473B-93BA-58614114AA57}.Ideal|Any CPU.ActiveCfg = Debug|Any CPU
-		{6D4E3F46-DBF9-473B-93BA-58614114AA57}.Ideal|Any CPU.Build.0 = Debug|Any CPU
-		{6D4E3F46-DBF9-473B-93BA-58614114AA57}.Ideal|Mixed Platforms.ActiveCfg = Release|Any CPU
-		{6D4E3F46-DBF9-473B-93BA-58614114AA57}.Ideal|Mixed Platforms.Build.0 = Release|Any CPU
-		{6D4E3F46-DBF9-473B-93BA-58614114AA57}.Ideal|Win32.ActiveCfg = Release|Any CPU
-		{6D4E3F46-DBF9-473B-93BA-58614114AA57}.Ideal|x64.ActiveCfg = Release|Any CPU
-		{6D4E3F46-DBF9-473B-93BA-58614114AA57}.Ideal|x86.ActiveCfg = Release|Any CPU
-		{6D4E3F46-DBF9-473B-93BA-58614114AA57}.Release|Any CPU.ActiveCfg = Release|Any CPU
-		{6D4E3F46-DBF9-473B-93BA-58614114AA57}.Release|Any CPU.Build.0 = Release|Any CPU
-		{6D4E3F46-DBF9-473B-93BA-58614114AA57}.Release|Mixed Platforms.ActiveCfg = Release|Any CPU
-		{6D4E3F46-DBF9-473B-93BA-58614114AA57}.Release|Mixed Platforms.Build.0 = Release|Any CPU
-		{6D4E3F46-DBF9-473B-93BA-58614114AA57}.Release|Win32.ActiveCfg = Release|Any CPU
-		{6D4E3F46-DBF9-473B-93BA-58614114AA57}.Release|x64.ActiveCfg = Release|Any CPU
-		{6D4E3F46-DBF9-473B-93BA-58614114AA57}.Release|x86.ActiveCfg = Release|Any CPU
-		{8753264A-ACA0-4A11-A46F-CB04F86D7DF8}.Debug|Any CPU.ActiveCfg = Debug|x86
-		{8753264A-ACA0-4A11-A46F-CB04F86D7DF8}.Debug|Any CPU.Build.0 = Debug|x86
-		{8753264A-ACA0-4A11-A46F-CB04F86D7DF8}.Debug|Mixed Platforms.ActiveCfg = Debug|x86
-		{8753264A-ACA0-4A11-A46F-CB04F86D7DF8}.Debug|Mixed Platforms.Build.0 = Debug|x86
-		{8753264A-ACA0-4A11-A46F-CB04F86D7DF8}.Debug|Win32.ActiveCfg = Debug|x86
-		{8753264A-ACA0-4A11-A46F-CB04F86D7DF8}.Debug|x64.ActiveCfg = Debug|x86
-		{8753264A-ACA0-4A11-A46F-CB04F86D7DF8}.Debug|x86.ActiveCfg = Debug|x86
-		{8753264A-ACA0-4A11-A46F-CB04F86D7DF8}.Debug|x86.Build.0 = Debug|x86
-		{8753264A-ACA0-4A11-A46F-CB04F86D7DF8}.Ideal|Any CPU.ActiveCfg = Debug|x86
-		{8753264A-ACA0-4A11-A46F-CB04F86D7DF8}.Ideal|Any CPU.Build.0 = Debug|x86
-		{8753264A-ACA0-4A11-A46F-CB04F86D7DF8}.Ideal|Mixed Platforms.ActiveCfg = Release|x86
-		{8753264A-ACA0-4A11-A46F-CB04F86D7DF8}.Ideal|Mixed Platforms.Build.0 = Release|x86
-		{8753264A-ACA0-4A11-A46F-CB04F86D7DF8}.Ideal|Win32.ActiveCfg = Release|x86
-		{8753264A-ACA0-4A11-A46F-CB04F86D7DF8}.Ideal|x64.ActiveCfg = Release|x86
-		{8753264A-ACA0-4A11-A46F-CB04F86D7DF8}.Ideal|x86.ActiveCfg = Release|x86
-		{8753264A-ACA0-4A11-A46F-CB04F86D7DF8}.Ideal|x86.Build.0 = Release|x86
-		{8753264A-ACA0-4A11-A46F-CB04F86D7DF8}.Release|Any CPU.ActiveCfg = Release|x86
-		{8753264A-ACA0-4A11-A46F-CB04F86D7DF8}.Release|Any CPU.Build.0 = Release|x86
-		{8753264A-ACA0-4A11-A46F-CB04F86D7DF8}.Release|Mixed Platforms.ActiveCfg = Release|x86
-		{8753264A-ACA0-4A11-A46F-CB04F86D7DF8}.Release|Mixed Platforms.Build.0 = Release|x86
-		{8753264A-ACA0-4A11-A46F-CB04F86D7DF8}.Release|Win32.ActiveCfg = Release|x86
-		{8753264A-ACA0-4A11-A46F-CB04F86D7DF8}.Release|x64.ActiveCfg = Release|x86
-		{8753264A-ACA0-4A11-A46F-CB04F86D7DF8}.Release|x86.ActiveCfg = Release|x86
-		{8753264A-ACA0-4A11-A46F-CB04F86D7DF8}.Release|x86.Build.0 = Release|x86
-		{CAD78B05-0ADC-433B-954B-1F31FC6477F6}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
-		{CAD78B05-0ADC-433B-954B-1F31FC6477F6}.Debug|Any CPU.Build.0 = Debug|Any CPU
-		{CAD78B05-0ADC-433B-954B-1F31FC6477F6}.Debug|Mixed Platforms.ActiveCfg = Debug|Any CPU
-		{CAD78B05-0ADC-433B-954B-1F31FC6477F6}.Debug|Mixed Platforms.Build.0 = Debug|Any CPU
-		{CAD78B05-0ADC-433B-954B-1F31FC6477F6}.Debug|Win32.ActiveCfg = Debug|Any CPU
-		{CAD78B05-0ADC-433B-954B-1F31FC6477F6}.Debug|x64.ActiveCfg = Debug|Any CPU
-		{CAD78B05-0ADC-433B-954B-1F31FC6477F6}.Debug|x86.ActiveCfg = Debug|Any CPU
-		{CAD78B05-0ADC-433B-954B-1F31FC6477F6}.Ideal|Any CPU.ActiveCfg = Debug|Any CPU
-		{CAD78B05-0ADC-433B-954B-1F31FC6477F6}.Ideal|Any CPU.Build.0 = Debug|Any CPU
-		{CAD78B05-0ADC-433B-954B-1F31FC6477F6}.Ideal|Mixed Platforms.ActiveCfg = Release|Any CPU
-		{CAD78B05-0ADC-433B-954B-1F31FC6477F6}.Ideal|Mixed Platforms.Build.0 = Release|Any CPU
-		{CAD78B05-0ADC-433B-954B-1F31FC6477F6}.Ideal|Win32.ActiveCfg = Release|Any CPU
-		{CAD78B05-0ADC-433B-954B-1F31FC6477F6}.Ideal|x64.ActiveCfg = Release|Any CPU
-		{CAD78B05-0ADC-433B-954B-1F31FC6477F6}.Ideal|x86.ActiveCfg = Release|Any CPU
-		{CAD78B05-0ADC-433B-954B-1F31FC6477F6}.Release|Any CPU.ActiveCfg = Release|Any CPU
-		{CAD78B05-0ADC-433B-954B-1F31FC6477F6}.Release|Any CPU.Build.0 = Release|Any CPU
-		{CAD78B05-0ADC-433B-954B-1F31FC6477F6}.Release|Mixed Platforms.ActiveCfg = Release|Any CPU
-		{CAD78B05-0ADC-433B-954B-1F31FC6477F6}.Release|Mixed Platforms.Build.0 = Release|Any CPU
-		{CAD78B05-0ADC-433B-954B-1F31FC6477F6}.Release|Win32.ActiveCfg = Release|Any CPU
-		{CAD78B05-0ADC-433B-954B-1F31FC6477F6}.Release|x64.ActiveCfg = Release|Any CPU
-		{CAD78B05-0ADC-433B-954B-1F31FC6477F6}.Release|x86.ActiveCfg = Release|Any CPU
-		{DB787D27-C33E-4D14-BF2C-B92CBDBF0C54}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
-		{DB787D27-C33E-4D14-BF2C-B92CBDBF0C54}.Debug|Any CPU.Build.0 = Debug|Any CPU
-		{DB787D27-C33E-4D14-BF2C-B92CBDBF0C54}.Debug|Mixed Platforms.ActiveCfg = Debug|Any CPU
-		{DB787D27-C33E-4D14-BF2C-B92CBDBF0C54}.Debug|Mixed Platforms.Build.0 = Debug|Any CPU
-		{DB787D27-C33E-4D14-BF2C-B92CBDBF0C54}.Debug|Win32.ActiveCfg = Debug|Any CPU
-		{DB787D27-C33E-4D14-BF2C-B92CBDBF0C54}.Debug|x64.ActiveCfg = Debug|Any CPU
-		{DB787D27-C33E-4D14-BF2C-B92CBDBF0C54}.Debug|x86.ActiveCfg = Debug|Any CPU
-		{DB787D27-C33E-4D14-BF2C-B92CBDBF0C54}.Ideal|Any CPU.ActiveCfg = Debug|Any CPU
-		{DB787D27-C33E-4D14-BF2C-B92CBDBF0C54}.Ideal|Any CPU.Build.0 = Debug|Any CPU
-		{DB787D27-C33E-4D14-BF2C-B92CBDBF0C54}.Ideal|Mixed Platforms.ActiveCfg = Release|Any CPU
-		{DB787D27-C33E-4D14-BF2C-B92CBDBF0C54}.Ideal|Mixed Platforms.Build.0 = Release|Any CPU
-		{DB787D27-C33E-4D14-BF2C-B92CBDBF0C54}.Ideal|Win32.ActiveCfg = Release|Any CPU
-		{DB787D27-C33E-4D14-BF2C-B92CBDBF0C54}.Ideal|x64.ActiveCfg = Release|Any CPU
-		{DB787D27-C33E-4D14-BF2C-B92CBDBF0C54}.Ideal|x86.ActiveCfg = Release|Any CPU
-		{DB787D27-C33E-4D14-BF2C-B92CBDBF0C54}.Release|Any CPU.ActiveCfg = Release|Any CPU
-		{DB787D27-C33E-4D14-BF2C-B92CBDBF0C54}.Release|Any CPU.Build.0 = Release|Any CPU
-		{DB787D27-C33E-4D14-BF2C-B92CBDBF0C54}.Release|Mixed Platforms.ActiveCfg = Release|Any CPU
-		{DB787D27-C33E-4D14-BF2C-B92CBDBF0C54}.Release|Mixed Platforms.Build.0 = Release|Any CPU
-		{DB787D27-C33E-4D14-BF2C-B92CBDBF0C54}.Release|Win32.ActiveCfg = Release|Any CPU
-		{DB787D27-C33E-4D14-BF2C-B92CBDBF0C54}.Release|x64.ActiveCfg = Release|Any CPU
-		{DB787D27-C33E-4D14-BF2C-B92CBDBF0C54}.Release|x86.ActiveCfg = Release|Any CPU
-		{408E6F53-363A-4C58-9808-84A0B526324B}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
-		{408E6F53-363A-4C58-9808-84A0B526324B}.Debug|Any CPU.Build.0 = Debug|Any CPU
-		{408E6F53-363A-4C58-9808-84A0B526324B}.Debug|Mixed Platforms.ActiveCfg = Debug|Any CPU
-		{408E6F53-363A-4C58-9808-84A0B526324B}.Debug|Mixed Platforms.Build.0 = Debug|Any CPU
-		{408E6F53-363A-4C58-9808-84A0B526324B}.Debug|Win32.ActiveCfg = Debug|Any CPU
-		{408E6F53-363A-4C58-9808-84A0B526324B}.Debug|x64.ActiveCfg = Debug|Any CPU
-		{408E6F53-363A-4C58-9808-84A0B526324B}.Debug|x86.ActiveCfg = Release|Any CPU
-		{408E6F53-363A-4C58-9808-84A0B526324B}.Ideal|Any CPU.ActiveCfg = Debug|Any CPU
-		{408E6F53-363A-4C58-9808-84A0B526324B}.Ideal|Any CPU.Build.0 = Debug|Any CPU
-		{408E6F53-363A-4C58-9808-84A0B526324B}.Ideal|Mixed Platforms.ActiveCfg = Release|Any CPU
-		{408E6F53-363A-4C58-9808-84A0B526324B}.Ideal|Mixed Platforms.Build.0 = Release|Any CPU
-		{408E6F53-363A-4C58-9808-84A0B526324B}.Ideal|Win32.ActiveCfg = Release|Any CPU
-		{408E6F53-363A-4C58-9808-84A0B526324B}.Ideal|x64.ActiveCfg = Release|Any CPU
-		{408E6F53-363A-4C58-9808-84A0B526324B}.Ideal|x86.ActiveCfg = Release|Any CPU
-		{408E6F53-363A-4C58-9808-84A0B526324B}.Release|Any CPU.ActiveCfg = Release|Any CPU
-		{408E6F53-363A-4C58-9808-84A0B526324B}.Release|Any CPU.Build.0 = Release|Any CPU
-		{408E6F53-363A-4C58-9808-84A0B526324B}.Release|Mixed Platforms.ActiveCfg = Release|Any CPU
-		{408E6F53-363A-4C58-9808-84A0B526324B}.Release|Mixed Platforms.Build.0 = Release|Any CPU
-		{408E6F53-363A-4C58-9808-84A0B526324B}.Release|Win32.ActiveCfg = Release|Any CPU
-		{408E6F53-363A-4C58-9808-84A0B526324B}.Release|x64.ActiveCfg = Release|Any CPU
-		{408E6F53-363A-4C58-9808-84A0B526324B}.Release|x86.ActiveCfg = Release|Any CPU
-		{F5B505A7-EA88-45CC-A001-46D67077F382}.Debug|Any CPU.ActiveCfg = Debug|x86
-		{F5B505A7-EA88-45CC-A001-46D67077F382}.Debug|Any CPU.Build.0 = Debug|x86
-		{F5B505A7-EA88-45CC-A001-46D67077F382}.Debug|Mixed Platforms.ActiveCfg = Debug|x86
-		{F5B505A7-EA88-45CC-A001-46D67077F382}.Debug|Mixed Platforms.Build.0 = Debug|x86
-		{F5B505A7-EA88-45CC-A001-46D67077F382}.Debug|Win32.ActiveCfg = Debug|x86
-		{F5B505A7-EA88-45CC-A001-46D67077F382}.Debug|x64.ActiveCfg = Debug|x86
-		{F5B505A7-EA88-45CC-A001-46D67077F382}.Debug|x86.ActiveCfg = Debug|x86
-		{F5B505A7-EA88-45CC-A001-46D67077F382}.Debug|x86.Build.0 = Debug|x86
-		{F5B505A7-EA88-45CC-A001-46D67077F382}.Ideal|Any CPU.ActiveCfg = Debug|x86
-		{F5B505A7-EA88-45CC-A001-46D67077F382}.Ideal|Any CPU.Build.0 = Debug|x86
-		{F5B505A7-EA88-45CC-A001-46D67077F382}.Ideal|Mixed Platforms.ActiveCfg = Release|x86
-		{F5B505A7-EA88-45CC-A001-46D67077F382}.Ideal|Mixed Platforms.Build.0 = Release|x86
-		{F5B505A7-EA88-45CC-A001-46D67077F382}.Ideal|Win32.ActiveCfg = Release|x86
-		{F5B505A7-EA88-45CC-A001-46D67077F382}.Ideal|x64.ActiveCfg = Release|x86
-		{F5B505A7-EA88-45CC-A001-46D67077F382}.Ideal|x86.ActiveCfg = Release|x86
-		{F5B505A7-EA88-45CC-A001-46D67077F382}.Ideal|x86.Build.0 = Release|x86
-		{F5B505A7-EA88-45CC-A001-46D67077F382}.Release|Any CPU.ActiveCfg = Release|x86
-		{F5B505A7-EA88-45CC-A001-46D67077F382}.Release|Any CPU.Build.0 = Release|x86
-		{F5B505A7-EA88-45CC-A001-46D67077F382}.Release|Mixed Platforms.ActiveCfg = Release|x86
-		{F5B505A7-EA88-45CC-A001-46D67077F382}.Release|Mixed Platforms.Build.0 = Release|x86
-		{F5B505A7-EA88-45CC-A001-46D67077F382}.Release|Win32.ActiveCfg = Release|x86
-		{F5B505A7-EA88-45CC-A001-46D67077F382}.Release|x64.ActiveCfg = Release|x86
-		{F5B505A7-EA88-45CC-A001-46D67077F382}.Release|x86.ActiveCfg = Release|x86
-		{F5B505A7-EA88-45CC-A001-46D67077F382}.Release|x86.Build.0 = Release|x86
-		{2DA9CE8A-C82F-4CF2-8329-79B8A3F19F1F}.Debug|Any CPU.ActiveCfg = Debug|x86
-		{2DA9CE8A-C82F-4CF2-8329-79B8A3F19F1F}.Debug|Mixed Platforms.ActiveCfg = Debug|x86
-		{2DA9CE8A-C82F-4CF2-8329-79B8A3F19F1F}.Debug|Mixed Platforms.Build.0 = Debug|x86
-		{2DA9CE8A-C82F-4CF2-8329-79B8A3F19F1F}.Debug|Win32.ActiveCfg = Debug|x86
-		{2DA9CE8A-C82F-4CF2-8329-79B8A3F19F1F}.Debug|Win32.Build.0 = Debug|x86
-		{2DA9CE8A-C82F-4CF2-8329-79B8A3F19F1F}.Debug|x64.ActiveCfg = Debug|x86
-		{2DA9CE8A-C82F-4CF2-8329-79B8A3F19F1F}.Debug|x86.ActiveCfg = Debug|x86
-		{2DA9CE8A-C82F-4CF2-8329-79B8A3F19F1F}.Debug|x86.Build.0 = Debug|x86
-		{2DA9CE8A-C82F-4CF2-8329-79B8A3F19F1F}.Ideal|Any CPU.ActiveCfg = Release|x86
-		{2DA9CE8A-C82F-4CF2-8329-79B8A3F19F1F}.Ideal|Mixed Platforms.ActiveCfg = Release|x86
-		{2DA9CE8A-C82F-4CF2-8329-79B8A3F19F1F}.Ideal|Mixed Platforms.Build.0 = Release|x86
-		{2DA9CE8A-C82F-4CF2-8329-79B8A3F19F1F}.Ideal|Win32.ActiveCfg = Release|x86
-		{2DA9CE8A-C82F-4CF2-8329-79B8A3F19F1F}.Ideal|Win32.Build.0 = Release|x86
-		{2DA9CE8A-C82F-4CF2-8329-79B8A3F19F1F}.Ideal|x64.ActiveCfg = Release|x86
-		{2DA9CE8A-C82F-4CF2-8329-79B8A3F19F1F}.Ideal|x86.ActiveCfg = Release|x86
-		{2DA9CE8A-C82F-4CF2-8329-79B8A3F19F1F}.Ideal|x86.Build.0 = Release|x86
-		{2DA9CE8A-C82F-4CF2-8329-79B8A3F19F1F}.Release|Any CPU.ActiveCfg = Release|x86
-		{2DA9CE8A-C82F-4CF2-8329-79B8A3F19F1F}.Release|Mixed Platforms.ActiveCfg = Release|x86
-		{2DA9CE8A-C82F-4CF2-8329-79B8A3F19F1F}.Release|Mixed Platforms.Build.0 = Release|x86
-		{2DA9CE8A-C82F-4CF2-8329-79B8A3F19F1F}.Release|Win32.ActiveCfg = Release|x86
-		{2DA9CE8A-C82F-4CF2-8329-79B8A3F19F1F}.Release|Win32.Build.0 = Release|x86
-		{2DA9CE8A-C82F-4CF2-8329-79B8A3F19F1F}.Release|x64.ActiveCfg = Release|x86
-		{2DA9CE8A-C82F-4CF2-8329-79B8A3F19F1F}.Release|x86.ActiveCfg = Release|x86
-		{2DA9CE8A-C82F-4CF2-8329-79B8A3F19F1F}.Release|x86.Build.0 = Release|x86
-	EndGlobalSection
-	GlobalSection(SolutionProperties) = preSolution
-		HideSolutionNode = FALSE
-	EndGlobalSection
-EndGlobal
+﻿
+Microsoft Visual Studio Solution File, Format Version 12.00
+# Visual Studio 2013
+VisualStudioVersion = 12.0.31101.0
+MinimumVisualStudioVersion = 10.0.40219.1
+Project("{F2A71F9B-5D33-465A-A702-920D77279786}") = "tls", "..\src\tls-fs\tls.fsproj", "{7283C0EF-3C40-495D-9969-79CB71B3AACC}"
+EndProject
+Project("{F2A71F9B-5D33-465A-A702-920D77279786}") = "TLSharp", "..\apps\TLSharp\TLSharp.fsproj", "{BDBA21EB-CB44-435B-BF9A-C9393AD2A613}"
+EndProject
+Project("{F2A71F9B-5D33-465A-A702-920D77279786}") = "HttpServer", "..\apps\HttpServer\HttpServer.fsproj", "{A5EFB536-6469-42DA-BBA7-416A65A02F9C}"
+EndProject
+Project("{F2A71F9B-5D33-465A-A702-920D77279786}") = "echo", "..\apps\echo\echo.fsproj", "{4937472B-5D63-4C48-B951-DD896CDDAF97}"
+EndProject
+Project("{F2A71F9B-5D33-465A-A702-920D77279786}") = "CoreCrypto", "..\libs\fs\CoreCrypto\CoreCrypto.fsproj", "{6D4E3F46-DBF9-473B-93BA-58614114AA57}"
+EndProject
+Project("{F2A71F9B-5D33-465A-A702-920D77279786}") = "pwapp", "..\apps\pwapp\pwapp.fsproj", "{8753264A-ACA0-4A11-A46F-CB04F86D7DF8}"
+EndProject
+Project("{F2A71F9B-5D33-465A-A702-920D77279786}") = "DB", "..\libs\fs\DB\DB.fsproj", "{CAD78B05-0ADC-433B-954B-1F31FC6477F6}"
+EndProject
+Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "OpenSSL", "..\libs\fs\OpenSSL\OpenSSL.csproj", "{DB787D27-C33E-4D14-BF2C-B92CBDBF0C54}"
+EndProject
+Project("{F2A71F9B-5D33-465A-A702-920D77279786}") = "Platform", "..\libs\fs\Platform\Platform.fsproj", "{408E6F53-363A-4C58-9808-84A0B526324B}"
+EndProject
+Project("{F2A71F9B-5D33-465A-A702-920D77279786}") = "mihttp", "..\apps\mihttp\mihttp.fsproj", "{F5B505A7-EA88-45CC-A001-46D67077F382}"
+	ProjectSection(ProjectDependencies) = postProject
+		{6D4E3F46-DBF9-473B-93BA-58614114AA57} = {6D4E3F46-DBF9-473B-93BA-58614114AA57}
+		{408E6F53-363A-4C58-9808-84A0B526324B} = {408E6F53-363A-4C58-9808-84A0B526324B}
+		{7283C0EF-3C40-495D-9969-79CB71B3AACC} = {7283C0EF-3C40-495D-9969-79CB71B3AACC}
+	EndProjectSection
+EndProject
+Project("{F2A71F9B-5D33-465A-A702-920D77279786}") = "DHDBManager", "..\libs\fs\DHDBManager\DHDBManager.fsproj", "{2DA9CE8A-C82F-4CF2-8329-79B8A3F19F1F}"
+EndProject
+Global
+	GlobalSection(SolutionConfigurationPlatforms) = preSolution
+		Debug|Any CPU = Debug|Any CPU
+		Debug|Mixed Platforms = Debug|Mixed Platforms
+		Debug|Win32 = Debug|Win32
+		Debug|x64 = Debug|x64
+		Debug|x86 = Debug|x86
+		Ideal|Any CPU = Ideal|Any CPU
+		Ideal|Mixed Platforms = Ideal|Mixed Platforms
+		Ideal|Win32 = Ideal|Win32
+		Ideal|x64 = Ideal|x64
+		Ideal|x86 = Ideal|x86
+		Release|Any CPU = Release|Any CPU
+		Release|Mixed Platforms = Release|Mixed Platforms
+		Release|Win32 = Release|Win32
+		Release|x64 = Release|x64
+		Release|x86 = Release|x86
+	EndGlobalSection
+	GlobalSection(ProjectConfigurationPlatforms) = postSolution
+		{7283C0EF-3C40-495D-9969-79CB71B3AACC}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
+		{7283C0EF-3C40-495D-9969-79CB71B3AACC}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{7283C0EF-3C40-495D-9969-79CB71B3AACC}.Debug|Mixed Platforms.ActiveCfg = Debug|Any CPU
+		{7283C0EF-3C40-495D-9969-79CB71B3AACC}.Debug|Mixed Platforms.Build.0 = Debug|Any CPU
+		{7283C0EF-3C40-495D-9969-79CB71B3AACC}.Debug|Win32.ActiveCfg = Debug|Any CPU
+		{7283C0EF-3C40-495D-9969-79CB71B3AACC}.Debug|x64.ActiveCfg = Debug|Any CPU
+		{7283C0EF-3C40-495D-9969-79CB71B3AACC}.Debug|x86.ActiveCfg = Debug|Any CPU
+		{7283C0EF-3C40-495D-9969-79CB71B3AACC}.Ideal|Any CPU.ActiveCfg = Ideal|Any CPU
+		{7283C0EF-3C40-495D-9969-79CB71B3AACC}.Ideal|Any CPU.Build.0 = Ideal|Any CPU
+		{7283C0EF-3C40-495D-9969-79CB71B3AACC}.Ideal|Mixed Platforms.ActiveCfg = Ideal|Any CPU
+		{7283C0EF-3C40-495D-9969-79CB71B3AACC}.Ideal|Mixed Platforms.Build.0 = Ideal|Any CPU
+		{7283C0EF-3C40-495D-9969-79CB71B3AACC}.Ideal|Win32.ActiveCfg = Release|Any CPU
+		{7283C0EF-3C40-495D-9969-79CB71B3AACC}.Ideal|x64.ActiveCfg = Release|Any CPU
+		{7283C0EF-3C40-495D-9969-79CB71B3AACC}.Ideal|x86.ActiveCfg = Release|Any CPU
+		{7283C0EF-3C40-495D-9969-79CB71B3AACC}.Release|Any CPU.ActiveCfg = Release|Any CPU
+		{7283C0EF-3C40-495D-9969-79CB71B3AACC}.Release|Any CPU.Build.0 = Release|Any CPU
+		{7283C0EF-3C40-495D-9969-79CB71B3AACC}.Release|Mixed Platforms.ActiveCfg = Release|Any CPU
+		{7283C0EF-3C40-495D-9969-79CB71B3AACC}.Release|Mixed Platforms.Build.0 = Release|Any CPU
+		{7283C0EF-3C40-495D-9969-79CB71B3AACC}.Release|Win32.ActiveCfg = Release|Any CPU
+		{7283C0EF-3C40-495D-9969-79CB71B3AACC}.Release|x64.ActiveCfg = Release|Any CPU
+		{7283C0EF-3C40-495D-9969-79CB71B3AACC}.Release|x86.ActiveCfg = Release|Any CPU
+		{BDBA21EB-CB44-435B-BF9A-C9393AD2A613}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
+		{BDBA21EB-CB44-435B-BF9A-C9393AD2A613}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{BDBA21EB-CB44-435B-BF9A-C9393AD2A613}.Debug|Mixed Platforms.ActiveCfg = Debug|Any CPU
+		{BDBA21EB-CB44-435B-BF9A-C9393AD2A613}.Debug|Mixed Platforms.Build.0 = Debug|Any CPU
+		{BDBA21EB-CB44-435B-BF9A-C9393AD2A613}.Debug|Win32.ActiveCfg = Debug|Any CPU
+		{BDBA21EB-CB44-435B-BF9A-C9393AD2A613}.Debug|x64.ActiveCfg = Debug|Any CPU
+		{BDBA21EB-CB44-435B-BF9A-C9393AD2A613}.Debug|x86.ActiveCfg = Debug|Any CPU
+		{BDBA21EB-CB44-435B-BF9A-C9393AD2A613}.Ideal|Any CPU.ActiveCfg = Debug|Any CPU
+		{BDBA21EB-CB44-435B-BF9A-C9393AD2A613}.Ideal|Any CPU.Build.0 = Debug|Any CPU
+		{BDBA21EB-CB44-435B-BF9A-C9393AD2A613}.Ideal|Mixed Platforms.ActiveCfg = Release|Any CPU
+		{BDBA21EB-CB44-435B-BF9A-C9393AD2A613}.Ideal|Mixed Platforms.Build.0 = Release|Any CPU
+		{BDBA21EB-CB44-435B-BF9A-C9393AD2A613}.Ideal|Win32.ActiveCfg = Release|Any CPU
+		{BDBA21EB-CB44-435B-BF9A-C9393AD2A613}.Ideal|x64.ActiveCfg = Release|Any CPU
+		{BDBA21EB-CB44-435B-BF9A-C9393AD2A613}.Ideal|x86.ActiveCfg = Release|Any CPU
+		{BDBA21EB-CB44-435B-BF9A-C9393AD2A613}.Release|Any CPU.ActiveCfg = Release|Any CPU
+		{BDBA21EB-CB44-435B-BF9A-C9393AD2A613}.Release|Any CPU.Build.0 = Release|Any CPU
+		{BDBA21EB-CB44-435B-BF9A-C9393AD2A613}.Release|Mixed Platforms.ActiveCfg = Release|Any CPU
+		{BDBA21EB-CB44-435B-BF9A-C9393AD2A613}.Release|Mixed Platforms.Build.0 = Release|Any CPU
+		{BDBA21EB-CB44-435B-BF9A-C9393AD2A613}.Release|Win32.ActiveCfg = Release|Any CPU
+		{BDBA21EB-CB44-435B-BF9A-C9393AD2A613}.Release|x64.ActiveCfg = Release|Any CPU
+		{BDBA21EB-CB44-435B-BF9A-C9393AD2A613}.Release|x86.ActiveCfg = Release|Any CPU
+		{A5EFB536-6469-42DA-BBA7-416A65A02F9C}.Debug|Any CPU.ActiveCfg = Debug|x86
+		{A5EFB536-6469-42DA-BBA7-416A65A02F9C}.Debug|Any CPU.Build.0 = Debug|x86
+		{A5EFB536-6469-42DA-BBA7-416A65A02F9C}.Debug|Mixed Platforms.ActiveCfg = Debug|x86
+		{A5EFB536-6469-42DA-BBA7-416A65A02F9C}.Debug|Mixed Platforms.Build.0 = Debug|x86
+		{A5EFB536-6469-42DA-BBA7-416A65A02F9C}.Debug|Win32.ActiveCfg = Debug|x86
+		{A5EFB536-6469-42DA-BBA7-416A65A02F9C}.Debug|x64.ActiveCfg = Debug|x86
+		{A5EFB536-6469-42DA-BBA7-416A65A02F9C}.Debug|x86.ActiveCfg = Debug|x86
+		{A5EFB536-6469-42DA-BBA7-416A65A02F9C}.Debug|x86.Build.0 = Debug|x86
+		{A5EFB536-6469-42DA-BBA7-416A65A02F9C}.Ideal|Any CPU.ActiveCfg = Debug|x86
+		{A5EFB536-6469-42DA-BBA7-416A65A02F9C}.Ideal|Any CPU.Build.0 = Debug|x86
+		{A5EFB536-6469-42DA-BBA7-416A65A02F9C}.Ideal|Mixed Platforms.ActiveCfg = Release|x86
+		{A5EFB536-6469-42DA-BBA7-416A65A02F9C}.Ideal|Mixed Platforms.Build.0 = Release|x86
+		{A5EFB536-6469-42DA-BBA7-416A65A02F9C}.Ideal|Win32.ActiveCfg = Release|x86
+		{A5EFB536-6469-42DA-BBA7-416A65A02F9C}.Ideal|x64.ActiveCfg = Release|x86
+		{A5EFB536-6469-42DA-BBA7-416A65A02F9C}.Ideal|x86.ActiveCfg = Release|x86
+		{A5EFB536-6469-42DA-BBA7-416A65A02F9C}.Ideal|x86.Build.0 = Release|x86
+		{A5EFB536-6469-42DA-BBA7-416A65A02F9C}.Release|Any CPU.ActiveCfg = Release|x86
+		{A5EFB536-6469-42DA-BBA7-416A65A02F9C}.Release|Any CPU.Build.0 = Release|x86
+		{A5EFB536-6469-42DA-BBA7-416A65A02F9C}.Release|Mixed Platforms.ActiveCfg = Release|x86
+		{A5EFB536-6469-42DA-BBA7-416A65A02F9C}.Release|Mixed Platforms.Build.0 = Release|x86
+		{A5EFB536-6469-42DA-BBA7-416A65A02F9C}.Release|Win32.ActiveCfg = Release|x86
+		{A5EFB536-6469-42DA-BBA7-416A65A02F9C}.Release|x64.ActiveCfg = Release|x86
+		{A5EFB536-6469-42DA-BBA7-416A65A02F9C}.Release|x86.ActiveCfg = Release|x86
+		{A5EFB536-6469-42DA-BBA7-416A65A02F9C}.Release|x86.Build.0 = Release|x86
+		{4937472B-5D63-4C48-B951-DD896CDDAF97}.Debug|Any CPU.ActiveCfg = Debug|x86
+		{4937472B-5D63-4C48-B951-DD896CDDAF97}.Debug|Any CPU.Build.0 = Debug|x86
+		{4937472B-5D63-4C48-B951-DD896CDDAF97}.Debug|Mixed Platforms.ActiveCfg = Debug|x86
+		{4937472B-5D63-4C48-B951-DD896CDDAF97}.Debug|Mixed Platforms.Build.0 = Debug|x86
+		{4937472B-5D63-4C48-B951-DD896CDDAF97}.Debug|Win32.ActiveCfg = Debug|x86
+		{4937472B-5D63-4C48-B951-DD896CDDAF97}.Debug|x64.ActiveCfg = Debug|x86
+		{4937472B-5D63-4C48-B951-DD896CDDAF97}.Debug|x86.ActiveCfg = Debug|x86
+		{4937472B-5D63-4C48-B951-DD896CDDAF97}.Debug|x86.Build.0 = Debug|x86
+		{4937472B-5D63-4C48-B951-DD896CDDAF97}.Ideal|Any CPU.ActiveCfg = Debug|x86
+		{4937472B-5D63-4C48-B951-DD896CDDAF97}.Ideal|Any CPU.Build.0 = Debug|x86
+		{4937472B-5D63-4C48-B951-DD896CDDAF97}.Ideal|Mixed Platforms.ActiveCfg = Release|x86
+		{4937472B-5D63-4C48-B951-DD896CDDAF97}.Ideal|Mixed Platforms.Build.0 = Release|x86
+		{4937472B-5D63-4C48-B951-DD896CDDAF97}.Ideal|Win32.ActiveCfg = Release|x86
+		{4937472B-5D63-4C48-B951-DD896CDDAF97}.Ideal|x64.ActiveCfg = Release|x86
+		{4937472B-5D63-4C48-B951-DD896CDDAF97}.Ideal|x86.ActiveCfg = Release|x86
+		{4937472B-5D63-4C48-B951-DD896CDDAF97}.Ideal|x86.Build.0 = Release|x86
+		{4937472B-5D63-4C48-B951-DD896CDDAF97}.Release|Any CPU.ActiveCfg = Release|x86
+		{4937472B-5D63-4C48-B951-DD896CDDAF97}.Release|Any CPU.Build.0 = Release|x86
+		{4937472B-5D63-4C48-B951-DD896CDDAF97}.Release|Mixed Platforms.ActiveCfg = Release|x86
+		{4937472B-5D63-4C48-B951-DD896CDDAF97}.Release|Mixed Platforms.Build.0 = Release|x86
+		{4937472B-5D63-4C48-B951-DD896CDDAF97}.Release|Win32.ActiveCfg = Release|x86
+		{4937472B-5D63-4C48-B951-DD896CDDAF97}.Release|x64.ActiveCfg = Release|x86
+		{4937472B-5D63-4C48-B951-DD896CDDAF97}.Release|x86.ActiveCfg = Release|x86
+		{4937472B-5D63-4C48-B951-DD896CDDAF97}.Release|x86.Build.0 = Release|x86
+		{6D4E3F46-DBF9-473B-93BA-58614114AA57}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
+		{6D4E3F46-DBF9-473B-93BA-58614114AA57}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{6D4E3F46-DBF9-473B-93BA-58614114AA57}.Debug|Mixed Platforms.ActiveCfg = Debug|Any CPU
+		{6D4E3F46-DBF9-473B-93BA-58614114AA57}.Debug|Mixed Platforms.Build.0 = Debug|Any CPU
+		{6D4E3F46-DBF9-473B-93BA-58614114AA57}.Debug|Win32.ActiveCfg = Debug|Any CPU
+		{6D4E3F46-DBF9-473B-93BA-58614114AA57}.Debug|x64.ActiveCfg = Debug|Any CPU
+		{6D4E3F46-DBF9-473B-93BA-58614114AA57}.Debug|x86.ActiveCfg = Debug|Any CPU
+		{6D4E3F46-DBF9-473B-93BA-58614114AA57}.Ideal|Any CPU.ActiveCfg = Debug|Any CPU
+		{6D4E3F46-DBF9-473B-93BA-58614114AA57}.Ideal|Any CPU.Build.0 = Debug|Any CPU
+		{6D4E3F46-DBF9-473B-93BA-58614114AA57}.Ideal|Mixed Platforms.ActiveCfg = Release|Any CPU
+		{6D4E3F46-DBF9-473B-93BA-58614114AA57}.Ideal|Mixed Platforms.Build.0 = Release|Any CPU
+		{6D4E3F46-DBF9-473B-93BA-58614114AA57}.Ideal|Win32.ActiveCfg = Release|Any CPU
+		{6D4E3F46-DBF9-473B-93BA-58614114AA57}.Ideal|x64.ActiveCfg = Release|Any CPU
+		{6D4E3F46-DBF9-473B-93BA-58614114AA57}.Ideal|x86.ActiveCfg = Release|Any CPU
+		{6D4E3F46-DBF9-473B-93BA-58614114AA57}.Release|Any CPU.ActiveCfg = Release|Any CPU
+		{6D4E3F46-DBF9-473B-93BA-58614114AA57}.Release|Any CPU.Build.0 = Release|Any CPU
+		{6D4E3F46-DBF9-473B-93BA-58614114AA57}.Release|Mixed Platforms.ActiveCfg = Release|Any CPU
+		{6D4E3F46-DBF9-473B-93BA-58614114AA57}.Release|Mixed Platforms.Build.0 = Release|Any CPU
+		{6D4E3F46-DBF9-473B-93BA-58614114AA57}.Release|Win32.ActiveCfg = Release|Any CPU
+		{6D4E3F46-DBF9-473B-93BA-58614114AA57}.Release|x64.ActiveCfg = Release|Any CPU
+		{6D4E3F46-DBF9-473B-93BA-58614114AA57}.Release|x86.ActiveCfg = Release|Any CPU
+		{8753264A-ACA0-4A11-A46F-CB04F86D7DF8}.Debug|Any CPU.ActiveCfg = Debug|x86
+		{8753264A-ACA0-4A11-A46F-CB04F86D7DF8}.Debug|Any CPU.Build.0 = Debug|x86
+		{8753264A-ACA0-4A11-A46F-CB04F86D7DF8}.Debug|Mixed Platforms.ActiveCfg = Debug|x86
+		{8753264A-ACA0-4A11-A46F-CB04F86D7DF8}.Debug|Mixed Platforms.Build.0 = Debug|x86
+		{8753264A-ACA0-4A11-A46F-CB04F86D7DF8}.Debug|Win32.ActiveCfg = Debug|x86
+		{8753264A-ACA0-4A11-A46F-CB04F86D7DF8}.Debug|x64.ActiveCfg = Debug|x86
+		{8753264A-ACA0-4A11-A46F-CB04F86D7DF8}.Debug|x86.ActiveCfg = Debug|x86
+		{8753264A-ACA0-4A11-A46F-CB04F86D7DF8}.Debug|x86.Build.0 = Debug|x86
+		{8753264A-ACA0-4A11-A46F-CB04F86D7DF8}.Ideal|Any CPU.ActiveCfg = Debug|x86
+		{8753264A-ACA0-4A11-A46F-CB04F86D7DF8}.Ideal|Any CPU.Build.0 = Debug|x86
+		{8753264A-ACA0-4A11-A46F-CB04F86D7DF8}.Ideal|Mixed Platforms.ActiveCfg = Release|x86
+		{8753264A-ACA0-4A11-A46F-CB04F86D7DF8}.Ideal|Mixed Platforms.Build.0 = Release|x86
+		{8753264A-ACA0-4A11-A46F-CB04F86D7DF8}.Ideal|Win32.ActiveCfg = Release|x86
+		{8753264A-ACA0-4A11-A46F-CB04F86D7DF8}.Ideal|x64.ActiveCfg = Release|x86
+		{8753264A-ACA0-4A11-A46F-CB04F86D7DF8}.Ideal|x86.ActiveCfg = Release|x86
+		{8753264A-ACA0-4A11-A46F-CB04F86D7DF8}.Ideal|x86.Build.0 = Release|x86
+		{8753264A-ACA0-4A11-A46F-CB04F86D7DF8}.Release|Any CPU.ActiveCfg = Release|x86
+		{8753264A-ACA0-4A11-A46F-CB04F86D7DF8}.Release|Any CPU.Build.0 = Release|x86
+		{8753264A-ACA0-4A11-A46F-CB04F86D7DF8}.Release|Mixed Platforms.ActiveCfg = Release|x86
+		{8753264A-ACA0-4A11-A46F-CB04F86D7DF8}.Release|Mixed Platforms.Build.0 = Release|x86
+		{8753264A-ACA0-4A11-A46F-CB04F86D7DF8}.Release|Win32.ActiveCfg = Release|x86
+		{8753264A-ACA0-4A11-A46F-CB04F86D7DF8}.Release|x64.ActiveCfg = Release|x86
+		{8753264A-ACA0-4A11-A46F-CB04F86D7DF8}.Release|x86.ActiveCfg = Release|x86
+		{8753264A-ACA0-4A11-A46F-CB04F86D7DF8}.Release|x86.Build.0 = Release|x86
+		{CAD78B05-0ADC-433B-954B-1F31FC6477F6}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
+		{CAD78B05-0ADC-433B-954B-1F31FC6477F6}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{CAD78B05-0ADC-433B-954B-1F31FC6477F6}.Debug|Mixed Platforms.ActiveCfg = Debug|Any CPU
+		{CAD78B05-0ADC-433B-954B-1F31FC6477F6}.Debug|Mixed Platforms.Build.0 = Debug|Any CPU
+		{CAD78B05-0ADC-433B-954B-1F31FC6477F6}.Debug|Win32.ActiveCfg = Debug|Any CPU
+		{CAD78B05-0ADC-433B-954B-1F31FC6477F6}.Debug|x64.ActiveCfg = Debug|Any CPU
+		{CAD78B05-0ADC-433B-954B-1F31FC6477F6}.Debug|x86.ActiveCfg = Debug|Any CPU
+		{CAD78B05-0ADC-433B-954B-1F31FC6477F6}.Ideal|Any CPU.ActiveCfg = Debug|Any CPU
+		{CAD78B05-0ADC-433B-954B-1F31FC6477F6}.Ideal|Any CPU.Build.0 = Debug|Any CPU
+		{CAD78B05-0ADC-433B-954B-1F31FC6477F6}.Ideal|Mixed Platforms.ActiveCfg = Release|Any CPU
+		{CAD78B05-0ADC-433B-954B-1F31FC6477F6}.Ideal|Mixed Platforms.Build.0 = Release|Any CPU
+		{CAD78B05-0ADC-433B-954B-1F31FC6477F6}.Ideal|Win32.ActiveCfg = Release|Any CPU
+		{CAD78B05-0ADC-433B-954B-1F31FC6477F6}.Ideal|x64.ActiveCfg = Release|Any CPU
+		{CAD78B05-0ADC-433B-954B-1F31FC6477F6}.Ideal|x86.ActiveCfg = Release|Any CPU
+		{CAD78B05-0ADC-433B-954B-1F31FC6477F6}.Release|Any CPU.ActiveCfg = Release|Any CPU
+		{CAD78B05-0ADC-433B-954B-1F31FC6477F6}.Release|Any CPU.Build.0 = Release|Any CPU
+		{CAD78B05-0ADC-433B-954B-1F31FC6477F6}.Release|Mixed Platforms.ActiveCfg = Release|Any CPU
+		{CAD78B05-0ADC-433B-954B-1F31FC6477F6}.Release|Mixed Platforms.Build.0 = Release|Any CPU
+		{CAD78B05-0ADC-433B-954B-1F31FC6477F6}.Release|Win32.ActiveCfg = Release|Any CPU
+		{CAD78B05-0ADC-433B-954B-1F31FC6477F6}.Release|x64.ActiveCfg = Release|Any CPU
+		{CAD78B05-0ADC-433B-954B-1F31FC6477F6}.Release|x86.ActiveCfg = Release|Any CPU
+		{DB787D27-C33E-4D14-BF2C-B92CBDBF0C54}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
+		{DB787D27-C33E-4D14-BF2C-B92CBDBF0C54}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{DB787D27-C33E-4D14-BF2C-B92CBDBF0C54}.Debug|Mixed Platforms.ActiveCfg = Debug|Any CPU
+		{DB787D27-C33E-4D14-BF2C-B92CBDBF0C54}.Debug|Mixed Platforms.Build.0 = Debug|Any CPU
+		{DB787D27-C33E-4D14-BF2C-B92CBDBF0C54}.Debug|Win32.ActiveCfg = Debug|Any CPU
+		{DB787D27-C33E-4D14-BF2C-B92CBDBF0C54}.Debug|x64.ActiveCfg = Debug|Any CPU
+		{DB787D27-C33E-4D14-BF2C-B92CBDBF0C54}.Debug|x86.ActiveCfg = Debug|Any CPU
+		{DB787D27-C33E-4D14-BF2C-B92CBDBF0C54}.Ideal|Any CPU.ActiveCfg = Debug|Any CPU
+		{DB787D27-C33E-4D14-BF2C-B92CBDBF0C54}.Ideal|Any CPU.Build.0 = Debug|Any CPU
+		{DB787D27-C33E-4D14-BF2C-B92CBDBF0C54}.Ideal|Mixed Platforms.ActiveCfg = Release|Any CPU
+		{DB787D27-C33E-4D14-BF2C-B92CBDBF0C54}.Ideal|Mixed Platforms.Build.0 = Release|Any CPU
+		{DB787D27-C33E-4D14-BF2C-B92CBDBF0C54}.Ideal|Win32.ActiveCfg = Release|Any CPU
+		{DB787D27-C33E-4D14-BF2C-B92CBDBF0C54}.Ideal|x64.ActiveCfg = Release|Any CPU
+		{DB787D27-C33E-4D14-BF2C-B92CBDBF0C54}.Ideal|x86.ActiveCfg = Release|Any CPU
+		{DB787D27-C33E-4D14-BF2C-B92CBDBF0C54}.Release|Any CPU.ActiveCfg = Release|Any CPU
+		{DB787D27-C33E-4D14-BF2C-B92CBDBF0C54}.Release|Any CPU.Build.0 = Release|Any CPU
+		{DB787D27-C33E-4D14-BF2C-B92CBDBF0C54}.Release|Mixed Platforms.ActiveCfg = Release|Any CPU
+		{DB787D27-C33E-4D14-BF2C-B92CBDBF0C54}.Release|Mixed Platforms.Build.0 = Release|Any CPU
+		{DB787D27-C33E-4D14-BF2C-B92CBDBF0C54}.Release|Win32.ActiveCfg = Release|Any CPU
+		{DB787D27-C33E-4D14-BF2C-B92CBDBF0C54}.Release|x64.ActiveCfg = Release|Any CPU
+		{DB787D27-C33E-4D14-BF2C-B92CBDBF0C54}.Release|x86.ActiveCfg = Release|Any CPU
+		{408E6F53-363A-4C58-9808-84A0B526324B}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
+		{408E6F53-363A-4C58-9808-84A0B526324B}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{408E6F53-363A-4C58-9808-84A0B526324B}.Debug|Mixed Platforms.ActiveCfg = Debug|Any CPU
+		{408E6F53-363A-4C58-9808-84A0B526324B}.Debug|Mixed Platforms.Build.0 = Debug|Any CPU
+		{408E6F53-363A-4C58-9808-84A0B526324B}.Debug|Win32.ActiveCfg = Debug|Any CPU
+		{408E6F53-363A-4C58-9808-84A0B526324B}.Debug|x64.ActiveCfg = Debug|Any CPU
+		{408E6F53-363A-4C58-9808-84A0B526324B}.Debug|x86.ActiveCfg = Release|Any CPU
+		{408E6F53-363A-4C58-9808-84A0B526324B}.Ideal|Any CPU.ActiveCfg = Debug|Any CPU
+		{408E6F53-363A-4C58-9808-84A0B526324B}.Ideal|Any CPU.Build.0 = Debug|Any CPU
+		{408E6F53-363A-4C58-9808-84A0B526324B}.Ideal|Mixed Platforms.ActiveCfg = Release|Any CPU
+		{408E6F53-363A-4C58-9808-84A0B526324B}.Ideal|Mixed Platforms.Build.0 = Release|Any CPU
+		{408E6F53-363A-4C58-9808-84A0B526324B}.Ideal|Win32.ActiveCfg = Release|Any CPU
+		{408E6F53-363A-4C58-9808-84A0B526324B}.Ideal|x64.ActiveCfg = Release|Any CPU
+		{408E6F53-363A-4C58-9808-84A0B526324B}.Ideal|x86.ActiveCfg = Release|Any CPU
+		{408E6F53-363A-4C58-9808-84A0B526324B}.Release|Any CPU.ActiveCfg = Release|Any CPU
+		{408E6F53-363A-4C58-9808-84A0B526324B}.Release|Any CPU.Build.0 = Release|Any CPU
+		{408E6F53-363A-4C58-9808-84A0B526324B}.Release|Mixed Platforms.ActiveCfg = Release|Any CPU
+		{408E6F53-363A-4C58-9808-84A0B526324B}.Release|Mixed Platforms.Build.0 = Release|Any CPU
+		{408E6F53-363A-4C58-9808-84A0B526324B}.Release|Win32.ActiveCfg = Release|Any CPU
+		{408E6F53-363A-4C58-9808-84A0B526324B}.Release|x64.ActiveCfg = Release|Any CPU
+		{408E6F53-363A-4C58-9808-84A0B526324B}.Release|x86.ActiveCfg = Release|Any CPU
+		{F5B505A7-EA88-45CC-A001-46D67077F382}.Debug|Any CPU.ActiveCfg = Debug|x86
+		{F5B505A7-EA88-45CC-A001-46D67077F382}.Debug|Any CPU.Build.0 = Debug|x86
+		{F5B505A7-EA88-45CC-A001-46D67077F382}.Debug|Mixed Platforms.ActiveCfg = Debug|x86
+		{F5B505A7-EA88-45CC-A001-46D67077F382}.Debug|Mixed Platforms.Build.0 = Debug|x86
+		{F5B505A7-EA88-45CC-A001-46D67077F382}.Debug|Win32.ActiveCfg = Debug|x86
+		{F5B505A7-EA88-45CC-A001-46D67077F382}.Debug|x64.ActiveCfg = Debug|x86
+		{F5B505A7-EA88-45CC-A001-46D67077F382}.Debug|x86.ActiveCfg = Debug|x86
+		{F5B505A7-EA88-45CC-A001-46D67077F382}.Debug|x86.Build.0 = Debug|x86
+		{F5B505A7-EA88-45CC-A001-46D67077F382}.Ideal|Any CPU.ActiveCfg = Debug|x86
+		{F5B505A7-EA88-45CC-A001-46D67077F382}.Ideal|Any CPU.Build.0 = Debug|x86
+		{F5B505A7-EA88-45CC-A001-46D67077F382}.Ideal|Mixed Platforms.ActiveCfg = Release|x86
+		{F5B505A7-EA88-45CC-A001-46D67077F382}.Ideal|Mixed Platforms.Build.0 = Release|x86
+		{F5B505A7-EA88-45CC-A001-46D67077F382}.Ideal|Win32.ActiveCfg = Release|x86
+		{F5B505A7-EA88-45CC-A001-46D67077F382}.Ideal|x64.ActiveCfg = Release|x86
+		{F5B505A7-EA88-45CC-A001-46D67077F382}.Ideal|x86.ActiveCfg = Release|x86
+		{F5B505A7-EA88-45CC-A001-46D67077F382}.Ideal|x86.Build.0 = Release|x86
+		{F5B505A7-EA88-45CC-A001-46D67077F382}.Release|Any CPU.ActiveCfg = Release|x86
+		{F5B505A7-EA88-45CC-A001-46D67077F382}.Release|Any CPU.Build.0 = Release|x86
+		{F5B505A7-EA88-45CC-A001-46D67077F382}.Release|Mixed Platforms.ActiveCfg = Release|x86
+		{F5B505A7-EA88-45CC-A001-46D67077F382}.Release|Mixed Platforms.Build.0 = Release|x86
+		{F5B505A7-EA88-45CC-A001-46D67077F382}.Release|Win32.ActiveCfg = Release|x86
+		{F5B505A7-EA88-45CC-A001-46D67077F382}.Release|x64.ActiveCfg = Release|x86
+		{F5B505A7-EA88-45CC-A001-46D67077F382}.Release|x86.ActiveCfg = Release|x86
+		{F5B505A7-EA88-45CC-A001-46D67077F382}.Release|x86.Build.0 = Release|x86
+		{2DA9CE8A-C82F-4CF2-8329-79B8A3F19F1F}.Debug|Any CPU.ActiveCfg = Debug|x86
+		{2DA9CE8A-C82F-4CF2-8329-79B8A3F19F1F}.Debug|Mixed Platforms.ActiveCfg = Debug|x86
+		{2DA9CE8A-C82F-4CF2-8329-79B8A3F19F1F}.Debug|Mixed Platforms.Build.0 = Debug|x86
+		{2DA9CE8A-C82F-4CF2-8329-79B8A3F19F1F}.Debug|Win32.ActiveCfg = Debug|x86
+		{2DA9CE8A-C82F-4CF2-8329-79B8A3F19F1F}.Debug|Win32.Build.0 = Debug|x86
+		{2DA9CE8A-C82F-4CF2-8329-79B8A3F19F1F}.Debug|x64.ActiveCfg = Debug|x86
+		{2DA9CE8A-C82F-4CF2-8329-79B8A3F19F1F}.Debug|x86.ActiveCfg = Debug|x86
+		{2DA9CE8A-C82F-4CF2-8329-79B8A3F19F1F}.Debug|x86.Build.0 = Debug|x86
+		{2DA9CE8A-C82F-4CF2-8329-79B8A3F19F1F}.Ideal|Any CPU.ActiveCfg = Release|x86
+		{2DA9CE8A-C82F-4CF2-8329-79B8A3F19F1F}.Ideal|Mixed Platforms.ActiveCfg = Release|x86
+		{2DA9CE8A-C82F-4CF2-8329-79B8A3F19F1F}.Ideal|Mixed Platforms.Build.0 = Release|x86
+		{2DA9CE8A-C82F-4CF2-8329-79B8A3F19F1F}.Ideal|Win32.ActiveCfg = Release|x86
+		{2DA9CE8A-C82F-4CF2-8329-79B8A3F19F1F}.Ideal|Win32.Build.0 = Release|x86
+		{2DA9CE8A-C82F-4CF2-8329-79B8A3F19F1F}.Ideal|x64.ActiveCfg = Release|x86
+		{2DA9CE8A-C82F-4CF2-8329-79B8A3F19F1F}.Ideal|x86.ActiveCfg = Release|x86
+		{2DA9CE8A-C82F-4CF2-8329-79B8A3F19F1F}.Ideal|x86.Build.0 = Release|x86
+		{2DA9CE8A-C82F-4CF2-8329-79B8A3F19F1F}.Release|Any CPU.ActiveCfg = Release|x86
+		{2DA9CE8A-C82F-4CF2-8329-79B8A3F19F1F}.Release|Mixed Platforms.ActiveCfg = Release|x86
+		{2DA9CE8A-C82F-4CF2-8329-79B8A3F19F1F}.Release|Mixed Platforms.Build.0 = Release|x86
+		{2DA9CE8A-C82F-4CF2-8329-79B8A3F19F1F}.Release|Win32.ActiveCfg = Release|x86
+		{2DA9CE8A-C82F-4CF2-8329-79B8A3F19F1F}.Release|Win32.Build.0 = Release|x86
+		{2DA9CE8A-C82F-4CF2-8329-79B8A3F19F1F}.Release|x64.ActiveCfg = Release|x86
+		{2DA9CE8A-C82F-4CF2-8329-79B8A3F19F1F}.Release|x86.ActiveCfg = Release|x86
+		{2DA9CE8A-C82F-4CF2-8329-79B8A3F19F1F}.Release|x86.Build.0 = Release|x86
+	EndGlobalSection
+	GlobalSection(SolutionProperties) = preSolution
+		HideSolutionNode = FALSE
+	EndGlobalSection
+EndGlobal
diff --git a/VS/miTLS.userprefs b/VS/miTLS.userprefs
index 795dfe5..ad63f43 100644
--- a/VS/miTLS.userprefs
+++ b/VS/miTLS.userprefs
@@ -1,8 +1,8 @@
-﻿<Properties StartupItem="../src/tls/tls.fsproj">
-  <MonoDevelop.Ide.Workspace ActiveConfiguration="Debug" />
-  <MonoDevelop.Ide.Workbench />
-  <MonoDevelop.Ide.DebuggingService.Breakpoints>
-    <BreakpointStore />
-  </MonoDevelop.Ide.DebuggingService.Breakpoints>
-  <MonoDevelop.Ide.DebuggingService.PinnedWatches />
+﻿<Properties StartupItem="../src/tls/tls.fsproj">
+  <MonoDevelop.Ide.Workspace ActiveConfiguration="Debug" />
+  <MonoDevelop.Ide.Workbench />
+  <MonoDevelop.Ide.DebuggingService.Breakpoints>
+    <BreakpointStore />
+  </MonoDevelop.Ide.DebuggingService.Breakpoints>
+  <MonoDevelop.Ide.DebuggingService.PinnedWatches />
</Properties>
\ No newline at end of file
diff --git a/apps/HttpServer/App.config b/apps/HttpServer/App.config
index 6c301d3..f051fa4 100644
--- a/apps/HttpServer/App.config
+++ b/apps/HttpServer/App.config
@@ -1,6 +1,6 @@
-<?xml version="1.0" encoding="utf-8"?>
-<configuration>
-  <startup>
-    <supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.0" />
-  </startup>
+<?xml version="1.0" encoding="utf-8"?>
+<configuration>
+  <startup>
+    <supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.0" />
+  </startup>
</configuration>
\ No newline at end of file
diff --git a/apps/HttpServer/packages.config b/apps/HttpServer/packages.config
index 222102e..5a2e696 100644
--- a/apps/HttpServer/packages.config
+++ b/apps/HttpServer/packages.config
@@ -1,8 +1,8 @@
-﻿<?xml version="1.0" encoding="utf-8"?>
-<packages>
-  <package id="FSPowerPack.Community" version="3.0.0.0" targetFramework="net40" />
-  <package id="FSPowerPack.Core.Community" version="3.0.0.0" targetFramework="net40" />
-  <package id="FSPowerPack.Linq.Community" version="3.0.0.0" targetFramework="net40" />
-  <package id="FSPowerPack.Metadata.Community" version="3.0.0.0" targetFramework="net40" />
-  <package id="FSPowerPack.Parallel.Seq.Community" version="3.0.0.0" targetFramework="net40" />
+﻿<?xml version="1.0" encoding="utf-8"?>
+<packages>
+  <package id="FSPowerPack.Community" version="3.0.0.0" targetFramework="net40" />
+  <package id="FSPowerPack.Core.Community" version="3.0.0.0" targetFramework="net40" />
+  <package id="FSPowerPack.Linq.Community" version="3.0.0.0" targetFramework="net40" />
+  <package id="FSPowerPack.Metadata.Community" version="3.0.0.0" targetFramework="net40" />
+  <package id="FSPowerPack.Parallel.Seq.Community" version="3.0.0.0" targetFramework="net40" />
</packages>
\ No newline at end of file
diff --git a/apps/HttpServer/wsgiapp.py b/apps/HttpServer/wsgiapp.py
index faaf767..f402718 100644
--- a/apps/HttpServer/wsgiapp.py
+++ b/apps/HttpServer/wsgiapp.py
@@ -1,22 +1,22 @@
-﻿# ------------------------------------------------------------------------
-class BaseApplication(object):
-    @staticmethod
-    def create():
-        def application(environ, start_response):
-            start_response("200 OK", [])
-            return ['Hello World!']
-        return application
-
-# ------------------------------------------------------------------------
-class miTLSApplication(object):
-    @staticmethod
-    def create():
-        import sys, os, mitls, pyramid.paster as paster
-
-        inifile = '/opt/mitls/bridge/development.ini'
-        env     = paster.bootstrap(inifile)
-
-        return env['app']
-
-# ------------------------------------------------------------------------
-main = miTLSApplication.create
+﻿# ------------------------------------------------------------------------
+class BaseApplication(object):
+    @staticmethod
+    def create():
+        def application(environ, start_response):
+            start_response("200 OK", [])
+            return ['Hello World!']
+        return application
+
+# ------------------------------------------------------------------------
+class miTLSApplication(object):
+    @staticmethod
+    def create():
+        import sys, os, mitls, pyramid.paster as paster
+
+        inifile = '/opt/mitls/bridge/development.ini'
+        env     = paster.bootstrap(inifile)
+
+        return env['app']
+
+# ------------------------------------------------------------------------
+main = miTLSApplication.create
diff --git a/apps/HttpServer/wsgibridge.py b/apps/HttpServer/wsgibridge.py
index 9a95061..9073b68 100644
--- a/apps/HttpServer/wsgibridge.py
+++ b/apps/HttpServer/wsgibridge.py
@@ -1,183 +1,183 @@
-﻿# ------------------------------------------------------------------------
-import sys, os, socket, urlparse
-import System as DotNet
-
-# ------------------------------------------------------------------------
-__all__ = []
-
-# ------------------------------------------------------------------------
-def iterfun(f, pred):
-    while True:
-        x = f()
-        if pred(x): yield x
-        else: break
-
-# ------------------------------------------------------------------------
-class WSGIErrorStream(object):
-    def __init__(self, basestream):
-        assert isinstance(basestream, DotNet.IO.TextWriter)
-        self._basestream = basestream
-
-    def write(self, s):
-        self._basestream.Write(s)
-
-    def writelines(self, seq):
-        # Not that [writelines] must NOT add CRLF
-        for x in seq:
-            self._basestream.Write(x)
-
-    def flush(self):
-        self._basestream.Flush()
-
-# ------------------------------------------------------------------------
-class WSGIInputStream(object):
-    def __init__(self, basestream):
-        assert isinstance(basestream, DotNet.IO.Stream)
-        assert basestream.CanRead
-        enc = DotNet.Text.Encoding.GetEncoding("iso-8859-1")
-        self._basestream = basestream
-        self._txtstream  = DotNet.IO.StreamReader(basestream, enc)
-
-    basestream = property(lambda self : self._basestream)
-
-    def read(self, size = -1):
-        if size < 0:
-            return self._txtstream.ReadToEnd()
-
-    def readline(self, size = -1):
-        # In WSGI 1.0, [size] can be omitted
-        aout = self._txtstream.ReadLine()
-        if aout is None:
-            return ''
-        return aout + DotNet.Environment.NewLine
-
-    def readlines(self, size = -1):
-        # In WSGI 1.0, [size] can be omitted
-        return list(self)
-
-    def __iter__(self):
-        return iterfun(self.readline, lambda x : len(x) != 0)
-
-# ------------------------------------------------------------------------
-class WSGIOutputStream(object):
-    def __init__(self, basestream):
-        assert isinstance(basestream, DotNet.IO.Stream)
-        assert basestream.CanWrite
-        enc = DotNet.Text.Encoding.GetEncoding("iso-8859-1")
-        self._basestream = basestream
-        self._txtstream  = DotNet.IO.StreamWriter(basestream, enc)
-
-    basestream = property(lambda self : self._basestream)
-
-    def write(self, data):
-        self._txtstream.Write(data)
-
-    def flush(self):
-        self._txtstream.Flush()
-
-    def close(self):
-        try:
-            self._txtstream .Close()
-            self._basestream.Close()
-        finally:
-            self._txtstream  = None
-            self._basestream = None
-
-# ------------------------------------------------------------------------
-class Bridge(object):
-    def __init__(self, config):
-        self._url     = urlparse.urlparse(config['url'])
-        self._input   = WSGIInputStream(config['input'])
-        self._output  = WSGIOutputStream(config['output'])
-        self._error   = WSGIErrorStream(config['error'])
-        self._request = config['request']
-        self._sinfo   = config['sinfo']
-        self._headers = None
-        self._hdsent  = False
-
-    url     = property(lambda self : self._url)
-    input   = property(lambda self : self._input)
-    output  = property(lambda self : self._output)
-    error   = property(lambda self : self._error)
-    request = property(lambda self : self._request)
-
-    def send_headers(self):
-        if self._headers is None:
-            raise AssertionError("send_headers() without headers set")
-        if self._hdsent:
-            raise AssertionError("send_headers() with headers already sent")
-
-        status, headers = self._headers
-        try:
-            self._output.write('%s %s\r\n' % ("HTTP/1.0", status,))
-            for hk, hv in headers:
-                self._output.write('%s: %s\r\n' % (hk, hv))
-            self._output.write('\r\n')
-            self._output.flush()
-        finally:
-            self._hdsent = True
-
-    def write(self, data):
-        if self._headers is None:
-            raise AssertionError("write() before start_response()")
-        if not self._hdsent:
-            self.send_headers()
-        self._output.write(data)
-        self._output.flush()
-
-    def start_response(self, status, headers, exc_info=None):
-        if exc_info is None:
-            if self._headers is not None:
-                raise AssertionError("start_response(exc_info=None) called a 2nd time")
-        elif self._hdsent:
-            raise exc_info[1].with_traceback(exc_info[2])
-
-        self._headers = (status, headers[:])
-        # TODO: check headers here
-        return self.write
-
-    def __call__(self, application):
-        path = [x for x in self.url.path.split('/') if x]
-        if path[:1] != ['wsgi']:
-            raise AssertionError("path does not start with `/wsgi'")
-
-        environ = dict(os.environ.items())
-        environ['wsgi.input'  ]       = self._input
-        environ['wsgi.errors' ]       = self._error
-        environ['wsgi.version']       = (1, 0)
-        environ['wsgi.multithreaded'] = True
-        environ['wsgi.multiprocess' ] = False
-        environ['wsgi.run_once'     ] = True
-        environ['wsgi.url_scheme'   ] = self.url.scheme
-        environ['mitls.sinfo']        = self._sinfo
-        environ['HTTPS']              = '1' if self.url.scheme == 'https' else '0'
-
-        environ['REQUEST_METHOD']  = self._request.mthod
-        environ['SCRIPT_NAME']     = '/%s' % path[0]
-        environ['PATH_INFO']       = '/%s' % '/'.join(path[1:])
-        environ['CONTENT_TYPE']    = self._request.headers.GetDfl("Content-Type", "")
-        environ['CONTENT_LENGTH']  = self._request.headers.GetDfl("Content-Length", "")
-        environ['QUERY_STRING']    = self.url.query
-        environ['SERVER_NAME']     = self.url.hostname
-        environ['SERVER_PORT']     = self.url.port or socket.getservbyname(self.url.scheme, 'tcp')
-        environ['SERVER_PROTOCOL'] = 'HTTP/1.0'
-
-        result = application(environ, self.start_response)
-        try:
-            for data in result:
-                if data:
-                    self.write(data)
-            if not self._hdsent:
-                self.write('')
-        finally:
-            if hasattr(result, 'close'):
-                result.close()
-
-    def __repr__(self):
-        fields = ['url', 'input', 'output', 'error']
-        fields = ["%s = %r" % (k, getattr(self, k)) for k in fields]
-        return "Bridge[%s]" % ", ".join(fields)
-
-# ------------------------------------------------------------------------
-def _entry(config, application):
-    Bridge(config)(application)
+﻿# ------------------------------------------------------------------------
+import sys, os, socket, urlparse
+import System as DotNet
+
+# ------------------------------------------------------------------------
+__all__ = []
+
+# ------------------------------------------------------------------------
+def iterfun(f, pred):
+    while True:
+        x = f()
+        if pred(x): yield x
+        else: break
+
+# ------------------------------------------------------------------------
+class WSGIErrorStream(object):
+    def __init__(self, basestream):
+        assert isinstance(basestream, DotNet.IO.TextWriter)
+        self._basestream = basestream
+
+    def write(self, s):
+        self._basestream.Write(s)
+
+    def writelines(self, seq):
+        # Not that [writelines] must NOT add CRLF
+        for x in seq:
+            self._basestream.Write(x)
+
+    def flush(self):
+        self._basestream.Flush()
+
+# ------------------------------------------------------------------------
+class WSGIInputStream(object):
+    def __init__(self, basestream):
+        assert isinstance(basestream, DotNet.IO.Stream)
+        assert basestream.CanRead
+        enc = DotNet.Text.Encoding.GetEncoding("iso-8859-1")
+        self._basestream = basestream
+        self._txtstream  = DotNet.IO.StreamReader(basestream, enc)
+
+    basestream = property(lambda self : self._basestream)
+
+    def read(self, size = -1):
+        if size < 0:
+            return self._txtstream.ReadToEnd()
+
+    def readline(self, size = -1):
+        # In WSGI 1.0, [size] can be omitted
+        aout = self._txtstream.ReadLine()
+        if aout is None:
+            return ''
+        return aout + DotNet.Environment.NewLine
+
+    def readlines(self, size = -1):
+        # In WSGI 1.0, [size] can be omitted
+        return list(self)
+
+    def __iter__(self):
+        return iterfun(self.readline, lambda x : len(x) != 0)
+
+# ------------------------------------------------------------------------
+class WSGIOutputStream(object):
+    def __init__(self, basestream):
+        assert isinstance(basestream, DotNet.IO.Stream)
+        assert basestream.CanWrite
+        enc = DotNet.Text.Encoding.GetEncoding("iso-8859-1")
+        self._basestream = basestream
+        self._txtstream  = DotNet.IO.StreamWriter(basestream, enc)
+
+    basestream = property(lambda self : self._basestream)
+
+    def write(self, data):
+        self._txtstream.Write(data)
+
+    def flush(self):
+        self._txtstream.Flush()
+
+    def close(self):
+        try:
+            self._txtstream .Close()
+            self._basestream.Close()
+        finally:
+            self._txtstream  = None
+            self._basestream = None
+
+# ------------------------------------------------------------------------
+class Bridge(object):
+    def __init__(self, config):
+        self._url     = urlparse.urlparse(config['url'])
+        self._input   = WSGIInputStream(config['input'])
+        self._output  = WSGIOutputStream(config['output'])
+        self._error   = WSGIErrorStream(config['error'])
+        self._request = config['request']
+        self._sinfo   = config['sinfo']
+        self._headers = None
+        self._hdsent  = False
+
+    url     = property(lambda self : self._url)
+    input   = property(lambda self : self._input)
+    output  = property(lambda self : self._output)
+    error   = property(lambda self : self._error)
+    request = property(lambda self : self._request)
+
+    def send_headers(self):
+        if self._headers is None:
+            raise AssertionError("send_headers() without headers set")
+        if self._hdsent:
+            raise AssertionError("send_headers() with headers already sent")
+
+        status, headers = self._headers
+        try:
+            self._output.write('%s %s\r\n' % ("HTTP/1.0", status,))
+            for hk, hv in headers:
+                self._output.write('%s: %s\r\n' % (hk, hv))
+            self._output.write('\r\n')
+            self._output.flush()
+        finally:
+            self._hdsent = True
+
+    def write(self, data):
+        if self._headers is None:
+            raise AssertionError("write() before start_response()")
+        if not self._hdsent:
+            self.send_headers()
+        self._output.write(data)
+        self._output.flush()
+
+    def start_response(self, status, headers, exc_info=None):
+        if exc_info is None:
+            if self._headers is not None:
+                raise AssertionError("start_response(exc_info=None) called a 2nd time")
+        elif self._hdsent:
+            raise exc_info[1].with_traceback(exc_info[2])
+
+        self._headers = (status, headers[:])
+        # TODO: check headers here
+        return self.write
+
+    def __call__(self, application):
+        path = [x for x in self.url.path.split('/') if x]
+        if path[:1] != ['wsgi']:
+            raise AssertionError("path does not start with `/wsgi'")
+
+        environ = dict(os.environ.items())
+        environ['wsgi.input'  ]       = self._input
+        environ['wsgi.errors' ]       = self._error
+        environ['wsgi.version']       = (1, 0)
+        environ['wsgi.multithreaded'] = True
+        environ['wsgi.multiprocess' ] = False
+        environ['wsgi.run_once'     ] = True
+        environ['wsgi.url_scheme'   ] = self.url.scheme
+        environ['mitls.sinfo']        = self._sinfo
+        environ['HTTPS']              = '1' if self.url.scheme == 'https' else '0'
+
+        environ['REQUEST_METHOD']  = self._request.mthod
+        environ['SCRIPT_NAME']     = '/%s' % path[0]
+        environ['PATH_INFO']       = '/%s' % '/'.join(path[1:])
+        environ['CONTENT_TYPE']    = self._request.headers.GetDfl("Content-Type", "")
+        environ['CONTENT_LENGTH']  = self._request.headers.GetDfl("Content-Length", "")
+        environ['QUERY_STRING']    = self.url.query
+        environ['SERVER_NAME']     = self.url.hostname
+        environ['SERVER_PORT']     = self.url.port or socket.getservbyname(self.url.scheme, 'tcp')
+        environ['SERVER_PROTOCOL'] = 'HTTP/1.0'
+
+        result = application(environ, self.start_response)
+        try:
+            for data in result:
+                if data:
+                    self.write(data)
+            if not self._hdsent:
+                self.write('')
+        finally:
+            if hasattr(result, 'close'):
+                result.close()
+
+    def __repr__(self):
+        fields = ['url', 'input', 'output', 'error']
+        fields = ["%s = %r" % (k, getattr(self, k)) for k in fields]
+        return "Bridge[%s]" % ", ".join(fields)
+
+# ------------------------------------------------------------------------
+def _entry(config, application):
+    Bridge(config)(application)
diff --git a/apps/echo/App.config b/apps/echo/App.config
index 6c301d3..f051fa4 100644
--- a/apps/echo/App.config
+++ b/apps/echo/App.config
@@ -1,6 +1,6 @@
-<?xml version="1.0" encoding="utf-8"?>
-<configuration>
-  <startup>
-    <supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.0" />
-  </startup>
+<?xml version="1.0" encoding="utf-8"?>
+<configuration>
+  <startup>
+    <supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.0" />
+  </startup>
</configuration>
\ No newline at end of file
diff --git a/apps/echo/packages.config b/apps/echo/packages.config
index 222102e..5a2e696 100644
--- a/apps/echo/packages.config
+++ b/apps/echo/packages.config
@@ -1,8 +1,8 @@
-﻿<?xml version="1.0" encoding="utf-8"?>
-<packages>
-  <package id="FSPowerPack.Community" version="3.0.0.0" targetFramework="net40" />
-  <package id="FSPowerPack.Core.Community" version="3.0.0.0" targetFramework="net40" />
-  <package id="FSPowerPack.Linq.Community" version="3.0.0.0" targetFramework="net40" />
-  <package id="FSPowerPack.Metadata.Community" version="3.0.0.0" targetFramework="net40" />
-  <package id="FSPowerPack.Parallel.Seq.Community" version="3.0.0.0" targetFramework="net40" />
+﻿<?xml version="1.0" encoding="utf-8"?>
+<packages>
+  <package id="FSPowerPack.Community" version="3.0.0.0" targetFramework="net40" />
+  <package id="FSPowerPack.Core.Community" version="3.0.0.0" targetFramework="net40" />
+  <package id="FSPowerPack.Linq.Community" version="3.0.0.0" targetFramework="net40" />
+  <package id="FSPowerPack.Metadata.Community" version="3.0.0.0" targetFramework="net40" />
+  <package id="FSPowerPack.Parallel.Seq.Community" version="3.0.0.0" targetFramework="net40" />
</packages>
\ No newline at end of file
diff --git a/apps/mihttp/genrules b/apps/mihttp/genrules
index 59d4ca1..ce0df14 100644
--- a/apps/mihttp/genrules
+++ b/apps/mihttp/genrules
@@ -1,251 +1,251 @@
-#! /usr/bin/env python
-
-# --------------------------------------------------------------------
-import sys, os, re, time, json, xml.etree.ElementTree as etree
-
-# --------------------------------------------------------------------
-MSBUILD = 'http://schemas.microsoft.com/developer/msbuild/2003'
-
-FS7DEFAULT = [
-  'MiHTTPChannel',
-]
-
-MKHEADER = '''\
-include ../Makefile.config
-
-lib7      = ../../../lib/fs7-interfaces/
-libperv   = $(lib7)pervasives.fs7 $(lib7)tuples.fs7
-lperv     = -pervasives $(lib7)pervasives.fs7 -tuples $(lib7)tuples.fs7
-libfs7    = $(lib7)pi.fs7 $(lib7)formulas.fs7
-f7timeout = 5
-f7defs    = avoid verify ideal
-
-# removed --verbose for automated testing
-override f7flags += \\
-  -timeout $(f7timeout) $(patsubst %%,--define %%,$(f7defs)) \\
-  -nokindcheck $(lperv) $(libfs7)
-
-.PHONY: default clean check-xunit regen
-
--include Makefile.tc7
-
-# default verification targets
-default: %(fs7default)s
-
-clean:
-	rm -f *.smp *.tc7 *.why
-
-regen:
-	./genrules \\
-	  -I ../Platform/Platform.fsproj \\
-	  -I ../CoreCrypto/CoreCrypto.fsproj \\
-	  -I ../lib/lib.fsproj \\
-	    mihttp.fsproj > Makefile.mihttp.$$ \\
-	|| { rm -f Makefile.mihttp.$$; false; }
-	mv Makefile.mihttp.$$ Makefile
-''' % dict(fs7default = ' '.join([x + '.tc7' for x in FS7DEFAULT]))
-
-# --------------------------------------------------------------------
-class Object(object):
-    def __init__(self, **kw):
-        self.__dict__.update(kw)
-
-# --------------------------------------------------------------------
-def _options(args):
-    from optparse import OptionParser
-
-    parser = OptionParser(usage = "%prog: [options] file.fsproj...")
-    parser.add_option('-m', '--mode',
-                      action  = 'store',
-                      default = 'makefile',
-                      metavar = 'MODE',
-                      help    = 'set output mode to MODE')
-    parser.add_option('-I', None,
-                      dest    = 'includes',
-                      action  = 'append',
-                      default = [],
-                      metavar = 'FSPROJ',
-                      help    = 'Add project contents for FSI/FS7')
-
-    options, args = parser.parse_args(args)
-
-    if len(args) != 1:
-        parser.error('exactly one .fsproj file must be given')
-
-    options.fsproj = args[0]
-
-    return options
-
-# --------------------------------------------------------------------
-class TopoSortCycleException(Exception):
-    pass
-
-def topoiter1(D, k, sk, seen = None):
-    seen = dict() if seen is None else seen
-    flag = seen.get(k, 0)
-
-    if flag < 0:
-        print [k] + sk
-        raise TopoSortCycleException()
-    if flag > 0:
-        return
-
-    seen[k] = -1
-    for x in D.get(k, []):
-        for y in topoiter1(D, x, [k] + sk, seen):
-            yield y
-    seen[k] = 1
-
-    yield k
-
-def topoiter(D):
-    seen = dict()
-    for k in D.iterkeys():
-        for x in topoiter1(D, k, [], seen):
-            yield x
-
-# --------------------------------------------------------------------
-class FS7Deps(object):
-    @staticmethod
-    def by_parsing(fsproj, included):
-        srcfiles = dict()
-        lowfiles = []
-        infsproj = []
-
-        for (i, fsp) in enumerate(included + [fsproj]):
-            wext   = ['.fs', '.fs7', '.fsi'] if i == len(included) else ['.fs7', '.fsi']
-            files  = os.listdir(fsp.srcdir)
-            files  = [x for x in files if \
-                         os.path.splitext(x)[1].lower() in  wext]
-            files  = [(x.lower(), (x, fsp.srcdir)) for x in files]
-            srcfiles.update(dict(files))
-            lowfiles.extend([x.lower() for x in fsp.files])
-            if i == len(included):
-                infsproj.extend([x.lower() for x in fsp.files])
-
-        alldeps  = dict()
-
-        for (i, fsp) in enumerate(included + [fsproj]):
-            wext = ['.fs', '.fs7', '.fsi'] if i == len(included) else ['.fs7', '.fsi']
-            for name in fsp.files:
-                modules = set()
-                for ext in wext:
-                    if (name.lower() + ext) not in srcfiles:
-                        continue
-                    contents = srcfiles[name.lower() + ext][0]
-                    contents = open(os.path.join(fsp.srcdir, contents), 'r').read()
-                    contents = re.sub(r'\(\*(?:.|\r|\n)*?\*\)', '', contents, 0)
-                    contents = re.sub(r'".*?"', '', contents)
-                    contents = contents.splitlines()
-                    contents = [re.sub(r'//.*', '', x) for x in contents]
-                    contents = [re.sub(r'\s+', ' ', x.strip()) for x in contents]
-
-                    for line in contents:
-                        m = re.search(r'^open (\w+)', line)
-                        if m is not None:
-                            modules.add(m.group(1).lower())
-                        else:
-                            for m in re.finditer(r'(\w+?)\.\w+', line):
-                                modules.add(m.group(1).lower())
-                if name.lower() in modules:
-                    modules.remove(name.lower())
-
-                alldeps[name.lower()] = list(modules.intersection(lowfiles))
-
-        for name in topoiter(alldeps):
-            for d in alldeps[name][:]: # copy
-                for x in alldeps[d]:
-                    if x not in alldeps[name]:
-                        alldeps[name].insert(0, x)
-
-        # Reorder using user ordering
-        for name in alldeps.iterkeys():
-            alldeps[name] = [x for x in lowfiles if x in alldeps[name]]
-        alldeps = [(x, alldeps[x]) for x in infsproj \
-                       if x in alldeps and (x + '.fs7') in srcfiles]
-
-        # Go back to FS name (with correct case)
-        def _norm(x, y):
-            def _norm1(x):
-                x = x + ('.fs7' if (x + '.fs7' in srcfiles) else '.fsi')
-                x = srcfiles[x]
-                if x[1] != os.path.curdir:
-                    x = os.path.join(x[1], x[0])
-                else:
-                    x = x[0]
-                return x
-            realname = os.path.splitext(_norm1(x))[0]
-            realdeps = [_norm1(z) for z in y]
-            return (realname, realdeps)
-
-        return [_norm(x, y) for (x, y) in alldeps]
-
-# --------------------------------------------------------------------
-def undup(seq):
-    aout, seen = [], set()
-    for x in seq:
-        if x in seen: continue
-        aout.append(x); seen.add(x)
-    return aout
-
-# --------------------------------------------------------------------
-def _files_of_fsproj(fsproj, pure = True):
-    wext = ('.fs7',) if pure else ('.fs7', '.fsi')
-
-    with open(fsproj, 'r') as stream:
-        doc = etree.parse(stream)
-
-    files  = doc.findall('.//{0}ItemGroup/*'.format('{%s}' % (MSBUILD,)))
-    files  = [x.get('Include') for x in files if x.get('Include') is not None]
-    files  = [x for x in files if os.path.splitext(x)[1].lower() in wext]
-    files  = [os.path.splitext(x)[0] for x in files]
-    files  = undup(files)
-    srcdir = os.path.dirname(fsproj) or os.path.curdir
-
-    return Object(srcdir = srcdir, files = files)
-
-# --------------------------------------------------------------------
-def _main():
-    options = _options(sys.argv[1:])
-
-    fsprojs_ext = [_files_of_fsproj(x, False) for x in options.includes]
-    fsproj      = _files_of_fsproj(options.fsproj)
-
-    fs7deps    = FS7Deps.by_parsing(fsproj, fsprojs_ext)
-    fs7deps_m  = dict(fs7deps)
-    fs7default = [x for (x, _) in fs7deps if x in FS7DEFAULT]
-
-    if options.mode == 'makefile':
-        print "# -*- Makefile -*-"
-        print "# Automatically generated by: %s" % (' '.join(sys.argv),)
-        print "# Generated on %s" % (time.ctime(),)
-        print "# Use [make regen] to regenerate this Makefile"
-        print
-        print MKHEADER
-        print "# ----- BEGIN AUTO FS7 -----"
-        for name, deps in fs7deps:
-            fargs = dict(name = name, mod = name.lower(), deps = ' '.join(deps))
-            print '%(name)s.tc7: $(libperv) $(libfs7) %(deps)s %(name)s.fs7 %(name)s.fs %(name)s.fs7' % fargs
-            print '\t@echo '
-            print '\t@echo Lemma $@'
-            print '\t$(monoexe) $(f7) $(f7flags) -scripts %(name)s -why %(name)s.why %(deps)s %(name)s.fs7 %(name)s.fs | tee $@' % fargs
-            print
-        print 'check-xunit: clean'
-        print '\t../scripts/xunit-tc7 --xunit=$(xunit) %s' % (' '.join(fs7default),)
-        print "# ----- END AUTO FS7 -----"
-
-    if options.mode == 'defaults':
-        print ' '.join(fs7default)
-
-    if options.mode == 'json':
-        jsondata = dict()
-        for name, deps in fs7deps:
-            name = os.path.basename(name)
-            deps = map(os.path.basename, deps)
-            deps = [os.path.splitext(x)[0] for x in deps]
-            jsondata[name] = deps
-        print json.dumps(jsondata)
-
-# --------------------------------------------------------------------
-if __name__ == '__main__':
-    _main()
+#! /usr/bin/env python
+
+# --------------------------------------------------------------------
+import sys, os, re, time, json, xml.etree.ElementTree as etree
+
+# --------------------------------------------------------------------
+MSBUILD = 'http://schemas.microsoft.com/developer/msbuild/2003'
+
+FS7DEFAULT = [
+  'MiHTTPChannel',
+]
+
+MKHEADER = '''\
+include ../Makefile.config
+
+lib7      = ../../../lib/fs7-interfaces/
+libperv   = $(lib7)pervasives.fs7 $(lib7)tuples.fs7
+lperv     = -pervasives $(lib7)pervasives.fs7 -tuples $(lib7)tuples.fs7
+libfs7    = $(lib7)pi.fs7 $(lib7)formulas.fs7
+f7timeout = 5
+f7defs    = avoid verify ideal
+
+# removed --verbose for automated testing
+override f7flags += \\
+  -timeout $(f7timeout) $(patsubst %%,--define %%,$(f7defs)) \\
+  -nokindcheck $(lperv) $(libfs7)
+
+.PHONY: default clean check-xunit regen
+
+-include Makefile.tc7
+
+# default verification targets 
+default: %(fs7default)s
+
+clean:
+	rm -f *.smp *.tc7 *.why
+
+regen:
+	./genrules \\
+	  -I ../Platform/Platform.fsproj \\
+	  -I ../CoreCrypto/CoreCrypto.fsproj \\
+	  -I ../lib/lib.fsproj \\
+	    mihttp.fsproj > Makefile.mihttp.$$ \\
+	|| { rm -f Makefile.mihttp.$$; false; }
+	mv Makefile.mihttp.$$ Makefile
+''' % dict(fs7default = ' '.join([x + '.tc7' for x in FS7DEFAULT]))
+
+# --------------------------------------------------------------------
+class Object(object):
+    def __init__(self, **kw):
+        self.__dict__.update(kw)
+
+# --------------------------------------------------------------------
+def _options(args):
+    from optparse import OptionParser
+
+    parser = OptionParser(usage = "%prog: [options] file.fsproj...")
+    parser.add_option('-m', '--mode',
+                      action  = 'store',
+                      default = 'makefile',
+                      metavar = 'MODE',
+                      help    = 'set output mode to MODE')
+    parser.add_option('-I', None,
+                      dest    = 'includes',
+                      action  = 'append',
+                      default = [],
+                      metavar = 'FSPROJ',
+                      help    = 'Add project contents for FSI/FS7')
+
+    options, args = parser.parse_args(args)
+
+    if len(args) != 1:
+        parser.error('exactly one .fsproj file must be given')
+
+    options.fsproj = args[0]
+
+    return options
+
+# --------------------------------------------------------------------
+class TopoSortCycleException(Exception):
+    pass
+
+def topoiter1(D, k, sk, seen = None):
+    seen = dict() if seen is None else seen
+    flag = seen.get(k, 0)
+
+    if flag < 0:
+        print [k] + sk
+        raise TopoSortCycleException()
+    if flag > 0:
+        return
+
+    seen[k] = -1
+    for x in D.get(k, []):
+        for y in topoiter1(D, x, [k] + sk, seen):
+            yield y
+    seen[k] = 1
+
+    yield k
+
+def topoiter(D):
+    seen = dict()
+    for k in D.iterkeys():
+        for x in topoiter1(D, k, [], seen):
+            yield x
+
+# --------------------------------------------------------------------
+class FS7Deps(object):
+    @staticmethod
+    def by_parsing(fsproj, included):
+        srcfiles = dict()
+        lowfiles = []
+        infsproj = []
+
+        for (i, fsp) in enumerate(included + [fsproj]):
+            wext   = ['.fs', '.fs7', '.fsi'] if i == len(included) else ['.fs7', '.fsi']
+            files  = os.listdir(fsp.srcdir)
+            files  = [x for x in files if \
+                         os.path.splitext(x)[1].lower() in  wext]
+            files  = [(x.lower(), (x, fsp.srcdir)) for x in files]
+            srcfiles.update(dict(files))
+            lowfiles.extend([x.lower() for x in fsp.files])
+            if i == len(included):
+                infsproj.extend([x.lower() for x in fsp.files])
+
+        alldeps  = dict()
+
+        for (i, fsp) in enumerate(included + [fsproj]):
+            wext = ['.fs', '.fs7', '.fsi'] if i == len(included) else ['.fs7', '.fsi']
+            for name in fsp.files:
+                modules = set()
+                for ext in wext:
+                    if (name.lower() + ext) not in srcfiles:
+                        continue
+                    contents = srcfiles[name.lower() + ext][0]
+                    contents = open(os.path.join(fsp.srcdir, contents), 'r').read()
+                    contents = re.sub(r'\(\*(?:.|\r|\n)*?\*\)', '', contents, 0)
+                    contents = re.sub(r'".*?"', '', contents)
+                    contents = contents.splitlines()
+                    contents = [re.sub(r'//.*', '', x) for x in contents]
+                    contents = [re.sub(r'\s+', ' ', x.strip()) for x in contents]
+        
+                    for line in contents:
+                        m = re.search(r'^open (\w+)', line)
+                        if m is not None:
+                            modules.add(m.group(1).lower())
+                        else:
+                            for m in re.finditer(r'(\w+?)\.\w+', line):
+                                modules.add(m.group(1).lower())
+                if name.lower() in modules:
+                    modules.remove(name.lower())
+
+                alldeps[name.lower()] = list(modules.intersection(lowfiles))
+
+        for name in topoiter(alldeps):
+            for d in alldeps[name][:]: # copy
+                for x in alldeps[d]:
+                    if x not in alldeps[name]:
+                        alldeps[name].insert(0, x)
+
+        # Reorder using user ordering
+        for name in alldeps.iterkeys():
+            alldeps[name] = [x for x in lowfiles if x in alldeps[name]]
+        alldeps = [(x, alldeps[x]) for x in infsproj \
+                       if x in alldeps and (x + '.fs7') in srcfiles]
+
+        # Go back to FS name (with correct case)
+        def _norm(x, y):
+            def _norm1(x):
+                x = x + ('.fs7' if (x + '.fs7' in srcfiles) else '.fsi')
+                x = srcfiles[x]
+                if x[1] != os.path.curdir:
+                    x = os.path.join(x[1], x[0])
+                else:
+                    x = x[0]
+                return x
+            realname = os.path.splitext(_norm1(x))[0]
+            realdeps = [_norm1(z) for z in y]
+            return (realname, realdeps)
+
+        return [_norm(x, y) for (x, y) in alldeps]
+
+# --------------------------------------------------------------------
+def undup(seq):
+    aout, seen = [], set()
+    for x in seq:
+        if x in seen: continue
+        aout.append(x); seen.add(x)
+    return aout 
+
+# --------------------------------------------------------------------
+def _files_of_fsproj(fsproj, pure = True):
+    wext = ('.fs7',) if pure else ('.fs7', '.fsi')
+
+    with open(fsproj, 'r') as stream:
+        doc = etree.parse(stream)
+
+    files  = doc.findall('.//{0}ItemGroup/*'.format('{%s}' % (MSBUILD,)))
+    files  = [x.get('Include') for x in files if x.get('Include') is not None]
+    files  = [x for x in files if os.path.splitext(x)[1].lower() in wext]
+    files  = [os.path.splitext(x)[0] for x in files]
+    files  = undup(files)
+    srcdir = os.path.dirname(fsproj) or os.path.curdir
+
+    return Object(srcdir = srcdir, files = files)
+
+# --------------------------------------------------------------------
+def _main():
+    options = _options(sys.argv[1:])
+
+    fsprojs_ext = [_files_of_fsproj(x, False) for x in options.includes]
+    fsproj      = _files_of_fsproj(options.fsproj)
+
+    fs7deps    = FS7Deps.by_parsing(fsproj, fsprojs_ext)
+    fs7deps_m  = dict(fs7deps)
+    fs7default = [x for (x, _) in fs7deps if x in FS7DEFAULT]
+
+    if options.mode == 'makefile':
+        print "# -*- Makefile -*-"
+        print "# Automatically generated by: %s" % (' '.join(sys.argv),)
+        print "# Generated on %s" % (time.ctime(),)
+        print "# Use [make regen] to regenerate this Makefile"
+        print
+        print MKHEADER
+        print "# ----- BEGIN AUTO FS7 -----"
+        for name, deps in fs7deps:
+            fargs = dict(name = name, mod = name.lower(), deps = ' '.join(deps))
+            print '%(name)s.tc7: $(libperv) $(libfs7) %(deps)s %(name)s.fs7 %(name)s.fs %(name)s.fs7' % fargs
+            print '\t@echo '
+            print '\t@echo Lemma $@'
+            print '\t$(monoexe) $(f7) $(f7flags) -scripts %(name)s -why %(name)s.why %(deps)s %(name)s.fs7 %(name)s.fs | tee $@' % fargs
+            print
+        print 'check-xunit: clean'
+        print '\t../scripts/xunit-tc7 --xunit=$(xunit) %s' % (' '.join(fs7default),)
+        print "# ----- END AUTO FS7 -----"
+
+    if options.mode == 'defaults':
+        print ' '.join(fs7default)
+
+    if options.mode == 'json':
+        jsondata = dict()
+        for name, deps in fs7deps:
+            name = os.path.basename(name)
+            deps = map(os.path.basename, deps)
+            deps = [os.path.splitext(x)[0] for x in deps]
+            jsondata[name] = deps
+        print json.dumps(jsondata)
+
+# --------------------------------------------------------------------
+if __name__ == '__main__':
+    _main()
diff --git a/apps/pwapp/App.config b/apps/pwapp/App.config
index 6c301d3..f051fa4 100644
--- a/apps/pwapp/App.config
+++ b/apps/pwapp/App.config
@@ -1,6 +1,6 @@
-<?xml version="1.0" encoding="utf-8"?>
-<configuration>
-  <startup>
-    <supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.0" />
-  </startup>
+<?xml version="1.0" encoding="utf-8"?>
+<configuration>
+  <startup>
+    <supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.0" />
+  </startup>
</configuration>
\ No newline at end of file
diff --git a/apps/pwapp/genrules b/apps/pwapp/genrules
index 6392f9f..065e3fa 100644
--- a/apps/pwapp/genrules
+++ b/apps/pwapp/genrules
@@ -1,252 +1,252 @@
-#! /usr/bin/env python
-
-# --------------------------------------------------------------------
-import sys, os, re, time, json, xml.etree.ElementTree as etree
-
-# --------------------------------------------------------------------
-MSBUILD = 'http://schemas.microsoft.com/developer/msbuild/2003'
-
-FS7DEFAULT = [
-  'PwToken',
-  'PwApp',
-]
-
-MKHEADER = '''\
-include ../Makefile.config
-
-lib7      = ../../../lib/fs7-interfaces/
-libperv   = $(lib7)pervasives.fs7 $(lib7)tuples.fs7
-lperv     = -pervasives $(lib7)pervasives.fs7 -tuples $(lib7)tuples.fs7
-libfs7    = $(lib7)pi.fs7 $(lib7)formulas.fs7
-f7timeout = 5
-f7defs    = avoid verify ideal
-
-# removed --verbose for automated testing
-override f7flags += \\
-  -timeout $(f7timeout) $(patsubst %%,--define %%,$(f7defs)) \\
-  -nokindcheck $(lperv) $(libfs7)
-
-.PHONY: default clean check-xunit regen
-
--include Makefile.tc7
-
-# default verification targets
-default: %(fs7default)s
-
-clean:
-	rm -f *.smp *.tc7 *.why
-
-regen:
-	./genrules \\
-	  -I ../Platform/Platform.fsproj \\
-	  -I ../CoreCrypto/CoreCrypto.fsproj \\
-	  -I ../lib/lib.fsproj \\
-	    pwapp.fsproj > Makefile.pwapp.$$ \\
-	|| { rm -f Makefile.pwapp.$$; false; }
-	mv Makefile.pwapp.$$ Makefile
-''' % dict(fs7default = ' '.join([x + '.tc7' for x in FS7DEFAULT]))
-
-# --------------------------------------------------------------------
-class Object(object):
-    def __init__(self, **kw):
-        self.__dict__.update(kw)
-
-# --------------------------------------------------------------------
-def _options(args):
-    from optparse import OptionParser
-
-    parser = OptionParser(usage = "%prog: [options] file.fsproj...")
-    parser.add_option('-m', '--mode',
-                      action  = 'store',
-                      default = 'makefile',
-                      metavar = 'MODE',
-                      help    = 'set output mode to MODE')
-    parser.add_option('-I', None,
-                      dest    = 'includes',
-                      action  = 'append',
-                      default = [],
-                      metavar = 'FSPROJ',
-                      help    = 'Add project contents for FSI/FS7')
-
-    options, args = parser.parse_args(args)
-
-    if len(args) != 1:
-        parser.error('exactly one .fsproj file must be given')
-
-    options.fsproj = args[0]
-
-    return options
-
-# --------------------------------------------------------------------
-class TopoSortCycleException(Exception):
-    pass
-
-def topoiter1(D, k, sk, seen = None):
-    seen = dict() if seen is None else seen
-    flag = seen.get(k, 0)
-
-    if flag < 0:
-        print [k] + sk
-        raise TopoSortCycleException()
-    if flag > 0:
-        return
-
-    seen[k] = -1
-    for x in D.get(k, []):
-        for y in topoiter1(D, x, [k] + sk, seen):
-            yield y
-    seen[k] = 1
-
-    yield k
-
-def topoiter(D):
-    seen = dict()
-    for k in D.iterkeys():
-        for x in topoiter1(D, k, [], seen):
-            yield x
-
-# --------------------------------------------------------------------
-class FS7Deps(object):
-    @staticmethod
-    def by_parsing(fsproj, included):
-        srcfiles = dict()
-        lowfiles = []
-        infsproj = []
-
-        for (i, fsp) in enumerate(included + [fsproj]):
-            wext   = ['.fs', '.fs7', '.fsi'] if i == len(included) else ['.fs7', '.fsi']
-            files  = os.listdir(fsp.srcdir)
-            files  = [x for x in files if \
-                         os.path.splitext(x)[1].lower() in  wext]
-            files  = [(x.lower(), (x, fsp.srcdir)) for x in files]
-            srcfiles.update(dict(files))
-            lowfiles.extend([x.lower() for x in fsp.files])
-            if i == len(included):
-                infsproj.extend([x.lower() for x in fsp.files])
-
-        alldeps  = dict()
-
-        for (i, fsp) in enumerate(included + [fsproj]):
-            wext = ['.fs', '.fs7', '.fsi'] if i == len(included) else ['.fs7', '.fsi']
-            for name in fsp.files:
-                modules = set()
-                for ext in wext:
-                    if (name.lower() + ext) not in srcfiles:
-                        continue
-                    contents = srcfiles[name.lower() + ext][0]
-                    contents = open(os.path.join(fsp.srcdir, contents), 'r').read()
-                    contents = re.sub(r'\(\*(?:.|\r|\n)*?\*\)', '', contents, 0)
-                    contents = re.sub(r'".*?"', '', contents)
-                    contents = contents.splitlines()
-                    contents = [re.sub(r'//.*', '', x) for x in contents]
-                    contents = [re.sub(r'\s+', ' ', x.strip()) for x in contents]
-
-                    for line in contents:
-                        m = re.search(r'^open (\w+)', line)
-                        if m is not None:
-                            modules.add(m.group(1).lower())
-                        else:
-                            for m in re.finditer(r'(\w+?)\.\w+', line):
-                                modules.add(m.group(1).lower())
-                if name.lower() in modules:
-                    modules.remove(name.lower())
-
-                alldeps[name.lower()] = list(modules.intersection(lowfiles))
-
-        for name in topoiter(alldeps):
-            for d in alldeps[name][:]: # copy
-                for x in alldeps[d]:
-                    if x not in alldeps[name]:
-                        alldeps[name].insert(0, x)
-
-        # Reorder using user ordering
-        for name in alldeps.iterkeys():
-            alldeps[name] = [x for x in lowfiles if x in alldeps[name]]
-        alldeps = [(x, alldeps[x]) for x in infsproj \
-                       if x in alldeps and (x + '.fs7') in srcfiles]
-
-        # Go back to FS name (with correct case)
-        def _norm(x, y):
-            def _norm1(x):
-                x = x + ('.fs7' if (x + '.fs7' in srcfiles) else '.fsi')
-                x = srcfiles[x]
-                if x[1] != os.path.curdir:
-                    x = os.path.join(x[1], x[0])
-                else:
-                    x = x[0]
-                return x
-            realname = os.path.splitext(_norm1(x))[0]
-            realdeps = [_norm1(z) for z in y]
-            return (realname, realdeps)
-
-        return [_norm(x, y) for (x, y) in alldeps]
-
-# --------------------------------------------------------------------
-def undup(seq):
-    aout, seen = [], set()
-    for x in seq:
-        if x in seen: continue
-        aout.append(x); seen.add(x)
-    return aout
-
-# --------------------------------------------------------------------
-def _files_of_fsproj(fsproj, pure = True):
-    wext = ('.fs7',) if pure else ('.fs7', '.fsi')
-
-    with open(fsproj, 'r') as stream:
-        doc = etree.parse(stream)
-
-    files  = doc.findall('.//{0}ItemGroup/*'.format('{%s}' % (MSBUILD,)))
-    files  = [x.get('Include') for x in files if x.get('Include') is not None]
-    files  = [x for x in files if os.path.splitext(x)[1].lower() in wext]
-    files  = [os.path.splitext(x)[0] for x in files]
-    files  = undup(files)
-    srcdir = os.path.dirname(fsproj) or os.path.curdir
-
-    return Object(srcdir = srcdir, files = files)
-
-# --------------------------------------------------------------------
-def _main():
-    options = _options(sys.argv[1:])
-
-    fsprojs_ext = [_files_of_fsproj(x, False) for x in options.includes]
-    fsproj      = _files_of_fsproj(options.fsproj)
-
-    fs7deps    = FS7Deps.by_parsing(fsproj, fsprojs_ext)
-    fs7deps_m  = dict(fs7deps)
-    fs7default = [x for (x, _) in fs7deps if x in FS7DEFAULT]
-
-    if options.mode == 'makefile':
-        print "# -*- Makefile -*-"
-        print "# Automatically generated by: %s" % (' '.join(sys.argv),)
-        print "# Generated on %s" % (time.ctime(),)
-        print "# Use [make regen] to regenerate this Makefile"
-        print
-        print MKHEADER
-        print "# ----- BEGIN AUTO FS7 -----"
-        for name, deps in fs7deps:
-            fargs = dict(name = name, mod = name.lower(), deps = ' '.join(deps))
-            print '%(name)s.tc7: $(libperv) $(libfs7) %(deps)s %(name)s.fs7 %(name)s.fs %(name)s.fs7' % fargs
-            print '\t@echo '
-            print '\t@echo Lemma $@'
-            print '\t$(monoexe) $(f7) $(f7flags) -scripts %(name)s -why %(name)s.why %(deps)s %(name)s.fs7 %(name)s.fs | tee $@' % fargs
-            print
-        print 'check-xunit: clean'
-        print '\t../scripts/xunit-tc7 --xunit=$(xunit) %s' % (' '.join(fs7default),)
-        print "# ----- END AUTO FS7 -----"
-
-    if options.mode == 'defaults':
-        print ' '.join(fs7default)
-
-    if options.mode == 'json':
-        jsondata = dict()
-        for name, deps in fs7deps:
-            name = os.path.basename(name)
-            deps = map(os.path.basename, deps)
-            deps = [os.path.splitext(x)[0] for x in deps]
-            jsondata[name] = deps
-        print json.dumps(jsondata)
-
-# --------------------------------------------------------------------
-if __name__ == '__main__':
-    _main()
+#! /usr/bin/env python
+
+# --------------------------------------------------------------------
+import sys, os, re, time, json, xml.etree.ElementTree as etree
+
+# --------------------------------------------------------------------
+MSBUILD = 'http://schemas.microsoft.com/developer/msbuild/2003'
+
+FS7DEFAULT = [
+  'PwToken',
+  'PwApp',
+]
+
+MKHEADER = '''\
+include ../Makefile.config
+
+lib7      = ../../../lib/fs7-interfaces/
+libperv   = $(lib7)pervasives.fs7 $(lib7)tuples.fs7
+lperv     = -pervasives $(lib7)pervasives.fs7 -tuples $(lib7)tuples.fs7
+libfs7    = $(lib7)pi.fs7 $(lib7)formulas.fs7
+f7timeout = 5
+f7defs    = avoid verify ideal
+
+# removed --verbose for automated testing
+override f7flags += \\
+  -timeout $(f7timeout) $(patsubst %%,--define %%,$(f7defs)) \\
+  -nokindcheck $(lperv) $(libfs7)
+
+.PHONY: default clean check-xunit regen
+
+-include Makefile.tc7
+
+# default verification targets 
+default: %(fs7default)s
+
+clean:
+	rm -f *.smp *.tc7 *.why
+
+regen:
+	./genrules \\
+	  -I ../Platform/Platform.fsproj \\
+	  -I ../CoreCrypto/CoreCrypto.fsproj \\
+	  -I ../lib/lib.fsproj \\
+	    pwapp.fsproj > Makefile.pwapp.$$ \\
+	|| { rm -f Makefile.pwapp.$$; false; }
+	mv Makefile.pwapp.$$ Makefile
+''' % dict(fs7default = ' '.join([x + '.tc7' for x in FS7DEFAULT]))
+
+# --------------------------------------------------------------------
+class Object(object):
+    def __init__(self, **kw):
+        self.__dict__.update(kw)
+
+# --------------------------------------------------------------------
+def _options(args):
+    from optparse import OptionParser
+
+    parser = OptionParser(usage = "%prog: [options] file.fsproj...")
+    parser.add_option('-m', '--mode',
+                      action  = 'store',
+                      default = 'makefile',
+                      metavar = 'MODE',
+                      help    = 'set output mode to MODE')
+    parser.add_option('-I', None,
+                      dest    = 'includes',
+                      action  = 'append',
+                      default = [],
+                      metavar = 'FSPROJ',
+                      help    = 'Add project contents for FSI/FS7')
+
+    options, args = parser.parse_args(args)
+
+    if len(args) != 1:
+        parser.error('exactly one .fsproj file must be given')
+
+    options.fsproj = args[0]
+
+    return options
+
+# --------------------------------------------------------------------
+class TopoSortCycleException(Exception):
+    pass
+
+def topoiter1(D, k, sk, seen = None):
+    seen = dict() if seen is None else seen
+    flag = seen.get(k, 0)
+
+    if flag < 0:
+        print [k] + sk
+        raise TopoSortCycleException()
+    if flag > 0:
+        return
+
+    seen[k] = -1
+    for x in D.get(k, []):
+        for y in topoiter1(D, x, [k] + sk, seen):
+            yield y
+    seen[k] = 1
+
+    yield k
+
+def topoiter(D):
+    seen = dict()
+    for k in D.iterkeys():
+        for x in topoiter1(D, k, [], seen):
+            yield x
+
+# --------------------------------------------------------------------
+class FS7Deps(object):
+    @staticmethod
+    def by_parsing(fsproj, included):
+        srcfiles = dict()
+        lowfiles = []
+        infsproj = []
+
+        for (i, fsp) in enumerate(included + [fsproj]):
+            wext   = ['.fs', '.fs7', '.fsi'] if i == len(included) else ['.fs7', '.fsi']
+            files  = os.listdir(fsp.srcdir)
+            files  = [x for x in files if \
+                         os.path.splitext(x)[1].lower() in  wext]
+            files  = [(x.lower(), (x, fsp.srcdir)) for x in files]
+            srcfiles.update(dict(files))
+            lowfiles.extend([x.lower() for x in fsp.files])
+            if i == len(included):
+                infsproj.extend([x.lower() for x in fsp.files])
+
+        alldeps  = dict()
+
+        for (i, fsp) in enumerate(included + [fsproj]):
+            wext = ['.fs', '.fs7', '.fsi'] if i == len(included) else ['.fs7', '.fsi']
+            for name in fsp.files:
+                modules = set()
+                for ext in wext:
+                    if (name.lower() + ext) not in srcfiles:
+                        continue
+                    contents = srcfiles[name.lower() + ext][0]
+                    contents = open(os.path.join(fsp.srcdir, contents), 'r').read()
+                    contents = re.sub(r'\(\*(?:.|\r|\n)*?\*\)', '', contents, 0)
+                    contents = re.sub(r'".*?"', '', contents)
+                    contents = contents.splitlines()
+                    contents = [re.sub(r'//.*', '', x) for x in contents]
+                    contents = [re.sub(r'\s+', ' ', x.strip()) for x in contents]
+        
+                    for line in contents:
+                        m = re.search(r'^open (\w+)', line)
+                        if m is not None:
+                            modules.add(m.group(1).lower())
+                        else:
+                            for m in re.finditer(r'(\w+?)\.\w+', line):
+                                modules.add(m.group(1).lower())
+                if name.lower() in modules:
+                    modules.remove(name.lower())
+
+                alldeps[name.lower()] = list(modules.intersection(lowfiles))
+
+        for name in topoiter(alldeps):
+            for d in alldeps[name][:]: # copy
+                for x in alldeps[d]:
+                    if x not in alldeps[name]:
+                        alldeps[name].insert(0, x)
+
+        # Reorder using user ordering
+        for name in alldeps.iterkeys():
+            alldeps[name] = [x for x in lowfiles if x in alldeps[name]]
+        alldeps = [(x, alldeps[x]) for x in infsproj \
+                       if x in alldeps and (x + '.fs7') in srcfiles]
+
+        # Go back to FS name (with correct case)
+        def _norm(x, y):
+            def _norm1(x):
+                x = x + ('.fs7' if (x + '.fs7' in srcfiles) else '.fsi')
+                x = srcfiles[x]
+                if x[1] != os.path.curdir:
+                    x = os.path.join(x[1], x[0])
+                else:
+                    x = x[0]
+                return x
+            realname = os.path.splitext(_norm1(x))[0]
+            realdeps = [_norm1(z) for z in y]
+            return (realname, realdeps)
+
+        return [_norm(x, y) for (x, y) in alldeps]
+
+# --------------------------------------------------------------------
+def undup(seq):
+    aout, seen = [], set()
+    for x in seq:
+        if x in seen: continue
+        aout.append(x); seen.add(x)
+    return aout 
+
+# --------------------------------------------------------------------
+def _files_of_fsproj(fsproj, pure = True):
+    wext = ('.fs7',) if pure else ('.fs7', '.fsi')
+
+    with open(fsproj, 'r') as stream:
+        doc = etree.parse(stream)
+
+    files  = doc.findall('.//{0}ItemGroup/*'.format('{%s}' % (MSBUILD,)))
+    files  = [x.get('Include') for x in files if x.get('Include') is not None]
+    files  = [x for x in files if os.path.splitext(x)[1].lower() in wext]
+    files  = [os.path.splitext(x)[0] for x in files]
+    files  = undup(files)
+    srcdir = os.path.dirname(fsproj) or os.path.curdir
+
+    return Object(srcdir = srcdir, files = files)
+
+# --------------------------------------------------------------------
+def _main():
+    options = _options(sys.argv[1:])
+
+    fsprojs_ext = [_files_of_fsproj(x, False) for x in options.includes]
+    fsproj      = _files_of_fsproj(options.fsproj)
+
+    fs7deps    = FS7Deps.by_parsing(fsproj, fsprojs_ext)
+    fs7deps_m  = dict(fs7deps)
+    fs7default = [x for (x, _) in fs7deps if x in FS7DEFAULT]
+
+    if options.mode == 'makefile':
+        print "# -*- Makefile -*-"
+        print "# Automatically generated by: %s" % (' '.join(sys.argv),)
+        print "# Generated on %s" % (time.ctime(),)
+        print "# Use [make regen] to regenerate this Makefile"
+        print
+        print MKHEADER
+        print "# ----- BEGIN AUTO FS7 -----"
+        for name, deps in fs7deps:
+            fargs = dict(name = name, mod = name.lower(), deps = ' '.join(deps))
+            print '%(name)s.tc7: $(libperv) $(libfs7) %(deps)s %(name)s.fs7 %(name)s.fs %(name)s.fs7' % fargs
+            print '\t@echo '
+            print '\t@echo Lemma $@'
+            print '\t$(monoexe) $(f7) $(f7flags) -scripts %(name)s -why %(name)s.why %(deps)s %(name)s.fs7 %(name)s.fs | tee $@' % fargs
+            print
+        print 'check-xunit: clean'
+        print '\t../scripts/xunit-tc7 --xunit=$(xunit) %s' % (' '.join(fs7default),)
+        print "# ----- END AUTO FS7 -----"
+
+    if options.mode == 'defaults':
+        print ' '.join(fs7default)
+
+    if options.mode == 'json':
+        jsondata = dict()
+        for name, deps in fs7deps:
+            name = os.path.basename(name)
+            deps = map(os.path.basename, deps)
+            deps = [os.path.splitext(x)[0] for x in deps]
+            jsondata[name] = deps
+        print json.dumps(jsondata)
+
+# --------------------------------------------------------------------
+if __name__ == '__main__':
+    _main()
diff --git a/data/CAFile.pem b/data/CAFile.pem
index 8947e1e..b16d765 100644
--- a/data/CAFile.pem
+++ b/data/CAFile.pem
@@ -1,4278 +1,4278 @@
------BEGIN CERTIFICATE-----
-MIIE2DCCBEGgAwIBAgIEN0rSQzANBgkqhkiG9w0BAQUFADCBwzELMAkGA1UEBhMC
-VVMxFDASBgNVBAoTC0VudHJ1c3QubmV0MTswOQYDVQQLEzJ3d3cuZW50cnVzdC5u
-ZXQvQ1BTIGluY29ycC4gYnkgcmVmLiAobGltaXRzIGxpYWIuKTElMCMGA1UECxMc
-KGMpIDE5OTkgRW50cnVzdC5uZXQgTGltaXRlZDE6MDgGA1UEAxMxRW50cnVzdC5u
-ZXQgU2VjdXJlIFNlcnZlciBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eTAeFw05OTA1
-MjUxNjA5NDBaFw0xOTA1MjUxNjM5NDBaMIHDMQswCQYDVQQGEwJVUzEUMBIGA1UE
-ChMLRW50cnVzdC5uZXQxOzA5BgNVBAsTMnd3dy5lbnRydXN0Lm5ldC9DUFMgaW5j
-b3JwLiBieSByZWYuIChsaW1pdHMgbGlhYi4pMSUwIwYDVQQLExwoYykgMTk5OSBF
-bnRydXN0Lm5ldCBMaW1pdGVkMTowOAYDVQQDEzFFbnRydXN0Lm5ldCBTZWN1cmUg
-U2VydmVyIENlcnRpZmljYXRpb24gQXV0aG9yaXR5MIGdMA0GCSqGSIb3DQEBAQUA
-A4GLADCBhwKBgQDNKIM0VBuJ8w+vN5Ex/68xYMmo6LIQaO2f55M28Qpku0f1BBc/
-I0dNxScZgSYMVHINiC3ZH5oSn7yzcdOAGT9HZnuMNSjSuQrfJNqc1lB5gXpa0zf3
-wkrYKZImZNHkmGw6AIr1NJtl+O3jEP/9uElY3KDegjlrgbEWGWG5VLbmQwIBA6OC
-AdcwggHTMBEGCWCGSAGG+EIBAQQEAwIABzCCARkGA1UdHwSCARAwggEMMIHeoIHb
-oIHYpIHVMIHSMQswCQYDVQQGEwJVUzEUMBIGA1UEChMLRW50cnVzdC5uZXQxOzA5
-BgNVBAsTMnd3dy5lbnRydXN0Lm5ldC9DUFMgaW5jb3JwLiBieSByZWYuIChsaW1p
-dHMgbGlhYi4pMSUwIwYDVQQLExwoYykgMTk5OSBFbnRydXN0Lm5ldCBMaW1pdGVk
-MTowOAYDVQQDEzFFbnRydXN0Lm5ldCBTZWN1cmUgU2VydmVyIENlcnRpZmljYXRp
-b24gQXV0aG9yaXR5MQ0wCwYDVQQDEwRDUkwxMCmgJ6AlhiNodHRwOi8vd3d3LmVu
-dHJ1c3QubmV0L0NSTC9uZXQxLmNybDArBgNVHRAEJDAigA8xOTk5MDUyNTE2MDk0
-MFqBDzIwMTkwNTI1MTYwOTQwWjALBgNVHQ8EBAMCAQYwHwYDVR0jBBgwFoAU8Bdi
-E1U9s/8KAGv7UISX8+1i0BowHQYDVR0OBBYEFPAXYhNVPbP/CgBr+1CEl/PtYtAa
-MAwGA1UdEwQFMAMBAf8wGQYJKoZIhvZ9B0EABAwwChsEVjQuMAMCBJAwDQYJKoZI
-hvcNAQEFBQADgYEAkNwwAvpkdMKnCqV8IY00F6j7Rw7/JXyNEwr75Ji174z4xRAN
-95K+8cPV1ZVqBLssziY2ZcgxxufuP+NXdYR6Ee9GTxj005i7qIcyunL2POI9n9cd
-2cNgQ4xYDiKWL2KjLB+6rQXvqzJ4h6BUcxm1XAX5Uj5tLUUL9wqT6u0G+bI=
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIIDIDCCAomgAwIBAgIENd70zzANBgkqhkiG9w0BAQUFADBOMQswCQYDVQQGEwJV
-UzEQMA4GA1UEChMHRXF1aWZheDEtMCsGA1UECxMkRXF1aWZheCBTZWN1cmUgQ2Vy
-dGlmaWNhdGUgQXV0aG9yaXR5MB4XDTk4MDgyMjE2NDE1MVoXDTE4MDgyMjE2NDE1
-MVowTjELMAkGA1UEBhMCVVMxEDAOBgNVBAoTB0VxdWlmYXgxLTArBgNVBAsTJEVx
-dWlmYXggU2VjdXJlIENlcnRpZmljYXRlIEF1dGhvcml0eTCBnzANBgkqhkiG9w0B
-AQEFAAOBjQAwgYkCgYEAwV2xWGcIYu6gmi0fCG2RFGiYCh7+2gRvE4RiIcPRfM6f
-BeC4AfBONOziipUEZKzxa1NfBbPLZ4C/QgKO/t0BCezhABRP/PvwDN1Dulsr4R+A
-cJkVV5MW8Q+XarfCaCMczE1ZMKxRHjuvK9buY0V7xdlfUNLjUA86iOe/FP3gx7kC
-AwEAAaOCAQkwggEFMHAGA1UdHwRpMGcwZaBjoGGkXzBdMQswCQYDVQQGEwJVUzEQ
-MA4GA1UEChMHRXF1aWZheDEtMCsGA1UECxMkRXF1aWZheCBTZWN1cmUgQ2VydGlm
-aWNhdGUgQXV0aG9yaXR5MQ0wCwYDVQQDEwRDUkwxMBoGA1UdEAQTMBGBDzIwMTgw
-ODIyMTY0MTUxWjALBgNVHQ8EBAMCAQYwHwYDVR0jBBgwFoAUSOZo+SvSspXXR9gj
-IBBPM5iQn9QwHQYDVR0OBBYEFEjmaPkr0rKV10fYIyAQTzOYkJ/UMAwGA1UdEwQF
-MAMBAf8wGgYJKoZIhvZ9B0EABA0wCxsFVjMuMGMDAgbAMA0GCSqGSIb3DQEBBQUA
-A4GBAFjOKer89961zgK5F7WF0bnj4JXMJTENAKaSbn+2kmOeUJXRmm/kEd5jhW6Y
-7qj/WsjTVbJmcVfewCHrPSqnI0kBBIZCe/zuf6IWUrVnZ9NA2zsmWLIodz2uFHdh
-1voqZiegDfqnc1zqcPGUIWVEX/r87yloqaKHee9570+sB3c4
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIICkDCCAfmgAwIBAgIBATANBgkqhkiG9w0BAQQFADBaMQswCQYDVQQGEwJVUzEc
-MBoGA1UEChMTRXF1aWZheCBTZWN1cmUgSW5jLjEtMCsGA1UEAxMkRXF1aWZheCBT
-ZWN1cmUgR2xvYmFsIGVCdXNpbmVzcyBDQS0xMB4XDTk5MDYyMTA0MDAwMFoXDTIw
-MDYyMTA0MDAwMFowWjELMAkGA1UEBhMCVVMxHDAaBgNVBAoTE0VxdWlmYXggU2Vj
-dXJlIEluYy4xLTArBgNVBAMTJEVxdWlmYXggU2VjdXJlIEdsb2JhbCBlQnVzaW5l
-c3MgQ0EtMTCBnzANBgkqhkiG9w0BAQEFAAOBjQAwgYkCgYEAuucXkAJlsTRVPEnC
-UdXfp9E3j9HngXNBUmCbnaEXJnitx7HoJpQytd4zjTov2/KaelpzmKNc6fuKcxtc
-58O/gGzNqfTWK8D3+ZmqY6KxRwIP1ORROhI8bIpaVIRw28HFkM9yRcuoWcDNM50/
-o5brhTMhHD4ePmBudpxnhcXIw2ECAwEAAaNmMGQwEQYJYIZIAYb4QgEBBAQDAgAH
-MA8GA1UdEwEB/wQFMAMBAf8wHwYDVR0jBBgwFoAUvqigdHJQa0S3ySPY+6j/s1dr
-aGwwHQYDVR0OBBYEFL6ooHRyUGtEt8kj2Puo/7NXa2hsMA0GCSqGSIb3DQEBBAUA
-A4GBADDiAVGqx+pf2rnQZQ8w1j7aDRRJbpGTJxQx78T3LUX47Me/okENI7SS+RkA
-Z70Br83gcfxaz2TE4JaY0KNA4gGK7ycH8WUBikQtBmV1UsCGECAhX2xrD2yuCRyv
-8qIYNMR1pHMc8Y3c7635s3a0kr/clRAevsvIO1qEYBlWlKlV
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIICgjCCAeugAwIBAgIBBDANBgkqhkiG9w0BAQQFADBTMQswCQYDVQQGEwJVUzEc
-MBoGA1UEChMTRXF1aWZheCBTZWN1cmUgSW5jLjEmMCQGA1UEAxMdRXF1aWZheCBT
-ZWN1cmUgZUJ1c2luZXNzIENBLTEwHhcNOTkwNjIxMDQwMDAwWhcNMjAwNjIxMDQw
-MDAwWjBTMQswCQYDVQQGEwJVUzEcMBoGA1UEChMTRXF1aWZheCBTZWN1cmUgSW5j
-LjEmMCQGA1UEAxMdRXF1aWZheCBTZWN1cmUgZUJ1c2luZXNzIENBLTEwgZ8wDQYJ
-KoZIhvcNAQEBBQADgY0AMIGJAoGBAM4vGbwXt3fek6lfWg0XTzQaDJj0ItlZ1MRo
-RvC0NcWFAyDGr0WlIVFFQesWWDYyb+JQYmT5/VGcqiTZ9J2DKocKIdMSODRsjQBu
-WqDZQu4aIZX5UkxVWsUPOE9G+m34LjXWHXzr4vCwdYDIqROsvojvOm6rXyo4YgKw
-Env+j6YDAgMBAAGjZjBkMBEGCWCGSAGG+EIBAQQEAwIABzAPBgNVHRMBAf8EBTAD
-AQH/MB8GA1UdIwQYMBaAFEp4MlIR21kWNl7fwRQ2QGpHfEyhMB0GA1UdDgQWBBRK
-eDJSEdtZFjZe38EUNkBqR3xMoTANBgkqhkiG9w0BAQQFAAOBgQB1W6ibAxHm6VZM
-zfmpTMANmvPMZWnmJXbMWbfWVMMdzZmsGd20hdXgPfxiIKeES1hl8eL5lSE/9dR+
-WB5Hh1Q+WKG1tfgq73HnvMP2sUlG4tega+VWeponmHxGYhTnyfxuAxJ5gDgdSIKN
-/Bf+KpYrtWKmpj29f5JZzVoqgrI3eQ==
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIICWjCCAcMCAgGlMA0GCSqGSIb3DQEBBAUAMHUxCzAJBgNVBAYTAlVTMRgwFgYD
-VQQKEw9HVEUgQ29ycG9yYXRpb24xJzAlBgNVBAsTHkdURSBDeWJlclRydXN0IFNv
-bHV0aW9ucywgSW5jLjEjMCEGA1UEAxMaR1RFIEN5YmVyVHJ1c3QgR2xvYmFsIFJv
-b3QwHhcNOTgwODEzMDAyOTAwWhcNMTgwODEzMjM1OTAwWjB1MQswCQYDVQQGEwJV
-UzEYMBYGA1UEChMPR1RFIENvcnBvcmF0aW9uMScwJQYDVQQLEx5HVEUgQ3liZXJU
-cnVzdCBTb2x1dGlvbnMsIEluYy4xIzAhBgNVBAMTGkdURSBDeWJlclRydXN0IEds
-b2JhbCBSb290MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCVD6C28FCc6HrH
-iM3dFw4usJTQGz0O9pTAipTHBsiQl8i4ZBp6fmw8U+E3KHNgf7KXUwefU/ltWJTS
-r41tiGeA5u2ylc9yMcqlHHK6XALnZELn+aks1joNrI1CqiQBOeacPwGFVw1Yh0X4
-04Wqk2kmhXBIgD8SFcd5tB8FLztimQIDAQABMA0GCSqGSIb3DQEBBAUAA4GBAG3r
-GwnpXtlR22ciYaQqPEh346B8pt5zohQDhT37qw4wxYMWM4ETCJ57NE7fQMh017l9
-3PR2VX2bY1QY6fDq81yx2YtCHrnAlU66+tXifPVoYb+O7AWXX1uw16OFNMQkpw0P
-lZPvy5TYnh+dXIVtx6quTx8itc2VrbqnzPmrC3p/
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIIFSzCCBLSgAwIBAgIBaTANBgkqhkiG9w0BAQQFADCBmTELMAkGA1UEBhMCSFUx
-ETAPBgNVBAcTCEJ1ZGFwZXN0MScwJQYDVQQKEx5OZXRMb2NrIEhhbG96YXRiaXp0
-b25zYWdpIEtmdC4xGjAYBgNVBAsTEVRhbnVzaXR2YW55a2lhZG9rMTIwMAYDVQQD
-EylOZXRMb2NrIFV6bGV0aSAoQ2xhc3MgQikgVGFudXNpdHZhbnlraWFkbzAeFw05
-OTAyMjUxNDEwMjJaFw0xOTAyMjAxNDEwMjJaMIGZMQswCQYDVQQGEwJIVTERMA8G
-A1UEBxMIQnVkYXBlc3QxJzAlBgNVBAoTHk5ldExvY2sgSGFsb3phdGJpenRvbnNh
-Z2kgS2Z0LjEaMBgGA1UECxMRVGFudXNpdHZhbnlraWFkb2sxMjAwBgNVBAMTKU5l
-dExvY2sgVXpsZXRpIChDbGFzcyBCKSBUYW51c2l0dmFueWtpYWRvMIGfMA0GCSqG
-SIb3DQEBAQUAA4GNADCBiQKBgQCx6gTsIKAjwo84YM/HRrPVG/77uZmeBNwcf4xK
-gZjupNTKihe5In+DCnVMm8Bp2GQ5o+2So/1bXHQawEfKOml2mrriRBf8TKPV/riX
-iK+IA4kfpPIEPsgHC+b5sy96YhQJRhTKZPWLgLViqNhr1nGTLbO/CVRY7QbrqHvc
-Q7GhaQIDAQABo4ICnzCCApswEgYDVR0TAQH/BAgwBgEB/wIBBDAOBgNVHQ8BAf8E
-BAMCAAYwEQYJYIZIAYb4QgEBBAQDAgAHMIICYAYJYIZIAYb4QgENBIICURaCAk1G
-SUdZRUxFTSEgRXplbiB0YW51c2l0dmFueSBhIE5ldExvY2sgS2Z0LiBBbHRhbGFu
-b3MgU3pvbGdhbHRhdGFzaSBGZWx0ZXRlbGVpYmVuIGxlaXJ0IGVsamFyYXNvayBh
-bGFwamFuIGtlc3p1bHQuIEEgaGl0ZWxlc2l0ZXMgZm9seWFtYXRhdCBhIE5ldExv
-Y2sgS2Z0LiB0ZXJtZWtmZWxlbG9zc2VnLWJpenRvc2l0YXNhIHZlZGkuIEEgZGln
-aXRhbGlzIGFsYWlyYXMgZWxmb2dhZGFzYW5hayBmZWx0ZXRlbGUgYXogZWxvaXJ0
-IGVsbGVub3J6ZXNpIGVsamFyYXMgbWVndGV0ZWxlLiBBeiBlbGphcmFzIGxlaXJh
-c2EgbWVndGFsYWxoYXRvIGEgTmV0TG9jayBLZnQuIEludGVybmV0IGhvbmxhcGph
-biBhIGh0dHBzOi8vd3d3Lm5ldGxvY2submV0L2RvY3MgY2ltZW4gdmFneSBrZXJo
-ZXRvIGF6IGVsbGVub3J6ZXNAbmV0bG9jay5uZXQgZS1tYWlsIGNpbWVuLiBJTVBP
-UlRBTlQhIFRoZSBpc3N1YW5jZSBhbmQgdGhlIHVzZSBvZiB0aGlzIGNlcnRpZmlj
-YXRlIGlzIHN1YmplY3QgdG8gdGhlIE5ldExvY2sgQ1BTIGF2YWlsYWJsZSBhdCBo
-dHRwczovL3d3dy5uZXRsb2NrLm5ldC9kb2NzIG9yIGJ5IGUtbWFpbCBhdCBjcHNA
-bmV0bG9jay5uZXQuMA0GCSqGSIb3DQEBBAUAA4GBAATbrowXr/gOkDFOzT4JwG06
-sPgzTEdM43WIEJessDgVkcYplswhwG08pXTP2IKlOcNl40JwuyKQ433bNXbhoLXa
-n3BukxowOR0w2y7jfLKRstE3Kfq51hdcR0/jHTjrn9V7lagonhVK0dHQKwCXoOKS
-NitjrFgBazMpUIaD8QFI
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIIFTzCCBLigAwIBAgIBaDANBgkqhkiG9w0BAQQFADCBmzELMAkGA1UEBhMCSFUx
-ETAPBgNVBAcTCEJ1ZGFwZXN0MScwJQYDVQQKEx5OZXRMb2NrIEhhbG96YXRiaXp0
-b25zYWdpIEtmdC4xGjAYBgNVBAsTEVRhbnVzaXR2YW55a2lhZG9rMTQwMgYDVQQD
-EytOZXRMb2NrIEV4cHJlc3N6IChDbGFzcyBDKSBUYW51c2l0dmFueWtpYWRvMB4X
-DTk5MDIyNTE0MDgxMVoXDTE5MDIyMDE0MDgxMVowgZsxCzAJBgNVBAYTAkhVMREw
-DwYDVQQHEwhCdWRhcGVzdDEnMCUGA1UEChMeTmV0TG9jayBIYWxvemF0Yml6dG9u
-c2FnaSBLZnQuMRowGAYDVQQLExFUYW51c2l0dmFueWtpYWRvazE0MDIGA1UEAxMr
-TmV0TG9jayBFeHByZXNzeiAoQ2xhc3MgQykgVGFudXNpdHZhbnlraWFkbzCBnzAN
-BgkqhkiG9w0BAQEFAAOBjQAwgYkCgYEA6+ywbGGKIyWvYCDj2Z/8kwvbXY2wobNA
-OoLO/XXgeDIDhlqGlZHtU/qdQPzm6N3ZW3oDvV3zOwzDUXmbrVWg6dADEK8KuhRC
-2VImESLH0iDMgqSaqf64gXadarfSNnU+sYYJ9m5tfk63euyucYT2BDMIJTLrdKwW
-RMbkQJMdf60CAwEAAaOCAp8wggKbMBIGA1UdEwEB/wQIMAYBAf8CAQQwDgYDVR0P
-AQH/BAQDAgAGMBEGCWCGSAGG+EIBAQQEAwIABzCCAmAGCWCGSAGG+EIBDQSCAlEW
-ggJNRklHWUVMRU0hIEV6ZW4gdGFudXNpdHZhbnkgYSBOZXRMb2NrIEtmdC4gQWx0
-YWxhbm9zIFN6b2xnYWx0YXRhc2kgRmVsdGV0ZWxlaWJlbiBsZWlydCBlbGphcmFz
-b2sgYWxhcGphbiBrZXN6dWx0LiBBIGhpdGVsZXNpdGVzIGZvbHlhbWF0YXQgYSBO
-ZXRMb2NrIEtmdC4gdGVybWVrZmVsZWxvc3NlZy1iaXp0b3NpdGFzYSB2ZWRpLiBB
-IGRpZ2l0YWxpcyBhbGFpcmFzIGVsZm9nYWRhc2FuYWsgZmVsdGV0ZWxlIGF6IGVs
-b2lydCBlbGxlbm9yemVzaSBlbGphcmFzIG1lZ3RldGVsZS4gQXogZWxqYXJhcyBs
-ZWlyYXNhIG1lZ3RhbGFsaGF0byBhIE5ldExvY2sgS2Z0LiBJbnRlcm5ldCBob25s
-YXBqYW4gYSBodHRwczovL3d3dy5uZXRsb2NrLm5ldC9kb2NzIGNpbWVuIHZhZ3kg
-a2VyaGV0byBheiBlbGxlbm9yemVzQG5ldGxvY2submV0IGUtbWFpbCBjaW1lbi4g
-SU1QT1JUQU5UISBUaGUgaXNzdWFuY2UgYW5kIHRoZSB1c2Ugb2YgdGhpcyBjZXJ0
-aWZpY2F0ZSBpcyBzdWJqZWN0IHRvIHRoZSBOZXRMb2NrIENQUyBhdmFpbGFibGUg
-YXQgaHR0cHM6Ly93d3cubmV0bG9jay5uZXQvZG9jcyBvciBieSBlLW1haWwgYXQg
-Y3BzQG5ldGxvY2submV0LjANBgkqhkiG9w0BAQQFAAOBgQAQrX/XDDKACtiG8XmY
-ta3UzbM2xJZIwVzNmtkFLp++UOv0JhQQLdRmF/iewSf98e3ke0ugbLWrmldwpu2g
-pO0u9f38vf5NNwgMvOOWgyL1SRt/Syu0VMGAfJlOHdCM7tCs5ZL6dVb+ZKATj7i4
-Fp1hBWeAyNDYpQcCNJgEjTME1A==
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIIC5zCCAlACAQEwDQYJKoZIhvcNAQEFBQAwgbsxJDAiBgNVBAcTG1ZhbGlDZXJ0
-IFZhbGlkYXRpb24gTmV0d29yazEXMBUGA1UEChMOVmFsaUNlcnQsIEluYy4xNTAz
-BgNVBAsTLFZhbGlDZXJ0IENsYXNzIDMgUG9saWN5IFZhbGlkYXRpb24gQXV0aG9y
-aXR5MSEwHwYDVQQDExhodHRwOi8vd3d3LnZhbGljZXJ0LmNvbS8xIDAeBgkqhkiG
-9w0BCQEWEWluZm9AdmFsaWNlcnQuY29tMB4XDTk5MDYyNjAwMjIzM1oXDTE5MDYy
-NjAwMjIzM1owgbsxJDAiBgNVBAcTG1ZhbGlDZXJ0IFZhbGlkYXRpb24gTmV0d29y
-azEXMBUGA1UEChMOVmFsaUNlcnQsIEluYy4xNTAzBgNVBAsTLFZhbGlDZXJ0IENs
-YXNzIDMgUG9saWN5IFZhbGlkYXRpb24gQXV0aG9yaXR5MSEwHwYDVQQDExhodHRw
-Oi8vd3d3LnZhbGljZXJ0LmNvbS8xIDAeBgkqhkiG9w0BCQEWEWluZm9AdmFsaWNl
-cnQuY29tMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDjmFGWHOjVsQaBalfD
-cnWTq8+epvzzFlLWLU2fNUSoLgRNB0mKOCn1dzfnt6td3zZxFJmP3MKS8edgkpfs
-2Ejcv8ECIMYkpChMMFp2bbFc893enhBxoYjHW5tBbcqwuI4V7q0zK89HBFx1cQqY
-JJgpp0lZpd34t0NiYfPT4tBVPwIDAQABMA0GCSqGSIb3DQEBBQUAA4GBAFa7AliE
-Zwgs3x/be0kz9dNnnfS0ChCzycUs4pJqcXgn8nCDQtM+z6lU9PHYkhaM0QTLS6vJ
-n0WuPIqpsHEzXcjFV9+vqDWzf4mH6eglkrh/hXqu1rweN1gqZ8mRzyqBPu3GOd/A
-PhmcGcwTTYJBtYze4D1gCCAPRX5ron+jjBXu
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIIDJzCCApCgAwIBAgIBATANBgkqhkiG9w0BAQQFADCBzjELMAkGA1UEBhMCWkEx
-FTATBgNVBAgTDFdlc3Rlcm4gQ2FwZTESMBAGA1UEBxMJQ2FwZSBUb3duMR0wGwYD
-VQQKExRUaGF3dGUgQ29uc3VsdGluZyBjYzEoMCYGA1UECxMfQ2VydGlmaWNhdGlv
-biBTZXJ2aWNlcyBEaXZpc2lvbjEhMB8GA1UEAxMYVGhhd3RlIFByZW1pdW0gU2Vy
-dmVyIENBMSgwJgYJKoZIhvcNAQkBFhlwcmVtaXVtLXNlcnZlckB0aGF3dGUuY29t
-MB4XDTk2MDgwMTAwMDAwMFoXDTIwMTIzMTIzNTk1OVowgc4xCzAJBgNVBAYTAlpB
-MRUwEwYDVQQIEwxXZXN0ZXJuIENhcGUxEjAQBgNVBAcTCUNhcGUgVG93bjEdMBsG
-A1UEChMUVGhhd3RlIENvbnN1bHRpbmcgY2MxKDAmBgNVBAsTH0NlcnRpZmljYXRp
-b24gU2VydmljZXMgRGl2aXNpb24xITAfBgNVBAMTGFRoYXd0ZSBQcmVtaXVtIFNl
-cnZlciBDQTEoMCYGCSqGSIb3DQEJARYZcHJlbWl1bS1zZXJ2ZXJAdGhhd3RlLmNv
-bTCBnzANBgkqhkiG9w0BAQEFAAOBjQAwgYkCgYEA0jY2aovXwlue2oFBYo847kkE
-VdbQ7xwblRZH7xhINTpS9CtqBo87L+pW46+GjZ4X9560ZXUCTe/LCaIhUdib0GfQ
-ug2SBhRz1JPLlyoAnFxODLz6FVL88kRu2hFKbgifLy3j+ao6hnO2RlNYyIkFvYMR
-uHM/qgeN9EJN50CdHDcCAwEAAaMTMBEwDwYDVR0TAQH/BAUwAwEB/zANBgkqhkiG
-9w0BAQQFAAOBgQAmSCwWwlj66BZ0DKqqX1Q/8tfJeGBeXm43YyJ3Nn6yF8Q0ufUI
-hfzJATj/Tb7yFkJD57taRvvBxhEf8UqwKEbJw8RCfbz6q1lu1bdRiBHjpIUZa4JM
-pAwSremkrj/xw0llmozFyD4lt5SZu5IycQfwhl7tUCemDaYj+bvLpgcUQg==
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIIDEzCCAnygAwIBAgIBATANBgkqhkiG9w0BAQQFADCBxDELMAkGA1UEBhMCWkEx
-FTATBgNVBAgTDFdlc3Rlcm4gQ2FwZTESMBAGA1UEBxMJQ2FwZSBUb3duMR0wGwYD
-VQQKExRUaGF3dGUgQ29uc3VsdGluZyBjYzEoMCYGA1UECxMfQ2VydGlmaWNhdGlv
-biBTZXJ2aWNlcyBEaXZpc2lvbjEZMBcGA1UEAxMQVGhhd3RlIFNlcnZlciBDQTEm
-MCQGCSqGSIb3DQEJARYXc2VydmVyLWNlcnRzQHRoYXd0ZS5jb20wHhcNOTYwODAx
-MDAwMDAwWhcNMjAxMjMxMjM1OTU5WjCBxDELMAkGA1UEBhMCWkExFTATBgNVBAgT
-DFdlc3Rlcm4gQ2FwZTESMBAGA1UEBxMJQ2FwZSBUb3duMR0wGwYDVQQKExRUaGF3
-dGUgQ29uc3VsdGluZyBjYzEoMCYGA1UECxMfQ2VydGlmaWNhdGlvbiBTZXJ2aWNl
-cyBEaXZpc2lvbjEZMBcGA1UEAxMQVGhhd3RlIFNlcnZlciBDQTEmMCQGCSqGSIb3
-DQEJARYXc2VydmVyLWNlcnRzQHRoYXd0ZS5jb20wgZ8wDQYJKoZIhvcNAQEBBQAD
-gY0AMIGJAoGBANOkUG7I/1Zr5s9dtuoMaHVHoqrC2oQl/Kj0R1HahbUgdJSGHg91
-yekIYfUGbTBuFRkC6VLAYttNmZ7iagxEOM3+vuNkCXDF/rFrKbYvScg71CcEJRCX
-L+eQbcAoQpnXTEPew/UhbVSfXcNY4cDk2VuwuNy0e982OsK1ZiIS1ocNAgMBAAGj
-EzARMA8GA1UdEwEB/wQFMAMBAf8wDQYJKoZIhvcNAQEEBQADgYEAB/pMaVz7lcxG
-7oWDTSEwjsrZqG9JGubaUeNgcGyEYRGhGshIPllDfU+VPaGLtwtimHp1it2ITk6e
-QNuozDJ0uW8NxuOzRAvZim+aKZuZGCg70eNAKJpaPNW15yAbi8qkq43pUdniTCxZ
-qdq5snUb9kLy78fyGPmJvKP/iiMucEc=
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIIC5zCCAlACAQEwDQYJKoZIhvcNAQEFBQAwgbsxJDAiBgNVBAcTG1ZhbGlDZXJ0
-IFZhbGlkYXRpb24gTmV0d29yazEXMBUGA1UEChMOVmFsaUNlcnQsIEluYy4xNTAz
-BgNVBAsTLFZhbGlDZXJ0IENsYXNzIDEgUG9saWN5IFZhbGlkYXRpb24gQXV0aG9y
-aXR5MSEwHwYDVQQDExhodHRwOi8vd3d3LnZhbGljZXJ0LmNvbS8xIDAeBgkqhkiG
-9w0BCQEWEWluZm9AdmFsaWNlcnQuY29tMB4XDTk5MDYyNTIyMjM0OFoXDTE5MDYy
-NTIyMjM0OFowgbsxJDAiBgNVBAcTG1ZhbGlDZXJ0IFZhbGlkYXRpb24gTmV0d29y
-azEXMBUGA1UEChMOVmFsaUNlcnQsIEluYy4xNTAzBgNVBAsTLFZhbGlDZXJ0IENs
-YXNzIDEgUG9saWN5IFZhbGlkYXRpb24gQXV0aG9yaXR5MSEwHwYDVQQDExhodHRw
-Oi8vd3d3LnZhbGljZXJ0LmNvbS8xIDAeBgkqhkiG9w0BCQEWEWluZm9AdmFsaWNl
-cnQuY29tMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDYWYJ6ibiWuqYvaG9Y
-LqdUHAZu9OqNSLwxlBfw8068srg1knaw0KWlAdcAAxIiGQj4/xEjm84H9b9pGib+
-TunRf50sQB1ZaG6m+FiwnRqP0z/x3BkGgagO4DrdyFNFCQbmD3DD+kCmDuJWBQ8Y
-TfwggtFzVXSNdnKgHZ0dwN0/cQIDAQABMA0GCSqGSIb3DQEBBQUAA4GBAFBoPUn0
-LBwGlN+VYH+Wexf+T3GtZMjdd9LvWVXoP+iOBSoh8gfStadS/pyxtuJbdxdA6nLW
-I8sogTLDAHkY7FkXicnGah5xyf23dKUlRWnFSKsZ4UWKJWsZ7uW7EvV/96aNUcPw
-nXS3qT6gpf+2SQMT2iLM7XGCK5nPOrf1LXLI
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIIC5zCCAlACAQEwDQYJKoZIhvcNAQEFBQAwgbsxJDAiBgNVBAcTG1ZhbGlDZXJ0
-IFZhbGlkYXRpb24gTmV0d29yazEXMBUGA1UEChMOVmFsaUNlcnQsIEluYy4xNTAz
-BgNVBAsTLFZhbGlDZXJ0IENsYXNzIDIgUG9saWN5IFZhbGlkYXRpb24gQXV0aG9y
-aXR5MSEwHwYDVQQDExhodHRwOi8vd3d3LnZhbGljZXJ0LmNvbS8xIDAeBgkqhkiG
-9w0BCQEWEWluZm9AdmFsaWNlcnQuY29tMB4XDTk5MDYyNjAwMTk1NFoXDTE5MDYy
-NjAwMTk1NFowgbsxJDAiBgNVBAcTG1ZhbGlDZXJ0IFZhbGlkYXRpb24gTmV0d29y
-azEXMBUGA1UEChMOVmFsaUNlcnQsIEluYy4xNTAzBgNVBAsTLFZhbGlDZXJ0IENs
-YXNzIDIgUG9saWN5IFZhbGlkYXRpb24gQXV0aG9yaXR5MSEwHwYDVQQDExhodHRw
-Oi8vd3d3LnZhbGljZXJ0LmNvbS8xIDAeBgkqhkiG9w0BCQEWEWluZm9AdmFsaWNl
-cnQuY29tMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDOOnHK5avIWZJV16vY
-dA757tn2VUdZZUcOBVXc65g2PFxTXdMwzzjsvUGJ7SVCCSRrCl6zfN1SLUzm1NZ9
-WlmpZdRJEy0kTRxQb7XBhVQ7/nHk01xC+YDgkRoKWzk2Z/M/VXwbP7RfZHM047QS
-v4dk+NoS/zcnwbNDu+97bi5p9wIDAQABMA0GCSqGSIb3DQEBBQUAA4GBADt/UG9v
-UJSZSWI4OB9L+KXIPqeCgfYrx+jFzug6EILLGACOTb2oWH+heQC1u+mNr0HZDzTu
-IYEZoDJJKPTEjlbVUjP9UNV+mWwD5MlM/Mtsq2azSiGM5bUMMj4QssxsodyamEwC
-W/POuZ6lcg5Ktz885hZo+L7tdEy8W9ViH0Pd
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIICPDCCAaUCEHC65B0Q2Sk0tjjKewPMur8wDQYJKoZIhvcNAQECBQAwXzELMAkG
-A1UEBhMCVVMxFzAVBgNVBAoTDlZlcmlTaWduLCBJbmMuMTcwNQYDVQQLEy5DbGFz
-cyAzIFB1YmxpYyBQcmltYXJ5IENlcnRpZmljYXRpb24gQXV0aG9yaXR5MB4XDTk2
-MDEyOTAwMDAwMFoXDTI4MDgwMTIzNTk1OVowXzELMAkGA1UEBhMCVVMxFzAVBgNV
-BAoTDlZlcmlTaWduLCBJbmMuMTcwNQYDVQQLEy5DbGFzcyAzIFB1YmxpYyBQcmlt
-YXJ5IENlcnRpZmljYXRpb24gQXV0aG9yaXR5MIGfMA0GCSqGSIb3DQEBAQUAA4GN
-ADCBiQKBgQDJXFme8huKARS0EN8EQNvjV69qRUCPhAwL0TPZ2RHP7gJYHyX3KqhE
-BarsAx94f56TuZoAqiN91qyFomNFx3InzPRMxnVx0jnvT0Lwdd8KkMaOIG+YD/is
-I19wKTakyYbnsZogy1Olhec9vn2a/iRFM9x2Fe0PonFkTGUugWhFpwIDAQABMA0G
-CSqGSIb3DQEBAgUAA4GBALtMEivPLCYATxQT3ab7/AoRhIzzKBxnki98tsX63/Do
-lbwdj2wsqFHMc9ikwFPwTtYmwHYBV4GSXiHx0bH/59AhWM1pF+NEHJwZRDmJXNyc
-AA9WjQKZ7aKQRUzkuxCkPfAyAw7xzvjoyVGM5mKf5p/AfbdynMk2OmufTqj/ZA1k
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIICPDCCAaUCEDyRMcsf9tAbDpq40ES/Er4wDQYJKoZIhvcNAQEFBQAwXzELMAkG
-A1UEBhMCVVMxFzAVBgNVBAoTDlZlcmlTaWduLCBJbmMuMTcwNQYDVQQLEy5DbGFz
-cyAzIFB1YmxpYyBQcmltYXJ5IENlcnRpZmljYXRpb24gQXV0aG9yaXR5MB4XDTk2
-MDEyOTAwMDAwMFoXDTI4MDgwMjIzNTk1OVowXzELMAkGA1UEBhMCVVMxFzAVBgNV
-BAoTDlZlcmlTaWduLCBJbmMuMTcwNQYDVQQLEy5DbGFzcyAzIFB1YmxpYyBQcmlt
-YXJ5IENlcnRpZmljYXRpb24gQXV0aG9yaXR5MIGfMA0GCSqGSIb3DQEBAQUAA4GN
-ADCBiQKBgQDJXFme8huKARS0EN8EQNvjV69qRUCPhAwL0TPZ2RHP7gJYHyX3KqhE
-BarsAx94f56TuZoAqiN91qyFomNFx3InzPRMxnVx0jnvT0Lwdd8KkMaOIG+YD/is
-I19wKTakyYbnsZogy1Olhec9vn2a/iRFM9x2Fe0PonFkTGUugWhFpwIDAQABMA0G
-CSqGSIb3DQEBBQUAA4GBABByUqkFFBkyCEHwxWsKzH4PIRnN5GfcX6kb5sroc50i
-2JhucwNhkcV8sEVAbkSdjbCxlnRhLQ2pRdKkkirWmnWXbj9T/UWZYB2oK0z5XqcJ
-2HUw19JlYD1n1khVdWk/kfVIC0dpImmClr7JyDiGSnoscxlIaU5rfGW/D/xwzoiQ
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIIDAjCCAmsCEH3Z/gfPqB63EHln+6eJNMYwDQYJKoZIhvcNAQEFBQAwgcExCzAJ
-BgNVBAYTAlVTMRcwFQYDVQQKEw5WZXJpU2lnbiwgSW5jLjE8MDoGA1UECxMzQ2xh
-c3MgMyBQdWJsaWMgUHJpbWFyeSBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eSAtIEcy
-MTowOAYDVQQLEzEoYykgMTk5OCBWZXJpU2lnbiwgSW5jLiAtIEZvciBhdXRob3Jp
-emVkIHVzZSBvbmx5MR8wHQYDVQQLExZWZXJpU2lnbiBUcnVzdCBOZXR3b3JrMB4X
-DTk4MDUxODAwMDAwMFoXDTI4MDgwMTIzNTk1OVowgcExCzAJBgNVBAYTAlVTMRcw
-FQYDVQQKEw5WZXJpU2lnbiwgSW5jLjE8MDoGA1UECxMzQ2xhc3MgMyBQdWJsaWMg
-UHJpbWFyeSBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eSAtIEcyMTowOAYDVQQLEzEo
-YykgMTk5OCBWZXJpU2lnbiwgSW5jLiAtIEZvciBhdXRob3JpemVkIHVzZSBvbmx5
-MR8wHQYDVQQLExZWZXJpU2lnbiBUcnVzdCBOZXR3b3JrMIGfMA0GCSqGSIb3DQEB
-AQUAA4GNADCBiQKBgQDMXtERXVxp0KvTuWpMmR9ZmDCOFoUgRm1HP9SFIIThbbP4
-pO0M8RcPO/mn+SXXwc+EY/J8Y8+iR/LGWzOOZEAEaMGAuWQcRXfH2G71lSk8UOg0
-13gfqLptQ5GVj0VXXn7F+8qkBOvqlzdUMG+7AUcyM83cV5tkaWH4mx0ciU9cZwID
-AQABMA0GCSqGSIb3DQEBBQUAA4GBAFFNzb5cy5gZnBWyATl4Lk0PZ3BwmcYQWpSk
-U01UbSuvDV1Ai2TT1+7eVmGSX6bEHRBhNtMsJzzoKQm5EWR0zLVznxxIqbxhAe7i
-F6YM40AIOw7n60RzKprxaZLvcRTDOaxxp5EJb+RxBrO6WVcmeQD2+A2iMzAo1KpY
-oJ2daZH9
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIIH0zCCBbugAwIBAgIIXsO3pkN/pOAwDQYJKoZIhvcNAQEFBQAwQjESMBAGA1UE
-AwwJQUNDVlJBSVoxMRAwDgYDVQQLDAdQS0lBQ0NWMQ0wCwYDVQQKDARBQ0NWMQsw
-CQYDVQQGEwJFUzAeFw0xMTA1MDUwOTM3MzdaFw0zMDEyMzEwOTM3MzdaMEIxEjAQ
-BgNVBAMMCUFDQ1ZSQUlaMTEQMA4GA1UECwwHUEtJQUNDVjENMAsGA1UECgwEQUND
-VjELMAkGA1UEBhMCRVMwggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoICAQCb
-qau/YUqXry+XZpp0X9DZlv3P4uRm7x8fRzPCRKPfmt4ftVTdFXxpNRFvu8gMjmoY
-HtiP2Ra8EEg2XPBjs5BaXCQ316PWywlxufEBcoSwfdtNgM3802/J+Nq2DoLSRYWo
-G2ioPej0RGy9ocLLA76MPhMAhN9KSMDjIgro6TenGEyxCQ0jVn8ETdkXhBilyNpA
-lHPrzg5XPAOBOp0KoVdDaaxXbXmQeOW1tDvYvEyNKKGno6e6Ak4l0Squ7a4DIrhr
-IA8wKFSVf+DuzgpmndFALW4ir50awQUZ0m/A8p/4e7MCQvtQqR0tkw8jq8bBD5L/
-0KIV9VMJcRz/RROE5iZe+OCIHAr8Fraocwa48GOEAqDGWuzndN9wrqODJerWx5eH
-k6fGioozl2A3ED6XPm4pFdahD9GILBKfb6qkxkLrQaLjlUPTAYVtjrs78yM2x/47
-4KElB0iryYl0/wiPgL/AlmXz7uxLaL2diMMxs0Dx6M/2OLuc5NF/1OVYm3z61PMO
-m3WR5LpSLhl+0fXNWhn8ugb2+1KoS5kE3fj5tItQo05iifCHJPqDQsGH+tUtKSpa
-cXpkatcnYGMN285J9Y0fkIkyF/hzQ7jSWpOGYdbhdQrqeWZ2iE9x6wQl1gpaepPl
-uUsXQA+xtrn13k/c4LOsOxFwYIRKQ26ZIMApcQrAZQIDAQABo4ICyzCCAscwfQYI
-KwYBBQUHAQEEcTBvMEwGCCsGAQUFBzAChkBodHRwOi8vd3d3LmFjY3YuZXMvZmls
-ZWFkbWluL0FyY2hpdm9zL2NlcnRpZmljYWRvcy9yYWl6YWNjdjEuY3J0MB8GCCsG
-AQUFBzABhhNodHRwOi8vb2NzcC5hY2N2LmVzMB0GA1UdDgQWBBTSh7Tj3zcnk1X2
-VuqB5TbMjB4/vTAPBgNVHRMBAf8EBTADAQH/MB8GA1UdIwQYMBaAFNKHtOPfNyeT
-VfZW6oHlNsyMHj+9MIIBcwYDVR0gBIIBajCCAWYwggFiBgRVHSAAMIIBWDCCASIG
-CCsGAQUFBwICMIIBFB6CARAAQQB1AHQAbwByAGkAZABhAGQAIABkAGUAIABDAGUA
-cgB0AGkAZgBpAGMAYQBjAGkA8wBuACAAUgBhAO0AegAgAGQAZQAgAGwAYQAgAEEA
-QwBDAFYAIAAoAEEAZwBlAG4AYwBpAGEAIABkAGUAIABUAGUAYwBuAG8AbABvAGcA
-7QBhACAAeQAgAEMAZQByAHQAaQBmAGkAYwBhAGMAaQDzAG4AIABFAGwAZQBjAHQA
-cgDzAG4AaQBjAGEALAAgAEMASQBGACAAUQA0ADYAMAAxADEANQA2AEUAKQAuACAA
-QwBQAFMAIABlAG4AIABoAHQAdABwADoALwAvAHcAdwB3AC4AYQBjAGMAdgAuAGUA
-czAwBggrBgEFBQcCARYkaHR0cDovL3d3dy5hY2N2LmVzL2xlZ2lzbGFjaW9uX2Mu
-aHRtMFUGA1UdHwROMEwwSqBIoEaGRGh0dHA6Ly93d3cuYWNjdi5lcy9maWxlYWRt
-aW4vQXJjaGl2b3MvY2VydGlmaWNhZG9zL3JhaXphY2N2MV9kZXIuY3JsMA4GA1Ud
-DwEB/wQEAwIBBjAXBgNVHREEEDAOgQxhY2N2QGFjY3YuZXMwDQYJKoZIhvcNAQEF
-BQADggIBAJcxAp/n/UNnSEQU5CmH7UwoZtCPNdpNYbdKl02125DgBS4OxnnQ8pdp
-D70ER9m+27Up2pvZrqmZ1dM8MJP1jaGo/AaNRPTKFpV8M9xii6g3+CfYCS0b78gU
-JyCpZET/LtZ1qmxNYEAZSUNUY9rizLpm5U9EelvZaoErQNV/+QEnWCzI7UiRfD+m
-AM/EKXMRNt6GGT6d7hmKG9Ww7Y49nCrADdg9ZuM8Db3VlFzi4qc1GwQA9j9ajepD
-vV+JHanBsMyZ4k0ACtrJJ1vnE5Bc5PUzolVt3OAJTS+xJlsndQAJxGJ3KQhfnlms
-tn6tn1QwIgPBHnFk/vk4CpYY3QIUrCPLBhwepH2NDd4nQeit2hW3sCPdK6jT2iWH
-7ehVRE2I9DZ+hJp4rPcOVkkO1jMl1oRQQmwgEh0q1b688nCBpHBgvgW1m54ERL5h
-I6zppSSMEYCUWqKiuUnSwdzRp+0xESyeGabu4VXhwOrPDYTkF7eifKXeVSUG7szA
-h1xA2syVP1XgNce4hL60Xc16gwFy7ofmXx2utYXGJt/mwZrpHgJHnyqobalbz+xF
-d3+YJ5oyXSrjhO7FmGYvliAd3djDJ9ew+f7Zfc3Qn48LFFhRny+Lwzgt3uiP1o2H
-pPVWQxaZLPSkVrQ0uGE3ycJYgBugl6H8WY3pEfbRD0tVNEYqi4Y7
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIIFtTCCA52gAwIBAgIIYY3HhjsBggUwDQYJKoZIhvcNAQEFBQAwRDEWMBQGA1UE
-AwwNQUNFRElDT00gUm9vdDEMMAoGA1UECwwDUEtJMQ8wDQYDVQQKDAZFRElDT00x
-CzAJBgNVBAYTAkVTMB4XDTA4MDQxODE2MjQyMloXDTI4MDQxMzE2MjQyMlowRDEW
-MBQGA1UEAwwNQUNFRElDT00gUm9vdDEMMAoGA1UECwwDUEtJMQ8wDQYDVQQKDAZF
-RElDT00xCzAJBgNVBAYTAkVTMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKC
-AgEA/5KV4WgGdrQsyFhIyv2AVClVYyT/kGWbEHV7w2rbYgIB8hiGtXxaOLHkWLn7
-09gtn70yN78sFW2+tfQh0hOR2QetAQXW8713zl9CgQr5auODAKgrLlUTY4HKRxx7
-XBZXehuDYAQ6PmXDzQHe3qTWDLqO3tkE7hdWIpuPY/1NFgu3e3eM+SW10W2ZEi5P
-Grjm6gSSrj0RuVFCPYewMYWveVqc/udOXpJPQ/yrOq2lEiZmueIM15jO1FillUAK
-t0SdE3QrwqXrIhWYENiLxQSfHY9g5QYbm8+5eaA9oiM/Qj9r+hwDezCNzmzAv+Yb
-X79nuIQZ1RXve8uQNjFiybwCq0Zfm/4aaJQ0PZCOrfbkHQl/Sog4P75n/TSW9R28
-MHTLOO7VbKvU/PQAtwBbhTIWdjPp2KOZnQUAqhbm84F9b32qhm2tFXTTxKJxqvQU
-fecyuB+81fFOvW8XAjnXDpVCOscAPukmYxHqC9FK/xidstd7LzrZlvvoHpKuE1XI
-2Sf23EgbsCTBheN3nZqk8wwRHQ3ItBTutYJXCb8gWH8vIiPYcMt5bMlL8qkqyPyH
-K9caUPgn6C9D4zq92Fdx/c6mUlv53U3t5fZvie27k5x2IXXwkkwp9y+cAS7+UEae
-ZAwUswdbxcJzbPEHXEUkFDWug/FqTYl6+rPYLWbwNof1K1MCAwEAAaOBqjCBpzAP
-BgNVHRMBAf8EBTADAQH/MB8GA1UdIwQYMBaAFKaz4SsrSbbXc6GqlPUB53NlTKxQ
-MA4GA1UdDwEB/wQEAwIBhjAdBgNVHQ4EFgQUprPhKytJttdzoaqU9QHnc2VMrFAw
-RAYDVR0gBD0wOzA5BgRVHSAAMDEwLwYIKwYBBQUHAgEWI2h0dHA6Ly9hY2VkaWNv
-bS5lZGljb21ncm91cC5jb20vZG9jMA0GCSqGSIb3DQEBBQUAA4ICAQDOLAtSUWIm
-fQwng4/F9tqgaHtPkl7qpHMyEVNEskTLnewPeUKzEKbHDZ3Ltvo/Onzqv4hTGzz3
-gvoFNTPhNahXwOf9jU8/kzJPeGYDdwdY6ZXIfj7QeQCM8htRM5u8lOk6e25SLTKe
-I6RF+7YuE7CLGLHdztUdp0J/Vb77W7tH1PwkzQSulgUV1qzOMPPKC8W64iLgpq0i
-5ALudBF/TP94HTXa5gI06xgSYXcGCRZj6hitoocf8seACQl1ThCojz2GuHURwCRi
-ipZ7SkXp7FnFvmuD5uHorLUwHv4FB4D54SMNUI8FmP8sX+g7tq3PgbUhh8oIKiMn
-MCArz+2UW6yyetLHKKGKC5tNSixthT8Jcjxn4tncB7rrZXtaAWPWkFtPF2Y9fwsZ
-o5NjEFIqnxQWWOLcpfShFosOkYuByptZ+thrkQdlVV9SH686+5DdaaVbnG0OLLb6
-zqylfDJKZ0DcMDQj3dcEI2bw/FWAp/tmGYI1Z2JwOV5vx+qQQEQIHriy1tvuWacN
-GHk0vFQYXlPKNFHtRQrmjseCNj6nOGOpMCwXEGCSn1WHElkQwg9naRHMTh5+Spqt
-r0CodaxWkHS4oJyleW/c6RrIaQXpuvoDs3zk4E7Czp3otkYNbn5XOmeUwssfnHdK
-Z05phkOTOPu220+DkdRgfks+KzgHVZhepA==
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIIFuzCCA6OgAwIBAgIIVwoRl0LE48wwDQYJKoZIhvcNAQELBQAwazELMAkGA1UE
-BhMCSVQxDjAMBgNVBAcMBU1pbGFuMSMwIQYDVQQKDBpBY3RhbGlzIFMucC5BLi8w
-MzM1ODUyMDk2NzEnMCUGA1UEAwweQWN0YWxpcyBBdXRoZW50aWNhdGlvbiBSb290
-IENBMB4XDTExMDkyMjExMjIwMloXDTMwMDkyMjExMjIwMlowazELMAkGA1UEBhMC
-SVQxDjAMBgNVBAcMBU1pbGFuMSMwIQYDVQQKDBpBY3RhbGlzIFMucC5BLi8wMzM1
-ODUyMDk2NzEnMCUGA1UEAwweQWN0YWxpcyBBdXRoZW50aWNhdGlvbiBSb290IENB
-MIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAp8bEpSmkLO/lGMWwUKNv
-UTufClrJwkg4CsIcoBh/kbWHuUA/3R1oHwiD1S0eiKD4j1aPbZkCkpAW1V8IbInX
-4ay8IMKx4INRimlNAJZaby/ARH6jDuSRzVju3PvHHkVH3Se5CAGfpiEd9UEtL0z9
-KK3giq0itFZljoZUj5NDKd45RnijMCO6zfB9E1fAXdKDa0hMxKufgFpbOr3JpyI/
-gCczWw63igxdBzcIy2zSekciRDXFzMwujt0q7bd9Zg1fYVEiVRvjRuPjPdA1Yprb
-rxTIW6HMiRvhMCb8oJsfgadHHwTrozmSBp+Z07/T6k9QnBn+locePGX2oxgkg4YQ
-51Q+qDp2JE+BIcXjDwL4k5RHILv+1A7TaLndxHqEguNTVHnd25zS8gebLra8Pu2F
-be8lEfKXGkJh90qX6IuxEAf6ZYGyojnP9zz/GPvG8VqLWeICrHuS0E4UT1lF9gxe
-KF+w6D9Fz8+vm2/7hNN3WpVvrJSEnu68wEqPSpP4RCHiMUVhUE4Q2OM1fEwZtN4F
-v6MGn8i1zeQf1xcGDXqVdFUNaBr8EBtiZJ1t4JWgw5QHVw0U5r0F+7if5t+L4sbn
-fpb2U8WANFAoWPASUHEXMLrmeGO89LKtmyuy/uE5jF66CyCU3nuDuP/jVo23Eek7
-jPKxwV2dpAtMK9myGPW1n0sCAwEAAaNjMGEwHQYDVR0OBBYEFFLYiDrIn3hm7Ynz
-ezhwlMkCAjbQMA8GA1UdEwEB/wQFMAMBAf8wHwYDVR0jBBgwFoAUUtiIOsifeGbt
-ifN7OHCUyQICNtAwDgYDVR0PAQH/BAQDAgEGMA0GCSqGSIb3DQEBCwUAA4ICAQAL
-e3KHwGCmSUyIWOYdiPcUZEim2FgKDk8TNd81HdTtBjHIgT5q1d07GjLukD0R0i70
-jsNjLiNmsGe+b7bAEzlgqqI0JZN1Ut6nna0Oh4lScWoWPBkdg/iaKWW+9D+a2fDz
-WochcYBNy+A4mz+7+uAwTc+G02UQGRjRlwKxK3JCaKygvU5a2hi/a5iB0P2avl4V
-SM0RFbnAKVy06Ij3Pjaut2L9HmLecHgQHEhb2rykOLpn7VU+Xlff1ANATIGk0k9j
-pwlCCRT8AKnCgHNPLsBA2RF7SOp6AsDT6ygBJlh0wcBzIm2Tlf05fbsq4/aC4yyX
-X04fkZT6/iyj2HYauE2yOE+b+h1IYHkm4vP9qdCa6HCPSXrW5b0KDtst842/6+Ok
-fcvHlXHo2qN8xcL4dJIEG4aspCJTQLas/kx2z/uUMsA1n3Y/buWQbqCmJqK4LL7R
-K4X9p2jIugErsWx0Hbhzlefut8cl8ABMALJ+tguLHPPAUJ4lueAI3jZm/zel0btU
-ZCzJJ7VLkn5l/9Mt4blOvH+kQSGQQXemOR/qnuOf0GZvBeyqdn6/axag67XH/JJU
-LysRJyU3eExRarDzzFhdFPFqSBX/wge2sY0PjlxQRrM9vwGYT7JZVEc+NHt4bVaT
-LnPqZih4zR0Uv6CPLy64Lo7yFIrM6bV8+2ydDKXhlg==
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIIENjCCAx6gAwIBAgIBATANBgkqhkiG9w0BAQUFADBvMQswCQYDVQQGEwJTRTEU
-MBIGA1UEChMLQWRkVHJ1c3QgQUIxJjAkBgNVBAsTHUFkZFRydXN0IEV4dGVybmFs
-IFRUUCBOZXR3b3JrMSIwIAYDVQQDExlBZGRUcnVzdCBFeHRlcm5hbCBDQSBSb290
-MB4XDTAwMDUzMDEwNDgzOFoXDTIwMDUzMDEwNDgzOFowbzELMAkGA1UEBhMCU0Ux
-FDASBgNVBAoTC0FkZFRydXN0IEFCMSYwJAYDVQQLEx1BZGRUcnVzdCBFeHRlcm5h
-bCBUVFAgTmV0d29yazEiMCAGA1UEAxMZQWRkVHJ1c3QgRXh0ZXJuYWwgQ0EgUm9v
-dDCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBALf3GjPm8gAELTngTlvt
-H7xsD821+iO2zt6bETOXpClMfZOfvUq8k+0DGuOPz+VtUFrWlymUWoCwSXrbLpX9
-uMq/NzgtHj6RQa1wVsfwTz/oMp50ysiQVOnGXw94nZpAPA6sYapeFI+eh6FqUNzX
-mk6vBbOmcZSccbNQYArHE504B4YCqOmoaSYYkKtMsE8jqzpPhNjfzp/haW+710LX
-a0Tkx63ubUFfclpxCDezeWWkWaCUN/cALw3CknLa0Dhy2xSoRcRdKn23tNbE7qzN
-E0S3ySvdQwAl+mG5aWpYIxG3pzOPVnVZ9c0p10a3CitlttNCbxWyuHv77+ldU9U0
-WicCAwEAAaOB3DCB2TAdBgNVHQ4EFgQUrb2YejS0Jvf6xCZU7wO94CTLVBowCwYD
-VR0PBAQDAgEGMA8GA1UdEwEB/wQFMAMBAf8wgZkGA1UdIwSBkTCBjoAUrb2YejS0
-Jvf6xCZU7wO94CTLVBqhc6RxMG8xCzAJBgNVBAYTAlNFMRQwEgYDVQQKEwtBZGRU
-cnVzdCBBQjEmMCQGA1UECxMdQWRkVHJ1c3QgRXh0ZXJuYWwgVFRQIE5ldHdvcmsx
-IjAgBgNVBAMTGUFkZFRydXN0IEV4dGVybmFsIENBIFJvb3SCAQEwDQYJKoZIhvcN
-AQEFBQADggEBALCb4IUlwtYj4g+WBpKdQZic2YR5gdkeWxQHIzZlj7DYd7usQWxH
-YINRsPkyPef89iYTx4AWpb9a/IfPeHmJIZriTAcKhjW88t5RxNKWt9x+Tu5w/Rw5
-6wwCURQtjr0W4MHfRnXnJK3s9EK0hZNwEGe6nQY1ShjTK3rMUUKhemPR5ruhxSvC
-Nr4TDea9Y355e6cJDUCrat2PisP29owaQgVR1EX1n6diIWgVIEM8med8vSTYqZEX
-c4g/VhsxOBi0cQ+azcgOno4uG+GMmIPLHzHxREzGBHNJdmAPx/i9F4BrLunMTA5a
-mnkPIAou1Z5jJh5VkpTYghdae9C8x49OhgQ=
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIIEGDCCAwCgAwIBAgIBATANBgkqhkiG9w0BAQUFADBlMQswCQYDVQQGEwJTRTEU
-MBIGA1UEChMLQWRkVHJ1c3QgQUIxHTAbBgNVBAsTFEFkZFRydXN0IFRUUCBOZXR3
-b3JrMSEwHwYDVQQDExhBZGRUcnVzdCBDbGFzcyAxIENBIFJvb3QwHhcNMDAwNTMw
-MTAzODMxWhcNMjAwNTMwMTAzODMxWjBlMQswCQYDVQQGEwJTRTEUMBIGA1UEChML
-QWRkVHJ1c3QgQUIxHTAbBgNVBAsTFEFkZFRydXN0IFRUUCBOZXR3b3JrMSEwHwYD
-VQQDExhBZGRUcnVzdCBDbGFzcyAxIENBIFJvb3QwggEiMA0GCSqGSIb3DQEBAQUA
-A4IBDwAwggEKAoIBAQCWltQhSWDia+hBBwzexODcEyPNwTXH+9ZOEQpnXvUGW2ul
-CDtbKRY654eyNAbFvAWlA3yCyykQruGIgb3WntP+LVbBFc7jJp0VLhD7Bo8wBN6n
-tGO0/7Gcrjyvd7ZWxbWroulpOj0OM3kyP3CCkplhbY0wCI9xP6ZIVxn4JdxLZlyl
-dI+Yrsj5wAYi56xz36Uu+1LcsRVlIPo1Zmne3yzxbrww2ywkEtvrNTVokMsAsJch
-PXQhI2U0K7t4WaPW4XY5mqRJjox0r26kmqPZm9I4XJuiGMx1I4S+6+JNM3GOGvDC
-+Mcdoq0Dlyz4zyXG9rgkMbFjXZJ/Y/AlyVMuH79NAgMBAAGjgdIwgc8wHQYDVR0O
-BBYEFJWxtPCUtr3H2tERCSG+wa9J/RB7MAsGA1UdDwQEAwIBBjAPBgNVHRMBAf8E
-BTADAQH/MIGPBgNVHSMEgYcwgYSAFJWxtPCUtr3H2tERCSG+wa9J/RB7oWmkZzBl
-MQswCQYDVQQGEwJTRTEUMBIGA1UEChMLQWRkVHJ1c3QgQUIxHTAbBgNVBAsTFEFk
-ZFRydXN0IFRUUCBOZXR3b3JrMSEwHwYDVQQDExhBZGRUcnVzdCBDbGFzcyAxIENB
-IFJvb3SCAQEwDQYJKoZIhvcNAQEFBQADggEBACxtZBsfzQ3duQH6lmM0MkhHma6X
-7f1yFqZzR1r0693p9db7RcwpiURdv0Y5PejuvE1Uhh4dbOMXJ0PhiVYrqW9yTkkz
-43J8KiOavD7/KCrto/8cI7pDVwlnTUtiBi34/2ydYB7YHEt9tTEv2dB8Xfjea4MY
-eDdXL+gzB2ffHsdrKpV2ro9Xo/D0UrSpUwjP4E/TelOL/bscVjby/rK25Xa71SJl
-pz/+0WatC7xrmYbvP33zGDLKe8bjq2RGlfgmadlVg3sslgf/WSxEo8bl6ancoWOA
-WiFeIc9TVPC6b4nbqKqVz4vjccweGyBECMB6tkD9xOQ14R0WHNC8K47Wcdk=
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIIEFTCCAv2gAwIBAgIBATANBgkqhkiG9w0BAQUFADBkMQswCQYDVQQGEwJTRTEU
-MBIGA1UEChMLQWRkVHJ1c3QgQUIxHTAbBgNVBAsTFEFkZFRydXN0IFRUUCBOZXR3
-b3JrMSAwHgYDVQQDExdBZGRUcnVzdCBQdWJsaWMgQ0EgUm9vdDAeFw0wMDA1MzAx
-MDQxNTBaFw0yMDA1MzAxMDQxNTBaMGQxCzAJBgNVBAYTAlNFMRQwEgYDVQQKEwtB
-ZGRUcnVzdCBBQjEdMBsGA1UECxMUQWRkVHJ1c3QgVFRQIE5ldHdvcmsxIDAeBgNV
-BAMTF0FkZFRydXN0IFB1YmxpYyBDQSBSb290MIIBIjANBgkqhkiG9w0BAQEFAAOC
-AQ8AMIIBCgKCAQEA6Rowj4OIFMEg2Dybjxt+A3S72mnTRqX4jsIMEZBRpS9mVEBV
-6tsfSlbunyNu9DnLoblv8n75XYcmYZ4c+OLspoH4IcUkzBEMP9smcnrHAZcHF/nX
-GCwwfQ56HmIexkvA/X1id9NEHif2P0tEs7c42TkfYNVRknMDtABp4/MUTu7R3AnP
-dzRGULD4EfL+OHn3Bzn+UZKXC1sIXzSGAa2Il+tmzV7R/9x98oTaunet3IAIx6eH
-1lWfl2royBFkuucZKT8Rs3iQhCBSWxHveNCD9tVIkNAwHM+A+WD+eeSI8t0A65RF
-62WUaUC6wNW0uLp9BBGo6zEFlpROWCGOn9Bg/QIDAQABo4HRMIHOMB0GA1UdDgQW
-BBSBPjfYkrAfd59ctKtzquf2NGAv+jALBgNVHQ8EBAMCAQYwDwYDVR0TAQH/BAUw
-AwEB/zCBjgYDVR0jBIGGMIGDgBSBPjfYkrAfd59ctKtzquf2NGAv+qFopGYwZDEL
-MAkGA1UEBhMCU0UxFDASBgNVBAoTC0FkZFRydXN0IEFCMR0wGwYDVQQLExRBZGRU
-cnVzdCBUVFAgTmV0d29yazEgMB4GA1UEAxMXQWRkVHJ1c3QgUHVibGljIENBIFJv
-b3SCAQEwDQYJKoZIhvcNAQEFBQADggEBAAP3FUr4JNojVhaTdt02KLmuG7jD8WS6
-IBh4lSknVwW8fCr0uVFV2ocC3g8WFzH4qnkuCRO7r7IgGRLlk/lL+YPoRNWyQSW/
-iHVv/xD8SlTQX/D67zZzfRs2RcYhbbQVuE7PnFylPVoAjgbjPGsye/Kf8Lb93/Ao
-GEjwxrzQvzSAlsJKsW2Ox5BF3i9nrEUEo3rcVZLJR2bYGozH7ZxOmuASu7VqTITh
-4SINhwBk/ox9Yjllpu9CtoAlEmEBqCQTcAARJl/6NVDFSMwGR+gn2HCNX2TmoUQm
-XiLsks3/QppEIW1cxeMiHV9HEufOX1362KqxMy3ZdvJOOjMMK7MtkAY=
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIIEHjCCAwagAwIBAgIBATANBgkqhkiG9w0BAQUFADBnMQswCQYDVQQGEwJTRTEU
-MBIGA1UEChMLQWRkVHJ1c3QgQUIxHTAbBgNVBAsTFEFkZFRydXN0IFRUUCBOZXR3
-b3JrMSMwIQYDVQQDExpBZGRUcnVzdCBRdWFsaWZpZWQgQ0EgUm9vdDAeFw0wMDA1
-MzAxMDQ0NTBaFw0yMDA1MzAxMDQ0NTBaMGcxCzAJBgNVBAYTAlNFMRQwEgYDVQQK
-EwtBZGRUcnVzdCBBQjEdMBsGA1UECxMUQWRkVHJ1c3QgVFRQIE5ldHdvcmsxIzAh
-BgNVBAMTGkFkZFRydXN0IFF1YWxpZmllZCBDQSBSb290MIIBIjANBgkqhkiG9w0B
-AQEFAAOCAQ8AMIIBCgKCAQEA5B6a/twJWoekn0e+EV+vhDTbYjx5eLfpMLXsDBwq
-xBb/4Oxx64r1EW7tTw2R0hIYLUkVAcKkIhPHEWT/IhKauY5cLwjPcWqzZwFZ8V1G
-87B4pfYOQnrjfxvM0PC3KP0q6p6zsLkEqv32x7SxuCqg+1jxGaBvcCV+PmlKfw8i
-2O+tCBGaKZnhqkRFmhJePp1tUvznoD1oL/BLcHwTOK28FSXx1s6rosAx1i+f4P8U
-WfyEk9mHfExUE+uf0S0R+Bg6Ot4l2ffTQO2kBhLEO+GRwVY18BTcZTYJbqukB8c1
-0cIDMzZbdSZtQvESa0NvS3GU+jQd7RNuyoB/mC9suWXY6QIDAQABo4HUMIHRMB0G
-A1UdDgQWBBQ5lYtii1zJ1IC6WA+XPxUIQ8yYpzALBgNVHQ8EBAMCAQYwDwYDVR0T
-AQH/BAUwAwEB/zCBkQYDVR0jBIGJMIGGgBQ5lYtii1zJ1IC6WA+XPxUIQ8yYp6Fr
-pGkwZzELMAkGA1UEBhMCU0UxFDASBgNVBAoTC0FkZFRydXN0IEFCMR0wGwYDVQQL
-ExRBZGRUcnVzdCBUVFAgTmV0d29yazEjMCEGA1UEAxMaQWRkVHJ1c3QgUXVhbGlm
-aWVkIENBIFJvb3SCAQEwDQYJKoZIhvcNAQEFBQADggEBABmrder4i2VhlRO6aQTv
-hsoToMeqT2QbPxj2qC0sVY8FtzDqQmodwCVRLae/DLPt7wh/bDxGGuoYQ992zPlm
-hpwsaPXpF/gxsxjE1kh9I0xowX67ARRvxdlu3rsEQmr49lx95dr6h+sNNVJn0J6X
-dgWTP5XHAeZpVTh/EGGZyeNfpso+gmNIquIISD6q8rKFYqa0p9m9N5xotS1WfbC3
-P6CxB9bpT9zeRXEwMn8bLgn5v1Kh7sKAPgZcLlVAwRv1cEWw3F369nJad9Jjzc9Y
-iQBCYz95OdBEsIJuQRno3eDBiFrRHnGTHyQwdOUeqN48Jzd/g66ed8/wMLH/S5no
-xqE=
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIIDTDCCAjSgAwIBAgIId3cGJyapsXwwDQYJKoZIhvcNAQELBQAwRDELMAkGA1UE
-BhMCVVMxFDASBgNVBAoMC0FmZmlybVRydXN0MR8wHQYDVQQDDBZBZmZpcm1UcnVz
-dCBDb21tZXJjaWFsMB4XDTEwMDEyOTE0MDYwNloXDTMwMTIzMTE0MDYwNlowRDEL
-MAkGA1UEBhMCVVMxFDASBgNVBAoMC0FmZmlybVRydXN0MR8wHQYDVQQDDBZBZmZp
-cm1UcnVzdCBDb21tZXJjaWFsMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKC
-AQEA9htPZwcroRX1BiLLHwGy43NFBkRJLLtJJRTWzsO3qyxPxkEylFf6EqdbDuKP
-Hx6GGaeqtS25Xw2Kwq+FNXkyLbscYjfysVtKPcrNcV/pQr6U6Mje+SJIZMblq8Yr
-ba0F8PrVC8+a5fBQpIs7R6UjW3p6+DM/uO+Zl+MgwdYoic+U+7lF7eNAFxHUdPAL
-MeIrJmqbTFeurCA+ukV6BfO9m2kVrn1OIGPENXY6BwLJN/3HR+7o8XYdcxXyl6S1
-yHp52UKqK39c/s4mT6NmgTWvRLpUHhwwMmWd5jyTXlBOeuM61G7MGvv50jeuJCqr
-VwMiKA1JdX+3KNp1v47j3A55MQIDAQABo0IwQDAdBgNVHQ4EFgQUnZPGU4teyq8/
-nx4P5ZmVvCT2lI8wDwYDVR0TAQH/BAUwAwEB/zAOBgNVHQ8BAf8EBAMCAQYwDQYJ
-KoZIhvcNAQELBQADggEBAFis9AQOzcAN/wr91LoWXym9e2iZWEnStB03TX8nfUYG
-XUPGhi4+c7ImfU+TqbbEKpqrIZcUsd6M06uJFdhrJNTxFq7YpFzUf1GO7RgBsZNj
-vbz4YYCanrHOQnDiqX0GJX0nof5v7LMeJNrjS1UaADs1tDvZ110w/YETifLCBivt
-Z8SOyUOyXGsViQK8YvxO8rUzqrJv0wqiUOP2O+guRMLbZjipM1ZI8W0bM40NjD9g
-N53Tym1+NH4Nn3J2ixufcv1SNUFFApYvHLKac0khsUlHRUe072o0EclNmsxZt9YC
-nlpOZbWUrhvfKbAW8b8Angc6F2S1BLUjIZkKlTuXfO8=
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIIDTDCCAjSgAwIBAgIIfE8EORzUmS0wDQYJKoZIhvcNAQEFBQAwRDELMAkGA1UE
-BhMCVVMxFDASBgNVBAoMC0FmZmlybVRydXN0MR8wHQYDVQQDDBZBZmZpcm1UcnVz
-dCBOZXR3b3JraW5nMB4XDTEwMDEyOTE0MDgyNFoXDTMwMTIzMTE0MDgyNFowRDEL
-MAkGA1UEBhMCVVMxFDASBgNVBAoMC0FmZmlybVRydXN0MR8wHQYDVQQDDBZBZmZp
-cm1UcnVzdCBOZXR3b3JraW5nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKC
-AQEAtITMMxcua5Rsa2FSoOujz3mUTOWUgJnLVWREZY9nZOIG41w3SfYvm4SEHi3y
-YJ0wTsyEheIszx6e/jarM3c1RNg1lho9Nuh6DtjVR6FqaYvZ/Ls6rnla1fTWcbua
-kCNrmreIdIcMHl+5ni36q1Mr3Lt2PpNMCAiMHqIjHNRqrSK6mQEubWXLviRmVSRL
-QESxG9fhwoXA3hA/Pe24/PHxI1Pcv2WXb9n5QHGNfb2V1M6+oF4nI979ptAmDgAp
-6zxG8D1gvz9Q0twmQVGeFDdCBKNwV6gbh+0t+nvujArjqWaJGctB+d1ENmHP4ndG
-yH329JKBNv3bNPFyfvMMFr20FQIDAQABo0IwQDAdBgNVHQ4EFgQUBx/S55zawm6i
-QLSwelAQUHTEyL0wDwYDVR0TAQH/BAUwAwEB/zAOBgNVHQ8BAf8EBAMCAQYwDQYJ
-KoZIhvcNAQEFBQADggEBAIlXshZ6qML91tmbmzTCnLQyFE2npN/svqe++EPbkTfO
-tDIuUFUaNU52Q3Eg75N3ThVwLofDwR1t3Mu1J9QsVtFSUzpE0nPIxBsFZVpikpzu
-QY0x2+c06lkh1QF612S4ZDnNye2v7UsDSKegmQGA3GWjNq5lWUhPgkvIZfFXHeVZ
-Lgo/bNjR9eUJtGxUAArgFU2HdW23WJZa3W3SAKD0m0i+wzekujbgfIeFlxoVot4u
-olu9rxj5kFDNcFn4J2dHy8egBzp90SxdbBk6ZrV9/ZFvgrG+CJPbFEfxojfHRZ48
-x3evZKiT3/Zpg4Jg8klCNO1aAFSFHBY2kgxc+qatv9s=
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIIFRjCCAy6gAwIBAgIIbYwURrGmCu4wDQYJKoZIhvcNAQEMBQAwQTELMAkGA1UE
-BhMCVVMxFDASBgNVBAoMC0FmZmlybVRydXN0MRwwGgYDVQQDDBNBZmZpcm1UcnVz
-dCBQcmVtaXVtMB4XDTEwMDEyOTE0MTAzNloXDTQwMTIzMTE0MTAzNlowQTELMAkG
-A1UEBhMCVVMxFDASBgNVBAoMC0FmZmlybVRydXN0MRwwGgYDVQQDDBNBZmZpcm1U
-cnVzdCBQcmVtaXVtMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAxBLf
-qV/+Qd3d9Z+K4/as4Tx4mrzY8H96oDMq3I0gW64tb+eT2TZwamjPjlGjhVtnBKAQ
-JG9dKILBl1fYSCkTtuG+kU3fhQxTGJoeJKJPj/CihQvL9Cl/0qRY7iZNyaqoe5rZ
-+jjeRFcV5fiMyNlI4g0WJx0eyIOFJbe6qlVBzAMiSy2RjYvmia9mx+n/K+k8rNrS
-s8PhaJyJ+HoAVt70VZVs+7pk3WKL3wt3MutizCaam7uqYoNMtAZ6MMgpv+0GTZe5
-HMQxK9VfvFMSF5yZVylmd2EhMQcuJUmdGPLu8ytxjLW6OQdJd/zvLpKQBY0tL3d7
-70O/Nbua2Plzpyzy0FfuKE4mX4+QaAkvuPjcBukumj5Rp9EixAqnOEhss/n/fauG
-V+O61oV4d7pD6kh/9ti+I20ev9E2bFhc8e6kGVQa9QPSdubhjL08s9NIS+LI+H+S
-qHZGnEJlPqQewQcDWkYtuJfzt9WyVSHvutxMAJf7FJUnM7/oQ0dG0giZFmA7mn7S
-5u046uwBHjxIVkkJx0w3AJ6IDsBz4W9m6XJHMD4Q5QsDyZpCAGzFlH5hxIrff4Ia
-C1nEWTJ3s7xgaVY5/bQGeyzWZDbZvUjthB9+pSKPKrhC9IK31FOQeE4tGv2Bb0TX
-OwF0lkLgAOIua+rF7nKsu7/+6qqo+Nz2snmKtmcCAwEAAaNCMEAwHQYDVR0OBBYE
-FJ3AZ6YMItkm9UWrpmVSESfYRaxjMA8GA1UdEwEB/wQFMAMBAf8wDgYDVR0PAQH/
-BAQDAgEGMA0GCSqGSIb3DQEBDAUAA4ICAQCzV00QYk465KzquByvMiPIs0laUZx2
-KI15qldGF9X1Uva3ROgIRL8YhNILgM3FEv0AVQVhh0HctSSePMTYyPtwni94loMg
-Nt58D2kTiKV1NpgIpsbfrM7jWNa3Pt668+s0QNiigfV4Py/VpfzZotReBA4Xrf5B
-8OWycvpEgjNC6C1Y91aMYj+6QrCcDFx+LmUmXFNPALJ4fqENmS2NuB2OosSw/WDQ
-MKSOyARiqcTtNd56l+0OOF6SL5Nwpamcb6d9Ex1+xghIsV5n61EIJenmJWtSKZGc
-0jlzCFfemQa0W50QBuHCAKi4HEoCChTQwUHK+4w1IX2COPKpVJEZNZOUbWo6xbLQ
-u4mGk+ibyQ86p3q4ofB4Rvr8Ny/lioTz3/4E2aFooC8k4gmVBtWVyuEklut89pMF
-u+1z6S3RdTnX5yTb2E5fQ4+e0BQ5v1VwSJlXMbSc7kqYA5YwH2AG7hsj/oFgIxpH
-YoWlzBk0gG+zrBrjn/B7SK3VAdlntqlyk+otZrWyuOQ9PLLvTIzq6we/qzWaVYa8
-GKa1qF60g2xraUDTn9zxw2lrueFtCfTxqlB2Cnp9ehehVZZCmTEJ3WARjQUwfuaO
-RtGdFNrHF+QFlozEJLUbzxQHskD4o55BhrwE0GuWyCqANP2/7waj3VjFhT0+j/6e
-KeC2uAloGRwYQw==
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIIB/jCCAYWgAwIBAgIIdJclisc/elQwCgYIKoZIzj0EAwMwRTELMAkGA1UEBhMC
-VVMxFDASBgNVBAoMC0FmZmlybVRydXN0MSAwHgYDVQQDDBdBZmZpcm1UcnVzdCBQ
-cmVtaXVtIEVDQzAeFw0xMDAxMjkxNDIwMjRaFw00MDEyMzExNDIwMjRaMEUxCzAJ
-BgNVBAYTAlVTMRQwEgYDVQQKDAtBZmZpcm1UcnVzdDEgMB4GA1UEAwwXQWZmaXJt
-VHJ1c3QgUHJlbWl1bSBFQ0MwdjAQBgcqhkjOPQIBBgUrgQQAIgNiAAQNMF4bFZ0D
-0KF5Nbc6PJJ6yhUczWLznCZcBz3lVPqj1swS6vQUX+iOGasvLkjmrBhDeKzQN8O9
-ss0s5kfiGuZjuD0uL3jET9v0D6RoTFVya5UdThhClXjMNzyR4ptlKymjQjBAMB0G
-A1UdDgQWBBSaryl6wBE1NSZRMADDav5A1a7WPDAPBgNVHRMBAf8EBTADAQH/MA4G
-A1UdDwEB/wQEAwIBBjAKBggqhkjOPQQDAwNnADBkAjAXCfOHiFBar8jAQr9HX/Vs
-aobgxCd05DhT1wV/GzTjxi+zygk8N53X57hG8f2h4nECMEJZh0PUUd+60wkyWs6I
-flc9nF9Ca/UHLbXwgpP5WW+uZPpY5Yse42O+tYHNbwKMeQ==
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIIDoDCCAoigAwIBAgIBMTANBgkqhkiG9w0BAQUFADBDMQswCQYDVQQGEwJKUDEc
-MBoGA1UEChMTSmFwYW5lc2UgR292ZXJubWVudDEWMBQGA1UECxMNQXBwbGljYXRp
-b25DQTAeFw0wNzEyMTIxNTAwMDBaFw0xNzEyMTIxNTAwMDBaMEMxCzAJBgNVBAYT
-AkpQMRwwGgYDVQQKExNKYXBhbmVzZSBHb3Zlcm5tZW50MRYwFAYDVQQLEw1BcHBs
-aWNhdGlvbkNBMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAp23gdE6H
-j6UG3mii24aZS2QNcfAKBZuOquHMLtJqO8F6tJdhjYq+xpqcBrSGUeQ3DnR4fl+K
-f5Sk10cI/VBaVuRorChzoHvpfxiSQE8tnfWuREhzNgaeZCw7NCPbXCbkcXmP1G55
-IrmTwcrNwVbtiGrXoDkhBFcsovW8R0FPXjQilbUfKW1eSvNNcr5BViCH/OlQR9cw
-FO5cjFW6WY2H/CPek9AEjP3vbb3QesmlOmpyM8ZKDQUXKi17safY1vC+9D/qDiht
-QWEjdnjDuGWk81quzMKq2edY3rZ+nYVunyoKb58DKTCXKB28t89UKU5RMfkntigm
-/qJj5kEW8DOYRwIDAQABo4GeMIGbMB0GA1UdDgQWBBRUWssmP3HMlEYNllPqa0jQ
-k/5CdTAOBgNVHQ8BAf8EBAMCAQYwWQYDVR0RBFIwUKROMEwxCzAJBgNVBAYTAkpQ
-MRgwFgYDVQQKDA/ml6XmnKzlm73mlL/lupwxIzAhBgNVBAsMGuOCouODl+ODquOC
-seODvOOCt+ODp+ODs0NBMA8GA1UdEwEB/wQFMAMBAf8wDQYJKoZIhvcNAQEFBQAD
-ggEBADlqRHZ3ODrso2dGD/mLBqj7apAxzn7s2tGJfHrrLgy9mTLnsCTWw//1sogJ
-hyzjVOGjprIIC8CFqMjSnHH2HZ9g/DgzE+Ge3Atf2hZQKXsvcJEPmbo0NI2VdMV+
-eKlmXb3KIXdCEKxmJj3ekav9FfBv7WxfEPjzFvYDio+nEhEMy/0/ecGc/WLuo89U
-DNErXxc+4z6/wCs+CZv+iKZ+tJIX/COUgb1up8WMwusRRdv4QcmWdupwX3kSa+Sj
-B1oF7ydJzyGfikwJcGapJsErEU4z0g781mzSDjJkaP+tBXhfAx2o45CsJOAPQKdL
-rosot4LKGAfmt1t06SAZf7IbiVQ=
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIIDdzCCAl+gAwIBAgIIXDPLYixfszIwDQYJKoZIhvcNAQELBQAwPDEeMBwGA1UE
-AwwVQXRvcyBUcnVzdGVkUm9vdCAyMDExMQ0wCwYDVQQKDARBdG9zMQswCQYDVQQG
-EwJERTAeFw0xMTA3MDcxNDU4MzBaFw0zMDEyMzEyMzU5NTlaMDwxHjAcBgNVBAMM
-FUF0b3MgVHJ1c3RlZFJvb3QgMjAxMTENMAsGA1UECgwEQXRvczELMAkGA1UEBhMC
-REUwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCVhTuXbyo7LjvPpvMp
-Nb7PGKw+qtn4TaA+Gke5vJrf8v7MPkfoepbCJI419KkM/IL9bcFyYie96mvr54rM
-VD6QUM+A1JX76LWC1BTFtqlVJVfbsVD2sGBkWXppzwO3bw2+yj5vdHLqqjAqc2K+
-SZFhyBH+DgMq92og3AIVDV4VavzjgsG1xZ1kCWyjWZgHJ8cblithdHFsQ/H3NYkQ
-4J7sVaE3IqKHBAUsR320HLliKWYoyrfhk/WklAOZuXCFteZI6o1Q/NnezG8HDt0L
-cp2AMBYHlT8oDv3FdU9T1nSatCQujgKRz3bFmx5VdJx4IbHwLfELn8LVlhgf8FQi
-eowHAgMBAAGjfTB7MB0GA1UdDgQWBBSnpQaxLKYJYO7Rl+lwrrw7GWzbITAPBgNV
-HRMBAf8EBTADAQH/MB8GA1UdIwQYMBaAFKelBrEspglg7tGX6XCuvDsZbNshMBgG
-A1UdIAQRMA8wDQYLKwYBBAGwLQMEAQEwDgYDVR0PAQH/BAQDAgGGMA0GCSqGSIb3
-DQEBCwUAA4IBAQAmdzTblEiGKkGdLD4GkGDEjKwLVLgfuXvTBznk+j57sj1O7Z8j
-vZfza1zv7v1Apt+hk6EKhqzvINB5Ab149xnYJDE0BAGmuhWawyfc2E8PzBhj/5kP
-DpFrdRbhIfzYJsdHt6bPWHJxfrrhTZVHO8mvbaG0weyJ9rQPOLXiZNwlz6bb65pc
-maHFCN795trV1lpFDMS3wrUU77QR/w4VtfX128a961qn8FYiqTxlVMYVqL2Gns2D
-lmh6cYGJ4Qvh6hEbaAjMaZ7snkGeRDImeuKHCnE96+RapNLbxc3G3mB/ufNPRJLv
-KrcYPqcZ2Qt9sTdBQrC6YB3y/gkRsPCHe6ed
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIIGFDCCA/ygAwIBAgIIU+w77vuySF8wDQYJKoZIhvcNAQEFBQAwUTELMAkGA1UE
-BhMCRVMxQjBABgNVBAMMOUF1dG9yaWRhZCBkZSBDZXJ0aWZpY2FjaW9uIEZpcm1h
-cHJvZmVzaW9uYWwgQ0lGIEE2MjYzNDA2ODAeFw0wOTA1MjAwODM4MTVaFw0zMDEy
-MzEwODM4MTVaMFExCzAJBgNVBAYTAkVTMUIwQAYDVQQDDDlBdXRvcmlkYWQgZGUg
-Q2VydGlmaWNhY2lvbiBGaXJtYXByb2Zlc2lvbmFsIENJRiBBNjI2MzQwNjgwggIi
-MA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoICAQDKlmuO6vj78aI14H9M2uDDUtd9
-thDIAl6zQyrET2qyyhxdKJp4ERppWVevtSBC5IsP5t9bpgOSL/UR5GLXMnE42QQM
-cas9UX4PB99jBVzpv5RvwSmCwLTaUbDBPLutN0pcyvFLNg4kq7/DhHf9qFD0sefG
-L9ItWY16Ck6WaVICqjaY7Pz6FIMMNx/Jkjd/14Et5cS54D40/mf0PmbR0/RAz15i
-NA9wBj4gGFrO93IbJWyTdBSTo3OxDqqHECNZXyAFGUftaI6SEspd/NYrspI8IM/h
-X68gvqB2f3bl7BqGYTM+53u0P6APjqK5am+5hyZvQWyIplD9amML9ZMWGxmPsu2b
-m8mQ9QEM3xk9Dz44I8kvjwzRAv4bVdZO0I08r0+k8/6vKtMFnXkIoctXMbScyJCy
-Z/QYFpM6/EfY0XiWMR+6KwxfXZmtY4laJCB22N/9q06mIqqdXuYnin1oKaPnirja
-EbsXLZmdEyRG98Xi2J+Of8ePdG1asuhy9azuJBCtLxTa/y2aRnFHvkLfuwHb9H/T
-KI8xWVvTyQKmtFLKbpf7Q8UIJm+K9Lv9nyiqDdVF8xM6HdjAeI9BZzwelGSuewvF
-6NkBiDkal4ZkQdU7hwxu+g/GvUgUvzlN1J5Bto+WHWOWk9mVBngxaJ43BjuAiUVh
-OSPHG0SjFeUc+JIwuwIDAQABo4HvMIHsMBIGA1UdEwEB/wQIMAYBAf8CAQEwDgYD
-VR0PAQH/BAQDAgEGMB0GA1UdDgQWBBRlzeurNR4APn7VdMActHNHDhpkLzCBpgYD
-VR0gBIGeMIGbMIGYBgRVHSAAMIGPMC8GCCsGAQUFBwIBFiNodHRwOi8vd3d3LmZp
-cm1hcHJvZmVzaW9uYWwuY29tL2NwczBcBggrBgEFBQcCAjBQHk4AUABhAHMAZQBv
-ACAAZABlACAAbABhACAAQgBvAG4AYQBuAG8AdgBhACAANAA3ACAAQgBhAHIAYwBl
-AGwAbwBuAGEAIAAwADgAMAAxADcwDQYJKoZIhvcNAQEFBQADggIBABd9oPm03cXF
-661LJLWhAqvdpYhKsg9VSytXjDvlMd3+xDLx51tkljYyGOylMnfX40S2wBEqgLk9
-am58m9Ot/MPWo+ZkKXzR4Tgegiv/J2Wv+xYVxC5xhOW1//qkR71kMrv2JYSiJ0L1
-ILDCExARzRAVukKQKtJE4ZYm6zFIEv0q2skGz3QeqUvVhyj5eTSSPi5E6PaPT481
-PyWzOdxjKpBrIF/EUhJOlywqrJ2X3kjyo2bbwtKDlaZmp54lD+kLM5FlClrD2VQS
-3a/DTg4fJl4N3LON7NWBcN7STyQF82xO9UxJZo3R/9ILJUFI/lGExkKvgATP0H5k
-SeTy36LssUzAKh3ntLFlosS88Zj0qnAHY7S42jtM+kAiMFsRpvAFDsYCA0irhpuF
-3dvd6qJ2gHN99ZwExEWN57kci57q13XRcrHedUTnQn3iV2t93Jm8PYMo6oCTjcVM
-ZcFwgbg4/EMxsvYDNEeyrPsiBsse3RdHHF9mudMaotoRsaS8I8nkvof/uZS2+F0g
-StRf571oe2XyFR7SOqkt6dhrJKyXWERHrVkY8SFlcN7ONGCoQPHzPKTDKCOM/icz
-Q0CgFzzr6juwcqajuUpLXhZI9LK8yIySxZ2frHI2vDSANGupi5LAuBft7HZT9SQB
-jLMi6Et8Vcad+qMUu2WFbm5PEn4KPJ2V
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIIDdzCCAl+gAwIBAgIEAgAAuTANBgkqhkiG9w0BAQUFADBaMQswCQYDVQQGEwJJ
-RTESMBAGA1UEChMJQmFsdGltb3JlMRMwEQYDVQQLEwpDeWJlclRydXN0MSIwIAYD
-VQQDExlCYWx0aW1vcmUgQ3liZXJUcnVzdCBSb290MB4XDTAwMDUxMjE4NDYwMFoX
-DTI1MDUxMjIzNTkwMFowWjELMAkGA1UEBhMCSUUxEjAQBgNVBAoTCUJhbHRpbW9y
-ZTETMBEGA1UECxMKQ3liZXJUcnVzdDEiMCAGA1UEAxMZQmFsdGltb3JlIEN5YmVy
-VHJ1c3QgUm9vdDCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAKMEuyKr
-mD1X6CZymrV51Cni4eiVgLGw41uOKymaZN+hXe2wCQVt2yguzmKiYv60iNoS6zjr
-IZ3AQSsBUnuId9Mcj8e6uYi1agnnc+gRQKfRzMpijS3ljwumUNKoUMMo6vWrJYeK
-mpYcqWe4PwzV9/lSEy/CG9VwcPCPwBLKBsua4dnKM3p31vjsufFoREJIE9LAwqSu
-XmD+tqYF/LTdB1kC1FkYmGP1pWPgkAx9XbIGevOF6uvUA65ehD5f/xXtabz5OTZy
-dc93Uk3zyZAsuT3lySNTPx8kmCFcB5kpvcY67Oduhjprl3RjM71oGDHweI12v/ye
-jl0qhqdNkNwnGjkCAwEAAaNFMEMwHQYDVR0OBBYEFOWdWTCCR1jMrPoIVDaGezq1
-BE3wMBIGA1UdEwEB/wQIMAYBAf8CAQMwDgYDVR0PAQH/BAQDAgEGMA0GCSqGSIb3
-DQEBBQUAA4IBAQCFDF2O5G9RaEIFoN27TyclhAO992T9Ldcw46QQF+vaKSm2eT92
-9hkTI7gQCvlYpNRhcL0EYWoSihfVCr3FvDB81ukMJY2GQE/szKN+OMY3EU/t3Wgx
-jkzSswF07r51XgdIGn9w/xZchMB5hbgF/X++ZRGjD8ACtPhSNzkE1akxehi/oCr0
-Epn3o0WC4zxe9Z2etciefC7IpJ5OCBRLbf1wbWsaY71k5h+3zvDyny67G7fyUIhz
-ksLi4xaNmjICq44Y3ekQEe5+NauQrz4wlHrQMz2nZQ/1/I6eYs9HRCwBXbsdtTLS
-R9I4LtD+gdwyah617jzV/OeBHRnDJELqYzmp
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIIDUzCCAjugAwIBAgIBATANBgkqhkiG9w0BAQUFADBLMQswCQYDVQQGEwJOTzEd
-MBsGA1UECgwUQnV5cGFzcyBBUy05ODMxNjMzMjcxHTAbBgNVBAMMFEJ1eXBhc3Mg
-Q2xhc3MgMiBDQSAxMB4XDTA2MTAxMzEwMjUwOVoXDTE2MTAxMzEwMjUwOVowSzEL
-MAkGA1UEBhMCTk8xHTAbBgNVBAoMFEJ1eXBhc3MgQVMtOTgzMTYzMzI3MR0wGwYD
-VQQDDBRCdXlwYXNzIENsYXNzIDIgQ0EgMTCCASIwDQYJKoZIhvcNAQEBBQADggEP
-ADCCAQoCggEBAIs8B0XY9t/mx8q6jUPFR42wWsE425KEHK8T1A9vNkYgxC7McXA0
-ojTTNy7Y3Tp3L8DrKehc0rWpkTSHIln+zNvnma+WwajHQN2lFYxuyHyXA8vmIPLX
-l18xoS830r7uvqmtqEyeIWZDO6i88wmjONVZJMHCR3axiFyCO7srpgTXjAePzdVB
-HfCuuCkslFJgNJQ72uA40Z0zPhX0kzLFANq1KWYOOngPIVJfAuWSeyXTkh4vFZ2B
-5J2O6O+JzhRMVB0cgRJNcKi+EAUXfh/RuFdV7c27UsKwHnjCTTZoy1YmwVLBvXb3
-WNVyfh9EdrsAiR0WnVE1703CVu9r4Iw7DekCAwEAAaNCMEAwDwYDVR0TAQH/BAUw
-AwEB/zAdBgNVHQ4EFgQUP42aWYv8e3uco684sDntkHGA1sgwDgYDVR0PAQH/BAQD
-AgEGMA0GCSqGSIb3DQEBBQUAA4IBAQAVGn4TirnoB6NLJzKyQJHyIdFkhb5jatLP
-gcIV1Xp+DCmsNx4cfHZSldq1fyOhKXdlyTKdqC5Wq2B2zha0jX94wNWZUYN/Xtm+
-DKhQ7SLHrQVMdvvt7h5HZPb3J31cKA9FxVxiXqaakZG3Uxcu3K1gnZZkOb1naLKu
-BctN518fV4bVIJwo+28TOPX2EZL2fZleHwzoq0QkKXJAPTZSr4xYkHPB7GEseaHs
-h7U/2k3ZIQAw3pDaDtMaSKk+hQsUi4y8QZ5q9w5wwDX3OaJdZtB7WZ+oRxKaJyOk
-LY4ng5IgodcVf/EuGO70SH8vf/GhGLWhC5SgYiAynB321O+/TIho
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIIFWTCCA0GgAwIBAgIBAjANBgkqhkiG9w0BAQsFADBOMQswCQYDVQQGEwJOTzEd
-MBsGA1UECgwUQnV5cGFzcyBBUy05ODMxNjMzMjcxIDAeBgNVBAMMF0J1eXBhc3Mg
-Q2xhc3MgMiBSb290IENBMB4XDTEwMTAyNjA4MzgwM1oXDTQwMTAyNjA4MzgwM1ow
-TjELMAkGA1UEBhMCTk8xHTAbBgNVBAoMFEJ1eXBhc3MgQVMtOTgzMTYzMzI3MSAw
-HgYDVQQDDBdCdXlwYXNzIENsYXNzIDIgUm9vdCBDQTCCAiIwDQYJKoZIhvcNAQEB
-BQADggIPADCCAgoCggIBANfHXvfBB9R3+0Mh9PT1aeTuMgHbo4Yf5FkNuud1g1Lr
-6hxhFUi7HQfKjK6w3Jad6sNgkoaCKHOcVgb/S2TwDCo3SbXlzwx87vFKu3MwZfPV
-L4O2fuPn9Z6rYPnT8Z2SdIrkHJasW4DptfQxh6NR/Md+oW+OU3fUl8FVM5I+GC91
-1K2GScuVr1QGbNgGE41b/+EmGVnAJLqBcXmQRFBoJJRfuLMR8SlBYaNByyM21cHx
-MlAQTn/0hpPshNOOvEu/XAFOBz3cFIqUCqTqc/sLUegTBxj6DvEr0VQVfTzh97QZ
-QmdiXnfgolXsttlpF9U6r0TtSsWe5HonfOV116rLJeffawrbD02TTqigzXsu8lkB
-arcNuAeBfos4GzjmCleZPe4h6KP1DBbdi+w0jpwqHAAVF41og9JwnxgIzRFo1clr
-Us3ERo/ctfPYV3Me6ZQ5BL/T3jjetFPsaRyifsSP5BtwrfKi+fv3FmRmaZ9JUaLi
-FRhnBkp/1Wy1TbMz4GHrXb7pmA8y1x1LPC5aAVKRCfLf6o3YBkBjqhHk/sM3nhRS
-P/TizPJhk9H9Z2vXUq6/aKtAQ6BXNVN48FP4YUIHZMbXb5tMOA1jrGKvNouicwoN
-9SG9dKpN6nIDSdvHXx1iY8f93ZHsM+71bbRuMGjeyNYmsHVee7QHIJihdjK4TWxP
-AgMBAAGjQjBAMA8GA1UdEwEB/wQFMAMBAf8wHQYDVR0OBBYEFMmAd+BikoL1Rpzz
-uvdMw964o605MA4GA1UdDwEB/wQEAwIBBjANBgkqhkiG9w0BAQsFAAOCAgEAU18h
-9bqwOlI5LJKwbADJ784g7wbylp7ppHR/ehb8t/W2+xUbP6umwHJdELFx7rxP462s
-A20ucS6vxOOto70MEae0/0qyexAQH6dXQbLArvQsWdZHEIjzIVEpMMpghq9Gqx3t
-OluwlN5E40EIosHsHdb9T7bWR9AUC8rmyrV7d35BH16Dx7aMOZawP5aBQW9gkOLo
-+fsicdl9sz1Gv7SEr5AcD48Saq/v7h56rgJKihcrdv6sVIkkLE8/trKnToyokZf7
-KcZ7XC25y2a2t6hbElGFtQl+Ynhw/qlqYLYdDnkM/crqJIByw5c/8nerQyIKx+u2
-DISCLIBrQYoIwOula9+ZEsuK1V6ADJHgJgg2SMX6OBE1/yWDLfJ6v9r9jv6ly0Us
-H8SIU653DtmadsWOLB2jutXsMq7Aqqz30XpN69QH4kj3Io6wpJ9qzo6ysmD0oyLQ
-I+uUWnpp3Q+/QFesa1lQ2aOZ4W7+jQF5JyMV3pKdewlNWudLSDBaGOYKbeaP4NK7
-5t98biGCwWg5TbSYWGZizEqQXsP6JwSxeRV0mcy+rSDeJmAc61ZRpqPq5KM/p/9h
-3PFaTWwyI0PurKju7koSCTxdccK+efrCh2gdC/1cacwG0Jp9VJkqyTkaGa9LKkPz
-Y11aWOIv4x3kqdbQCtCev9eBCfHJxyYNrJgWVqA=
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIIFWTCCA0GgAwIBAgIBAjANBgkqhkiG9w0BAQsFADBOMQswCQYDVQQGEwJOTzEd
-MBsGA1UECgwUQnV5cGFzcyBBUy05ODMxNjMzMjcxIDAeBgNVBAMMF0J1eXBhc3Mg
-Q2xhc3MgMyBSb290IENBMB4XDTEwMTAyNjA4Mjg1OFoXDTQwMTAyNjA4Mjg1OFow
-TjELMAkGA1UEBhMCTk8xHTAbBgNVBAoMFEJ1eXBhc3MgQVMtOTgzMTYzMzI3MSAw
-HgYDVQQDDBdCdXlwYXNzIENsYXNzIDMgUm9vdCBDQTCCAiIwDQYJKoZIhvcNAQEB
-BQADggIPADCCAgoCggIBAKXaCpUWUOOV8l6ddjEGMnqb8RB2uACatVI2zSRHsJ8Y
-ZLya9vrVediQYkwiL944PdbgqOkcLNt4EemOaFEVcsfzM4fkoF0LXOBXByow9c3E
-N3coTRiR5r/VUv1xLXA+58bEiuPwKAv0dpihi4dVsjoT/Lc+JzeOIuOoTyrvYLs9
-tznDDgFHmV0ST9tD+leh7fmdvhFHJlsTmKtdFoqwNxxXnUX/iJY2v7vKB3tvh2PX
-0DJq1l1sDPGzbjniazEuOQAnFN44wOwZZoYS6J1yFhNkUsepNxz9gjDthBgd9K5c
-/3ATAOux9TN6S9ZV+AWNS2mw9bMoNlwUxFFzTWsL8TQH2xc519woe2v1n/MuwU8X
-KhDzzMro6/1rqy6any2CbgTUUgGTLT2G/H783+9CHaZr77kgxve9oKeV/afmiSTY
-zIw0bOIjL9kSGiG5VZFvC5F5GQytQIgLcOJ60g7YaEi7ghM5EFjp2CoHxhLbWNvS
-O1UQRwUVZ2J+GGOmRj8JDlQyXr8NYnon74Do29lLBlo3WiXQCBJ31G8JUJc9yB3D
-34xFMFbG02SrZvPAXpacw8Tvw3xrizp5f7NJzz3iiZ+gMEuFuZyUJHmPfWupRWgP
-K9Dx2hzLabjKSWJtyNBjYt1gD1iqj6G8BaVmos8bdrKEZLFMOVLAMLrwjEsCsLa3
-AgMBAAGjQjBAMA8GA1UdEwEB/wQFMAMBAf8wHQYDVR0OBBYEFEe4zf/lb+74suwv
-Tg75JbCOPGvDMA4GA1UdDwEB/wQEAwIBBjANBgkqhkiG9w0BAQsFAAOCAgEAACAj
-QTUEkMJAYmDv4jVM1z+s4jSQuKFvdvoWFqRINyzpkMLyPPgKn9iB5btb2iUspKdV
-cSQy9sgL8rxq+JOssgfCX5/bzMiKqr5qb+FJEMwx14C7u8jYog5kV+qi9cKpMRXS
-IGrs/CIBKM+GuIAeqcwRpTzyFrNHnfzSgCHEy9BHcEGhyoMZCCxt8l13nIoUE9Q2
-HJLw5QY33KbmkJs4j1xrG0aGQ0JfPgEHU1RdZX33inOhmlRaHylDFCfChQ+1iHsa
-O5S3HWCntZznKWlXWpuTekMwGwPXYshApqr8ZORK15FTAaggiG6cX0S5y2CBNOxv
-033aSF/rtJC8LakcC6wc1aJoIIAE1vyxjy+7SjENSoYc6+I2KSb12tjE8nVhz36u
-dmNKekBlk4f4HoCMhuWG1o8O/FMsYOgWYRqiPkN7zTlgVGr18okmAWiDSKIz6MkE
-kbIRNBE+6tBDGR8Dk5AM/1E9V/RBbuHLoL7ryWPNbczk+DaqaJ3tvV2XcEQNtg41
-3OEMXbugUZTLfhbrES+jkkXITHHZvMmZUldGL1DPvTVp9D0VzgalLA8+9oG6lLvD
-u79leNKGef9JOxqDDPDeeOzI8k1MGt6CKfjBWtrt7uYnXuhF0J0cUahoq0Tj0Itq
-4/g7u9xN12TyUb7mqqta6THuBrxzvxNiCp/HuZc=
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIIEDzCCAvegAwIBAgIBATANBgkqhkiG9w0BAQUFADBKMQswCQYDVQQGEwJTSzET
-MBEGA1UEBxMKQnJhdGlzbGF2YTETMBEGA1UEChMKRGlzaWcgYS5zLjERMA8GA1UE
-AxMIQ0EgRGlzaWcwHhcNMDYwMzIyMDEzOTM0WhcNMTYwMzIyMDEzOTM0WjBKMQsw
-CQYDVQQGEwJTSzETMBEGA1UEBxMKQnJhdGlzbGF2YTETMBEGA1UEChMKRGlzaWcg
-YS5zLjERMA8GA1UEAxMIQ0EgRGlzaWcwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAw
-ggEKAoIBAQCS9jHBfYj9mQGp2HvycXXxMcbzdWb6UShGhJd4NLxs/LxFWYgmGErE
-Nx+hSkS943EE9UQX4j/8SFhvXJ56CbpRNyIjZkMhsDxkovhqFQ4/61HhVKndBpnX
-mjxUizkDPw/Fzsbrg3ICqB9x8y34dQjbYkzo+s7552oftms1grrijxaSfQUMbEYD
-XcDtab86wYqg6I7ZuUUohwjstMoVvoLdtUSLLa2GDGhibYVW8qwUYzrG0ZmsNHhW
-S8+2rT+MitcE5eN4TPWGqvWP+j1scaMtymfraHtuM6kMgiioTGohQBUgDCZbg8Kp
-FhXAJIJdKxatymP2dACw30PEEGBWZ2NFAgMBAAGjgf8wgfwwDwYDVR0TAQH/BAUw
-AwEB/zAdBgNVHQ4EFgQUjbJJaJ1yCCW5wCf1UJNWSEZx+Y8wDgYDVR0PAQH/BAQD
-AgEGMDYGA1UdEQQvMC2BE2Nhb3BlcmF0b3JAZGlzaWcuc2uGFmh0dHA6Ly93d3cu
-ZGlzaWcuc2svY2EwZgYDVR0fBF8wXTAtoCugKYYnaHR0cDovL3d3dy5kaXNpZy5z
-ay9jYS9jcmwvY2FfZGlzaWcuY3JsMCygKqAohiZodHRwOi8vY2EuZGlzaWcuc2sv
-Y2EvY3JsL2NhX2Rpc2lnLmNybDAaBgNVHSAEEzARMA8GDSuBHpGT5goAAAABAQEw
-DQYJKoZIhvcNAQEFBQADggEBAF00dGFMrzvY/59tWDYcPQuBDRIrRhCA/ec8J9B6
-yKm2fnQwM6M6int0wHl5QpNt/7EpFIKrIYwvF/k/Ji/1WcbvgAa3mkkp7M5+cTxq
-EEHA9tOasnxakZzArFvITV734VP/Q3f8nktnbNfzg9Gg4H8l37iYC5oyOGwwoPP/
-CBUz91BKez6jPiCp3C9WgArtQVCwyfTssuMmRAAOb54GvCKWU3BlxFAKRmukLyeB
-EicTXxChds6KezfqwzlhA5WYOudsiCUI/HloDYd9Yvi0X/vF2Ey9WLw/Q1vUHgFN
-PGO+I++MzVpQuGhU+QqZMxEA4Z7CRneC9VkGjCFMhwnN5ag=
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIIFaTCCA1GgAwIBAgIJAMMDmu5QkG4oMA0GCSqGSIb3DQEBBQUAMFIxCzAJBgNV
-BAYTAlNLMRMwEQYDVQQHEwpCcmF0aXNsYXZhMRMwEQYDVQQKEwpEaXNpZyBhLnMu
-MRkwFwYDVQQDExBDQSBEaXNpZyBSb290IFIxMB4XDTEyMDcxOTA5MDY1NloXDTQy
-MDcxOTA5MDY1NlowUjELMAkGA1UEBhMCU0sxEzARBgNVBAcTCkJyYXRpc2xhdmEx
-EzARBgNVBAoTCkRpc2lnIGEucy4xGTAXBgNVBAMTEENBIERpc2lnIFJvb3QgUjEw
-ggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoICAQCqw3j33Jijp1pedxiy3QRk
-D2P9m5YJgNXoqqXinCaUOuiZc4yd39ffg/N4T0Dhf9Kn0uXKE5Pn7cZ3Xza1lK/o
-OI7bm+V8u8yN63Vz4STN5qctGS7Y1oprFOsIYgrY3LMATcMjfF9DCCMyEtztDK3A
-fQ+lekLZWnDZv6fXARz2m6uOt0qGeKAeVjGu74IKgEH3G8muqzIm1Cxr7X1r5OJe
-IgpFy4QxTaz+29FHuvlglzmxZcfe+5nkCiKxLU3lSCZpq+Kq8/v8kiky6bM+TR8n
-oc2OuRf7JT7JbvN32g0S9l3HuzYQ1VTW8+DiR0jm3hTaYVKvJrT1cU/J19IG32PK
-/yHoWQbgCNWEFVP3Q+V8xaCJmGtzxmjOZd69fwX3se72V6FglcXM6pM6vpmumwKj
-rckWtc7dXpl4fho5frLABaTAgqWjR56M6ly2vGfb5ipN0gTco65F97yLnByn1tUD
-3AjLLhbKXEAz6GfDLuemROoRRRw1ZS0eRWEkG4IupZ0zXWX4Qfkuy5Q/H6MMMSRE
-7cderVC6xkGbrPAXZcD4XW9boAo0PO7X6oifmPmvTiT6l7Jkdtqr9O3jw2Dv1fkC
-yC2fg69naQanMVXVz0tv/wQFx1isXxYb5dKj6zHbHzMVTdDypVP1y+E9Tmgt2BLd
-qvLmTZtJ5cUoobqwWsagtQIDAQABo0IwQDAPBgNVHRMBAf8EBTADAQH/MA4GA1Ud
-DwEB/wQEAwIBBjAdBgNVHQ4EFgQUiQq0OJMa5qvum5EY+fU8PjXQ04IwDQYJKoZI
-hvcNAQEFBQADggIBADKL9p1Kyb4U5YysOMo6CdQbzoaz3evUuii+Eq5FLAR0rBNR
-xVgYZk2C2tXck8An4b58n1KeElb21Zyp9HWc+jcSjxyT7Ff+Bw+r1RL3D65hXlaA
-SfX8MPWbTx9BLxyE04nH4toCdu0Jz2zBuByDHBb6lM19oMgY0sidbvW9adRtPTXo
-HqJPYNcHKfyyo6SdbhWSVhlMCrDpfNIZTUJG7L399ldb3Zh+pE3McgODWF3vkzpB
-emOqfDqo9ayk0d2iLbYq/J8BjuIQscTK5GfbVSUZP/3oNn6z4eGBrxEWi1CXYBmC
-AMBrTXO40RMHPuq2MU/wQppt4hF05ZSsjYSVPCGvxdpHyN85YmLLW1AL14FABZyb
-7bq2ix4Eb5YgOe2kfSnbSM6C3NQCjR0EMVrHS/BsYVLXtFHCgWzN4funodKSds+x
-DzdYpPJScWc/DIh4gInByLUfkmO+p3qKViwaqKactV2zY9ATIKHrkWzQjX2v3wvk
-F7mGnjixlAxYjOBVqjtjbZqJYLhkKpLGN/R+Q0O3c+gB53+XD9fyexn9GtePyfqF
-a3qdnom2piiZk4hA9z7NUaPK6u95RyG1/jLix8NRb76AdPCkwzryT+lf3xkK8jsT
-Q6wxpLPn6/wY1gGp8yqPNg7rtLG8t0zJa7+h89n07eLw4+1knj0vllJPgFOL
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIIFaTCCA1GgAwIBAgIJAJK4iNuwisFjMA0GCSqGSIb3DQEBCwUAMFIxCzAJBgNV
-BAYTAlNLMRMwEQYDVQQHEwpCcmF0aXNsYXZhMRMwEQYDVQQKEwpEaXNpZyBhLnMu
-MRkwFwYDVQQDExBDQSBEaXNpZyBSb290IFIyMB4XDTEyMDcxOTA5MTUzMFoXDTQy
-MDcxOTA5MTUzMFowUjELMAkGA1UEBhMCU0sxEzARBgNVBAcTCkJyYXRpc2xhdmEx
-EzARBgNVBAoTCkRpc2lnIGEucy4xGTAXBgNVBAMTEENBIERpc2lnIFJvb3QgUjIw
-ggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoICAQCio8QACdaFXS1tFPbCw3Oe
-NcJxVX6B+6tGUODBfEl45qt5WDza/3wcn9iXAng+a0EE6UG9vgMsRfYvZNSrXaNH
-PWSb6WiaxswbP7q+sos0Ai6YVRn8jG+qX9pMzk0DIaPY0jSTVpbLTAwAFjxfGs3I
-x2ymrdMxp7zo5eFm1tL7A7RBZckQrg4FY8aAamkw/dLukO8NJ9+flXP04SXabBbe
-QTg06ov80egEFGEtQX6sx3dOy1FU+16SGBsEWmjGycT6txOgmLcRK7fWV8x8nhfR
-yyX+hk4kLlYMeE2eARKmK6cBZW58Yh2EhN/qwGu1pSqVg8NTEQxzHQuyRpDRQjrO
-QG6Vrf/GlK1ul4SOfW+eioANSW1z4nuSHsPzwfPrLgVv2RvPN3YEyLRa5Beny912
-H9AZdugsBbPWnDTYltxhh5EF5EQIM8HauQhl1K6yNg3ruji6DOWbnuuNZt2Zz9aJ
-QfYEkoopKW1rOhzndX0CcQ7zwOe9yxndnWCywmZgtrEE7snmhrmaZkCo5xHtgUUD
-i/ZnWejBBhG93c+AAk9lQHhcR1DIm+YfgXvkRKhbhZri3lrVx/k6RGZL5DJUfORs
-nLMOPReisjQS1n6yqEm70XooQL6iFh/f5DcfEXP7kAplQ6INfPgGAVUzfbANuPT1
-rqVCV3w2EYx7XsQDnYx5nQIDAQABo0IwQDAPBgNVHRMBAf8EBTADAQH/MA4GA1Ud
-DwEB/wQEAwIBBjAdBgNVHQ4EFgQUtZn4r7CU9eMg1gqtzk5WpC5uQu0wDQYJKoZI
-hvcNAQELBQADggIBACYGXnDnZTPIgm7ZnBc6G3pmsgH2eDtpXi/q/075KMOYKmFM
-tCQSin1tERT3nLXK5ryeJ45MGcipvXrA1zYObYVybqjGom32+nNjf7xueQgcnYqf
-GopTpti72TVVsRHFqQOzVju5hJMiXn7B9hJSi+osZ7z+Nkz1uM/Rs0mSO9MpDpkb
-lvdhuDvEK7Z4bLQjb/D907JedR+Zlais9trhxTF7+9FGs9K8Z7RiVLoJ92Owk6Ka
-+elSLotgEqv89WBW7xBci8QaQtyDW2QOy7W81k/BfDxujRNt+3vrMNDcTa/F1bal
-TFtxyegxvug4BkihGuLq0t4SOVga/4AOgnXmt8kHbA7v/zjxmHHEt38OFdAlab0i
-nSvtBfZGR6ztwPDUO+Ls7pZbkBNOHlY667DvlruWIxG68kOGdGSVyCh13x01utI3
-gzhTODY7z2zp+WsO0PsE6E9312UBeIYMej4hYvF/Y3EMyZ9E26gnonW+boE+18Dr
-G5gPcFw0sorMwIUY6256s/daoQe/qUKS82Ail+QUoQebTnbAjn39pCXHR+3/H3Os
-zMOl6W8KjptlwlCFtaOgUxLMVYdh84GuEEZhvUQhuMI9dM9+JDX6HAcOmz0iyu8x
-L4ysEr3vQCj8KWefshNPZiTEUxnpHikV7+ZtsH8tZ/3zbBt1RqPlShfppNcL
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIICCTCCAY+gAwIBAgIQaEpYcIBr8I8C+vbe6LCQkDAKBggqhkjOPQQDAzBGMQsw
-CQYDVQQGEwJDTjEaMBgGA1UEChMRV29TaWduIENBIExpbWl0ZWQxGzAZBgNVBAMT
-EkNBIFdvU2lnbiBFQ0MgUm9vdDAeFw0xNDExMDgwMDU4NThaFw00NDExMDgwMDU4
-NThaMEYxCzAJBgNVBAYTAkNOMRowGAYDVQQKExFXb1NpZ24gQ0EgTGltaXRlZDEb
-MBkGA1UEAxMSQ0EgV29TaWduIEVDQyBSb290MHYwEAYHKoZIzj0CAQYFK4EEACID
-YgAE4f2OuEMkq5Z7hcK6C62N4DrjJLnSsb6IOsq/Srj57ywvr1FQPEd1bPiUt5v8
-KB7FVMxjnRZLU8HnIKvNrCXSf4/CwVqCXjCLelTOA7WRf6qU0NGKSMyCBSah1VES
-1ns2o0IwQDAOBgNVHQ8BAf8EBAMCAQYwDwYDVR0TAQH/BAUwAwEB/zAdBgNVHQ4E
-FgQUqv3VWqP2h4syhf3RMluARZPzA7gwCgYIKoZIzj0EAwMDaAAwZQIxAOSkhLCB
-1T2wdKyUpOgOPQB0TKGXa/kNUTyh2Tv0Daupn75OcsqF1NnstTJFGG+rrQIwfcf3
-aWMvoeGY7xMQ0Xk/0f7qO3/eVvSQsRUR2LIiFdAvwyYua/GRspBl9JrmkO5K
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIIFjTCCA3WgAwIBAgIEGErM1jANBgkqhkiG9w0BAQsFADBWMQswCQYDVQQGEwJD
-TjEwMC4GA1UECgwnQ2hpbmEgRmluYW5jaWFsIENlcnRpZmljYXRpb24gQXV0aG9y
-aXR5MRUwEwYDVQQDDAxDRkNBIEVWIFJPT1QwHhcNMTIwODA4MDMwNzAxWhcNMjkx
-MjMxMDMwNzAxWjBWMQswCQYDVQQGEwJDTjEwMC4GA1UECgwnQ2hpbmEgRmluYW5j
-aWFsIENlcnRpZmljYXRpb24gQXV0aG9yaXR5MRUwEwYDVQQDDAxDRkNBIEVWIFJP
-T1QwggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoICAQDXXWvNED8fBVnVBU03
-sQ7smCuOFR36k0sXgiFxEFLXUWRwFsJVaU2OFW2fvwwbwuCjZ9YMrM8irq93VCpL
-TIpTUnrD7i7es3ElweldPe6hL6P3KjzJIx1qqx2hp/Hz7KDVRM8Vz3IvHWOX6Jn5
-/ZOkVIBMUtRSqy5J35DNuF++P96hyk0g1CXohClTt7GIH//62pCfCqktQT+x8Rgp
-7hZZLDRJGqgG16iI0gNyejLi6mhNbiyWZXvKWfry4t3uMCz7zEasxGPrb382KzRz
-EpR/38wmnvFyXVBlWY9ps4deMm/DGIq1lY+wejfeWkU7xzbh72fROdOXW3NiGUgt
-hxwG+3SYIElz8AXSG7Ggo7cbcNOIabla1jj0Ytwli3i/+Oh+uFzJlU9fpy25IGvP
-a931DfSCt/SyZi4QKPaXWnuWFo8BGS1sbn85WAZkgwGDg8NNkt0yxoekN+kWzqot
-aK8KgWU6cMGbrU1tVMoqLUuFG7OA5nBFDWteNfB/O7ic5ARwiRIlk9oKmSJgamNg
-TnYGmE69g60dWIolhdLHZR4tjsbftsbhf4oEIRUpdPA+nJCdDC7xij5aqgwJHsfV
-PKPtl8MeNPo4+QgO48BdK4PRVmrJtqhUUy54Mmc9gn900PvhtgVguXDbjgv5E1hv
-cWAQUhC5wUEJ73IfZzF4/5YFjQIDAQABo2MwYTAfBgNVHSMEGDAWgBTj/i39KNAL
-tbq2osS/BqoFjJP7LzAPBgNVHRMBAf8EBTADAQH/MA4GA1UdDwEB/wQEAwIBBjAd
-BgNVHQ4EFgQU4/4t/SjQC7W6tqLEvwaqBYyT+y8wDQYJKoZIhvcNAQELBQADggIB
-ACXGumvrh8vegjmWPfBEp2uEcwPenStPuiB/vHiyz5ewG5zz13ku9Ui20vsXiObT
-ej/tUxPQ4i9qecsAIyjmHjdXNYmEwnZPNDatZ8POQQaIxffu2Bq41gt/UP+TqhdL
-jOztUmCypAbqTuv0axn96/Ua4CUqmtzHQTb3yHQFhDmVOdYLO6Qn+gjYXB74BGBS
-ESgoA//vU2YApUo0FmZ8/Qmkrp5nGm9BC2sGE5uPhnEFtC+NiWYzKXZUmhH4J/qy
-P5Hgzg0b8zAarb8iXRvTvyUFTeGSGn+ZnzxEk8rUQElsgIfXBDrDMlI1Dlb4pd19
-xIsNER9Tyx6yF7Zod1rg1MvIB671Oi6ON7fQAUtDKXeMOZePglr4UeWJoBjnaH9d
-Ci77o0cOPaYjesYBx4/IXr9tgFa+iiS6M+qf4TIRnvHST4D2G0CvOJ4RUHlzEhLN
-5mydLIhyPDCBBpEi6lmt2hkuIsKNuYyH4Ga8cyNfIWRjgEj1oDwYPZTISEEdQLpe
-/v5WOaHIz16eGWRGENoXkbcFgKyLmZJ956LYBws2J+dIeWCKw9cTXPhyQN9Ky8+Z
-AAoACxGV2lZFA4gKn2fQ1XmxqI1AbQ3CekD6819kR5LLU7m7Wc5P/dAVUwHY3+vZ
-5nbv0CO7O6l5s9UCKc2Jo5YPSjXnTkLAdc0Hz+Ys63su
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIIDVTCCAj2gAwIBAgIESTMAATANBgkqhkiG9w0BAQUFADAyMQswCQYDVQQGEwJD
-TjEOMAwGA1UEChMFQ05OSUMxEzARBgNVBAMTCkNOTklDIFJPT1QwHhcNMDcwNDE2
-MDcwOTE0WhcNMjcwNDE2MDcwOTE0WjAyMQswCQYDVQQGEwJDTjEOMAwGA1UEChMF
-Q05OSUMxEzARBgNVBAMTCkNOTklDIFJPT1QwggEiMA0GCSqGSIb3DQEBAQUAA4IB
-DwAwggEKAoIBAQDTNfc/c3et6FtzF8LRb+1VvG7q6KR5smzDo+/hn7E7SIX1mlwh
-IhAsxYLO2uOabjfhhyzcuQxauohV3/2q2x8x6gHx3zkBwRP9SFIhxFXf2tizVHa6
-dLG3fdfA6PZZxU3Iva0fFNrfWEQlMhkqx35+jq44sDB7R3IJMfAw28Mbdim7aXZO
-V/kbZKKTVrdvmW7bCgScEeOAH8tjlBAKqeFkgjH5jCftppkA9nCTGPihNIaj3XrC
-GHn2emU1z5DrvTOTn1OrczvmmzQgLx3vqR1jGqCA2wMv+SYahtKNu6m+UjqHZ0gN
-v7Sg2Ca+I19zN38m5pIEo3/PIKe38zrKy5nLAgMBAAGjczBxMBEGCWCGSAGG+EIB
-AQQEAwIABzAfBgNVHSMEGDAWgBRl8jGtKvf33VKWCscCwQ7vptU7ETAPBgNVHRMB
-Af8EBTADAQH/MAsGA1UdDwQEAwIB/jAdBgNVHQ4EFgQUZfIxrSr3991SlgrHAsEO
-76bVOxEwDQYJKoZIhvcNAQEFBQADggEBAEs17szkrr/Dbq2flTtLP1se31cpolnK
-OOK5Gv+e5m4y3R6u6jW39ZORTtpC4cMXYFDy0VwmuYK36m3knITnA3kXr5g9lNvH
-ugDnuL8BV8F3RTIMO/G0HAiw/VGgod2aHRM2mm23xzy54cXZF/qD1T0VoDy7Hgvi
-yJA/qIYM/PmLXoXLT1tLYhFHxUV8BS9BsZ4QaRuZluBVeftOhpm4lNqGOGqTo+fL
-buXf6iFViZx9fX+Y9QCJ7uOEwFyWtcVG6kbghVW2G8kS1sHNzYDzAgE8yGnLRUhj
-2JTQ7IUOO04RZfSCjKY9ri4ilAnIXOo8gV0WKgOXFlUJ24pBgp5mmxE=
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIIEHTCCAwWgAwIBAgIQToEtioJl4AsC7j41AkblPTANBgkqhkiG9w0BAQUFADCB
-gTELMAkGA1UEBhMCR0IxGzAZBgNVBAgTEkdyZWF0ZXIgTWFuY2hlc3RlcjEQMA4G
-A1UEBxMHU2FsZm9yZDEaMBgGA1UEChMRQ09NT0RPIENBIExpbWl0ZWQxJzAlBgNV
-BAMTHkNPTU9ETyBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eTAeFw0wNjEyMDEwMDAw
-MDBaFw0yOTEyMzEyMzU5NTlaMIGBMQswCQYDVQQGEwJHQjEbMBkGA1UECBMSR3Jl
-YXRlciBNYW5jaGVzdGVyMRAwDgYDVQQHEwdTYWxmb3JkMRowGAYDVQQKExFDT01P
-RE8gQ0EgTGltaXRlZDEnMCUGA1UEAxMeQ09NT0RPIENlcnRpZmljYXRpb24gQXV0
-aG9yaXR5MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA0ECLi3LjkRv3
-UcEbVASY06m/weaKXTuH+7uIzg3jLz8GlvCiKVCZrts7oVewdFFxze1CkU1B/qnI
-2GqGd0S7WWaXUF601CxwRM/aN5VCaTwwxHGzUvAhTaHYujl8HJ6jJJ3ygxaYqhZ8
-Q5sVW7euNJH+1GImGEaaP+vB+fGQV+useg2L23IwambV4EajcNxo2f8ESIl33rXp
-+2dtQem8Ob0y2WIC8bGoPW43nOIv4tOiJovGuFVDiOEjPqXSJDlqR6sA1KGzqSX+
-DT+nHbrTUcELpNqsOO9VUCQFZUaTNE8tja3G1CEZ0o7KBWFxB3NH5YoZEr0ETc5O
-nKVIrLsm9wIDAQABo4GOMIGLMB0GA1UdDgQWBBQLWOWLxkwVN6RAqTCpIb5HNlpW
-/zAOBgNVHQ8BAf8EBAMCAQYwDwYDVR0TAQH/BAUwAwEB/zBJBgNVHR8EQjBAMD6g
-PKA6hjhodHRwOi8vY3JsLmNvbW9kb2NhLmNvbS9DT01PRE9DZXJ0aWZpY2F0aW9u
-QXV0aG9yaXR5LmNybDANBgkqhkiG9w0BAQUFAAOCAQEAPpiem/Yb6dc5t3iuHXIY
-SdOH5EOC6z/JqvWote9VfCFSZfnVDeFs9D6Mk3ORLgLETgdxb8CPOGEIqB6BCsAv
-IC9Bi5HcSEW88cbeunZrM8gALTFGTO3nnc+IlP8zwFboJIYmuNg4ON8qa90SzMc/
-RxdMosIGlgnW2/4/PEZB31jiVg88O8EckzXZOFKs7sjsLjBOlDW0JB9LeGna8gI4
-zJVSk/BwJVmcIGfE7vmLV2H0knZ9P4SNVbfo5azV8fUZVqZa+5Acr5Pr5RzUZ5dd
-BA6+C4OmF4O5MBKgxTMVBbkN+8cFduPYSo38NBejxiEovjBFMR7HeL5YYTisO+IB
-ZQ==
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIICiTCCAg+gAwIBAgIQH0evqmIAcFBUTAGem2OZKjAKBggqhkjOPQQDAzCBhTEL
-MAkGA1UEBhMCR0IxGzAZBgNVBAgTEkdyZWF0ZXIgTWFuY2hlc3RlcjEQMA4GA1UE
-BxMHU2FsZm9yZDEaMBgGA1UEChMRQ09NT0RPIENBIExpbWl0ZWQxKzApBgNVBAMT
-IkNPTU9ETyBFQ0MgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkwHhcNMDgwMzA2MDAw
-MDAwWhcNMzgwMTE4MjM1OTU5WjCBhTELMAkGA1UEBhMCR0IxGzAZBgNVBAgTEkdy
-ZWF0ZXIgTWFuY2hlc3RlcjEQMA4GA1UEBxMHU2FsZm9yZDEaMBgGA1UEChMRQ09N
-T0RPIENBIExpbWl0ZWQxKzApBgNVBAMTIkNPTU9ETyBFQ0MgQ2VydGlmaWNhdGlv
-biBBdXRob3JpdHkwdjAQBgcqhkjOPQIBBgUrgQQAIgNiAAQDR3svdcmCFYX7deSR
-FtSrYpn1PlILBs5BAH+X4QokPB0BBO490o0JlwzgdeT6+3eKKvUDYEs2ixYjFq0J
-cfRK9ChQtP6IHG4/bC8vCVlbpVsLM5niwz2J+Wos77LTBumjQjBAMB0GA1UdDgQW
-BBR1cacZSBm8nZ3qQUfflMRId5nTeTAOBgNVHQ8BAf8EBAMCAQYwDwYDVR0TAQH/
-BAUwAwEB/zAKBggqhkjOPQQDAwNoADBlAjEA7wNbeqy3eApyt4jf/7VGFAkK+qDm
-fQjGGoe9GKhzvSbKYAydzpmfz1wPMOG+FDHqAjAU9JM8SaczepBGR7NjfRObTrdv
-GDeAU/7dIOA1mjbRxwG55tzd8/8dLDoWV9mSOdY=
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIIF2DCCA8CgAwIBAgIQTKr5yttjb+Af907YWwOGnTANBgkqhkiG9w0BAQwFADCB
-hTELMAkGA1UEBhMCR0IxGzAZBgNVBAgTEkdyZWF0ZXIgTWFuY2hlc3RlcjEQMA4G
-A1UEBxMHU2FsZm9yZDEaMBgGA1UEChMRQ09NT0RPIENBIExpbWl0ZWQxKzApBgNV
-BAMTIkNPTU9ETyBSU0EgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkwHhcNMTAwMTE5
-MDAwMDAwWhcNMzgwMTE4MjM1OTU5WjCBhTELMAkGA1UEBhMCR0IxGzAZBgNVBAgT
-EkdyZWF0ZXIgTWFuY2hlc3RlcjEQMA4GA1UEBxMHU2FsZm9yZDEaMBgGA1UEChMR
-Q09NT0RPIENBIExpbWl0ZWQxKzApBgNVBAMTIkNPTU9ETyBSU0EgQ2VydGlmaWNh
-dGlvbiBBdXRob3JpdHkwggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoICAQCR
-6FSS0gpWsawNJN3Fz0RndJkrN6N9I3AAcbxT38T6KhKPS38QVr2fcHK3YX/JSw8X
-pz3jsARh7v8Rl8f0hj4K+j5c+ZPmNHrZFGvnnLOFoIJ6dq9xkNfs/Q36nGz637CC
-9BR++b7Epi9Pf5l/tfxnQ3K9DADWietrLNPtj5gcFKt+5eNu/Nio5JIk2kNrYrhV
-/erBvGy2i/MOjZrkm2xpmfh4SDBF1a3hDTxFYPwyllEnvGfDyi62a+pGx8cgoLEf
-Zd5ICLqkTqnyg0Y3hOvozIFIQ2dOciqbXL1MGyiKXCJ7tKuY2e7gUYPDCUZObT6Z
-+pUX2nwzV0E8jVHtC7ZcryxjGt9XyD+86V3Em69FmeKjWiS0uqlWPc9vqv9JWL7w
-qP/0uK3pN/u6uPQLOvnoQ0IeidiEyxPx2bvhiWC4jChWrBQdnArncevPDt09qZah
-SL0896+1DSJMwBGB7FY79tOi4lu3sgQiUpWAk2nojkxl8ZEDLXB0AuqLZxUpaVIC
-u9ffUGpVRr+goyhhf3DQw6KqLCGqR84onAZFdr+CGCe01a60y1Dma/RMhnEw6abf
-Fobg2P9A3fvQQoh/ozM6LlweQRGBY84YcWsr7KaKtzFcOmpH4MN5WdYgGq/yapiq
-crxXStJLnbsQ/LBMQeXtHT1eKJ2czL+zUdqnR+WEUwIDAQABo0IwQDAdBgNVHQ4E
-FgQUu69+Aj36pvE8hI6t7jiY7NkyMtQwDgYDVR0PAQH/BAQDAgEGMA8GA1UdEwEB
-/wQFMAMBAf8wDQYJKoZIhvcNAQEMBQADggIBAArx1UaEt65Ru2yyTUEUAJNMnMvl
-wFTPoCWOAvn9sKIN9SCYPBMtrFaisNZ+EZLpLrqeLppysb0ZRGxhNaKatBYSaVqM
-4dc+pBroLwP0rmEdEBsqpIt6xf4FpuHA1sj+nq6PK7o9mfjYcwlYRm6mnPTXJ9OV
-2jeDchzTc+CiR5kDOF3VSXkAKRzH7JsgHAckaVd4sjn8OoSgtZx8jb8uk2Intzna
-FxiuvTwJaP+EmzzV1gsD41eeFPfR60/IvYcjt7ZJQ3mFXLrrkguhxuhoqEwWsRqZ
-CuhTLJK7oQkYdQxlqHvLI7cawiiFwxv/0Cti76R7CZGYZ4wUAc1oBmpjIXUDgIiK
-boHGhfKppC3n9KUkEEeDys30jXlYsQab5xoq2Z0B15R97QNKyvDb6KkBPvVWmcke
-jkk9u+UJueBPSZI9FoJAzMxZxuY67RIuaTxslbH9qh17f4a+Hg4yRvv7E491f0yL
-S0Zj/gA0QHDBw7mh3aZw4gSzQbzpgJHqZJx64SIDqZxubw5lT2yHh17zbqD5daWb
-QOhTsiedSrnAdyGN/4fy3ryM7xfft0kL0fJuMAsaDk527RH89elWsn2/x20Kk4yl
-0MC2Hb46TpSi125sC8KKfPog88Tk5c0NqMuRkrF8hey1FGlmDoLnzc7ILaZRfyHB
-NVOFBkpdn627G190
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIIEvTCCA6WgAwIBAgIBADANBgkqhkiG9w0BAQUFADB/MQswCQYDVQQGEwJFVTEn
-MCUGA1UEChMeQUMgQ2FtZXJmaXJtYSBTQSBDSUYgQTgyNzQzMjg3MSMwIQYDVQQL
-ExpodHRwOi8vd3d3LmNoYW1iZXJzaWduLm9yZzEiMCAGA1UEAxMZQ2hhbWJlcnMg
-b2YgQ29tbWVyY2UgUm9vdDAeFw0wMzA5MzAxNjEzNDNaFw0zNzA5MzAxNjEzNDRa
-MH8xCzAJBgNVBAYTAkVVMScwJQYDVQQKEx5BQyBDYW1lcmZpcm1hIFNBIENJRiBB
-ODI3NDMyODcxIzAhBgNVBAsTGmh0dHA6Ly93d3cuY2hhbWJlcnNpZ24ub3JnMSIw
-IAYDVQQDExlDaGFtYmVycyBvZiBDb21tZXJjZSBSb290MIIBIDANBgkqhkiG9w0B
-AQEFAAOCAQ0AMIIBCAKCAQEAtzZV5aVdGDDg2olUkfzIx1L4L1DZ77F1c2VHfRtb
-unXF/KGIJPov7coISjlUxFF6tdpg6jg8gbLL8bvZkSM/SAFwdakFKq0fcfPJVD0d
-BmpAPrMMhe5cG3nCYsS4No41XQEMIwRHNaqbYE6gZj3LJgqcQKH0XZi/caulAGgq
-7YN6D6IUtdQis4CwPAxaUWktWBiP7Zme8a7ileb2R6jWDA+wWFjbw2Y3npuRVDM3
-0pQcakjJyfKl2qUMI/cjDpwyVV5xnIQFUZot/eZOKjRa3spAN2cMVCFVd9oKDMyX
-roDclDZK9D7ONhMeU+SsTjoF7Nuucpw4i9A5O4kKPnf+dQIBA6OCAUQwggFAMBIG
-A1UdEwEB/wQIMAYBAf8CAQwwPAYDVR0fBDUwMzAxoC+gLYYraHR0cDovL2NybC5j
-aGFtYmVyc2lnbi5vcmcvY2hhbWJlcnNyb290LmNybDAdBgNVHQ4EFgQU45T1sU3p
-26EpW1eLTXYGduHRooowDgYDVR0PAQH/BAQDAgEGMBEGCWCGSAGG+EIBAQQEAwIA
-BzAnBgNVHREEIDAegRxjaGFtYmVyc3Jvb3RAY2hhbWJlcnNpZ24ub3JnMCcGA1Ud
-EgQgMB6BHGNoYW1iZXJzcm9vdEBjaGFtYmVyc2lnbi5vcmcwWAYDVR0gBFEwTzBN
-BgsrBgEEAYGHLgoDATA+MDwGCCsGAQUFBwIBFjBodHRwOi8vY3BzLmNoYW1iZXJz
-aWduLm9yZy9jcHMvY2hhbWJlcnNyb290Lmh0bWwwDQYJKoZIhvcNAQEFBQADggEB
-AAxBl8IahsAifJ/7kPMa0QOx7xP5IV8EnNrJpY0nbJaHkb5BkAFyk+cefV/2icZd
-p0AJPaxJRUXcLo0waLIJuvvDL8y6C98/d3tGfToSJI6WjzwFCm/SlCgdbQzALogi
-1djPHRPH8EjX1wWnz8dHnjs8NMiAT9QUu/wNUPf6s+xCX6ndbcj0dc97wXImsQEc
-XCz9ek60AcUFV7nnPKoF2YjpB0ZBzu9Bga5Y34OirsrXdx/nADydb47kMgkdTXg0
-eDQ8lJsm7U9xxhl6vSAiSFr+S30Dt+dYvsYyTnQeaN2oaFuzPu5ifdmA6Ap1erfu
-tGWaIZDgqtCYvDi1czyL+Nw=
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIIExTCCA62gAwIBAgIBADANBgkqhkiG9w0BAQUFADB9MQswCQYDVQQGEwJFVTEn
-MCUGA1UEChMeQUMgQ2FtZXJmaXJtYSBTQSBDSUYgQTgyNzQzMjg3MSMwIQYDVQQL
-ExpodHRwOi8vd3d3LmNoYW1iZXJzaWduLm9yZzEgMB4GA1UEAxMXR2xvYmFsIENo
-YW1iZXJzaWduIFJvb3QwHhcNMDMwOTMwMTYxNDE4WhcNMzcwOTMwMTYxNDE4WjB9
-MQswCQYDVQQGEwJFVTEnMCUGA1UEChMeQUMgQ2FtZXJmaXJtYSBTQSBDSUYgQTgy
-NzQzMjg3MSMwIQYDVQQLExpodHRwOi8vd3d3LmNoYW1iZXJzaWduLm9yZzEgMB4G
-A1UEAxMXR2xvYmFsIENoYW1iZXJzaWduIFJvb3QwggEgMA0GCSqGSIb3DQEBAQUA
-A4IBDQAwggEIAoIBAQCicKLQn0KuWxfH2H3PFIP8T8mhtxOviteePgQKkotgVvq0
-Mi+ITaFgCPS3CU6gSS9J1tPfnZdan5QEcOw/Wdm3zGaLmFIoCQLfxS+EjXqXd7/s
-QJ0lcqu1PzKY+7e3/HKE5TWH+VX6ox8Oby4o3Wmg2UIQxvi1RMLQQ3/bvOSiPGpV
-eAp3qdjqGTK3L/5cPxvusZjsyq16aUXjlg9V9ubtdepl6DJWk0aJqCWKZQbua795
-B9Dxt6/tLE2Su8CoX6dnfQTyFQhwrJLWfQTSM/tMtgsL+xrJxI0DqX5c8lCrEqWh
-z0hQpe/SyBoT+rB/sYIcd2oPX9wLlY/vQ37mRQklAgEDo4IBUDCCAUwwEgYDVR0T
-AQH/BAgwBgEB/wIBDDA/BgNVHR8EODA2MDSgMqAwhi5odHRwOi8vY3JsLmNoYW1i
-ZXJzaWduLm9yZy9jaGFtYmVyc2lnbnJvb3QuY3JsMB0GA1UdDgQWBBRDnDafsJ4w
-TcbOX60Qq+UDpfqpFDAOBgNVHQ8BAf8EBAMCAQYwEQYJYIZIAYb4QgEBBAQDAgAH
-MCoGA1UdEQQjMCGBH2NoYW1iZXJzaWducm9vdEBjaGFtYmVyc2lnbi5vcmcwKgYD
-VR0SBCMwIYEfY2hhbWJlcnNpZ25yb290QGNoYW1iZXJzaWduLm9yZzBbBgNVHSAE
-VDBSMFAGCysGAQQBgYcuCgEBMEEwPwYIKwYBBQUHAgEWM2h0dHA6Ly9jcHMuY2hh
-bWJlcnNpZ24ub3JnL2Nwcy9jaGFtYmVyc2lnbnJvb3QuaHRtbDANBgkqhkiG9w0B
-AQUFAAOCAQEAPDtwkfkEVCeR4e3t/mh/YV3lQWVPMvEYBZRqHN4fcNs+ezICNLUM
-bKGKfKX0j//U2K0X1S0E0T9YgOKBWYi+wONGkyT+kL0mojAt6JcmVzWJdJYY9hXi
-ryQZVgICsroPFOrGimbBhkVVi76SvpykBMdJPJ7oKXqJ1/6v/2j1pReQvayZzKWG
-VwlnRtvWFsJG8eSpUPWP0ZIV018+xgBJOm5YstHRJw0lyDL4IBHNfTIzSJRUTN3c
-ecQwn+uOuFW114hcxWokPbLTBQNRxgfvzBRydD1ucs4YKIxKoHflCStFREest2d/
-AYoFWpO+ocH/+OcOZ6RHSXZddZAa9SaP8A==
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIIDfDCCAmSgAwIBAgIQayXaioidfLwPBbOxemFFRDANBgkqhkiG9w0BAQsFADBY
-MQswCQYDVQQGEwJDTjEaMBgGA1UEChMRV29TaWduIENBIExpbWl0ZWQxLTArBgNV
-BAMTJENlcnRpZmljYXRpb24gQXV0aG9yaXR5IG9mIFdvU2lnbiBHMjAeFw0xNDEx
-MDgwMDU4NThaFw00NDExMDgwMDU4NThaMFgxCzAJBgNVBAYTAkNOMRowGAYDVQQK
-ExFXb1NpZ24gQ0EgTGltaXRlZDEtMCsGA1UEAxMkQ2VydGlmaWNhdGlvbiBBdXRo
-b3JpdHkgb2YgV29TaWduIEcyMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKC
-AQEAvsXEoCKASU+/2YcRxlPhuw+9YH+v9oIOH9ywjj2X4FA8jzrvZjtFB5sg+OPX
-JYY1kBaiXW8wGQiHC38Gsp1ij96vkqVg1CuAmlI/9ZqD6TRay9nVYlzmDuDfBpgO
-gHzKtB0TiGsOqCR3A9DuW/PKaZE1OVbFbeP3PU9ekzgkyhjpJMuSA93MHD0JcOQg
-5PGurLtzaaNjOg9FD6FKmsLRY6zLEPg95k4ot+vElbGs/V6r+kHLXZ1L3PR8du9n
-fwB6jdKgGlxNIuG12t12s9R23164i5jIFFTMaxeSt+BKv0mUYQs4kI9dJGwlezt5
-2eJ+na2fmKEG/HgUYFf47oB3sQIDAQABo0IwQDAOBgNVHQ8BAf8EBAMCAQYwDwYD
-VR0TAQH/BAUwAwEB/zAdBgNVHQ4EFgQU+mCp62XF3RYUCE4MD42b4Pdkr2cwDQYJ
-KoZIhvcNAQELBQADggEBAFfDejaCnI2Y4qtAqkePx6db7XznPWZaOzG73/MWM5H8
-fHulwqZm46qwtyeYP0nXYGdnPzZPSsvxFPpahygc7Y9BMsaV+X3avXtbwrAh449G
-3CE4Q3RM+zD4F3LBMvzIkRfEzFg3TgvMWvchNSiDbGAtROtSjFA9tWwS1/oJu2yy
-SrHFieT801LYYRf+epSEj3m2M1m6D8QL4nCgS3gu+sif/a+RZQp4OBXllxcU3fng
-LDT4ONCEIgDAFFEYKwLcMFrw6AF8NTojrwjkr6qOKEJJLvD1mTS+7Q9LGOHSJDy7
-XUe3IfKN0QqZjuNuPq1w4I+5ysxugTH2e5x6eeRncRg=
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIIDqDCCApCgAwIBAgIJAP7c4wEPyUj/MA0GCSqGSIb3DQEBBQUAMDQxCzAJBgNV
-BAYTAkZSMRIwEAYDVQQKDAlEaGlteW90aXMxETAPBgNVBAMMCENlcnRpZ25hMB4X
-DTA3MDYyOTE1MTMwNVoXDTI3MDYyOTE1MTMwNVowNDELMAkGA1UEBhMCRlIxEjAQ
-BgNVBAoMCURoaW15b3RpczERMA8GA1UEAwwIQ2VydGlnbmEwggEiMA0GCSqGSIb3
-DQEBAQUAA4IBDwAwggEKAoIBAQDIaPHJ1tazNHUmgh7stL7qXOEm7RFHYeGifBZ4
-QCHkYJ5ayGPhxLGWkv8YbWkj4Sti993iNi+RB7lIzw7sebYs5zRLcAglozyHGxny
-gQcPOJAZ0xH+hrTy0V4eHpbNgGzOOzGTtvKg0KmVEn2lmsxryIRWijOp5yIVUxbw
-zBfsV1/pogqYCd7jX5xv3EjjhQsVWqa6n6xI4wmy9/Qy3l40vhx4XUJbzg4ij02Q
-130yGLMLLGq/jj8UEYkgDncUtT2UCIf3JR7VsmAA7G8qKCVuKj4YYxclPz5EIBb2
-JsglrgVKtOdjLPOMFlN+XPsRGgjBRmKfIrjxwo1p3Po6WAbfAgMBAAGjgbwwgbkw
-DwYDVR0TAQH/BAUwAwEB/zAdBgNVHQ4EFgQUGu3+QTmQtCRZvgHyUtVF9lo53BEw
-ZAYDVR0jBF0wW4AUGu3+QTmQtCRZvgHyUtVF9lo53BGhOKQ2MDQxCzAJBgNVBAYT
-AkZSMRIwEAYDVQQKDAlEaGlteW90aXMxETAPBgNVBAMMCENlcnRpZ25hggkA/tzj
-AQ/JSP8wDgYDVR0PAQH/BAQDAgEGMBEGCWCGSAGG+EIBAQQEAwIABzANBgkqhkiG
-9w0BAQUFAAOCAQEAhQMeknH2Qq/ho2Ge6/PAD/Kl1NqV5ta+aDY9fm4fTIrv0Q8h
-bV6lUmPOEvjvKtpv6zf+EwLHyzs+ImvaYS5/1HI93TDhHkxAGYwP15zRgzB7mFnc
-fca5DClMoTOi62c6ZYTTluLtdkVwj7Ur3vkj1kluPBS1xp81HlDQwY9qcEQCYsuu
-HWhBp6pX6FOqB9IG9tUUBguRA3UsbHK1YZWaDYu5Def131TN3ubY1gkIl2PlwS6w
-t0QmwCbAr1UwnjvVNioZBPRcHv/PLLf/0P2HQBHVESO7SMAhqaQoLf0V+LBOK/Qw
-WyH8EZE0vkHve52Xdf+XlcCWWC/qu0bXu+TZLg==
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIIFnDCCA4SgAwIBAgIBATANBgkqhkiG9w0BAQUFADBjMQswCQYDVQQGEwJGUjET
-MBEGA1UEChMKQ2VydGlub21pczEXMBUGA1UECxMOMDAwMiA0MzM5OTg5MDMxJjAk
-BgNVBAMMHUNlcnRpbm9taXMgLSBBdXRvcml0w6kgUmFjaW5lMB4XDTA4MDkxNzA4
-Mjg1OVoXDTI4MDkxNzA4Mjg1OVowYzELMAkGA1UEBhMCRlIxEzARBgNVBAoTCkNl
-cnRpbm9taXMxFzAVBgNVBAsTDjAwMDIgNDMzOTk4OTAzMSYwJAYDVQQDDB1DZXJ0
-aW5vbWlzIC0gQXV0b3JpdMOpIFJhY2luZTCCAiIwDQYJKoZIhvcNAQEBBQADggIP
-ADCCAgoCggIBAJ2Fn4bT46/HsmtuM+Cet0I0VZ35gb5j2CN2DpdUzZlMGvE5x4jY
-F1AMnmHawE5V3udauHpOd4cN5bjr+p5eex7Ezyh0x5P1FMYiKAT5kcOrJ3NqDi5N
-8y4oH3DfVS9O7cdxbwlyLu3VMpfQ8Vh30WC8Tl7bmoT2R2FFK/ZQpn9qcSdIhDWe
-rP5pqZ56XjUl+rSnSTV3lqc2W+HN3yNw2F1MpQiD8aYkOBOo7C+ooWfHpi2GR+6K
-/OybDnT0K0kCe5B1jPyZOQE51kqJ5Z52qz6WKDgmi92NjMD2AR5vpTESOH2VwnHu
-7XSu5DaiQ3XV8QCb4uTXzEIDS3h65X27uK4uIJPT5GHfceF2Z5c/tt9qc1pkIuVC
-28+BA5PY9OMQ4HL2AHCs8MF6DwV/zzRpRbWT5BnbUhYjBYkOjUjkJW+zeL9i9Qf6
-lSTClrLooyPCXQP8w9PlfMl1I9f09bze5N/NgL+RiH2nE7Q5uiy6vdFrzPOlKO1E
-nn1So2+WLhl+HPNbxxaOu2B9d2ZHVIIAEWBsMsGoOBvrbpgT1u449fCfDu/+MYHB
-0iSVL1N6aaLwD4ZFjliCK0wi1F6g530mJ0jfJUaNSih8hp75mxpZuWW/Bd22Ql09
-5gBIgl4g9xGC3srYn+Y3RyYe63j3YcNBZFgCQfna4NH4+ej9Uji29YnfAgMBAAGj
-WzBZMA8GA1UdEwEB/wQFMAMBAf8wDgYDVR0PAQH/BAQDAgEGMB0GA1UdDgQWBBQN
-jLZh2kS40RR9w759XkjwzspqsDAXBgNVHSAEEDAOMAwGCiqBegFWAgIAAQEwDQYJ
-KoZIhvcNAQEFBQADggIBACQ+YAZ+He86PtvqrxyaLAEL9MW12Ukx9F1BjYkMTv9s
-ov3/4gbIOZ/xWqndIlgVqIrTseYyCYIDbNc/CMf4uboAbbnW/FIyXaR/pDGUu7ZM
-OH8oMDX/nyNTt7buFHAAQCvaR6s0fl6nVjBhK4tDrP22iCj1a7Y+YEq6QpA0Z43q
-619FVDsXrIvkxmUP7tCMXWY5zjKn2BCXwH40nJ+U8/aGH88bc62UeYdocMMzpXDn
-2NU4lG9jeeu/Cg4I58UvD0KgKxRA/yHgBcUn4YQRE7rWhh1BCxMjidPJC+iKunqj
-o3M3NYB9Ergzd0A4wPpeMNLytqOx1qKVl4GbUu1pTP+A5FPbVFsDbVRfsbjvJL1v
-nxHDx2TCDyhihWZeGnuyt++uNckZM6i4J9szVb9o4XVIRFb7zdNIu0eJOqxp9YDG
-5ERQL1TEqkPFMTFYvZbF6nVsmnWxTfj3l/+WFvKXTej28xH5On2KOG4Ey+HTRRWq
-pdEdnV1j6CTmNhTih60bWfVEm/vXd3wfAXBioSAaosUaKPQhA+4u2cGA6rnZgtZb
-dsLLO7XSAPCjDuGtbkD326C00EauFddEwk01+dIL8hf2rGbVJLJP0RyZwG71fet0
-BLj5TXcJ17TPBzAJ8bgAVtkXFhYKK4bfjwEZGuW7gmP/vgt2Fl43N+bYdJeimUV5
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIIFkjCCA3qgAwIBAgIBATANBgkqhkiG9w0BAQsFADBaMQswCQYDVQQGEwJGUjET
-MBEGA1UEChMKQ2VydGlub21pczEXMBUGA1UECxMOMDAwMiA0MzM5OTg5MDMxHTAb
-BgNVBAMTFENlcnRpbm9taXMgLSBSb290IENBMB4XDTEzMTAyMTA5MTcxOFoXDTMz
-MTAyMTA5MTcxOFowWjELMAkGA1UEBhMCRlIxEzARBgNVBAoTCkNlcnRpbm9taXMx
-FzAVBgNVBAsTDjAwMDIgNDMzOTk4OTAzMR0wGwYDVQQDExRDZXJ0aW5vbWlzIC0g
-Um9vdCBDQTCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIBANTMCQosP5L2
-fxSeC5yaah1AMGT9qt8OHgZbn1CF6s2Nq0Nn3rD6foCWnoR4kkjW4znuzuRZWJfl
-LieY6pOod5tK8O90gC3rMB+12ceAnGInkYjwSond3IjmFPnVAy//ldu9n+ws+hQV
-WZUKxkd8aRi5pwP5ynapz8dvtF4F/u7BUrJ1Mofs7SlmO/NKFoL21prbcpjp3vDF
-TKWrteoB4owuZH9kb/2jJZOLyKIOSY008B/sWEUuNKqEUL3nskoTuLAPrjhdsKkb
-5nPJWqHZZkCqqU2mNAKthH6yI8H7KsZn9DS2sJVqM09xRLWtwHkziOC/7aOgFLSc
-CbAK42C++PhmiM1b8XcF4LVzbsF9Ri6OSyemzTUK/eVNfaoqoynHWmgE6OXWk6Ri
-wsXm9E/G+Z8ajYJJGYrKWUM66A0ywfRMEwNvbqY/kXPLynNvEiCL7sCCeN5LLsJJ
-wx3tFvYk9CcbXFcx3FXuqB5vbKziRcxXV4p1VxngtViZSTYxPDMBbRZKzbgqg4SG
-m/lg0h9tkQPTYKbVPZrdd5A9NaSfD171UkRpucC63M9933zZxKyGIjK8e2uR73r4
-F2iw4lNVYC2vPsKD2NkJK/DAZNuHi5HMkesE/Xa0lZrmFAYb1TQdvtj/dBxThZng
-WVJKYe2InmtJiUZ+IFrZ50rlau7SZRFDAgMBAAGjYzBhMA4GA1UdDwEB/wQEAwIB
-BjAPBgNVHRMBAf8EBTADAQH/MB0GA1UdDgQWBBTvkUz1pcMw6C8I6tNxIqSSaHh0
-2TAfBgNVHSMEGDAWgBTvkUz1pcMw6C8I6tNxIqSSaHh02TANBgkqhkiG9w0BAQsF
-AAOCAgEAfj1U2iJdGlg+O1QnurrMyOMaauo++RLrVl89UM7g6kgmJs95Vn6RHJk/
-0KGRHCwPT5iVWVO90CLYiF2cN/z7ZMF4jIuaYAnq1fohX9B0ZedQxb8uuQsLrbWw
-F6YSjNRieOpWauwK0kDDPAUwPk2Ut59KA9N9J0u2/kTO+hkzGm2kQtHdzMjI1xZS
-g081lLMSVX3l4kLr5JyTCcBMWwerx20RoFAXlCOotQqSD7J6wWAsOMwaplv/8gzj
-qh8c3LigkyfeY+N/IZ865Z764BNqdeuWXGKRlI5nU7aJ+BIJy29SWwNyhlCVCNSN
-h4YVH5Uk2KRvms6knZtt0rJ2BobGVgjF6wnaNsIbW0G+YSrjcOa4pvi2WsS9Iff/
-ql+hbHY5ZtbqTFXhADObE5hjyW/QASAJN1LnDE8+zbz1X5YnpyACleAu6AdBBR8V
-btaw5BngDwKTACdyxYvRVB9dSsNAl35VpnzBMwQUAR1JIGkLGZOdblgi90AMRgwj
-Y/M50n92Uaf0yKHxDHYiI0ZSKS3io0EHVmmY0gUJvGnHWmHNj4FgFU2A3ZDifcRQ
-8ow7bkrHxuaAKzyBvBGAFhAn1/DNP3nMcyrDflOR1m749fPH0FFNjkulW+YZFzvW
-gQncItzujrnEj1PhZ7szuIgVRs/taTX/dQ1G885x4cVrhkIGuUE=
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIIDkjCCAnqgAwIBAgIRAIW9S/PY2uNp9pTXX8OlRCMwDQYJKoZIhvcNAQEFBQAw
-PTELMAkGA1UEBhMCRlIxETAPBgNVBAoTCENlcnRwbHVzMRswGQYDVQQDExJDbGFz
-cyAyIFByaW1hcnkgQ0EwHhcNOTkwNzA3MTcwNTAwWhcNMTkwNzA2MjM1OTU5WjA9
-MQswCQYDVQQGEwJGUjERMA8GA1UEChMIQ2VydHBsdXMxGzAZBgNVBAMTEkNsYXNz
-IDIgUHJpbWFyeSBDQTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBANxQ
-ltAS+DXSCHh6tlJw/W/uz7kRy1134ezpfgSN1sxvc0NXYKwzCkTsA18cgCSR5aiR
-VhKC9+Ar9NuuYS6JEI1rbLqzAr3VNsVINyPi8Fo3UjMXEuLRYE2+L0ER4/YXJQyL
-kcAbmXuZVg2v7tK8R1fjeUl7NIknJITesezpWE7+Tt9avkGtrAjFGA7v0lPubNCd
-EgETjdyAYveVqUSISnFOYFWe2yMZeVYHDD9jC1yw4r5+FfyUM1hBOHTE4Y+L3yas
-H7WLO7dDWWuwJKZtkIvEcupdM5i3y95ee++U8Rs+yskhwcWYAqqi9lt3m/V+llU0
-HGdpwPFC40es/CgcZlUCAwEAAaOBjDCBiTAPBgNVHRMECDAGAQH/AgEKMAsGA1Ud
-DwQEAwIBBjAdBgNVHQ4EFgQU43Mt38sOKAze3bOkynm4jrvoMIkwEQYJYIZIAYb4
-QgEBBAQDAgEGMDcGA1UdHwQwMC4wLKAqoCiGJmh0dHA6Ly93d3cuY2VydHBsdXMu
-Y29tL0NSTC9jbGFzczIuY3JsMA0GCSqGSIb3DQEBBQUAA4IBAQCnVM+IRBnL39R/
-AN9WM2K191EBkOvDP9GIROkkXe/nFL0gt5o8AP5tn9uQ3Nf0YtaLcF3n5QRIqWh8
-yfFC82x/xXp8HVGIutIKPidd3i1RTtMTZGnkLuPT55sJmabglZvOGtd/vjzOUrMR
-FcEPF80Du5wlFbqidon8BvEY0JNLDnyCt6X09l/+7UCmnYR0ObncHoUW2ikbhiMA
-ybuJfm6AiB4vFLQDJKgybwOaRywwvlbGp0ICcBvqQNi6BQNwB6SW//1IMwrh3KWB
-kJtN3X3n57LNXMhqlfil9o3EXXgIvnsG1knPGTZQIy4I5p4FTUcY1Rbpsda2ENW7
-l7+ijrRU
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIIDDDCCAfSgAwIBAgIDAQAgMA0GCSqGSIb3DQEBBQUAMD4xCzAJBgNVBAYTAlBM
-MRswGQYDVQQKExJVbml6ZXRvIFNwLiB6IG8uby4xEjAQBgNVBAMTCUNlcnR1bSBD
-QTAeFw0wMjA2MTExMDQ2MzlaFw0yNzA2MTExMDQ2MzlaMD4xCzAJBgNVBAYTAlBM
-MRswGQYDVQQKExJVbml6ZXRvIFNwLiB6IG8uby4xEjAQBgNVBAMTCUNlcnR1bSBD
-QTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAM6xwS7TT3zNJc4YPk/E
-jG+AanPIW1H4m9LcuwBcsaD8dQPugfCI7iNS6eYVM42sLQnFdvkrOYCJ5JdLkKWo
-ePhzQ3ukYbDYWMzhbGZ+nPMJXlVjhNWo7/OxLjBos8Q82KxujZlakE403Daaj4GI
-ULdtlkIJ89eVgw1BS7Bqa/j8D35in2fE7SZfECYPCE/wpFcozo+47UX2bu4lXapu
-Ob7kky/ZR6By6/qmW6/KUz/iDsaWVhFu9+lmqSbYf5VT7QqFiLpPKaVCjF62/IUg
-AKpoC6EahQGcxEZjgoi2IrHu/qpGWX7PNSzVttpd90gzFFS269lvzs2I1qsb2pY7
-HVkCAwEAAaMTMBEwDwYDVR0TAQH/BAUwAwEB/zANBgkqhkiG9w0BAQUFAAOCAQEA
-uI3O7+cUus/usESSbLQ5PqKEbq24IXfS1HeCh+YgQYHu4vgRt2PRFze+GXYkHAQa
-TOs9qmdvLdTN/mUxcMUbpgIKumB7bVjCmkn+YzILa+M6wKyrO7Do0wlRjBCDxjTg
-xSvgGrZgFCdsMneMvLJymM/NzD+5yCRCFNZX/OYmQ6kd5YCQzgNUKD73P9P4Te1q
-CjqTE5s7FCMTY5w/0YcneeVMUeMBrYVdGjux1XMQpNPyvG5k9VpWkKjHDkx0Dy5x
-O/fIR/RpbxXyEV6DHpx8Uq79AtoSqFlnGNu8cN2bsWntgM6JQEhqDjXKKWYVIZQs
-6GAqm4VKQPNriiTsBhYscw==
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIIDuzCCAqOgAwIBAgIDBETAMA0GCSqGSIb3DQEBBQUAMH4xCzAJBgNVBAYTAlBM
-MSIwIAYDVQQKExlVbml6ZXRvIFRlY2hub2xvZ2llcyBTLkEuMScwJQYDVQQLEx5D
-ZXJ0dW0gQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkxIjAgBgNVBAMTGUNlcnR1bSBU
-cnVzdGVkIE5ldHdvcmsgQ0EwHhcNMDgxMDIyMTIwNzM3WhcNMjkxMjMxMTIwNzM3
-WjB+MQswCQYDVQQGEwJQTDEiMCAGA1UEChMZVW5pemV0byBUZWNobm9sb2dpZXMg
-Uy5BLjEnMCUGA1UECxMeQ2VydHVtIENlcnRpZmljYXRpb24gQXV0aG9yaXR5MSIw
-IAYDVQQDExlDZXJ0dW0gVHJ1c3RlZCBOZXR3b3JrIENBMIIBIjANBgkqhkiG9w0B
-AQEFAAOCAQ8AMIIBCgKCAQEA4/t9o3K6wvDJFIf1awFO4W5AB7ptJ11/91sts1rH
-UV+rpDKmYYe2bg+G0jACl/jXaVehGDldamR5xgFZrDwxSjh80gTSSyjoIF87B6LM
-TXPb865Px1bVWqeWifrzq2jUI4ZZJ88JJ7ysbnKDHDBy3+Ci6dLhdHUZvSqeexVU
-BBvXQzmtVSjF4hq79MDkrjhJM8x2hZ85RdKknvISjFH4fOQtf/WsX+sWn7Et0brM
-kUJ3TCXJkDhv2/DM+44el1k+1WBO5gUo7Ul5E0u6SNsv+XLTOcr+H9g0cvW0QM8x
-AcPs3hEtF10fuFDRXhmnad4HMyjKUJX5p1TLVIZQRan5SQIDAQABo0IwQDAPBgNV
-HRMBAf8EBTADAQH/MB0GA1UdDgQWBBQIds3LB/8k9sXN7buQvOKEN0Z19zAOBgNV
-HQ8BAf8EBAMCAQYwDQYJKoZIhvcNAQEFBQADggEBAKaorSLOAT2mo/9i0Eidi15y
-sHhE49wcrwn9I0j6vSrEuVUEtRCjjSfeC4Jj0O7eDDd5QVsisrCaQVymcODU0HfL
-I9MA4GxWL+FpDQ3Zqr8hgVDZBqWo/5U30Kr+4rP1mS1FhIrlQgnXdAIv94nYmem8
-J9RHjboNRhx3zxSkHLmkMcScKHQDNP8zGSal6Q10tz6XxnboJ5ajZt3hrvJBW8qY
-VoNzcOSGGtIxQbovvi0TWnZvTuhOgQ4/WwMioBK+ZlgRSssDxLQqKi2WF+A5VLxI
-03YnnZotBqbJ7DnSq9ufmgsnAjUpsUCV5/nonFWIGUbWtzT1fs45mtk48VH3Tyw=
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIIHTzCCBTegAwIBAgIJAKPaQn6ksa7aMA0GCSqGSIb3DQEBBQUAMIGuMQswCQYD
-VQQGEwJFVTFDMEEGA1UEBxM6TWFkcmlkIChzZWUgY3VycmVudCBhZGRyZXNzIGF0
-IHd3dy5jYW1lcmZpcm1hLmNvbS9hZGRyZXNzKTESMBAGA1UEBRMJQTgyNzQzMjg3
-MRswGQYDVQQKExJBQyBDYW1lcmZpcm1hIFMuQS4xKTAnBgNVBAMTIENoYW1iZXJz
-IG9mIENvbW1lcmNlIFJvb3QgLSAyMDA4MB4XDTA4MDgwMTEyMjk1MFoXDTM4MDcz
-MTEyMjk1MFowga4xCzAJBgNVBAYTAkVVMUMwQQYDVQQHEzpNYWRyaWQgKHNlZSBj
-dXJyZW50IGFkZHJlc3MgYXQgd3d3LmNhbWVyZmlybWEuY29tL2FkZHJlc3MpMRIw
-EAYDVQQFEwlBODI3NDMyODcxGzAZBgNVBAoTEkFDIENhbWVyZmlybWEgUy5BLjEp
-MCcGA1UEAxMgQ2hhbWJlcnMgb2YgQ29tbWVyY2UgUm9vdCAtIDIwMDgwggIiMA0G
-CSqGSIb3DQEBAQUAA4ICDwAwggIKAoICAQCvAMtwNyuAWko6bHiUfaN/Gh/2NdW9
-28sNRHI+JrKQUrpjOyhYb6WzbZSm891kDFX29ufyIiKAXuFixrYp4YFs8r/lfTJq
-VKAyGVn+H4vXPWCGhSRv4xGzdz4gljUha7MI2XAuZPeEklPWDrCQiorjh40G072Q
-DuKZoRuGDtqaCrsLYVAGUvGef3bsyw/QHg3PmTA9HMRFEFis1tPo1+XqxQEHd9ZR
-5gN/ikilTWh1uem8nk4ZcfUyS5xtYBkL+8ydddy/Js2Pk3g5eXNeJQ7KXOt3EgfL
-ZEFHcpOrUMPrCXZkNNI5t3YRCQ12RcSprj1qr7V9ZS+UWBDsXHyvfuK2GNnQm05a
-Sd+pZgvMPMZ4fKecHePOjlO+Bd5gD2vlGts/4+EhySnB8esHnFIbAURRPHsl18Tl
-UlRdJQfKFiC4reRB7noI/plvg6aRArBsNlVq5331lubKgdaX8ZSD6e2wsWsSaR6s
-+12pxZjptFtYer49okQ6Y1nUCyXeG0+95QGezdIp1Z8XGQpvvwyQ0wlf2eOKNcx5
-Wk0ZN5K3xMGtr/R5JJqyAQuxr1yW84Ay+1w9mPGgP0revq+ULtlVmhduYJ1jbLhj
-ya6BXBg14JC7vjxPNyK5fuvPnnchpj04gftI2jE9K+OJ9dC1vX7gUMQSibMjmhAx
-hduub+84Mxh2EQIDAQABo4IBbDCCAWgwEgYDVR0TAQH/BAgwBgEB/wIBDDAdBgNV
-HQ4EFgQU+SSsD7K1+HnA+mCIG8TZTQKeFxkwgeMGA1UdIwSB2zCB2IAU+SSsD7K1
-+HnA+mCIG8TZTQKeFxmhgbSkgbEwga4xCzAJBgNVBAYTAkVVMUMwQQYDVQQHEzpN
-YWRyaWQgKHNlZSBjdXJyZW50IGFkZHJlc3MgYXQgd3d3LmNhbWVyZmlybWEuY29t
-L2FkZHJlc3MpMRIwEAYDVQQFEwlBODI3NDMyODcxGzAZBgNVBAoTEkFDIENhbWVy
-ZmlybWEgUy5BLjEpMCcGA1UEAxMgQ2hhbWJlcnMgb2YgQ29tbWVyY2UgUm9vdCAt
-IDIwMDiCCQCj2kJ+pLGu2jAOBgNVHQ8BAf8EBAMCAQYwPQYDVR0gBDYwNDAyBgRV
-HSAAMCowKAYIKwYBBQUHAgEWHGh0dHA6Ly9wb2xpY3kuY2FtZXJmaXJtYS5jb20w
-DQYJKoZIhvcNAQEFBQADggIBAJASryI1wqM58C7e6bXpeHxIvj99RZJe6dqxGfwW
-PJ+0W2aeaufDuV2I6A+tzyMP3iU6XsxPpcG1Lawk0lgH3qLPaYRgM+gQDROpI9CF
-5Y57pp49chNyM/WqfcZjHwj0/gF/JM8rLFQJ3uIrbZLGOU8W6jx+ekbURWpGqOt1
-glanq6B8aBMz9p0w8G8nOSQjKpD9kCk18pPfNKXG9/jvjA9iSnyu0/VU+I22mlaH
-FoI6M6taIgj3grrqLuBHmrS1RaMFO9ncLkVAO+rcf+g769HsJtg1pDDFOqxXnrN2
-pSB7+R5KBWIBpih1YJeSDW4+TTdDDZIVnBgizVGZoCkaPF+KMjNbMMeJL0eYD6MD
-xvbxrN8y8NmBGuScvfaAFPDRLLmF9dijscilIeUcE5fuDr3fKanvNFNb0+RqE4QG
-tjICxFKuItLcsiFCGtpA8CnJ7AoMXOLQusxI0zcKzBIKinmwPQN/aUv0NCB9szTq
-jktk9T79syNnFQ0EuPAtwQlRPLJsFfClI9eDdOTlLsn+mCdCxqvGnrDQWzilm1De
-fhiYtUU79nm06PcaewaD+9CL2rvHvRirCG88gGtAPxkZumWK5r7VXNM21+9AUiRg
-OGcEMeyP84LG3rlV8zsxkVrctQgVrXYlCg17LofiDKYGvCYQbTed7N14jHyAxfDZ
-d0jQ
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIID9zCCAt+gAwIBAgIESJ8AATANBgkqhkiG9w0BAQUFADCBijELMAkGA1UEBhMC
-Q04xMjAwBgNVBAoMKUNoaW5hIEludGVybmV0IE5ldHdvcmsgSW5mb3JtYXRpb24g
-Q2VudGVyMUcwRQYDVQQDDD5DaGluYSBJbnRlcm5ldCBOZXR3b3JrIEluZm9ybWF0
-aW9uIENlbnRlciBFViBDZXJ0aWZpY2F0ZXMgUm9vdDAeFw0xMDA4MzEwNzExMjVa
-Fw0zMDA4MzEwNzExMjVaMIGKMQswCQYDVQQGEwJDTjEyMDAGA1UECgwpQ2hpbmEg
-SW50ZXJuZXQgTmV0d29yayBJbmZvcm1hdGlvbiBDZW50ZXIxRzBFBgNVBAMMPkNo
-aW5hIEludGVybmV0IE5ldHdvcmsgSW5mb3JtYXRpb24gQ2VudGVyIEVWIENlcnRp
-ZmljYXRlcyBSb290MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAm35z
-7r07eKpkQ0H1UN+U8i6yjUqORlTSIRLIOTJCBumD1Z9S7eVnAztUwYyZmczpwA//
-DdmEEbK40ctb3B75aDFk4Zv6dOtouSCV98YPjUesWgbdYavi7NifFy2cyjw1l1Vx
-zUOFsUcW9SxTgHbP0wBkvUCZ3czY28Sf1hNfQYOL+Q2HklY0bBoQCxfVWhyXWIQ8
-hBouXJE0bhlffxdpxWXvayHG1VA6v2G5BY3vbzQ6sm8UY78WO5upKv23KzhmBsUs
-4qpnHkWnjQRmQvaPK++IIGmPMowUc9orhpFjIpryp9vOiYurXccUwVswah+xt54u
-gQEC7c+WXmPbqOY4twIDAQABo2MwYTAfBgNVHSMEGDAWgBR8cks5x8DbYqVPm6oY
-NJKiyoOCWTAPBgNVHRMBAf8EBTADAQH/MA4GA1UdDwEB/wQEAwIBBjAdBgNVHQ4E
-FgQUfHJLOcfA22KlT5uqGDSSosqDglkwDQYJKoZIhvcNAQEFBQADggEBACrDx0M3
-j92tpLIM7twUbY8opJhJywyA6vPtI2Z1fcXTIWd50XPFtQO3WKwMVC/GVhMPMdoG
-52U7HW8228gd+f2ABsqjPWYWqJ1MFn3AlUa1UeTiH9fqBk1jjZaM7+czV0I664zB
-echNdn3e9rG3geCg+aF4RhcaVpjwTj2rHO3sOdwHSPdj/gauwqRcalsyiMXHM4Ws
-ZkJHwlgkmeHlPuV1LI5D1l08eB6olYIpUNHRFrrvwb562bTYzB5MRuF3sTGrvSrI
-zo9uoV1/A3U05K2JRVRevq4opbs/eHnrc7MKDf2+yfdWrPa37S+bISnHOLaVxATy
-wy39FCqQmbkHzJ8=
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIIEMjCCAxqgAwIBAgIBATANBgkqhkiG9w0BAQUFADB7MQswCQYDVQQGEwJHQjEb
-MBkGA1UECAwSR3JlYXRlciBNYW5jaGVzdGVyMRAwDgYDVQQHDAdTYWxmb3JkMRow
-GAYDVQQKDBFDb21vZG8gQ0EgTGltaXRlZDEhMB8GA1UEAwwYQUFBIENlcnRpZmlj
-YXRlIFNlcnZpY2VzMB4XDTA0MDEwMTAwMDAwMFoXDTI4MTIzMTIzNTk1OVowezEL
-MAkGA1UEBhMCR0IxGzAZBgNVBAgMEkdyZWF0ZXIgTWFuY2hlc3RlcjEQMA4GA1UE
-BwwHU2FsZm9yZDEaMBgGA1UECgwRQ29tb2RvIENBIExpbWl0ZWQxITAfBgNVBAMM
-GEFBQSBDZXJ0aWZpY2F0ZSBTZXJ2aWNlczCCASIwDQYJKoZIhvcNAQEBBQADggEP
-ADCCAQoCggEBAL5AnfRu4ep2hxxNRUSOvkbIgwadwSr+GB+O5AL686tdUIoWMQua
-BtDFcCLNSS1UY8y2bmhGC1Pqy0wkwLxyTurxFa70VJoSCsN6sjNg4tqJVfMiWPPe
-3M/vg4aijJRPn2jymJBGhCfHdr/jzDUsi14HZGWCwEiwqJH5YZ92IFCokcdmtet4
-YgNW8IoaE+oxox6gmf049vYnMlhvB/VruPsUK6+3qszWY19zjNoFmag4qMsXeDZR
-rOme9Hg6jc8P2ULimAyrL58OAd7vn5lJ8S3frHRNG5i1R8XlKdH5kBjHYpy+g8cm
-ez6KJcfA3Z3mNWgQIJ2P2N7Sw4ScDV7oL8kCAwEAAaOBwDCBvTAdBgNVHQ4EFgQU
-oBEKIz6W8Qfs4q8p74Klf9AwpLQwDgYDVR0PAQH/BAQDAgEGMA8GA1UdEwEB/wQF
-MAMBAf8wewYDVR0fBHQwcjA4oDagNIYyaHR0cDovL2NybC5jb21vZG9jYS5jb20v
-QUFBQ2VydGlmaWNhdGVTZXJ2aWNlcy5jcmwwNqA0oDKGMGh0dHA6Ly9jcmwuY29t
-b2RvLm5ldC9BQUFDZXJ0aWZpY2F0ZVNlcnZpY2VzLmNybDANBgkqhkiG9w0BAQUF
-AAOCAQEACFb8AvCb6P+k+tZ7xkSAzk/ExfYAWMymtrwUSWgEdujm7l3sAg9g1o1Q
-GE8mTgHj5rCl7r+8dFRBv/38ErjHT1r0iWAFf2C3BUrz9vHCv8S5dIa2LX1rzNLz
-Rt0vxuBqw8M0Ayx9lt1awg6nCpnBBYurDC/zXDrPbDdVCYfeU0BsWO/8tqtlbgT2
-G9w84FoVxp7Z8VlIMCFlA2zs6SFz7JsDoeA3raAVGI/6ugLOpyypEBMs1OUIJqsi
-l2D4kF501KKaU73yqWjgom7C12yxow+ev+to51byrvLjKzg6CYG1a4XXvi3tPxq3
-smPi9WIsgtRqAEFQ8TmDn5XpNpaYbg==
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIIEPzCCAyegAwIBAgIBATANBgkqhkiG9w0BAQUFADB+MQswCQYDVQQGEwJHQjEb
-MBkGA1UECAwSR3JlYXRlciBNYW5jaGVzdGVyMRAwDgYDVQQHDAdTYWxmb3JkMRow
-GAYDVQQKDBFDb21vZG8gQ0EgTGltaXRlZDEkMCIGA1UEAwwbU2VjdXJlIENlcnRp
-ZmljYXRlIFNlcnZpY2VzMB4XDTA0MDEwMTAwMDAwMFoXDTI4MTIzMTIzNTk1OVow
-fjELMAkGA1UEBhMCR0IxGzAZBgNVBAgMEkdyZWF0ZXIgTWFuY2hlc3RlcjEQMA4G
-A1UEBwwHU2FsZm9yZDEaMBgGA1UECgwRQ29tb2RvIENBIExpbWl0ZWQxJDAiBgNV
-BAMMG1NlY3VyZSBDZXJ0aWZpY2F0ZSBTZXJ2aWNlczCCASIwDQYJKoZIhvcNAQEB
-BQADggEPADCCAQoCggEBAMBxM4KK0HDrc4eCQNUd5MvJDkKQ+d40uaG6EfQlhfPM
-cm3ye5drswfxdySRXyWP9nQ95IDC+DwN879A6vfIUtFyb+/Iq0G4bi4XKpVpDM3S
-HpR7LZQdqnXXs5jLrLxkU0C8j6ysNstcrbvd4JQX7NFc0L/vpZXJkMWwrPsbQ996
-CF23uPJAGysnnlDOXmWCiIxe004MeuoIkbY2qitC++rCoznl2yY4rYsK7hljxxwk
-3wN42ubqwUcaCwtGCd0C/N7Lh1/XMGNooa7cMqG6vv5Eq2i2pRcV/b3Vp6ea5EQz
-6YiO/O1R65NxTq0B50SOqy3LqP4BSUjwwN3HaNiS/j0CAwEAAaOBxzCBxDAdBgNV
-HQ4EFgQUPNiTiMLAggnMAZkGkyDpnnAJY08wDgYDVR0PAQH/BAQDAgEGMA8GA1Ud
-EwEB/wQFMAMBAf8wgYEGA1UdHwR6MHgwO6A5oDeGNWh0dHA6Ly9jcmwuY29tb2Rv
-Y2EuY29tL1NlY3VyZUNlcnRpZmljYXRlU2VydmljZXMuY3JsMDmgN6A1hjNodHRw
-Oi8vY3JsLmNvbW9kby5uZXQvU2VjdXJlQ2VydGlmaWNhdGVTZXJ2aWNlcy5jcmww
-DQYJKoZIhvcNAQEFBQADggEBAIcBbSMdflsXfcFhMs+P5/OKlFlm4J4oqF7Tt/Q0
-5qo5spcWxYJvMqTpjOev/e/C6LlLqqP05tqNZSH7uoDrJiiFGv45jN5bBAS0VPmj
-Z55B+glSzAVIqMk/IQQezkhr/IXownuvf7fM+F86/TXGDe+X3EyrEeFryzHRbPtI
-gKvcnDe4IRRLDXE97IMzbtFuMhbsmMcWi1mmNKsFVy2T96oTy9IT4rcuO81rUBcJ
-aD61JlfutuC23bkpgHl9j6PwpCikFcSF9CfUa7/lXORlAnZUtOM3ZiTTGWHIUhDl
-izeauan5Hb/qmZJhlv8BzaFfDbxxvA6sCx1HRR3B7Hzs/Sk=
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIIEQzCCAyugAwIBAgIBATANBgkqhkiG9w0BAQUFADB/MQswCQYDVQQGEwJHQjEb
-MBkGA1UECAwSR3JlYXRlciBNYW5jaGVzdGVyMRAwDgYDVQQHDAdTYWxmb3JkMRow
-GAYDVQQKDBFDb21vZG8gQ0EgTGltaXRlZDElMCMGA1UEAwwcVHJ1c3RlZCBDZXJ0
-aWZpY2F0ZSBTZXJ2aWNlczAeFw0wNDAxMDEwMDAwMDBaFw0yODEyMzEyMzU5NTla
-MH8xCzAJBgNVBAYTAkdCMRswGQYDVQQIDBJHcmVhdGVyIE1hbmNoZXN0ZXIxEDAO
-BgNVBAcMB1NhbGZvcmQxGjAYBgNVBAoMEUNvbW9kbyBDQSBMaW1pdGVkMSUwIwYD
-VQQDDBxUcnVzdGVkIENlcnRpZmljYXRlIFNlcnZpY2VzMIIBIjANBgkqhkiG9w0B
-AQEFAAOCAQ8AMIIBCgKCAQEA33FvNlhTWvI2VFeAxHQIIO0Yfyod5jWaHiWsnOWW
-fnJSoBVC21ndZHoa0Lh73TkVvFVIxO06AOoxEbrycXQaZ7jPM8yoMa+j49d/vzMt
-TGo87IvDktJTdyR0nAducPy9C1t2ul/y/9c3S0pgePfw+spwtOpZqqPOSC+pw7IL
-fhdyFgymBwwbOM/JYrc/oJOlh0Hyt3BAd9i+FHzjqMB6juljatEPmsbS9Is6FARW
-1O24zG71++IsWL1/T2sr92AkWCTOJu80kTrV44HQsvAEAtdbtz6SrGsSivnkBbA7
-kUlcsutT6vifR4buv5XAwAaf0lteERv0xwQ1KdJVXOTt6wIDAQABo4HJMIHGMB0G
-A1UdDgQWBBTFe1i97doladL3WRaoszLAeydb9DAOBgNVHQ8BAf8EBAMCAQYwDwYD
-VR0TAQH/BAUwAwEB/zCBgwYDVR0fBHwwejA8oDqgOIY2aHR0cDovL2NybC5jb21v
-ZG9jYS5jb20vVHJ1c3RlZENlcnRpZmljYXRlU2VydmljZXMuY3JsMDqgOKA2hjRo
-dHRwOi8vY3JsLmNvbW9kby5uZXQvVHJ1c3RlZENlcnRpZmljYXRlU2VydmljZXMu
-Y3JsMA0GCSqGSIb3DQEBBQUAA4IBAQDIk4E7ibSvuIQSTI3S8NtwuleGFTQQuS9/
-HrCoiWChisJ3DFBKmwCL2Iv0QeLQg4pKHBQGsKNoBXAxMKdTmw7pSqBYaWcOrp32
-pSxBvzwGa+RZzG0Q8ZZvH9/0BAKkn0U+yNj6NkZEUD+Cl5EfKNsYEYwq5GWDVxIS
-jBc/lDb+XbDABHcTuPQV1T84zJQ6VdCsmPW6AF/ghhmBeC8owH7TzEIK9a5QoNE+
-xqFx7D+gIIxmOom0jtTYsU0lR+4viMi14QVFwL4Ucd56/Y57fU0IlqUSc/Atyjcn
-dBInTMu2l+nZrghtWjlA3QVHdWpaIbOjGM9O9y5Xt5hwXsjEeLBi
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIIDoTCCAomgAwIBAgILBAAAAAABD4WqLUgwDQYJKoZIhvcNAQEFBQAwOzEYMBYG
-A1UEChMPQ3liZXJ0cnVzdCwgSW5jMR8wHQYDVQQDExZDeWJlcnRydXN0IEdsb2Jh
-bCBSb290MB4XDTA2MTIxNTA4MDAwMFoXDTIxMTIxNTA4MDAwMFowOzEYMBYGA1UE
-ChMPQ3liZXJ0cnVzdCwgSW5jMR8wHQYDVQQDExZDeWJlcnRydXN0IEdsb2JhbCBS
-b290MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA+Mi8vRRQZhP/8NN5
-7CPytxrHjoXxEnOmGaoQ25yiZXRadz5RfVb23CO21O1fWLE3TdVJDm71aofW0ozS
-J8bi/zafmGWgE07GKmSb1ZASzxQG9Dvj1Ci+6A74q05IlG2OlTEQXO2iLb3VOm2y
-HLtgwEZLAfVJrn5GitB0jaEMAs7u/OePuGtm839EAL9mJRQr3RAwHQeWP032a7iP
-t3sMpTjr3kfb1V05/Iin89cqdPHoWqI7n1C6poxFNcJQZZXcY4Lv3b93TZxiyWNz
-FtApD0mpSPCzqrdsxacwOUBdrsTiXSZT8M4cIwhhqJQZugRiQOwfOHB3EgZxpzAY
-XSUnpQIDAQABo4GlMIGiMA4GA1UdDwEB/wQEAwIBBjAPBgNVHRMBAf8EBTADAQH/
-MB0GA1UdDgQWBBS2CHsNesysIEyGVjJez6tuhS1wVzA/BgNVHR8EODA2MDSgMqAw
-hi5odHRwOi8vd3d3Mi5wdWJsaWMtdHJ1c3QuY29tL2NybC9jdC9jdHJvb3QuY3Js
-MB8GA1UdIwQYMBaAFLYIew16zKwgTIZWMl7Pq26FLXBXMA0GCSqGSIb3DQEBBQUA
-A4IBAQBW7wojoFROlZfJ+InaRcHUowAl9B8Tq7ejhVhpwjCt2BWKLePJzYFa+HMj
-Wqd8BfP9IjsO0QbE2zZMcwSO5bAi5MXzLqXZI+O4Tkogp24CJJ8iYGd7ix1yCcUx
-XOl5n4BHPa2hCwcUPUf/A2kaDAtE52Mlp3+yybh2hO0j9n0Hq0V+09+zv+mKts2o
-omcrUtW3ZfA5TGOgkXmTUg9U3YO7n9GPp1Nzw8v/MOx8BLjYRB+TX3EJIrduPuoc
-A06dGiBh+4E37F78CkWr1+cXVdCg6mCbpvbjjFspwgZgFJ0tl0ypkxWdYcQBX0jW
-WL1WMRJOEcgh4LMRkWXbtKaIOM5V
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIIEMzCCAxugAwIBAgIDCYPzMA0GCSqGSIb3DQEBCwUAME0xCzAJBgNVBAYTAkRF
-MRUwEwYDVQQKDAxELVRydXN0IEdtYkgxJzAlBgNVBAMMHkQtVFJVU1QgUm9vdCBD
-bGFzcyAzIENBIDIgMjAwOTAeFw0wOTExMDUwODM1NThaFw0yOTExMDUwODM1NTha
-ME0xCzAJBgNVBAYTAkRFMRUwEwYDVQQKDAxELVRydXN0IEdtYkgxJzAlBgNVBAMM
-HkQtVFJVU1QgUm9vdCBDbGFzcyAzIENBIDIgMjAwOTCCASIwDQYJKoZIhvcNAQEB
-BQADggEPADCCAQoCggEBANOySs96R+91myP6Oi/WUEWJNTrGa9v+2wBoqOADER03
-UAifTUpolDWzU9GUY6cgVq/eUXjsKj3zSEhQPgrfRlWLJ23DEE0NkVJD2IfgXU42
-tSHKXzlABF9bfsyjxiupQB7ZNoTWSPOSHjRGICTBpFGOShrvUD9pXRl/RcPHAY9R
-ySPocq60vFYJfxLLHLGvKZAKyVXMD9O0Gu1HNVpK7ZxzBCHQqr0ME7UAyiZsxGsM
-lFqVlNpQmvH/pStmMaTJOKDfHR+4CS7zp+hnUquVH+BGPtikw8paxTGA6Eian5Rp
-/hnd2HN8gcqW3o7tszIFZYQ05ub9VxC1X3a/L7AQDcUCAwEAAaOCARowggEWMA8G
-A1UdEwEB/wQFMAMBAf8wHQYDVR0OBBYEFP3aFMSfMN4hvR5COfyrYyNJ4PGEMA4G
-A1UdDwEB/wQEAwIBBjCB0wYDVR0fBIHLMIHIMIGAoH6gfIZ6bGRhcDovL2RpcmVj
-dG9yeS5kLXRydXN0Lm5ldC9DTj1ELVRSVVNUJTIwUm9vdCUyMENsYXNzJTIwMyUy
-MENBJTIwMiUyMDIwMDksTz1ELVRydXN0JTIwR21iSCxDPURFP2NlcnRpZmljYXRl
-cmV2b2NhdGlvbmxpc3QwQ6BBoD+GPWh0dHA6Ly93d3cuZC10cnVzdC5uZXQvY3Js
-L2QtdHJ1c3Rfcm9vdF9jbGFzc18zX2NhXzJfMjAwOS5jcmwwDQYJKoZIhvcNAQEL
-BQADggEBAH+X2zDI36ScfSF6gHDOFBJpiBSVYEQBrLLpME+bUMJm2H6NMLVwMeni
-acfzcNsgFYbQDfC+rAF1hM5+n02/t2A7nPPKHeJeaNijnZflQGDSNiH+0LS4F9p0
-o3/U37CYAqxva2ssJSRyoWXuJVrl5jLn8t+rSfrzkGkj2wTZ51xY/GXUl77M/C4K
-zCUqNQT4YJEVdT1B/yMfGchs64JTBKbkTCJNjYy6zltz7GRUUG3RnFX7acM2w4y8
-PIWmawomDeCTmGCufsYkl4phX5GOZpIJhzbNi5stPvZR1FDUWSi9g/LMKHtThm3Y
-Johw1+qRzT65ysCQblrGXnRl11z+o+I=
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIIEQzCCAyugAwIBAgIDCYP0MA0GCSqGSIb3DQEBCwUAMFAxCzAJBgNVBAYTAkRF
-MRUwEwYDVQQKDAxELVRydXN0IEdtYkgxKjAoBgNVBAMMIUQtVFJVU1QgUm9vdCBD
-bGFzcyAzIENBIDIgRVYgMjAwOTAeFw0wOTExMDUwODUwNDZaFw0yOTExMDUwODUw
-NDZaMFAxCzAJBgNVBAYTAkRFMRUwEwYDVQQKDAxELVRydXN0IEdtYkgxKjAoBgNV
-BAMMIUQtVFJVU1QgUm9vdCBDbGFzcyAzIENBIDIgRVYgMjAwOTCCASIwDQYJKoZI
-hvcNAQEBBQADggEPADCCAQoCggEBAJnxhDRwui+3MKCOvXwEz75ivJn9gpfSegpn
-ljgJ9hBOlSJzmY3aFS3nBfwZcyK3jpgAvDw9rKFs+9Z5JUut8Mxk2og+KbgPCdM0
-3TP1YtHhzRnp7hhPTFiu4h7WDFsVWtg6uMQYZB7jM7K1iXdODL/ZlGsTl28So/6Z
-qQTMFexgaDbtCHu39b+T7WYxg4zGcTSHThfqr4uRjRxWQa4iN1438h3Z0S0NL2lR
-p75mpoo6Kr3HGrHhFPC+Oh25z1uxav60sUYgovseO3Dvk5h9jHOW8sXvhXCtKSb8
-HgQ+HKDYD8tSg2J87otTlZCpV6LqYQXY+U3EJ/pure3511H3a6UCAwEAAaOCASQw
-ggEgMA8GA1UdEwEB/wQFMAMBAf8wHQYDVR0OBBYEFNOUikxiEyoZLsyvcop9Ntea
-HNxnMA4GA1UdDwEB/wQEAwIBBjCB3QYDVR0fBIHVMIHSMIGHoIGEoIGBhn9sZGFw
-Oi8vZGlyZWN0b3J5LmQtdHJ1c3QubmV0L0NOPUQtVFJVU1QlMjBSb290JTIwQ2xh
-c3MlMjAzJTIwQ0ElMjAyJTIwRVYlMjAyMDA5LE89RC1UcnVzdCUyMEdtYkgsQz1E
-RT9jZXJ0aWZpY2F0ZXJldm9jYXRpb25saXN0MEagRKBChkBodHRwOi8vd3d3LmQt
-dHJ1c3QubmV0L2NybC9kLXRydXN0X3Jvb3RfY2xhc3NfM19jYV8yX2V2XzIwMDku
-Y3JsMA0GCSqGSIb3DQEBCwUAA4IBAQA07XtaPKSUiO8aEXUHL7P+PPoeUSbrh/Yp
-3uDx1MYkCenBz1UbtDDZzhr+BlGmFaQt77JLvyAoJUnRpjZ3NOhk31KxEcdzes05
-nsKtjHEh8lprr988TlWvsoRlFIm5d8sqMb7Po23Pb0iUMkZv53GMoKaEGTcH8gNF
-CSuGdXzfX2lXANtu2KZyIktQ1HWYVt+3GP9DQ1CuekR78HlR10M9p9OB0/DJT7na
-xpeG0ILD5EJt/rDiZE4OJudANCa1CInXCGNjOCd1HjPqbqjdn5lPdE2BiYBL3ZqX
-KVwvvoFBuYz/6n1gBp7N1z3TLqMVvKjmJuVvw9y4AyHqnxbxLFS1
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIIECTCCAvGgAwIBAgIQDV6ZCtadt3js2AdWO4YV2TANBgkqhkiG9w0BAQUFADBb
-MQswCQYDVQQGEwJVUzEgMB4GA1UEChMXRGlnaXRhbCBTaWduYXR1cmUgVHJ1c3Qx
-ETAPBgNVBAsTCERTVCBBQ0VTMRcwFQYDVQQDEw5EU1QgQUNFUyBDQSBYNjAeFw0w
-MzExMjAyMTE5NThaFw0xNzExMjAyMTE5NThaMFsxCzAJBgNVBAYTAlVTMSAwHgYD
-VQQKExdEaWdpdGFsIFNpZ25hdHVyZSBUcnVzdDERMA8GA1UECxMIRFNUIEFDRVMx
-FzAVBgNVBAMTDkRTVCBBQ0VTIENBIFg2MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8A
-MIIBCgKCAQEAuT31LMmU3HWKlV1j6IR3dma5WZFcRt2SPp/5DgO0PWGSvSMmtWPu
-ktKe1jzIDZBfZIGxqAgNTNj50wUoUrQBJcWVHAx+PhCEdc/BGZFjz+iokYi5Q1K7
-gLFViYsx+tC3dr5BPTCapCIlF3PoHuLTrCq9Wzgh1SpL11V94zpVvddtawJXa+ZH
-fAjIgrrep4c9oW24MFbCswKBXy314powGCi4ZtPLAZZv6opFVdbgnf9nKxcCpk4a
-ahELfrd755jWjHZvwTvbUJN+5dCOHze4vbrGn2zpfDPyMjwmR/onJALJfh1biEIT
-ajV8fTXpLmaRcpPVMibEdPVTo7NdmvYJywIDAQABo4HIMIHFMA8GA1UdEwEB/wQF
-MAMBAf8wDgYDVR0PAQH/BAQDAgHGMB8GA1UdEQQYMBaBFHBraS1vcHNAdHJ1c3Rk
-c3QuY29tMGIGA1UdIARbMFkwVwYKYIZIAWUDAgEBATBJMEcGCCsGAQUFBwIBFjto
-dHRwOi8vd3d3LnRydXN0ZHN0LmNvbS9jZXJ0aWZpY2F0ZXMvcG9saWN5L0FDRVMt
-aW5kZXguaHRtbDAdBgNVHQ4EFgQUCXIGThhDD+XWzMNqizF7eI+og7gwDQYJKoZI
-hvcNAQEFBQADggEBAKPYjtay284F5zLNAdMEA+V25FYrnJmQ6AgwbN99Pe7lv7Uk
-QIRJ4dEorsTCOlMwiPH1d25Ryvr/ma8kXxug/fKshMrfqfBfBC6tFr8hlxCBPeP/
-h40y3JTlR4peahPJlJU90u7INJXQgNStMgiAVDzgvVJT11J8smk/f3rPanTK+gQq
-nExaBqXpIK1FZg9p8d2/6eMyi/rgwYZNcjwu2JN4Cir42NInPRmJX1p7ijvMDNpR
-rscL9yuwNwXsvFcj4jjSm2jzVhKIT0J8uDHEtdvkyCE06UgRNe76x5JXxZ805Mf2
-9w4LTJxoeHtxMcfrHuBnQfO3oKfN5XozNmr6mis=
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIIDSjCCAjKgAwIBAgIQRK+wgNajJ7qJMDmGLvhAazANBgkqhkiG9w0BAQUFADA/
-MSQwIgYDVQQKExtEaWdpdGFsIFNpZ25hdHVyZSBUcnVzdCBDby4xFzAVBgNVBAMT
-DkRTVCBSb290IENBIFgzMB4XDTAwMDkzMDIxMTIxOVoXDTIxMDkzMDE0MDExNVow
-PzEkMCIGA1UEChMbRGlnaXRhbCBTaWduYXR1cmUgVHJ1c3QgQ28uMRcwFQYDVQQD
-Ew5EU1QgUm9vdCBDQSBYMzCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEB
-AN+v6ZdQCINXtMxiZfaQguzH0yxrMMpb7NnDfcdAwRgUi+DoM3ZJKuM/IUmTrE4O
-rz5Iy2Xu/NMhD2XSKtkyj4zl93ewEnu1lcCJo6m67XMuegwGMoOifooUMM0RoOEq
-OLl5CjH9UL2AZd+3UWODyOKIYepLYYHsUmu5ouJLGiifSKOeDNoJjj4XLh7dIN9b
-xiqKqy69cK3FCxolkHRyxXtqqzTWMIn/5WgTe1QLyNau7Fqckh49ZLOMxt+/yUFw
-7BZy1SbsOFU5Q9D8/RhcQPGX69Wam40dutolucbY38EVAjqr2m7xPi71XAicPNaD
-aeQQmxkqtilX4+U9m5/wAl0CAwEAAaNCMEAwDwYDVR0TAQH/BAUwAwEB/zAOBgNV
-HQ8BAf8EBAMCAQYwHQYDVR0OBBYEFMSnsaR7LHH62+FLkHX/xBVghYkQMA0GCSqG
-SIb3DQEBBQUAA4IBAQCjGiybFwBcqR7uKGY3Or+Dxz9LwwmglSBd49lZRNI+DT69
-ikugdB/OEIKcdBodfpga3csTS7MgROSR6cz8faXbauX+5v3gTt23ADq1cEmv8uXr
-AvHRAosZy5Q6XkjEGB5YGV8eAlrwDPGxrancWYaLbumR9YbK+rlmM6pZW87ipxZz
-R8srzJmwN0jP41ZL9c8PDHIyh8bwRLtTcm1D9SZImlJnt1ir/md2cXjbDaJWFBM5
-JDGFoqgCWjBH4d1QB7wCCZAA62RjYJsWvIjJEubSfZGL+T0yjWW06XyxV3bqxbYo
-Ob8VZRzI9neWagqNdwvYkQsEjgfbKbYK7p2CNTUQ
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIIDnzCCAoegAwIBAgIBJjANBgkqhkiG9w0BAQUFADBxMQswCQYDVQQGEwJERTEc
-MBoGA1UEChMTRGV1dHNjaGUgVGVsZWtvbSBBRzEfMB0GA1UECxMWVC1UZWxlU2Vj
-IFRydXN0IENlbnRlcjEjMCEGA1UEAxMaRGV1dHNjaGUgVGVsZWtvbSBSb290IENB
-IDIwHhcNOTkwNzA5MTIxMTAwWhcNMTkwNzA5MjM1OTAwWjBxMQswCQYDVQQGEwJE
-RTEcMBoGA1UEChMTRGV1dHNjaGUgVGVsZWtvbSBBRzEfMB0GA1UECxMWVC1UZWxl
-U2VjIFRydXN0IENlbnRlcjEjMCEGA1UEAxMaRGV1dHNjaGUgVGVsZWtvbSBSb290
-IENBIDIwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCrC6M14IspFLEU
-ha88EOQ5bzVdSq7d6mGNlUn0b2SjGmBmpKlAIoTZ1KXleJMOaAGtuU1cOs7TuKhC
-QN/Po7qCWWqSG6wcmtoIKyUn+WkjR/Hg6yx6m/UTAtB+NHzCnjwAWav12gz1Mjwr
-rFDa1sPeg5TKqAyZMg4ISFZbavva4VhYAUlfckE8FQYBjl2tqriTtM2e66foai1S
-NNs671x1Udrb8zH57nGYMsRUFUQM+ZtV7a3fGAigo4aKSe5TBY8ZTNXeWHmb0moc
-QqvF1afPaA+W5OFhmHZhyJF81j4A4pFQh+GdCuatl9Idxjp9y7zaAzTVjlsB9WoH
-txa2bkp/AgMBAAGjQjBAMB0GA1UdDgQWBBQxw3kbuvVT1xfgiXotF2wKsyudMzAP
-BgNVHRMECDAGAQH/AgEFMA4GA1UdDwEB/wQEAwIBBjANBgkqhkiG9w0BAQUFAAOC
-AQEAlGRZrTlk5ynrE/5aw4sTV8gEJPB0d8Bg42f76Ymmg7+Wgnxu1MM9756Abrsp
-tJh6sTtU6zkXR34ajgv8HzFZMQSyzhfzLMdiNlXiItiJVbSYSKpk+tYcNthEeFpa
-IzpXl/V6ME+un2pMSyuOoAPjPuCp1NJ70rOo4nI8rZ7/gFnkm0W09juwzTkZmDLl
-6iFhkOQxIY40sfcvNUqFENrnijchvllj4PKFiDFT1FQUhXB59C4Gdyd1Lx+4ivn+
-xbrYNuSD7Odlt79jWvNGr4GUN9RBjNYj1h7P9WgbRGOiWrqnNVmh5XAFmw4jV5mU
-Cm26OWMohpLzGITY+9HPBVZkVw==
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIIDtzCCAp+gAwIBAgIQDOfg5RfYRv6P5WD8G/AwOTANBgkqhkiG9w0BAQUFADBl
-MQswCQYDVQQGEwJVUzEVMBMGA1UEChMMRGlnaUNlcnQgSW5jMRkwFwYDVQQLExB3
-d3cuZGlnaWNlcnQuY29tMSQwIgYDVQQDExtEaWdpQ2VydCBBc3N1cmVkIElEIFJv
-b3QgQ0EwHhcNMDYxMTEwMDAwMDAwWhcNMzExMTEwMDAwMDAwWjBlMQswCQYDVQQG
-EwJVUzEVMBMGA1UEChMMRGlnaUNlcnQgSW5jMRkwFwYDVQQLExB3d3cuZGlnaWNl
-cnQuY29tMSQwIgYDVQQDExtEaWdpQ2VydCBBc3N1cmVkIElEIFJvb3QgQ0EwggEi
-MA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCtDhXO5EOAXLGH87dg+XESpa7c
-JpSIqvTO9SA5KFhgDPiA2qkVlTJhPLWxKISKityfCgyDF3qPkKyK53lTXDGEKvYP
-mDI2dsze3Tyoou9q+yHyUmHfnyDXH+Kx2f4YZNISW1/5WBg1vEfNoTb5a3/UsDg+
-wRvDjDPZ2C8Y/igPs6eD1sNuRMBhNZYW/lmci3Zt1/GiSw0r/wty2p5g0I6QNcZ4
-VYcgoc/lbQrISXwxmDNsIumH0DJaoroTghHtORedmTpyoeb6pNnVFzF1roV9Iq4/
-AUaG9ih5yLHa5FcXxH4cDrC0kqZWs72yl+2qp/C3xag/lRbQ/6GW6whfGHdPAgMB
-AAGjYzBhMA4GA1UdDwEB/wQEAwIBhjAPBgNVHRMBAf8EBTADAQH/MB0GA1UdDgQW
-BBRF66Kv9JLLgjEtUYunpyGd823IDzAfBgNVHSMEGDAWgBRF66Kv9JLLgjEtUYun
-pyGd823IDzANBgkqhkiG9w0BAQUFAAOCAQEAog683+Lt8ONyc3pklL/3cmbYMuRC
-dWKuh+vy1dneVrOfzM4UKLkNl2BcEkxY5NM9g0lFWJc1aRqoR+pWxnmrEthngYTf
-fwk8lOa4JiwgvT2zKIn3X/8i4peEH+ll74fg38FnSbNd67IJKusm7Xi+fT8r87cm
-NW1fiQG2SVufAQWbqz0lwcy2f8Lxb4bG+mRo64EtlOtCt/qMHt1i8b5QZ7dsvfPx
-H2sMNgcWfzd8qVttevESRmCD1ycEvkvOl77DZypoEd+A5wwzZr8TDRRu838fYxAe
-+o0bJW1sj6W3YQGx0qMmoRBxna3iw/nDmVG3KwcIzi7mULKn+gpFL6Lw8g==
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIIDljCCAn6gAwIBAgIQC5McOtY5Z+pnI7/Dr5r0SzANBgkqhkiG9w0BAQsFADBl
-MQswCQYDVQQGEwJVUzEVMBMGA1UEChMMRGlnaUNlcnQgSW5jMRkwFwYDVQQLExB3
-d3cuZGlnaWNlcnQuY29tMSQwIgYDVQQDExtEaWdpQ2VydCBBc3N1cmVkIElEIFJv
-b3QgRzIwHhcNMTMwODAxMTIwMDAwWhcNMzgwMTE1MTIwMDAwWjBlMQswCQYDVQQG
-EwJVUzEVMBMGA1UEChMMRGlnaUNlcnQgSW5jMRkwFwYDVQQLExB3d3cuZGlnaWNl
-cnQuY29tMSQwIgYDVQQDExtEaWdpQ2VydCBBc3N1cmVkIElEIFJvb3QgRzIwggEi
-MA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDZ5ygvUj82ckmIkzTz+GoeMVSA
-n61UQbVH35ao1K+ALbkKz3X9iaV9JPrjIgwrvJUXCzO/GU1BBpAAvQxNEP4Htecc
-biJVMWWXvdMX0h5i89vqbFCMP4QMls+3ywPgym2hFEwbid3tALBSfK+RbLE4E9Hp
-EgjAALAcKxHad3A2m67OeYfcgnDmCXRwVWmvo2ifv922ebPynXApVfSr/5Vh88lA
-bx3RvpO704gqu52/clpWcTs/1PPRCv4o76Pu2ZmvA9OPYLfykqGxvYmJHzDNw6Yu
-YjOuFgJ3RFrngQo8p0Quebg/BLxcoIfhG69Rjs3sLPr4/m3wOnyqi+RnlTGNAgMB
-AAGjQjBAMA8GA1UdEwEB/wQFMAMBAf8wDgYDVR0PAQH/BAQDAgGGMB0GA1UdDgQW
-BBTOw0q5mVXyuNtgv6l+vVa1lzan1jANBgkqhkiG9w0BAQsFAAOCAQEAyqVVjOPI
-QW5pJ6d1Ee88hjZv0p3GeDgdaZaikmkuOGybfQTUiaWxMTeKySHMq2zNixya1r9I
-0jJmwYrA8y8678Dj1JGG0VDjA9tzd29KOVPt3ibHtX2vK0LRdWLjSisCx1BL4Gni
-lmwORGYQRI+tBev4eaymG+g3NJ1TyWGqolKvSnAWhsI6yLETcDbYz+70CjTVW0z9
-B5yiutkBclzzTcHdDrEcDcRjvq30FPuJ7KJBDkzMyFdA0G4Dqs0MjomZmWzwPDCv
-ON9vvKO+KSAnq3T/EyJ43pdSVR6DtVQgA+6uwE9W3jfMw3+qBCe703e4YtsXfJwo
-IhNzbM8m9Yop5w==
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIICRjCCAc2gAwIBAgIQC6Fa+h3foLVJRK/NJKBs7DAKBggqhkjOPQQDAzBlMQsw
-CQYDVQQGEwJVUzEVMBMGA1UEChMMRGlnaUNlcnQgSW5jMRkwFwYDVQQLExB3d3cu
-ZGlnaWNlcnQuY29tMSQwIgYDVQQDExtEaWdpQ2VydCBBc3N1cmVkIElEIFJvb3Qg
-RzMwHhcNMTMwODAxMTIwMDAwWhcNMzgwMTE1MTIwMDAwWjBlMQswCQYDVQQGEwJV
-UzEVMBMGA1UEChMMRGlnaUNlcnQgSW5jMRkwFwYDVQQLExB3d3cuZGlnaWNlcnQu
-Y29tMSQwIgYDVQQDExtEaWdpQ2VydCBBc3N1cmVkIElEIFJvb3QgRzMwdjAQBgcq
-hkjOPQIBBgUrgQQAIgNiAAQZ57ysRGXtzbg/WPuNsVepRC0FFfLvC/8QdJ+1YlJf
-Zn4f5dwbRXkLzMZTCp2NXQLZqVneAlr2lSoOjThKiknGvMYDOAdfVdp+CW7if17Q
-RSAPWXYQ1qAk8C3eNvJsKTmjQjBAMA8GA1UdEwEB/wQFMAMBAf8wDgYDVR0PAQH/
-BAQDAgGGMB0GA1UdDgQWBBTL0L2p4ZgFUaFNN6KDec6NHSrkhDAKBggqhkjOPQQD
-AwNnADBkAjAlpIFFAmsSS3V0T8gj43DydXLefInwz5FyYZ5eEJJZVrmDxxDnOOlY
-JjZ91eQ0hjkCMHw2U/Aw5WJjOpnitqM7mzT6HtoQknFekROn3aRukswy1vUhZscv
-6pZjamVFkpUBtA==
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIIDrzCCApegAwIBAgIQCDvgVpBCRrGhdWrJWZHHSjANBgkqhkiG9w0BAQUFADBh
-MQswCQYDVQQGEwJVUzEVMBMGA1UEChMMRGlnaUNlcnQgSW5jMRkwFwYDVQQLExB3
-d3cuZGlnaWNlcnQuY29tMSAwHgYDVQQDExdEaWdpQ2VydCBHbG9iYWwgUm9vdCBD
-QTAeFw0wNjExMTAwMDAwMDBaFw0zMTExMTAwMDAwMDBaMGExCzAJBgNVBAYTAlVT
-MRUwEwYDVQQKEwxEaWdpQ2VydCBJbmMxGTAXBgNVBAsTEHd3dy5kaWdpY2VydC5j
-b20xIDAeBgNVBAMTF0RpZ2lDZXJ0IEdsb2JhbCBSb290IENBMIIBIjANBgkqhkiG
-9w0BAQEFAAOCAQ8AMIIBCgKCAQEA4jvhEXLeqKTTo1eqUKKPC3eQyaKl7hLOllsB
-CSDMAZOnTjC3U/dDxGkAV53ijSLdhwZAAIEJzs4bg7/fzTtxRuLWZscFs3YnFo97
-nh6Vfe63SKMI2tavegw5BmV/Sl0fvBf4q77uKNd0f3p4mVmFaG5cIzJLv07A6Fpt
-43C/dxC//AH2hdmoRBBYMql1GNXRor5H4idq9Joz+EkIYIvUX7Q6hL+hqkpMfT7P
-T19sdl6gSzeRntwi5m3OFBqOasv+zbMUZBfHWymeMr/y7vrTC0LUq7dBMtoM1O/4
-gdW7jVg/tRvoSSiicNoxBN33shbyTApOB6jtSj1etX+jkMOvJwIDAQABo2MwYTAO
-BgNVHQ8BAf8EBAMCAYYwDwYDVR0TAQH/BAUwAwEB/zAdBgNVHQ4EFgQUA95QNVbR
-TLtm8KPiGxvDl7I90VUwHwYDVR0jBBgwFoAUA95QNVbRTLtm8KPiGxvDl7I90VUw
-DQYJKoZIhvcNAQEFBQADggEBAMucN6pIExIK+t1EnE9SsPTfrgT1eXkIoyQY/Esr
-hMAtudXH/vTBH1jLuG2cenTnmCmrEbXjcKChzUyImZOMkXDiqw8cvpOp/2PV5Adg
-06O/nVsJ8dWO41P0jmP6P6fbtGbfYmbW0W5BjfIttep3Sp+dWOIrWcBAI+0tKIJF
-PnlUkiaY4IBIqDfv8NZ5YBberOgOzW6sRBc4L0na4UU+Krk2U886UAb3LujEV0ls
-YSEY1QSteDwsOoBrp+uvFRTp2InBuThs4pFsiv9kuXclVzDAGySj4dzp30d8tbQk
-CAUw7C29C79Fv1C5qfPrmAESrciIxpg0X40KPMbp1ZWVbd4=
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIIDjjCCAnagAwIBAgIQAzrx5qcRqaC7KGSxHQn65TANBgkqhkiG9w0BAQsFADBh
-MQswCQYDVQQGEwJVUzEVMBMGA1UEChMMRGlnaUNlcnQgSW5jMRkwFwYDVQQLExB3
-d3cuZGlnaWNlcnQuY29tMSAwHgYDVQQDExdEaWdpQ2VydCBHbG9iYWwgUm9vdCBH
-MjAeFw0xMzA4MDExMjAwMDBaFw0zODAxMTUxMjAwMDBaMGExCzAJBgNVBAYTAlVT
-MRUwEwYDVQQKEwxEaWdpQ2VydCBJbmMxGTAXBgNVBAsTEHd3dy5kaWdpY2VydC5j
-b20xIDAeBgNVBAMTF0RpZ2lDZXJ0IEdsb2JhbCBSb290IEcyMIIBIjANBgkqhkiG
-9w0BAQEFAAOCAQ8AMIIBCgKCAQEAuzfNNNx7a8myaJCtSnX/RrohCgiN9RlUyfuI
-2/Ou8jqJkTx65qsGGmvPrC3oXgkkRLpimn7Wo6h+4FR1IAWsULecYxpsMNzaHxmx
-1x7e/dfgy5SDN67sH0NO3Xss0r0upS/kqbitOtSZpLYl6ZtrAGCSYP9PIUkY92eQ
-q2EGnI/yuum06ZIya7XzV+hdG82MHauVBJVJ8zUtluNJbd134/tJS7SsVQepj5Wz
-tCO7TG1F8PapspUwtP1MVYwnSlcUfIKdzXOS0xZKBgyMUNGPHgm+F6HmIcr9g+UQ
-vIOlCsRnKPZzFBQ9RnbDhxSJITRNrw9FDKZJobq7nMWxM4MphQIDAQABo0IwQDAP
-BgNVHRMBAf8EBTADAQH/MA4GA1UdDwEB/wQEAwIBhjAdBgNVHQ4EFgQUTiJUIBiV
-5uNu5g/6+rkS7QYXjzkwDQYJKoZIhvcNAQELBQADggEBAGBnKJRvDkhj6zHd6mcY
-1Yl9PMWLSn/pvtsrF9+wX3N3KjITOYFnQoQj8kVnNeyIv/iPsGEMNKSuIEyExtv4
-NeF22d+mQrvHRAiGfzZ0JFrabA0UWTW98kndth/Jsw1HKj2ZL7tcu7XUIOGZX1NG
-Fdtom/DzMNU+MeKNhJ7jitralj41E6Vf8PlwUHBHQRFXGU7Aj64GxJUTFy8bJZ91
-8rGOmaFvE7FBcf6IKshPECBV1/MUReXgRPTqh5Uykw7+U0b6LJ3/iyK5S9kJRaTe
-pLiaWN0bfVKfjllDiIGknibVb63dDcY3fe0Dkhvld1927jyNxF1WW6LZZm6zNTfl
-MrY=
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIICPzCCAcWgAwIBAgIQBVVWvPJepDU1w6QP1atFcjAKBggqhkjOPQQDAzBhMQsw
-CQYDVQQGEwJVUzEVMBMGA1UEChMMRGlnaUNlcnQgSW5jMRkwFwYDVQQLExB3d3cu
-ZGlnaWNlcnQuY29tMSAwHgYDVQQDExdEaWdpQ2VydCBHbG9iYWwgUm9vdCBHMzAe
-Fw0xMzA4MDExMjAwMDBaFw0zODAxMTUxMjAwMDBaMGExCzAJBgNVBAYTAlVTMRUw
-EwYDVQQKEwxEaWdpQ2VydCBJbmMxGTAXBgNVBAsTEHd3dy5kaWdpY2VydC5jb20x
-IDAeBgNVBAMTF0RpZ2lDZXJ0IEdsb2JhbCBSb290IEczMHYwEAYHKoZIzj0CAQYF
-K4EEACIDYgAE3afZu4q4C/sLfyHS8L6+c/MzXRq8NOrexpu80JX28MzQC7phW1FG
-fp4tn+6OYwwX7Adw9c+ELkCDnOg/QW07rdOkFFk2eJ0DQ+4QE2xy3q6Ip6FrtUPO
-Z9wj/wMco+I+o0IwQDAPBgNVHRMBAf8EBTADAQH/MA4GA1UdDwEB/wQEAwIBhjAd
-BgNVHQ4EFgQUs9tIpPmhxdiuNkHMEWNpYim8S8YwCgYIKoZIzj0EAwMDaAAwZQIx
-AK288mw/EkrRLTnDCgmXc/SINoyIJ7vmiI1Qhadj+Z4y3maTD/HMsQmP3Wyr+mt/
-oAIwOWZbwmSNuJ5Q3KjVSaLtx9zRSX8XAbjIho9OjIgrqJqpisXRAL34VOKa5Vt8
-sycX
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIIDxTCCAq2gAwIBAgIQAqxcJmoLQJuPC3nyrkYldzANBgkqhkiG9w0BAQUFADBs
-MQswCQYDVQQGEwJVUzEVMBMGA1UEChMMRGlnaUNlcnQgSW5jMRkwFwYDVQQLExB3
-d3cuZGlnaWNlcnQuY29tMSswKQYDVQQDEyJEaWdpQ2VydCBIaWdoIEFzc3VyYW5j
-ZSBFViBSb290IENBMB4XDTA2MTExMDAwMDAwMFoXDTMxMTExMDAwMDAwMFowbDEL
-MAkGA1UEBhMCVVMxFTATBgNVBAoTDERpZ2lDZXJ0IEluYzEZMBcGA1UECxMQd3d3
-LmRpZ2ljZXJ0LmNvbTErMCkGA1UEAxMiRGlnaUNlcnQgSGlnaCBBc3N1cmFuY2Ug
-RVYgUm9vdCBDQTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAMbM5XPm
-+9S75S0tMqbf5YE/yc0lSbZxKsPVlDRnogocsF9ppkCxxLeyj9CYpKlBWTrT3JTW
-PNt0OKRKzE0lgvdKpVMSOO7zSW1xkX5jtqumX8OkhPhPYlG++MXs2ziS4wblCJEM
-xChBVfvLWokVfnHoNb9Ncgk9vjo4UFt3MRuNs8ckRZqnrG0AFFoEt7oT61EKmEFB
-Ik5lYYeBQVCmeVyJ3hlKV9Uu5l0cUyx+mM0aBhakaHPQNAQTXKFx01p8VdteZOE3
-hzBWBOURtCmAEvF5OYiiAhF8J2a3iLd48soKqDirCmTCv2ZdlYTBoSUeh10aUAsg
-EsxBu24LUTi4S8sCAwEAAaNjMGEwDgYDVR0PAQH/BAQDAgGGMA8GA1UdEwEB/wQF
-MAMBAf8wHQYDVR0OBBYEFLE+w2kD+L9HAdSYJhoIAu9jZCvDMB8GA1UdIwQYMBaA
-FLE+w2kD+L9HAdSYJhoIAu9jZCvDMA0GCSqGSIb3DQEBBQUAA4IBAQAcGgaX3Nec
-nzyIZgYIVyHbIUf4KmeqvxgydkAQV8GK83rZEWWONfqe/EW1ntlMMUu4kehDLI6z
-eM7b41N5cdblIZQB2lWHmiRk9opmzN6cN82oNLFpmyPInngiK3BD41VHMWEZ71jF
-hS9OMPagMRYjyOfiZRYzy78aG6A9+MpeizGLYAiJLQwGXFK3xPkKmNEVX58Svnw2
-Yzi9RKR/5CYrCsSXaQ3pjOLAEFe4yHYSkVXySGnYvCoCWw9E1CAx2/S6cCZdkGCe
-vEsXCS+0yx5DaMkHJ8HSXPfqIbloEpw8nL+e/IBcm2PN7EeqJSdnoDfzAIJ9VNep
-+OkuE6N36B9K
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIIFkDCCA3igAwIBAgIQBZsbV56OITLiOQe9p3d1XDANBgkqhkiG9w0BAQwFADBi
-MQswCQYDVQQGEwJVUzEVMBMGA1UEChMMRGlnaUNlcnQgSW5jMRkwFwYDVQQLExB3
-d3cuZGlnaWNlcnQuY29tMSEwHwYDVQQDExhEaWdpQ2VydCBUcnVzdGVkIFJvb3Qg
-RzQwHhcNMTMwODAxMTIwMDAwWhcNMzgwMTE1MTIwMDAwWjBiMQswCQYDVQQGEwJV
-UzEVMBMGA1UEChMMRGlnaUNlcnQgSW5jMRkwFwYDVQQLExB3d3cuZGlnaWNlcnQu
-Y29tMSEwHwYDVQQDExhEaWdpQ2VydCBUcnVzdGVkIFJvb3QgRzQwggIiMA0GCSqG
-SIb3DQEBAQUAA4ICDwAwggIKAoICAQC/5pBzaN675F1KPDAiMGkz7MKnJS7JIT3y
-ithZwuEppz1Yq3aaza57G4QNxDAf8xukOBbrVsaXbR2rsnnyyhHS5F/WBTxSD1If
-xp4VpX6+n6lXFllVcq9ok3DCsrp1mWpzMpTREEQQLt+C8weE5nQ7bXHiLQwb7iDV
-ySAdYyktzuxeTsiT+CFhmzTrBcZe7FsavOvJz82sNEBfsXpm7nfISKhmV1efVFiO
-DCu3T6cw2Vbuyntd463JT17lNecxy9qTXtyOj4DatpGYQJB5w3jHtrHEtWoYOAMQ
-jdjUN6QuBX2I9YI+EJFwq1WCQTLX2wRzKm6RAXwhTNS8rhsDdV14Ztk6MUSaM0C/
-CNdaSaTC5qmgZ92kJ7yhTzm1EVgX9yRcRo9k98FpiHaYdj1ZXUJ2h4mXaXpI8OCi
-EhtmmnTK3kse5w5jrubU75KSOp493ADkRSWJtppEGSt+wJS00mFt6zPZxd9LBADM
-fRyVw4/3IbKyEbe7f/LVjHAsQWCqsWMYRJUadmJ+9oCw++hkpjPRiQfhvbfmQ6QY
-uKZ3AeEPlAwhHbJUKSWJbOUOUlFHdL4mrLZBdd56rF+NP8m800ERElvlEFDrMcXK
-chYiCd98THU/Y+whX8QgUWtvsauGi0/C1kVfnSD8oR7FwI+isX4KJpn15GkvmB0t
-9dmpsh3lGwIDAQABo0IwQDAPBgNVHRMBAf8EBTADAQH/MA4GA1UdDwEB/wQEAwIB
-hjAdBgNVHQ4EFgQU7NfjgtJxXWRM3y5nP+e6mK4cD08wDQYJKoZIhvcNAQEMBQAD
-ggIBALth2X2pbL4XxJEbw6GiAI3jZGgPVs93rnD5/ZpKmbnJeFwMDF/k5hQpVgs2
-SV1EY+CtnJYYZhsjDT156W1r1lT40jzBQ0CuHVD1UvyQO7uYmWlrx8GnqGikJ9yd
-+SeuMIW59mdNOj6PWTkiU0TryF0Dyu1Qen1iIQqAyHNm0aAFYF/opbSnr6j3bTWc
-fFqK1qI4mfN4i/RN0iAL3gTujJtHgXINwBQy7zBZLq7gcfJW5GqXb5JQbZaNaHqa
-sjYUegbyJLkJEVDXCLG4iXqEI2FCKeWjzaIgQdfRnGTZ6iahixTXTBmyUEFxPT9N
-cCOGDErcgdLMMpSEDQgJlxxPwO5rIHQw0uA5NBCFIRUBCOhVMt5xSdkoF1BN5r5N
-0XWs0Mr7QbhDparTwwVETyw2m+L64kW4I1NsBm9nVX9GtUw/bihaeSbSpKhil9Ie
-4u1Ki7wb/UdKDd9nZn6yW0HQO+T0O/QEY+nvwlQAUaCKKsnOeMzV6ocEGLPOr0mI
-r/OSmbaz5mEP0oUA51Aa5BuVnRmhuZyxm7EAHu/QD09CbMkKvO5D+jpxpchNJqU1
-/YldvIViHTLSoCtU7ZpXwdv6EM8Zt4tKG48BtieVU+i2iW1bvGjUI+iLUaJW+fCm
-gKDWHrO8Dw9TdSmq6hN35N6MgSGtBxBHEa2HPQfRdbzP82Z+
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIIGSzCCBDOgAwIBAgIIamg+nFGby1MwDQYJKoZIhvcNAQELBQAwgbIxCzAJBgNV
-BAYTAlRSMQ8wDQYDVQQHDAZBbmthcmExQDA+BgNVBAoMN0UtVHXEn3JhIEVCRyBC
-aWxpxZ9pbSBUZWtub2xvamlsZXJpIHZlIEhpem1ldGxlcmkgQS7Fni4xJjAkBgNV
-BAsMHUUtVHVncmEgU2VydGlmaWthc3lvbiBNZXJrZXppMSgwJgYDVQQDDB9FLVR1
-Z3JhIENlcnRpZmljYXRpb24gQXV0aG9yaXR5MB4XDTEzMDMwNTEyMDk0OFoXDTIz
-MDMwMzEyMDk0OFowgbIxCzAJBgNVBAYTAlRSMQ8wDQYDVQQHDAZBbmthcmExQDA+
-BgNVBAoMN0UtVHXEn3JhIEVCRyBCaWxpxZ9pbSBUZWtub2xvamlsZXJpIHZlIEhp
-em1ldGxlcmkgQS7Fni4xJjAkBgNVBAsMHUUtVHVncmEgU2VydGlmaWthc3lvbiBN
-ZXJrZXppMSgwJgYDVQQDDB9FLVR1Z3JhIENlcnRpZmljYXRpb24gQXV0aG9yaXR5
-MIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEA4vU/kwVRHoViVF56C/UY
-B4Oufq9899SKa6VjQzm5S/fDxmSJPZQuVIBSOTkHS0vdhQd2h8y/L5VMzH2nPbxH
-D5hw+IyFHnSOkm0bQNGZDbt1bsipa5rAhDGvykPL6ys06I+XawGb1Q5KCKpbknSF
-Q9OArqGIW66z6l7LFpp3RMih9lRozt6Plyu6W0ACDGQXwLWTzeHxE2bODHnv0ZEo
-q1+gElIwcxmOj+GMB6LDu0rw6h8VqO4lzKRG+Bsi77MOQ7osJLjFLFzUHPhdZL3D
-k14opz8n8Y4e0ypQBaNV2cvnOVPAmJ6MVGKLJrD3fY185MaeZkJVgkfnsliNZvcH
-fC425lAcP9tDJMW/hkd5s3kc91r0E+xs+D/iWR+V7kI+ua2oMoVJl0b+SzGPWsut
-dEcf6ZG33ygEIqDUD13ieU/qbIWGvaimzuT6w+Gzrt48Ue7LE3wBf4QOXVGUnhMM
-ti6lTPk5cDZvlsouDERVxcr6XQKj39ZkjFqzAQqptQpHF//vkUAqjqFGOjGY5RH8
-zLtJVor8udBhmm9lbObDyz51Sf6Pp+KJxWfXnUYTTjF2OySznhFlhqt/7x3U+Lzn
-rFpct1pHXFXOVbQicVtbC/DP3KBhZOqp12gKY6fgDT+gr9Oq0n7vUaDmUStVkhUX
-U8u3Zg5mTPj5dUyQ5xJwx0UCAwEAAaNjMGEwHQYDVR0OBBYEFC7j27JJ0JxUeVz6
-Jyr+zE7S6E5UMA8GA1UdEwEB/wQFMAMBAf8wHwYDVR0jBBgwFoAULuPbsknQnFR5
-XPonKv7MTtLoTlQwDgYDVR0PAQH/BAQDAgEGMA0GCSqGSIb3DQEBCwUAA4ICAQAF
-Nzr0TbdF4kV1JI+2d1LoHNgQk2Xz8lkGpD4eKexd0dCrfOAKkEh47U6YA5n+KGCR
-HTAduGN8qOY1tfrTYXbm1gdLymmasoR6d5NFFxWfJNCYExL/u6Au/U5Mh/jOXKqY
-GwXgAEZKgoClM4so3O0409/lPun++1ndYYRP0lSWE2ETPo+Aab6TR7U1Q9Jauz1c
-77NCR807VRMGsAnb/WP2OogKmW9+4c4bU2pEZiNRCHu8W1Ki/QY3OEBhj0qWuJA3
-+GbHeJAAFS6LrVE1Uweoa2iu+U48BybNCAVwzDk/dr2l02cmAYamU9JgO3xDf1WK
-vJUawSg5TB9D0pH0clmKuVb8P7Sd2nCcdlqMQ1DujjByTd//SffGqWfZbawCEeI6
-FiWnWAjLb1NBnEg4R2gz0dfHj9R0IdTDBZB6/86WiLEVKV0jq9BgoRJP3vQXzTLl
-yb/IQ639Lo7xr+L0mPoSHyDYwKcMhcWQ9DstliaxLL5Mq+ux0orJ23gTDx4JnW2P
-AJ8C2sH6H3p6CcRK5ogql5+Ji/03X186zjhZhkuvcQu02PJwT58yE+Owp1fl2tpD
-y4Q08ijE6m30Ku/Ba3ba+367hTzSU8JNvnHhRdH9I2cNE3X7z2VnIp2usAnRCf8d
-NL/+I5c30jn6PQ0GC7TbO6Orb1wdtn7os4I07QZcJA==
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIIF5zCCA8+gAwIBAgIITK9zQhyOdAIwDQYJKoZIhvcNAQEFBQAwgYAxODA2BgNV
-BAMML0VCRyBFbGVrdHJvbmlrIFNlcnRpZmlrYSBIaXptZXQgU2HEn2xhecSxY8Sx
-c8SxMTcwNQYDVQQKDC5FQkcgQmlsacWfaW0gVGVrbm9sb2ppbGVyaSB2ZSBIaXpt
-ZXRsZXJpIEEuxZ4uMQswCQYDVQQGEwJUUjAeFw0wNjA4MTcwMDIxMDlaFw0xNjA4
-MTQwMDMxMDlaMIGAMTgwNgYDVQQDDC9FQkcgRWxla3Ryb25payBTZXJ0aWZpa2Eg
-SGl6bWV0IFNhxJ9sYXnEsWPEsXPEsTE3MDUGA1UECgwuRUJHIEJpbGnFn2ltIFRl
-a25vbG9qaWxlcmkgdmUgSGl6bWV0bGVyaSBBLsWeLjELMAkGA1UEBhMCVFIwggIi
-MA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoICAQDuoIRh0DpqZhAy2DE4f6en5f2h
-4fuXd7hxlugTlkaDT7byX3JWbhNgpQGR4lvFzVcfd2NR/y8927k/qqk153nQ9dAk
-tiHq6yOU/im/+4mRDGSaBUorzAzu8T2bgmmkTPiab+ci2hC6X5L8GCcKqKpE+i4s
-tPtGmggDg3KriORqcsnlZR9uKg+ds+g75AxuetpX/dfreYteIAbTdgtsApWjluTL
-dlHRKJ2hGvxEok3MenaoDT2/F08iiFD9rrbskFBKW5+VQarKD7JK/oCZTqNGFav4
-c0JqwmZ2sQomFd2TkuzbqV9UIlKRcF0T6kjsbgNs2d1s/OsNA/+mgxKb8amTD8Um
-TDGyY5lhcucqZJnSuOl14nypqZoaqsNW2xCaPINStnuWt6yHd6i58mcLlEOzrz5z
-+kI2sSXFCjEmN1ZnuqMLfdb3ic1nobc6HmZP9qBVFCVMLDMNpkGMvQQxahByCp0O
-Lna9XvNRiYuoP1Vzv9s6xiQFlpJIqkuNKgPlV5EQ9GooFW5Hd4RcUXSfGenmHmMW
-OeMRFeNYGkS9y8RsZteEBt8w9DeiQyJ50hBs37vmExH8nYQKE3vwO9D8owrXieqW
-fo1IhR5kX9tUoqzVegJ5a9KK8GfaZXINFHDk6Y54jzJ0fFfy1tb0Nokb+Clsi7n2
-l9GkLqq+CxnCRelwXQIDAJ3Zo2MwYTAPBgNVHRMBAf8EBTADAQH/MA4GA1UdDwEB
-/wQEAwIBBjAdBgNVHQ4EFgQU587GT/wWZ5b6SqMHwQSny2re2kcwHwYDVR0jBBgw
-FoAU587GT/wWZ5b6SqMHwQSny2re2kcwDQYJKoZIhvcNAQEFBQADggIBAJuYml2+
-8ygjdsZs93/mQJ7ANtyVDR2tFcU22NU57/IeIl6zgrRdu0waypIN30ckHrMk2pGI
-6YNw3ZPX6bqz3xZaPt7gyPvT/Wwp+BVGoGgmzJNSroIBk5DKd8pNSe/iWtkqvTDO
-TLKBtjDOWU/aWR1qeqRFsIImgYZ29fUQALjuswnoT4cCB64kXPBfrAowzIpAoHME
-wfuJJPaaHFy3PApnNgUIMbOv2AFoKuB4j3TeuFGkjGwgPaL7s9QJ/XvCgKqTbCmY
-Iai7FvOpEl90tYeY8pUm3zTvilORiF0alKM/fCL414i6poyWqD1SNGKfAB5UVUJn
-xk1Gj7sURT0KlhaOEKGXmdXTMIXM3rRyt7yKPBgpaP3ccQfuJDlq+u2lrDgv+R4Q
-DgZxGhBM/nV+/x5XOULK1+EVoVZVWRvRo68R2E7DpSvvkL/A7IITW43WciyTTo9q
-Kd+FPNMN4KIYEsxVL0e3p5sC/kH2iExt2qkBR4NkJ2IQgtYSe14DHzSpyZH+r11t
-hie3I6p1GMog57AP14kOpmciY/SDQSsGS7tY1dHXt7kQY9iJSrSq3RZj9W6+YKH4
-7ejWkE8axsWgKdOnIaj1Wjz3x0miIZpKlVIglnKaZsv30oZDfCK+lvm9AahH3eU7
-QPl1K5srRmSGjR70j/sHd9DqSaIcjVIUpgqT
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIIFVjCCBD6gAwIBAgIQ7is969Qh3hSoYqwE893EATANBgkqhkiG9w0BAQUFADCB
-8zELMAkGA1UEBhMCRVMxOzA5BgNVBAoTMkFnZW5jaWEgQ2F0YWxhbmEgZGUgQ2Vy
-dGlmaWNhY2lvIChOSUYgUS0wODAxMTc2LUkpMSgwJgYDVQQLEx9TZXJ2ZWlzIFB1
-YmxpY3MgZGUgQ2VydGlmaWNhY2lvMTUwMwYDVQQLEyxWZWdldSBodHRwczovL3d3
-dy5jYXRjZXJ0Lm5ldC92ZXJhcnJlbCAoYykwMzE1MDMGA1UECxMsSmVyYXJxdWlh
-IEVudGl0YXRzIGRlIENlcnRpZmljYWNpbyBDYXRhbGFuZXMxDzANBgNVBAMTBkVD
-LUFDQzAeFw0wMzAxMDcyMzAwMDBaFw0zMTAxMDcyMjU5NTlaMIHzMQswCQYDVQQG
-EwJFUzE7MDkGA1UEChMyQWdlbmNpYSBDYXRhbGFuYSBkZSBDZXJ0aWZpY2FjaW8g
-KE5JRiBRLTA4MDExNzYtSSkxKDAmBgNVBAsTH1NlcnZlaXMgUHVibGljcyBkZSBD
-ZXJ0aWZpY2FjaW8xNTAzBgNVBAsTLFZlZ2V1IGh0dHBzOi8vd3d3LmNhdGNlcnQu
-bmV0L3ZlcmFycmVsIChjKTAzMTUwMwYDVQQLEyxKZXJhcnF1aWEgRW50aXRhdHMg
-ZGUgQ2VydGlmaWNhY2lvIENhdGFsYW5lczEPMA0GA1UEAxMGRUMtQUNDMIIBIjAN
-BgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAsyLHT+KXQpWIR4NA9h0X84NzJB5R
-85iKw5K4/0CQBXCHYMkAqbWUZRkiFRfCQ2xmRJoNBD45b6VLeqpjt4pEndljkYRm
-4CgPukLjbo73FCeTae6RDqNfDrHrZqJyTxIThmV6PttPB/SnCWDaOkKZx7J/sxaV
-HMf5NLWUhdWZXqBIoH7nF2W4onW4HvPlQn2v7fOKSGRdghST2MDk/7NQcvJ29rNd
-QlB50JQ+awwAvthrDk4q7D7SzIKiGGUzE3eeml0aE9jD2z3Il3rucO2n5nzbcc8t
-lGLfbdb1OL4/pYUKGbio2Al1QnDE6u/LDsg0qBIimAy4E5S2S+zw0JDnJwIDAQAB
-o4HjMIHgMB0GA1UdEQQWMBSBEmVjX2FjY0BjYXRjZXJ0Lm5ldDAPBgNVHRMBAf8E
-BTADAQH/MA4GA1UdDwEB/wQEAwIBBjAdBgNVHQ4EFgQUoMOLRKo3pUW/l4Ba0fF4
-opvpXY0wfwYDVR0gBHgwdjB0BgsrBgEEAfV4AQMBCjBlMCwGCCsGAQUFBwIBFiBo
-dHRwczovL3d3dy5jYXRjZXJ0Lm5ldC92ZXJhcnJlbDA1BggrBgEFBQcCAjApGidW
-ZWdldSBodHRwczovL3d3dy5jYXRjZXJ0Lm5ldC92ZXJhcnJlbCAwDQYJKoZIhvcN
-AQEFBQADggEBAKBIW4IB9k1IuDlVNZyAelOZ1Vr/sXE7zDkJlF7W2u++AVtd0x7Y
-/X1PzaBB4DSTv8vihpw3kpBWHNzrKQXlxJ7HNd+KDM3FIUPpqojlNcAZQmNaAl6k
-SBg6hW/cnbw/nZzBh7h6YQjpdwt/cKt63dmXLGQehb+8dJahw3oS7AwaboMMPOhy
-Rp/7SNVel+axofjk70YllJyJ22k4vuxcDlbHZVHlUIiIv0LVKz3l+bqeLrPK9HOS
-Agu+TGbrIP65y7WZf+a2E/rKS03Z7lNGBjvGTq2TWoF+bCpLagVFjPIhpDGQh2xl
-nJ2lYJU6Un/10asIbvPuW/mIPX64b24D5EI=
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIIEAzCCAuugAwIBAgIQVID5oHPtPwBMyonY43HmSjANBgkqhkiG9w0BAQUFADB1
-MQswCQYDVQQGEwJFRTEiMCAGA1UECgwZQVMgU2VydGlmaXRzZWVyaW1pc2tlc2t1
-czEoMCYGA1UEAwwfRUUgQ2VydGlmaWNhdGlvbiBDZW50cmUgUm9vdCBDQTEYMBYG
-CSqGSIb3DQEJARYJcGtpQHNrLmVlMCIYDzIwMTAxMDMwMTAxMDMwWhgPMjAzMDEy
-MTcyMzU5NTlaMHUxCzAJBgNVBAYTAkVFMSIwIAYDVQQKDBlBUyBTZXJ0aWZpdHNl
-ZXJpbWlza2Vza3VzMSgwJgYDVQQDDB9FRSBDZXJ0aWZpY2F0aW9uIENlbnRyZSBS
-b290IENBMRgwFgYJKoZIhvcNAQkBFglwa2lAc2suZWUwggEiMA0GCSqGSIb3DQEB
-AQUAA4IBDwAwggEKAoIBAQDIIMDs4MVLqwd4lfNE7vsLDP90jmG7sWLqI9iroWUy
-euuOF0+W2Ap7kaJjbMeMTC55v6kF/GlclY1i+blw7cNRfdCT5mzrMEvhvH2/UpvO
-bntl8jixwKIy72KyaOBhU8E2lf/slLo2rpwcpzIP5Xy0xm90/XsY6KxX7QYgSzIw
-WFv9zajmofxwvI6Sc9uXp3whrj3B9UiHbCe9nyV0gVWw93X2PaRka9ZP585ArQ/d
-MtO8ihJTmMmJ+xAdTX7Nfh9WDSFwhfYggx/2uh8Ej+p3iDXE/+pOoYtNP2MbRMNE
-1CV2yreN1x5KZmTNXMWcg+HCCIia7E6j8T4cLNlsHaFLAgMBAAGjgYowgYcwDwYD
-VR0TAQH/BAUwAwEB/zAOBgNVHQ8BAf8EBAMCAQYwHQYDVR0OBBYEFBLyWj7qVhy/
-zQas8fElyalL1BSZMEUGA1UdJQQ+MDwGCCsGAQUFBwMCBggrBgEFBQcDAQYIKwYB
-BQUHAwMGCCsGAQUFBwMEBggrBgEFBQcDCAYIKwYBBQUHAwkwDQYJKoZIhvcNAQEF
-BQADggEBAHv25MANqhlHt01Xo/6tu7Fq1Q+e2+RjxY6hUFaTlrg4wCQiZrxTFGGV
-v9DHKpY5P30osxBAIWrEr7BSdxjhlthWXePdNl4dp1BUoMUq5KqMlIpPnTX/dqQG
-E5Gion0ARD9V04I8GtVbvFZMIi5GQ4okQC3zErg7cBqklrkar4dBGmoYDQZPxz5u
-uSlNDUmJEYcyW+ZLBMjkXOZ0c5RdFpgTlf7727FE5TpwrDdr5rMzcijJs1eg9gIW
-iAYLtqZLICjU3j2LrTcFU3T+bsy8QxdxXvnFzBqpYe73dgzzcvRyrc9yAjYHR8/v
-GVCJYMzpJJUPwssd8m92kMfMdcGWxZ0=
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIIEKjCCAxKgAwIBAgIEOGPe+DANBgkqhkiG9w0BAQUFADCBtDEUMBIGA1UEChML
-RW50cnVzdC5uZXQxQDA+BgNVBAsUN3d3dy5lbnRydXN0Lm5ldC9DUFNfMjA0OCBp
-bmNvcnAuIGJ5IHJlZi4gKGxpbWl0cyBsaWFiLikxJTAjBgNVBAsTHChjKSAxOTk5
-IEVudHJ1c3QubmV0IExpbWl0ZWQxMzAxBgNVBAMTKkVudHJ1c3QubmV0IENlcnRp
-ZmljYXRpb24gQXV0aG9yaXR5ICgyMDQ4KTAeFw05OTEyMjQxNzUwNTFaFw0yOTA3
-MjQxNDE1MTJaMIG0MRQwEgYDVQQKEwtFbnRydXN0Lm5ldDFAMD4GA1UECxQ3d3d3
-LmVudHJ1c3QubmV0L0NQU18yMDQ4IGluY29ycC4gYnkgcmVmLiAobGltaXRzIGxp
-YWIuKTElMCMGA1UECxMcKGMpIDE5OTkgRW50cnVzdC5uZXQgTGltaXRlZDEzMDEG
-A1UEAxMqRW50cnVzdC5uZXQgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkgKDIwNDgp
-MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEArU1LqRKGsuqjIAcVFmQq
-K0vRvwtKTY7tgHalZ7d4QMBzQshowNtTK91euHaYNZOLGp18EzoOH1u3Hs/lJBQe
-sYGpjX24zGtLA/ECDNyrpUAkAH90lKGdCCmziAv1h3edVc3kw37XamSrhRSGlVuX
-MlBvPci6Zgzj/L24ScF2iUkZ/cCovYmjZy/Gn7xxGWC4LeksyZB2ZnuU4q941mVT
-XTzWnLLPKQP5L6RQstRIzgUyVYr9smRMDuSYB3Xbf9+5CFVghTAp+XtIpGmG4zU/
-HoZdenoVve8AjhUiVBcAkCaTvA5JaJG/+EfTnZVCwQ5N328mz8MYIWJmQ3DW1cAH
-4QIDAQABo0IwQDAOBgNVHQ8BAf8EBAMCAQYwDwYDVR0TAQH/BAUwAwEB/zAdBgNV
-HQ4EFgQUVeSB0RGAvtiJuQijMfmhJAkWuXAwDQYJKoZIhvcNAQEFBQADggEBADub
-j1abMOdTmXx6eadNl9cZlZD7Bh/KM3xGY4+WZiT6QBshJ8rmcnPyT/4xmf3IDExo
-U8aAghOY+rat2l098c5u9hURlIIM7j+VrxGrD9cv3h8Dj1csHsm7mhpElesYT6Yf
-zX1XEC+bBAlahLVu2B064dae0Wx5XnkcFMXj0EyTO2U87d89vqbllRrDtRnDvV5b
-u/8j72gZyxKTJ1wDLW8w0B62GqzeWvfRqqgnpv55gcR5mTNXuhKwqeBCbJPKVt7+
-bYQLCIt+jerXmCHG8+c8eS9enNFMFY3h7CI3zJpDC5fcgJCNs2ebb0gIFVbPv/Er
-fF6adulZkMV8gzURZVE=
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIIEkTCCA3mgAwIBAgIERWtQVDANBgkqhkiG9w0BAQUFADCBsDELMAkGA1UEBhMC
-VVMxFjAUBgNVBAoTDUVudHJ1c3QsIEluYy4xOTA3BgNVBAsTMHd3dy5lbnRydXN0
-Lm5ldC9DUFMgaXMgaW5jb3Jwb3JhdGVkIGJ5IHJlZmVyZW5jZTEfMB0GA1UECxMW
-KGMpIDIwMDYgRW50cnVzdCwgSW5jLjEtMCsGA1UEAxMkRW50cnVzdCBSb290IENl
-cnRpZmljYXRpb24gQXV0aG9yaXR5MB4XDTA2MTEyNzIwMjM0MloXDTI2MTEyNzIw
-NTM0MlowgbAxCzAJBgNVBAYTAlVTMRYwFAYDVQQKEw1FbnRydXN0LCBJbmMuMTkw
-NwYDVQQLEzB3d3cuZW50cnVzdC5uZXQvQ1BTIGlzIGluY29ycG9yYXRlZCBieSBy
-ZWZlcmVuY2UxHzAdBgNVBAsTFihjKSAyMDA2IEVudHJ1c3QsIEluYy4xLTArBgNV
-BAMTJEVudHJ1c3QgUm9vdCBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eTCCASIwDQYJ
-KoZIhvcNAQEBBQADggEPADCCAQoCggEBALaVtkNC+sZtKm9I35RMOVcF7sN5EUFo
-Nu3s/poBj6E4KPz3EEZmLk0eGrEaTsbRwJWIsMn/MYszA9u3g3s+IIRe7bJWKKf4
-4LlAcTfFy0cOlypowCKVYhXbR9n10Cv/gkvJrT7eTNuQgFA/CYqEAOwwCj0Yzfv9
-KlmaI5UXLEWeH25DeW0MXJj+SKfFI0dcXv1u5x609mhF0YaDW6KKjbHjKYD+JXGI
-rb68j6xSlkuqUY3kEzEZ6E5Nn9uss2rVvDlUccp6en+Q3X0dgNmBu1kmwhH+5pPi
-94DkZfs0Nw4pgHBNrziGLp5/V6+eF67rHMsoIV+2HNjnogQi+dPa2MsCAwEAAaOB
-sDCBrTAOBgNVHQ8BAf8EBAMCAQYwDwYDVR0TAQH/BAUwAwEB/zArBgNVHRAEJDAi
-gA8yMDA2MTEyNzIwMjM0MlqBDzIwMjYxMTI3MjA1MzQyWjAfBgNVHSMEGDAWgBRo
-kORnpKZTgMeGZqTx90tD+4S9bTAdBgNVHQ4EFgQUaJDkZ6SmU4DHhmak8fdLQ/uE
-vW0wHQYJKoZIhvZ9B0EABBAwDhsIVjcuMTo0LjADAgSQMA0GCSqGSIb3DQEBBQUA
-A4IBAQCT1DCw1wMgKtD5Y+iRDAUgqV8ZyntyTtSx29CW+1RaGSwMCPeyvIWonX9t
-O1KzKtvn1ISMY/YPyyYBkVBs9F8U4pN0wBOeMDpQ47RgxRzwIkSNcUesyBrJ6Zua
-AGAT/3B+XxFNSRuzFVJ7yVTav52Vr2ua2J7p8eRDjeIRRDq/r72DQnNSi6q7pynP
-9WQcCk3RvKqsnyrQ/39/2n3qse0wJcGE2jTSW3iDVuycNsMm4hH2Z0kdkquM++v/
-eu6FSqdQgPCnXEqULl8FmTxSQeDNtGPPAUO6nIPcj2A781q0tHuu2guQOHXvgR1m
-0vdXcDazv/wor3ElhVsT/h5/WrQ8
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIIC+TCCAoCgAwIBAgINAKaLeSkAAAAAUNCR+TAKBggqhkjOPQQDAzCBvzELMAkG
-A1UEBhMCVVMxFjAUBgNVBAoTDUVudHJ1c3QsIEluYy4xKDAmBgNVBAsTH1NlZSB3
-d3cuZW50cnVzdC5uZXQvbGVnYWwtdGVybXMxOTA3BgNVBAsTMChjKSAyMDEyIEVu
-dHJ1c3QsIEluYy4gLSBmb3IgYXV0aG9yaXplZCB1c2Ugb25seTEzMDEGA1UEAxMq
-RW50cnVzdCBSb290IENlcnRpZmljYXRpb24gQXV0aG9yaXR5IC0gRUMxMB4XDTEy
-MTIxODE1MjUzNloXDTM3MTIxODE1NTUzNlowgb8xCzAJBgNVBAYTAlVTMRYwFAYD
-VQQKEw1FbnRydXN0LCBJbmMuMSgwJgYDVQQLEx9TZWUgd3d3LmVudHJ1c3QubmV0
-L2xlZ2FsLXRlcm1zMTkwNwYDVQQLEzAoYykgMjAxMiBFbnRydXN0LCBJbmMuIC0g
-Zm9yIGF1dGhvcml6ZWQgdXNlIG9ubHkxMzAxBgNVBAMTKkVudHJ1c3QgUm9vdCBD
-ZXJ0aWZpY2F0aW9uIEF1dGhvcml0eSAtIEVDMTB2MBAGByqGSM49AgEGBSuBBAAi
-A2IABIQTydC6bUF74mzQ61VfZgIaJPRbiWlH47jCffHyAsWfoPZb1YsGGYZPUxBt
-ByQnoaD41UcZYUx9ypMn6nQM72+WCf5j7HBdNq1nd67JnXxVRDqiY1Ef9eNi1KlH
-Bz7MIKNCMEAwDgYDVR0PAQH/BAQDAgEGMA8GA1UdEwEB/wQFMAMBAf8wHQYDVR0O
-BBYEFLdj5xrdjekIplWDpOBqUEFlEUJJMAoGCCqGSM49BAMDA2cAMGQCMGF52OVC
-R98crlOZF7ZvHH3hvxGU0QOIdeSNiaSKd0bebWHvAvX7td/M/k7//qnmpwIwW5nX
-hTcGtXsI/esni0qU+eH6p44mCOh8kmhtc9hvJqwhAriZtyZBWyVgrtBIGu4G
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIIEPjCCAyagAwIBAgIESlOMKDANBgkqhkiG9w0BAQsFADCBvjELMAkGA1UEBhMC
-VVMxFjAUBgNVBAoTDUVudHJ1c3QsIEluYy4xKDAmBgNVBAsTH1NlZSB3d3cuZW50
-cnVzdC5uZXQvbGVnYWwtdGVybXMxOTA3BgNVBAsTMChjKSAyMDA5IEVudHJ1c3Qs
-IEluYy4gLSBmb3IgYXV0aG9yaXplZCB1c2Ugb25seTEyMDAGA1UEAxMpRW50cnVz
-dCBSb290IENlcnRpZmljYXRpb24gQXV0aG9yaXR5IC0gRzIwHhcNMDkwNzA3MTcy
-NTU0WhcNMzAxMjA3MTc1NTU0WjCBvjELMAkGA1UEBhMCVVMxFjAUBgNVBAoTDUVu
-dHJ1c3QsIEluYy4xKDAmBgNVBAsTH1NlZSB3d3cuZW50cnVzdC5uZXQvbGVnYWwt
-dGVybXMxOTA3BgNVBAsTMChjKSAyMDA5IEVudHJ1c3QsIEluYy4gLSBmb3IgYXV0
-aG9yaXplZCB1c2Ugb25seTEyMDAGA1UEAxMpRW50cnVzdCBSb290IENlcnRpZmlj
-YXRpb24gQXV0aG9yaXR5IC0gRzIwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEK
-AoIBAQC6hLZy254Ma+KZ6TABp3bqMriVQRrJ2mFOWHLP/vaCeb9zYQYKpSfYs1/T
-RU4cctZOMvJyig/3gxnQaoCAAEUesMfnmr8SVycco2gvCoe9amsOXmXzHHfV1IWN
-cCG0szLni6LVhjkCsbjSR87kyUnEO6fe+1R9V77w6G7CebI6C1XiUJgWMhNcL3hW
-wcKUs/Ja5CeanyTXxuzQmyWC48zCxEXFjJd6BmsqEZ+pCm5IO2/b1BEZQvePB7/1
-U1+cPvQXLOZprE4yTGJ36rfo5bs0vBmLrpxR57d+tVOxMyLlbc9wPBr64ptntoP0
-jaWvYkxN4FisZDQSA/i2jZRjJKRxAgMBAAGjQjBAMA4GA1UdDwEB/wQEAwIBBjAP
-BgNVHRMBAf8EBTADAQH/MB0GA1UdDgQWBBRqciZ60B7vfec7aVHUbI2fkBJmqzAN
-BgkqhkiG9w0BAQsFAAOCAQEAeZ8dlsa2eT8ijYfThwMEYGprmi5ZiXMRrEPR9RP/
-jTkrwPK9T3CMqS/qF8QLVJ7UG5aYMzyorWKiAHarWWluBh1+xLlEjZivEtRh2woZ
-Rkfz6/djwUAFQKXSt/S1mja/qYh2iARVBCuch38aNzx+LaUa2NSJXsq9rD1s2G2v
-1fN2D807iDginWyTmsQ9v4IbZT+mD12q/OWyFcq1rca8PdCE6OoGcrBNOTJ4vz4R
-nAuknZoh8/CbCzB428Hch0P+vGOaysXCHMnHjf87ElgI5rY97HosTvuDls4MPGmH
-VHOkc8KT/1EQrBVUAdj8BbGJoX90g5pJ19xOe4pIb4tF9g==
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIIDVDCCAjygAwIBAgIDAjRWMA0GCSqGSIb3DQEBBQUAMEIxCzAJBgNVBAYTAlVT
-MRYwFAYDVQQKEw1HZW9UcnVzdCBJbmMuMRswGQYDVQQDExJHZW9UcnVzdCBHbG9i
-YWwgQ0EwHhcNMDIwNTIxMDQwMDAwWhcNMjIwNTIxMDQwMDAwWjBCMQswCQYDVQQG
-EwJVUzEWMBQGA1UEChMNR2VvVHJ1c3QgSW5jLjEbMBkGA1UEAxMSR2VvVHJ1c3Qg
-R2xvYmFsIENBMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA2swYYzD9
-9BcjGlZ+W988bDjkcbd4kdS8odhM+KhDtgPpTSEHCIjaWC9mOSm9BXiLnTjoBbdq
-fnGk5sRgprDvgOSJKA+eJdbtg/OtppHHmMlCGDUUna2YRpIuT8rxh0PBFpVXLVDv
-iS2Aelet8u5fa9IAjbkU+BQVNdnARqN7csiRv8lVK83Qlz6cJmTM386DGXHKTubU
-1XupGc1V3sjs0l44U+VcT4wt/lAjNvxm5suOpDkZALeVAjmRCw7+OC7RHQWa9k0+
-bw8HHa8sHo9gOeL6NlMTOdReJivbPagUvTLrGAMoUgRx5aszPeE4uwc2hGKceeoW
-MPRfwCvocWvk+QIDAQABo1MwUTAPBgNVHRMBAf8EBTADAQH/MB0GA1UdDgQWBBTA
-ephojYn7qwVkDBF9qn1luMrMTjAfBgNVHSMEGDAWgBTAephojYn7qwVkDBF9qn1l
-uMrMTjANBgkqhkiG9w0BAQUFAAOCAQEANeMpauUvXVSOKVCUn5kaFOSPeCpilKIn
-Z57QzxpeR+nBsqTP3UEaBU6bS+5Kb1VSsyShNwrrZHYqLizz/Tt1kL/6cdjHPTfS
-tQWVYrmm3ok9Nns4d0iXrKYgjy6myQzCsplFAMfOEVEiIuCl6rYVSAlk6l5PdPcF
-PseKUgzbFbS9bZvlxrFUaKnjaZC2mqUPuLk/IH2uSrW4nOQdtqvmlKXBx4Ot2/Un
-hw4EbNX/3aBd7YdStysVAq45pmp06drE57xNNB6pXE0zX5IJL4hmXXeXxx12E6nV
-5fEWCRE11azbJHFwLJhWC9kXtNHjUStedejV0NxPNO3CBWaAocvmMw==
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIIDZjCCAk6gAwIBAgIBATANBgkqhkiG9w0BAQUFADBEMQswCQYDVQQGEwJVUzEW
-MBQGA1UEChMNR2VvVHJ1c3QgSW5jLjEdMBsGA1UEAxMUR2VvVHJ1c3QgR2xvYmFs
-IENBIDIwHhcNMDQwMzA0MDUwMDAwWhcNMTkwMzA0MDUwMDAwWjBEMQswCQYDVQQG
-EwJVUzEWMBQGA1UEChMNR2VvVHJ1c3QgSW5jLjEdMBsGA1UEAxMUR2VvVHJ1c3Qg
-R2xvYmFsIENBIDIwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDvPE1A
-PRDfO1MA4Wf+lGAVPoWI8YkNkMgoI5kF6CsgncbzYEbYwbLVjDHZ3CB5JIG/NTL8
-Y2nbsSpr7iFY8gjpeMtvy/wWUsiRxP89c96xPqfCfWbB9X5SJBri1WeR0IIQ13hL
-TytCOb1kLUCgsBDTOEhGiKEMuzozKmKY+wCdE1l/bztyqu6mD4b5BWHqZ38MN5aL
-5mkWRxHCJ1kDs6ZgwiFAVvqgx306E+PsV8ez1q6diYD3Aecs9pYrEw15LNnA5IZ7
-S4wMcoKK+xfNAGw6EzywhIdLFnopsk/bHdQL82Y3vdj2V7teJHq4PIu5+pIaGoSe
-2HSPqht/XvT+RSIhAgMBAAGjYzBhMA8GA1UdEwEB/wQFMAMBAf8wHQYDVR0OBBYE
-FHE4NvICMVNHK266ZUapEBVYIAUJMB8GA1UdIwQYMBaAFHE4NvICMVNHK266ZUap
-EBVYIAUJMA4GA1UdDwEB/wQEAwIBhjANBgkqhkiG9w0BAQUFAAOCAQEAA/e1K6td
-EPx7srJerJsOflN4WT5CBP51o62sgU7XAotexC3IUnbHLB/8gTKY0UvGkpMzNTEv
-/NgdRN3ggX+d6YvhZJFiCzkIjKx0nVnZellSlxG5FntvRdOW2TF9AjYPnDtuzywN
-A0ZF66D0f0hExghAzN4bcLUprbqLOzRldRtxIR0sFAqwlpW41uryZfspuk/qkZN0
-abby/+Ea0AzRdoXLiiW9l14sbxWZJue2Kf8i7MkCx1YAzUm5s2x7UwQa4qjJqhIF
-I8LO57sEAszAR6LkxCkvW0VXiVHuPOtSCP8HNR6fNWpHSlaY0VqFH4z1Ir+rzoPz
-4iIprn2DQKi6bA==
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIIDfDCCAmSgAwIBAgIQGKy1av1pthU6Y2yv2vrEoTANBgkqhkiG9w0BAQUFADBY
-MQswCQYDVQQGEwJVUzEWMBQGA1UEChMNR2VvVHJ1c3QgSW5jLjExMC8GA1UEAxMo
-R2VvVHJ1c3QgUHJpbWFyeSBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eTAeFw0wNjEx
-MjcwMDAwMDBaFw0zNjA3MTYyMzU5NTlaMFgxCzAJBgNVBAYTAlVTMRYwFAYDVQQK
-Ew1HZW9UcnVzdCBJbmMuMTEwLwYDVQQDEyhHZW9UcnVzdCBQcmltYXJ5IENlcnRp
-ZmljYXRpb24gQXV0aG9yaXR5MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKC
-AQEAvrgVe//UfH1nrYNke8hCUy3f9oQIIGHWAVlqnEQRr+92/ZV+zmEwu3qDXwK9
-AWbK7hWNb6EwnL2hhZ6UOvNWiAAxz9juapYC2e0DjPt1befquFUWBRaa9OBesYjA
-ZIVcFU2Ix7e64HXprQU9nceJSOC7KMgD4TCTZF5SwFlwIjVXiIrxlQqD17wxcwE0
-7e9GceBrAqg1cmuXm2bgyxx5X9gaBGgeRwLmnWDiNpcB3841kt++Z8dtd1k7j53W
-kBWUvEI0EME5+bEnPn7WinXFsq+W06Lem+SYvn3h6YGttm/81w7a4DSwDRp35+MI
-mO9Y+pyEtzavwt+s0vQQBnBxNQIDAQABo0IwQDAPBgNVHRMBAf8EBTADAQH/MA4G
-A1UdDwEB/wQEAwIBBjAdBgNVHQ4EFgQULNVQQZcVi/CPNmFbSvtr2ZnJM5IwDQYJ
-KoZIhvcNAQEFBQADggEBAFpwfyzdtzRP9YZRqSa+S7iq8XEN3GHHoOo0Hnp3DwQ1
-6CePbJC/kRYkRj5KTs4rFtULUh38H2eiAkUxT87z+gOneZ1TatnaYzr4gNfTmeGl
-4b7UVXGYNTq+k+qurUKykG/g/CFNNWMziUnWm07Kx+dOCQD32sfvmWKZd7aVIl6K
-oKv0uHiYyjgZmclynnjNS6yvGaBzEi38wkG6gZHaFloxt/m0cYASSJlyc1pZU8Fj
-UjPtp8nSOQJw+uCxQmYpqptR7TBUIhRf2asdweSU8Pj1K/fqynhG1riR/aYNKxoU
-AT6A8EKglQdebc3MS6RFjasS6LPeWuWgfOgPIh1a6Vk=
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIICrjCCAjWgAwIBAgIQPLL0SAoA4v7rJDteYD7DazAKBggqhkjOPQQDAzCBmDEL
-MAkGA1UEBhMCVVMxFjAUBgNVBAoTDUdlb1RydXN0IEluYy4xOTA3BgNVBAsTMChj
-KSAyMDA3IEdlb1RydXN0IEluYy4gLSBGb3IgYXV0aG9yaXplZCB1c2Ugb25seTE2
-MDQGA1UEAxMtR2VvVHJ1c3QgUHJpbWFyeSBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0
-eSAtIEcyMB4XDTA3MTEwNTAwMDAwMFoXDTM4MDExODIzNTk1OVowgZgxCzAJBgNV
-BAYTAlVTMRYwFAYDVQQKEw1HZW9UcnVzdCBJbmMuMTkwNwYDVQQLEzAoYykgMjAw
-NyBHZW9UcnVzdCBJbmMuIC0gRm9yIGF1dGhvcml6ZWQgdXNlIG9ubHkxNjA0BgNV
-BAMTLUdlb1RydXN0IFByaW1hcnkgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkgLSBH
-MjB2MBAGByqGSM49AgEGBSuBBAAiA2IABBWx6P0DFUPlrOuHNxFi79KDNlJ9RVcL
-So17VDs6bl8VAsBQps8lL33KSLjHUGMcKiEIfJo22Av+0SbFWDEwKCXzXV2juLal
-tJLtbCyf691DiaI8S0iRHVDsJt/WYC69IaNCMEAwDwYDVR0TAQH/BAUwAwEB/zAO
-BgNVHQ8BAf8EBAMCAQYwHQYDVR0OBBYEFBVfNVdRVfslsq0DafwBo/q+EVXVMAoG
-CCqGSM49BAMDA2cAMGQCMGSWWaboCd6LuvpaiIjwH5HTRqjySkwCY/tsXzjbLkGT
-qQ7mndwxHLKgpxgceeHHNgIwOlavmnRs9vuD4DPTCF+hnMJbn0bWtsuRBmOiBucz
-rD6ogRLQy7rQkgu2npaqBA+K
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIID/jCCAuagAwIBAgIQFaxulBmyeUtB9iepwxgPHzANBgkqhkiG9w0BAQsFADCB
-mDELMAkGA1UEBhMCVVMxFjAUBgNVBAoTDUdlb1RydXN0IEluYy4xOTA3BgNVBAsT
-MChjKSAyMDA4IEdlb1RydXN0IEluYy4gLSBGb3IgYXV0aG9yaXplZCB1c2Ugb25s
-eTE2MDQGA1UEAxMtR2VvVHJ1c3QgUHJpbWFyeSBDZXJ0aWZpY2F0aW9uIEF1dGhv
-cml0eSAtIEczMB4XDTA4MDQwMjAwMDAwMFoXDTM3MTIwMTIzNTk1OVowgZgxCzAJ
-BgNVBAYTAlVTMRYwFAYDVQQKEw1HZW9UcnVzdCBJbmMuMTkwNwYDVQQLEzAoYykg
-MjAwOCBHZW9UcnVzdCBJbmMuIC0gRm9yIGF1dGhvcml6ZWQgdXNlIG9ubHkxNjA0
-BgNVBAMTLUdlb1RydXN0IFByaW1hcnkgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkg
-LSBHMzCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBANziXmJYHTNXOTIz
-+uvLh4yn1ErdBojqZI4xmKU4kB6Yzy5jK/BGvESyiaHAKAxJcCGVn2TAppMSAmUm
-hsalifD614SgcK9PGpc/BkTVyetyEH3kMSj7HGHmKAdEc5IiaacDiGydY8hS2pgn
-5whMcD60yRLBxWeDXTPzAxHsatBT4tG6NmCUgLthY2xbF37fQJQeqw3CIShwiP/W
-JmxsYAQlTlV+fe+/lEjetx3dcI0FX4ilm/LC7urRQEFtYjgdVgbFA0dRIBn8exAL
-DmKudlW/X3e+PkkBUz2YJQN2JFodtNuJ6nnltrM7P7pMKEF/BqxqjsHQ9gUdfeZC
-huOl1UcCAwEAAaNCMEAwDwYDVR0TAQH/BAUwAwEB/zAOBgNVHQ8BAf8EBAMCAQYw
-HQYDVR0OBBYEFMR5yo6hTgMdHNxr2zFblD4/MH8tMA0GCSqGSIb3DQEBCwUAA4IB
-AQAtxRPPVoB7eni9n64smefv2t+UXglpp+duaIy9cr5HqQ6XErhK8WTTOd8lNNTB
-zU6B8A8ExCSzNJbGpqow32hhc9f5joWJ7w5elShKKiePEI4ufIbEAp7aDHdlDkQN
-kv39sxY2+hENHYwOB4lqKVb3cvTdFZx3NWZXqxNT2I7BQMXXExZacse3aQHEerGD
-AWh9jUGhlBjBJVz88P6DAod8DQ3PLghcSkANPuyBYeYk28rgDi0Hsj5W3I31QYUH
-SJsMC8tJP33st/3LjWeJGqvtux6jAAgIFyqCXDFdRootD4abdNlF+9RAsXqqaC2G
-spki4cErx5z481+oghLrGREt
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIIFaDCCA1CgAwIBAgIBATANBgkqhkiG9w0BAQUFADBFMQswCQYDVQQGEwJVUzEW
-MBQGA1UEChMNR2VvVHJ1c3QgSW5jLjEeMBwGA1UEAxMVR2VvVHJ1c3QgVW5pdmVy
-c2FsIENBMB4XDTA0MDMwNDA1MDAwMFoXDTI5MDMwNDA1MDAwMFowRTELMAkGA1UE
-BhMCVVMxFjAUBgNVBAoTDUdlb1RydXN0IEluYy4xHjAcBgNVBAMTFUdlb1RydXN0
-IFVuaXZlcnNhbCBDQTCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIBAKYV
-VaCjxuAfjJ0hUNfBvitbtaSeodlyWL0AG0y/YckUHUWCq8YdgNY96xCcOq9tJPi8
-cQGeBvV8Xx7BDlXKg5pZMK4ZyzBIle0iN430SppyZj6tlcDgFgDgEB8rMQ7XlFTT
-QjOgNB0eRXbdT8oYN+yFFXoZCPzVx5zw8qkuEKmS5j1YPakWaDwvdSEYfyh3peFh
-F7em6fgemdtzbvQKoiFs7tqqhZJmr/Z6a4LauiIINQ/PQvE1+mrufislzDoR5G2v
-c7J2Ha3QsnhnGqQ5HFELZ1aD/ThdDc7d8Lsrlh/eezJS/R27tQahsiFepdaVaH/w
-mZ7cRQg+59IJDTWU3YBOU5fXtQlEIGQWFwMCTFMNaN7VqnJNk22CDtucvc+081xd
-VHppCZbW2xHBjXWotM85yM48vCR85mLK4b19p71XZQvk/iXttmkQ3CgaRr0BHdCX
-teGYO8A3ZNY9lO4L4fUorgtWv3GLIylBjobFS1J72HGrH4oVpjuDWtdYAVHGTEHZ
-f9hBZ3KiKN9gg6meyHv8U3NyWfWTehd2Ds735VzZC1U0oqpbtWpU5xPKV+yXbfRe
-Bi9Fi1jUIxaS5BZuKGNZMN9QAZxjiRqf2xeUgnA3wySemkfWWspOqGmJch+RbNt+
-nhutxx9z3SxPGWX9f5NAEC7S8O08ni4oPmkmM8V7AgMBAAGjYzBhMA8GA1UdEwEB
-/wQFMAMBAf8wHQYDVR0OBBYEFNq7LqqwDLiIJlF0XG0D08DYj3rWMB8GA1UdIwQY
-MBaAFNq7LqqwDLiIJlF0XG0D08DYj3rWMA4GA1UdDwEB/wQEAwIBhjANBgkqhkiG
-9w0BAQUFAAOCAgEAMXjmx7XfuJRAyXHEqDXsRh3ChfMoWIawC/yOsjmPRFWrZIRc
-aanQmjg8+uUfNeVE44B5lGiku8SfPeE0zTBGi1QrlaXv9z+ZhP015s8xxtxqv6fX
-IwjhmF7DWgh2qaavdy+3YL1ERmrvl/9zlcGO6JP7/TG37FcREUWbMPEaiDnBTzyn
-ANXH/KttgCJwpQzgXQQpAvvLoJHRfNbDflDVnVi+QTjruXU8FdmbyUqDWcDaU/0z
-uzYYm4UPFd3uLax2k7nZAY1IEKj79TiG8dsKxr2EoyNB3tZ3b4XUhRxQ4K5RirqN
-Pnbiucon8l+f725ZDQbYKxek0nxru18UGkiPGkzns0ccjkxFKyDuSN/n3QmOGKja
-QI2SJhFTYXNd673nxE0pN2HrrDktZy4W1vUAg4WhzH92xH3kt0tm7wNFYGm2DFKW
-koRepqO1pD4r2czYG0eq8kTaT/kD6PAUyz/zg97QwVTjt+gKN02LIFkDMBmhLMi9
-ER/frslKxfMnZmaGrGiR/9nmUxwPi1xpZQomyB40w11Re9epnAahNt3ViZS82eQt
-DF4JbAiXfKM9fJP/P6EUp8+1Xevb2xzEdt+Iub1FBZUbrvxGakyvSOPOrg/Sfuvm
-bJxPgWp6ZKy7PtXny3YuxadIwVyQD8vIP/rmMuGNG2+k5o7Y+SlIis5z/iw=
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIIFbDCCA1SgAwIBAgIBATANBgkqhkiG9w0BAQUFADBHMQswCQYDVQQGEwJVUzEW
-MBQGA1UEChMNR2VvVHJ1c3QgSW5jLjEgMB4GA1UEAxMXR2VvVHJ1c3QgVW5pdmVy
-c2FsIENBIDIwHhcNMDQwMzA0MDUwMDAwWhcNMjkwMzA0MDUwMDAwWjBHMQswCQYD
-VQQGEwJVUzEWMBQGA1UEChMNR2VvVHJ1c3QgSW5jLjEgMB4GA1UEAxMXR2VvVHJ1
-c3QgVW5pdmVyc2FsIENBIDIwggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoIC
-AQCzVFLByT7y2dyxUxpZKeexw0Uo5dfR7cXFS6GqdHtXr0om/Nj1XqduGdt0DE81
-WzILAePb63p3NeqqWuDW6KFXlPCQo3RWlEQwAx5cTiuFJnSCegx2oG9NzkEtoBUG
-FF+3Qs17j1hhNNwqCPkuwwGmIkQcTAeC5lvO0Ep8BNMZcyfwqph/Lq9O64ceJHdq
-XbboW0W63MOhBW9Wjo8QJqVJwy7XQYci4E+GymC16qFjwAGXEHm9ADwSbSsVsaxL
-se4YuU6W3Nx2/zu+z18DwPw76L5GG//aQMJS9/7jOvdqdzXQ2o3rXhhqMcceujwb
-KNZrVMaqW9eiLBsZzKIC9ptZvTdrhrVtgrrY6slWvKk2WP0+GfPtDCapkzj4T8Fd
-IgbQl+rhrcZV4IErKIM6+vR7IVEAvlI4zs1meaj0gVbi0IMJR1FbUGrP20gaXT73
-y/Zl92zxlfgCOzJWgjl6W70viRu/obTo/3+NjN8D8WBOWBFM66M/ECuDmgFz2ZRt
-hAAnZqzwcEAJQpKtT5MNYQlRJNiS1QuUYbKHsu3/mjX/hVTK7URDrBs8FmtISgoc
-QIgfksILAAX/8sgCSqSqqcyZlpwvWOB94b67B9xfBHJcMTTD7F8t4D1kkCLm0ey4
-Lt1ZrtmhN79UNdxzMk+MBB4zsslG8dhcyFVQyWi9qLo2CQIDAQABo2MwYTAPBgNV
-HRMBAf8EBTADAQH/MB0GA1UdDgQWBBR281Xh+qQ2+/CfXGJx7Tz0RzgQKzAfBgNV
-HSMEGDAWgBR281Xh+qQ2+/CfXGJx7Tz0RzgQKzAOBgNVHQ8BAf8EBAMCAYYwDQYJ
-KoZIhvcNAQEFBQADggIBAGbBxiPz2eAubl/oz66wsCVNK/g7WJtAJDday6sWSf+z
-dXkzoS9tcBc0kf5nfo/sm+VegqlVHy/c1FEHEv6sFj4sNcZj/NwQ6w2jqtB8zNHQ
-L1EuxBRa3ugZ4T7GzKQp5y6EqgYweHZUcyiYWTjgAA1i00J9IZ+uPTqM1fp3DRgr
-Fg5fNuH8KrUwJM/gYwx7WBr+mbpCErGR9Hxo4sjoryzqyX6uuyo9DRXcNJW2GHSo
-ag/HtPQTxORb7QrSpJdMKu0vbBKJPfEncKpqA1Ihn0CoZ1Dy81of398j9tx4TuaY
-T1U6U+Pv8vSfx3zYWK8pIpe44L2RLrB27FcRz+8pRPPphXpgY+RdM4kX2TGq2tbz
-GDVyz4crL2MjhF2EjD9XoIj8mZEoJmmZ1I+XRL6O1UixpCgp8RW04eWe3fiPpm8m
-1wk8OhwRDqZsN/etRIcsKMfYdIKz0G9KV7s1KSegi+ghp4dkNl3M2Basx7InQJJV
-OCiNUW7dFGdTbHFcJoRNdVq2fmBWqU2t+5sel/MN2dKXVHfaPRK34B7vCAas+YWH
-6aLcr34YEoP9VhdBLtUpgn2Z9DH2canPLAEnpQW5qrJITirvn5NSUZU8UnOOVkwX
-QMAJKOSLakhT2+zNVVXxxvjpoixMptEmX36vWkzaH6byHCx+rgIW0lbQL1dTR+iS
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIIB4TCCAYegAwIBAgIRKjikHJYKBN5CsiilC+g0mAIwCgYIKoZIzj0EAwIwUDEk
-MCIGA1UECxMbR2xvYmFsU2lnbiBFQ0MgUm9vdCBDQSAtIFI0MRMwEQYDVQQKEwpH
-bG9iYWxTaWduMRMwEQYDVQQDEwpHbG9iYWxTaWduMB4XDTEyMTExMzAwMDAwMFoX
-DTM4MDExOTAzMTQwN1owUDEkMCIGA1UECxMbR2xvYmFsU2lnbiBFQ0MgUm9vdCBD
-QSAtIFI0MRMwEQYDVQQKEwpHbG9iYWxTaWduMRMwEQYDVQQDEwpHbG9iYWxTaWdu
-MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEuMZ5049sJQ6fLjkZHAOkrprlOQcJ
-FspjsbmG+IpXwVfOQvpzofdlQv8ewQCybnMO/8ch5RikqtlxP6jUuc6MHaNCMEAw
-DgYDVR0PAQH/BAQDAgEGMA8GA1UdEwEB/wQFMAMBAf8wHQYDVR0OBBYEFFSwe61F
-uOJAf/sKbvu+M8k8o4TVMAoGCCqGSM49BAMCA0gAMEUCIQDckqGgE6bPA7DmxCGX
-kPoUVy0D7O48027KqGx2vKLeuwIgJ6iFJzWbVsaj8kfSt24bAgAXqmemFZHe+pTs
-ewv4n4Q=
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIICHjCCAaSgAwIBAgIRYFlJ4CYuu1X5CneKcflK2GwwCgYIKoZIzj0EAwMwUDEk
-MCIGA1UECxMbR2xvYmFsU2lnbiBFQ0MgUm9vdCBDQSAtIFI1MRMwEQYDVQQKEwpH
-bG9iYWxTaWduMRMwEQYDVQQDEwpHbG9iYWxTaWduMB4XDTEyMTExMzAwMDAwMFoX
-DTM4MDExOTAzMTQwN1owUDEkMCIGA1UECxMbR2xvYmFsU2lnbiBFQ0MgUm9vdCBD
-QSAtIFI1MRMwEQYDVQQKEwpHbG9iYWxTaWduMRMwEQYDVQQDEwpHbG9iYWxTaWdu
-MHYwEAYHKoZIzj0CAQYFK4EEACIDYgAER0UOlvt9Xb/pOdEh+J8LttV7HpI6SFkc
-8GIxLcB6KP4ap1yztsyX50XUWPrRd21DosCHZTQKH3rd6zwzocWdTaRvQZU4f8ke
-hOvRnkmSh5SHDDqFSmafnVmTTZdhBoZKo0IwQDAOBgNVHQ8BAf8EBAMCAQYwDwYD
-VR0TAQH/BAUwAwEB/zAdBgNVHQ4EFgQUPeYpSJvqB8ohREom3m7e0oPQn1kwCgYI
-KoZIzj0EAwMDaAAwZQIxAOVpEslu28YxuglB4Zf4+/2a4n0Sye18ZNPLBSWLVtmg
-515dTguDnFt2KaAJJiFqYgIwcdK1j1zqO+F4CYWodZI7yFz9SO8NdCKoCOJuxUnO
-xwy8p2Fp8fc74SrL+SvzZpA3
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIIDdTCCAl2gAwIBAgILBAAAAAABFUtaw5QwDQYJKoZIhvcNAQEFBQAwVzELMAkG
-A1UEBhMCQkUxGTAXBgNVBAoTEEdsb2JhbFNpZ24gbnYtc2ExEDAOBgNVBAsTB1Jv
-b3QgQ0ExGzAZBgNVBAMTEkdsb2JhbFNpZ24gUm9vdCBDQTAeFw05ODA5MDExMjAw
-MDBaFw0yODAxMjgxMjAwMDBaMFcxCzAJBgNVBAYTAkJFMRkwFwYDVQQKExBHbG9i
-YWxTaWduIG52LXNhMRAwDgYDVQQLEwdSb290IENBMRswGQYDVQQDExJHbG9iYWxT
-aWduIFJvb3QgQ0EwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDaDuaZ
-jc6j40+Kfvvxi4Mla+pIH/EqsLmVEQS98GPR4mdmzxzdzxtIK+6NiY6arymAZavp
-xy0Sy6scTHAHoT0KMM0VjU/43dSMUBUc71DuxC73/OlS8pF94G3VNTCOXkNz8kHp
-1Wrjsok6Vjk4bwY8iGlbKk3Fp1S4bInMm/k8yuX9ifUSPJJ4ltbcdG6TRGHRjcdG
-snUOhugZitVtbNV4FpWi6cgKOOvyJBNPc1STE4U6G7weNLWLBYy5d4ux2x8gkasJ
-U26Qzns3dLlwR5EiUWMWea6xrkEmCMgZK9FGqkjWZCrXgzT/LCrBbBlDSgeF59N8
-9iFo7+ryUp9/k5DPAgMBAAGjQjBAMA4GA1UdDwEB/wQEAwIBBjAPBgNVHRMBAf8E
-BTADAQH/MB0GA1UdDgQWBBRge2YaRQ2XyolQL30EzTSo//z9SzANBgkqhkiG9w0B
-AQUFAAOCAQEA1nPnfE920I2/7LqivjTFKDK1fPxsnCwrvQmeU79rXqoRSLblCKOz
-yj1hTdNGCbM+w6DjY1Ub8rrvrTnhQ7k4o+YviiY776BQVvnGCv04zcQLcFGUl5gE
-38NflNUVyRRBnMRddWQVDf9VMOyGj/8N7yy5Y0b2qvzfvGn9LhJIZJrglfCm7ymP
-AbEVtQwdpf5pLGkkeB6zpxxxYu7KyJesF12KwvhHhm4qxFYxldBniYUr+WymXUad
-DKqC5JlR3XC321Y9YeRq4VzW9v493kHMB65jUr9TU/Qr6cf9tveCX4XSQRjbgbME
-HMUfpIBvFSDJ3gyICh3WZlXi/EjJKSZp4A==
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIIDujCCAqKgAwIBAgILBAAAAAABD4Ym5g0wDQYJKoZIhvcNAQEFBQAwTDEgMB4G
-A1UECxMXR2xvYmFsU2lnbiBSb290IENBIC0gUjIxEzARBgNVBAoTCkdsb2JhbFNp
-Z24xEzARBgNVBAMTCkdsb2JhbFNpZ24wHhcNMDYxMjE1MDgwMDAwWhcNMjExMjE1
-MDgwMDAwWjBMMSAwHgYDVQQLExdHbG9iYWxTaWduIFJvb3QgQ0EgLSBSMjETMBEG
-A1UEChMKR2xvYmFsU2lnbjETMBEGA1UEAxMKR2xvYmFsU2lnbjCCASIwDQYJKoZI
-hvcNAQEBBQADggEPADCCAQoCggEBAKbPJA6+Lm8omUVCxKs+IVSbC9N/hHD6ErPL
-v4dfxn+G07IwXNb9rfF73OX4YJYJkhD10FPe+3t+c4isUoh7SqbKSaZeqKeMWhG8
-eoLrvozps6yWJQeXSpkqBy+0Hne/ig+1AnwblrjFuTosvNYSuetZfeLQBoZfXklq
-tTleiDTsvHgMCJiEbKjNS7SgfQx5TfC4LcshytVsW33hoCmEofnTlEnLJGKRILzd
-C9XZzPnqJworc5HGnRusyMvo4KD0L5CLTfuwNhv2GXqF4G3yYROIXJ/gkwpRl4pa
-zq+r1feqCapgvdzZX99yqWATXgAByUr6P6TqBwMhAo6CygPCm48CAwEAAaOBnDCB
-mTAOBgNVHQ8BAf8EBAMCAQYwDwYDVR0TAQH/BAUwAwEB/zAdBgNVHQ4EFgQUm+IH
-V2ccHsBqBt5ZtJot39wZhi4wNgYDVR0fBC8wLTAroCmgJ4YlaHR0cDovL2NybC5n
-bG9iYWxzaWduLm5ldC9yb290LXIyLmNybDAfBgNVHSMEGDAWgBSb4gdXZxwewGoG
-3lm0mi3f3BmGLjANBgkqhkiG9w0BAQUFAAOCAQEAmYFThxxol4aR7OBKuEQLq4Gs
-J0/WwbgcQ3izDJr86iw8bmEbTUsp9Z8FHSbBuOmDAGJFtqkIk7mpM0sYmsL4h4hO
-291xNBrBVNpGP+DTKqttVCL1OmLNIG+6KYnX3ZHu01yiPqFbQfXf5WRDLenVOavS
-ot+3i9DAgBkcRcAtjOj4LaR0VknFBbVPFd5uRHg5h6h+u/N5GJG79G+dwfCMNYxd
-AfvDbbnvRG15RjF+Cv6pgsH/76tuIMRQyV+dTZsXjAzlAcmgQWpzU/qlULRuJQ/7
-TBj0/VLZjmmx6BEP3ojY+x1J96relc8geMJgEtslQIxq/H5COEBkEveegeGTLg==
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIIDXzCCAkegAwIBAgILBAAAAAABIVhTCKIwDQYJKoZIhvcNAQELBQAwTDEgMB4G
-A1UECxMXR2xvYmFsU2lnbiBSb290IENBIC0gUjMxEzARBgNVBAoTCkdsb2JhbFNp
-Z24xEzARBgNVBAMTCkdsb2JhbFNpZ24wHhcNMDkwMzE4MTAwMDAwWhcNMjkwMzE4
-MTAwMDAwWjBMMSAwHgYDVQQLExdHbG9iYWxTaWduIFJvb3QgQ0EgLSBSMzETMBEG
-A1UEChMKR2xvYmFsU2lnbjETMBEGA1UEAxMKR2xvYmFsU2lnbjCCASIwDQYJKoZI
-hvcNAQEBBQADggEPADCCAQoCggEBAMwldpB5BngiFvXAg7aEyiie/QV2EcWtiHL8
-RgJDx7KKnQRfJMsuS+FggkbhUqsMgUdwbN1k0ev1LKMPgj0MK66X17YUhhB5uzsT
-gHeMCOFJ0mpiLx9e+pZo34knlTifBtc+ycsmWQ1z3rDI6SYOgxXG71uL0gRgykmm
-KPZpO/bLyCiR5Z2KYVc3rHQU3HTgOu5yLy6c+9C7v/U9AOEGM+iCK65TpjoWc4zd
-QQ4gOsC0p6Hpsk+QLjJg6VfLuQSSaGjlOCZgdbKfd/+RFO+uIEn8rUAVSNECMWEZ
-XriX7613t2Saer9fwRPvm2L7DWzgVGkWqQPabumDk3F2xmmFghcCAwEAAaNCMEAw
-DgYDVR0PAQH/BAQDAgEGMA8GA1UdEwEB/wQFMAMBAf8wHQYDVR0OBBYEFI/wS3+o
-LkUkrk1Q+mOai97i3Ru8MA0GCSqGSIb3DQEBCwUAA4IBAQBLQNvAUKr+yAzv95ZU
-RUm7lgAJQayzE4aGKAczymvmdLm6AC2upArT9fHxD4q/c2dKg8dEe3jgr25sbwMp
-jjM5RcOO5LlXbKr8EpbsU8Yt5CRsuZRj+9xTaGdWPoO4zzUhw8lo/s7awlOqzJCK
-6fBdRoyV3XpYKBovHd7NADdBj+1EbddTKJd+82cEHhXXipa0095MJ6RMG3NzdvQX
-mcIfeg7jLQitChws/zyrVQ4PkX4268NXSb7hLi18YIvDQVETI53O9zJrlAGomecs
-Mx86OyXShkDOOyyGeMlhLxS67ttVb9+E7gUJTb0o2HLO02JQZR7rkpeDMdmztcpH
-WD9f
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIIHSTCCBTGgAwIBAgIJAMnN0+nVfSPOMA0GCSqGSIb3DQEBBQUAMIGsMQswCQYD
-VQQGEwJFVTFDMEEGA1UEBxM6TWFkcmlkIChzZWUgY3VycmVudCBhZGRyZXNzIGF0
-IHd3dy5jYW1lcmZpcm1hLmNvbS9hZGRyZXNzKTESMBAGA1UEBRMJQTgyNzQzMjg3
-MRswGQYDVQQKExJBQyBDYW1lcmZpcm1hIFMuQS4xJzAlBgNVBAMTHkdsb2JhbCBD
-aGFtYmVyc2lnbiBSb290IC0gMjAwODAeFw0wODA4MDExMjMxNDBaFw0zODA3MzEx
-MjMxNDBaMIGsMQswCQYDVQQGEwJFVTFDMEEGA1UEBxM6TWFkcmlkIChzZWUgY3Vy
-cmVudCBhZGRyZXNzIGF0IHd3dy5jYW1lcmZpcm1hLmNvbS9hZGRyZXNzKTESMBAG
-A1UEBRMJQTgyNzQzMjg3MRswGQYDVQQKExJBQyBDYW1lcmZpcm1hIFMuQS4xJzAl
-BgNVBAMTHkdsb2JhbCBDaGFtYmVyc2lnbiBSb290IC0gMjAwODCCAiIwDQYJKoZI
-hvcNAQEBBQADggIPADCCAgoCggIBAMDfVtPkOpt2RbQT2//BthmLN0EYlVJH6xed
-KYiONWwGMi5HYvNJBL99RDaxccy9Wglz1dmFRP+RVyXfXjaOcNFccUMd2drvXNL7
-G706tcuto8xEpw2uIRU/uXpbknXYpBI4iRmKt4DS4jJvVpyR1ogQC7N0ZJJ0YPP2
-zxhPYLIj0Mc7zmFLmY/CDNBAspjcDahOo7kKrmCgrUVSY7pmvWjg+b4aqIG7HkF4
-ddPB/gBVsIdU6CeQNR1MM62X/JcumIS/LMmjv9GYERTtY/jKmIhYF5ntRQOXfjyG
-HoiMvvKRhI9lNNgATH23MRdaKXoKGCQwoze1eqkBfSbW+Q6OWfH9GzO1KTsXO0G2
-Id3UwD2ln58fQ1DJu7xsepeY7s2MH/ucUa6LcL0nn3HAa6x9kGbo1106DbDVwo3V
-yJ2dwW3Q0L9R5OP4wzg2rtandeavhENdk5IMagfeOx2YItaswTXbo6Al/3K1dh3e
-beksZixShNBFks4c5eUzHdwHU1SjqoI7mjcv3N2gZOnm3b2u/GSFHTynyQbehP9r
-6GsaPMWis0L7iwk+XwhSx2LE1AVxv8Rk5Pihg+g+EpuoHtQ2TS9x9o0o9oOpE9Jh
-wZG7SMA0j0GMS0zbaRL/UJScIINZc+18ofLx/d33SdNDWKBWY8o9PeU1VlnpDsog
-zCtLkykPAgMBAAGjggFqMIIBZjASBgNVHRMBAf8ECDAGAQH/AgEMMB0GA1UdDgQW
-BBS5CcqcHtvTbDprru1U8VuTBjUuXjCB4QYDVR0jBIHZMIHWgBS5CcqcHtvTbDpr
-ru1U8VuTBjUuXqGBsqSBrzCBrDELMAkGA1UEBhMCRVUxQzBBBgNVBAcTOk1hZHJp
-ZCAoc2VlIGN1cnJlbnQgYWRkcmVzcyBhdCB3d3cuY2FtZXJmaXJtYS5jb20vYWRk
-cmVzcykxEjAQBgNVBAUTCUE4Mjc0MzI4NzEbMBkGA1UEChMSQUMgQ2FtZXJmaXJt
-YSBTLkEuMScwJQYDVQQDEx5HbG9iYWwgQ2hhbWJlcnNpZ24gUm9vdCAtIDIwMDiC
-CQDJzdPp1X0jzjAOBgNVHQ8BAf8EBAMCAQYwPQYDVR0gBDYwNDAyBgRVHSAAMCow
-KAYIKwYBBQUHAgEWHGh0dHA6Ly9wb2xpY3kuY2FtZXJmaXJtYS5jb20wDQYJKoZI
-hvcNAQEFBQADggIBAICIf3DekijZBZRG/5BXqfEv3xoNa/p8DhxJJHkn2EaqbylZ
-UohwEurdPfWbU1Rv4WCiqAm57OtZfMY18dwY6fFn5a+6ReAJ3spED8IXDneRRXoz
-X1+WLGiLwUePmJs9wOzL9dWCkoQ10b42OFZyMVtHLaoXpGNR6woBrX/sdZ7LoR/x
-fxKxueRkf2fWIyr0uDldmOghp+G9PUIadJpwr2hsUF1Jz//7Dl3mLEfXgTpZALVz
-a2Mg9jFFCDkO9HB+QHBaP9BrQql0PSgvAm11cpUJjUhjxsYjV5KTXjXBjfkK9yyd
-Yhz2rXzdpjEetrHHfoUm+qRqtdpjMNHvkzeyZi99Bffnt0uYlDXA2TopwZ2yUDMd
-SqlapskD7+3056huirRXhOukP9DuqqqHW2Pok+JrqNS4cnhrG+055F3Lm6qH1U9O
-AP7Zap88MQ8oAgF9mOinsKJknnn4SPIVqczmyETrP3iZ8ntxPjzxmKfFGBI/5rso
-M0LpRQp8bfKGeS/Fghl9CYl8slR2iK7ewfPM4W7bMdaTrpmg7yVqc5iJWzouE4ge
-v8CSlDQb4ye3ix5vQv/n6TebUB0tovkC7stYWDpxvGjjqsGvHCgfotwjZT+B6q6Z
-09gwzxMNTxXJhLynSC34MCN32EZLeW32jO06f2ARePTpm67VVMB0gNELQp/B
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIIEADCCAuigAwIBAgIBADANBgkqhkiG9w0BAQUFADBjMQswCQYDVQQGEwJVUzEh
-MB8GA1UEChMYVGhlIEdvIERhZGR5IEdyb3VwLCBJbmMuMTEwLwYDVQQLEyhHbyBE
-YWRkeSBDbGFzcyAyIENlcnRpZmljYXRpb24gQXV0aG9yaXR5MB4XDTA0MDYyOTE3
-MDYyMFoXDTM0MDYyOTE3MDYyMFowYzELMAkGA1UEBhMCVVMxITAfBgNVBAoTGFRo
-ZSBHbyBEYWRkeSBHcm91cCwgSW5jLjExMC8GA1UECxMoR28gRGFkZHkgQ2xhc3Mg
-MiBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eTCCASAwDQYJKoZIhvcNAQEBBQADggEN
-ADCCAQgCggEBAN6d1+pXGEmhW+vXX0iG6r7d/+TvZxz0ZWizV3GgXne77ZtJ6XCA
-PVYYYwhv2vLM0D9/AlQiVBDYsoHUwHU9S3/Hd8M+eKsaA7Ugay9qK7HFiH7Eux6w
-wdhFJ2+qN1j3hybX2C32qRe3H3I2TqYXP2WYktsqbl2i/ojgC95/5Y0V4evLOtXi
-EqITLdiOr18SPaAIBQi2XKVlOARFmR6jYGB0xUGlcmIbYsUfb18aQr4CUWWoriMY
-avx4A6lNf4DD+qta/KFApMoZFv6yyO9ecw3ud72a9nmYvLEHZ6IVDd2gWMZEewo+
-YihfukEHU1jPEX44dMX4/7VpkI+EdOqXG68CAQOjgcAwgb0wHQYDVR0OBBYEFNLE
-sNKR1EwRcbNhyz2h/t2oatTjMIGNBgNVHSMEgYUwgYKAFNLEsNKR1EwRcbNhyz2h
-/t2oatTjoWekZTBjMQswCQYDVQQGEwJVUzEhMB8GA1UEChMYVGhlIEdvIERhZGR5
-IEdyb3VwLCBJbmMuMTEwLwYDVQQLEyhHbyBEYWRkeSBDbGFzcyAyIENlcnRpZmlj
-YXRpb24gQXV0aG9yaXR5ggEAMAwGA1UdEwQFMAMBAf8wDQYJKoZIhvcNAQEFBQAD
-ggEBADJL87LKPpH8EsahB4yOd6AzBhRckB4Y9wimPQoZ+YeAEW5p5JYXMP80kWNy
-OO7MHAGjHZQopDH2esRU1/blMVgDoszOYtuURXO1v0XJJLXVggKtI3lpjbi2Tc7P
-TMozI+gciKqdi0FuFskg5YmezTvacPd+mSYgFFQlq25zheabIZ0KbIIOqPjCDPoQ
-HmyW74cNxA9hi63ugyuV+I6ShHI56yDqg+2DzZduCLzrTia2cyvk0/ZM/iZx4mER
-dEr/VxqHD3VILs9RaRegAhJhldXRQLIQTO7ErBBDpqWeCtWVYpoNz4iCxTIM5Cuf
-ReYNnyicsbkqWletNw+vHX/bvZ8=
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIIDxTCCAq2gAwIBAgIBADANBgkqhkiG9w0BAQsFADCBgzELMAkGA1UEBhMCVVMx
-EDAOBgNVBAgTB0FyaXpvbmExEzARBgNVBAcTClNjb3R0c2RhbGUxGjAYBgNVBAoT
-EUdvRGFkZHkuY29tLCBJbmMuMTEwLwYDVQQDEyhHbyBEYWRkeSBSb290IENlcnRp
-ZmljYXRlIEF1dGhvcml0eSAtIEcyMB4XDTA5MDkwMTAwMDAwMFoXDTM3MTIzMTIz
-NTk1OVowgYMxCzAJBgNVBAYTAlVTMRAwDgYDVQQIEwdBcml6b25hMRMwEQYDVQQH
-EwpTY290dHNkYWxlMRowGAYDVQQKExFHb0RhZGR5LmNvbSwgSW5jLjExMC8GA1UE
-AxMoR28gRGFkZHkgUm9vdCBDZXJ0aWZpY2F0ZSBBdXRob3JpdHkgLSBHMjCCASIw
-DQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAL9xYgjx+lk09xvJGKP3gElY6SKD
-E6bFIEMBO4Tx5oVJnyfq9oQbTqC023CYxzIBsQU+B07u9PpPL1kwIuerGVZr4oAH
-/PMWdYA5UXvl+TW2dE6pjYIT5LY/qQOD+qK+ihVqf94Lw7YZFAXK6sOoBJQ7Rnwy
-DfMAZiLIjWltNowRGLfTshxgtDj6AozO091GB94KPutdfMh8+7ArU6SSYmlRJQVh
-GkSBjCypQ5Yj36w6gZoOKcUcqeldHraenjAKOc7xiID7S13MMuyFYkMlNAJWJwGR
-tDtwKj9useiciAF9n9T521NtYJ2/LOdYq7hfRvzOxBsDPAnrSTFcaUaz4EcCAwEA
-AaNCMEAwDwYDVR0TAQH/BAUwAwEB/zAOBgNVHQ8BAf8EBAMCAQYwHQYDVR0OBBYE
-FDqahQcQZyi27/a9BUFuIMGU2g/eMA0GCSqGSIb3DQEBCwUAA4IBAQCZ21151fmX
-WWcDYfF+OwYxdS2hII5PZYe096acvNjpL9DbWu7PdIxztDhC2gV7+AJ1uP2lsdeu
-9tfeE8tTEH6KRtGX+rcuKxGrkLAngPnon1rpN5+r5N9ss4UXnT3ZJE95kTXWXwTr
-gIOrmgIttRD02JDHBHNA7XIloKmf7J6raBKZV8aPEjoJpL1E/QYVN8Gb5DKj7Tjo
-2GTzLH4U/ALqn83/B2gX2yKQOC16jdFU8WnjXzPKej17CuPKf1855eJ1usV2GDPO
-LPAvTK33sefOT6jEm0pUBsV/fdUID+Ic/n4XuKxe9tQWskMJDE32p2u0mYRlynqI
-4uJEvlz36hz1
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIIEMTCCAxmgAwIBAgIBADANBgkqhkiG9w0BAQUFADCBlTELMAkGA1UEBhMCR1Ix
-RDBCBgNVBAoTO0hlbGxlbmljIEFjYWRlbWljIGFuZCBSZXNlYXJjaCBJbnN0aXR1
-dGlvbnMgQ2VydC4gQXV0aG9yaXR5MUAwPgYDVQQDEzdIZWxsZW5pYyBBY2FkZW1p
-YyBhbmQgUmVzZWFyY2ggSW5zdGl0dXRpb25zIFJvb3RDQSAyMDExMB4XDTExMTIw
-NjEzNDk1MloXDTMxMTIwMTEzNDk1MlowgZUxCzAJBgNVBAYTAkdSMUQwQgYDVQQK
-EztIZWxsZW5pYyBBY2FkZW1pYyBhbmQgUmVzZWFyY2ggSW5zdGl0dXRpb25zIENl
-cnQuIEF1dGhvcml0eTFAMD4GA1UEAxM3SGVsbGVuaWMgQWNhZGVtaWMgYW5kIFJl
-c2VhcmNoIEluc3RpdHV0aW9ucyBSb290Q0EgMjAxMTCCASIwDQYJKoZIhvcNAQEB
-BQADggEPADCCAQoCggEBAKlTAOMupvaO+mDYLZU++CwqVE7NuYRhlFhPjz2L5EPz
-dYmNUeTDN9KKiE15HrcS3UN4SoqS5tdI1Q+kOilENbgH9mgdVc04UfCMJDGFr4PJ
-fel3r+0ae50X+bOdOFAPplp5kYCvN66m0zH7tSYJnTxa71HFK9+WXesyHgLacEns
-bgzImjeN9/E2YEsmLIKe0HjzDQ9jpFEw4fkrJxIH2Oq9GGKYsFk3fb7u8yBRQlqD
-75O6aRXxYp2fmTmCobd0LovUxQt7L/DICto9eQqakxylKHJzkUOap9FNhYS5qXSP
-FEDH3N6sQWRstBmbAmNtJGSPRLIl6s5ddAxjMlyNh+UCAwEAAaOBiTCBhjAPBgNV
-HRMBAf8EBTADAQH/MAsGA1UdDwQEAwIBBjAdBgNVHQ4EFgQUppFC/RNhSiOeCKQp
-5dgTBCPuQSUwRwYDVR0eBEAwPqA8MAWCAy5ncjAFggMuZXUwBoIELmVkdTAGggQu
-b3JnMAWBAy5ncjAFgQMuZXUwBoEELmVkdTAGgQQub3JnMA0GCSqGSIb3DQEBBQUA
-A4IBAQAf73lB4XtuP7KMhjdCSk4cNx6NZrokgclPEg8hwAOXhiVtXdMiKahsog2p
-6z0GW5k6x8zDmjR/qw7IThzh+uTczQ2+vyT+bOdrwg3IBp5OjWEopmr95fZi6hg8
-TqBTnbI6nOulnJEWtk2C4AwFSKls9cz4y51JtPACpf1wA+2KIaWuE4ZJwzNzvoc7
-dIsXRSZMFpGD/md9zU1jZ/rzAxKWeAaNsWftjj++n08C9bMJL/NMh98qy5V8Acys
-Nnq/onN694/BtZqhFLKPM58N7yLcZnuEvUUXBj08yrl3NI/K6s8/MT7jiOOASSXI
-l7WdmplNsDz4SgCbZN2fOUvRJ9e4
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIIDMDCCAhigAwIBAgICA+gwDQYJKoZIhvcNAQEFBQAwRzELMAkGA1UEBhMCSEsx
-FjAUBgNVBAoTDUhvbmdrb25nIFBvc3QxIDAeBgNVBAMTF0hvbmdrb25nIFBvc3Qg
-Um9vdCBDQSAxMB4XDTAzMDUxNTA1MTMxNFoXDTIzMDUxNTA0NTIyOVowRzELMAkG
-A1UEBhMCSEsxFjAUBgNVBAoTDUhvbmdrb25nIFBvc3QxIDAeBgNVBAMTF0hvbmdr
-b25nIFBvc3QgUm9vdCBDQSAxMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKC
-AQEArP84tulmAknjorThkPlAj3n54r15/gK97iSSHSL22oVyaf7XPwnU3ZG1ApzQ
-jVrhVcNQhrkpJsLj2aDxaQMoIIBFIi1WpztUlVYiWR8o3x8gPW2iNr4joLFutbEn
-PzlTCeqrauh0ssJlXI6/fMN4hM2eFvz1Lk8gKgifd/PFHsSaUmYeSF7jEAaPIpjh
-ZY4bXSNmO7ilMlHIhqqhqZ5/dpTCpmy3QfDVyAY45tQM4vM7TG1QjMSDJ8EThFk9
-nnV0ttgCXjqQesBCNnLsak3c78QA3xMYV18meMjWCnl3v/evt3a5pQuEF10Q6m/h
-q5URX208o1xNg1vysxmKgIsLhwIDAQABoyYwJDASBgNVHRMBAf8ECDAGAQH/AgED
-MA4GA1UdDwEB/wQEAwIBxjANBgkqhkiG9w0BAQUFAAOCAQEADkbVPK7ih9legYsC
-mEEIjEy82tvuJxuC52pF7BaLT4Wg87JwvVqWuspube5Gi27nKi6Wsxkz67SfqLI3
-7piol7Yutmcn1KZJ/RyTZXaeQi/cImyaT/JaFTmxcdcrUehtHJjA2Sr0oYJ71clB
-oiMBdDhViw+5LmeiIAQ32pwL0xch4I+XeTRvhEgCIDMb5jREn5Fw9IBehEPCKdJs
-EhTkYY2sEJCehFC78JZvRZ+K88psT/oROhUVRsPNH4NbLUES7VBnQRM9IauUiqpO
-fMGx+6fWtScvl6tu4B3i0RwsH0Ti/L6RoZz71ilTc4afU9hDDl3WY4JxHYB0yvbi
-AmvZWg==
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIIEAjCCAuqgAwIBAgIFORFFEJQwDQYJKoZIhvcNAQEFBQAwgYUxCzAJBgNVBAYT
-AkZSMQ8wDQYDVQQIEwZGcmFuY2UxDjAMBgNVBAcTBVBhcmlzMRAwDgYDVQQKEwdQ
-TS9TR0ROMQ4wDAYDVQQLEwVEQ1NTSTEOMAwGA1UEAxMFSUdDL0ExIzAhBgkqhkiG
-9w0BCQEWFGlnY2FAc2dkbi5wbS5nb3V2LmZyMB4XDTAyMTIxMzE0MjkyM1oXDTIw
-MTAxNzE0MjkyMlowgYUxCzAJBgNVBAYTAkZSMQ8wDQYDVQQIEwZGcmFuY2UxDjAM
-BgNVBAcTBVBhcmlzMRAwDgYDVQQKEwdQTS9TR0ROMQ4wDAYDVQQLEwVEQ1NTSTEO
-MAwGA1UEAxMFSUdDL0ExIzAhBgkqhkiG9w0BCQEWFGlnY2FAc2dkbi5wbS5nb3V2
-LmZyMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAsh/R0GLFMzvABIaI
-s9z4iPf930Pfeo2aSVz2TqrMHLmh6yeJ8kbpO0px1R2OLc/mratjUMdUC24SyZA2
-xtgv2pGqaMVy/hcKshd+ebUyiHDKcMCWSo7kVc0dJ5S/znIq7Fz5cyD+vfcuiWe4
-u0dzEvfRNWk68gq5rv9GQkaiv6GFGvm/5P9JhfejcIYyHF2fYPepraX/z9E0+X1b
-F8bc1g4oa8Ld8fUzaJ1O/Id8NhLWo4DoQw1VYZTqZDdH6nfK0LJYBcNdfrGoRpAx
-Vs5wKpayMLh35nnAvSk7/ZR3TL0gzUEl4C7HG7vupARB0l2tEmqKm0f7yd1GQOGd
-PDPQtQIDAQABo3cwdTAPBgNVHRMBAf8EBTADAQH/MAsGA1UdDwQEAwIBRjAVBgNV
-HSAEDjAMMAoGCCqBegF5AQEBMB0GA1UdDgQWBBSjBS8YYFDCiQrdKyFP/45OqDAx
-NjAfBgNVHSMEGDAWgBSjBS8YYFDCiQrdKyFP/45OqDAxNjANBgkqhkiG9w0BAQUF
-AAOCAQEABdwm2Pp3FURo/C9mOnTgXeQp/wYHE4RKq89toB9RlPhJy3Q2FLwV3duJ
-L92PoF189RLrn544pEfMs5bZvpwlqwN+Mw+VgQ39FuCIvjfwbF3QMZsyK10XZZOY
-YLxuj7GoPB7ZHPOpJkL5ZB3C55L29B5aqhlSXa/oovdgoPaN8In1buAKBQGVyYsg
-Crpa/JosPL3Dt8ldeCUFP1YUmwza+zpI/pdpXsoQhvdOlgQITeywvl3cO45Pwf2a
-NjSaTFR+FwNIlQgRHAdvhQh+XU3Endv7rs6y0bO4g2wdsrN58dhwmX7wEwLOXt1R
-0982gaEbeC9xs/FZTEYYKKuF0mBWWg==
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIIFYDCCA0igAwIBAgIQCgFCgAAAAUUjyES1AAAAAjANBgkqhkiG9w0BAQsFADBK
-MQswCQYDVQQGEwJVUzESMBAGA1UEChMJSWRlblRydXN0MScwJQYDVQQDEx5JZGVu
-VHJ1c3QgQ29tbWVyY2lhbCBSb290IENBIDEwHhcNMTQwMTE2MTgxMjIzWhcNMzQw
-MTE2MTgxMjIzWjBKMQswCQYDVQQGEwJVUzESMBAGA1UEChMJSWRlblRydXN0MScw
-JQYDVQQDEx5JZGVuVHJ1c3QgQ29tbWVyY2lhbCBSb290IENBIDEwggIiMA0GCSqG
-SIb3DQEBAQUAA4ICDwAwggIKAoICAQCnUBneP5k91DNG8W9RYYKyqU+PZ4ldhNlT
-3Qwo2dfw/66VQ3KZ+bVdfIrBQuExUHTRgQ18zZshq0PirK1ehm7zCYofWjK9ouuU
-+ehcCuz/mNKvcbO0U59Oh++SvL3sTzIwiEsXXlfEU8L2ApeN2WIrvyQfYo3fw7gp
-S0l4PJNgiCL8mdo2yMKi1CxUAGc1bnO/AljwpN3lsKImesrgNqUZFvX9t++uP0D1
-bVoE/c40yiTcdCMbXTMTEl3EASX2MN0CXZ/g1Ue9tOsbobtJSdifWwLziuQkkORi
-T0/Br4sOdBeo0XKIanoBScy0RnnGF7HamB4HWfp1IYVl3ZBWzvurpWCdxJ35UrCL
-vYf5jysjCiN2O/cz4ckA82n5S6LgTrx+kzmEB/dEcH7+B1rlsazRGMzyNeVJSQjK
-Vsk9+w8YfYs7wRPCTY/JTw436R+hDmrfYi7LNQZReSzIJTj0+kuniVyc0uMNOYZK
-dHzVWYfCP04MXFL0PfdSgvHqo6z9STQaKPNBiDoT7uje/5kdX7rL6B7yuVBgwDHT
-c+XvvqDtMwt0viAgxGds8AgDelWAf0ZOlqf0Hj7h9tgJ4TNkK2PXMl6f+cB7D3hv
-l7yTmvmcEpB4eoCHFddydJxVdHixuuFucAS6T6C6aMN7/zHwcz09lCqxC0EOoP5N
-iGVreTO01wIDAQABo0IwQDAOBgNVHQ8BAf8EBAMCAQYwDwYDVR0TAQH/BAUwAwEB
-/zAdBgNVHQ4EFgQU7UQZwNPwBovupHu+QucmVMiONnYwDQYJKoZIhvcNAQELBQAD
-ggIBAA2ukDL2pkt8RHYZYR4nKM1eVO8lvOMIkPkp165oCOGUAFjvLi5+U1KMtlwH
-6oi6mYtQlNeCgN9hCQCTrQ0U5s7B8jeUeLBfnLOic7iPBZM4zY0+sLj7wM+x8uwt
-LRvM7Kqas6pgghstO8OEPVeKlh6cdbjTMM1gCIOQ045U8U1mwF10A0Cj7oV+wh93
-nAbowacYXVKV7cndJZ5t+qntozo00Fl72u1Q8zW/7esUTTHHYPTa8Yec4kjixsU3
-+wYQ+nVZZjFHKdp2mhzpgq7vmrlR94gjmmmVYjzlVYA211QC//G5Xc7UI2/YRYRK
-W2XviQzdFKcgyxilJbQN+QHwotL0AMh0jqEqSI5l2xPE4iUXfeu+h1sXIFRRk0pT
-AwvsXcoz7WL9RccvW9xYoIA55vrX/hMUpu09lEpCdNTDd1lzzY9GvlU47/rokTLq
-l1gEIt44w8y8bckzOmoKaT+gyOpyj4xjhiO9bTyWnpXgSUyqorkqG5w2gXjtw+hG
-4iZZRHUe2XWJUc0QhJ1hYMtd+ZciTY6Y5uN/9lu7rs3KSoFrXgvzUeF0K+l+J6fZ
-mUlO+KWA2yUPHGNiiskzZ2s8EIPGrd6ozRaOjfAHN3Gf8qv8QfXBi+wAN10J5U6A
-7/qxXDgGpRtK4dw4LTzcqx+QGtVKnO7RcGzM7vRX+Bi6hG6H
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIIFZjCCA06gAwIBAgIQCgFCgAAAAUUjz0Z8AAAAAjANBgkqhkiG9w0BAQsFADBN
-MQswCQYDVQQGEwJVUzESMBAGA1UEChMJSWRlblRydXN0MSowKAYDVQQDEyFJZGVu
-VHJ1c3QgUHVibGljIFNlY3RvciBSb290IENBIDEwHhcNMTQwMTE2MTc1MzMyWhcN
-MzQwMTE2MTc1MzMyWjBNMQswCQYDVQQGEwJVUzESMBAGA1UEChMJSWRlblRydXN0
-MSowKAYDVQQDEyFJZGVuVHJ1c3QgUHVibGljIFNlY3RvciBSb290IENBIDEwggIi
-MA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoICAQC2IpT8pEiv6EdrCvsnduTyP4o7
-ekosMSqMjbCpwzFrqHd2hCa2rIFCDQjrVVi7evi8ZX3yoG2LqEfpYnYeEe4IFNGy
-RBb06tD6Hi9e28tzQa68ALBKK0CyrOE7S8ItneShm+waOh7wCLPQ5CQ1B5+ctMlS
-bdsHyo+1W/CD80/HLaXIrcuVIKQxKFdYWuSNG5qrng0M8gozOSI5Cpcu81N3uURF
-/YTLNiCBWS2ab21ISGHKTN9T0a9SvESfqy9rg3LvdYDaBjMbXcjaY8ZNzaxmMc3R
-3j6HEDbhuaR672BQssvKplbgN6+rNBM5Jeg5ZuSYeqoSmJxZZoY+rfGwyj4GD3vw
-EUs3oERte8uojHH01bWRNszwFcYr3lEXsZdMUD2xlVl8BX0tIdUAvwFnol57plzy
-9yLxkA2T26pEUWbMfXYD62qoKjgZl3YNa4ph+bz27nb9cCvdKTz4Ch5bQhyLVi9V
-GxyhLrXHFub4qjySjmm2AcG1hp2JDws4lFTo6tyePSW8Uybt1as5qsVATFSrsrTZ
-2fjXctscvG29ZV/viDUqZi/u9rNl8DONfJhBaUYPQxxp+pu10GFqzcpL2UyQRqsV
-WaFHVCkugyhfHMKiq3IXAAaOReyL4jM9f9oZRORicsPfIsbyVtTdX5Vy7W1f90gD
-W/3FKqD2cyOEEBsB5wIDAQABo0IwQDAOBgNVHQ8BAf8EBAMCAQYwDwYDVR0TAQH/
-BAUwAwEB/zAdBgNVHQ4EFgQU43HgntinQtnbcZFrlJPrw6PRFKMwDQYJKoZIhvcN
-AQELBQADggIBAEf63QqwEZE4rU1d9+UOl1QZgkiHVIyqZJnYWv6IAcVYpZmxI1Qj
-t2odIFflAWJBF9MJ23XLblSQdf4an4EKwt3X9wnQW3IV5B4Jaj0z8yGa5hV+rVHV
-DRDtfULAj+7AmgjVQdZcDiFpboBhDhXAuM/FSRJSzL46zNQuOAXeNf0fb7iAaJg9
-TaDKQGXSc3z1i9kKlT/YPyNtGtEqJBnZhbMX73huqVjRI9PHE+1yJX9dsXNw0H8G
-lwmEKYBhHfpe/3OsoOOJuBxxFcbeMX8S3OFtm6/n6J91eEyrRjuazr8FGF1NFTwW
-mhlQBJqymm9li1JfPFgEKCXAZmExfrngdbkaqIHWchezxQMxNRF4eKLg6TCMf4Df
-WN88uieW4oA0beOY02QnrEh+KHdcxiVhJfiFDGX6xDIvpZgF5PgLZxYWxoK4Mhn5
-+bl53B/N66+rDt0b20XkeucC4pVd/GnwU2lhlXV5C15V5jgclKlZM57IcXR5f1GJ
-tshquDDIajjDbp7hNxbqBWJMWxJH7ae0s1hWx0nzfxJoCTFx8G34Tkf71oXuxVhA
-GaQdp/lLQzfcaFpPz+vCZHTetBXZ9FRUGi8c15dxVJCO2SCdUyt/q4/i6jC8UDfv
-8Ue1fXwsBOxonbRJRBD0ckscZOf85muQ3Wl9af0AVqW3rLatt8o+Ae+c
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIIF8TCCA9mgAwIBAgIQALC3WhZIX7/hy/WL1xnmfTANBgkqhkiG9w0BAQsFADA4
-MQswCQYDVQQGEwJFUzEUMBIGA1UECgwLSVpFTlBFIFMuQS4xEzARBgNVBAMMCkl6
-ZW5wZS5jb20wHhcNMDcxMjEzMTMwODI4WhcNMzcxMjEzMDgyNzI1WjA4MQswCQYD
-VQQGEwJFUzEUMBIGA1UECgwLSVpFTlBFIFMuQS4xEzARBgNVBAMMCkl6ZW5wZS5j
-b20wggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoICAQDJ03rKDx6sp4boFmVq
-scIbRTJxldn+EFvMr+eleQGPicPK8lVx93e+d5TzcqQsRNiekpsUOqHnJJAKClaO
-xdgmlOHZSOEtPtoKct2jmRXagaKH9HtuJneJWK3W6wyyQXpzbm3benhB6QiIEn6H
-LmYRY2xU+zydcsC8Lv/Ct90NduM61/e0aL6i9eOBbsFGb12N4E3GVFWJGjMxCrFX
-uaOKmMPsOzTFlUFpfnXCPCDFYbpRR6AgkJOhkEvzTnyFRVSa0QUmQbC1TR0zvsQD
-yCV8wXDbO/QJLVQnSKwv4cSsPsjLkkxTOTcj7NMB+eAJRE1NZMDhDVqHIrytG6P+
-JrUV86f8hBnp7KGItERphIPzidF0BqnMC9bC3ieFUCbKF7jJeodWLBoBHmy+E60Q
-rLUk9TiRodZL2vG70t5HtfG8gfZZa88ZU+mNFctKy6lvROUbQc/hhqfK0GqfvEyN
-BjNaooXlkDWgYlwWTvDjovoDGrQscbNYLN57C9saD+veIR8GdwYDsMnvmfzAuU8L
-hij+0rnq49qlw0dpEuDb8PYZi+17cNcC1u2HGCgsBCRMd+RIihrGO5rUD8r6ddIB
-QFqNeb+Lz0vPqhbBleStTIo+F5HUsWLlguWABKQDfo2/2n+iD5dPDNMN+9fR5XJ+
-HMh3/1uaD7euBUbl8agW7EekFwIDAQABo4H2MIHzMIGwBgNVHREEgagwgaWBD2lu
-Zm9AaXplbnBlLmNvbaSBkTCBjjFHMEUGA1UECgw+SVpFTlBFIFMuQS4gLSBDSUYg
-QTAxMzM3MjYwLVJNZXJjLlZpdG9yaWEtR2FzdGVpeiBUMTA1NSBGNjIgUzgxQzBB
-BgNVBAkMOkF2ZGEgZGVsIE1lZGl0ZXJyYW5lbyBFdG9yYmlkZWEgMTQgLSAwMTAx
-MCBWaXRvcmlhLUdhc3RlaXowDwYDVR0TAQH/BAUwAwEB/zAOBgNVHQ8BAf8EBAMC
-AQYwHQYDVR0OBBYEFB0cZQ6o8iV7tJHP5LGx5r1VdGwFMA0GCSqGSIb3DQEBCwUA
-A4ICAQB4pgwWSp9MiDrAyw6lFn2fuUhfGI8NYjb2zRlrrKvV9pF9rnHzP7MOeIWb
-laQnIUdCSnxIOvVFfLMMjlF4rJUT3sb9fbgakEyrkgPH7UIBzg/YsfqikuFgba56
-awmqxinuaElnMIAkejEWOVt+8Rwu3WwJrfIxwYJOubv5vr8qhT/AQKM6WfxZSzwo
-JNu0FXWuDYi6LnPAvViH5ULy617uHjAimcs30cQhbIHsvm0m5hzkQiCeR7Csg1lw
-LDXWrzY0tM07+DKo7+N4ifuNRSzanLh+QBxh5z6ikixL8s36mLYp//Pye6kfLqCT
-VyvehQP5aTfLnnhqBbTFMXiJ7HqnheG5ezzevh55hM6fcA5ZwjUukCox2eRFekGk
-LhObNA5me0mrZJfQRsN5nXJQY6aYWwa9SG3YOYNw6DXwBdGqvOPbyALqfP2C2sJb
-UjWumDqtujWTI6cfSN01RpiyEGjkpTHCClguGYEQyVB1/OpaFs4R1+7vUIgtYf8/
-QnMFlEPVjjxOAToZpR9GTnfQXeWBIiGH/pR9hNiTrdZoQ0iy2+tzJOeRf1SktoA+
-naM8THLCV8Sg1Mw4J87VBp6iSNnpn86CcDaTmjvfliHjWbcM2pE38P1ZWrOZyGls
-QyYBNWNgVYkDOnXYukrZVP/u3oDYLdE41V4tC5h9Pmzb/CaIxw==
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIIE5jCCA86gAwIBAgIEO45L/DANBgkqhkiG9w0BAQUFADBdMRgwFgYJKoZIhvcN
-AQkBFglwa2lAc2suZWUxCzAJBgNVBAYTAkVFMSIwIAYDVQQKExlBUyBTZXJ0aWZp
-dHNlZXJpbWlza2Vza3VzMRAwDgYDVQQDEwdKdXVyLVNLMB4XDTAxMDgzMDE0MjMw
-MVoXDTE2MDgyNjE0MjMwMVowXTEYMBYGCSqGSIb3DQEJARYJcGtpQHNrLmVlMQsw
-CQYDVQQGEwJFRTEiMCAGA1UEChMZQVMgU2VydGlmaXRzZWVyaW1pc2tlc2t1czEQ
-MA4GA1UEAxMHSnV1ci1TSzCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEB
-AIFxNj4zB9bjMI0TfncyRsvPGbJgMUaXhvSYRqTCZUXP00B841oiqBB4M8yIsdOB
-SvZiF3tfTQou0M+LI+5PAk676w7KvRhj6IAcjeEcjT3g/1tf6mTll+g/mX8MCgkz
-ABpTpyHhOEvWgxutr2TC+Rx6jGZITWYfGAriPrsfB2WThbkasLnE+w0R9vXW+RvH
-LCu3GFH+4Hv2qEivbDtPL+/40UceJlfwUR0zlv/vWT3aTdEVNMfqPxZIe5EcgEMP
-PbgFPtGzlc3Yyg/CQ2fbt5PgIoIuvvVoKIO5wTtpeyDaTpxt4brNj3pssAki14sL
-2xzVWiZbDcDq5WDQn/413z8CAwEAAaOCAawwggGoMA8GA1UdEwEB/wQFMAMBAf8w
-ggEWBgNVHSAEggENMIIBCTCCAQUGCisGAQQBzh8BAQEwgfYwgdAGCCsGAQUFBwIC
-MIHDHoHAAFMAZQBlACAAcwBlAHIAdABpAGYAaQBrAGEAYQB0ACAAbwBuACAAdgDk
-AGwAagBhAHMAdABhAHQAdQBkACAAQQBTAC0AaQBzACAAUwBlAHIAdABpAGYAaQB0
-AHMAZQBlAHIAaQBtAGkAcwBrAGUAcwBrAHUAcwAgAGEAbABhAG0ALQBTAEsAIABz
-AGUAcgB0AGkAZgBpAGsAYQBhAHQAaQBkAGUAIABrAGkAbgBuAGkAdABhAG0AaQBz
-AGUAawBzMCEGCCsGAQUFBwIBFhVodHRwOi8vd3d3LnNrLmVlL2Nwcy8wKwYDVR0f
-BCQwIjAgoB6gHIYaaHR0cDovL3d3dy5zay5lZS9qdXVyL2NybC8wHQYDVR0OBBYE
-FASqekej5ImvGs8KQKcYP2/v6X2+MB8GA1UdIwQYMBaAFASqekej5ImvGs8KQKcY
-P2/v6X2+MA4GA1UdDwEB/wQEAwIB5jANBgkqhkiG9w0BAQUFAAOCAQEAe8EYlFOi
-CfP+JmeaUOTDBS8rNXiRTHyoERF5TElZrMj3hWVcRrs7EKACr81Ptcw2Kuxd/u+g
-kcm2k298gFTsxwhwDY77guwqYHhpNjbRxZyLabVAyJRld/JXIWY7zoVAtjNjGr95
-HvxcHdMdkxuLDF2FvZkwMhgJkVLpfKG6/2SSmuz+Ne6ML678IIbsSt4beDI3poHS
-na9aEhbKmVv8b20OxaAehsmR0FyYgl9jDIpaq9iVpszLita/ZEuOyoqysOkhMp6q
-qIWYNIE5ITuoOlIyPfZrN4YGWhWY3PARZv40ILcD9EEQfTmEeZZyY7aWAuVrua0Z
-TbvGRNs2yyqcjg==
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIIHqDCCBpCgAwIBAgIRAMy4579OKRr9otxmpRwsDxEwDQYJKoZIhvcNAQEFBQAw
-cjELMAkGA1UEBhMCSFUxETAPBgNVBAcTCEJ1ZGFwZXN0MRYwFAYDVQQKEw1NaWNy
-b3NlYyBMdGQuMRQwEgYDVQQLEwtlLVN6aWdubyBDQTEiMCAGA1UEAxMZTWljcm9z
-ZWMgZS1Temlnbm8gUm9vdCBDQTAeFw0wNTA0MDYxMjI4NDRaFw0xNzA0MDYxMjI4
-NDRaMHIxCzAJBgNVBAYTAkhVMREwDwYDVQQHEwhCdWRhcGVzdDEWMBQGA1UEChMN
-TWljcm9zZWMgTHRkLjEUMBIGA1UECxMLZS1Temlnbm8gQ0ExIjAgBgNVBAMTGU1p
-Y3Jvc2VjIGUtU3ppZ25vIFJvb3QgQ0EwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAw
-ggEKAoIBAQDtyADVgXvNOABHzNuEwSFpLHSQDCHZU4ftPkNEU6+r+ICbPHiN1I2u
-uO/TEdyB5s87lozWbxXGd36hL+BfkrYn13aaHUM86tnsL+4582pnS4uCzyL4ZVX+
-LMsvfUh6PXX5qqAnu3jCBspRwn5mS6/NoqdNAoI/gqyFxuEPkEeZlApxcpMqyabA
-vjxWTHOSJ/FrtfX9/DAFYJLG65Z+AZHCabEeHXtTRbjcQR/Ji3HWVBTji1R4P770
-Yjtb9aPs1ZJ04nQw7wHb4dSrmZsqa/i9phyGI0Jf7Enemotb9HI6QMVJPqW+jqpx
-62z69Rrkav17fVVA71hu5tnVvCSrwe+3AgMBAAGjggQ3MIIEMzBnBggrBgEFBQcB
-AQRbMFkwKAYIKwYBBQUHMAGGHGh0dHBzOi8vcmNhLmUtc3ppZ25vLmh1L29jc3Aw
-LQYIKwYBBQUHMAKGIWh0dHA6Ly93d3cuZS1zemlnbm8uaHUvUm9vdENBLmNydDAP
-BgNVHRMBAf8EBTADAQH/MIIBcwYDVR0gBIIBajCCAWYwggFiBgwrBgEEAYGoGAIB
-AQEwggFQMCgGCCsGAQUFBwIBFhxodHRwOi8vd3d3LmUtc3ppZ25vLmh1L1NaU1ov
-MIIBIgYIKwYBBQUHAgIwggEUHoIBEABBACAAdABhAG4A+gBzAO0AdAB2AOEAbgB5
-ACAA6QByAHQAZQBsAG0AZQB6AOkAcwDpAGgAZQB6ACAA6QBzACAAZQBsAGYAbwBn
-AGEAZADhAHMA4QBoAG8AegAgAGEAIABTAHoAbwBsAGcA4QBsAHQAYQB0APMAIABT
-AHoAbwBsAGcA4QBsAHQAYQB0AOEAcwBpACAAUwB6AGEAYgDhAGwAeQB6AGEAdABh
-ACAAcwB6AGUAcgBpAG4AdAAgAGsAZQBsAGwAIABlAGwAagDhAHIAbgBpADoAIABo
-AHQAdABwADoALwAvAHcAdwB3AC4AZQAtAHMAegBpAGcAbgBvAC4AaAB1AC8AUwBa
-AFMAWgAvMIHIBgNVHR8EgcAwgb0wgbqggbeggbSGIWh0dHA6Ly93d3cuZS1zemln
-bm8uaHUvUm9vdENBLmNybIaBjmxkYXA6Ly9sZGFwLmUtc3ppZ25vLmh1L0NOPU1p
-Y3Jvc2VjJTIwZS1Temlnbm8lMjBSb290JTIwQ0EsT1U9ZS1Temlnbm8lMjBDQSxP
-PU1pY3Jvc2VjJTIwTHRkLixMPUJ1ZGFwZXN0LEM9SFU/Y2VydGlmaWNhdGVSZXZv
-Y2F0aW9uTGlzdDtiaW5hcnkwDgYDVR0PAQH/BAQDAgEGMIGWBgNVHREEgY4wgYuB
-EGluZm9AZS1zemlnbm8uaHWkdzB1MSMwIQYDVQQDDBpNaWNyb3NlYyBlLVN6aWdu
-w7MgUm9vdCBDQTEWMBQGA1UECwwNZS1TemlnbsOzIEhTWjEWMBQGA1UEChMNTWlj
-cm9zZWMgS2Z0LjERMA8GA1UEBxMIQnVkYXBlc3QxCzAJBgNVBAYTAkhVMIGsBgNV
-HSMEgaQwgaGAFMegSXUWYYTbMUuE0vE3QJDvTtz3oXakdDByMQswCQYDVQQGEwJI
-VTERMA8GA1UEBxMIQnVkYXBlc3QxFjAUBgNVBAoTDU1pY3Jvc2VjIEx0ZC4xFDAS
-BgNVBAsTC2UtU3ppZ25vIENBMSIwIAYDVQQDExlNaWNyb3NlYyBlLVN6aWdubyBS
-b290IENBghEAzLjnv04pGv2i3GalHCwPETAdBgNVHQ4EFgQUx6BJdRZhhNsxS4TS
-8TdAkO9O3PcwDQYJKoZIhvcNAQEFBQADggEBANMTnGZjWS7KXHAM/IO8VbH0jgds
-ZifOwTsgqRy7RlRw7lrMoHfqaEQn6/Ip3Xep1fvj1KcExJW4C+FEaGAHQzAxQmHl
-7tnlJNUb3+FKG6qfx1/4ehHqE5MAyopYse7tDk2016g2JnzgOsHVV4Lxdbb9iV/a
-86g4nzUGCM4ilb7N1fy+W955a9x6qWVmvrElWl/tftOsRm1M9DKHtCAE4Gx4sHfR
-hUZLphK3dehKyVZs15KrnfVJONJPU+NVkBHbmJbGSfI+9J8b4PeI3CVimUTYc78/
-MPMMNz7UwiiAc7EBt51alhQBS6kRnSlqLtBdgcDPsiBDxwPgN05dCtxZICU=
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIIECjCCAvKgAwIBAgIJAMJ+QwRORz8ZMA0GCSqGSIb3DQEBCwUAMIGCMQswCQYD
-VQQGEwJIVTERMA8GA1UEBwwIQnVkYXBlc3QxFjAUBgNVBAoMDU1pY3Jvc2VjIEx0
-ZC4xJzAlBgNVBAMMHk1pY3Jvc2VjIGUtU3ppZ25vIFJvb3QgQ0EgMjAwOTEfMB0G
-CSqGSIb3DQEJARYQaW5mb0BlLXN6aWduby5odTAeFw0wOTA2MTYxMTMwMThaFw0y
-OTEyMzAxMTMwMThaMIGCMQswCQYDVQQGEwJIVTERMA8GA1UEBwwIQnVkYXBlc3Qx
-FjAUBgNVBAoMDU1pY3Jvc2VjIEx0ZC4xJzAlBgNVBAMMHk1pY3Jvc2VjIGUtU3pp
-Z25vIFJvb3QgQ0EgMjAwOTEfMB0GCSqGSIb3DQEJARYQaW5mb0BlLXN6aWduby5o
-dTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAOn4j/NjrdqG2KfgQvvP
-kd6mJviZpWNwrZuuyjNAfW2WbqEORO7hE52UQlKavXWFdCyoDh2Tthi3jCyoz/tc
-cbna7P7ofo/kLx2yqHWH2Leh5TvPmUpG0IMZfcChEhyVbUr02MelTTMuhTlAdX4U
-fIASmFDHQWe4oIBhVKZsTh/gnQ4H6cm6M+f+wFUoLAKApxn1ntxVUwOXewdI/5n7
-N4okxFnMUBBjjqqpGrCEGob5X7uxUG6k0QrM1XF+H6cbfPVTbiJfyyvm1HxdrtbC
-xkzlBQHZ7Vf8wSN5/PrIJIOV87VqUQHQd9bpEqH5GoP7ghu5sJf0dgYzQ0mg/wu1
-+rUCAwEAAaOBgDB+MA8GA1UdEwEB/wQFMAMBAf8wDgYDVR0PAQH/BAQDAgEGMB0G
-A1UdDgQWBBTLD8bfQkPMPcu1SCOhGnqmKrs0aDAfBgNVHSMEGDAWgBTLD8bfQkPM
-Pcu1SCOhGnqmKrs0aDAbBgNVHREEFDASgRBpbmZvQGUtc3ppZ25vLmh1MA0GCSqG
-SIb3DQEBCwUAA4IBAQDJ0Q5eLtXMs3w+y/w9/w0olZMEyL/azXm4Q5DwpL7v8u8h
-mLzU1F0G9u5C7DBsoKqpyvGvivo/C3NqPuouQH4frlRheesuCDfXI/OMn74dseGk
-ddug4lQUsbocKaQY9hK6ohQU4zE1yED/t+AFdlfBHFny+L/k7SViXITwfn4fs775
-tyERzAMBVnCnEJIeGzSBHq2cGsMEPO0CYdYeBvNfOofyK/FFh+U9rNHHV4S9a67c
-2Pm2G2JwCz02yULyMtd6YebS2z3PyKnJm9zbWETXbzivf3jTo60adbocwTZ8jx5t
-HMN1Rq41Bab2XD0h7lbwyYIiLXpUq3DDfSJlgnCW
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIIEFTCCAv2gAwIBAgIGSUEs5AAQMA0GCSqGSIb3DQEBCwUAMIGnMQswCQYDVQQG
-EwJIVTERMA8GA1UEBwwIQnVkYXBlc3QxFTATBgNVBAoMDE5ldExvY2sgS2Z0LjE3
-MDUGA1UECwwuVGFuw7pzw610dsOhbnlraWFkw7NrIChDZXJ0aWZpY2F0aW9uIFNl
-cnZpY2VzKTE1MDMGA1UEAwwsTmV0TG9jayBBcmFueSAoQ2xhc3MgR29sZCkgRsWR
-dGFuw7pzw610dsOhbnkwHhcNMDgxMjExMTUwODIxWhcNMjgxMjA2MTUwODIxWjCB
-pzELMAkGA1UEBhMCSFUxETAPBgNVBAcMCEJ1ZGFwZXN0MRUwEwYDVQQKDAxOZXRM
-b2NrIEtmdC4xNzA1BgNVBAsMLlRhbsO6c8OtdHbDoW55a2lhZMOzayAoQ2VydGlm
-aWNhdGlvbiBTZXJ2aWNlcykxNTAzBgNVBAMMLE5ldExvY2sgQXJhbnkgKENsYXNz
-IEdvbGQpIEbFkXRhbsO6c8OtdHbDoW55MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8A
-MIIBCgKCAQEAxCRec75LbRTDofTjl5Bu0jBFHjzuZ9lk4BqKf8owyoPjIMHj9DrT
-lF8afFttvzBPhCf2nx9JvMaZCpDyD/V/Q4Q3Y1GLeqVw/HpYzY6b7cNGbIRwXdrz
-AZAj/E4wqX7hJ2Pn7WQ8oLjJM2P+FpD/sLj916jAwJRDC7bVWaaeVtAkH3B5r9s5
-VA1lddkVQZQBr17s9o3x/61k/iCa11zr/qYfCGSji3ZVrR47KGAuhyXoqq8fxmRG
-ILdwfzzeSNuWU7c5d+Qa4scWhHaXWy+7GRWF+GmF9ZmnqfI0p6m2pgP8b4Y9VHx2
-BJtr+UBdADTHLpl1neWIA6pN+APSQnbAGwIDAKiLo0UwQzASBgNVHRMBAf8ECDAG
-AQH/AgEEMA4GA1UdDwEB/wQEAwIBBjAdBgNVHQ4EFgQUzPpnk/C2uNClwB7zU/2M
-U9+D15YwDQYJKoZIhvcNAQELBQADggEBAKt/7hwWqZw8UQCgwBEIBaeZ5m8BiFRh
-bvG5GK1Krf6BQCOUL/t1fC8oS2IkgYIL9WHxHG64YTjrgfpioTtaYtOUZcTh5m2C
-+C8lcLIhJsFyUR+MLMOEkMNaj7rP9KdlpeuY0fsFskZ1FSNqb4VjMIDw1Z4fKRzC
-bLBQWV2QWzuoDTDPv31/zvGdg73JRm4gpvlhUbohL3u+pRVjodSVh/GeufOJ8z2F
-uLjbvrW5KfnaNwUASZQDhETnv0Mxz3WLJdH0pmT1kvarBes96aULNmLazAZfNou2
-XjG4Kvte9nHfRCaexOYNkbQudZWAUWpLMKawYqGT8ZvYzsRjdT9ZR7E=
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIIGfTCCBWWgAwIBAgICAQMwDQYJKoZIhvcNAQEEBQAwga8xCzAJBgNVBAYTAkhV
-MRAwDgYDVQQIEwdIdW5nYXJ5MREwDwYDVQQHEwhCdWRhcGVzdDEnMCUGA1UEChMe
-TmV0TG9jayBIYWxvemF0Yml6dG9uc2FnaSBLZnQuMRowGAYDVQQLExFUYW51c2l0
-dmFueWtpYWRvazE2MDQGA1UEAxMtTmV0TG9jayBLb3pqZWd5em9pIChDbGFzcyBB
-KSBUYW51c2l0dmFueWtpYWRvMB4XDTk5MDIyNDIzMTQ0N1oXDTE5MDIxOTIzMTQ0
-N1owga8xCzAJBgNVBAYTAkhVMRAwDgYDVQQIEwdIdW5nYXJ5MREwDwYDVQQHEwhC
-dWRhcGVzdDEnMCUGA1UEChMeTmV0TG9jayBIYWxvemF0Yml6dG9uc2FnaSBLZnQu
-MRowGAYDVQQLExFUYW51c2l0dmFueWtpYWRvazE2MDQGA1UEAxMtTmV0TG9jayBL
-b3pqZWd5em9pIChDbGFzcyBBKSBUYW51c2l0dmFueWtpYWRvMIIBIjANBgkqhkiG
-9w0BAQEFAAOCAQ8AMIIBCgKCAQEAvHSMD7tM9DceqQWC2ObhbHDqeLVu0ThEDaiD
-zl3S1tWBxdRL51uUcCbbO51qTGL3cfNk1mE7PetzozfZz+qMkjvN9wfcZnSX9EUi
-3fRc4L9t875lM+QVOr/bmJBVOMTtplVjC7B4BPTjbsE/jvxReB+SnoPC/tmwqcm8
-WgD/qaiYdPv2LD4VOQ22BFWoDpggQrOxJa1+mm9dU7GrDPzr4PN6s6iz/0b2Y6LY
-Oph7tqyF/7AlT3Rj5xMHpQqPBffAZG9+pyeAlt7ULoZgx2srXnN7F+eRP2QM2Esi
-NCubMvJIH5+hCoR64sKtlz2O1cH5VqNQ6ca0+pii7pXmKgOM3wIDAQABo4ICnzCC
-ApswDgYDVR0PAQH/BAQDAgAGMBIGA1UdEwEB/wQIMAYBAf8CAQQwEQYJYIZIAYb4
-QgEBBAQDAgAHMIICYAYJYIZIAYb4QgENBIICURaCAk1GSUdZRUxFTSEgRXplbiB0
-YW51c2l0dmFueSBhIE5ldExvY2sgS2Z0LiBBbHRhbGFub3MgU3pvbGdhbHRhdGFz
-aSBGZWx0ZXRlbGVpYmVuIGxlaXJ0IGVsamFyYXNvayBhbGFwamFuIGtlc3p1bHQu
-IEEgaGl0ZWxlc2l0ZXMgZm9seWFtYXRhdCBhIE5ldExvY2sgS2Z0LiB0ZXJtZWtm
-ZWxlbG9zc2VnLWJpenRvc2l0YXNhIHZlZGkuIEEgZGlnaXRhbGlzIGFsYWlyYXMg
-ZWxmb2dhZGFzYW5hayBmZWx0ZXRlbGUgYXogZWxvaXJ0IGVsbGVub3J6ZXNpIGVs
-amFyYXMgbWVndGV0ZWxlLiBBeiBlbGphcmFzIGxlaXJhc2EgbWVndGFsYWxoYXRv
-IGEgTmV0TG9jayBLZnQuIEludGVybmV0IGhvbmxhcGphbiBhIGh0dHBzOi8vd3d3
-Lm5ldGxvY2submV0L2RvY3MgY2ltZW4gdmFneSBrZXJoZXRvIGF6IGVsbGVub3J6
-ZXNAbmV0bG9jay5uZXQgZS1tYWlsIGNpbWVuLiBJTVBPUlRBTlQhIFRoZSBpc3N1
-YW5jZSBhbmQgdGhlIHVzZSBvZiB0aGlzIGNlcnRpZmljYXRlIGlzIHN1YmplY3Qg
-dG8gdGhlIE5ldExvY2sgQ1BTIGF2YWlsYWJsZSBhdCBodHRwczovL3d3dy5uZXRs
-b2NrLm5ldC9kb2NzIG9yIGJ5IGUtbWFpbCBhdCBjcHNAbmV0bG9jay5uZXQuMA0G
-CSqGSIb3DQEBBAUAA4IBAQBIJEb3ulZv+sgoA0BO5TE5ayZrU3/b39/zcT0mwBQO
-xmd7I6gMc90Bu8bKbjc5VdXHjFYgDigKDtIqpLBJUsY4B/6+CgmM0ZjPytoUMaFP
-0jn8DxEsQ8Pdq5PHVT5HfBgaANzze9jyf1JsIPQLX2lS9O74silg6+NJMSEN1rUQ
-QeJBCWziGppWS3cC9qCbmieH6FUpccKQn0V4GuEVZD3QDtigdp+uxdAu6tYPVuxk
-f1qbFFgBJ34TUMdrKuZoPL9coAob4Q566eKAw+np9v1sEZ7Q5SgnK1QyQhSCdeZK
-8CtmdWOMovsEPoMOmzbwGOQmIMOM8CgHrTwXZoi1/baI
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIID5jCCAs6gAwIBAgIQV8szb8JcFuZHFhfjkDFo4DANBgkqhkiG9w0BAQUFADBi
-MQswCQYDVQQGEwJVUzEhMB8GA1UEChMYTmV0d29yayBTb2x1dGlvbnMgTC5MLkMu
-MTAwLgYDVQQDEydOZXR3b3JrIFNvbHV0aW9ucyBDZXJ0aWZpY2F0ZSBBdXRob3Jp
-dHkwHhcNMDYxMjAxMDAwMDAwWhcNMjkxMjMxMjM1OTU5WjBiMQswCQYDVQQGEwJV
-UzEhMB8GA1UEChMYTmV0d29yayBTb2x1dGlvbnMgTC5MLkMuMTAwLgYDVQQDEydO
-ZXR3b3JrIFNvbHV0aW9ucyBDZXJ0aWZpY2F0ZSBBdXRob3JpdHkwggEiMA0GCSqG
-SIb3DQEBAQUAA4IBDwAwggEKAoIBAQDkvH6SMG3G2I4rC7xGzuAnlt7e+foS0zwz
-c7MEL7xxjOWftiJgPl9dzgn/ggwbmlFQGiaJ3dVhXRncEg8tCqJDXRfQNJIg6nPP
-OCwGJgl6cvf6UDL4wpPTaaIjzkGxzOTVHzbRijr4jGPiFFlp7Q3Tf2vouAPlT2rl
-mGNpSAW+Lv8ztumXWWn4Zxmuk2GWRBXTcrA/vGp97Eh/jcOrqnErU2lBUzS1sLnF
-BgrEsEX1QV1uiUV7PTsmjHTC5dLRfbIR1PtYMiKagMnc/Qzpf14Dl847ABSHJ3A4
-qY5usyd2mFHgBeMhqxrVhSI8KbWaFsWAqPS7azCPL0YCorEMIuDTAgMBAAGjgZcw
-gZQwHQYDVR0OBBYEFCEwyfsA106Y2oeqKtCnLrFAMadMMA4GA1UdDwEB/wQEAwIB
-BjAPBgNVHRMBAf8EBTADAQH/MFIGA1UdHwRLMEkwR6BFoEOGQWh0dHA6Ly9jcmwu
-bmV0c29sc3NsLmNvbS9OZXR3b3JrU29sdXRpb25zQ2VydGlmaWNhdGVBdXRob3Jp
-dHkuY3JsMA0GCSqGSIb3DQEBBQUAA4IBAQC7rkvnt1frf6ott3NHhWrB5KUd5Oc8
-6fRZZXe1eltajSU24HqXLjjAV2CDmAaDn7l2em5Q4LqILPxFzBiwmZVRDuwduIj/
-h1AcgsLj4DKAv6ALR8jDMe+ZZzKATxcheQxpXN5eNK4CtSbqUN9/GGUsyfJj4akH
-/nxxH2szJGoeBfcFaMBqEssuXmHLrijTfsK0ZpEmXzwuJF/LWA/rKOyvEZbz3Htv
-wKeI8lN3s2Berq4o2jUsbzRF0ybh3uxbTydrFny9RAQYgrOJeRcQcT16ohZO9QHN
-pGxlaKFJdlxDydi8NmdspZS11My5vWo1ViHe2MPr+8ukYEywVaCge1ey
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIID8TCCAtmgAwIBAgIQQT1yx/RrH4FDffHSKFTfmjANBgkqhkiG9w0BAQUFADCB
-ijELMAkGA1UEBhMCQ0gxEDAOBgNVBAoTB1dJU2VLZXkxGzAZBgNVBAsTEkNvcHly
-aWdodCAoYykgMjAwNTEiMCAGA1UECxMZT0lTVEUgRm91bmRhdGlvbiBFbmRvcnNl
-ZDEoMCYGA1UEAxMfT0lTVEUgV0lTZUtleSBHbG9iYWwgUm9vdCBHQSBDQTAeFw0w
-NTEyMTExNjAzNDRaFw0zNzEyMTExNjA5NTFaMIGKMQswCQYDVQQGEwJDSDEQMA4G
-A1UEChMHV0lTZUtleTEbMBkGA1UECxMSQ29weXJpZ2h0IChjKSAyMDA1MSIwIAYD
-VQQLExlPSVNURSBGb3VuZGF0aW9uIEVuZG9yc2VkMSgwJgYDVQQDEx9PSVNURSBX
-SVNlS2V5IEdsb2JhbCBSb290IEdBIENBMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8A
-MIIBCgKCAQEAy0+zAJs9Nt350UlqaxBJH+zYK7LG+DKBKUOVTJoZIyEVRd7jyBxR
-VVuuk+g3/ytr6dTqvirdqFEr12bDYVxgAsj1znJ7O7jyTmUIms2kahnBAbtzptf2
-w93NvKSLtZlhuAGio9RN1AU9ka34tAhxZK9w8RxrfvbDd50kc3vkDIzh2TbhmYsF
-mQvtRTEJysIA2/dyoJaqlYfQjse2YXMNdmaM3Bu0Y6Kff5MTMPGhJ9vZ/yxViJGg
-4E8HsChWjBgbl0SOid3gF27nKu+POQoxhILYQBRJLnpB5Kf+42TMwVlxSywhp1t9
-4B3RLoGbw9ho972WG6xwsRYUC9tguSYBBQIDAQABo1EwTzALBgNVHQ8EBAMCAYYw
-DwYDVR0TAQH/BAUwAwEB/zAdBgNVHQ4EFgQUswN+rja8sHnR3JQmthG+IbJphpQw
-EAYJKwYBBAGCNxUBBAMCAQAwDQYJKoZIhvcNAQEFBQADggEBAEuh/wuHbrP5wUOx
-SPMowB0uyQlB+pQAHKSkq0lPjz0e701vvbyk9vImMMkQyh2I+3QZH4VFvbBsUfk2
-ftv1TDI6QU9bR8/oCy22xBmddMVHxjtqD6wU2zz0c5ypBd8A3HR4+vg1YFkCExh8
-vPtNsCBtQ7tgMHpnM1zFmdH4LTlSc/uMqpclXHLZCB6rTjzjgTGfA6b7wP4piFXa
-hNVQA7bihKOmNqoROgHhGEvWRGizPflTdISzRpFGlgC3gCy24eMQ4tui5yiPAZZi
-Fj4A4xylNoEYokxSdsARo27mHbrjWr42U8U+dY+GaSlYU7Wcu2+fXMUY7N0v4ZjJ
-/L7fCg0=
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIIDtTCCAp2gAwIBAgIQdrEgUnTwhYdGs/gjGvbCwDANBgkqhkiG9w0BAQsFADBt
-MQswCQYDVQQGEwJDSDEQMA4GA1UEChMHV0lTZUtleTEiMCAGA1UECxMZT0lTVEUg
-Rm91bmRhdGlvbiBFbmRvcnNlZDEoMCYGA1UEAxMfT0lTVEUgV0lTZUtleSBHbG9i
-YWwgUm9vdCBHQiBDQTAeFw0xNDEyMDExNTAwMzJaFw0zOTEyMDExNTEwMzFaMG0x
-CzAJBgNVBAYTAkNIMRAwDgYDVQQKEwdXSVNlS2V5MSIwIAYDVQQLExlPSVNURSBG
-b3VuZGF0aW9uIEVuZG9yc2VkMSgwJgYDVQQDEx9PSVNURSBXSVNlS2V5IEdsb2Jh
-bCBSb290IEdCIENBMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA2Be3
-HEokKtaXscriHvt9OO+Y9bI5mE4nuBFde9IllIiCFSZqGzG7qFshISvYD06fWvGx
-WuR51jIjK+FTzJlFXHtPrby/h0oLS5daqPZI7H17Dc0hBt+eFf1Biki3IPShehtX
-1F1Q/7pn2COZH8g/497/b1t3sWtuuMlk9+HKQUYOKXHQuSP8yYFfTvdv37+ErXNk
-u7dCjmn21HYdfp2nuFeKUWdy19SouJVUQHMD9ur06/4oQnc/nSMbsrY9gBQHTC5P
-99UKFg29ZkM3fiNDecNAhvVMKdqOmq0NpQSHiB6F4+lT1ZvIiwNjeOvgGUpuuy9r
-M2RYk61pv48b74JIxwIDAQABo1EwTzALBgNVHQ8EBAMCAYYwDwYDVR0TAQH/BAUw
-AwEB/zAdBgNVHQ4EFgQUNQ/INmNe4qPs+TtmFc5RUuORmj0wEAYJKwYBBAGCNxUB
-BAMCAQAwDQYJKoZIhvcNAQELBQADggEBAEBM+4eymYGQfp3FsLAmzYh7KzKNbrgh
-cViXfa43FK8+5/ea4n32cZiZBKpDdHij40lhPnOMTZTg+XHEthYOU3gf1qKHLwI5
-gSk8rxWYITD+KJAAjNHhy/peyP34EEY7onhCkRd0VQreUGdNZtGn//3ZwLWoo4rO
-ZvUPQ82nK1d7Y0Zqqi5S2PTt4W2tKZB4SLrhI6qjiey1q5bAtEuiHZeeevJuQHHf
-aPFlTc58Bd9TZaml8LGXBHAVRgOY1NK/VLSgWH1Sb9pWJmLU2NuJMW8c8CLC02Ic
-Nc1MaRVUGpCY3useX8p3x8uOPUNpnJpY0CQ73xtAln41rYHHTnG6iBM=
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIIJhjCCB26gAwIBAgIBCzANBgkqhkiG9w0BAQsFADCCAR4xPjA8BgNVBAMTNUF1
-dG9yaWRhZCBkZSBDZXJ0aWZpY2FjaW9uIFJhaXogZGVsIEVzdGFkbyBWZW5lem9s
-YW5vMQswCQYDVQQGEwJWRTEQMA4GA1UEBxMHQ2FyYWNhczEZMBcGA1UECBMQRGlz
-dHJpdG8gQ2FwaXRhbDE2MDQGA1UEChMtU2lzdGVtYSBOYWNpb25hbCBkZSBDZXJ0
-aWZpY2FjaW9uIEVsZWN0cm9uaWNhMUMwQQYDVQQLEzpTdXBlcmludGVuZGVuY2lh
-IGRlIFNlcnZpY2lvcyBkZSBDZXJ0aWZpY2FjaW9uIEVsZWN0cm9uaWNhMSUwIwYJ
-KoZIhvcNAQkBFhZhY3JhaXpAc3VzY2VydGUuZ29iLnZlMB4XDTEwMTIyODE2NTEw
-MFoXDTIwMTIyNTIzNTk1OVowgdExJjAkBgkqhkiG9w0BCQEWF2NvbnRhY3RvQHBy
-b2NlcnQubmV0LnZlMQ8wDQYDVQQHEwZDaGFjYW8xEDAOBgNVBAgTB01pcmFuZGEx
-KjAoBgNVBAsTIVByb3ZlZWRvciBkZSBDZXJ0aWZpY2Fkb3MgUFJPQ0VSVDE2MDQG
-A1UEChMtU2lzdGVtYSBOYWNpb25hbCBkZSBDZXJ0aWZpY2FjaW9uIEVsZWN0cm9u
-aWNhMQswCQYDVQQGEwJWRTETMBEGA1UEAxMKUFNDUHJvY2VydDCCAiIwDQYJKoZI
-hvcNAQEBBQADggIPADCCAgoCggIBANW39KOUM6FGqVVhSQ2oh3NekS1wwQYalNo9
-7BVCwfWMrmoX8Yqt/ICV6oNEolt6Vc5Pp6XVurgfoCfAUFM+jbnADrgV3NZs+J74
-BCXfgI8Qhd19L3uA3VcAZCP4bsm+lU/hdezgfl6VzbHvvnpC2Mks0+saGiKLt38G
-ieU89RLAu9MLmV+QfI4tL3czkkohRqipCKzx9hEC2ZUWno0vluYC3XXCFCpa1sl9
-JcLB/KpnheLsvtF8PPqv1W7/U0HU9TI4seJfxPmOEO8GqQKJ/+MMbpfg353bIdD0
-PghpbNjU5Db4g7ayNo+c7zo3Fn2/omnXO1ty0K+qP1xmk6wKImG20qCZyFSTXai2
-0b1dCl53lKItwIKOvMoDKjSuc/HUtQy9vmebVOvh+qBa7Dh+PsHMosdEMXXqP+UH
-0quhJZb25uSgXTcYOWEAM11G1ADEtMo88aKjPvM6/2kwLkDd9p+cJsmWN63nOaK/
-6mnbVSKVUyqUtd+tFjiBdWbjxywbk5yqjKPK2Ww8F22c3HxT4CAnQzb5EuE8XL1m
-v6JpIzi4mWCZDlZTOpx+FIywBm/xhnaQr/2v/pDGj59/i5IjnOcVdo/Vi5QTcmn7
-K2FjiO/mpF7moxdqWEfLcU8UC17IAggmosvpr2uKGcfLFFb14dq12fy/czja+eev
-bqQ34gcnAgMBAAGjggMXMIIDEzASBgNVHRMBAf8ECDAGAQH/AgEBMDcGA1UdEgQw
-MC6CD3N1c2NlcnRlLmdvYi52ZaAbBgVghl4CAqASDBBSSUYtRy0yMDAwNDAzNi0w
-MB0GA1UdDgQWBBRBDxk4qpl/Qguk1yeYVKIXTC1RVDCCAVAGA1UdIwSCAUcwggFD
-gBStuyIdxuDSAaj9dlBSk+2YwU2u06GCASakggEiMIIBHjE+MDwGA1UEAxM1QXV0
-b3JpZGFkIGRlIENlcnRpZmljYWNpb24gUmFpeiBkZWwgRXN0YWRvIFZlbmV6b2xh
-bm8xCzAJBgNVBAYTAlZFMRAwDgYDVQQHEwdDYXJhY2FzMRkwFwYDVQQIExBEaXN0
-cml0byBDYXBpdGFsMTYwNAYDVQQKEy1TaXN0ZW1hIE5hY2lvbmFsIGRlIENlcnRp
-ZmljYWNpb24gRWxlY3Ryb25pY2ExQzBBBgNVBAsTOlN1cGVyaW50ZW5kZW5jaWEg
-ZGUgU2VydmljaW9zIGRlIENlcnRpZmljYWNpb24gRWxlY3Ryb25pY2ExJTAjBgkq
-hkiG9w0BCQEWFmFjcmFpekBzdXNjZXJ0ZS5nb2IudmWCAQowDgYDVR0PAQH/BAQD
-AgEGME0GA1UdEQRGMESCDnByb2NlcnQubmV0LnZloBUGBWCGXgIBoAwMClBTQy0w
-MDAwMDKgGwYFYIZeAgKgEgwQUklGLUotMzE2MzUzNzMtNzB2BgNVHR8EbzBtMEag
-RKBChkBodHRwOi8vd3d3LnN1c2NlcnRlLmdvYi52ZS9sY3IvQ0VSVElGSUNBRE8t
-UkFJWi1TSEEzODRDUkxERVIuY3JsMCOgIaAfhh1sZGFwOi8vYWNyYWl6LnN1c2Nl
-cnRlLmdvYi52ZTA3BggrBgEFBQcBAQQrMCkwJwYIKwYBBQUHMAGGG2h0dHA6Ly9v
-Y3NwLnN1c2NlcnRlLmdvYi52ZTBBBgNVHSAEOjA4MDYGBmCGXgMBAjAsMCoGCCsG
-AQUFBwIBFh5odHRwOi8vd3d3LnN1c2NlcnRlLmdvYi52ZS9kcGMwDQYJKoZIhvcN
-AQELBQADggIBACtZ6yKZu4SqT96QxtGGcSOeSwORR3C7wJJg7ODU523G0+1ng3dS
-1fLld6c2suNUvtm7CpsR72H0xpkzmfWvADmNg7+mvTV+LFwxNG9s2/NkAZiqlCxB
-3RWGymspThbASfzXg0gTB1GEMVKIu4YXx2sviiCtxQuPcD4quxtxj7mkoP3Yldmv
-Wb8lK5jpY5MvYB7Eqvh39YtsL+1+LrVPQA3uvFd359m21D+VJzog1eWuq2w1n8Gh
-HVnchIHuTQfiSLaeS5UtQbHh6N5+LwUeaO6/u5BlOsju6rEYNxxik6SgMexxbJHm
-pHmJWhSnFFAFTKQAVzAswbVhltw+HoSvOULP5dAssSS830DD7X9jSr3hTxJkhpXz
-sOfIt+FTvZLm8wyWuevo5pLtp4EJFAv8lXrPj9Y0TzYS3F7RNHXGRoAvlQSMx4bE
-qCaJqD8Zm4G7UaRKhqsLEQ+xrmNTbSjq3TNWOByyrYDT13K9mmyZY+gAu0F2Bbdb
-mRiKw7gSXFbPVgx96OLP7bx0R/vu0xdOIk9W/1DzLuY5poLWccret9W6aAjtmcz9
-opLLabid+Qqkpj5PkygqYWwHJgD/ll9ohri4zspV4KuxPX+Y1zMOWj3YeMLEYC/H
-YvBhkdI4sPaeVdtAgAUSM84dkpvRabP/v/GSCmE1P93+hvS84Bpxs2Km
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIIF0DCCBLigAwIBAgIEOrZQizANBgkqhkiG9w0BAQUFADB/MQswCQYDVQQGEwJC
-TTEZMBcGA1UEChMQUXVvVmFkaXMgTGltaXRlZDElMCMGA1UECxMcUm9vdCBDZXJ0
-aWZpY2F0aW9uIEF1dGhvcml0eTEuMCwGA1UEAxMlUXVvVmFkaXMgUm9vdCBDZXJ0
-aWZpY2F0aW9uIEF1dGhvcml0eTAeFw0wMTAzMTkxODMzMzNaFw0yMTAzMTcxODMz
-MzNaMH8xCzAJBgNVBAYTAkJNMRkwFwYDVQQKExBRdW9WYWRpcyBMaW1pdGVkMSUw
-IwYDVQQLExxSb290IENlcnRpZmljYXRpb24gQXV0aG9yaXR5MS4wLAYDVQQDEyVR
-dW9WYWRpcyBSb290IENlcnRpZmljYXRpb24gQXV0aG9yaXR5MIIBIjANBgkqhkiG
-9w0BAQEFAAOCAQ8AMIIBCgKCAQEAv2G1lVO6V/z68mcLOhrfEYBklbTRvM16z/Yp
-li4kVEAkOPcahdxYTMukJ0KX0J+DisPkBgNbAKVRHnAEdOLB1Dqr1607BxgFjv2D
-rOpm2RgbaIr1VxqYuvXtdj182d6UajtLF8HVj71lODqV0D1VNk7feVcxKh7YWWVJ
-WCCYfqtffp/p1k3sg3Spx2zY7ilKhSoGFPlU5tPaZQeLYzcS19Dsw3sgQUSj7cug
-F+FxZc4dZjH3dgEZyH0DWLaVSR2mEiboxgx24ONmy+pdpibu5cxfvWenAScOospU
-xbF6lR1xHkopigPcakXBpBlebzbNw6Kwt/5cOOJSvPhEQ+aQuwIDAQABo4ICUjCC
-Ak4wPQYIKwYBBQUHAQEEMTAvMC0GCCsGAQUFBzABhiFodHRwczovL29jc3AucXVv
-dmFkaXNvZmZzaG9yZS5jb20wDwYDVR0TAQH/BAUwAwEB/zCCARoGA1UdIASCAREw
-ggENMIIBCQYJKwYBBAG+WAABMIH7MIHUBggrBgEFBQcCAjCBxxqBxFJlbGlhbmNl
-IG9uIHRoZSBRdW9WYWRpcyBSb290IENlcnRpZmljYXRlIGJ5IGFueSBwYXJ0eSBh
-c3N1bWVzIGFjY2VwdGFuY2Ugb2YgdGhlIHRoZW4gYXBwbGljYWJsZSBzdGFuZGFy
-ZCB0ZXJtcyBhbmQgY29uZGl0aW9ucyBvZiB1c2UsIGNlcnRpZmljYXRpb24gcHJh
-Y3RpY2VzLCBhbmQgdGhlIFF1b1ZhZGlzIENlcnRpZmljYXRlIFBvbGljeS4wIgYI
-KwYBBQUHAgEWFmh0dHA6Ly93d3cucXVvdmFkaXMuYm0wHQYDVR0OBBYEFItLbe3T
-KbkGGew5Oanwl4Rqy+/fMIGuBgNVHSMEgaYwgaOAFItLbe3TKbkGGew5Oanwl4Rq
-y+/foYGEpIGBMH8xCzAJBgNVBAYTAkJNMRkwFwYDVQQKExBRdW9WYWRpcyBMaW1p
-dGVkMSUwIwYDVQQLExxSb290IENlcnRpZmljYXRpb24gQXV0aG9yaXR5MS4wLAYD
-VQQDEyVRdW9WYWRpcyBSb290IENlcnRpZmljYXRpb24gQXV0aG9yaXR5ggQ6tlCL
-MA4GA1UdDwEB/wQEAwIBBjANBgkqhkiG9w0BAQUFAAOCAQEAitQUtf70mpKnGdSk
-fnIYj9lofFIk3WdvOXrEql494liwTXCYhGHoG+NpGA7O+0dQoE7/8CQfvbLO9Sf8
-7C9TqnN7Az10buYWnuulLsS/VidQK2K6vkscPFVcQR0kvoIgR13VRH56FmjffU1R
-cHhXHTMe/QKZnAzNCgVPx7uOpHX6Sm2xgI4JVrmcGmD+XcHXetwReNDWXcG31a0y
-mQM6isxUJTkxgXsTIlG6Rmyhu576BGxJJnSP0nPrzDCi5upZIof4l/UO/erMkqQW
-xFIY6iHOsfHmhIHluqmGKPJDWl0Snawe2ajlCmqnf6CHKc/yiU3U7MXi5nrQNiOK
-SnQ2+Q==
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIIFYDCCA0igAwIBAgIUeFhfLq0sGUvjNwc1NBMotZbUZZMwDQYJKoZIhvcNAQEL
-BQAwSDELMAkGA1UEBhMCQk0xGTAXBgNVBAoTEFF1b1ZhZGlzIExpbWl0ZWQxHjAc
-BgNVBAMTFVF1b1ZhZGlzIFJvb3QgQ0EgMSBHMzAeFw0xMjAxMTIxNzI3NDRaFw00
-MjAxMTIxNzI3NDRaMEgxCzAJBgNVBAYTAkJNMRkwFwYDVQQKExBRdW9WYWRpcyBM
-aW1pdGVkMR4wHAYDVQQDExVRdW9WYWRpcyBSb290IENBIDEgRzMwggIiMA0GCSqG
-SIb3DQEBAQUAA4ICDwAwggIKAoICAQCgvlAQjunybEC0BJyFuTHK3C3kEakEPBtV
-wedYMB0ktMPvhd6MLOHBPd+C5k+tR4ds7FtJwUrVu4/sh6x/gpqG7D0DmVIB0jWe
-rNrwU8lmPNSsAgHaJNM7qAJGr6Qc4/hzWHa39g6QDbXwz8z6+cZM5cOGMAqNF341
-68Xfuw6cwI2H44g4hWf6Pser4BOcBRiYz5P1sZK0/CPTz9XEJ0ngnjybCKOLXSoh
-4Pw5qlPafX7PGglTvF0FBM+hSo+LdoINofjSxxR3W5A2B4GbPgb6Ul5jxaYA/qXp
-UhtStZI5cgMJYr2wYBZupt0lwgNm3fME0UDiTouG9G/lg6AnhF4EwfWQvTA9xO+o
-abw4m6SkltFi2mnAAZauy8RRNOoMqv8hjlmPSlzkYZqn0ukqeI1RPToV7qJZjqlc
-3sX5kCLliEVx3ZGZbHqfPT2YfF72vhZooF6uCyP8Wg+qInYtyaEQHeTTRCOQiJ/G
-KubX9ZqzWB4vMIkIG1SitZgj7Ah3HJVdYdHLiZxfokqRmu8hqkkWCKi9YSgxyXSt
-hfbZxbGL0eUQMk1fiyA6PEkfM4VZDdvLCXVDaXP7a3F98N/ETH3Goy7IlXnLc6KO
-Tk0k+17kBL5yG6YnLUlamXrXXAkgt3+UuU/xDRxeiEIbEbfnkduebPRq34wGmAOt
-zCjvpUfzUwIDAQABo0IwQDAPBgNVHRMBAf8EBTADAQH/MA4GA1UdDwEB/wQEAwIB
-BjAdBgNVHQ4EFgQUo5fW816iEOGrRZ88F2Q87gFwnMwwDQYJKoZIhvcNAQELBQAD
-ggIBABj6W3X8PnrHX3fHyt/PX8MSxEBd1DKquGrX1RUVRpgjpeaQWxiZTOOtQqOC
-MTaIzen7xASWSIsBx40Bz1szBpZGZnQdT+3Btrm0DWHMY37XLneMlhwqI2hrhVd2
-cDMT/uFPpiN3GPoajOi9ZcnPP/TJF9zrx7zABC4tRi9pZsMbj/7sPtPKlL92CiUN
-qXsCHKnQO18LwIE6PWThv6ctTr1NxNgpxiIY0MWscgKCP6o6ojoilzHdCGPDdRS5
-YCgtW2jgFqlmgiNR9etT2DGbe+m3nUvriBbP+V04ikkwj+3x6xn0dxoxGE1nVGwv
-b2X52z3sIexe9PSLymBlVNFxZPT5pqOBMzYzcfCkeF9OrYMh3jRJjehZrJ3ydlo2
-8hP0r+AJx2EqbPfgna67hkooby7utHnNkDPDs3b69fBsnQGQ+p6Q9pxyz0fawx/k
-NSBT8lTR32GDpgLiJTjehTItXnOQUl1CxM49S+H5GYQd1aJQzEH7QRTDvdbJWqNj
-ZgKAvQU6O0ec7AAmTPWIUb+oI38YB7AL7YsmoWTTYUrrXJ/es69nA7Mf3W1daWhp
-q1467HxpvMc7hU6eFbm0FU/DlXpY18ls6Wy58yljXrQs8C097Vpl4KlbQMJImYFt
-nh8GKjwStIsPm6Ik8KaN1nrgS7ZklmOVhMJKzRwuJIczYOXD
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIIFtzCCA5+gAwIBAgICBQkwDQYJKoZIhvcNAQEFBQAwRTELMAkGA1UEBhMCQk0x
-GTAXBgNVBAoTEFF1b1ZhZGlzIExpbWl0ZWQxGzAZBgNVBAMTElF1b1ZhZGlzIFJv
-b3QgQ0EgMjAeFw0wNjExMjQxODI3MDBaFw0zMTExMjQxODIzMzNaMEUxCzAJBgNV
-BAYTAkJNMRkwFwYDVQQKExBRdW9WYWRpcyBMaW1pdGVkMRswGQYDVQQDExJRdW9W
-YWRpcyBSb290IENBIDIwggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoICAQCa
-GMpLlA0ALa8DKYrwD4HIrkwZhR0In6spRIXzL4GtMh6QRr+jhiYaHv5+HBg6XJxg
-Fyo6dIMzMH1hVBHL7avg5tKifvVrbxi3Cgst/ek+7wrGsxDp3MJGF/hd/aTa/55J
-WpzmM+Yklvc/ulsrHHo1wtZn/qtmUIttKGAr79dgw8eTvI02kfN/+NsRE8Scd3bB
-rrcCaoF6qUWD4gXmuVbBlDePSHFjIuwXZQeVikvfj8ZaCuWw419eaxGrDPmF60Tp
-+ARz8un+XJiM9XOva7R+zdRcAitMOeGylZUtQofX1bOQQ7dsE/He3fbE+Ik/0XX1
-ksOR1YqI0JDs3G3eicJlcZaLDQP9nL9bFqyS2+r+eXyt66/3FsvbzSUr5R/7mp/i
-Ucw6UwxI5g69ybR2BlLmEROFcmMDBOAENisgGQLodKcftslWZvB1JdxnwQ5hYIiz
-PtGo/KPaHbDRsSNU30R2be1B2MGyIrZTHN81Hdyhdyox5C315eXbyOD/5YDXC2Og
-/zOhD7osFRXql7PSorW+8oyWHhqPHWykYTe5hnMz15eWniN9gqRMgeKh0bpnX5UH
-oycR7hYQe7xFSkyyBNKr79X9DFHOUGoIMfmR2gyPZFwDwzqLID9ujWc9Otb+fVuI
-yV77zGHcizN300QyNQliBJIWENieJ0f7OyHj+OsdWwIDAQABo4GwMIGtMA8GA1Ud
-EwEB/wQFMAMBAf8wCwYDVR0PBAQDAgEGMB0GA1UdDgQWBBQahGK8SEwzJQTU7tD2
-A8QZRtGUazBuBgNVHSMEZzBlgBQahGK8SEwzJQTU7tD2A8QZRtGUa6FJpEcwRTEL
-MAkGA1UEBhMCQk0xGTAXBgNVBAoTEFF1b1ZhZGlzIExpbWl0ZWQxGzAZBgNVBAMT
-ElF1b1ZhZGlzIFJvb3QgQ0EgMoICBQkwDQYJKoZIhvcNAQEFBQADggIBAD4KFk2f
-BluornFdLwUvZ+YTRYPENvbzwCYMDbVHZF34tHLJRqUDGCdViXh9duqWNIAXINzn
-g/iN/Ae42l9NLmeyhP3ZRPx3UIHmfLTJDQtyU/h2BwdBR5YM++CCJpNVjP4iH2Bl
-fF/nJrP3MpCYUNQ3cVX2kiF495V5+vgtJodmVjB3pjd4M1IQWK4/YY7yarHvGH5K
-WWPKjaJW1acvvFYfzznB4vsKqBUsfU16Y8Zsl0Q80m/DShcK+JDSV6IZUaUtl0Ha
-B0+pUNqQjZRG4T7wlP0QADj1O+hA4bRuVhogzG9Yje0uRY/W6ZM/57Es3zrWIozc
-hLsib9D45MY56QSIPMO661V6bYCZJPVsAfv4l7CUW+v90m/xd2gNNWQjrLhVoQPR
-TUIZ3Ph1WVaj+ahJefivDrkRoHy3au000LYmYjgahwz46P0u05B/B5EqHdZ+XIWD
-mbA4CD/pXvk1B+TJYm5Xf6dQlfe6yJvmjqIBxdZmv3lh8zwc4bmCXF2gw+nYSL0Z
-ohEUGW6yhhtoPkg3Goi3XZZenMfvJ2II4pEZXNLxId26F0KCl3GBUzGpn/Z9Yr9y
-4aOTHcyKJloJONDO1w2AFrR4pTqHTI2KpdVGl/IsELm8VCLAAVBpQ570su9t+Oza
-8eOx79+Rj1QqCyXBJhnEUhAFZdWCEOrCMc0u
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIIFYDCCA0igAwIBAgIURFc0JFuBiZs18s64KztbpybwdSgwDQYJKoZIhvcNAQEL
-BQAwSDELMAkGA1UEBhMCQk0xGTAXBgNVBAoTEFF1b1ZhZGlzIExpbWl0ZWQxHjAc
-BgNVBAMTFVF1b1ZhZGlzIFJvb3QgQ0EgMiBHMzAeFw0xMjAxMTIxODU5MzJaFw00
-MjAxMTIxODU5MzJaMEgxCzAJBgNVBAYTAkJNMRkwFwYDVQQKExBRdW9WYWRpcyBM
-aW1pdGVkMR4wHAYDVQQDExVRdW9WYWRpcyBSb290IENBIDIgRzMwggIiMA0GCSqG
-SIb3DQEBAQUAA4ICDwAwggIKAoICAQChriWyARjcV4g/Ruv5r+LrI3HimtFhZiFf
-qq8nUeVuGxbULX1QsFN3vXg6YOJkApt8hpvWGo6t/x8Vf9WVHhLL5hSEBMHfNrMW
-n4rjyduYNM7YMxcoRvynyfDStNVNCXJJ+fKH46nafaF9a7I6JaltUkSs+L5u+9ym
-c5GQYaYDFCDy54ejiK2toIz/pgslUiXnFgHVy7g1gQyjO/Dh4fxaXc6AcW34Sas+
-O7q414AB+6XrW7PFXmAqMaCvN+ggOp+oMiwMzAkd056OXbxMmO7FGmh77FOm6RQ1
-o9/NgJ8MSPsc9PG/Srj61YxxSscfrf5BmrODXfKEVu+lV0POKa2Mq1W/xPtbAd0j
-IaFYAI7D0GoT7RPjEiuA3GfmlbLNHiJuKvhB1PLKFAeNilUSxmn1uIZoL1NesNKq
-IcGY5jDjZ1XHm26sGahVpkUG0CM62+tlXSoREfA7T8pt9DTEceT/AFr2XK4jYIVz
-8eQQsSWu1ZK7E8EM4DnatDlXtas1qnIhO4M15zHfeiFuuDIIfR0ykRVKYnLP43eh
-vNURG3YBZwjgQQvD6xVu+KQZ2aKrr+InUlYrAoosFCT5v0ICvybIxo/gbjh9Uy3l
-7ZizlWNof/k19N+IxWA1ksB8aRxhlRbQ694Lrz4EEEVlWFA4r0jyWbYW8jwNkALG
-cC4BrTwV1wIDAQABo0IwQDAPBgNVHRMBAf8EBTADAQH/MA4GA1UdDwEB/wQEAwIB
-BjAdBgNVHQ4EFgQU7edvdlq/YOxJW8ald7tyFnGbxD0wDQYJKoZIhvcNAQELBQAD
-ggIBAJHfgD9DCX5xwvfrs4iP4VGyvD11+ShdyLyZm3tdquXK4Qr36LLTn91nMX66
-AarHakE7kNQIXLJgapDwyM4DYvmL7ftuKtwGTTwpD4kWilhMSA/ohGHqPHKmd+RC
-roijQ1h5fq7KpVMNqT1wvSAZYaRsOPxDMuHBR//47PERIjKWnML2W2mWeyAMQ0Ga
-W/ZZGYjeVYg3UQt4XAoeo0L9x52ID8DyeAIkVJOviYeIyUqAHerQbj5hLja7NQ4n
-lv1mNDthcnPxFlxHBlRJAHpYErAK74X9sbgzdWqTHBLmYF5vHX/JHyPLhGGfHoJE
-+V+tYlUkmlKY7VHnoX6XOuYvHxHaU4AshZ6rNRDbIl9qxV6XU/IyAgkwo1jwDQHV
-csaxfGl7w/U2Rcxhbl5MlMVerugOXou/983g7aEOGzPuVBj+D77vfoRrQ+NwmNtd
-dbINWQeFFSM51vHfqSYP1kjHs6Yi9TM3WpVHn3u6GBVv/9YUZINJ0gpnIdsPNWNg
-KCLjsZWDzYWm3S8P52dSbrsvhXz1SnPnxT7AvSESBT/8twNJAlvIJebiVDj1eYeM
-HVOyToV7BjjHLPj4sHKNJeV3UvQDHEimUF+IIDBu8oJDqz2XhOdT+yHBTw8imoa4
-WSr2Rz0ZiC3oheGe7IUIarFsNMkd7EgrO3jtZsSOeWmD3n+M
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIIGnTCCBIWgAwIBAgICBcYwDQYJKoZIhvcNAQEFBQAwRTELMAkGA1UEBhMCQk0x
-GTAXBgNVBAoTEFF1b1ZhZGlzIExpbWl0ZWQxGzAZBgNVBAMTElF1b1ZhZGlzIFJv
-b3QgQ0EgMzAeFw0wNjExMjQxOTExMjNaFw0zMTExMjQxOTA2NDRaMEUxCzAJBgNV
-BAYTAkJNMRkwFwYDVQQKExBRdW9WYWRpcyBMaW1pdGVkMRswGQYDVQQDExJRdW9W
-YWRpcyBSb290IENBIDMwggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoICAQDM
-V0IWVJzmmNPTTe7+7cefQzlKZbPoFog02w1ZkXTPkrgEQK0CSzGrvI2RaNggDhoB
-4hp7Thdd4oq3P5kazethq8Jlph+3t723j/z9cI8LoGe+AaJZz3HmDyl2/7FWeUUr
-H556VOijKTVopAFPD6QuN+8bv+OPEKhyq1hX51SGyMnzW9os2l2ObjyjPtr7guXd
-8lyyBTNvijbO0BNO/79KDDRMpsMhvVAEVeuxu537RR5kFd5VAYwCdrXLoT9Cabwv
-vWhDFlaJKjdhkf2mrk7AyxRllDdLkgbvBNDInIjbC3uBr7E9KsRlOni27tyAsdLT
-mZw67mtaa7ONt9XOnMK+pUsvFrGeaDsGb659n/je7Mwpp5ijJUMv7/FfJuGITfhe
-btfZFG4ZM2mnO4SJk8RTVROhUXhA+LjJou57ulJCg54U7QVSWllWp5f8nT8KKdjc
-T5EOE7zelaTfi5m+rJsziO+1ga8bxiJTyPbH7pcUsMV8eFLI8M5ud2CEpukqdiDt
-WAEXMJPpGovgc2PZapKUSU60rUqFxKMiMPwJ7Wgic6aIDFUhWMXhOp8q3crhkODZ
-c6tsgLjoC2SToJyMGf+z0gzskSaHirOi4XCPLArlzW1oUevaPwV/izLmE1xr/l9A
-4iLItLRkT9a6fUg+qGkM17uGcclzuD87nSVL2v9A6wIDAQABo4IBlTCCAZEwDwYD
-VR0TAQH/BAUwAwEB/zCB4QYDVR0gBIHZMIHWMIHTBgkrBgEEAb5YAAMwgcUwgZMG
-CCsGAQUFBwICMIGGGoGDQW55IHVzZSBvZiB0aGlzIENlcnRpZmljYXRlIGNvbnN0
-aXR1dGVzIGFjY2VwdGFuY2Ugb2YgdGhlIFF1b1ZhZGlzIFJvb3QgQ0EgMyBDZXJ0
-aWZpY2F0ZSBQb2xpY3kgLyBDZXJ0aWZpY2F0aW9uIFByYWN0aWNlIFN0YXRlbWVu
-dC4wLQYIKwYBBQUHAgEWIWh0dHA6Ly93d3cucXVvdmFkaXNnbG9iYWwuY29tL2Nw
-czALBgNVHQ8EBAMCAQYwHQYDVR0OBBYEFPLAE+CCQz777i9nMpY1XNu4ywLQMG4G
-A1UdIwRnMGWAFPLAE+CCQz777i9nMpY1XNu4ywLQoUmkRzBFMQswCQYDVQQGEwJC
-TTEZMBcGA1UEChMQUXVvVmFkaXMgTGltaXRlZDEbMBkGA1UEAxMSUXVvVmFkaXMg
-Um9vdCBDQSAzggIFxjANBgkqhkiG9w0BAQUFAAOCAgEAT62gLEz6wPJv92ZVqyM0
-7ucp2sNbtrCD2dDQ4iH782CnO11gUyeim/YIIirnv6By5ZwkajGxkHon24QRiSem
-d1o417+shvzuXYO8BsbRd2sPbSQvS3pspweWyuOEn62Iix2rFo1bZhfZFvSLgNLd
-+LJ2w/w4E6oM3kJpK27zPOuAJ9v1pkQNn1pVWQvVDVJIxa6f8i+AxeoyUDUSly7B
-4f/xI4hROJ/yZlZ25w9Rl6VSDE1JUZU2Pb+iSwwQHYaZTKrzchGT5Or2m9qoXadN
-t54CrnMAyNojA+j56hl0YgCUyyIgvpSnWbWCar6ZeXqp8kokUvd0/bpO5qgdAm6x
-DYBEwa7TIzdfu4V8K5Iu6H6li92Z4b8nby1dqnuH/grdS/yO9SbkbnBCbjPsMZ57
-k8HkyWkaPcBrTiJt7qtYTcbQQcEr6k8Sh17rRdhs9ZgC06DYVYoGmRmioHfRMJ6s
-zHXug/WwYjnPbFfiTNKRCw51KBuav/0aQ/HKd/s7j2G4aSgWQgRecCocIdiP4b0j
-Wy10QJLZYxkNc91pvGJHvOB0K7Lrfb5BG7XARsWhIstfTsEokt4YutUqKLsRixeT
-mJlglFwjz1onl14LBQaTNx47aTbrqZ5hHY8y2o4M1nQ+ewkk2gF3R8Q7zTSMmfXK
-4SVhM7JZG+Ju1zdXtg2pEto=
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIIFYDCCA0igAwIBAgIULvWbAiin23r/1aOp7r0DoM8Sah0wDQYJKoZIhvcNAQEL
-BQAwSDELMAkGA1UEBhMCQk0xGTAXBgNVBAoTEFF1b1ZhZGlzIExpbWl0ZWQxHjAc
-BgNVBAMTFVF1b1ZhZGlzIFJvb3QgQ0EgMyBHMzAeFw0xMjAxMTIyMDI2MzJaFw00
-MjAxMTIyMDI2MzJaMEgxCzAJBgNVBAYTAkJNMRkwFwYDVQQKExBRdW9WYWRpcyBM
-aW1pdGVkMR4wHAYDVQQDExVRdW9WYWRpcyBSb290IENBIDMgRzMwggIiMA0GCSqG
-SIb3DQEBAQUAA4ICDwAwggIKAoICAQCzyw4QZ47qFJenMioKVjZ/aEzHs286IxSR
-/xl/pcqs7rN2nXrpixurazHb+gtTTK/FpRp5PIpM/6zfJd5O2YIyC0TeytuMrKNu
-FoM7pmRLMon7FhY4futD4tN0SsJiCnMK3UmzV9KwCoWdcTzeo8vAMvMBOSBDGzXR
-U7Ox7sWTaYI+FrUoRqHe6okJ7UO4BUaKhvVZR74bbwEhELn9qdIoyhA5CcoTNs+c
-ra1AdHkrAj80//ogaX3T7mH1urPnMNA3I4ZyYUUpSFlob3emLoG+B01vr87ERROR
-FHAGjx+f+IdpsQ7vw4kZ6+ocYfx6bIrc1gMLnia6Et3UVDmrJqMz6nWB2i3ND0/k
-A9HvFZcba5DFApCTZgIhsUfei5pKgLlVj7WiL8DWM2fafsSntARE60f75li59wzw
-eyuxwHApw0BiLTtIadwjPEjrewl5qW3aqDCYz4ByA4imW0aucnl8CAMhZa634Ryl
-sSqiMd5mBPfAdOhx3v89WcyWJhKLhZVXGqtrdQtEPREoPHtht+KPZ0/l7DxMYIBp
-VzgeAVuNVejH38DMdyM0SXV89pgR6y3e7UEuFAUCf+D+IOs15xGsIs5XPd7JMG0Q
-A4XN8f+MFrXBsj6IbGB/kE+V9/YtrQE5BwT6dYB9v0lQ7e/JxHwc64B+27bQ3RP+
-ydOc17KXqQIDAQABo0IwQDAPBgNVHRMBAf8EBTADAQH/MA4GA1UdDwEB/wQEAwIB
-BjAdBgNVHQ4EFgQUxhfQvKjqAkPyGwaZXSuQILnXnOQwDQYJKoZIhvcNAQELBQAD
-ggIBADRh2Va1EodVTd2jNTFGu6QHcrxfYWLopfsLN7E8trP6KZ1/AvWkyaiTt3px
-KGmPc+FSkNrVvjrlt3ZqVoAh313m6Tqe5T72omnHKgqwGEfcIHB9UqM+WXzBusnI
-FUBhynLWcKzSt/Ac5IYp8M7vaGPQtSCKFWGafoaYtMnCdvvMujAWzKNhxnQT5Wvv
-oxXqA/4Ti2Tk08HS6IT7SdEQTXlm66r99I0xHnAUrdzeZxNMgRVhvLfZkXdxGYFg
-u/BYpbWcC/ePIlUnwEsBbTuZDdQdm2NnL9DuDcpmvJRPpq3t/O5jrFc/ZSXPsoaP
-0Aj/uHYUbt7lJ+yreLVTubY/6CD50qi+YUbKh4yE8/nxoGibIh6BJpsQBJFxwAYf
-3KDTuVan45gtf4Od34wrnDKOMpTwATwiKp9Dwi7DmDkHOHv8XgBCH/MyJnmDhPbl
-8MFREsALHgQjDFSlTC9JxUrRtm5gDWv8a4uFJGS3iQ6rJUdbPM9+Sb3H6QrG2vd+
-DhcI00iX0HGS8A85PjRqHH3Y8iKuu2n0M7SmSFXRDw4m6Oy2Cy2nhTXN/VnIn9HN
-PlopNLk9hM6xZdRZkZFWdSHBd575euFgndOtBBj0fOtek49TSiIp+EgrPk2GrFt/
-ywaZWWDYWGWVjUTR939+J399roD1B0y2PpxxVJkES/1Y+Zj0
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIIDYTCCAkmgAwIBAgIQCgEBAQAAAnwAAAAKAAAAAjANBgkqhkiG9w0BAQUFADA6
-MRkwFwYDVQQKExBSU0EgU2VjdXJpdHkgSW5jMR0wGwYDVQQLExRSU0EgU2VjdXJp
-dHkgMjA0OCBWMzAeFw0wMTAyMjIyMDM5MjNaFw0yNjAyMjIyMDM5MjNaMDoxGTAX
-BgNVBAoTEFJTQSBTZWN1cml0eSBJbmMxHTAbBgNVBAsTFFJTQSBTZWN1cml0eSAy
-MDQ4IFYzMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAt49VcdKA3Xtp
-eafwGFAyPGJn9gqVB93mG/Oe2dJBVGutn3y+Gc37RqtBaB4Y6lXIL5F4iSj7Jylg
-/9+PjDvJSZu1pJTOAeo+tWN7fyb9Gd3AIb2E0S1PRsNO3Ng3OTsor8udGuorryGl
-wSMiuLgbWhOHV4PR8CDn6E8jQrAApX2J6elhc5SYcSa8LWrg903w8bYqODGBDSnh
-AMFRD0xS+ARaqn1y07iHKrtjEAMqs6FPDVpeRrc9DvV07Jmf+T0kgYim3WBU6JU2
-PcYJk5qjEoAAVZkZR73QpXzDuvsf9/UP+Ky5tfQ3mBMY3oVbtwyCO4dvlTlYMNpu
-AWgXIszACwIDAQABo2MwYTAPBgNVHRMBAf8EBTADAQH/MA4GA1UdDwEB/wQEAwIB
-BjAfBgNVHSMEGDAWgBQHw1EwpKrpRa41JPr/JCwz0LGdjDAdBgNVHQ4EFgQUB8NR
-MKSq6UWuNST6/yQsM9CxnYwwDQYJKoZIhvcNAQEFBQADggEBAF8+hnZuuDU8TjYc
-HnmYv/3VEhF5Ug7uMYm83X/50cYVIeiKAVQNOvtUudZj1LGqlk2iQk3UUx+LEN5/
-Zb5gEydxiKRz44Rj0aRV4VCT5hsOedBnvEbIvz8XDZXmxpBp3ue0L96VfdASPz0+
-f00/FGj1EVDVwfSQpQgdMWD/YIwjVAqv/qFuxdF6Kmh4zx6CCiC0H63lhbJqaHVO
-rSU3lIW+vaHU6rcMSzyd6BIA8F+sDeGscGNz9395nzIlQnQFgCi/vcEkllgVsRch
-6YlL2weIZ/QVrXA+L02FO8K32/6YaCOJ4XQP3vTFhGMpG8zLB8kApKnXwiJPZ9d3
-7CAFYd4=
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIIGizCCBXOgAwIBAgIEO0XlaDANBgkqhkiG9w0BAQUFADBoMQswCQYDVQQGEwJF
-UzEfMB0GA1UEChMWR2VuZXJhbGl0YXQgVmFsZW5jaWFuYTEPMA0GA1UECxMGUEtJ
-R1ZBMScwJQYDVQQDEx5Sb290IENBIEdlbmVyYWxpdGF0IFZhbGVuY2lhbmEwHhcN
-MDEwNzA2MTYyMjQ3WhcNMjEwNzAxMTUyMjQ3WjBoMQswCQYDVQQGEwJFUzEfMB0G
-A1UEChMWR2VuZXJhbGl0YXQgVmFsZW5jaWFuYTEPMA0GA1UECxMGUEtJR1ZBMScw
-JQYDVQQDEx5Sb290IENBIEdlbmVyYWxpdGF0IFZhbGVuY2lhbmEwggEiMA0GCSqG
-SIb3DQEBAQUAA4IBDwAwggEKAoIBAQDGKqtXETcvIorKA3Qdyu0togu8M1JAJke+
-WmmmO3I2F0zo37i7L3bhQEZ0ZQKQUgi0/6iMweDHiVYQOTPvaLRfX9ptI6GJXiKj
-SgbwJ/BXufjpTjJ3Cj9BZPPrZe52/lSqfR0grvPXdMIKX/UIKFIIzFVd0g/bmoGl
-u6GzwZTNVOAydTGRGmKy3nXiz0+J2ZGQD0EbtFpKd71ng+CT516nDOeB0/RSrFOy
-A8dEJvt55cs0YFAQexvba9dHq198aMpunUEDEO5rmXteJajCq+TA81yc477OMUxk
-Hl6AovWDfgzWyoxVjr7gvkkHD6MkQXpYHYTqWBLI4bft75PelAgxAgMBAAGjggM7
-MIIDNzAyBggrBgEFBQcBAQQmMCQwIgYIKwYBBQUHMAGGFmh0dHA6Ly9vY3NwLnBr
-aS5ndmEuZXMwEgYDVR0TAQH/BAgwBgEB/wIBAjCCAjQGA1UdIASCAiswggInMIIC
-IwYKKwYBBAG/VQIBADCCAhMwggHoBggrBgEFBQcCAjCCAdoeggHWAEEAdQB0AG8A
-cgBpAGQAYQBkACAAZABlACAAQwBlAHIAdABpAGYAaQBjAGEAYwBpAPMAbgAgAFIA
-YQDtAHoAIABkAGUAIABsAGEAIABHAGUAbgBlAHIAYQBsAGkAdABhAHQAIABWAGEA
-bABlAG4AYwBpAGEAbgBhAC4ADQAKAEwAYQAgAEQAZQBjAGwAYQByAGEAYwBpAPMA
-bgAgAGQAZQAgAFAAcgDhAGMAdABpAGMAYQBzACAAZABlACAAQwBlAHIAdABpAGYA
-aQBjAGEAYwBpAPMAbgAgAHEAdQBlACAAcgBpAGcAZQAgAGUAbAAgAGYAdQBuAGMA
-aQBvAG4AYQBtAGkAZQBuAHQAbwAgAGQAZQAgAGwAYQAgAHAAcgBlAHMAZQBuAHQA
-ZQAgAEEAdQB0AG8AcgBpAGQAYQBkACAAZABlACAAQwBlAHIAdABpAGYAaQBjAGEA
-YwBpAPMAbgAgAHMAZQAgAGUAbgBjAHUAZQBuAHQAcgBhACAAZQBuACAAbABhACAA
-ZABpAHIAZQBjAGMAaQDzAG4AIAB3AGUAYgAgAGgAdAB0AHAAOgAvAC8AdwB3AHcA
-LgBwAGsAaQAuAGcAdgBhAC4AZQBzAC8AYwBwAHMwJQYIKwYBBQUHAgEWGWh0dHA6
-Ly93d3cucGtpLmd2YS5lcy9jcHMwHQYDVR0OBBYEFHs100DSHHgZZu90ECjcPk+y
-eAT8MIGVBgNVHSMEgY0wgYqAFHs100DSHHgZZu90ECjcPk+yeAT8oWykajBoMQsw
-CQYDVQQGEwJFUzEfMB0GA1UEChMWR2VuZXJhbGl0YXQgVmFsZW5jaWFuYTEPMA0G
-A1UECxMGUEtJR1ZBMScwJQYDVQQDEx5Sb290IENBIEdlbmVyYWxpdGF0IFZhbGVu
-Y2lhbmGCBDtF5WgwDQYJKoZIhvcNAQEFBQADggEBACRhTvW1yEICKrNcda3Fbcrn
-lD+laJWIwVTAEGmiEi8YPyVQqHxK6sYJ2fR1xkDar1CdPaUWu20xxsdzCkj+IHLt
-b8zog2EWRpABlUt9jppSCS/2bxzkoXHPjCpaF3ODR00PNvsETUlR4hTJZGH71BTg
-9J63NI8KJr2XXPR5OkowGcytT6CYirQxlyric21+eLj4iIlPsSKRZEv1UN4D2+XF
-ducTZnV+ZfsBn5OHiJ35Rld8TWCvmHMTI6QgkYH60GFmuH3Rr9ZvHmw96RH9qfmC
-IoaZM3Fa6hlXPZHNqcCjbgcTpsnt+GijnsNacgmHKNHEc8RzGF9QdRYxn7fofMM=
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIIDbTCCAlWgAwIBAgIBATANBgkqhkiG9w0BAQUFADBYMQswCQYDVQQGEwJKUDEr
-MCkGA1UEChMiSmFwYW4gQ2VydGlmaWNhdGlvbiBTZXJ2aWNlcywgSW5jLjEcMBoG
-A1UEAxMTU2VjdXJlU2lnbiBSb290Q0ExMTAeFw0wOTA0MDgwNDU2NDdaFw0yOTA0
-MDgwNDU2NDdaMFgxCzAJBgNVBAYTAkpQMSswKQYDVQQKEyJKYXBhbiBDZXJ0aWZp
-Y2F0aW9uIFNlcnZpY2VzLCBJbmMuMRwwGgYDVQQDExNTZWN1cmVTaWduIFJvb3RD
-QTExMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA/XeqpRyQBTvLTJsz
-i1oURaTnkBbR31fSIRCkF/3frNYfp+TbfPfs37gD2pRY/V1yfIw/XwFndBWW4wI8
-h9uuywGOwvNmxoVF9ALGOrVisq/6nL+k5tSAMJjzDbaTj6nU2DbysPyKyiyhFTOV
-MdrAG/LuYpmGYz+/3ZMqg6h2uRMft85OQoWPIucuGvKVCbIFtUROd6EgvanyTgp9
-UK31BQ1FT0Zx/Sg+U/sE2C3XZR1KG/rPO7AxmjVuyIsG0wCR8pQIZUyxNAYAeoni
-8McDWc/V1uinMrPmmECGxc0nEovMe863ETxiYAcjPitAbpSACW22s293bzUIUPsC
-h8U+iQIDAQABo0IwQDAdBgNVHQ4EFgQUW/hNT7KlhtQ60vFjmqC+CfZXt94wDgYD
-VR0PAQH/BAQDAgEGMA8GA1UdEwEB/wQFMAMBAf8wDQYJKoZIhvcNAQEFBQADggEB
-AKChOBZmLqdWHyGcBvod7bkixTgm2E5P7KN/ed5GIaGHd48HCJqypMWvDzKYC3xm
-KbabfSVSSUOrTC4rbnpwrxYO4wJs+0LmGJ1F2FXI6Dvd5+H0LgscNFxsWEr7jIhQ
-X5Ucv+2rIrVls4W6ng+4reV6G4pQOh29Dbx7VFALuUKvVaAYga1lme++5Jy/xIWr
-QbJUb9wlze144o4MjQlJ3WN7WmmWAiGovVJZ6X01y8hSyn+B/tlr0/cR7SXf+Of5
-pPpyl4RTDaXQMhhRdlkUbA/r7F+AjHVDg8OFmP9Mni0N5HeDk061lgeLKBObjBmN
-QSdJQO7e5iNEOdyhIta6A/I=
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIIDuDCCAqCgAwIBAgIQDPCOXAgWpa1Cf/DrJxhZ0DANBgkqhkiG9w0BAQUFADBI
-MQswCQYDVQQGEwJVUzEgMB4GA1UEChMXU2VjdXJlVHJ1c3QgQ29ycG9yYXRpb24x
-FzAVBgNVBAMTDlNlY3VyZVRydXN0IENBMB4XDTA2MTEwNzE5MzExOFoXDTI5MTIz
-MTE5NDA1NVowSDELMAkGA1UEBhMCVVMxIDAeBgNVBAoTF1NlY3VyZVRydXN0IENv
-cnBvcmF0aW9uMRcwFQYDVQQDEw5TZWN1cmVUcnVzdCBDQTCCASIwDQYJKoZIhvcN
-AQEBBQADggEPADCCAQoCggEBAKukgeWVzfX2FI7CT8rU4niVWJxB4Q2ZQCQXOZEz
-Zum+4YOvYlyJ0fwkW2Gz4BERQRwdbvC4u/jep4G6pkjGnx29vo6pQT64lO0pGtSO
-0gMdA+9tDWccV9cGrcrI9f4Or2YlSASWC12juhbDCE/RRvgUXPLIXgGZbf2IzIao
-wW8xQmxSPmjL8xk037uHGFaAJsTQ3MBv396gwpEWoGQRS0S8Hvbn+mPeZqx2pHGj
-7DaUaHp3pLHnDi+BeuK1cobvomuL8A/b01k/unK8RCSc43Oz969XL0Imnal0ugBS
-8kvNU3xHCzaFDmapCJcWNFfBZveA4+1wVMeT4C4oFVmHursCAwEAAaOBnTCBmjAT
-BgkrBgEEAYI3FAIEBh4EAEMAQTALBgNVHQ8EBAMCAYYwDwYDVR0TAQH/BAUwAwEB
-/zAdBgNVHQ4EFgQUQjK2FvoE/f5dS3rD/fdMQB1aQ68wNAYDVR0fBC0wKzApoCeg
-JYYjaHR0cDovL2NybC5zZWN1cmV0cnVzdC5jb20vU1RDQS5jcmwwEAYJKwYBBAGC
-NxUBBAMCAQAwDQYJKoZIhvcNAQEFBQADggEBADDtT0rhWDpSclu1pqNlGKa7UTt3
-6Z3q059c4EVlew3KW+JwULKUBRSuSceNQQcSc5R+DCMh/bwQf2AQWnL1mA6s7Ll/
-3XpvXdMc9P+IBWlCqQVxyLesJugutIxq/3HcuLHfmbx8IVQr5Fiiu1cprp6poxkm
-D5kuCLDv/WnPmRoJjeOnnyvJNjR7JLN4TJUXpAYmHrZkUjZfYGfZnMUFdAvnZyPS
-CPyI6a6Lf+Ew9Dd+/cYy2i2eRDAwbO4H3tI0/NL/QPZL9GZGBlSm8jIKYyYwa5vR
-3ItHuuG51WLQoqD0ZwV4KWMabwTW+MZMo5qxN7SN5ShLHZ4swrhovO0C7jE=
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIIDvDCCAqSgAwIBAgIQB1YipOjUiolN9BPI8PjqpTANBgkqhkiG9w0BAQUFADBK
-MQswCQYDVQQGEwJVUzEgMB4GA1UEChMXU2VjdXJlVHJ1c3QgQ29ycG9yYXRpb24x
-GTAXBgNVBAMTEFNlY3VyZSBHbG9iYWwgQ0EwHhcNMDYxMTA3MTk0MjI4WhcNMjkx
-MjMxMTk1MjA2WjBKMQswCQYDVQQGEwJVUzEgMB4GA1UEChMXU2VjdXJlVHJ1c3Qg
-Q29ycG9yYXRpb24xGTAXBgNVBAMTEFNlY3VyZSBHbG9iYWwgQ0EwggEiMA0GCSqG
-SIb3DQEBAQUAA4IBDwAwggEKAoIBAQCvNS7YrGxVaQZx5RNoJLNP2MwhR/jxYDiJ
-iQPpvepeRlMJ3Fz1Wuj3RSoC6zFh1ykzTM7HfAo3fg+6MpjhHZevj8fcyTiW89sa
-/FHtaMbQbqR8JNGuQsiWUGMu4P51/pinX0kuleM5M2SOHqRfkNJnPLLZ/kG5VacJ
-jnIFHovdRIWCQtBJwB1g8NEXLJXr9qXBkqPFwqcIYA1gBBCWeZ4WNOaptvolRTnI
-HmX5k/Wq8VLcmZg9pYYaDDUz+kulBAYVHDGA76oYa8J719rO+TMg1fW9ajMtgQT7
-sFzUnKPiXB3jqUJ1XnvUd+85VLrJChgbEplJL4hL/VBi0XPnj3pDAgMBAAGjgZ0w
-gZowEwYJKwYBBAGCNxQCBAYeBABDAEEwCwYDVR0PBAQDAgGGMA8GA1UdEwEB/wQF
-MAMBAf8wHQYDVR0OBBYEFK9EBMJBfkiD2045AuzshHrmzsmkMDQGA1UdHwQtMCsw
-KaAnoCWGI2h0dHA6Ly9jcmwuc2VjdXJldHJ1c3QuY29tL1NHQ0EuY3JsMBAGCSsG
-AQQBgjcVAQQDAgEAMA0GCSqGSIb3DQEBBQUAA4IBAQBjGghAfaReUw132HquHw0L
-URYD7xh8yOOvaliTFGCRsoTciE6+OYo68+aCiV0BN7OrJKQVDpI1WkpEXk5X+nXO
-H0jOZvQ8QCaSmGwb7iRGDBezUqXbpZGRzzfTb+cnCDpOGR86p1hcF895P4vkp9Mm
-I50mD1hp/Ed+stCNi5O/KU9DaXR2Z0vPB4zmAve14bRDtUstFJ/53CYNv6ZHdAbY
-iNE6KTCEztI5gGIbqMdXSbxqVVFnFUq+NQfk1XWYN3kwFNspnWzFacxHVaIw98xc
-f8LDmBxrThaA63p4ZUWiABqvDA1VZDRIuJK58bRQKfJPIx/abKwfROHdI3hRW8cW
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIIDfTCCAmWgAwIBAgIBADANBgkqhkiG9w0BAQUFADBgMQswCQYDVQQGEwJKUDEl
-MCMGA1UEChMcU0VDT00gVHJ1c3QgU3lzdGVtcyBDTy4sTFRELjEqMCgGA1UECxMh
-U2VjdXJpdHkgQ29tbXVuaWNhdGlvbiBFViBSb290Q0ExMB4XDTA3MDYwNjAyMTIz
-MloXDTM3MDYwNjAyMTIzMlowYDELMAkGA1UEBhMCSlAxJTAjBgNVBAoTHFNFQ09N
-IFRydXN0IFN5c3RlbXMgQ08uLExURC4xKjAoBgNVBAsTIVNlY3VyaXR5IENvbW11
-bmljYXRpb24gRVYgUm9vdENBMTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoC
-ggEBALx/7FebJOD+nLpCeamIivqA4PUHKUPqjgo0No0c+qe1OXj/l3X3L+SqawSE
-RMqm4miO/VVQYg+kcQ7OBzgtQoVQrTyWb4vVog7P3kmJPdZkLjjlHmy1V4qe70gO
-zXppFodEtZDkBp2uoQSXWHnvIEqCa4wiv+wfD+mEce3xDuS4GBPMVjZd0ZoeUWs5
-bmB2iDQL87PRsJ3KYeJkHcFGB7hj3R4zZbOOCVVSPbW9/wfrrWFVGCypaZhKqkDF
-MxRldAD5kd6vA0jFQFTcD4SQaCDFkpbcLuUCRarAX1T4bepJz11sS6/vmsJWXMY1
-VkJqMF/Cq/biPT+zyRGPMUzXn0kCAwEAAaNCMEAwHQYDVR0OBBYEFDVK9U2vP9eC
-OKyrcWUXdYydVZPmMA4GA1UdDwEB/wQEAwIBBjAPBgNVHRMBAf8EBTADAQH/MA0G
-CSqGSIb3DQEBBQUAA4IBAQCoh+ns+EBnXcPBZsdAS5f8hxOQWsTvoMpfi7ent/HW
-tWS3irO4G8za+6xmiEHO6Pzk2x6Ipu0nUBsCMCRGef4Eh3CXQHPRwMFXGZpppSeZ
-q51ihPZRwSzJIxXYKLerJRO1RuGGAv8mjMSIkh1W/hln8lXkgKNrnKt34VFxDSDb
-EJrbvXZ5B3eZKK2aXtqxT0QsNY6llsf9g/BYxnnWmHyojf6GPgcWkuF75x3sM3Z+
-Qi5KhfmRiWiEA4Glm5q+4zfFVKtWOxgtQaQM+ELbmaDgcm+7XeEWT1MKZPlO9L9O
-VL14bIjqv5wTJMJwaaJ/D8g8rQjJsJhAoyrniIPtd490
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIIDdzCCAl+gAwIBAgIBADANBgkqhkiG9w0BAQsFADBdMQswCQYDVQQGEwJKUDEl
-MCMGA1UEChMcU0VDT00gVHJ1c3QgU3lzdGVtcyBDTy4sTFRELjEnMCUGA1UECxMe
-U2VjdXJpdHkgQ29tbXVuaWNhdGlvbiBSb290Q0EyMB4XDTA5MDUyOTA1MDAzOVoX
-DTI5MDUyOTA1MDAzOVowXTELMAkGA1UEBhMCSlAxJTAjBgNVBAoTHFNFQ09NIFRy
-dXN0IFN5c3RlbXMgQ08uLExURC4xJzAlBgNVBAsTHlNlY3VyaXR5IENvbW11bmlj
-YXRpb24gUm9vdENBMjCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBANAV
-OVKxUrO6xVmCxF1SrjpDZYBLx/KWvNs2l9amZIyoXvDjChz335c9S672XewhtUGr
-zbl+dp+++T42NKA7wfYxEUV0kz1XgMX5iZnK5atq1LXaQZAQwdbWQonCv/Q4EpVM
-VAX3NuRFg3sUZdbcDE3R3n4MqzvEFb46VqZab3ZpUql6ucjrappdUtAtCms1FgkQ
-hNBqyjoGADdH5H5XTz+L62e4iKrFvlNVspHEfbmwhRkGeC7bYRr6hfVKkaHnFtWO
-ojnflLhwHyg/i/xAXmODPIMqGplrz95Zajv8bxbXH/1KEOtOghY6rCcMU/Gt1SSw
-awNQwS08Ft1ENCcadfsCAwEAAaNCMEAwHQYDVR0OBBYEFAqFqXdlBZh8QIH4D5cs
-OPEK7DzPMA4GA1UdDwEB/wQEAwIBBjAPBgNVHRMBAf8EBTADAQH/MA0GCSqGSIb3
-DQEBCwUAA4IBAQBMOqNErLlFsceTfsgLCkLfZOoc7llsCLqJX2rKSpWeeo8HxdpF
-coJxDjrSzG+ntKEju/Ykn8sX/oymzsLS28yN/HH8AynBbF0zX2S2ZTuJbxh2ePXc
-okgfGT+Ok+vx+hfuzU7jBBJV1uXk3fs+BXziHV7Gp7yXT2g69ekuCkO2r1dcYmh8
-t/2jioSgrGK+KwmHNPBqAbubKVY8/gA3zyNs8U6qtnRGEmyR7jTV7JqR50S+kDFy
-1UkC9gLl9B/rfNmWVan/7Ir5mUf/NVoCqgTLiluHcSmRvaS0eg29mvVXIwAHIRc/
-SjnRBUkLp7Y3gaVdjKozXoEofKd9J+sAro03
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIIDWjCCAkKgAwIBAgIBADANBgkqhkiG9w0BAQUFADBQMQswCQYDVQQGEwJKUDEY
-MBYGA1UEChMPU0VDT00gVHJ1c3QubmV0MScwJQYDVQQLEx5TZWN1cml0eSBDb21t
-dW5pY2F0aW9uIFJvb3RDQTEwHhcNMDMwOTMwMDQyMDQ5WhcNMjMwOTMwMDQyMDQ5
-WjBQMQswCQYDVQQGEwJKUDEYMBYGA1UEChMPU0VDT00gVHJ1c3QubmV0MScwJQYD
-VQQLEx5TZWN1cml0eSBDb21tdW5pY2F0aW9uIFJvb3RDQTEwggEiMA0GCSqGSIb3
-DQEBAQUAA4IBDwAwggEKAoIBAQCzs/5/022x7xZ8V6UMbXaKL0u/ZPtM7orw8yl8
-9f/uKuDp6bpbZCKamm8sOiZpUQWZJtzVHGpxxpp9Hp3dfGzGjGdnSj74cbAZJ6kJ
-DKaVv0uMDPpVmDvY6CKhS3E4eayXkmmziX7qIWgGmBSWh9JhNrxtJ1aeV+7AwFb9
-Ms+k2Y7CI9eNqPPYJayX5HA49LY6tJ07lyZDo6G8SVlyTCMwhwFY9k6+HGhWZq/N
-QV3Is00qVUarH9oe4kA92819uZKAnDfdDJZkndwi92SL32HeFZRSFaB9UslLqCHJ
-xrHty8OVYNEP8Ktw+N/LTX7s1vqr2b1/VPKl6Xn62dZ2JChzAgMBAAGjPzA9MB0G
-A1UdDgQWBBSgc0mZaNyFW2XjmygvV5+9M7wHSDALBgNVHQ8EBAMCAQYwDwYDVR0T
-AQH/BAUwAwEB/zANBgkqhkiG9w0BAQUFAAOCAQEAaECpqLvkT115swW1F7NgE+vG
-kl3g0dNq/vu+m22/xwVtWSDEHPC32oRYAmP6SBbvT6UL90qY8j+eG61Ha2POCEfr
-Uj94nK9NrvjVT8+amCoQQTlSxN3Zmw7vkwGusi7KaEIkQmywszo+zenaSMQVy+n5
-Bw+SUEmK3TGXX8npN6o7WWWXlDLJs58+OmJYxUmtYg5xpTKqL8aJdkNAExNnPaJU
-JRDL8Try2frbSVa7pv6nQTXD4IhhyYjH3zYQIphZ6rBK+1YWc26sTfcioU+tHXot
-RSflMMFe8toTyyVCUZVHA4xsIcx0Qu1T/zOLjw9XARYvz6buyXAiFL39vmwLAw==
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIIDIDCCAgigAwIBAgIBHTANBgkqhkiG9w0BAQUFADA5MQswCQYDVQQGEwJGSTEP
-MA0GA1UEChMGU29uZXJhMRkwFwYDVQQDExBTb25lcmEgQ2xhc3MyIENBMB4XDTAx
-MDQwNjA3Mjk0MFoXDTIxMDQwNjA3Mjk0MFowOTELMAkGA1UEBhMCRkkxDzANBgNV
-BAoTBlNvbmVyYTEZMBcGA1UEAxMQU29uZXJhIENsYXNzMiBDQTCCASIwDQYJKoZI
-hvcNAQEBBQADggEPADCCAQoCggEBAJAXSjWdyvANlsdE+hY3/Ei9vX+ALTU74W+o
-Z6m/AxxNjG8yR9VBaKQTBME1DJqEQ/xcHf+Js+gXGM2RX/uJ4+q/Tl18GybTdXnt
-5oTjV+WtKcT0OijnpXuENmmz/V52vaMtmdOQTiMofRhj8VQ7Jp12W5dCsv+u8E7s
-3TmVToMGf+dJQMjFAbJUWmYdPfz56TwKnoG4cPABi+QjVHzIrviQHgCWctRUz2Ej
-vOr7nQKV0ba5cTppCD8PtOFCx4j1P5iop7oc4HFx71hXgVB6XGt0Rg6DA5jDjqhu
-8nYybieDwnPz3BjotJPqdURrBGAgcVeHnfO+oJAjPYok4doh28MCAwEAAaMzMDEw
-DwYDVR0TAQH/BAUwAwEB/zARBgNVHQ4ECgQISqCqWITTXjwwCwYDVR0PBAQDAgEG
-MA0GCSqGSIb3DQEBBQUAA4IBAQBazof5FnIVV0sd2ZvnoiYw7JNn39Yt0jSv9zil
-zqsWuasvfDXLrNAPtEwr/IDva4yRXzZ299uzGxnq9LIR/WFxRL8oszodv7ND6J+/
-3DEIcbCdjdY0RzKQxmUk96BKfARzjzlvF4xytb1LyHr4e4PDKE6cCepnP7JnBBvD
-FNr450kkkdAdavphOe9r5yF1BgfYErQhIHBCcYHaPJo2vqZbDWpsmh+Re/n570K6
-Tk6ezAyNlNzZRZxe7EJQY670XcSxEtzKO6gunRRaBXW37Ndj4ro1tgQIkejanZz2
-ZrUYrAqmVCY0M9IbwdR/GjqOC6oybtv8TyWf2TLHllpwrN9M
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIIFcDCCA1igAwIBAgIEAJiWjTANBgkqhkiG9w0BAQsFADBYMQswCQYDVQQGEwJO
-TDEeMBwGA1UECgwVU3RhYXQgZGVyIE5lZGVybGFuZGVuMSkwJwYDVQQDDCBTdGFh
-dCBkZXIgTmVkZXJsYW5kZW4gRVYgUm9vdCBDQTAeFw0xMDEyMDgxMTE5MjlaFw0y
-MjEyMDgxMTEwMjhaMFgxCzAJBgNVBAYTAk5MMR4wHAYDVQQKDBVTdGFhdCBkZXIg
-TmVkZXJsYW5kZW4xKTAnBgNVBAMMIFN0YWF0IGRlciBOZWRlcmxhbmRlbiBFViBS
-b290IENBMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEA48d+ifkkSzrS
-M4M1LGns3Amk41GoJSt5uAg94JG6hIXGhaTK5skuU6TJJB79VWZxXSzFYGgEt9nC
-UiY4iKTWO0Cmws0/zZiTs1QUWJZV1VD+hq2kY39ch/aO5ieSZxeSAgMs3NZmdO3d
-Z//BYY1jTw+bbRcwJu+r0h8QoPnFfxZpgQNH7R5ojXKhTbImxrpsX23Wr9GxE46p
-rfNeaXUmGD5BKyF/7otdBwadQ8QpCiv8Kj6GyzyDOvnJDdrFmeK8eEEzduG/L13l
-pJhQDBXd4Pqcfzho0LKmeqfRMb1+ilgnQ7O6M5HTp5gVXJrm0w912fxBmJc+qiXb
-j5IusHsMX/FjqTf5m3VpTCgmJdrV8hJwRVXj33NeN/UhbJCONVrJ0yPr08C+eKxC
-KFhmpUZtcALXEPlLVPxdhkqHz3/KRawRWrUgUY0viEeXOcDPusBCAUCZSCELa6fS
-/ZbV0b5GnUngC6agIk440ME8MLxwjyx1zNDFjFE7PZQIZCZhfbnDZY8UnCHQqv0X
-cgOPvZuM5l5Tnrmd74K74bzickFbIZTTRTeU0d8JOV3nI6qaHcptqAqGhYqCvkIH
-1vI4gnPah1vlPNOePqc7nvQDs/nxfRN0Av+7oeX6AHkcpmZBiFxgV6YuCcS6/ZrP
-px9Aw7vMWgpVSzs4dlG4Y4uElBbmVvMCAwEAAaNCMEAwDwYDVR0TAQH/BAUwAwEB
-/zAOBgNVHQ8BAf8EBAMCAQYwHQYDVR0OBBYEFP6rAJCYniT8qcwaivsnuL8wbqg7
-MA0GCSqGSIb3DQEBCwUAA4ICAQDPdyxuVr5Os7aEAJSrR8kN0nbHhp8dB9O2tLsI
-eK9p0gtJ3jPFrK3CiAJ9Brc1AsFgyb/E6JTe1NOpEyVa/m6irn0F3H3zbPB+po3u
-2dfOWBfoqSmuc0iH55vKbimhZF8ZE/euBhD/UcabTVUlT5OZEAFTdfETzsemQUHS
-v4ilf0X8rLiltTMMgsT7B/Zq5SWEXwbKwYY5EdtYzXc7LMJMD16a4/CrPmEbUCTC
-wPTxGfARKbalGAKb12NMcIxHowNDXLldRqANb/9Zjr7dn3LDWyvfjFvO5QxGbJKy
-CqNMVEIYFRIYvdr8unRu/8G2oGTYqV9Vrp9canaW2HNnh/tNf1zuacpzEPuKqf2e
-vTY4SUmH9A4U8OmHuD+nT3pajnnUk+S7aFKErGzp85hwVXIy+TSrK0m1zSBi5Dp6
-Z2Orltxtrpfs/J92VoguZs9btsmksNcFuuEnL5O7Jiqik7Ab846+HUCjuTaPPoIa
-Gl6I6lD4WeKDRikL40Rc4ZW2aZCaFG+XroHPaO+Zmr615+F/+PoTRxZMzG0IQOeL
-eG9QgkRQP2YGiqtDhFZKDyAthg710tvSeopLzaXoTvFeJiUBWSOgftL2fiFX1ye8
-FVdMpEbB4IMeDExNH08GGeL5qPQ6gqGyeUN51q1veieQA6TqJIc/2b3Z6fJfUEkc
-7uzXLg==
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIIDujCCAqKgAwIBAgIEAJiWijANBgkqhkiG9w0BAQUFADBVMQswCQYDVQQGEwJO
-TDEeMBwGA1UEChMVU3RhYXQgZGVyIE5lZGVybGFuZGVuMSYwJAYDVQQDEx1TdGFh
-dCBkZXIgTmVkZXJsYW5kZW4gUm9vdCBDQTAeFw0wMjEyMTcwOTIzNDlaFw0xNTEy
-MTYwOTE1MzhaMFUxCzAJBgNVBAYTAk5MMR4wHAYDVQQKExVTdGFhdCBkZXIgTmVk
-ZXJsYW5kZW4xJjAkBgNVBAMTHVN0YWF0IGRlciBOZWRlcmxhbmRlbiBSb290IENB
-MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAmNK1URF6gaYUmHFtvszn
-ExvWJw56s2oYHLZhWtVhCb/ekBPHZ+7d89rFDBKeNVU+LCeIQGv33N0iYfXCxw71
-9tV2U02PjLwYdjeFnejKScfST5gTCaI+Ioicf9byEGW07l8Y1Rfj+MX94p2i71MO
-hXeiD+EwR+4A5zN9RGcaC1Hoi6CeUJhoNFIfLm0B8mBF8jHrqTFoKbt6QZ7GGX+U
-tFE5A3+y3qcym7RHjm+0Sq7lr7HcsBthvJly3uSJt3omXdozSVtSnA71iq3DuD3o
-BmrC1SoLbHuEvVYFy4ZlkuxEK7COudxwC0barbxjiDn622r+I/q85Ej0ZytqERAh
-SQIDAQABo4GRMIGOMAwGA1UdEwQFMAMBAf8wTwYDVR0gBEgwRjBEBgRVHSAAMDww
-OgYIKwYBBQUHAgEWLmh0dHA6Ly93d3cucGtpb3ZlcmhlaWQubmwvcG9saWNpZXMv
-cm9vdC1wb2xpY3kwDgYDVR0PAQH/BAQDAgEGMB0GA1UdDgQWBBSofeu8Y6R0E3QA
-7Jbg0zTBLL9s+DANBgkqhkiG9w0BAQUFAAOCAQEABYSHVXQ2YcG70dTGFagTtJ+k
-/rvuFbQvBgwp8qiSpGEN/KtcCFtREytNwiphyPgJWPwtArI5fZlmgb9uXJVFIGzm
-eafR2Bwp/MIgJ1HI8XxdNGdphREwxgDS1/PTfLbwMVcoEoJz6TMvplW0C5GUR5z6
-u3pCMuiufi3IvKwUv9kP2Vv8wfl6leF9fpb8cbDCTMjfRTTJzg3ynGQI0DvDKcWy
-7ZAEwbEpkcUwb8GpcjPM/l0WFywRaed+/sWDCN+83CI6LiBpIzlWYGeQiy52OfsR
-iJf2fL1LuCAWZwWN4jvBcj+UlTfHXbme2JOhF4//DGYVwSR8MnwDHTuhWEUykw==
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIIFyjCCA7KgAwIBAgIEAJiWjDANBgkqhkiG9w0BAQsFADBaMQswCQYDVQQGEwJO
-TDEeMBwGA1UECgwVU3RhYXQgZGVyIE5lZGVybGFuZGVuMSswKQYDVQQDDCJTdGFh
-dCBkZXIgTmVkZXJsYW5kZW4gUm9vdCBDQSAtIEcyMB4XDTA4MDMyNjExMTgxN1oX
-DTIwMDMyNTExMDMxMFowWjELMAkGA1UEBhMCTkwxHjAcBgNVBAoMFVN0YWF0IGRl
-ciBOZWRlcmxhbmRlbjErMCkGA1UEAwwiU3RhYXQgZGVyIE5lZGVybGFuZGVuIFJv
-b3QgQ0EgLSBHMjCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIBAMVZ5291
-qj5LnLW4rJ4L5PnZyqtdj7U5EILXr1HgO+EASGrP2uEGQxGZqhQlEq0i6ABtQ8Sp
-uOUfiUtnvWFI7/3S4GCI5bkYYCjDdyutsDeqN95kWSpGV+RLufg3fNU254DBtvPU
-Z5uW6M7XxgpT0GtJlvOjCwV3SPcl5XCsMBQgJeN/dVrlSPhOewMHBPqCYYdu8DvE
-pMfQ9XQ+pV0aCPKbJdL2rAQmPlU6Yiile7Iwr/g3wtG61jj99O9JMDeZJiFIhQGp
-5Rbn3JBV3w/oOM2ZNyFPXfUib2rFEhZgF1XyZWampzCROME4HYYEhLoaJXhena/M
-UGDWE4dS7WMfbWV9whUYdMrhfmQpjHLYFhN9C0lK8SgbIHRrxT3dsKpICT0ugpTN
-GmXZK4iambwYfp/ufWZ8Pr2UuIHOzZgweMFvZ9C+X+Bo7d7iscksWXiSqt8rYGPy
-5V6548r6f1CGPqI0GAwJaCgRHOThuVw+R7oyPxjMW4T182t0xHJ04eOLoEq9jWYv
-6q012iDTiIJh8BIitrzQ1aTsr1SIJSQ8p22xcik/Plemf1WvbibG/ufMQFxRRIEK
-eN5KzlW/HdXZt1bv8Hb/C3m1r737qWmRRpdogBQ2HbN/uymYNqUg+oJgYjOk7Na6
-B6duxc8UpufWkjTYgfX8HV2qXB72o007uPc5AgMBAAGjgZcwgZQwDwYDVR0TAQH/
-BAUwAwEB/zBSBgNVHSAESzBJMEcGBFUdIAAwPzA9BggrBgEFBQcCARYxaHR0cDov
-L3d3dy5wa2lvdmVyaGVpZC5ubC9wb2xpY2llcy9yb290LXBvbGljeS1HMjAOBgNV
-HQ8BAf8EBAMCAQYwHQYDVR0OBBYEFJFoMocVHYnitfGsNig0jQt8YojrMA0GCSqG
-SIb3DQEBCwUAA4ICAQCoQUpnKpKBglBu4dfYszk78wIVCVBR7y29JHuIhjv5tLyS
-CZa59sCrI2AGeYwRTlHSeYAz+51IvuxBQ4EffkdAHOV6CMqqi3WtFMTC6GY8ggen
-5ieCWxjmD27ZUD6KQhgpxrRW/FYQoAUXvQwjf/ST7ZwaUb7dRUG/kSS0H4zpX897
-IZmflZ85OkYcbPnNe5yQzSipx6lVu6xiNGI1E0sUOlWDuYaNkqbG9AclVMwWVxJK
-gnjIFNkXgiYtXSAfea7+1HAWFpWD2DU5/1JddRwWxRNVz0fMdWVSSt7wsKfkCpYL
-+63C4iWEst3kvX5ZbJvw8NjnyvLplzh+ib7M+zkXYT9y2zqR2GUBGR2tUKRXCnxL
-vJxxcypFURmFzI79R6d0lR2o0a9OF7FpJsKqeFdbxU2n5Z4FF5TKsl+gSRiNNOkm
-bEgeqmiSBeGCc1qb3AdbCG19ndeNIdn8FCCqwkXfP+cAslHkwvgFuXkajDTznlvk
-N1trSt8sV4pAWja63XVECDdCcAz+3F4hoKOKwJCcaNpQ5kUQR3i2TtJlycM33+FC
-Y7BXN0Ute4qcvwXqZVUz9zkQxSgqIXobisQk+T8VyJoVIPVVYpbtbZNQvOSqeK3Z
-ywplh6ZmwcSBo3c6WB4L7oOLnR7SUqTMHW+wmG2UMbX4cQrcufx9MmDm66+KAQ==
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIIFdDCCA1ygAwIBAgIEAJiiOTANBgkqhkiG9w0BAQsFADBaMQswCQYDVQQGEwJO
-TDEeMBwGA1UECgwVU3RhYXQgZGVyIE5lZGVybGFuZGVuMSswKQYDVQQDDCJTdGFh
-dCBkZXIgTmVkZXJsYW5kZW4gUm9vdCBDQSAtIEczMB4XDTEzMTExNDExMjg0MloX
-DTI4MTExMzIzMDAwMFowWjELMAkGA1UEBhMCTkwxHjAcBgNVBAoMFVN0YWF0IGRl
-ciBOZWRlcmxhbmRlbjErMCkGA1UEAwwiU3RhYXQgZGVyIE5lZGVybGFuZGVuIFJv
-b3QgQ0EgLSBHMzCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIBAL4yolQP
-cPssXFnrbMSkUeiFKrPMSjTysF/zDsccPVMeiAho2G89rcKezIJnByeHaHE6n3WW
-IkYFsO2tx1ueKt6c/DrGlaf1F2cY5y9JCAxcz+bMNO14+1Cx3Gsy8KL+tjzk7FqX
-xz8ecAgwoNzFs21v0IJyEavSgWhZghe3eJJg+szeP4TrjTgzkApyI/o1zCZxMdFy
-KJLZWyNtZrVtB0LrpjPOktvA9mxjeM3KTj215VKb8b475lRgsGYeCasH/lSJEULR
-9yS6YHgamPfJEf0WwTUaVHXvQ9Plrk7O53vDxk5hUUurmkVLoR9BvUhTFXFkC4az
-5S6+zqQbwSmEorXLCCN2QyIkHxcE1G6cxvx/K2Ya7Irl1s9N9WMJtxU51nus6+N8
-6U78dULI7ViVDAZCopz35HCz33JvWjdAidiFpNfxC95DGdRKWCyMijmev4SH8RY7
-Ngzp07TKbBlBUgmhHbBqv4LvcFEhMtwFdozL92TkA1CvjJFnq8Xy7ljY3r735zHP
-bMk7ccHViLVlvMDoFxcHErVc0qsgk7TmgoNwNsXNo42ti+yjwUOH5kPiNL6VizXt
-BznaqB16nzaeErAMZRKQFWDZJkBE41ZgpRDUajz9QdwOWke275dhdU/Z/seyHdTt
-XUmzqWrLZoQT1Vyg3N9udwbRcXXIV2+vD3dbAgMBAAGjQjBAMA8GA1UdEwEB/wQF
-MAMBAf8wDgYDVR0PAQH/BAQDAgEGMB0GA1UdDgQWBBRUrfrHkleuyjWcLhL75Lpd
-INyUVzANBgkqhkiG9w0BAQsFAAOCAgEAMJmdBTLIXg47mAE6iqTnB/d6+Oea31BD
-U5cqPco8R5gu4RV78ZLzYdqQJRZlwJ9UXQ4DO1t3ApyEtg2YXzTdO2PCwyiBwpwp
-LiniyMMB8jPqKqrMCQj3ZWfGzd/TtiunvczRDnBfuCPRy5FOCvTIeuXZYzbB1N/8
-Ipf3YF3qKS9Ysr1YvY2WTxB1v0h7PVGHoTx0IsL8B3+A3MSs/mrBcDCw6Y5p4ixp
-gZQJut3+TcCDjJRYwEYgr5wfAvg1VUkvRtTA8KCWAg8zxXHzniN9lLf9OtMJgwYh
-/WA9rjLA0u6NpvDntIJ8CsxwyXmA+P5M9zWEGYox+wrZ13+b8KKaa8MFSu1BYBQw
-0aoRQm7TIwIEC8Zl3d1Sd9qBa7Ko+gE4uZbqKmxnl4mUnrzhVNXkanjvSr0rmj1A
-fsbAddJu+2gw7OyLnflJNZoaLNmzlTnVHpL3prllL+U9bTpITAjc5CgSKL59NVzq
-4BZ+Extq1z7XnvwtdbLBFNUjA9tbbws+eC8N3jONFrdI54OagQ97wUNNVQQXOEpR
-1VmiiXTTn74eS9fGbbeIJG9gkaSChVtWQbzQRKtqE77RLFi3EjNYsjdj3BP1lB0/
-QFH1T/U67cjF68IeHRaVesd+QnGTbksVtzDfqu1XhUisHWrdOWnk4Xl4vs4Fv6EM
-94B7IWcnMFk=
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIIEDzCCAvegAwIBAgIBADANBgkqhkiG9w0BAQUFADBoMQswCQYDVQQGEwJVUzEl
-MCMGA1UEChMcU3RhcmZpZWxkIFRlY2hub2xvZ2llcywgSW5jLjEyMDAGA1UECxMp
-U3RhcmZpZWxkIENsYXNzIDIgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkwHhcNMDQw
-NjI5MTczOTE2WhcNMzQwNjI5MTczOTE2WjBoMQswCQYDVQQGEwJVUzElMCMGA1UE
-ChMcU3RhcmZpZWxkIFRlY2hub2xvZ2llcywgSW5jLjEyMDAGA1UECxMpU3RhcmZp
-ZWxkIENsYXNzIDIgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkwggEgMA0GCSqGSIb3
-DQEBAQUAA4IBDQAwggEIAoIBAQC3Msj+6XGmBIWtDBFk385N78gDGIc/oav7PKaf
-8MOh2tTYbitTkPskpD6E8J7oX+zlJ0T1KKY/e97gKvDIr1MvnsoFAZMej2YcOadN
-+lq2cwQlZut3f+dZxkqZJRRU6ybH838Z1TBwj6+wRir/resp7defqgSHo9T5iaU0
-X9tDkYI22WY8sbi5gv2cOj4QyDvvBmVmepsZGD3/cVE8MC5fvj13c7JdBmzDI1aa
-K4UmkhynArPkPw2vCHmCuDY96pzTNbO8acr1zJ3o/WSNF4Azbl5KXZnJHoe0nRrA
-1W4TNSNe35tfPe/W93bC6j67eA0cQmdrBNj41tpvi/JEoAGrAgEDo4HFMIHCMB0G
-A1UdDgQWBBS/X7fRzt0fhvRbVazc1xDCDqmI5zCBkgYDVR0jBIGKMIGHgBS/X7fR
-zt0fhvRbVazc1xDCDqmI56FspGowaDELMAkGA1UEBhMCVVMxJTAjBgNVBAoTHFN0
-YXJmaWVsZCBUZWNobm9sb2dpZXMsIEluYy4xMjAwBgNVBAsTKVN0YXJmaWVsZCBD
-bGFzcyAyIENlcnRpZmljYXRpb24gQXV0aG9yaXR5ggEAMAwGA1UdEwQFMAMBAf8w
-DQYJKoZIhvcNAQEFBQADggEBAAWdP4id0ckaVaGsafPzWdqbAYcaT1epoXkJKtv3
-L7IezMdeatiDh6GX70k1PncGQVhiv45YuApnP+yz3SFmH8lU+nLMPUxA2IGvd56D
-eruix/U0F47ZEUD0/CwqTRV/p2JdLiXTAAsgGh1o+Re49L2L7ShZ3U0WixeDyLJl
-xy16paq8U4Zt3VekyvggQQto8PT7dL5WXXp59fkdheMtlb71cZBDzI0fmgAKhynp
-VSJYACPq4xJDKVtHCN2MQWplBqjlIapBtJUhlbl90TSrE9atvNziPTnNvT51cKEY
-WQPJIrSPnNVeKtelttQKbfi3QBFGmh95DmK/D5fs4C8fF5Q=
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIID3TCCAsWgAwIBAgIBADANBgkqhkiG9w0BAQsFADCBjzELMAkGA1UEBhMCVVMx
-EDAOBgNVBAgTB0FyaXpvbmExEzARBgNVBAcTClNjb3R0c2RhbGUxJTAjBgNVBAoT
-HFN0YXJmaWVsZCBUZWNobm9sb2dpZXMsIEluYy4xMjAwBgNVBAMTKVN0YXJmaWVs
-ZCBSb290IENlcnRpZmljYXRlIEF1dGhvcml0eSAtIEcyMB4XDTA5MDkwMTAwMDAw
-MFoXDTM3MTIzMTIzNTk1OVowgY8xCzAJBgNVBAYTAlVTMRAwDgYDVQQIEwdBcml6
-b25hMRMwEQYDVQQHEwpTY290dHNkYWxlMSUwIwYDVQQKExxTdGFyZmllbGQgVGVj
-aG5vbG9naWVzLCBJbmMuMTIwMAYDVQQDEylTdGFyZmllbGQgUm9vdCBDZXJ0aWZp
-Y2F0ZSBBdXRob3JpdHkgLSBHMjCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoC
-ggEBAL3twQP89o/8ArFvW59I2Z154qK3A2FWGMNHttfKPTUuiUP3oWmb3ooa/RMg
-nLRJdzIpVv257IzdIvpy3Cdhl+72WoTsbhm5iSzchFvVdPtrX8WJpRBSiUZV9Lh1
-HOZ/5FSuS/hVclcCGfgXcVnrHigHdMWdSL5stPSksPNkN3mSwOxGXn/hbVNMYq/N
-Hwtjuzqd+/x5AJhhdM8mgkBj87JyahkNmcrUDnXMN/uLicFZ8WJ/X7NfZTD4p7dN
-dloedl40wOiWVpmKs/B/pM293DIxfJHP4F8R+GuqSVzRmZTRouNjWwl2tVZi4Ut0
-HZbUJtQIBFnQmA4O5t78w+wfkPECAwEAAaNCMEAwDwYDVR0TAQH/BAUwAwEB/zAO
-BgNVHQ8BAf8EBAMCAQYwHQYDVR0OBBYEFHwMMh+n2TB/xH1oo2Kooc6rB1snMA0G
-CSqGSIb3DQEBCwUAA4IBAQARWfolTwNvlJk7mh+ChTnUdgWUXuEok21iXQnCoKjU
-sHU48TRqneSfioYmUeYs0cYtbpUgSpIB7LiKZ3sx4mcujJUDJi5DnUox9g61DLu3
-4jd/IroAow57UvtruzvE03lRTs2Q9GcHGcg8RnoNAX3FWOdt5oUwF5okxBDgBPfg
-8n/Uqgr/Qh037ZTlZFkSIHc40zI+OIF1lnP6aI+xy84fxez6nH7PfrHxBy22/L/K
-pL/QlwVKvOoYKAKQvVR4CSFx09F9HdkWsKlhPdAKACL8x3vLCWRFCztAgfd9fDL1
-mMpYjn0q7pBZc2T5NnReJaH1ZgUufzkVqSr7UIuOhWn0
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIID7zCCAtegAwIBAgIBADANBgkqhkiG9w0BAQsFADCBmDELMAkGA1UEBhMCVVMx
-EDAOBgNVBAgTB0FyaXpvbmExEzARBgNVBAcTClNjb3R0c2RhbGUxJTAjBgNVBAoT
-HFN0YXJmaWVsZCBUZWNobm9sb2dpZXMsIEluYy4xOzA5BgNVBAMTMlN0YXJmaWVs
-ZCBTZXJ2aWNlcyBSb290IENlcnRpZmljYXRlIEF1dGhvcml0eSAtIEcyMB4XDTA5
-MDkwMTAwMDAwMFoXDTM3MTIzMTIzNTk1OVowgZgxCzAJBgNVBAYTAlVTMRAwDgYD
-VQQIEwdBcml6b25hMRMwEQYDVQQHEwpTY290dHNkYWxlMSUwIwYDVQQKExxTdGFy
-ZmllbGQgVGVjaG5vbG9naWVzLCBJbmMuMTswOQYDVQQDEzJTdGFyZmllbGQgU2Vy
-dmljZXMgUm9vdCBDZXJ0aWZpY2F0ZSBBdXRob3JpdHkgLSBHMjCCASIwDQYJKoZI
-hvcNAQEBBQADggEPADCCAQoCggEBANUMOsQq+U7i9b4Zl1+OiFOxHz/Lz58gE20p
-OsgPfTz3a3Y4Y9k2YKibXlwAgLIvWX/2h/klQ4bnaRtSmpDhcePYLQ1Ob/bISdm2
-8xpWriu2dBTrz/sm4xq6HZYuajtYlIlHVv8loJNwU4PahHQUw2eeBGg6345AWh1K
-Ts9DkTvnVtYAcMtS7nt9rjrnvDH5RfbCYM8TWQIrgMw0R9+53pBlbQLPLJGmpufe
-hRhJfGZOozptqbXuNC66DQO4M99H67FrjSXZm86B0UVGMpZwh94CDklDhbZsc7tk
-6mFBrMnUVN+HL8cisibMn1lUaJ/8viovxFUcdUBgF4UCVTmLfwUCAwEAAaNCMEAw
-DwYDVR0TAQH/BAUwAwEB/zAOBgNVHQ8BAf8EBAMCAQYwHQYDVR0OBBYEFJxfAN+q
-AdcwKziIorhtSpzyEZGDMA0GCSqGSIb3DQEBCwUAA4IBAQBLNqaEd2ndOxmfZyMI
-bw5hyf2E3F/YNoHN2BtBLZ9g3ccaaNnRbobhiCPPE95Dz+I0swSdHynVv/heyNXB
-ve6SbzJ08pGCL72CQnqtKrcgfU28elUSwhXqvfdqlS5sdJ/PHLTyxQGjhdByPq1z
-qwubdQxtRbeOlKyWN7Wg0I8VRw7j6IPdj/3vQQF3zCepYoUz8jcI73HPdwbeyBkd
-iEDPfUYd/x7H4c7/I9vG+o1VTqkC50cRRj70/b17KSa7qWFiNyi2LSr2EIZkyXCn
-0q23KXB56jzaYyWf/Wi3MOxw+3WKt21gZ7IeyLnp2KhvAotnDU0mV3HaIPzBSlCN
-sSi6
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIIHyTCCBbGgAwIBAgIBATANBgkqhkiG9w0BAQUFADB9MQswCQYDVQQGEwJJTDEW
-MBQGA1UEChMNU3RhcnRDb20gTHRkLjErMCkGA1UECxMiU2VjdXJlIERpZ2l0YWwg
-Q2VydGlmaWNhdGUgU2lnbmluZzEpMCcGA1UEAxMgU3RhcnRDb20gQ2VydGlmaWNh
-dGlvbiBBdXRob3JpdHkwHhcNMDYwOTE3MTk0NjM2WhcNMzYwOTE3MTk0NjM2WjB9
-MQswCQYDVQQGEwJJTDEWMBQGA1UEChMNU3RhcnRDb20gTHRkLjErMCkGA1UECxMi
-U2VjdXJlIERpZ2l0YWwgQ2VydGlmaWNhdGUgU2lnbmluZzEpMCcGA1UEAxMgU3Rh
-cnRDb20gQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkwggIiMA0GCSqGSIb3DQEBAQUA
-A4ICDwAwggIKAoICAQDBiNsJvGxGfHiflXu1M5DycmLWwTYgIiRezul38kMKogZk
-pMyONvg45iPwbm2xPN1yo4UcodM9tDMr0y+v/uqwQVlntsQGfQqedIXWeUyAN3rf
-OQVSWff0G0ZDpNKFhdLDcfN1YjS6LIp/Ho/u7TTQEceWzVI9ujPW3U3eCztKS5/C
-Ji/6tRYccjV3yjxd5srhJosaNnZcAdt0FCX+7bWgiA/deMotHweXMAEtcnn6RtYT
-Kqi5pquDSR3l8u/d5AGOGAqPY1MWhWKpDhk6zLVmpsJrdAfkK+F2PrRt2PZE4XNi
-HzvEvqBTViVsUQn3qqvKv3b9bZvzndu/PWa8DFaqr5hIlTpL36dYUNk4dalb6kMM
-Av+Z6+hsTXBbKWWc3apdzK8BMewM69KN6Oqce+Zu9ydmDBpI125C4z/eIT574Q1w
-+2OqqGwaVLRcJXrJosmLFqa7LH4XXgVNWG4SHQHuEhANxjJ/GP/89PrNbpHoNkm+
-Gkhpi8KWTRoSsmkXwQqQ1vp5Iki/untp+HDH+no32NgN0nZPV/+Qt+OR0t3vwmC3
-Zzrd/qqc8NSLf3Iizsafl7b4r4qgEKjZ+xjGtrVcUjyJthkqcwEKDwOzEmDyei+B
-26Nu/yYwl/WL3YlXtq09s68rxbd2AvCl1iuahhQqcvbjM4xdCUsT37uMdBNSSwID
-AQABo4ICUjCCAk4wDAYDVR0TBAUwAwEB/zALBgNVHQ8EBAMCAa4wHQYDVR0OBBYE
-FE4L7xqkQFulF2mHMMo0aEPQQa7yMGQGA1UdHwRdMFswLKAqoCiGJmh0dHA6Ly9j
-ZXJ0LnN0YXJ0Y29tLm9yZy9zZnNjYS1jcmwuY3JsMCugKaAnhiVodHRwOi8vY3Js
-LnN0YXJ0Y29tLm9yZy9zZnNjYS1jcmwuY3JsMIIBXQYDVR0gBIIBVDCCAVAwggFM
-BgsrBgEEAYG1NwEBATCCATswLwYIKwYBBQUHAgEWI2h0dHA6Ly9jZXJ0LnN0YXJ0
-Y29tLm9yZy9wb2xpY3kucGRmMDUGCCsGAQUFBwIBFilodHRwOi8vY2VydC5zdGFy
-dGNvbS5vcmcvaW50ZXJtZWRpYXRlLnBkZjCB0AYIKwYBBQUHAgIwgcMwJxYgU3Rh
-cnQgQ29tbWVyY2lhbCAoU3RhcnRDb20pIEx0ZC4wAwIBARqBl0xpbWl0ZWQgTGlh
-YmlsaXR5LCByZWFkIHRoZSBzZWN0aW9uICpMZWdhbCBMaW1pdGF0aW9ucyogb2Yg
-dGhlIFN0YXJ0Q29tIENlcnRpZmljYXRpb24gQXV0aG9yaXR5IFBvbGljeSBhdmFp
-bGFibGUgYXQgaHR0cDovL2NlcnQuc3RhcnRjb20ub3JnL3BvbGljeS5wZGYwEQYJ
-YIZIAYb4QgEBBAQDAgAHMDgGCWCGSAGG+EIBDQQrFilTdGFydENvbSBGcmVlIFNT
-TCBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eTANBgkqhkiG9w0BAQUFAAOCAgEAFmyZ
-9GYMNPXQhV59CuzaEE44HF7fpiUFS5Eyweg78T3dRAlbB0mKKctmArexmvclmAk8
-jhvh3TaHK0u7aNM5Zj2gJsfyOZEdUauCe37Vzlrk4gNXcGmXCPleWKYK34wGmkUW
-FjgKXlf2Ysd6AgXmvB618p70qSmD+LIU424oh0TDkBreOKk8rENNZEXO3SipXPJz
-ewT4F+irsfMuXGRuczE6Eri8sxHkfY+BUZo7jYn0TZNmezwD7dOaHZrzZVD1oNB1
-ny+v8OqCQ5j4aZyJecRDjkZy42Q2Eq/3JR44iZB3fsNrarnDy0RLrHiQi+fHLB5L
-EUTINFInzQpdn4XBidUaePKVEFMy3YCEZnXZtWgo+2EuvoSoOMCZEoalHmdkrQYu
-L6lwhceWD3yJZfWOQ1QOq92lgDmUYMA0yZZwLKMS9R9Ie70cfmu3nZD0Ijuu+Pwq
-yvqCUqDvr0tVk+vBtfAii6w0TiYiBKGHLHVKt+V9E9e4DGTANtLJL4YSjCMJwRuC
-O3NJo2pXh5Tl1njFmUNj403gdy3hZZlyaQQaRwnmDwFWJPsfvw55qVguucQJAX6V
-um0ABj6y6koQOdjQK/W/7HW/lwLFCRsI3FU34oH7N4RDYiDK51ZLZer+bMEkkySh
-NOsF/5oirpt9P/FlUQqmMGqz9IgcgA38corog14=
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIIHhzCCBW+gAwIBAgIBLTANBgkqhkiG9w0BAQsFADB9MQswCQYDVQQGEwJJTDEW
-MBQGA1UEChMNU3RhcnRDb20gTHRkLjErMCkGA1UECxMiU2VjdXJlIERpZ2l0YWwg
-Q2VydGlmaWNhdGUgU2lnbmluZzEpMCcGA1UEAxMgU3RhcnRDb20gQ2VydGlmaWNh
-dGlvbiBBdXRob3JpdHkwHhcNMDYwOTE3MTk0NjM3WhcNMzYwOTE3MTk0NjM2WjB9
-MQswCQYDVQQGEwJJTDEWMBQGA1UEChMNU3RhcnRDb20gTHRkLjErMCkGA1UECxMi
-U2VjdXJlIERpZ2l0YWwgQ2VydGlmaWNhdGUgU2lnbmluZzEpMCcGA1UEAxMgU3Rh
-cnRDb20gQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkwggIiMA0GCSqGSIb3DQEBAQUA
-A4ICDwAwggIKAoICAQDBiNsJvGxGfHiflXu1M5DycmLWwTYgIiRezul38kMKogZk
-pMyONvg45iPwbm2xPN1yo4UcodM9tDMr0y+v/uqwQVlntsQGfQqedIXWeUyAN3rf
-OQVSWff0G0ZDpNKFhdLDcfN1YjS6LIp/Ho/u7TTQEceWzVI9ujPW3U3eCztKS5/C
-Ji/6tRYccjV3yjxd5srhJosaNnZcAdt0FCX+7bWgiA/deMotHweXMAEtcnn6RtYT
-Kqi5pquDSR3l8u/d5AGOGAqPY1MWhWKpDhk6zLVmpsJrdAfkK+F2PrRt2PZE4XNi
-HzvEvqBTViVsUQn3qqvKv3b9bZvzndu/PWa8DFaqr5hIlTpL36dYUNk4dalb6kMM
-Av+Z6+hsTXBbKWWc3apdzK8BMewM69KN6Oqce+Zu9ydmDBpI125C4z/eIT574Q1w
-+2OqqGwaVLRcJXrJosmLFqa7LH4XXgVNWG4SHQHuEhANxjJ/GP/89PrNbpHoNkm+
-Gkhpi8KWTRoSsmkXwQqQ1vp5Iki/untp+HDH+no32NgN0nZPV/+Qt+OR0t3vwmC3
-Zzrd/qqc8NSLf3Iizsafl7b4r4qgEKjZ+xjGtrVcUjyJthkqcwEKDwOzEmDyei+B
-26Nu/yYwl/WL3YlXtq09s68rxbd2AvCl1iuahhQqcvbjM4xdCUsT37uMdBNSSwID
-AQABo4ICEDCCAgwwDwYDVR0TAQH/BAUwAwEB/zAOBgNVHQ8BAf8EBAMCAQYwHQYD
-VR0OBBYEFE4L7xqkQFulF2mHMMo0aEPQQa7yMB8GA1UdIwQYMBaAFE4L7xqkQFul
-F2mHMMo0aEPQQa7yMIIBWgYDVR0gBIIBUTCCAU0wggFJBgsrBgEEAYG1NwEBATCC
-ATgwLgYIKwYBBQUHAgEWImh0dHA6Ly93d3cuc3RhcnRzc2wuY29tL3BvbGljeS5w
-ZGYwNAYIKwYBBQUHAgEWKGh0dHA6Ly93d3cuc3RhcnRzc2wuY29tL2ludGVybWVk
-aWF0ZS5wZGYwgc8GCCsGAQUFBwICMIHCMCcWIFN0YXJ0IENvbW1lcmNpYWwgKFN0
-YXJ0Q29tKSBMdGQuMAMCAQEagZZMaW1pdGVkIExpYWJpbGl0eSwgcmVhZCB0aGUg
-c2VjdGlvbiAqTGVnYWwgTGltaXRhdGlvbnMqIG9mIHRoZSBTdGFydENvbSBDZXJ0
-aWZpY2F0aW9uIEF1dGhvcml0eSBQb2xpY3kgYXZhaWxhYmxlIGF0IGh0dHA6Ly93
-d3cuc3RhcnRzc2wuY29tL3BvbGljeS5wZGYwEQYJYIZIAYb4QgEBBAQDAgAHMDgG
-CWCGSAGG+EIBDQQrFilTdGFydENvbSBGcmVlIFNTTCBDZXJ0aWZpY2F0aW9uIEF1
-dGhvcml0eTANBgkqhkiG9w0BAQsFAAOCAgEAjo/n3JR5fPGFf59Jb2vKXfuM/gTF
-wWLRfUKKvFO3lANmMD+x5wqnUCBVJX92ehQN6wQOQOY+2IirByeDqXWmN3PH/UvS
-Ta0XQMhGvjt/UfzDtgUx3M2FIk5xt/JxXrAaxrqTi3iSSoX4eA+D/i+tLPfkpLst
-0OcNOrg+zvZ49q5HJMqjNTbOx8aHmNrs++myziebiMMEofYLWWivydsQD032ZGNc
-pRJvkrKTlMeIFw6Ttn5ii5B/q06f/ON1FE8qMt9bDeD1e5MNq6HPh+GlBEXoPBKl
-CcWw0bdT82AUuoVpaiF8H3VhFyAXe2w7QSlc4axa0c2Mm+tgHRns9+Ww2vl5GKVF
-P0lDV9LdJNUso/2RjSe15esUBppMeyG7Oq0wBhjA2MFrLH9ZXF2RsXAiV+uKa0hK
-1Q8p7MZAwC+ITGgBF3f0JBlPvfrhsiAhS90a2Cl9qrjeVOwhVYBsHvUwyKMQ5bLm
-KhQxw4UtjJixhlpPiVktucf3HMiKf8CdBUrmQk9io20ppB+Fq9vlgcitKj1MXVuE
-JnHEhV5xJMqlG2zYYdMa4FTbzrqpMrUi9nNBCV24F10OD5mQ1kfabwo6YigUZ4LZ
-8dCAWZvLMdibD4x3TrVoivJs9iQOLWxwxXPR3hTQcY+203sC9uO41Alua551hDnm
-fyWl8kgAwKQB2j8=
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIIFYzCCA0ugAwIBAgIBOzANBgkqhkiG9w0BAQsFADBTMQswCQYDVQQGEwJJTDEW
-MBQGA1UEChMNU3RhcnRDb20gTHRkLjEsMCoGA1UEAxMjU3RhcnRDb20gQ2VydGlm
-aWNhdGlvbiBBdXRob3JpdHkgRzIwHhcNMTAwMTAxMDEwMDAxWhcNMzkxMjMxMjM1
-OTAxWjBTMQswCQYDVQQGEwJJTDEWMBQGA1UEChMNU3RhcnRDb20gTHRkLjEsMCoG
-A1UEAxMjU3RhcnRDb20gQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkgRzIwggIiMA0G
-CSqGSIb3DQEBAQUAA4ICDwAwggIKAoICAQC2iTZbB7cgNr2Cu+EWIAOVeq8Oo1XJ
-JZlKxdBWQYeQTSFgpBSHO839sj60ZwNq7eEPS8CRhXBF4EKe3ikj1AENoBB5uNsD
-vfOpL9HG4A/LnooUCri99lZi8cVytjIl2bLzvWXFDSxu1ZJvGIsAQRSCb0AgJnoo
-D/Uefyf3lLE3PbfHkffiAez9lInhzG7TNtYKGXmu1zSCZf98Qru23QumNK9LYP5/
-Q0kGi4xDuFby2X8hQxfqp0iVAXV16iulQ5XqFYSdCI0mblWbq9zSOdIxHWDirMxW
-RST1HFSr7obdljKF+ExP6JV2tgXdNiNnvP8V4so75qbsO+wmETRIjfaAKxojAuuK
-HDp2KntWFhxyKrOq42ClAJ8Em+JvHhRYW6Vsi1g8w7pOOlz34ZYrPu8HvKTlXcxN
-nw3h3Kq74W4a7I/htkxNeXJdFzULHdfBR9qWJODQcqhaX2YtENwvKhOuJv4KHBnM
-0D4LnMgJLvlblnpHnOl68wVQdJVznjAJ85eCXuaPOQgeWeU1FEIT/wCc976qUM/i
-UUjXuG+v+E5+M5iSFGI6dWPPe/regjupuznixL0sAA7IF6wT700ljtizkC+p2il9
-Ha90OrInwMEePnWjFqmveiJdnxMaz6eg6+OGCtP95paV1yPIN93EfKo2rJgaErHg
-TuixO/XWb/Ew1wIDAQABo0IwQDAPBgNVHRMBAf8EBTADAQH/MA4GA1UdDwEB/wQE
-AwIBBjAdBgNVHQ4EFgQUS8W0QGutHLOlHGVuRjaJhwUMDrYwDQYJKoZIhvcNAQEL
-BQADggIBAHNXPyzVlTJ+N9uWkusZXn5T50HsEbZH77Xe7XRcxfGOSeD8bpkTzZ+K
-2s06Ctg6Wgk/XzTQLwPSZh0avZyQN8gMjgdalEVGKua+etqhqaRpEpKwfTbURIfX
-UfEpY9Z1zRbkJ4kd+MIySP3bmdCPX1R0zKxnNBFi2QwKN4fRoxdIjtIXHfbX/dtl
-6/2o1PXWT6RbdejF0mCy2wl+JYt7ulKSnj7oxXehPOBKc2thz4bcQ///If4jXSRK
-9dNtD2IEBVeC2m6kMyV5Sy5UGYvMLD0w6dEG/+gyRr61M3Z3qAFdlsHB1b6uJcDJ
-HgoJIIihDsnzb02CVAAgp9KP5DlUFy6NHrgbuxu9mk47EDTcnIhT76IxW1hPkWLI
-wpqazRVdOKnWvvgTtZ8SafJQYqz7Fzf07rh1Z2AQ+4NQ+US1dZxAF7L+/XldblhY
-XzD8AK6vM8EOTmy6p6ahfzLbOOCxchcKK5HsamMm7YnUeMx0HgX4a/6ManY5Ka5l
-IxKVCCIcl85bBu4M4ru8H0ST9tg4RQUh7eStqxK2A6RCLi3ECToDZ2mEmuFZkIoo
-hdVddLHRDiBYmxOlsGOm7XtH/UVVMKTumtTm4ofvmMkyghEpIrwACjFeLQ/Ajulr
-so8uBtjRkcfGEvRM/TAXw8HaOFvjqermobp573PYtlNXLfbQ4ddI
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIIFujCCA6KgAwIBAgIJALtAHEP1Xk+wMA0GCSqGSIb3DQEBBQUAMEUxCzAJBgNV
-BAYTAkNIMRUwEwYDVQQKEwxTd2lzc1NpZ24gQUcxHzAdBgNVBAMTFlN3aXNzU2ln
-biBHb2xkIENBIC0gRzIwHhcNMDYxMDI1MDgzMDM1WhcNMzYxMDI1MDgzMDM1WjBF
-MQswCQYDVQQGEwJDSDEVMBMGA1UEChMMU3dpc3NTaWduIEFHMR8wHQYDVQQDExZT
-d2lzc1NpZ24gR29sZCBDQSAtIEcyMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIIC
-CgKCAgEAr+TufoskDhJuqVAtFkQ7kpJcyrhdhJJCEyq8ZVeCQD5XJM1QiyUqt2/8
-76LQwB8CJEoTlo8jE+YoWACjR8cGp4QjK7u9lit/VcyLwVcfDmJlD909Vopz2q5+
-bbqBHH5CjCA12UNNhPqE21Is8w4ndwtrvxEvcnifLtg+5hg3Wipy+dpikJKVyh+c
-6bM8K8vzARO/Ws/BtQpgvd21mWRTuKCWs2/iJneRjOBiEAKfNA+k1ZIzUd6+jbqE
-emA8atufK+ze3gE/bk3lUIbLtK/tREDFylqM2tIrfKjuvqblCqoOpd8FUrdVxyJd
-MmqXl2MT28nbeTZ7hTpKxVKJ+STnnXepgv9VHKVxaSvRAiTysybUa9oEVeXBCsdt
-MDeQKuSeFDNeFhdVxVu1yzSJkvGdJo+hB9TGsnhQ2wwMC3wLjEHXuendjIj3o02y
-MszYF9rNt85mndT9Xv+9lz4pded+p2JYryU0pUHHPbwNUMoDAw8IWh+Vc3hiv69y
-FGkOpeUDDniOJihC8AcLYiAQZzlG+qkDzAQ4embvIIO1jEpWjpEA/I5cgt6IoMPi
-aG59je883WX0XaxR7ySArqpWl2/5rX3aYT+YdzylkbYcjCbaZaIJbcHiVOO5ykxM
-gI93e2CaHt+28kgeDrpOVG2Y4OGiGqJ3UM/EY5LsRxmd6+ZrzsECAwEAAaOBrDCB
-qTAOBgNVHQ8BAf8EBAMCAQYwDwYDVR0TAQH/BAUwAwEB/zAdBgNVHQ4EFgQUWyV7
-lqRlUX64OfPAeGZe6Drn8O4wHwYDVR0jBBgwFoAUWyV7lqRlUX64OfPAeGZe6Drn
-8O4wRgYDVR0gBD8wPTA7BglghXQBWQECAQEwLjAsBggrBgEFBQcCARYgaHR0cDov
-L3JlcG9zaXRvcnkuc3dpc3NzaWduLmNvbS8wDQYJKoZIhvcNAQEFBQADggIBACe6
-45R88a7A3hfm5djV9VSwg/S7zV4Fe0+fdWavPOhWfvxyeDgD2StiGwC5+OlgzczO
-UYrHUDFu4Up+GC9pWbY9ZIEr44OE5iKHjn3g7gKZYbge9LgriBIWhMIxkziWMaa5
-O1M/wySTVltpkuzFwbs4AOPsF6m43Md8AYOfMke6UiI0HTJ6CVanfCU2qT1L2sCC
-bwq7EsiHSycR+R4tx5M/nttfJmtS2S6K8RTGRI0Vqbe/vd6mGu6uLftIdxf+u+yv
-GPUqUfA5hJeVbG4bwyvEdGB5JbAKJ9/fXtI5z0V9QkvfsywexcZdylU6oJxpmo/a
-77KwPJ+HbBIrZXAVUjEaJM9vMSNQH4xPjyPDdEFjHFWoFN0+4FFQz/EbMFYOkrCC
-hdiDyyJkvC24JdVUorgG6q2SpCSgwYa1ShNqR88uC1aVVMvOmttqtKay20EIhid3
-92qgQmwLOM7XdVAyksLfKzAiSNDVQTglXaTpXZ/GlHXQRf0wl0OPkKsKx4ZzYEpp
-Ld6leNcG2mqeSz53OiATIgHQv2ieY2BrNU0LbbqhPcCT4H8js1WtciVORvnSFu+w
-ZMEBnunKoGqYDs/YYPIvSbjkQuE4NRb0yG5P94FW6LqjviOvrv1vA+ACOzB2+htt
-Qc8Bsem4yWb02ybzOqR08kkkW8mw0FfB+j564ZfJ
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIIFvTCCA6WgAwIBAgIITxvUL1S7L0swDQYJKoZIhvcNAQEFBQAwRzELMAkGA1UE
-BhMCQ0gxFTATBgNVBAoTDFN3aXNzU2lnbiBBRzEhMB8GA1UEAxMYU3dpc3NTaWdu
-IFNpbHZlciBDQSAtIEcyMB4XDTA2MTAyNTA4MzI0NloXDTM2MTAyNTA4MzI0Nlow
-RzELMAkGA1UEBhMCQ0gxFTATBgNVBAoTDFN3aXNzU2lnbiBBRzEhMB8GA1UEAxMY
-U3dpc3NTaWduIFNpbHZlciBDQSAtIEcyMIICIjANBgkqhkiG9w0BAQEFAAOCAg8A
-MIICCgKCAgEAxPGHf9N4Mfc4yfjDmUO8x/e8N+dOcbpLj6VzHVxumK4DV644N0Mv
-Fz0fyM5oEMF4rhkDKxD6LHmD9ui5aLlV8gREpzn5/ASLHvGiTSf5YXu6t+WiE7br
-YT7QbNHm+/pe7R20nqA1W6GSy/BJkv6FCgU+5tkL4k+73JU3/JHpMjUi0R86TieF
-nbAVlDLaYQ1HTWBCrpJH6INaUFjpiou5XaHc3ZlKHzZnu0jkg7Y360g6rw9njxcH
-6ATK72oxh9TAtvmUcXtnZLi2kUpCe2UuMGoM9ZDulebyzYLs2aFK7PayS+VFheZt
-eJMELpyCbTapxDFkH4aDCyr0NQp4yVXPQbBH6TCfmb5hqAaEuSh6XzjZG6k4sIN/
-c8HDO0gqgg8hm7jMqDXDhBuDsz6+pJVpATqJAHgE2cn0mRmrVn5bi4Y5FZGkECwJ
-MoBgs5PAKrYYC51+jUnyEEp/+dVGLxmSo5mnJqy7jDzmDrxHB9xzUfFwZC8I+bRH
-HTBsROopN4WSaGa8gzj+ezku01DwH/teYLappvonQfGbGHLy9YR0SslnxFSuSGTf
-jNFusB3hB48IHpmccelM2KX3RxIfdNFRnobzwqIjQAtz20um53MGjMGg6cFZrEb6
-5i/4z3GcRm25xBWNOHkDRUjvxF3XCO6HOSKGsg0PWEP3calILv3q1h8CAwEAAaOB
-rDCBqTAOBgNVHQ8BAf8EBAMCAQYwDwYDVR0TAQH/BAUwAwEB/zAdBgNVHQ4EFgQU
-F6DNweRBtjpbO8tFnb0cwpj6hlgwHwYDVR0jBBgwFoAUF6DNweRBtjpbO8tFnb0c
-wpj6hlgwRgYDVR0gBD8wPTA7BglghXQBWQEDAQEwLjAsBggrBgEFBQcCARYgaHR0
-cDovL3JlcG9zaXRvcnkuc3dpc3NzaWduLmNvbS8wDQYJKoZIhvcNAQEFBQADggIB
-AHPGgeAn0i0P4JUw4ppBf1AsX19iYamGamkYDHRJ1l2E6kFSGG9YrVBWIGrGvShp
-WJHckRE1qTodvBqlYJ7YH39FkWnZfrt4csEGDyrOj4VwYaygzQu4OSlWhDJOhrs9
-xCrZ1x9y7v5RoSJBsXECYxqCsGKrXlcSH9/L3XWgwF15kIwb4FDm3jH+mHtwX6WQ
-2K34ArZv02DdQEsixT2tOnqfGhpHkXkzuoLcMmkDlm4fS/Bx/uNncqCxv1yL5PqZ
-IseEuRuNI5c/7SXgz2W79WEE790eslpBIlqhn10s6FvJbakMDHiqYMZWjwFaDGi8
-aRl5xB9+lwW/xekkUV7U1UtT7dkjWjYDZaPBA61BMPNGG4WQr2W11bHkFlt4dR2X
-em1ZqSqPe97Dh4kQmUlzeMg9vVE1dCrV8X5pGyq7O70luJpaPXJhkGaH7gzWTdQR
-dAtq/gsD/KNVV4n+SsuuWxcFyPKNIzFTONItaj+CuY0IavdeQXRuwxF+B6wpYJE/
-OMpXEA29MC/HpeZBoNquBYeaoKRlbEwJDIm6uNO5wJOKMPqN5ZprFQFOZ6raYlY+
-hAhm0sQ2fac+EPyI4NSA5QC9qvNOBqN6avlicuMJT+ubDgEj8Z+7fNzcbBGXJbLy
-tGMU0gYqZ4yD9c7qB9iaah7s5Aq7KkzrCWA5zspi2C5u
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIIF2TCCA8GgAwIBAgIQXAuFXAvnWUHfV8w/f52oNjANBgkqhkiG9w0BAQUFADBk
-MQswCQYDVQQGEwJjaDERMA8GA1UEChMIU3dpc3Njb20xJTAjBgNVBAsTHERpZ2l0
-YWwgQ2VydGlmaWNhdGUgU2VydmljZXMxGzAZBgNVBAMTElN3aXNzY29tIFJvb3Qg
-Q0EgMTAeFw0wNTA4MTgxMjA2MjBaFw0yNTA4MTgyMjA2MjBaMGQxCzAJBgNVBAYT
-AmNoMREwDwYDVQQKEwhTd2lzc2NvbTElMCMGA1UECxMcRGlnaXRhbCBDZXJ0aWZp
-Y2F0ZSBTZXJ2aWNlczEbMBkGA1UEAxMSU3dpc3Njb20gUm9vdCBDQSAxMIICIjAN
-BgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEA0LmwqAzZuz8h+BvVM5OAFmUgdbI9
-m2BtRsiMMW8Xw/qabFbtPMWRV8PNq5ZJkCoZSx6jbVfd8StiKHVFXqrWW/oLJdih
-FvkcxC7mlSpnzNApbjyFNDhhSbEAn9Y6cV9Nbc5fuankiX9qUvrKm/LcqfmdmUc/
-TilftKaNXXsLmREDA/7n29uj/x2lzZAeAR81sH8A25Bvxn570e56eqeqDFdvpG3F
-EzuwpdntMhy0XmeLVNxzh+XTF3xmUHJd1BpYwdnP2IkCb6dJtDZd0KTeByy2dbco
-kdaXvij1mB7qWybJvbCXc9qukSbraMH5ORXWZ0sKbU/Lz7DkQnGMU3nn7uHbHaBu
-HYwadzVcFh4rUx80i9Fs/PJnB3r1re3WmquhsUvhzDdf/X/NTa64H5xD+SpYVUNF
-vJbNcA78yeNmuk6NO4HLFWR7uZToXTNShXEuT46iBhFRyePLoW4xCGQMwtI89Tbo
-19AOeCMgkckkKmUpWyL3Ic6DXqTz3kvTaI9GdVyDCW4pa8RwjPWd1yAv/0bSKzjC
-L3UcPX7ape8eYIVpQtPM+GP+HkM5haa2Y0EQs3MevNP6yn0WR+Kn1dCjigoIlmJW
-bjTb2QK5MHXjBNLnj8KwEUAKrNVxAmKLMb7dxiNYMUJDLXT5xp6mig/p/r+D5kNX
-JLrvRjSq1xIBOO0CAwEAAaOBhjCBgzAOBgNVHQ8BAf8EBAMCAYYwHQYDVR0hBBYw
-FDASBgdghXQBUwABBgdghXQBUwABMBIGA1UdEwEB/wQIMAYBAf8CAQcwHwYDVR0j
-BBgwFoAUAyUv3m+CATpcLNwroWm1Z9SM0/0wHQYDVR0OBBYEFAMlL95vggE6XCzc
-K6FptWfUjNP9MA0GCSqGSIb3DQEBBQUAA4ICAQA1EMvspgQNDQ/NwNurqPKIlwzf
-ky9NfEBWMXrrpA9gzXrzvsMnjgM+pN0S734edAY8PzHyHHuRMSG08NBsl9Tpl7Ik
-Vh5WwzW9iAUPWxAaZOHHgjD5Mq2eUCzneAXQMbFamIp1TpBcahQq4FJHgmDmHtqB
-sfsUC1rxn9KVuj7QG9YVHaO+htXbD8BJZLsuUBlL0iT43R4HVtA4oJVwIHaM190e
-3p9xxCPvgxNcoyQVTSlAPGrEqdi3pkSlDfTgnXceQHAm/NrZNuR55LU/vJtlvrsR
-ls/bxig5OgjOR1tTWsWZ/l2p3e9M1MalrQLmjAcSHm8D0W+go/MpvRLHUKKwf4ip
-mXeascClOS5cfGniLLDqN2qk4Vrh9VDlg++luyqI54zb/W1elxmofmZ1a3Hqv7HH
-b6D0jqTsNFFbjCYDcKF31QESVwA12yPeDooomf2xEG9L/zgtYE4snOtnta1J7ksf
-rK/7DZBaZmBwXarNeNQk7shBoJMBkpxqnvy5JMWzFYJ+vq6VK+uxwNrjAWALXmms
-hFZhvnEX/h0TD/7Gh0Xp/jKgGg0TpJRVcaUWi7rKibCyx/yP2FS1k2Kdzs9Z+z0Y
-zirLNRWCXf9UIltxUvu3yf5gmwBBZPCqKuy2QkPOiWaByIufOVQDJdMWNY6E0F/6
-MBr1mmz0DlP5OlvRHA==
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIIF2TCCA8GgAwIBAgIQHp4o6Ejy5e/DfEoeWhhntjANBgkqhkiG9w0BAQsFADBk
-MQswCQYDVQQGEwJjaDERMA8GA1UEChMIU3dpc3Njb20xJTAjBgNVBAsTHERpZ2l0
-YWwgQ2VydGlmaWNhdGUgU2VydmljZXMxGzAZBgNVBAMTElN3aXNzY29tIFJvb3Qg
-Q0EgMjAeFw0xMTA2MjQwODM4MTRaFw0zMTA2MjUwNzM4MTRaMGQxCzAJBgNVBAYT
-AmNoMREwDwYDVQQKEwhTd2lzc2NvbTElMCMGA1UECxMcRGlnaXRhbCBDZXJ0aWZp
-Y2F0ZSBTZXJ2aWNlczEbMBkGA1UEAxMSU3dpc3Njb20gUm9vdCBDQSAyMIICIjAN
-BgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAlUJOhJ1R5tMJ6HJaI2nbeHCOFvEr
-jw0DzpPMLgAIe6szjPTpQOYXTKueuEcUMncy3SgM3hhLX3af+Dk7/E6J2HzFZ++r
-0rk0X2s682Q2zsKwzxNoysjL67XiPS4h3+os1OD5cJZM/2pYmLcX5BtS5X4HAB1f
-2uY+lQS3aYg5oUFgJWFLlTloYhyxCwWJwDaCFCE/rtuh/bxvHGCGtlOUSbkrRsVP
-ACu/obvLP+DHVxxX6NZp+MEkUp2IVd3Chy50I9AU/SpHWrumnf2U5NGKpV+GY3aF
-y6//SSj8gO1MedK75MDvAe5QQQg1I3ArqRa0jG6F6bYRzzHdUyYb3y1aSgJA/MTA
-tukxGggo5WDDH8SQjhBiYEQN7Aq+VRhxLKX0srwVYv8c474d2h5Xszx+zYIdkeNL
-6yxSNLCK/RJOlrDrcH+eOfdmQrGrrFLadkBXeyq96G4DsguAhYidDMfCd7Camlf0
-uPoTXGiTOmekl9AbmbeGMktg2M7v0Ax/lZ9vh0+Hio5fCHyqW/xavqGRn1V9TrAL
-acywlKinh/LTSlDcX3KwFnUey7QYYpqwpzmqm59m2I2mbJYV4+by+PGDYmy7Velh
-k6M99bFXi08jsJvllGov34zflVEpYKELKeRcVVi3qPyZ7iVNTA6z00yPhOgpD/0Q
-VAKFyPnlw4vP5w8CAwEAAaOBhjCBgzAOBgNVHQ8BAf8EBAMCAYYwHQYDVR0hBBYw
-FDASBgdghXQBUwIBBgdghXQBUwIBMBIGA1UdEwEB/wQIMAYBAf8CAQcwHQYDVR0O
-BBYEFE0mICKJS9PVpAqhb97iEoHF8TwuMB8GA1UdIwQYMBaAFE0mICKJS9PVpAqh
-b97iEoHF8TwuMA0GCSqGSIb3DQEBCwUAA4ICAQAyCrKkG8t9voJXiblqf/P0wS4R
-fbgZPnm3qKhyN2abGu2sEzsOv2LwnN+ee6FTSA5BesogpxcbtnjsQJHzQq0Qw1zv
-/2BZf82Fo4s9SBwlAjxnffUy6S8w5X2lejjQ82YqZh6NM4OKb3xuqFp1mrjX2lhI
-REeoTPpMSQpKwhI3qEAMw8jh0FcNlzKVxzqfl9NX+Ave5XLzo9v/tdhZsnPdTSpx
-srpJ9csc1fV5yJmz/MFMdOO0vSk3FQQoHt5FRnDsr7p4DooqzgB53MBfGWcsa0vv
-aGgLQ+OswWIJ76bdZWGgr4RVSJFSHMYlkSrQwSIjYVmvRRGFHQEkNI/Ps/8XciAT
-woCqISxxOQ7Qj1zB09GOInJGTB2Wrk9xseEFKZZZ9LuedT3PDTcNYtsmjGOpI99n
-Bjx8Oto0QuFmtEYE3saWmA9LSHokMnWRn6z3aOkquVVlzl1h0ydw2Df+n7mvoC5W
-t6NlUe07qxS/TFED6F+KBZvuim6c779o+sjaC+NCydAXFJy3SuCvkychVSa1ZC+N
-8f+mQAWFBVzKBxlcCxMoTFh/wqXvRdpg065lYZ1Tg3TCrvJcwhbtkj6EPnNgiLx2
-9CzP0H1907he0ZESEOnN3col49XtmS++dYFLJPlFRpTJKSFTnCZFqhMX5OfNeOI5
-wSsSnqaeG8XmDtkx2Q==
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIIF4DCCA8igAwIBAgIRAPL6ZOJ0Y9ON/RAdBB92ylgwDQYJKoZIhvcNAQELBQAw
-ZzELMAkGA1UEBhMCY2gxETAPBgNVBAoTCFN3aXNzY29tMSUwIwYDVQQLExxEaWdp
-dGFsIENlcnRpZmljYXRlIFNlcnZpY2VzMR4wHAYDVQQDExVTd2lzc2NvbSBSb290
-IEVWIENBIDIwHhcNMTEwNjI0MDk0NTA4WhcNMzEwNjI1MDg0NTA4WjBnMQswCQYD
-VQQGEwJjaDERMA8GA1UEChMIU3dpc3Njb20xJTAjBgNVBAsTHERpZ2l0YWwgQ2Vy
-dGlmaWNhdGUgU2VydmljZXMxHjAcBgNVBAMTFVN3aXNzY29tIFJvb3QgRVYgQ0Eg
-MjCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIBAMT3HS9X6lds93BdY7Bx
-UglgRCgzo3pOCvrY6myLURYaVa5UJsTMRQdBTxB5f3HSek4/OE6zAMaVylvNwSqD
-1ycfMQ4jFrclyxy0uYAyXhqdk/HoPGAsp15XGVhRXrwsVgu42O+LgrQ8uMIkqBPH
-oCE2G3pXKSinLr9xJZDzRINpUKTk4RtiGZQJo/PDvO/0vezbE53PnUgJUmfANykR
-HvvSEaeFGHR55E+FFOtSN+KxRdjMDUN/rhPSays/p8LiqG12W0OfvrSdsyaGOx9/
-5fLoZigWJdBLlzin5M8J0TbDC77aO0RYjb7xnglrPvMyxyuHxuxenPaHZa0zKcQv
-idm5y8kDnftslFGXEBuGCxobP/YCfnvUxVFkKJ3106yDgYjTdLRZncHrYTNaRdHL
-OdAGalNgHa/2+2m8atwBz735j9m9W8E6X47aD0upm50qKGsaCnw8qyIL5XctcfaC
-NYGu+HuB5ur+rPQam3Rc6I8k9l2dRsQs0h4rIWqDJ2dVSqTjyDKXZpBy2uPUZC5f
-46Fq9mDU5zXNysRojddxyNMkM3OxbPlq4SjbX8Y96L5V5jcb7STZDxmPX2MYWFCB
-UWVv8p9+agTnNCRxunZLWB4ZvRVgRaoMEkABnRDixzgHcgplwLa7JSnaFp6LNYth
-7eVxV4O1PHGf40+/fh6Bn0GXAgMBAAGjgYYwgYMwDgYDVR0PAQH/BAQDAgGGMB0G
-A1UdIQQWMBQwEgYHYIV0AVMCAgYHYIV0AVMCAjASBgNVHRMBAf8ECDAGAQH/AgED
-MB0GA1UdDgQWBBRF2aWBbj2ITY1x0kbBbkUe88SAnTAfBgNVHSMEGDAWgBRF2aWB
-bj2ITY1x0kbBbkUe88SAnTANBgkqhkiG9w0BAQsFAAOCAgEAlDpzBp9SSzBc1P6x
-XCX5145v9Ydkn+0UjrgEjihLj6p7jjm02Vj2e6E1CqGdivdj5eu9OYLU43otb98T
-PLr+flaYC/NUn81ETm484T4VvwYmneTwkLbUwp4wLh/vx3rEUMfqe9pQy3omywC0
-Wqu1kx+AiYQElY2NfwmTv9SoqORjbdlk5LgpWgi/UOGED1V7XwgiG/W9mR4U9s70
-WBCCswo9GcG/W6uqmdjyMb3lOGbcWAXH7WMaLgqXfIeTK7KK4/HsGOV1timH59yL
-Gn602MnTihdsfSlEvoqq9X46Lmgxk7lq2prg2+kupYTNHAq4Sgj5nPFhJpiTt3tm
-7JFe3VE/23MPrQRYCd0EApUKPtN236YQHoA96M2kZNEzx5LH4k5E4wnJTsJdhw4S
-nr8PyQUQ3nqjsTzyP6WqJ3mtMX0f/fwZacXduT98zca0wjAefm6S139hdlqP65VN
-vBFuIXxZN5nQBrz5Bm0yFqXZaajh3DyAHmBR3NdUIR7KYndP+tiPsys6DXhyyWhB
-WkdKwqPrGtcKqzwyVcgKEZzfdNbwQBUdyLmPtTbFr/giuMod89a2GQ+fYWVq6nTI
-fI/DT11lgh/ZDYnadXL77/FHZxOzyNEZiCcmmpl5fx7kLD977vHeTYuWl8PVP3wb
-I+2ksx0WckNLIOFZfsLorSa/ovc=
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIIDwzCCAqugAwIBAgIBATANBgkqhkiG9w0BAQsFADCBgjELMAkGA1UEBhMCREUx
-KzApBgNVBAoMIlQtU3lzdGVtcyBFbnRlcnByaXNlIFNlcnZpY2VzIEdtYkgxHzAd
-BgNVBAsMFlQtU3lzdGVtcyBUcnVzdCBDZW50ZXIxJTAjBgNVBAMMHFQtVGVsZVNl
-YyBHbG9iYWxSb290IENsYXNzIDIwHhcNMDgxMDAxMTA0MDE0WhcNMzMxMDAxMjM1
-OTU5WjCBgjELMAkGA1UEBhMCREUxKzApBgNVBAoMIlQtU3lzdGVtcyBFbnRlcnBy
-aXNlIFNlcnZpY2VzIEdtYkgxHzAdBgNVBAsMFlQtU3lzdGVtcyBUcnVzdCBDZW50
-ZXIxJTAjBgNVBAMMHFQtVGVsZVNlYyBHbG9iYWxSb290IENsYXNzIDIwggEiMA0G
-CSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCqX9obX+hzkeXaXPSi5kfl82hVYAUd
-AqSzm1nzHoqvNK38DcLZSBnuaY/JIPwhqgcZ7bBcrGXHX+0CfHt8LRvWurmAwhiC
-FoT6ZrAIxlQjgeTNuUk/9k9uN0goOA/FvudocP05l03Sx5iRUKrERLMjfTlH6VJi
-1hKTXrcxlkIF+3anHqP1wvzpesVsqXFP6st4vGCvx9702cu+fjOlbpSD8DT6Iavq
-jnKgP6TeMFvvhk1qlVtDRKgQFRzlAVfFmPHmBiiRqiDFt1MmUUOyCxGVWOHAD3bZ
-wI18gfNycJ5v/hqO2V81xrJvNHy+SE/iWjnX2J14np+GPgNeGYtEotXHAgMBAAGj
-QjBAMA8GA1UdEwEB/wQFMAMBAf8wDgYDVR0PAQH/BAQDAgEGMB0GA1UdDgQWBBS/
-WSA2AHmgoCJrjNXyYdK4LMuCSjANBgkqhkiG9w0BAQsFAAOCAQEAMQOiYQsfdOhy
-NsZt+U2e+iKo4YFWz827n+qrkRk4r6p8FU3ztqONpfSO9kSpp+ghla0+AGIWiPAC
-uvxhI+YzmzB6azZie60EI4RYZeLbK4rnJVM3YlNfvNoBYimipidx5joifsFvHZVw
-IEoHNN/q/xWA5brXethbdXwFeilHfkCoMRN3zUA7tFFHei4R40cR3p1m0IvVVGb6
-g1XqfMIpiRvpb7PO4gWEyS8+eIVibslfwXhjdFjASBgMmTnrpMwatXlajRWc2BQN
-9noHV8cigwUtPJslJj0Ys6lDfMjIq2SPDqO/nBudMNva0Bkuqjzx+zOAduTNrRlP
-BSeOE6Fuwg==
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIIDwzCCAqugAwIBAgIBATANBgkqhkiG9w0BAQsFADCBgjELMAkGA1UEBhMCREUx
-KzApBgNVBAoMIlQtU3lzdGVtcyBFbnRlcnByaXNlIFNlcnZpY2VzIEdtYkgxHzAd
-BgNVBAsMFlQtU3lzdGVtcyBUcnVzdCBDZW50ZXIxJTAjBgNVBAMMHFQtVGVsZVNl
-YyBHbG9iYWxSb290IENsYXNzIDMwHhcNMDgxMDAxMTAyOTU2WhcNMzMxMDAxMjM1
-OTU5WjCBgjELMAkGA1UEBhMCREUxKzApBgNVBAoMIlQtU3lzdGVtcyBFbnRlcnBy
-aXNlIFNlcnZpY2VzIEdtYkgxHzAdBgNVBAsMFlQtU3lzdGVtcyBUcnVzdCBDZW50
-ZXIxJTAjBgNVBAMMHFQtVGVsZVNlYyBHbG9iYWxSb290IENsYXNzIDMwggEiMA0G
-CSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQC9dZPwYiJvJK7genasfb3ZJNW4t/zN
-8ELg63iIVl6bmlQdTQyK9tPPcPRStdiTBONGhnFBSivwKixVA9ZIw+A5OO3yXDw/
-RLyTPWGrTs0NvvAgJ1gORH8EGoel15YUNpDQSXuhdfsaa3Ox+M6pCSzyU9XDFES4
-hqX2iys52qMzVNn6chr3IhUciJFrf2blw2qAsCTz34ZFiP0Zf3WHHx+xGwpzJFu5
-ZeAsVMhg02YXP+HMVDNzkQI6pn97djmiH5a2OK61yJN0HZ65tOVgnS9W0eDrXltM
-EnAMbEQgqxHY9Bn20pxSN+f6tsIxO0rUFJmtxxr1XV/6B7h8DR/Wgx6zAgMBAAGj
-QjBAMA8GA1UdEwEB/wQFMAMBAf8wDgYDVR0PAQH/BAQDAgEGMB0GA1UdDgQWBBS1
-A/d2O2GCahKqGFPrAyGUv/7OyjANBgkqhkiG9w0BAQsFAAOCAQEAVj3vlNW92nOy
-WL6ukK2YJ5f+AbGwUgC4TeQbIXQbfsDuXmkqJa9c1h3a0nnJ85cp4IaH3gRZD/FZ
-1GSFS5mvJQQeyUapl96Cshtwn5z2r3Ex3XsFpSzTucpH9sry9uetuUg/vBa3wW30
-6gmv7PO15wWeph6KU1HWk4HMdJP2udqmJQV0eVp+QD6CSyYRMG7hP0HHRwA11fXT
-91Q+gT3aSWqas+8QPebrb9HIIkfLzM8BMZLZGOMivgkeGj5asuRrDFR6fUNOuIml
-e9eiPZaGzPImNC1qkp2aGtAw4l1OBLBfiyB+d8E9lYLRRpo7PHi4b6HQDWSieB4p
-TpPDpFQUWw==
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIIEPTCCAyWgAwIBAgIBATANBgkqhkiG9w0BAQUFADCBvzE/MD0GA1UEAww2VMOc
-UktUUlVTVCBFbGVrdHJvbmlrIFNlcnRpZmlrYSBIaXptZXQgU2HEn2xhecSxY8Sx
-c8SxMQswCQYDVQQGEwJUUjEPMA0GA1UEBwwGQW5rYXJhMV4wXAYDVQQKDFVUw5xS
-S1RSVVNUIEJpbGdpIMSwbGV0acWfaW0gdmUgQmlsacWfaW0gR8O8dmVubGnEn2kg
-SGl6bWV0bGVyaSBBLsWeLiAoYykgQXJhbMSxayAyMDA3MB4XDTA3MTIyNTE4Mzcx
-OVoXDTE3MTIyMjE4MzcxOVowgb8xPzA9BgNVBAMMNlTDnFJLVFJVU1QgRWxla3Ry
-b25payBTZXJ0aWZpa2EgSGl6bWV0IFNhxJ9sYXnEsWPEsXPEsTELMAkGA1UEBhMC
-VFIxDzANBgNVBAcMBkFua2FyYTFeMFwGA1UECgxVVMOcUktUUlVTVCBCaWxnaSDE
-sGxldGnFn2ltIHZlIEJpbGnFn2ltIEfDvHZlbmxpxJ9pIEhpem1ldGxlcmkgQS7F
-ni4gKGMpIEFyYWzEsWsgMjAwNzCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoC
-ggEBAKu3PgqMyKVYFeaK7yc9SrToJdPNM8Ig3BnuiD9NYvDdE3ePYakqtdTyuTFY
-KTsvP2qcb3N2Je40IIDu6rfwxArNK4aUyeNgsURSsloptJGXg9i3phQvKUmi8wUG
-+7RP2qFsmmaf8EMJyupyj+sA1zU511YXRxcw9L6/P8JorzZAwan0qafoEGsIiveG
-HtyaKhUG9qPw9ODHFNRRf8+0222vR5YXm3dx2KdxnSQM9pQ/hTEST7ruToK4uT6P
-IzdezKKqdfcYbwnTrqdUKDT74eA7YH2gvnmJhsifLfkKS8RQouf9eRbHegsYz85M
-733WB2+Y8a+xwXrXgTW4qhe04MsCAwEAAaNCMEAwHQYDVR0OBBYEFCnFkKslrxHk
-Yb+j/4hhkeYO/pyBMA4GA1UdDwEB/wQEAwIBBjAPBgNVHRMBAf8EBTADAQH/MA0G
-CSqGSIb3DQEBBQUAA4IBAQAQDdr4Ouwo0RSVgrESLFF6QSU2TJ/sPx+EnWVUXKgW
-AkD6bho3hO9ynYYKVZ1WKKxmLNA6VpM0ByWtCLCPyA8JWcqdmBzlVPi5RX9ql2+I
-aE1KBiY3iAIOtsbWcpnOa3faYjGkVh+uX4132l32iPwa2Z61gfAyuOOI0JzzaqC5
-mxRZNTZPz/OOXl0XrRWV2N2y1RVuAE6zS89mlOTgzbUF2mNXi+WzqtvALhyQRNsa
-XRik7r4EW5nVcV9VZWRi1aKbBFmGyGJ353yCRWo9F7/snXUMrqNvWtMvmDb08PUZ
-qxFdyKbjKlhqQgnDvZImZjINXQhVdP+MmNAKpoRq0Tl9
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIIFQTCCAymgAwIBAgICDL4wDQYJKoZIhvcNAQELBQAwUTELMAkGA1UEBhMCVFcx
-EjAQBgNVBAoTCVRBSVdBTi1DQTEQMA4GA1UECxMHUm9vdCBDQTEcMBoGA1UEAxMT
-VFdDQSBHbG9iYWwgUm9vdCBDQTAeFw0xMjA2MjcwNjI4MzNaFw0zMDEyMzExNTU5
-NTlaMFExCzAJBgNVBAYTAlRXMRIwEAYDVQQKEwlUQUlXQU4tQ0ExEDAOBgNVBAsT
-B1Jvb3QgQ0ExHDAaBgNVBAMTE1RXQ0EgR2xvYmFsIFJvb3QgQ0EwggIiMA0GCSqG
-SIb3DQEBAQUAA4ICDwAwggIKAoICAQCwBdvI64zEbooh745NnHEKH1Jw7W2CnJfF
-10xORUnLQEK1EjRsGcJ0pDFfhQKX7EMzClPSnIyOt7h52yvVavKOZsTuKwEHktSz
-0ALfUPZVr2YOy+BHYC8rMjk1Ujoog/h7FsYYuGLWRyWRzvAZEk2tY/XTP3VfKfCh
-MBwqoJimFb3u/Rk28OKRQ4/6ytYQJ0lM793B8YVwm8rqqFpD/G2Gb3PpN0Wp8DbH
-zIh1HrtsBv+baz4X7GGqcXzGHaL3SekVtTzWoWH1EfcFbx39Eb7QMAfCKbAJTibc
-46KokWofwpFFiFzlmLhxpRUZyXx1EcxwdE8tmx2RRP1WKKD+u4ZqyPpcC1jcxkt2
-yKsi2XMPpfRaAok/T54igu6idFMqPVMnaR1sjjIsZAAmY2E2TqNGtz99sy2sbZCi
-laLOz9qC5wc0GZbpuCGqKX6mOL6OKUohZnkfs8O1CWfe1tQHRvMq2uYiN2DLgbYP
-oA/pyJV/v1WRBXrPPRXAb94JlAGD1zQbzECl8LibZ9WYkTunhHiVJqRaCPgrdLQA
-BDzfuBSO6N+pjWxnkjMdwLfS7JLIvgm/LCkFbwJrnu+8vyq8W8BQj0FwcYeyTbcE
-qYSjMq+u7msXi7Kx/mzhkIyIqJdIzshNy/MGz19qCkKxHh53L46g5pIOBvwFItIm
-4TFRfTLcDwIDAQABoyMwITAOBgNVHQ8BAf8EBAMCAQYwDwYDVR0TAQH/BAUwAwEB
-/zANBgkqhkiG9w0BAQsFAAOCAgEAXzSBdu+WHdXltdkCY4QWwa6gcFGn90xHNcgL
-1yg9iXHZqjNB6hQbbCEAwGxCGX6faVsgQt+i0trEfJdLjbDorMjupWkEmQqSpqsn
-LhpNgb+E1HAerUf+/UqdM+DyucRFCCEK2mlpc3INvjT+lIutwx4116KD7+U4x6WF
-H6vPNOw/KP4M8VeGTslV9xzU2KV9Bnpv1d8Q34FOIWWxtuEXeZVFBs5fzNxGiWNo
-RI2T9GRwoD2dKAXDOXC4Ynsg/eTb6QihuJ49CcdP+yz4k3ZB3lLg4VfSnQO8d57+
-nile98FRYB/e2guyLXW3Q0iT5/Z5xoRdgFlglPx4mI88k1HtQJAH32RjJMtOcQWh
-15QaiDLxInQirqWm2BJpTGCjAu4r7NRjkgtevi92a6O2JryPA9gK8kxkRr05YuWW
-6zRjESjMlfGt7+/cgFhI6Uu46mWs6fyAtbXIRfmswZ/ZuepiiI7E8UuDEq3mi4TW
-nsLrgxifarsbJGAzcMzs9zLzXNl5fe+epP7JI8Mk7hWSsT2RTyaGvWZzJBPqpK5j
-wa19hAM8EHiGG3njxPPyBJUgriOCxLM6AGK/5jYk4Ve6xx6QddVfP5VhK8E7zeWz
-aGHQRiapIVJpLesux+t3zqY6tQMzT3bR51xUAV3LePTJDL/PEo4XLSNolOer/qmy
-KwbQBM0=
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIIDezCCAmOgAwIBAgIBATANBgkqhkiG9w0BAQUFADBfMQswCQYDVQQGEwJUVzES
-MBAGA1UECgwJVEFJV0FOLUNBMRAwDgYDVQQLDAdSb290IENBMSowKAYDVQQDDCFU
-V0NBIFJvb3QgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkwHhcNMDgwODI4MDcyNDMz
-WhcNMzAxMjMxMTU1OTU5WjBfMQswCQYDVQQGEwJUVzESMBAGA1UECgwJVEFJV0FO
-LUNBMRAwDgYDVQQLDAdSb290IENBMSowKAYDVQQDDCFUV0NBIFJvb3QgQ2VydGlm
-aWNhdGlvbiBBdXRob3JpdHkwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIB
-AQCwfnK4pAOU5qfeCTiRShFAh6d8WWQUe7UREN3+v9XAu1bihSX0NXIP+FPQQeFE
-AcK0HMMxQhZHhTMidrIKbw/lJVBPhYa+v5guEGcevhEFhgWQxFnQfHgQsIBct+HH
-K3XLfJ+utdGdIzdjp9xCoi2SBBtQwXu4PhvJVgSLL1KbralW6cH/ralYhzC2gfeX
-RfwZVzsrb+RH9JlF/h3x+JejiB03HFyP4HYlmlD4oFT/RJB2I9IyxsOrBr/8+7/z
-rX2SYgJbKdM1o5OaQ2RgXbL6Mv87BK9NQGr5x+PvI/1ry+UPizgN7gr8/g+YnzAx
-3WxSZfmLgb4i4RxYA7qRG4kHAgMBAAGjQjBAMA4GA1UdDwEB/wQEAwIBBjAPBgNV
-HRMBAf8EBTADAQH/MB0GA1UdDgQWBBRqOFsmjd6LWvJPelSDGRjjCDWmujANBgkq
-hkiG9w0BAQUFAAOCAQEAPNV3PdrfibqHDAhUaiBQkr6wQT25JmSDCi/oQMCXKCeC
-MErJk/9q56YAf4lCmtYR5VPOL8zy2gXE/uJQxDqGfczafhAJO5I1KlOy/usrBdls
-XebQ79NqZp4VKIV66IIArB6nCWlWQtNoURi+VJq/REG6Sb4gumlc7rh3zc5sH62D
-lhh9DrUUOYTxKOkto557HnpyWoOzeW/vtPzQCqVYT0bf+215WfKEIlKuD8z7fDvn
-aspHYcN6+NOSBB+4IIThNlQWx0DeO4pz3N/GCUzf7Nr/1FNCocnyYh0igzyXxfkZ
-YiesZSLX0zzG5Y6yU8xJzrww/nsOM5D77dIUkR8Hrw==
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIIFcjCCA1qgAwIBAgIQH51ZWtcvwgZEpYAIaeNe9jANBgkqhkiG9w0BAQUFADA/
-MQswCQYDVQQGEwJUVzEwMC4GA1UECgwnR292ZXJubWVudCBSb290IENlcnRpZmlj
-YXRpb24gQXV0aG9yaXR5MB4XDTAyMTIwNTEzMjMzM1oXDTMyMTIwNTEzMjMzM1ow
-PzELMAkGA1UEBhMCVFcxMDAuBgNVBAoMJ0dvdmVybm1lbnQgUm9vdCBDZXJ0aWZp
-Y2F0aW9uIEF1dGhvcml0eTCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIB
-AJoluOzMonWoe/fOW1mKydGGEghU7Jzy50b2iPN86aXfTEc2pBsBHH8eV4qNw8XR
-IePaJD9IK/ufLqGU5ywck9G/GwGHU5nOp/UKIXZ3/6m3xnOUT0b3EEk3+qhZSV1q
-gQdW8or5BtD3cCJNtLdBuTK4sfCxw5w/cP1T3YGq2GN49thTbqGsaoQkclSGxtKy
-yhwOeYHWtXBiCAEuTk8O1RGvqa/lmr/czIdtJuTJV6L7lvnM4T9TjGxMfptTCAts
-F/tnyMKtsc2AtJfcdgEWFelq16TheEfOhtX7MfP6Mb40qij7cEwdScevLJ1tZqa2
-jWR+tSBqnTuBto9AAGdLiYa4zGX+FVPpBMHWXx1E1wovJ5pGfaENda1UhhXcSTvx
-ls4Pm6Dso3pdvtUqdULle96ltqqvKKyskKw4t9VoNSZ63Pc78/1Fm9G7Q3hub/FC
-VGqY8A2tl+lSXunVanLeavcbYBT0peS2cWeqH+riTcFCQP5nRhc4L0c/cZyu5SHK
-YS1tB6iEfC3uUSXxY5Ce/eFXiGvviiNtsea9P63RPZYLhY3Naye7twWb7LuRqQoH
-EgKXTiCQ8P8NHuJBO9NAOueNXdpm5AKwB1KYXA6OM5zCppX7VRluTI6uSw+9wThN
-Xo+EHWbNxWCWtFJaBYmOlXqYwZE8lSOyDvR5tMl8wUohAgMBAAGjajBoMB0GA1Ud
-DgQWBBTMzO/MKWCkO7GStjz6MmKPrCUVOzAMBgNVHRMEBTADAQH/MDkGBGcqBwAE
-MTAvMC0CAQAwCQYFKw4DAhoFADAHBgVnKgMAAAQUA5vwIhP/lSg209yewDL7MTqK
-UWUwDQYJKoZIhvcNAQEFBQADggIBAECASvomyc5eMN1PhnR2WPWus4MzeKR6dBcZ
-TulStbngCnRiqmjKeKBMmo4sIy7VahIkv9Ro04rQ2JyftB8M3jh+Vzj8jeJPXgyf
-qzvS/3WXy6TjZwj/5cAWtUgBfen5Cv8b5Wppv3ghqMKnI6mGq3ZW6A4M9hPdKmaK
-ZEk9GhiHkASfQlK3T8v+R0F2Ne//AHY2RTKbxkaFXeIksB7jSJaYV0eUVXoPQbFE
-JPPB/hprv4j9wabak2BegUqZIJxIZhm1AHlUD7gsL0u8qV1bYH+Mh6XgUmMqvtg7
-hUAV/h62ZT/FS9p+tXo1KaMuephgIqP0fSdOLeq0dDzpD6QzDxARvBMB1uUO07+1
-EqLhRSPAzAhuYbeJq4PjJB7mXQfnHyA+z2fI56wwbSdLaG5LKlwCCDTb+HbkZ6Mm
-nD+iMsJKxYEYMRBWqoTvLQr/uB930r+lWKBi5NdLkXWNiYCYfm3LU05er/ayl4WX
-udpVBrkk7tfGOB5jGxI7leFYrPLfhNVfmS8NVVvmONsuP3LpSIXLuykTjx44Vbnz
-ssQwmSNOXfJIoRIM3BKQCZBUkQM8R+XVyWXgt0t97EfTsws+rZ7QdAAO671RrcDe
-LMDDav7v3Aun+kbfYNucpllQdSNpc5Oy+fwC00fmcc4QAu4njIT/rEUNE1yDMuAl
-pYYsfPQS
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIIFODCCAyCgAwIBAgIRAJW+FqD3LkbxezmCcvqLzZYwDQYJKoZIhvcNAQEFBQAw
-NzEUMBIGA1UECgwLVGVsaWFTb25lcmExHzAdBgNVBAMMFlRlbGlhU29uZXJhIFJv
-b3QgQ0EgdjEwHhcNMDcxMDE4MTIwMDUwWhcNMzIxMDE4MTIwMDUwWjA3MRQwEgYD
-VQQKDAtUZWxpYVNvbmVyYTEfMB0GA1UEAwwWVGVsaWFTb25lcmEgUm9vdCBDQSB2
-MTCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIBAMK+6yfwIaPzaSZVfp3F
-VRaRXP3vIb9TgHot0pGMYzHw7CTww6XScnwQbfQ3t+XmfHnqjLWCi65ItqwA3GV1
-7CpNX8GH9SBlK4GoRz6JI5UwFpB/6FcHSOcZrr9FZ7E3GwYq/t75rH2D+1665I+X
-Z75Ljo1kB1c4VWk0Nj0TSO9P4tNmHqTPGrdeNjPUtAa9GAH9d4RQAEX1jF3oI7x+
-/jXh7VB7qTCNGdMJjmhnXb88lxhTuylixcpecsHHltTbLaC0H2kD7OriUPEMPPCs
-81Mt8Bz17Ww5OXOAFshSsCPN4D7c3TxHoLs1iuKYaIu+5b9y7tL6pe0S7fyYGKkm
-dtwoSxAgHNN/Fnct7W+A90m7UwW7XWjH1Mh1Fj+JWov3F0fUTPHSiXk+TT2YqGHe
-Oh7S+F4D4MHJHIzTjU3TlTazN19jY5szFPAtJmtTfImMMsJu7D0hADnJoWjiUIMu
-sDor8zagrC/kb2HCUQk5PotTubtn2txTuXZZNp1D5SDgPTJghSJRt8czu90VL6R4
-pgd7gUY2BIbdeTXHlSw7sKMXNeVzH7RcWe/a6hBle3rQf5+ztCo3O3CLm1u5K7fs
-slESl1MpWtTwEhDcTwK7EpIvYtQ/aUN8Ddb8WHUBiJ1YFkveupD/RwGJBmr2X7KQ
-arMCpgKIv7NHfirZ1fpoeDVNAgMBAAGjPzA9MA8GA1UdEwEB/wQFMAMBAf8wCwYD
-VR0PBAQDAgEGMB0GA1UdDgQWBBTwj1k4ALP1j5qWDNXr+nuqF+gTEjANBgkqhkiG
-9w0BAQUFAAOCAgEAvuRcYk4k9AwI//DTDGjkk0kiP0Qnb7tt3oNmzqjMDfz1mgbl
-dxSR651Be5kqhOX//CHBXfDkH1e3damhXwIm/9fH907eT/j3HEbAek9ALCI18Bmx
-0GtnLLCo4MBANzX2hFxc469CeP6nyQ1Q6g2EdvZR74NTxnr/DlZJLo961gzmJ1Tj
-TQpgcmLNkQfWpb/ImWvtxBnmq0wROMVvMeJuScg/doAmAyYp4Db29iBT4xdwNBed
-Y2gea+zDTYa4EzAvXUYNR0PVG6pZDrlcjQZIrXSHX8f8MVRBE+LHIQ6e4B4N4cB7
-Q4WQxYpYxmUKeFfyxiMPAdkgS94P+5KFdSpcc41teyWRyu5FrgZLAMzTsVlQ2jqI
-OylDRl6XK1TOU2+NSueW+r9xDkKLfP0ooNBIytrEgUy7onOTJsjrDNYmiLbAJM+7
-vVvrdX3pCI6GMyx5dwlppYn8s3CQh3aP0yK7Qs69cwsgJirQmz1wHiRszYd2qReW
-t88NkvuOGKmYSdGe/mBEciG5Ge3C9THxOUiIkCR1VBatzvT4aRRkOfujuLpwQMcn
-HL/EVlP6Y2XQ8xwOFvVrhlhNGNTkDY6lnVuR3HYkUD/GKvvZt5y11ubQ2egZixVx
-SK236thZiNSQvxaz2emsWWFUyBy6ysHK4bkgTI86k4mloMy/0/Z1pHWWbVY=
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIIDZzCCAk+gAwIBAgIQGx+ttiD5JNM2a/fH8YygWTANBgkqhkiG9w0BAQUFADBF
-MQswCQYDVQQGEwJHQjEYMBYGA1UEChMPVHJ1c3RpcyBMaW1pdGVkMRwwGgYDVQQL
-ExNUcnVzdGlzIEZQUyBSb290IENBMB4XDTAzMTIyMzEyMTQwNloXDTI0MDEyMTEx
-MzY1NFowRTELMAkGA1UEBhMCR0IxGDAWBgNVBAoTD1RydXN0aXMgTGltaXRlZDEc
-MBoGA1UECxMTVHJ1c3RpcyBGUFMgUm9vdCBDQTCCASIwDQYJKoZIhvcNAQEBBQAD
-ggEPADCCAQoCggEBAMVQe547NdDfxIzNjpvto8A2mfRC6qc+gIMPpqdZh8mQRUN+
-AOqGeSoDvT03mYlmt+WKVoaTnGhLaASMk5MCPjDSNzoiYYkchU59j9WvezX2fihH
-iTHcDnlkH5nSW7r+f2C/revnPDgpai/lkQtV/+xvWNUtyd5MZnGPDNcE2gfmHhjj
-vSkCqPoc4Vu5g6hBSLwacY3nYuUtsuvffM/bq1rKMfFMIvMFE/eC+XN5DL7XSxzA
-0RU8k0Fk0ea+IxciAIleH2ulrG6nS4zto3Lmr2NNL4XSFDWaLk6M6jKYKIahkQlB
-OrTh4/L68MkKokHdqeMDx4gVOxzUGpTXn2RZEm0CAwEAAaNTMFEwDwYDVR0TAQH/
-BAUwAwEB/zAfBgNVHSMEGDAWgBS6+nEleYtXQSUhhgtx67JkDoshZzAdBgNVHQ4E
-FgQUuvpxJXmLV0ElIYYLceuyZA6LIWcwDQYJKoZIhvcNAQEFBQADggEBAH5Y//01
-GX2cGE+esCu8jowU/yyg2kdbw++BLa8F6nRIW/M+TgfHbcWzk88iNVy2P3UnXwmW
-zaD+vkAMXBJV+JOCyinpXj9WV4s4NvdFGkwozZ5BuO1WTISkQMi4sKUraXAEasP4
-1BIy+Q7DsdwyhEQsb8tGD+pmQQ9P8Vilpg0ND2HepZ5dfWWhPBfnqFVO76DH7cZE
-f1T1o+CP8HxVIo8ptoGj4W1OLBuAZ+ytIJ8MYmHVl/9D7S3B2l0pKoU/rGXuhg8F
-jZBf3+6f9L/uHfuY5H+QK4R4EA5sSVPvFVtlRkpdr7r7OnIdzfYliB6XzCGcKQEN
-ZetX2fNXlrtIzYE=
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIIFFzCCA/+gAwIBAgIBETANBgkqhkiG9w0BAQUFADCCASsxCzAJBgNVBAYTAlRS
-MRgwFgYDVQQHDA9HZWJ6ZSAtIEtvY2FlbGkxRzBFBgNVBAoMPlTDvHJraXllIEJp
-bGltc2VsIHZlIFRla25vbG9qaWsgQXJhxZ90xLFybWEgS3VydW11IC0gVMOcQsSw
-VEFLMUgwRgYDVQQLDD9VbHVzYWwgRWxla3Ryb25payB2ZSBLcmlwdG9sb2ppIEFy
-YcWfdMSxcm1hIEVuc3RpdMO8c8O8IC0gVUVLQUUxIzAhBgNVBAsMGkthbXUgU2Vy
-dGlmaWthc3lvbiBNZXJrZXppMUowSAYDVQQDDEFUw5xCxLBUQUsgVUVLQUUgS8O2
-ayBTZXJ0aWZpa2EgSGl6bWV0IFNhxJ9sYXnEsWPEsXPEsSAtIFPDvHLDvG0gMzAe
-Fw0wNzA4MjQxMTM3MDdaFw0xNzA4MjExMTM3MDdaMIIBKzELMAkGA1UEBhMCVFIx
-GDAWBgNVBAcMD0dlYnplIC0gS29jYWVsaTFHMEUGA1UECgw+VMO8cmtpeWUgQmls
-aW1zZWwgdmUgVGVrbm9sb2ppayBBcmHFn3TEsXJtYSBLdXJ1bXUgLSBUw5xCxLBU
-QUsxSDBGBgNVBAsMP1VsdXNhbCBFbGVrdHJvbmlrIHZlIEtyaXB0b2xvamkgQXJh
-xZ90xLFybWEgRW5zdGl0w7xzw7wgLSBVRUtBRTEjMCEGA1UECwwaS2FtdSBTZXJ0
-aWZpa2FzeW9uIE1lcmtlemkxSjBIBgNVBAMMQVTDnELEsFRBSyBVRUtBRSBLw7Zr
-IFNlcnRpZmlrYSBIaXptZXQgU2HEn2xhecSxY8Sxc8SxIC0gU8O8csO8bSAzMIIB
-IjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAim1L/xCIOsP2fpTo6iBkcK4h
-gb46ezzb8R1Sf1n68yJMlaCQvEhOEav7t7WNeoMojCZG2E6VQIdhn8WebYGHV2yK
-O7Rm6sxA/OOqbLLLAdsyv9Lrhc+hDVXDWzhXcLh1xnnRFDDtG1hba+818qEhTsXO
-fJlfbLm4IpNQp81McGq+agV/E5wrHur+R84EpW+sky58K5+eeROR6Oqeyjh1jmKw
-lZMq5d/pXpduIF9fhHpEORlAHLpVK/swsoHvhOPc7Jg4OQOFCKlUAwUp8MmPi+oL
-hmUZEdPpCSPeaJMDyTYcIW7OjGbxmTDY17PDHfiBLqi9ggtm/oLL4eAagsNAgQID
-AQABo0IwQDAdBgNVHQ4EFgQUvYiHyY/2pAoLquvF/pEjnatKijIwDgYDVR0PAQH/
-BAQDAgEGMA8GA1UdEwEB/wQFMAMBAf8wDQYJKoZIhvcNAQEFBQADggEBAB18+kmP
-NOm3JpIWmgV050vQbTlswyb2zrgxvMTfvCr4N5EY3ATIZJkrGG2AA1nJrvhY0D7t
-wyOfaTyGOBye79oneNGEN3GKPEs5z35FBtYt2IpNeBLWrcLTy9LQQfMmNkqblWwM
-7uXRQydmwYj3erMgbOqwaSvHIOgMA8RBBZniP+Rr+KCGgceExh/VS4ESshYhLBOh
-gLJeDEoTniDYYkCrkOpkSi+sDQESeUWoL4cZaMjihccwsnX5OD+ywJO0a+IDRM5n
-oN+J1q2MdqMTw5RhK2vZbMEHCiIHhWyFJEapvj+LeISCfiQMnf2BN+MlqO02TpUs
-yZyQ2uypQjyttgI=
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIIEJzCCAw+gAwIBAgIHAI4X/iQggTANBgkqhkiG9w0BAQsFADCBsTELMAkGA1UE
-BhMCVFIxDzANBgNVBAcMBkFua2FyYTFNMEsGA1UECgxEVMOcUktUUlVTVCBCaWxn
-aSDEsGxldGnFn2ltIHZlIEJpbGnFn2ltIEfDvHZlbmxpxJ9pIEhpem1ldGxlcmkg
-QS7Fni4xQjBABgNVBAMMOVTDnFJLVFJVU1QgRWxla3Ryb25payBTZXJ0aWZpa2Eg
-SGl6bWV0IFNhxJ9sYXnEsWPEsXPEsSBINTAeFw0xMzA0MzAwODA3MDFaFw0yMzA0
-MjgwODA3MDFaMIGxMQswCQYDVQQGEwJUUjEPMA0GA1UEBwwGQW5rYXJhMU0wSwYD
-VQQKDERUw5xSS1RSVVNUIEJpbGdpIMSwbGV0acWfaW0gdmUgQmlsacWfaW0gR8O8
-dmVubGnEn2kgSGl6bWV0bGVyaSBBLsWeLjFCMEAGA1UEAww5VMOcUktUUlVTVCBF
-bGVrdHJvbmlrIFNlcnRpZmlrYSBIaXptZXQgU2HEn2xhecSxY8Sxc8SxIEg1MIIB
-IjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEApCUZ4WWe60ghUEoI5RHwWrom
-/4NZzkQqL/7hzmAD/I0Dpe3/a6i6zDQGn1k19uwsu537jVJp45wnEFPzpALFp/kR
-Gml1bsMdi9GYjZOHp3GXDSHHmflS0yxjXVW86B8BSLlg/kJK9siArs1mep5Fimh3
-4khon6La8eHBEJ/rPCmBp+EyCNSgBbGM+42WAA4+Jd9ThiI7/PS98wl+d+yG6w8z
-5UNP9FR1bSmZLmZaQ9/LXMrI5Tjxfjs1nQ/0xVqhzPMggCTTV+wVunUlm+hkS7M0
-hO8EuPbJbKoCPrZV4jI3X/xml1/N1p7HIL9Nxqw/dV8c7TKcfGkAaZHjIxhT6QID
-AQABo0IwQDAdBgNVHQ4EFgQUVpkHHtOsDGlktAxQR95DLL4gwPswDgYDVR0PAQH/
-BAQDAgEGMA8GA1UdEwEB/wQFMAMBAf8wDQYJKoZIhvcNAQELBQADggEBAJ5FdnsX
-SDLyOIspve6WSk6BGLFRRyDN0GSxDsnZAdkJzsiZ3GglE9Rc8qPoBP5yCccLqh0l
-VX6Wmle3usURehnmp349hQ71+S4pL+f5bFgWV1Al9j4uPqrtd3GqqpmWRgqujuwq
-URawXs3qZwQcWDD1YIq9pr1N5Za0/EKJAWv2cMhQOQwt1WbZyNKzMrcbGW3LM/nf
-peYVhDfwwvJllpKQd/Ct9JDpEXjXk4nAPQu6KfTomZ1yju2dL+6SfaHx/126M2CF
-Yv4HAqGEVka+lgqaE9chTLd8B59OTj+RdPsnnRHM3eaxynFNExc5JsUpISuTKWqW
-+qtB4Uu2NQvAmxU=
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIIEJjCCAw6gAwIBAgIGfaHyZeyKMA0GCSqGSIb3DQEBCwUAMIGxMQswCQYDVQQG
-EwJUUjEPMA0GA1UEBwwGQW5rYXJhMU0wSwYDVQQKDERUw5xSS1RSVVNUIEJpbGdp
-IMSwbGV0acWfaW0gdmUgQmlsacWfaW0gR8O8dmVubGnEn2kgSGl6bWV0bGVyaSBB
-LsWeLjFCMEAGA1UEAww5VMOcUktUUlVTVCBFbGVrdHJvbmlrIFNlcnRpZmlrYSBI
-aXptZXQgU2HEn2xhecSxY8Sxc8SxIEg2MB4XDTEzMTIxODA5MDQxMFoXDTIzMTIx
-NjA5MDQxMFowgbExCzAJBgNVBAYTAlRSMQ8wDQYDVQQHDAZBbmthcmExTTBLBgNV
-BAoMRFTDnFJLVFJVU1QgQmlsZ2kgxLBsZXRpxZ9pbSB2ZSBCaWxpxZ9pbSBHw7x2
-ZW5sacSfaSBIaXptZXRsZXJpIEEuxZ4uMUIwQAYDVQQDDDlUw5xSS1RSVVNUIEVs
-ZWt0cm9uaWsgU2VydGlmaWthIEhpem1ldCBTYcSfbGF5xLFjxLFzxLEgSDYwggEi
-MA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCdsGjW6L0UlqMACprx9MfMkU1x
-eHe59yEmFXNRFpQJRwXiM/VomjX/3EsvMsew7eKC5W/a2uqsxgbPJQ1BgfbBOCK9
-+bGlprMBvD9QFyv26WZV1DOzXPhDIHiTVRZwGTLmiddk671IUP320EEDwnS3/faA
-z1vFq6TWlRKb55cTMgPp1KtDWxbtMyJkKbbSk60vbNg9tvYdDjTu0n2pVQ8g9P0p
-u5FbHH3GQjhtQiht1AH7zYiXSX6484P4tZgvsycLSF5W506jM7NE1qXyGJTtHB6p
-lVxiSvgNZ1GpryHV+DKdeboaX+UEVU0TRv/yz3THGmNtwx8XEsMeED5gCLMxAgMB
-AAGjQjBAMB0GA1UdDgQWBBTdVRcT9qzoSCHK77Wv0QAy7Z6MtTAOBgNVHQ8BAf8E
-BAMCAQYwDwYDVR0TAQH/BAUwAwEB/zANBgkqhkiG9w0BAQsFAAOCAQEAb1gNl0Oq
-FlQ+v6nfkkU/hQu7VtMMUszIv3ZnXuaqs6fvuay0EBQNdH49ba3RfdCaqaXKGDsC
-QC4qnFAUi/5XfldcEQlLNkVS9z2sFP1E34uXI9TDwe7UU5X+LEr+DXCqu4svLcsy
-o4LyVN/Y8t3XSHLuSqMplsNEzm61kod2pLv0kmzOLBQJZo6NrRa1xxsJYTvjIKID
-gI6tflEATseWhvtDmHd9KMeP2Cpu54Rvl0EpABZeTeIT6lnAY2c6RPuY/ATTMHKm
-9ocJV612ph1jmv3XZch4gyt1O6VbuA1df74jrlZVlFjvH4GMKrLN5ptjnhi85WsG
-tAuYSyher4hYyw==
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIICjzCCAhWgAwIBAgIQXIuZxVqUxdJxVt7NiYDMJjAKBggqhkjOPQQDAzCBiDEL
-MAkGA1UEBhMCVVMxEzARBgNVBAgTCk5ldyBKZXJzZXkxFDASBgNVBAcTC0plcnNl
-eSBDaXR5MR4wHAYDVQQKExVUaGUgVVNFUlRSVVNUIE5ldHdvcmsxLjAsBgNVBAMT
-JVVTRVJUcnVzdCBFQ0MgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkwHhcNMTAwMjAx
-MDAwMDAwWhcNMzgwMTE4MjM1OTU5WjCBiDELMAkGA1UEBhMCVVMxEzARBgNVBAgT
-Ck5ldyBKZXJzZXkxFDASBgNVBAcTC0plcnNleSBDaXR5MR4wHAYDVQQKExVUaGUg
-VVNFUlRSVVNUIE5ldHdvcmsxLjAsBgNVBAMTJVVTRVJUcnVzdCBFQ0MgQ2VydGlm
-aWNhdGlvbiBBdXRob3JpdHkwdjAQBgcqhkjOPQIBBgUrgQQAIgNiAAQarFRaqflo
-I+d61SRvU8Za2EurxtW20eZzca7dnNYMYf3boIkDuAUU7FfO7l0/4iGzzvfUinng
-o4N+LZfQYcTxmdwlkWOrfzCjtHDix6EznPO/LlxTsV+zfTJ/ijTjeXmjQjBAMB0G
-A1UdDgQWBBQ64QmG1M8ZwpZ2dEl23OA1xmNjmjAOBgNVHQ8BAf8EBAMCAQYwDwYD
-VR0TAQH/BAUwAwEB/zAKBggqhkjOPQQDAwNoADBlAjA2Z6EWCNzklwBBHU6+4WMB
-zzuqQhFkoJ2UOQIReVx7Hfpkue4WQrO/isIJxOzksU0CMQDpKmFHjFJKS04YcPbW
-RNZu9YO6bVi9JNlWSOrvxKJGgYhqOkbRqZtNyWHa0V1Xahg=
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIIF3jCCA8agAwIBAgIQAf1tMPyjylGoG7xkDjUDLTANBgkqhkiG9w0BAQwFADCB
-iDELMAkGA1UEBhMCVVMxEzARBgNVBAgTCk5ldyBKZXJzZXkxFDASBgNVBAcTC0pl
-cnNleSBDaXR5MR4wHAYDVQQKExVUaGUgVVNFUlRSVVNUIE5ldHdvcmsxLjAsBgNV
-BAMTJVVTRVJUcnVzdCBSU0EgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkwHhcNMTAw
-MjAxMDAwMDAwWhcNMzgwMTE4MjM1OTU5WjCBiDELMAkGA1UEBhMCVVMxEzARBgNV
-BAgTCk5ldyBKZXJzZXkxFDASBgNVBAcTC0plcnNleSBDaXR5MR4wHAYDVQQKExVU
-aGUgVVNFUlRSVVNUIE5ldHdvcmsxLjAsBgNVBAMTJVVTRVJUcnVzdCBSU0EgQ2Vy
-dGlmaWNhdGlvbiBBdXRob3JpdHkwggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAwggIK
-AoICAQCAEmUXNg7D2wiz0KxXDXbtzSfTTK1Qg2HiqiBNCS1kCdzOiZ/MPans9s/B
-3PHTsdZ7NygRK0faOca8Ohm0X6a9fZ2jY0K2dvKpOyuR+OJv0OwWIJAJPuLodMkY
-tJHUYmTbf6MG8YgYapAiPLz+E/CHFHv25B+O1ORRxhFnRghRy4YUVD+8M/5+bJz/
-Fp0YvVGONaanZshyZ9shZrHUm3gDwFA66Mzw3LyeTP6vBZY1H1dat//O+T23LLb2
-VN3I5xI6Ta5MirdcmrS3ID3KfyI0rn47aGYBROcBTkZTmzNg95S+UzeQc0PzMsNT
-79uq/nROacdrjGCT3sTHDN/hMq7MkztReJVni+49Vv4M0GkPGw/zJSZrM233bkf6
-c0Plfg6lZrEpfDKEY1WJxA3Bk1QwGROs0303p+tdOmw1XNtB1xLaqUkL39iAigmT
-Yo61Zs8liM2EuLE/pDkP2QKe6xJMlXzzawWpXhaDzLhn4ugTncxbgtNMs+1b/97l
-c6wjOy0AvzVVdAlJ2ElYGn+SNuZRkg7zJn0cTRe8yexDJtC/QV9AqURE9JnnV4ee
-UB9XVKg+/XRjL7FQZQnmWEIuQxpMtPAlR1n6BB6T1CZGSlCBst6+eLf8ZxXhyVeE
-Hg9j1uliutZfVS7qXMYoCAQlObgOK6nyTJccBz8NUvXt7y+CDwIDAQABo0IwQDAd
-BgNVHQ4EFgQUU3m/WqorSs9UgOHYm8Cd8rIDZsswDgYDVR0PAQH/BAQDAgEGMA8G
-A1UdEwEB/wQFMAMBAf8wDQYJKoZIhvcNAQEMBQADggIBAFzUfA3P9wF9QZllDHPF
-Up/L+M+ZBn8b2kMVn54CVVeWFPFSPCeHlCjtHzoBN6J2/FNQwISbxmtOuowhT6KO
-VWKR82kV2LyI48SqC/3vqOlLVSoGIG1VeCkZ7l8wXEskEVX/JJpuXior7gtNn3/3
-ATiUFJVDBwn7YKnuHKsSjKCaXqeYalltiz8I+8jRRa8YFWSQEg9zKC7F4iRO/Fjs
-8PRF/iKz6y+O0tlFYQXBl2+odnKPi4w2r78NBc5xjeambx9spnFixdjQg3IM8WcR
-iQycE0xyNN+81XHfqnHd4blsjDwSXWXavVcStkNr/+XeTWYRUc+ZruwXtuhxkYze
-Sf7dNXGiFSeUHM9h4ya7b6NnJSFd5t0dCy5oGzuCr+yDZ4XUmFF0sbmZgIn/f3gZ
-XHlKYC6SQK5MNyosycdiyA5d9zZbyuAlJQG03RoHnHcAP9Dc1ew91Pq7P8yF1m9/
-qS3fuQL39ZeatTXaw2ewh0qpKJ4jjv9cJ2vhsE/zB+4ALtRZh8tSQZXq9EfX7mRB
-VXyNWQKV3WKdwrnuWih0hKWbt5DHDAff9Yk2dDLWKMGwsAvgnEzDHNb842m1R0aB
-L6KCq9NjRHDEjf8tM7qtj3u1cIiuPhnPQCjY/MiQu12ZIvVS5ljFH4gxQ+6IHdfG
-jjxDah2nGN59PRbxYvnKkKj9
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIIEdDCCA1ygAwIBAgIQRL4Mi1AAJLQR0zYq/mUK/TANBgkqhkiG9w0BAQUFADCB
-lzELMAkGA1UEBhMCVVMxCzAJBgNVBAgTAlVUMRcwFQYDVQQHEw5TYWx0IExha2Ug
-Q2l0eTEeMBwGA1UEChMVVGhlIFVTRVJUUlVTVCBOZXR3b3JrMSEwHwYDVQQLExho
-dHRwOi8vd3d3LnVzZXJ0cnVzdC5jb20xHzAdBgNVBAMTFlVUTi1VU0VSRmlyc3Qt
-SGFyZHdhcmUwHhcNOTkwNzA5MTgxMDQyWhcNMTkwNzA5MTgxOTIyWjCBlzELMAkG
-A1UEBhMCVVMxCzAJBgNVBAgTAlVUMRcwFQYDVQQHEw5TYWx0IExha2UgQ2l0eTEe
-MBwGA1UEChMVVGhlIFVTRVJUUlVTVCBOZXR3b3JrMSEwHwYDVQQLExhodHRwOi8v
-d3d3LnVzZXJ0cnVzdC5jb20xHzAdBgNVBAMTFlVUTi1VU0VSRmlyc3QtSGFyZHdh
-cmUwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCx98M4P7Sof885glFn
-0G2f0v9Y8+efK+wNiVSZuTiZFvfgIXlIwrthdBKWHTxqctU8EGc6Oe0rE81m65UJ
-M6Rsl7HoxuzBdXmcRl6Nq9Bq/bkqVRcQVLMZ8Jr28bFdtqdt++BxF2uiiPsA3/4a
-MXcMmgF6sTLjKwEHOG7DpV4jvEWbe1DByTCP2+UretNb+zNAHqDVmBe8i4fDidNd
-oI6yqqr2jmmIBsX6iSHzCJ1pLgkzmykNRg+MzEk0sGlRvfkGzWitZky8PqxhvQqI
-DsjfPe58BEydCl5rkdbux+0ojatNh4lz0G6k0B4WixThdkQDf2Os5M1JnMWS9Ksy
-oUhbAgMBAAGjgbkwgbYwCwYDVR0PBAQDAgHGMA8GA1UdEwEB/wQFMAMBAf8wHQYD
-VR0OBBYEFKFyXyYbKJhDlV0HN9WFlp1L0sNFMEQGA1UdHwQ9MDswOaA3oDWGM2h0
-dHA6Ly9jcmwudXNlcnRydXN0LmNvbS9VVE4tVVNFUkZpcnN0LUhhcmR3YXJlLmNy
-bDAxBgNVHSUEKjAoBggrBgEFBQcDAQYIKwYBBQUHAwUGCCsGAQUFBwMGBggrBgEF
-BQcDBzANBgkqhkiG9w0BAQUFAAOCAQEARxkP3nTGmZev/K0oXnWO6y1n7k57K9cM
-//bey1WiCuFMVGWTYGufEpytXoMs61quwOQt9ABjHbjAbPLPSbtNk28Gpgoiskli
-CE7/yMgUsogWXecB5BKV5UU0s4tpvc+0hY91UZ59Ojg6FEgSxvunOxqNDYJAB+gE
-CJChicsZUN/KHAG8HQQZexB2lzvukJDKxA4fFm517zP4029bHpbj4HR3dHuKom4t
-3XbWOTCC8KucUvIqx69JXn7HaOWCgchqJ/kniCrVWFCVH/A7HFe7fRQ5YiuayZSS
-KqMiDP+JJn1fIytH1xUdqWqeUQ0qUZ6B+dQ7XnASfxAynB67nfhmqA==
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIIDhDCCAwqgAwIBAgIQL4D+I4wOIg9IZxIokYesszAKBggqhkjOPQQDAzCByjEL
-MAkGA1UEBhMCVVMxFzAVBgNVBAoTDlZlcmlTaWduLCBJbmMuMR8wHQYDVQQLExZW
-ZXJpU2lnbiBUcnVzdCBOZXR3b3JrMTowOAYDVQQLEzEoYykgMjAwNyBWZXJpU2ln
-biwgSW5jLiAtIEZvciBhdXRob3JpemVkIHVzZSBvbmx5MUUwQwYDVQQDEzxWZXJp
-U2lnbiBDbGFzcyAzIFB1YmxpYyBQcmltYXJ5IENlcnRpZmljYXRpb24gQXV0aG9y
-aXR5IC0gRzQwHhcNMDcxMTA1MDAwMDAwWhcNMzgwMTE4MjM1OTU5WjCByjELMAkG
-A1UEBhMCVVMxFzAVBgNVBAoTDlZlcmlTaWduLCBJbmMuMR8wHQYDVQQLExZWZXJp
-U2lnbiBUcnVzdCBOZXR3b3JrMTowOAYDVQQLEzEoYykgMjAwNyBWZXJpU2lnbiwg
-SW5jLiAtIEZvciBhdXRob3JpemVkIHVzZSBvbmx5MUUwQwYDVQQDEzxWZXJpU2ln
-biBDbGFzcyAzIFB1YmxpYyBQcmltYXJ5IENlcnRpZmljYXRpb24gQXV0aG9yaXR5
-IC0gRzQwdjAQBgcqhkjOPQIBBgUrgQQAIgNiAASnVnp8Utpkmw4tXNherJI9/gHm
-GUo9FANL+mAnINmDiWn6VMaaGF5VKmTeBvaNSjutEDxlPZCIBIngMGGzrl0Bp3ve
-fLK+ymVhAIau2o970ImtTR1ZmkGxvEeA3J5iw/mjgbIwga8wDwYDVR0TAQH/BAUw
-AwEB/zAOBgNVHQ8BAf8EBAMCAQYwbQYIKwYBBQUHAQwEYTBfoV2gWzBZMFcwVRYJ
-aW1hZ2UvZ2lmMCEwHzAHBgUrDgMCGgQUj+XTGoasjY5rw8+AatRIGCx7GS4wJRYj
-aHR0cDovL2xvZ28udmVyaXNpZ24uY29tL3ZzbG9nby5naWYwHQYDVR0OBBYEFLMW
-kf3upm7ktS5Jj4d4gYDs5bG1MAoGCCqGSM49BAMDA2gAMGUCMGYhDBgmYFo4e1ZC
-4Kf8NoRRkSAsdk1DPcQdhCPQrNZ8NQbOzWm9kA3bbEhCHQ6qQgIxAJw9SDkjOVga
-FRJZap7v1VmyHVIsmXHNxynfGyphe3HR3vPA5Q06Sqotp9iGKt0uEA==
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIIE0zCCA7ugAwIBAgIQGNrRniZ96LtKIVjNzGs7SjANBgkqhkiG9w0BAQUFADCB
-yjELMAkGA1UEBhMCVVMxFzAVBgNVBAoTDlZlcmlTaWduLCBJbmMuMR8wHQYDVQQL
-ExZWZXJpU2lnbiBUcnVzdCBOZXR3b3JrMTowOAYDVQQLEzEoYykgMjAwNiBWZXJp
-U2lnbiwgSW5jLiAtIEZvciBhdXRob3JpemVkIHVzZSBvbmx5MUUwQwYDVQQDEzxW
-ZXJpU2lnbiBDbGFzcyAzIFB1YmxpYyBQcmltYXJ5IENlcnRpZmljYXRpb24gQXV0
-aG9yaXR5IC0gRzUwHhcNMDYxMTA4MDAwMDAwWhcNMzYwNzE2MjM1OTU5WjCByjEL
-MAkGA1UEBhMCVVMxFzAVBgNVBAoTDlZlcmlTaWduLCBJbmMuMR8wHQYDVQQLExZW
-ZXJpU2lnbiBUcnVzdCBOZXR3b3JrMTowOAYDVQQLEzEoYykgMjAwNiBWZXJpU2ln
-biwgSW5jLiAtIEZvciBhdXRob3JpemVkIHVzZSBvbmx5MUUwQwYDVQQDEzxWZXJp
-U2lnbiBDbGFzcyAzIFB1YmxpYyBQcmltYXJ5IENlcnRpZmljYXRpb24gQXV0aG9y
-aXR5IC0gRzUwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCvJAgIKXo1
-nmAMqudLO07cfLw8RRy7K+D+KQL5VwijZIUVJ/XxrcgxiV0i6CqqpkKzj/i5Vbex
-t0uz/o9+B1fs70PbZmIVYc9gDaTY3vjgw2IIPVQT60nKWVSFJuUrjxuf6/WhkcIz
-SdhDY2pSS9KP6HBRTdGJaXvHcPaz3BJ023tdS1bTlr8Vd6Gw9KIl8q8ckmcY5fQG
-BO+QueQA5N06tRn/Arr0PO7gi+s3i+z016zy9vA9r911kTMZHRxAy3QkGSGT2RT+
-rCpSx4/VBEnkjWNHiDxpg8v+R70rfk/Fla4OndTRQ8Bnc+MUCH7lP59zuDMKz10/
-NIeWiu5T6CUVAgMBAAGjgbIwga8wDwYDVR0TAQH/BAUwAwEB/zAOBgNVHQ8BAf8E
-BAMCAQYwbQYIKwYBBQUHAQwEYTBfoV2gWzBZMFcwVRYJaW1hZ2UvZ2lmMCEwHzAH
-BgUrDgMCGgQUj+XTGoasjY5rw8+AatRIGCx7GS4wJRYjaHR0cDovL2xvZ28udmVy
-aXNpZ24uY29tL3ZzbG9nby5naWYwHQYDVR0OBBYEFH/TZafC3ey78DAJ80M5+gKv
-MzEzMA0GCSqGSIb3DQEBBQUAA4IBAQCTJEowX2LP2BqYLz3q3JktvXf2pXkiOOzE
-p6B4Eq1iDkVwZMXnl2YtmAl+X6/WzChl8gGqCBpH3vn5fJJaCGkgDdk+bW48DW7Y
-5gaRQBi5+MHt39tBquCWIMnNZBU4gcmU7qKEKQsTb47bDN0lAtukixlE0kF6BWlK
-WE9gyn6CagsCqiUXObXbf+eEZSqVir2G3l6BFoMtEMze/aiCKm0oHw0LxOXnGiYZ
-4fQRbxC1lfznQgUy286dUV4otp6F01vvpX1FQHKOtw5rDgb7MzVIcbidJ4vEZV8N
-hnacRHr2lVz2XTIIM6RUthg/aFzyQkqFOFSDX9HoLPKsEdao7WNq
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIIEuTCCA6GgAwIBAgIQQBrEZCGzEyEDDrvkEhrFHTANBgkqhkiG9w0BAQsFADCB
-vTELMAkGA1UEBhMCVVMxFzAVBgNVBAoTDlZlcmlTaWduLCBJbmMuMR8wHQYDVQQL
-ExZWZXJpU2lnbiBUcnVzdCBOZXR3b3JrMTowOAYDVQQLEzEoYykgMjAwOCBWZXJp
-U2lnbiwgSW5jLiAtIEZvciBhdXRob3JpemVkIHVzZSBvbmx5MTgwNgYDVQQDEy9W
-ZXJpU2lnbiBVbml2ZXJzYWwgUm9vdCBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eTAe
-Fw0wODA0MDIwMDAwMDBaFw0zNzEyMDEyMzU5NTlaMIG9MQswCQYDVQQGEwJVUzEX
-MBUGA1UEChMOVmVyaVNpZ24sIEluYy4xHzAdBgNVBAsTFlZlcmlTaWduIFRydXN0
-IE5ldHdvcmsxOjA4BgNVBAsTMShjKSAyMDA4IFZlcmlTaWduLCBJbmMuIC0gRm9y
-IGF1dGhvcml6ZWQgdXNlIG9ubHkxODA2BgNVBAMTL1ZlcmlTaWduIFVuaXZlcnNh
-bCBSb290IENlcnRpZmljYXRpb24gQXV0aG9yaXR5MIIBIjANBgkqhkiG9w0BAQEF
-AAOCAQ8AMIIBCgKCAQEAx2E3XrEBNNti1xWb/1hajCMj1mCOkdeQmIN65lgZOIzF
-9uVkhbSicfvtvbnazU0AtMgtc6XHaXGVHzk8skQHnOgO+k1KxCHfKWGPMiJhgsWH
-H26MfF8WIFFE0XBPV+rjHOPMee5Y2A7Cs0WTwCznmhcrewA3ekEzeOEz4vMQGn+H
-LL729fdC4uW/h2KJXwBL38Xd5HVEMkE6HnFuacsLdUYI0crSK5XQz/u5QGtkjFdN
-/BMReYTtXlT2NJ8IAfMQJQYXStrxHXpma5hgZqTZ79IugvHw7wnqRMkVauIDbjPT
-rJ9VAMf2CGqUuV/c4DPxhGD5WycRtPwW8rtWaoAljQIDAQABo4GyMIGvMA8GA1Ud
-EwEB/wQFMAMBAf8wDgYDVR0PAQH/BAQDAgEGMG0GCCsGAQUFBwEMBGEwX6FdoFsw
-WTBXMFUWCWltYWdlL2dpZjAhMB8wBwYFKw4DAhoEFI/l0xqGrI2Oa8PPgGrUSBgs
-exkuMCUWI2h0dHA6Ly9sb2dvLnZlcmlzaWduLmNvbS92c2xvZ28uZ2lmMB0GA1Ud
-DgQWBBS2d/ppSEefUxLVwuoHMnYH0ZcHGTANBgkqhkiG9w0BAQsFAAOCAQEASvj4
-sAPmLGd75JR3Y8xuTPl9Dg3cyLk1uXBPY/ok+myDjEedO2Pzmvl2MpWRsXe8rJq+
-seQxIcaBlVZaDrHC1LGmWazxY8u4TB1ZkErvkBYoH1quEPuBUDgMbMzxPcP1Y+Oz
-4yHJJDnp/RVmRvQbEdBNc6N9Rvk97ahfYtTxP/jgdFcrGJ2BtMQo2pSXpXDrrB2+
-BxHw1dvd5Yzw1TKwg+ZX4o+/vqGqvz0dtdQ46tewXDpPaj+PwGZsY6rp2aQW9IHR
-lRQOfc2VNNnSj3BzgXucfr2YYdhFh5iQxeuGMMY1v/D/w1WIg0vvBZIGcfK4mJO3
-7M2CYfE45k+XmCpajQ==
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIIEGjCCAwICEQCbfgZJoz5iudXukEhxKe9XMA0GCSqGSIb3DQEBBQUAMIHKMQsw
-CQYDVQQGEwJVUzEXMBUGA1UEChMOVmVyaVNpZ24sIEluYy4xHzAdBgNVBAsTFlZl
-cmlTaWduIFRydXN0IE5ldHdvcmsxOjA4BgNVBAsTMShjKSAxOTk5IFZlcmlTaWdu
-LCBJbmMuIC0gRm9yIGF1dGhvcml6ZWQgdXNlIG9ubHkxRTBDBgNVBAMTPFZlcmlT
-aWduIENsYXNzIDMgUHVibGljIFByaW1hcnkgQ2VydGlmaWNhdGlvbiBBdXRob3Jp
-dHkgLSBHMzAeFw05OTEwMDEwMDAwMDBaFw0zNjA3MTYyMzU5NTlaMIHKMQswCQYD
-VQQGEwJVUzEXMBUGA1UEChMOVmVyaVNpZ24sIEluYy4xHzAdBgNVBAsTFlZlcmlT
-aWduIFRydXN0IE5ldHdvcmsxOjA4BgNVBAsTMShjKSAxOTk5IFZlcmlTaWduLCBJ
-bmMuIC0gRm9yIGF1dGhvcml6ZWQgdXNlIG9ubHkxRTBDBgNVBAMTPFZlcmlTaWdu
-IENsYXNzIDMgUHVibGljIFByaW1hcnkgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkg
-LSBHMzCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAMu6nFL8eB8aHm8b
-N3O9+MlrlBIwT/A2R/XQkQr1F8ilYcEWQE37imGQ5XYgwREGfassbqb1EUGO+i2t
-KmFZpGcmTNDovFJbcCAEWNF6yaRpvIMXZK0Fi7zQWM6NjPXr8EJJC52XJ2cybuGu
-kxUccLwgTS8Y3pKI6GyFVxEa6X7jJhFUokWWVYPKMIno3Nij7SqAP395ZVc+FSBm
-CC+Vk7+qRy+oRpfwEuL+wgorUeZ25rdGt+INpsyow0xZVYnm6FNcHOqd8GIWC6fJ
-Xwzw3sJ2zq/3avL6QaaiMxTJ5Xpj055iN9WFZZ4O5lMkdBteHRJTW8cs54NJOxWu
-imi5V5cCAwEAATANBgkqhkiG9w0BAQUFAAOCAQEAERSWwauSCPc/L8my/uRan2Te
-2yFPhpk0djZX3dAVL8WtfxUfN2JzPtTnX84XA9s1+ivbrmAJXx5fj267Cz3qWhMe
-DGBvtcC1IyIuBwvLqXTLR7sdwdela8wv0kL9Sd2nic9TutoAWii/gt/4uhMdUIaC
-/Y4wjylGsB49Ndo4YhYYSq3mtlFs3q9i6wHQHiT+eo8SGhJouPtmmRQURVyu565p
-F4ErWjfJXir0xuKhXFSbplQAz/DxwceYMBo7Nhbbo27q/a2ywtrvAkcTisDxszGt
-TxzhT5yvDwyd93gN2PQ1VoDat20Xj50egWTh/sVFuq1ruQp6Tk9LhO5L8X3dEQ==
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIIDojCCAoqgAwIBAgIQE4Y1TR0/BvLB+WUF1ZAcYjANBgkqhkiG9w0BAQUFADBr
-MQswCQYDVQQGEwJVUzENMAsGA1UEChMEVklTQTEvMC0GA1UECxMmVmlzYSBJbnRl
-cm5hdGlvbmFsIFNlcnZpY2UgQXNzb2NpYXRpb24xHDAaBgNVBAMTE1Zpc2EgZUNv
-bW1lcmNlIFJvb3QwHhcNMDIwNjI2MDIxODM2WhcNMjIwNjI0MDAxNjEyWjBrMQsw
-CQYDVQQGEwJVUzENMAsGA1UEChMEVklTQTEvMC0GA1UECxMmVmlzYSBJbnRlcm5h
-dGlvbmFsIFNlcnZpY2UgQXNzb2NpYXRpb24xHDAaBgNVBAMTE1Zpc2EgZUNvbW1l
-cmNlIFJvb3QwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCvV95WHm6h
-2mCxlCfLF9sHP4CFT8icttD0b0/Pmdjh28JIXDqsOTPHH2qLJj0rNfVIsZHBAk4E
-lpF7sDPwsRROEW+1QK8bRaVK7362rPKgH1g/EkZgPI2h4H3PVz4zHvtH8aoVlwdV
-ZqW1LS7YgFmypw23RuwhY/81q6UCzyr0TP579ZRdhE2o8mCP2w4lPJ9zcc+U30rq
-299yOIzzlr3xF7zSujtFWsan9sYXiwGd/BmoKoMWuDpI/k4+oKsGGelT84ATB+0t
-vz8KPFUgOSwsAGl0lUq8ILKpeeUYiZGo3BxN77t+Nwtd/jmliFKMAGzsGHxBvfaL
-dXe6YJ2E5/4tAgMBAAGjQjBAMA8GA1UdEwEB/wQFMAMBAf8wDgYDVR0PAQH/BAQD
-AgEGMB0GA1UdDgQWBBQVOIMPPyw/cDMezUb+B4wg4NfDtzANBgkqhkiG9w0BAQUF
-AAOCAQEAX/FBfXxcCLkr4NWSR/pnXKUTwwMhmytMiUbPWU3J/qVAtmPN3XEolWcR
-zCSs00Rsca4BIGsDoo8Ytyk6feUWYFN4PMCvFYP3j1IzJL1kk5fui/fbGKhtcbP3
-LBfQdCVp9/5rPJS+TUtBjE7ic9DjkCJzQ83z7+pzzkWKsKZJ/0x9nXGIxHYdkFsd
-7v3M9+79YKWxehZx0RbQfBI8bGmX265fOZpwLwU8GUYEmSA20GBuYQa7FkKMcPcw
-++DbZqMAAb3mLNqRX6BGi01qnD093QVG/na/oAo85ADmJ7f/hC3euiInlhBx6yLt
-398znM/jra6O1I7mT1GvFpLgXPYHDw==
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIIEvTCCA6WgAwIBAgIBATANBgkqhkiG9w0BAQUFADCBhTELMAkGA1UEBhMCVVMx
-IDAeBgNVBAoMF1dlbGxzIEZhcmdvIFdlbGxzU2VjdXJlMRwwGgYDVQQLDBNXZWxs
-cyBGYXJnbyBCYW5rIE5BMTYwNAYDVQQDDC1XZWxsc1NlY3VyZSBQdWJsaWMgUm9v
-dCBDZXJ0aWZpY2F0ZSBBdXRob3JpdHkwHhcNMDcxMjEzMTcwNzU0WhcNMjIxMjE0
-MDAwNzU0WjCBhTELMAkGA1UEBhMCVVMxIDAeBgNVBAoMF1dlbGxzIEZhcmdvIFdl
-bGxzU2VjdXJlMRwwGgYDVQQLDBNXZWxscyBGYXJnbyBCYW5rIE5BMTYwNAYDVQQD
-DC1XZWxsc1NlY3VyZSBQdWJsaWMgUm9vdCBDZXJ0aWZpY2F0ZSBBdXRob3JpdHkw
-ggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDub7S9eeKPCCGeOARBJe+r
-WxxTkqxtnt3CxC5FlAM1iGd0V+PfjLindo8796jE2yljDpFoNoqXjopxaAkH5OjU
-Dk/41itMpBb570OYj7OeUt9tkTmPOL13i0Nj67eT/DBMHAGTthP796EfvyXhdDcs
-HqRePGj4S78NuR4uNuip5Kf4D8uCdXw1LSLWwr8L87T8bJVhHlfXBIEyg1J55oNj
-z7fLY4sR4r1e6/aN7ZVyKLSsEmLpSjPmgzKuBXWVvYSV2ypcm44uDLiBK0HmOFaf
-SZtsdvqKXfcBeYF8wYNABf5x/Qw/zE5gCQ5lRxAvAcAFP4/4s0HvWkJ+We/Slwxl
-AgMBAAGjggE0MIIBMDAPBgNVHRMBAf8EBTADAQH/MDkGA1UdHwQyMDAwLqAsoCqG
-KGh0dHA6Ly9jcmwucGtpLndlbGxzZmFyZ28uY29tL3dzcHJjYS5jcmwwDgYDVR0P
-AQH/BAQDAgHGMB0GA1UdDgQWBBQmlRkQ2eihl5H/3BnZtQQ+0nMKajCBsgYDVR0j
-BIGqMIGngBQmlRkQ2eihl5H/3BnZtQQ+0nMKaqGBi6SBiDCBhTELMAkGA1UEBhMC
-VVMxIDAeBgNVBAoMF1dlbGxzIEZhcmdvIFdlbGxzU2VjdXJlMRwwGgYDVQQLDBNX
-ZWxscyBGYXJnbyBCYW5rIE5BMTYwNAYDVQQDDC1XZWxsc1NlY3VyZSBQdWJsaWMg
-Um9vdCBDZXJ0aWZpY2F0ZSBBdXRob3JpdHmCAQEwDQYJKoZIhvcNAQEFBQADggEB
-ALkVsUSRzCPIK0134/iaeycNzXK7mQDKfGYZUMbVmO2rvwNa5U3lHshPcZeG1eMd
-/ZDJPHV3V3p9+N701NX3leZ0bh08rnyd2wIDBSxxSyU+B+NemvVmFymIGjifz6pB
-A4SXa5M4esowRBskRDPQ5NHcKDj0E0M1NSljqHyita04pO2t/caaH/+Xc/77szWn
-k4bGdpEA5qxRFsQnMlzbc9qlk1eOPm01JghZ1edE13YgY+esE2fDbbFwRnzVlhE9
-iW9dqKHrjQrawx0zbKPqZxmamX9LPYNRKh3KL4YMon4QLSvUFpULB6ouFJJJtylv
-2G0xffX8oRAHh84vWdw+WNs=
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIIFdjCCA16gAwIBAgIQXmjWEXGUY1BWAGjzPsnFkTANBgkqhkiG9w0BAQUFADBV
-MQswCQYDVQQGEwJDTjEaMBgGA1UEChMRV29TaWduIENBIExpbWl0ZWQxKjAoBgNV
-BAMTIUNlcnRpZmljYXRpb24gQXV0aG9yaXR5IG9mIFdvU2lnbjAeFw0wOTA4MDgw
-MTAwMDFaFw0zOTA4MDgwMTAwMDFaMFUxCzAJBgNVBAYTAkNOMRowGAYDVQQKExFX
-b1NpZ24gQ0EgTGltaXRlZDEqMCgGA1UEAxMhQ2VydGlmaWNhdGlvbiBBdXRob3Jp
-dHkgb2YgV29TaWduMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAvcqN
-rLiRFVaXe2tcesLea9mhsMMQI/qnobLMMfo+2aYpbxY94Gv4uEBf2zmoAHqLoE1U
-fcIiePyOCbiohdfMlZdLdNiefvAA5A6JrkkoRBoQmTIPJYhTpA2zDxIIFgsDcScc
-f+Hb0v1naMQFXQoOXXDX2JegvFNBmpGN9J42Znp+VsGQX+axaCA2pIwkLCxHC1l2
-ZjC1vt7tj/id07sBMOby8w7gLJKA84X5KIq0VC6a7fd2/BVoFutKbOsuEo/Uz/4M
-x1wdC34FMr5esAkqQtXJTpCzWQ27en7N1QhatH/YHGkR+ScPewavVIMYe+HdVHpR
-aG53/Ma/UkpmRqGyZxq7o093oL5d//xWC0Nyd5DKnvnyOfUNqfTq1+ezEC8wQjch
-zDBwyYaYD8xYTYO7feUapTeNtqwylwA6Y3EkHp43xP901DfA4v6IRmAR3Qg/UDar
-uHqklWJqbrDKaiFaafPz+x1wOZXzp26mgYmhiMU7ccqjUu6Du/2gd/Tkb+dC221K
-mYo0SLwX3OSACCK28jHAPwQ+658geda4BmRkAjHXqc1S+4RFaQkAKtxVi8QGRkvA
-Sh0JWzko/amrzgD5LkhLJuYwTKVYyrREgk/nkR4zw7CT/xH8gdLKH3Ep3XZPkiWv
-HYG3Dy+MwwbMLyejSuQOmbp8HkUff6oZRZb9/D0CAwEAAaNCMEAwDgYDVR0PAQH/
-BAQDAgEGMA8GA1UdEwEB/wQFMAMBAf8wHQYDVR0OBBYEFOFmzw7R8bNLtwYgFP6H
-EtX2/vs+MA0GCSqGSIb3DQEBBQUAA4ICAQCoy3JAsnbBfnv8rWTjMnvMPLZdRtP1
-LOJwXcgu2AZ9mNELIaCJWSQBnfmvCX0KI4I01fx8cpm5o9dU9OpScA7F9dY74ToJ
-MuYhOZO9sxXqT2r09Ys/L3yNWC7F4TmgPsc9SnOeQHrAK2GpZ8nzJLmzbVUsWh2e
-JXLOC62qx1ViC777Y7NhRCOjy+EaDveaBk3e1CNOIZZbOVtXHS9dCF4Jef98l7VN
-g64N1uajeeAz0JmWAjCnPv/So0M/BVoG6kQC2nz4SNAzqfkHx5Xh9T71XXG68pWp
-dIhhWeO/yloTunK0jF02h+mmxTwTv97QRCbut+wucPrXnbes5cVAWubXbHssw1ab
-R80LzvobtCHXt2a49CUwi1wNuepnsvRtrtWhnk/Yn+knArAdBtaP4/tIEp9/EaEQ
-PkxROpaw0RPxx9gmrjrKkcRpnd8BKWRRb2jaFOwIQZeQjdCygPLPwj2/kWjFgGce
-xGATVdVhmVd8upUPYUk6ynW8yQqTP2cOEvIo4jEbwFcW3wh8GcF+Dx+FHgo2fFt+
-J7x6v+Db9NpSvd4MVHAxkUOVyLzwPt0JfjBkUO1/AaQzZ01oT74V77D2AhGiGxMl
-OtzCWfHjXEa7ZywCRuoeSKbmW9m1vFGikpbbqsY3Iqb+zCB0oy2pLmvLwIIRIbWT
-ee5Ehr7XHuQe+w==
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIIFWDCCA0CgAwIBAgIQUHBrzdgT/BtOOzNy0hFIjTANBgkqhkiG9w0BAQsFADBG
-MQswCQYDVQQGEwJDTjEaMBgGA1UEChMRV29TaWduIENBIExpbWl0ZWQxGzAZBgNV
-BAMMEkNBIOayg+mAmuagueivgeS5pjAeFw0wOTA4MDgwMTAwMDFaFw0zOTA4MDgw
-MTAwMDFaMEYxCzAJBgNVBAYTAkNOMRowGAYDVQQKExFXb1NpZ24gQ0EgTGltaXRl
-ZDEbMBkGA1UEAwwSQ0Eg5rKD6YCa5qC56K+B5LmmMIICIjANBgkqhkiG9w0BAQEF
-AAOCAg8AMIICCgKCAgEA0EkhHiX8h8EqwqzbdoYGTufQdDTc7WU1/FDWiD+k8H/r
-D195L4mx/bxjWDeTmzj4t1up+thxx7S8gJeNbEvxUNUqKaqoGXqW5pWOdO2XCld1
-9AXbbQs5uQF/qvbW2mzmBeCkTVL829B0txGMe41P/4eDrv8FAxNXUDf+jJZSEExf
-v5RxadmWPgxDT74wwJ85dE8GRV2j1lY5aAfMh09Qd5Nx2UQIsYo06Yms25tO4dnk
-UkWMLhQfkWsZHWgpLFbE4h4TV2TwYeO5Ed+w4VegG63XX9Gv2ystP9Bojg/qnw+L
-NVgbExz03jWhCl3W6t8Sb8D7aQdGctyB9gQjF+BNdeFyb7Ao65vh4YOhn0pdr8yb
-+gIgthhid5E7o9Vlrdx8kHccREGkSovrlXLp9glk3Kgtn3R46MGiCWOc76DbT52V
-qyBPt7D3h1ymoOQ3OMdc4zUPLK2jgKLsLl3Az+2LBcLmc272idX10kaO6m1jGx6K
-yX2m+Jzr5dVjhU1zZmkR/sgO9MHHZklTfuQZa/HpelmjbX7FF+Ynxu8b22/8DU0G
-AbQOXDBGVWCvOGU6yke6rCzMRh+yRpY/8+0mBe53oWprfi1tWFxK1I5nuPHa1UaK
-J/kR8slC/k7e3x9cxKSGhxYzoacXGKUN5AXlK8IrC6KVkLn9YDxOiT7nnO4fuwEC
-AwEAAaNCMEAwDgYDVR0PAQH/BAQDAgEGMA8GA1UdEwEB/wQFMAMBAf8wHQYDVR0O
-BBYEFOBNv9ybQV0T6GTwp+kVpOGBwboxMA0GCSqGSIb3DQEBCwUAA4ICAQBqinA4
-WbbaixjIvirTthnVZil6Xc1bL3McJk6jfW+rtylNpumlEYOnOXOvEESS5iVdT2H6
-yAa+Tkvv/vMx/sZ8cApBWNromUuWyXi8mHwCKe0JgOYKOoICKuLJL8hWGSbueBwj
-/feTZU7n85iYr83d2Z5AiDEoOqsuC7CsDCT6eiaY8xJhEPRdF/d+4niXVOKM6Cm6
-jBAyvd0zaziGfjk9DgNyp115j0WKWa5bIW4xRtVZjc8VX90xJc/bYNaBRHIpAlf2
-ltTW/+op2znFuCyKGo3Oy+dCMYYFaA6eFN0AkLppRQjbbpCBhqcqBT/mhDn4t/lX
-X0ykeVoQDF7Va/81XwVRHmyjdanPUIPTfPRm94KNPQx96N97qA4bLJyuQHCH2u2n
-FoJavjVsIE4iYdm8UXrNemHcSxH5/mc0zy4EZmFcV5cjjPOGG0jfKq+nwf/Yjj4D
-u9gqsPoUJbJRa4ZDhS4HIxaAjUz7tGM7zMN07RujHv41D198HRaG9Q7DlfEvr10l
-O1Hm13ZBONFLAzkopR6RctR9q5czxNM+4Gm2KHmgCY0c0f9BckgG/Jou5yD5m6Le
-ie2uPAmvylezkolwQOQvT8Jwg0DXJCxr5wkf09XHwQj02w47HAcLQxGEIYbpgNR1
-2KvxAmLBsX5VYc8T1yaw15zLKYs4SgsOkI26oQ==
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIIEMDCCAxigAwIBAgIQUJRs7Bjq1ZxN1ZfvdY+grTANBgkqhkiG9w0BAQUFADCB
-gjELMAkGA1UEBhMCVVMxHjAcBgNVBAsTFXd3dy54cmFtcHNlY3VyaXR5LmNvbTEk
-MCIGA1UEChMbWFJhbXAgU2VjdXJpdHkgU2VydmljZXMgSW5jMS0wKwYDVQQDEyRY
-UmFtcCBHbG9iYWwgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkwHhcNMDQxMTAxMTcx
-NDA0WhcNMzUwMTAxMDUzNzE5WjCBgjELMAkGA1UEBhMCVVMxHjAcBgNVBAsTFXd3
-dy54cmFtcHNlY3VyaXR5LmNvbTEkMCIGA1UEChMbWFJhbXAgU2VjdXJpdHkgU2Vy
-dmljZXMgSW5jMS0wKwYDVQQDEyRYUmFtcCBHbG9iYWwgQ2VydGlmaWNhdGlvbiBB
-dXRob3JpdHkwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCYJB69FbS6
-38eMpSe2OAtp87ZOqCwuIR1cRN8hXX4jdP5efrRKt6atH67gBhbim1vZZ3RrXYCP
-KZ2GG9mcDZhtdhAoWORlsH9KmHmf4MMxfoArtYzAQDsRhtDLooY2YKTVMIJt2W7Q
-DxIEM5dfT2Fa8OT5kavnHTu86M/0ay00fOJIYRyO82FEzG+gSqmUsE3a56k0enI4
-qEHMPJQRfevIpoy3hsvKMzvZPTeL+3o+hiznc9cKV6xkmxnr9A8ECIqsAxcZZPRa
-JSKNNCyy9mgdEm3Tih4U2sSPpuIjhdV6Db1q4Ons7Be7QhtnqiXtRYMh/MHJfNVi
-PvryxS3T/dRlAgMBAAGjgZ8wgZwwEwYJKwYBBAGCNxQCBAYeBABDAEEwCwYDVR0P
-BAQDAgGGMA8GA1UdEwEB/wQFMAMBAf8wHQYDVR0OBBYEFMZPoj0GY4QJnM5i5ASs
-jVy16bYbMDYGA1UdHwQvMC0wK6ApoCeGJWh0dHA6Ly9jcmwueHJhbXBzZWN1cml0
-eS5jb20vWEdDQS5jcmwwEAYJKwYBBAGCNxUBBAMCAQEwDQYJKoZIhvcNAQEFBQAD
-ggEBAJEVOQMBG2f7Shz5CmBbodpNl2L5JFMn14JkTpAuw0kbK5rc/Kh4ZzXxHfAR
-vbdI4xD2Dd8/0sm2qlWkSLoC295ZLhVbO50WfUfXN+pfTXYSNrsf16GBBEYgoyxt
-qZ4Bfj8pzgCT3/3JknOJiWSe5yvkHJEs0rnOfc5vMZnT5r7SHpDwCRR5XCOrTdLa
-IR9NmXmd4c8nnxCbHIgNsIpkQTG4DmyQJKSbXHGPurt+HBvbaoAPIbzp26a3QPSy
-i6mx5O+aGtA9aZnuqCij4Tyz8LIRnM98QObd50N9otg6tamN8jSZxNQQ4Qb9CYQQ
-O+7ETPTsJ3xCwnR8gooJybQDJbw=
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIIDODCCAiCgAwIBAgIGIAYFFnACMA0GCSqGSIb3DQEBBQUAMDsxCzAJBgNVBAYT
-AlJPMREwDwYDVQQKEwhjZXJ0U0lHTjEZMBcGA1UECxMQY2VydFNJR04gUk9PVCBD
-QTAeFw0wNjA3MDQxNzIwMDRaFw0zMTA3MDQxNzIwMDRaMDsxCzAJBgNVBAYTAlJP
-MREwDwYDVQQKEwhjZXJ0U0lHTjEZMBcGA1UECxMQY2VydFNJR04gUk9PVCBDQTCC
-ASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBALczuX7IJUqOtdu0KBuqV5Do
-0SLTZLrTk+jUrIZhQGpgV2hUhE28alQCBf/fm5oqrl0Hj0rDKH/v+yv6efHHrfAQ
-UySQi2bJqIirr1qjAOm+ukbuW3N7LBeCgV5iLKECZbO9xSsAfsT8AzNXDe3i+s5d
-RdY4zTW2ssHQnIFKquSyAVwdj1+ZxLGt24gh65AIgoDzMKND5pCCrlUoSe1b16kQ
-OA7+j0xbm0bqQfWwCHTD0IgztnzXdN/chNFDDnU5oSVAKOp4yw4sLjmdjItuFhwv
-JoIQ4uNllAoEwF73XVv4EOLQunpL+943AAAaWyjj0pxzPjKHmKHJUS/X3qwzs08C
-AwEAAaNCMEAwDwYDVR0TAQH/BAUwAwEB/zAOBgNVHQ8BAf8EBAMCAcYwHQYDVR0O
-BBYEFOCMm9slSbPxfIbWskKHC9BroNnkMA0GCSqGSIb3DQEBBQUAA4IBAQA+0hyJ
-LjX8+HXd5n9liPRyTMks1zJO890ZeUe9jjtbkw9QSSQTaxQGcu8J06Gh40CEyecY
-MnQ8SG4Pn0vU9x7Tk4ZkVJdjclDVVc/6IJMCopvDI5NOFlV2oHB5bc0hH88vLbwZ
-44gx+FkagQnIl6Z0x2DEW8xXjrJ1/RsCCdtZb3KTafcxQdaIOL+Hsr0Wefmq5L6I
-Jd1hJyMctTEHBDa0GpC9oHRxUIltvBTjD4au8as+x6AJzKNI0eDbZOeStc+vckNw
-i/nDhDwTqn6Sm1dTk/pwwpEOMfmbZ13pljheX7NzTogVZ96edhBiIL5VaZVDADlN
-9u6wWk5JRFRYX0KD
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIIFsDCCA5igAwIBAgIQFci9ZUdcr7iXAF7kBtK8nTANBgkqhkiG9w0BAQUFADBe
-MQswCQYDVQQGEwJUVzEjMCEGA1UECgwaQ2h1bmdod2EgVGVsZWNvbSBDby4sIEx0
-ZC4xKjAoBgNVBAsMIWVQS0kgUm9vdCBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eTAe
-Fw0wNDEyMjAwMjMxMjdaFw0zNDEyMjAwMjMxMjdaMF4xCzAJBgNVBAYTAlRXMSMw
-IQYDVQQKDBpDaHVuZ2h3YSBUZWxlY29tIENvLiwgTHRkLjEqMCgGA1UECwwhZVBL
-SSBSb290IENlcnRpZmljYXRpb24gQXV0aG9yaXR5MIICIjANBgkqhkiG9w0BAQEF
-AAOCAg8AMIICCgKCAgEA4SUP7o3biDN1Z82tH306Tm2d0y8U82N0ywEhajfqhFAH
-SyZbCUNsIZ5qyNUD9WBpj8zwIuQf5/dqIjG3LBXy4P4AakP/h2XGtRrBp0xtInAh
-ijHyl3SJCRImHJ7K2RKilTza6We/CKBk49ZCt0Xvl/T29de1ShUCWH2YWEtgvM3X
-DZoTM1PRYfl61dd4s5oz9wCGzh1NlDivqOx4UXCKXBCDUSH3ET00hl7lSM2XgYI1
-TBnsZfZrxQWh7kcT1rMhJ5QQCtkkO7q+RBNGMD+XPNjX12ruOzjjK9SXDrkb5wdJ
-fzcq+Xd4z1TtW0ado4AOkUPB1ltfFLqfpo0kR0BZv3I4sjZsN/+Z0V0OWQqraffA
-sgRFelQArr5T9rXn4fg8ozHSqf4hUmTFpmfwdQcGlBSBVcYn5AGPF8Fqcde+S/uU
-WH1+ETOxQvdibBjWzwloPn9s9h6PYq2lY9sJpx8iQkEeb5mKPtf5P0B6ebClAZLS
-nT0IFaUQAS2zMnaolQ2zepr7BxB4EW/hj8e6DyUadCrlHJhBmd8hh+iVBmoKs2pH
-dmX2Os+PYhcZewoozRrSgx4hxyy/vv9haLdnG7t4TY3OZ+XkwY63I2binZB1NJip
-NiuKmpS5nezMirH4JYlcWrYvjB9teSSnUmjDhDXiZo1jDiVN1Rmy5nk3pyKdVDEC
-AwEAAaNqMGgwHQYDVR0OBBYEFB4M97Zn8uGSJglFwFU5Lnc/QkqiMAwGA1UdEwQF
-MAMBAf8wOQYEZyoHAAQxMC8wLQIBADAJBgUrDgMCGgUAMAcGBWcqAwAABBRFsMLH
-ClZ87lt4DJX5GFPBphzYEDANBgkqhkiG9w0BAQUFAAOCAgEACbODU1kBPpVJufGB
-uvl2ICO1J2B01GqZNF5sAFPZn/KmsSQHRGoqxqWOeBLoR9lYGxMqXnmbnwoqZ6Yl
-PwZpVnPDimZI+ymBV3QGypzqKOg4ZyYr8dW1P2WT+DZdjo2NQCCHGervJ8A9tDkP
-JXtoUHRVnAxZfVo9QZQlUgjgRywVMRnVvwdVxrsStZf0X4OFunHB2WyBEXYKCrC/
-gpf36j36+uwtqSiUO1bd0lEursC9CBWMd1I0ltabrNMdjmEPNXubrjlpC2JgQCA2
-j6/7Nu4tCEoduL+bXPjqpRugc6bY+G7gMwRfaKonh+3ZwZCc7b3jajWvY9+rGNm6
-5ulK6lCKD2GTHuItGeIwlDWSXQ62B68ZgI9HkFFLLk3dheLSClIKF5r8GrBQAuUB
-o2M3IUxExJtRmREOc5wGj1QupyheRDmHVi03vYVElOEMSyycw5KFNGHLD7ibSkNS
-/jQ6fbjpKdx2qcgw+BRxgMYeNkh0IkFch4LoGHGLQYlE535YW6i4jRPpp2zDR+2z
-Gp1iro2C6pSe3VkQw63d4k3jMdXH7OjysP6SHhYKGvzZ8/gntsm+HbRsZJB/9OTE
-W9c3rkIO3aQab3yIVMUWbuF6aC74Or8NpDyJO3inTmODBCEIZ43ygknQW/2xzQ+D
-hNQ+IIX3Sj0rnP0qCglN6oH4EZw=
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIIEIDCCAwigAwIBAgIQNE7VVyDV7exJ9C/ON9srbTANBgkqhkiG9w0BAQUFADCB
-qTELMAkGA1UEBhMCVVMxFTATBgNVBAoTDHRoYXd0ZSwgSW5jLjEoMCYGA1UECxMf
-Q2VydGlmaWNhdGlvbiBTZXJ2aWNlcyBEaXZpc2lvbjE4MDYGA1UECxMvKGMpIDIw
-MDYgdGhhd3RlLCBJbmMuIC0gRm9yIGF1dGhvcml6ZWQgdXNlIG9ubHkxHzAdBgNV
-BAMTFnRoYXd0ZSBQcmltYXJ5IFJvb3QgQ0EwHhcNMDYxMTE3MDAwMDAwWhcNMzYw
-NzE2MjM1OTU5WjCBqTELMAkGA1UEBhMCVVMxFTATBgNVBAoTDHRoYXd0ZSwgSW5j
-LjEoMCYGA1UECxMfQ2VydGlmaWNhdGlvbiBTZXJ2aWNlcyBEaXZpc2lvbjE4MDYG
-A1UECxMvKGMpIDIwMDYgdGhhd3RlLCBJbmMuIC0gRm9yIGF1dGhvcml6ZWQgdXNl
-IG9ubHkxHzAdBgNVBAMTFnRoYXd0ZSBQcmltYXJ5IFJvb3QgQ0EwggEiMA0GCSqG
-SIb3DQEBAQUAA4IBDwAwggEKAoIBAQCsoPD7gFnUnMekz52hWXMJEEUMDSxuaPFs
-W0hoSVk3/AszGcJ3f8wQLZU0HObrTQmnHNK4yZc2AreJ1CRfBsDMRJSUjQJib+ta
-3RGNKJpchJAQeg29dGYvajig4tVUROsdB58Hum/u6f1OCyn1PoSgAfGcq/gcfomk
-6KHYcWUNo1F77rzSImANuVud37r8UVsLr5iy6S7pBOhih94ryNdOwUxkHt3Ph1i6
-Sk/KaAcdHJ1KxtUvkcx8cXIcxcBn6zL9yZJclNqFwJu/U30rCfSMnZEfl2pSy94J
-NqR32HuHUETVPm4pafs5SSYeCaWAe0At6+gnhcn+Yf1+5nyXHdWdAgMBAAGjQjBA
-MA8GA1UdEwEB/wQFMAMBAf8wDgYDVR0PAQH/BAQDAgEGMB0GA1UdDgQWBBR7W0XP
-r87Lev0xkhpqtvNG61dIUDANBgkqhkiG9w0BAQUFAAOCAQEAeRHAS7ORtvzw6WfU
-DW5FvlXok9LOAz/t2iWwHVfLHjp2oEzsUHboZHIMpKnxuIvW1oeEuzLlQRHAd9mz
-YJ3rG9XRbkREqaYB7FViHXe4XI5ISXycO1cRrK1zN44veFyQaEfZYGDm/Ac9IiAX
-xPcW6cTYcvnIc3zfFi8VqT79aie2oetaupgf1eNNZAqdE8hhuvU5HIe6uL17In/2
-/qxAeeWsEG89jxt5dovEN7MhGITlNgDrYyCZuen+MwS7QcjBAvlEYyCegc5C09Y/
-LHbTY5xZ3Y+m4Q6gLkH3LpVHz7z9M/P2C2F+fpErgUfCJzDupxBdN49cOSvkBPB7
-jVaMaA==
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIICiDCCAg2gAwIBAgIQNfwmXNmET8k9Jj1Xm67XVjAKBggqhkjOPQQDAzCBhDEL
-MAkGA1UEBhMCVVMxFTATBgNVBAoTDHRoYXd0ZSwgSW5jLjE4MDYGA1UECxMvKGMp
-IDIwMDcgdGhhd3RlLCBJbmMuIC0gRm9yIGF1dGhvcml6ZWQgdXNlIG9ubHkxJDAi
-BgNVBAMTG3RoYXd0ZSBQcmltYXJ5IFJvb3QgQ0EgLSBHMjAeFw0wNzExMDUwMDAw
-MDBaFw0zODAxMTgyMzU5NTlaMIGEMQswCQYDVQQGEwJVUzEVMBMGA1UEChMMdGhh
-d3RlLCBJbmMuMTgwNgYDVQQLEy8oYykgMjAwNyB0aGF3dGUsIEluYy4gLSBGb3Ig
-YXV0aG9yaXplZCB1c2Ugb25seTEkMCIGA1UEAxMbdGhhd3RlIFByaW1hcnkgUm9v
-dCBDQSAtIEcyMHYwEAYHKoZIzj0CAQYFK4EEACIDYgAEotWcgnuVnfFSeIf+iha/
-BebfowJPDQfGAFG6DAJSLSKkQjnE/o/qycG+1E3/n3qe4rF8mq2nhglzh9HnmuN6
-papu+7qzcMBniKI11KOasf2twu8x+qi58/sIxpHR+ymVo0IwQDAPBgNVHRMBAf8E
-BTADAQH/MA4GA1UdDwEB/wQEAwIBBjAdBgNVHQ4EFgQUmtgAMADna3+FGO6Lts6K
-DPgR4bswCgYIKoZIzj0EAwMDaQAwZgIxAN344FdHW6fmCsO99YCKlzUNG4k8VIZ3
-KMqh9HneteY4sPBlcIx/AlTCv//YoT7ZzwIxAMSNlPzcU9LcnXgWHxUzI1NS41ox
-XZ3Krr0TKUQNJ1uo52icEvdYPy5yAlejj6EULg==
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIIEKjCCAxKgAwIBAgIQYAGXt0an6rS0mtZLL/eQ+zANBgkqhkiG9w0BAQsFADCB
-rjELMAkGA1UEBhMCVVMxFTATBgNVBAoTDHRoYXd0ZSwgSW5jLjEoMCYGA1UECxMf
-Q2VydGlmaWNhdGlvbiBTZXJ2aWNlcyBEaXZpc2lvbjE4MDYGA1UECxMvKGMpIDIw
-MDggdGhhd3RlLCBJbmMuIC0gRm9yIGF1dGhvcml6ZWQgdXNlIG9ubHkxJDAiBgNV
-BAMTG3RoYXd0ZSBQcmltYXJ5IFJvb3QgQ0EgLSBHMzAeFw0wODA0MDIwMDAwMDBa
-Fw0zNzEyMDEyMzU5NTlaMIGuMQswCQYDVQQGEwJVUzEVMBMGA1UEChMMdGhhd3Rl
-LCBJbmMuMSgwJgYDVQQLEx9DZXJ0aWZpY2F0aW9uIFNlcnZpY2VzIERpdmlzaW9u
-MTgwNgYDVQQLEy8oYykgMjAwOCB0aGF3dGUsIEluYy4gLSBGb3IgYXV0aG9yaXpl
-ZCB1c2Ugb25seTEkMCIGA1UEAxMbdGhhd3RlIFByaW1hcnkgUm9vdCBDQSAtIEcz
-MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAsr8nLPvb2FvdeHsbnndm
-gcs+vHyu86YnmjSjaDFxODNi5PNxZnmxqWWjpYvVj2AtP0LMqmsywCPLLEHd5N/8
-YZzic7IilRFDGF/Eth9XbAoFWCLINkw6fKXRz4aviKdEAhN0cXMKQlkC+BsUa0Lf
-b1+6a4KinVvnSr0eAXLbS3ToO39/fR8EtCab4LRarEc9VbjXsCZSKAExQGbY2SS9
-9irY7CFJXJv2eul/VTV+lmuNk5Mny5K76qxAwJ/C+IDPXfRa3M50hqY+bAtTyr2S
-zhkGcuYMXDhpxwTWvGzOW/b3aJzcJRVIiKHpqfiYnODz1TEoYRFsZ5aNOZnLwkUk
-OQIDAQABo0IwQDAPBgNVHRMBAf8EBTADAQH/MA4GA1UdDwEB/wQEAwIBBjAdBgNV
-HQ4EFgQUrWyqlGCc7eT/+j4KdCtjA/e2Wb8wDQYJKoZIhvcNAQELBQADggEBABpA
-2JVlrAmSicY59BDlqQ5mU1143vokkbvnRFHfxhY0Cu9qRFHqKweKA3rD6z8KLFIW
-oCtDuSWQP3CpMyVtRRooOyfPqsMpQhvfO0zAMzRbQYi/aytlryjvsvXDqmbOe1bu
-t8jLZ8HJnBoYuMTDSQPxYA5QzUbF83d597YV4Djbxy8ooAw/dyZ02SUS2jHaGh7c
-KUGRIjxpp7sC8rZcJwOJ9Abqm+RyguOhCcHpABnTPtRwa7pxpqpYrvS76Wy274fM
-m7v/OeZWYdMKp8RcTGB7BXcmer/YB1IsYvdwY9k5vG8cwnncdimvzsUsZAReiDZu
-MdRAGmI0Nj81Aa6sY6A=
------END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIIE2DCCBEGgAwIBAgIEN0rSQzANBgkqhkiG9w0BAQUFADCBwzELMAkGA1UEBhMC
+VVMxFDASBgNVBAoTC0VudHJ1c3QubmV0MTswOQYDVQQLEzJ3d3cuZW50cnVzdC5u
+ZXQvQ1BTIGluY29ycC4gYnkgcmVmLiAobGltaXRzIGxpYWIuKTElMCMGA1UECxMc
+KGMpIDE5OTkgRW50cnVzdC5uZXQgTGltaXRlZDE6MDgGA1UEAxMxRW50cnVzdC5u
+ZXQgU2VjdXJlIFNlcnZlciBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eTAeFw05OTA1
+MjUxNjA5NDBaFw0xOTA1MjUxNjM5NDBaMIHDMQswCQYDVQQGEwJVUzEUMBIGA1UE
+ChMLRW50cnVzdC5uZXQxOzA5BgNVBAsTMnd3dy5lbnRydXN0Lm5ldC9DUFMgaW5j
+b3JwLiBieSByZWYuIChsaW1pdHMgbGlhYi4pMSUwIwYDVQQLExwoYykgMTk5OSBF
+bnRydXN0Lm5ldCBMaW1pdGVkMTowOAYDVQQDEzFFbnRydXN0Lm5ldCBTZWN1cmUg
+U2VydmVyIENlcnRpZmljYXRpb24gQXV0aG9yaXR5MIGdMA0GCSqGSIb3DQEBAQUA
+A4GLADCBhwKBgQDNKIM0VBuJ8w+vN5Ex/68xYMmo6LIQaO2f55M28Qpku0f1BBc/
+I0dNxScZgSYMVHINiC3ZH5oSn7yzcdOAGT9HZnuMNSjSuQrfJNqc1lB5gXpa0zf3
+wkrYKZImZNHkmGw6AIr1NJtl+O3jEP/9uElY3KDegjlrgbEWGWG5VLbmQwIBA6OC
+AdcwggHTMBEGCWCGSAGG+EIBAQQEAwIABzCCARkGA1UdHwSCARAwggEMMIHeoIHb
+oIHYpIHVMIHSMQswCQYDVQQGEwJVUzEUMBIGA1UEChMLRW50cnVzdC5uZXQxOzA5
+BgNVBAsTMnd3dy5lbnRydXN0Lm5ldC9DUFMgaW5jb3JwLiBieSByZWYuIChsaW1p
+dHMgbGlhYi4pMSUwIwYDVQQLExwoYykgMTk5OSBFbnRydXN0Lm5ldCBMaW1pdGVk
+MTowOAYDVQQDEzFFbnRydXN0Lm5ldCBTZWN1cmUgU2VydmVyIENlcnRpZmljYXRp
+b24gQXV0aG9yaXR5MQ0wCwYDVQQDEwRDUkwxMCmgJ6AlhiNodHRwOi8vd3d3LmVu
+dHJ1c3QubmV0L0NSTC9uZXQxLmNybDArBgNVHRAEJDAigA8xOTk5MDUyNTE2MDk0
+MFqBDzIwMTkwNTI1MTYwOTQwWjALBgNVHQ8EBAMCAQYwHwYDVR0jBBgwFoAU8Bdi
+E1U9s/8KAGv7UISX8+1i0BowHQYDVR0OBBYEFPAXYhNVPbP/CgBr+1CEl/PtYtAa
+MAwGA1UdEwQFMAMBAf8wGQYJKoZIhvZ9B0EABAwwChsEVjQuMAMCBJAwDQYJKoZI
+hvcNAQEFBQADgYEAkNwwAvpkdMKnCqV8IY00F6j7Rw7/JXyNEwr75Ji174z4xRAN
+95K+8cPV1ZVqBLssziY2ZcgxxufuP+NXdYR6Ee9GTxj005i7qIcyunL2POI9n9cd
+2cNgQ4xYDiKWL2KjLB+6rQXvqzJ4h6BUcxm1XAX5Uj5tLUUL9wqT6u0G+bI=
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIIDIDCCAomgAwIBAgIENd70zzANBgkqhkiG9w0BAQUFADBOMQswCQYDVQQGEwJV
+UzEQMA4GA1UEChMHRXF1aWZheDEtMCsGA1UECxMkRXF1aWZheCBTZWN1cmUgQ2Vy
+dGlmaWNhdGUgQXV0aG9yaXR5MB4XDTk4MDgyMjE2NDE1MVoXDTE4MDgyMjE2NDE1
+MVowTjELMAkGA1UEBhMCVVMxEDAOBgNVBAoTB0VxdWlmYXgxLTArBgNVBAsTJEVx
+dWlmYXggU2VjdXJlIENlcnRpZmljYXRlIEF1dGhvcml0eTCBnzANBgkqhkiG9w0B
+AQEFAAOBjQAwgYkCgYEAwV2xWGcIYu6gmi0fCG2RFGiYCh7+2gRvE4RiIcPRfM6f
+BeC4AfBONOziipUEZKzxa1NfBbPLZ4C/QgKO/t0BCezhABRP/PvwDN1Dulsr4R+A
+cJkVV5MW8Q+XarfCaCMczE1ZMKxRHjuvK9buY0V7xdlfUNLjUA86iOe/FP3gx7kC
+AwEAAaOCAQkwggEFMHAGA1UdHwRpMGcwZaBjoGGkXzBdMQswCQYDVQQGEwJVUzEQ
+MA4GA1UEChMHRXF1aWZheDEtMCsGA1UECxMkRXF1aWZheCBTZWN1cmUgQ2VydGlm
+aWNhdGUgQXV0aG9yaXR5MQ0wCwYDVQQDEwRDUkwxMBoGA1UdEAQTMBGBDzIwMTgw
+ODIyMTY0MTUxWjALBgNVHQ8EBAMCAQYwHwYDVR0jBBgwFoAUSOZo+SvSspXXR9gj
+IBBPM5iQn9QwHQYDVR0OBBYEFEjmaPkr0rKV10fYIyAQTzOYkJ/UMAwGA1UdEwQF
+MAMBAf8wGgYJKoZIhvZ9B0EABA0wCxsFVjMuMGMDAgbAMA0GCSqGSIb3DQEBBQUA
+A4GBAFjOKer89961zgK5F7WF0bnj4JXMJTENAKaSbn+2kmOeUJXRmm/kEd5jhW6Y
+7qj/WsjTVbJmcVfewCHrPSqnI0kBBIZCe/zuf6IWUrVnZ9NA2zsmWLIodz2uFHdh
+1voqZiegDfqnc1zqcPGUIWVEX/r87yloqaKHee9570+sB3c4
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIICkDCCAfmgAwIBAgIBATANBgkqhkiG9w0BAQQFADBaMQswCQYDVQQGEwJVUzEc
+MBoGA1UEChMTRXF1aWZheCBTZWN1cmUgSW5jLjEtMCsGA1UEAxMkRXF1aWZheCBT
+ZWN1cmUgR2xvYmFsIGVCdXNpbmVzcyBDQS0xMB4XDTk5MDYyMTA0MDAwMFoXDTIw
+MDYyMTA0MDAwMFowWjELMAkGA1UEBhMCVVMxHDAaBgNVBAoTE0VxdWlmYXggU2Vj
+dXJlIEluYy4xLTArBgNVBAMTJEVxdWlmYXggU2VjdXJlIEdsb2JhbCBlQnVzaW5l
+c3MgQ0EtMTCBnzANBgkqhkiG9w0BAQEFAAOBjQAwgYkCgYEAuucXkAJlsTRVPEnC
+UdXfp9E3j9HngXNBUmCbnaEXJnitx7HoJpQytd4zjTov2/KaelpzmKNc6fuKcxtc
+58O/gGzNqfTWK8D3+ZmqY6KxRwIP1ORROhI8bIpaVIRw28HFkM9yRcuoWcDNM50/
+o5brhTMhHD4ePmBudpxnhcXIw2ECAwEAAaNmMGQwEQYJYIZIAYb4QgEBBAQDAgAH
+MA8GA1UdEwEB/wQFMAMBAf8wHwYDVR0jBBgwFoAUvqigdHJQa0S3ySPY+6j/s1dr
+aGwwHQYDVR0OBBYEFL6ooHRyUGtEt8kj2Puo/7NXa2hsMA0GCSqGSIb3DQEBBAUA
+A4GBADDiAVGqx+pf2rnQZQ8w1j7aDRRJbpGTJxQx78T3LUX47Me/okENI7SS+RkA
+Z70Br83gcfxaz2TE4JaY0KNA4gGK7ycH8WUBikQtBmV1UsCGECAhX2xrD2yuCRyv
+8qIYNMR1pHMc8Y3c7635s3a0kr/clRAevsvIO1qEYBlWlKlV
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIICgjCCAeugAwIBAgIBBDANBgkqhkiG9w0BAQQFADBTMQswCQYDVQQGEwJVUzEc
+MBoGA1UEChMTRXF1aWZheCBTZWN1cmUgSW5jLjEmMCQGA1UEAxMdRXF1aWZheCBT
+ZWN1cmUgZUJ1c2luZXNzIENBLTEwHhcNOTkwNjIxMDQwMDAwWhcNMjAwNjIxMDQw
+MDAwWjBTMQswCQYDVQQGEwJVUzEcMBoGA1UEChMTRXF1aWZheCBTZWN1cmUgSW5j
+LjEmMCQGA1UEAxMdRXF1aWZheCBTZWN1cmUgZUJ1c2luZXNzIENBLTEwgZ8wDQYJ
+KoZIhvcNAQEBBQADgY0AMIGJAoGBAM4vGbwXt3fek6lfWg0XTzQaDJj0ItlZ1MRo
+RvC0NcWFAyDGr0WlIVFFQesWWDYyb+JQYmT5/VGcqiTZ9J2DKocKIdMSODRsjQBu
+WqDZQu4aIZX5UkxVWsUPOE9G+m34LjXWHXzr4vCwdYDIqROsvojvOm6rXyo4YgKw
+Env+j6YDAgMBAAGjZjBkMBEGCWCGSAGG+EIBAQQEAwIABzAPBgNVHRMBAf8EBTAD
+AQH/MB8GA1UdIwQYMBaAFEp4MlIR21kWNl7fwRQ2QGpHfEyhMB0GA1UdDgQWBBRK
+eDJSEdtZFjZe38EUNkBqR3xMoTANBgkqhkiG9w0BAQQFAAOBgQB1W6ibAxHm6VZM
+zfmpTMANmvPMZWnmJXbMWbfWVMMdzZmsGd20hdXgPfxiIKeES1hl8eL5lSE/9dR+
+WB5Hh1Q+WKG1tfgq73HnvMP2sUlG4tega+VWeponmHxGYhTnyfxuAxJ5gDgdSIKN
+/Bf+KpYrtWKmpj29f5JZzVoqgrI3eQ==
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIICWjCCAcMCAgGlMA0GCSqGSIb3DQEBBAUAMHUxCzAJBgNVBAYTAlVTMRgwFgYD
+VQQKEw9HVEUgQ29ycG9yYXRpb24xJzAlBgNVBAsTHkdURSBDeWJlclRydXN0IFNv
+bHV0aW9ucywgSW5jLjEjMCEGA1UEAxMaR1RFIEN5YmVyVHJ1c3QgR2xvYmFsIFJv
+b3QwHhcNOTgwODEzMDAyOTAwWhcNMTgwODEzMjM1OTAwWjB1MQswCQYDVQQGEwJV
+UzEYMBYGA1UEChMPR1RFIENvcnBvcmF0aW9uMScwJQYDVQQLEx5HVEUgQ3liZXJU
+cnVzdCBTb2x1dGlvbnMsIEluYy4xIzAhBgNVBAMTGkdURSBDeWJlclRydXN0IEds
+b2JhbCBSb290MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCVD6C28FCc6HrH
+iM3dFw4usJTQGz0O9pTAipTHBsiQl8i4ZBp6fmw8U+E3KHNgf7KXUwefU/ltWJTS
+r41tiGeA5u2ylc9yMcqlHHK6XALnZELn+aks1joNrI1CqiQBOeacPwGFVw1Yh0X4
+04Wqk2kmhXBIgD8SFcd5tB8FLztimQIDAQABMA0GCSqGSIb3DQEBBAUAA4GBAG3r
+GwnpXtlR22ciYaQqPEh346B8pt5zohQDhT37qw4wxYMWM4ETCJ57NE7fQMh017l9
+3PR2VX2bY1QY6fDq81yx2YtCHrnAlU66+tXifPVoYb+O7AWXX1uw16OFNMQkpw0P
+lZPvy5TYnh+dXIVtx6quTx8itc2VrbqnzPmrC3p/
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIIFSzCCBLSgAwIBAgIBaTANBgkqhkiG9w0BAQQFADCBmTELMAkGA1UEBhMCSFUx
+ETAPBgNVBAcTCEJ1ZGFwZXN0MScwJQYDVQQKEx5OZXRMb2NrIEhhbG96YXRiaXp0
+b25zYWdpIEtmdC4xGjAYBgNVBAsTEVRhbnVzaXR2YW55a2lhZG9rMTIwMAYDVQQD
+EylOZXRMb2NrIFV6bGV0aSAoQ2xhc3MgQikgVGFudXNpdHZhbnlraWFkbzAeFw05
+OTAyMjUxNDEwMjJaFw0xOTAyMjAxNDEwMjJaMIGZMQswCQYDVQQGEwJIVTERMA8G
+A1UEBxMIQnVkYXBlc3QxJzAlBgNVBAoTHk5ldExvY2sgSGFsb3phdGJpenRvbnNh
+Z2kgS2Z0LjEaMBgGA1UECxMRVGFudXNpdHZhbnlraWFkb2sxMjAwBgNVBAMTKU5l
+dExvY2sgVXpsZXRpIChDbGFzcyBCKSBUYW51c2l0dmFueWtpYWRvMIGfMA0GCSqG
+SIb3DQEBAQUAA4GNADCBiQKBgQCx6gTsIKAjwo84YM/HRrPVG/77uZmeBNwcf4xK
+gZjupNTKihe5In+DCnVMm8Bp2GQ5o+2So/1bXHQawEfKOml2mrriRBf8TKPV/riX
+iK+IA4kfpPIEPsgHC+b5sy96YhQJRhTKZPWLgLViqNhr1nGTLbO/CVRY7QbrqHvc
+Q7GhaQIDAQABo4ICnzCCApswEgYDVR0TAQH/BAgwBgEB/wIBBDAOBgNVHQ8BAf8E
+BAMCAAYwEQYJYIZIAYb4QgEBBAQDAgAHMIICYAYJYIZIAYb4QgENBIICURaCAk1G
+SUdZRUxFTSEgRXplbiB0YW51c2l0dmFueSBhIE5ldExvY2sgS2Z0LiBBbHRhbGFu
+b3MgU3pvbGdhbHRhdGFzaSBGZWx0ZXRlbGVpYmVuIGxlaXJ0IGVsamFyYXNvayBh
+bGFwamFuIGtlc3p1bHQuIEEgaGl0ZWxlc2l0ZXMgZm9seWFtYXRhdCBhIE5ldExv
+Y2sgS2Z0LiB0ZXJtZWtmZWxlbG9zc2VnLWJpenRvc2l0YXNhIHZlZGkuIEEgZGln
+aXRhbGlzIGFsYWlyYXMgZWxmb2dhZGFzYW5hayBmZWx0ZXRlbGUgYXogZWxvaXJ0
+IGVsbGVub3J6ZXNpIGVsamFyYXMgbWVndGV0ZWxlLiBBeiBlbGphcmFzIGxlaXJh
+c2EgbWVndGFsYWxoYXRvIGEgTmV0TG9jayBLZnQuIEludGVybmV0IGhvbmxhcGph
+biBhIGh0dHBzOi8vd3d3Lm5ldGxvY2submV0L2RvY3MgY2ltZW4gdmFneSBrZXJo
+ZXRvIGF6IGVsbGVub3J6ZXNAbmV0bG9jay5uZXQgZS1tYWlsIGNpbWVuLiBJTVBP
+UlRBTlQhIFRoZSBpc3N1YW5jZSBhbmQgdGhlIHVzZSBvZiB0aGlzIGNlcnRpZmlj
+YXRlIGlzIHN1YmplY3QgdG8gdGhlIE5ldExvY2sgQ1BTIGF2YWlsYWJsZSBhdCBo
+dHRwczovL3d3dy5uZXRsb2NrLm5ldC9kb2NzIG9yIGJ5IGUtbWFpbCBhdCBjcHNA
+bmV0bG9jay5uZXQuMA0GCSqGSIb3DQEBBAUAA4GBAATbrowXr/gOkDFOzT4JwG06
+sPgzTEdM43WIEJessDgVkcYplswhwG08pXTP2IKlOcNl40JwuyKQ433bNXbhoLXa
+n3BukxowOR0w2y7jfLKRstE3Kfq51hdcR0/jHTjrn9V7lagonhVK0dHQKwCXoOKS
+NitjrFgBazMpUIaD8QFI
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIIFTzCCBLigAwIBAgIBaDANBgkqhkiG9w0BAQQFADCBmzELMAkGA1UEBhMCSFUx
+ETAPBgNVBAcTCEJ1ZGFwZXN0MScwJQYDVQQKEx5OZXRMb2NrIEhhbG96YXRiaXp0
+b25zYWdpIEtmdC4xGjAYBgNVBAsTEVRhbnVzaXR2YW55a2lhZG9rMTQwMgYDVQQD
+EytOZXRMb2NrIEV4cHJlc3N6IChDbGFzcyBDKSBUYW51c2l0dmFueWtpYWRvMB4X
+DTk5MDIyNTE0MDgxMVoXDTE5MDIyMDE0MDgxMVowgZsxCzAJBgNVBAYTAkhVMREw
+DwYDVQQHEwhCdWRhcGVzdDEnMCUGA1UEChMeTmV0TG9jayBIYWxvemF0Yml6dG9u
+c2FnaSBLZnQuMRowGAYDVQQLExFUYW51c2l0dmFueWtpYWRvazE0MDIGA1UEAxMr
+TmV0TG9jayBFeHByZXNzeiAoQ2xhc3MgQykgVGFudXNpdHZhbnlraWFkbzCBnzAN
+BgkqhkiG9w0BAQEFAAOBjQAwgYkCgYEA6+ywbGGKIyWvYCDj2Z/8kwvbXY2wobNA
+OoLO/XXgeDIDhlqGlZHtU/qdQPzm6N3ZW3oDvV3zOwzDUXmbrVWg6dADEK8KuhRC
+2VImESLH0iDMgqSaqf64gXadarfSNnU+sYYJ9m5tfk63euyucYT2BDMIJTLrdKwW
+RMbkQJMdf60CAwEAAaOCAp8wggKbMBIGA1UdEwEB/wQIMAYBAf8CAQQwDgYDVR0P
+AQH/BAQDAgAGMBEGCWCGSAGG+EIBAQQEAwIABzCCAmAGCWCGSAGG+EIBDQSCAlEW
+ggJNRklHWUVMRU0hIEV6ZW4gdGFudXNpdHZhbnkgYSBOZXRMb2NrIEtmdC4gQWx0
+YWxhbm9zIFN6b2xnYWx0YXRhc2kgRmVsdGV0ZWxlaWJlbiBsZWlydCBlbGphcmFz
+b2sgYWxhcGphbiBrZXN6dWx0LiBBIGhpdGVsZXNpdGVzIGZvbHlhbWF0YXQgYSBO
+ZXRMb2NrIEtmdC4gdGVybWVrZmVsZWxvc3NlZy1iaXp0b3NpdGFzYSB2ZWRpLiBB
+IGRpZ2l0YWxpcyBhbGFpcmFzIGVsZm9nYWRhc2FuYWsgZmVsdGV0ZWxlIGF6IGVs
+b2lydCBlbGxlbm9yemVzaSBlbGphcmFzIG1lZ3RldGVsZS4gQXogZWxqYXJhcyBs
+ZWlyYXNhIG1lZ3RhbGFsaGF0byBhIE5ldExvY2sgS2Z0LiBJbnRlcm5ldCBob25s
+YXBqYW4gYSBodHRwczovL3d3dy5uZXRsb2NrLm5ldC9kb2NzIGNpbWVuIHZhZ3kg
+a2VyaGV0byBheiBlbGxlbm9yemVzQG5ldGxvY2submV0IGUtbWFpbCBjaW1lbi4g
+SU1QT1JUQU5UISBUaGUgaXNzdWFuY2UgYW5kIHRoZSB1c2Ugb2YgdGhpcyBjZXJ0
+aWZpY2F0ZSBpcyBzdWJqZWN0IHRvIHRoZSBOZXRMb2NrIENQUyBhdmFpbGFibGUg
+YXQgaHR0cHM6Ly93d3cubmV0bG9jay5uZXQvZG9jcyBvciBieSBlLW1haWwgYXQg
+Y3BzQG5ldGxvY2submV0LjANBgkqhkiG9w0BAQQFAAOBgQAQrX/XDDKACtiG8XmY
+ta3UzbM2xJZIwVzNmtkFLp++UOv0JhQQLdRmF/iewSf98e3ke0ugbLWrmldwpu2g
+pO0u9f38vf5NNwgMvOOWgyL1SRt/Syu0VMGAfJlOHdCM7tCs5ZL6dVb+ZKATj7i4
+Fp1hBWeAyNDYpQcCNJgEjTME1A==
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIIC5zCCAlACAQEwDQYJKoZIhvcNAQEFBQAwgbsxJDAiBgNVBAcTG1ZhbGlDZXJ0
+IFZhbGlkYXRpb24gTmV0d29yazEXMBUGA1UEChMOVmFsaUNlcnQsIEluYy4xNTAz
+BgNVBAsTLFZhbGlDZXJ0IENsYXNzIDMgUG9saWN5IFZhbGlkYXRpb24gQXV0aG9y
+aXR5MSEwHwYDVQQDExhodHRwOi8vd3d3LnZhbGljZXJ0LmNvbS8xIDAeBgkqhkiG
+9w0BCQEWEWluZm9AdmFsaWNlcnQuY29tMB4XDTk5MDYyNjAwMjIzM1oXDTE5MDYy
+NjAwMjIzM1owgbsxJDAiBgNVBAcTG1ZhbGlDZXJ0IFZhbGlkYXRpb24gTmV0d29y
+azEXMBUGA1UEChMOVmFsaUNlcnQsIEluYy4xNTAzBgNVBAsTLFZhbGlDZXJ0IENs
+YXNzIDMgUG9saWN5IFZhbGlkYXRpb24gQXV0aG9yaXR5MSEwHwYDVQQDExhodHRw
+Oi8vd3d3LnZhbGljZXJ0LmNvbS8xIDAeBgkqhkiG9w0BCQEWEWluZm9AdmFsaWNl
+cnQuY29tMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDjmFGWHOjVsQaBalfD
+cnWTq8+epvzzFlLWLU2fNUSoLgRNB0mKOCn1dzfnt6td3zZxFJmP3MKS8edgkpfs
+2Ejcv8ECIMYkpChMMFp2bbFc893enhBxoYjHW5tBbcqwuI4V7q0zK89HBFx1cQqY
+JJgpp0lZpd34t0NiYfPT4tBVPwIDAQABMA0GCSqGSIb3DQEBBQUAA4GBAFa7AliE
+Zwgs3x/be0kz9dNnnfS0ChCzycUs4pJqcXgn8nCDQtM+z6lU9PHYkhaM0QTLS6vJ
+n0WuPIqpsHEzXcjFV9+vqDWzf4mH6eglkrh/hXqu1rweN1gqZ8mRzyqBPu3GOd/A
+PhmcGcwTTYJBtYze4D1gCCAPRX5ron+jjBXu
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIIDJzCCApCgAwIBAgIBATANBgkqhkiG9w0BAQQFADCBzjELMAkGA1UEBhMCWkEx
+FTATBgNVBAgTDFdlc3Rlcm4gQ2FwZTESMBAGA1UEBxMJQ2FwZSBUb3duMR0wGwYD
+VQQKExRUaGF3dGUgQ29uc3VsdGluZyBjYzEoMCYGA1UECxMfQ2VydGlmaWNhdGlv
+biBTZXJ2aWNlcyBEaXZpc2lvbjEhMB8GA1UEAxMYVGhhd3RlIFByZW1pdW0gU2Vy
+dmVyIENBMSgwJgYJKoZIhvcNAQkBFhlwcmVtaXVtLXNlcnZlckB0aGF3dGUuY29t
+MB4XDTk2MDgwMTAwMDAwMFoXDTIwMTIzMTIzNTk1OVowgc4xCzAJBgNVBAYTAlpB
+MRUwEwYDVQQIEwxXZXN0ZXJuIENhcGUxEjAQBgNVBAcTCUNhcGUgVG93bjEdMBsG
+A1UEChMUVGhhd3RlIENvbnN1bHRpbmcgY2MxKDAmBgNVBAsTH0NlcnRpZmljYXRp
+b24gU2VydmljZXMgRGl2aXNpb24xITAfBgNVBAMTGFRoYXd0ZSBQcmVtaXVtIFNl
+cnZlciBDQTEoMCYGCSqGSIb3DQEJARYZcHJlbWl1bS1zZXJ2ZXJAdGhhd3RlLmNv
+bTCBnzANBgkqhkiG9w0BAQEFAAOBjQAwgYkCgYEA0jY2aovXwlue2oFBYo847kkE
+VdbQ7xwblRZH7xhINTpS9CtqBo87L+pW46+GjZ4X9560ZXUCTe/LCaIhUdib0GfQ
+ug2SBhRz1JPLlyoAnFxODLz6FVL88kRu2hFKbgifLy3j+ao6hnO2RlNYyIkFvYMR
+uHM/qgeN9EJN50CdHDcCAwEAAaMTMBEwDwYDVR0TAQH/BAUwAwEB/zANBgkqhkiG
+9w0BAQQFAAOBgQAmSCwWwlj66BZ0DKqqX1Q/8tfJeGBeXm43YyJ3Nn6yF8Q0ufUI
+hfzJATj/Tb7yFkJD57taRvvBxhEf8UqwKEbJw8RCfbz6q1lu1bdRiBHjpIUZa4JM
+pAwSremkrj/xw0llmozFyD4lt5SZu5IycQfwhl7tUCemDaYj+bvLpgcUQg==
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIIDEzCCAnygAwIBAgIBATANBgkqhkiG9w0BAQQFADCBxDELMAkGA1UEBhMCWkEx
+FTATBgNVBAgTDFdlc3Rlcm4gQ2FwZTESMBAGA1UEBxMJQ2FwZSBUb3duMR0wGwYD
+VQQKExRUaGF3dGUgQ29uc3VsdGluZyBjYzEoMCYGA1UECxMfQ2VydGlmaWNhdGlv
+biBTZXJ2aWNlcyBEaXZpc2lvbjEZMBcGA1UEAxMQVGhhd3RlIFNlcnZlciBDQTEm
+MCQGCSqGSIb3DQEJARYXc2VydmVyLWNlcnRzQHRoYXd0ZS5jb20wHhcNOTYwODAx
+MDAwMDAwWhcNMjAxMjMxMjM1OTU5WjCBxDELMAkGA1UEBhMCWkExFTATBgNVBAgT
+DFdlc3Rlcm4gQ2FwZTESMBAGA1UEBxMJQ2FwZSBUb3duMR0wGwYDVQQKExRUaGF3
+dGUgQ29uc3VsdGluZyBjYzEoMCYGA1UECxMfQ2VydGlmaWNhdGlvbiBTZXJ2aWNl
+cyBEaXZpc2lvbjEZMBcGA1UEAxMQVGhhd3RlIFNlcnZlciBDQTEmMCQGCSqGSIb3
+DQEJARYXc2VydmVyLWNlcnRzQHRoYXd0ZS5jb20wgZ8wDQYJKoZIhvcNAQEBBQAD
+gY0AMIGJAoGBANOkUG7I/1Zr5s9dtuoMaHVHoqrC2oQl/Kj0R1HahbUgdJSGHg91
+yekIYfUGbTBuFRkC6VLAYttNmZ7iagxEOM3+vuNkCXDF/rFrKbYvScg71CcEJRCX
+L+eQbcAoQpnXTEPew/UhbVSfXcNY4cDk2VuwuNy0e982OsK1ZiIS1ocNAgMBAAGj
+EzARMA8GA1UdEwEB/wQFMAMBAf8wDQYJKoZIhvcNAQEEBQADgYEAB/pMaVz7lcxG
+7oWDTSEwjsrZqG9JGubaUeNgcGyEYRGhGshIPllDfU+VPaGLtwtimHp1it2ITk6e
+QNuozDJ0uW8NxuOzRAvZim+aKZuZGCg70eNAKJpaPNW15yAbi8qkq43pUdniTCxZ
+qdq5snUb9kLy78fyGPmJvKP/iiMucEc=
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIIC5zCCAlACAQEwDQYJKoZIhvcNAQEFBQAwgbsxJDAiBgNVBAcTG1ZhbGlDZXJ0
+IFZhbGlkYXRpb24gTmV0d29yazEXMBUGA1UEChMOVmFsaUNlcnQsIEluYy4xNTAz
+BgNVBAsTLFZhbGlDZXJ0IENsYXNzIDEgUG9saWN5IFZhbGlkYXRpb24gQXV0aG9y
+aXR5MSEwHwYDVQQDExhodHRwOi8vd3d3LnZhbGljZXJ0LmNvbS8xIDAeBgkqhkiG
+9w0BCQEWEWluZm9AdmFsaWNlcnQuY29tMB4XDTk5MDYyNTIyMjM0OFoXDTE5MDYy
+NTIyMjM0OFowgbsxJDAiBgNVBAcTG1ZhbGlDZXJ0IFZhbGlkYXRpb24gTmV0d29y
+azEXMBUGA1UEChMOVmFsaUNlcnQsIEluYy4xNTAzBgNVBAsTLFZhbGlDZXJ0IENs
+YXNzIDEgUG9saWN5IFZhbGlkYXRpb24gQXV0aG9yaXR5MSEwHwYDVQQDExhodHRw
+Oi8vd3d3LnZhbGljZXJ0LmNvbS8xIDAeBgkqhkiG9w0BCQEWEWluZm9AdmFsaWNl
+cnQuY29tMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDYWYJ6ibiWuqYvaG9Y
+LqdUHAZu9OqNSLwxlBfw8068srg1knaw0KWlAdcAAxIiGQj4/xEjm84H9b9pGib+
+TunRf50sQB1ZaG6m+FiwnRqP0z/x3BkGgagO4DrdyFNFCQbmD3DD+kCmDuJWBQ8Y
+TfwggtFzVXSNdnKgHZ0dwN0/cQIDAQABMA0GCSqGSIb3DQEBBQUAA4GBAFBoPUn0
+LBwGlN+VYH+Wexf+T3GtZMjdd9LvWVXoP+iOBSoh8gfStadS/pyxtuJbdxdA6nLW
+I8sogTLDAHkY7FkXicnGah5xyf23dKUlRWnFSKsZ4UWKJWsZ7uW7EvV/96aNUcPw
+nXS3qT6gpf+2SQMT2iLM7XGCK5nPOrf1LXLI
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIIC5zCCAlACAQEwDQYJKoZIhvcNAQEFBQAwgbsxJDAiBgNVBAcTG1ZhbGlDZXJ0
+IFZhbGlkYXRpb24gTmV0d29yazEXMBUGA1UEChMOVmFsaUNlcnQsIEluYy4xNTAz
+BgNVBAsTLFZhbGlDZXJ0IENsYXNzIDIgUG9saWN5IFZhbGlkYXRpb24gQXV0aG9y
+aXR5MSEwHwYDVQQDExhodHRwOi8vd3d3LnZhbGljZXJ0LmNvbS8xIDAeBgkqhkiG
+9w0BCQEWEWluZm9AdmFsaWNlcnQuY29tMB4XDTk5MDYyNjAwMTk1NFoXDTE5MDYy
+NjAwMTk1NFowgbsxJDAiBgNVBAcTG1ZhbGlDZXJ0IFZhbGlkYXRpb24gTmV0d29y
+azEXMBUGA1UEChMOVmFsaUNlcnQsIEluYy4xNTAzBgNVBAsTLFZhbGlDZXJ0IENs
+YXNzIDIgUG9saWN5IFZhbGlkYXRpb24gQXV0aG9yaXR5MSEwHwYDVQQDExhodHRw
+Oi8vd3d3LnZhbGljZXJ0LmNvbS8xIDAeBgkqhkiG9w0BCQEWEWluZm9AdmFsaWNl
+cnQuY29tMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDOOnHK5avIWZJV16vY
+dA757tn2VUdZZUcOBVXc65g2PFxTXdMwzzjsvUGJ7SVCCSRrCl6zfN1SLUzm1NZ9
+WlmpZdRJEy0kTRxQb7XBhVQ7/nHk01xC+YDgkRoKWzk2Z/M/VXwbP7RfZHM047QS
+v4dk+NoS/zcnwbNDu+97bi5p9wIDAQABMA0GCSqGSIb3DQEBBQUAA4GBADt/UG9v
+UJSZSWI4OB9L+KXIPqeCgfYrx+jFzug6EILLGACOTb2oWH+heQC1u+mNr0HZDzTu
+IYEZoDJJKPTEjlbVUjP9UNV+mWwD5MlM/Mtsq2azSiGM5bUMMj4QssxsodyamEwC
+W/POuZ6lcg5Ktz885hZo+L7tdEy8W9ViH0Pd
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIICPDCCAaUCEHC65B0Q2Sk0tjjKewPMur8wDQYJKoZIhvcNAQECBQAwXzELMAkG
+A1UEBhMCVVMxFzAVBgNVBAoTDlZlcmlTaWduLCBJbmMuMTcwNQYDVQQLEy5DbGFz
+cyAzIFB1YmxpYyBQcmltYXJ5IENlcnRpZmljYXRpb24gQXV0aG9yaXR5MB4XDTk2
+MDEyOTAwMDAwMFoXDTI4MDgwMTIzNTk1OVowXzELMAkGA1UEBhMCVVMxFzAVBgNV
+BAoTDlZlcmlTaWduLCBJbmMuMTcwNQYDVQQLEy5DbGFzcyAzIFB1YmxpYyBQcmlt
+YXJ5IENlcnRpZmljYXRpb24gQXV0aG9yaXR5MIGfMA0GCSqGSIb3DQEBAQUAA4GN
+ADCBiQKBgQDJXFme8huKARS0EN8EQNvjV69qRUCPhAwL0TPZ2RHP7gJYHyX3KqhE
+BarsAx94f56TuZoAqiN91qyFomNFx3InzPRMxnVx0jnvT0Lwdd8KkMaOIG+YD/is
+I19wKTakyYbnsZogy1Olhec9vn2a/iRFM9x2Fe0PonFkTGUugWhFpwIDAQABMA0G
+CSqGSIb3DQEBAgUAA4GBALtMEivPLCYATxQT3ab7/AoRhIzzKBxnki98tsX63/Do
+lbwdj2wsqFHMc9ikwFPwTtYmwHYBV4GSXiHx0bH/59AhWM1pF+NEHJwZRDmJXNyc
+AA9WjQKZ7aKQRUzkuxCkPfAyAw7xzvjoyVGM5mKf5p/AfbdynMk2OmufTqj/ZA1k
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIICPDCCAaUCEDyRMcsf9tAbDpq40ES/Er4wDQYJKoZIhvcNAQEFBQAwXzELMAkG
+A1UEBhMCVVMxFzAVBgNVBAoTDlZlcmlTaWduLCBJbmMuMTcwNQYDVQQLEy5DbGFz
+cyAzIFB1YmxpYyBQcmltYXJ5IENlcnRpZmljYXRpb24gQXV0aG9yaXR5MB4XDTk2
+MDEyOTAwMDAwMFoXDTI4MDgwMjIzNTk1OVowXzELMAkGA1UEBhMCVVMxFzAVBgNV
+BAoTDlZlcmlTaWduLCBJbmMuMTcwNQYDVQQLEy5DbGFzcyAzIFB1YmxpYyBQcmlt
+YXJ5IENlcnRpZmljYXRpb24gQXV0aG9yaXR5MIGfMA0GCSqGSIb3DQEBAQUAA4GN
+ADCBiQKBgQDJXFme8huKARS0EN8EQNvjV69qRUCPhAwL0TPZ2RHP7gJYHyX3KqhE
+BarsAx94f56TuZoAqiN91qyFomNFx3InzPRMxnVx0jnvT0Lwdd8KkMaOIG+YD/is
+I19wKTakyYbnsZogy1Olhec9vn2a/iRFM9x2Fe0PonFkTGUugWhFpwIDAQABMA0G
+CSqGSIb3DQEBBQUAA4GBABByUqkFFBkyCEHwxWsKzH4PIRnN5GfcX6kb5sroc50i
+2JhucwNhkcV8sEVAbkSdjbCxlnRhLQ2pRdKkkirWmnWXbj9T/UWZYB2oK0z5XqcJ
+2HUw19JlYD1n1khVdWk/kfVIC0dpImmClr7JyDiGSnoscxlIaU5rfGW/D/xwzoiQ
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIIDAjCCAmsCEH3Z/gfPqB63EHln+6eJNMYwDQYJKoZIhvcNAQEFBQAwgcExCzAJ
+BgNVBAYTAlVTMRcwFQYDVQQKEw5WZXJpU2lnbiwgSW5jLjE8MDoGA1UECxMzQ2xh
+c3MgMyBQdWJsaWMgUHJpbWFyeSBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eSAtIEcy
+MTowOAYDVQQLEzEoYykgMTk5OCBWZXJpU2lnbiwgSW5jLiAtIEZvciBhdXRob3Jp
+emVkIHVzZSBvbmx5MR8wHQYDVQQLExZWZXJpU2lnbiBUcnVzdCBOZXR3b3JrMB4X
+DTk4MDUxODAwMDAwMFoXDTI4MDgwMTIzNTk1OVowgcExCzAJBgNVBAYTAlVTMRcw
+FQYDVQQKEw5WZXJpU2lnbiwgSW5jLjE8MDoGA1UECxMzQ2xhc3MgMyBQdWJsaWMg
+UHJpbWFyeSBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eSAtIEcyMTowOAYDVQQLEzEo
+YykgMTk5OCBWZXJpU2lnbiwgSW5jLiAtIEZvciBhdXRob3JpemVkIHVzZSBvbmx5
+MR8wHQYDVQQLExZWZXJpU2lnbiBUcnVzdCBOZXR3b3JrMIGfMA0GCSqGSIb3DQEB
+AQUAA4GNADCBiQKBgQDMXtERXVxp0KvTuWpMmR9ZmDCOFoUgRm1HP9SFIIThbbP4
+pO0M8RcPO/mn+SXXwc+EY/J8Y8+iR/LGWzOOZEAEaMGAuWQcRXfH2G71lSk8UOg0
+13gfqLptQ5GVj0VXXn7F+8qkBOvqlzdUMG+7AUcyM83cV5tkaWH4mx0ciU9cZwID
+AQABMA0GCSqGSIb3DQEBBQUAA4GBAFFNzb5cy5gZnBWyATl4Lk0PZ3BwmcYQWpSk
+U01UbSuvDV1Ai2TT1+7eVmGSX6bEHRBhNtMsJzzoKQm5EWR0zLVznxxIqbxhAe7i
+F6YM40AIOw7n60RzKprxaZLvcRTDOaxxp5EJb+RxBrO6WVcmeQD2+A2iMzAo1KpY
+oJ2daZH9
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIIH0zCCBbugAwIBAgIIXsO3pkN/pOAwDQYJKoZIhvcNAQEFBQAwQjESMBAGA1UE
+AwwJQUNDVlJBSVoxMRAwDgYDVQQLDAdQS0lBQ0NWMQ0wCwYDVQQKDARBQ0NWMQsw
+CQYDVQQGEwJFUzAeFw0xMTA1MDUwOTM3MzdaFw0zMDEyMzEwOTM3MzdaMEIxEjAQ
+BgNVBAMMCUFDQ1ZSQUlaMTEQMA4GA1UECwwHUEtJQUNDVjENMAsGA1UECgwEQUND
+VjELMAkGA1UEBhMCRVMwggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoICAQCb
+qau/YUqXry+XZpp0X9DZlv3P4uRm7x8fRzPCRKPfmt4ftVTdFXxpNRFvu8gMjmoY
+HtiP2Ra8EEg2XPBjs5BaXCQ316PWywlxufEBcoSwfdtNgM3802/J+Nq2DoLSRYWo
+G2ioPej0RGy9ocLLA76MPhMAhN9KSMDjIgro6TenGEyxCQ0jVn8ETdkXhBilyNpA
+lHPrzg5XPAOBOp0KoVdDaaxXbXmQeOW1tDvYvEyNKKGno6e6Ak4l0Squ7a4DIrhr
+IA8wKFSVf+DuzgpmndFALW4ir50awQUZ0m/A8p/4e7MCQvtQqR0tkw8jq8bBD5L/
+0KIV9VMJcRz/RROE5iZe+OCIHAr8Fraocwa48GOEAqDGWuzndN9wrqODJerWx5eH
+k6fGioozl2A3ED6XPm4pFdahD9GILBKfb6qkxkLrQaLjlUPTAYVtjrs78yM2x/47
+4KElB0iryYl0/wiPgL/AlmXz7uxLaL2diMMxs0Dx6M/2OLuc5NF/1OVYm3z61PMO
+m3WR5LpSLhl+0fXNWhn8ugb2+1KoS5kE3fj5tItQo05iifCHJPqDQsGH+tUtKSpa
+cXpkatcnYGMN285J9Y0fkIkyF/hzQ7jSWpOGYdbhdQrqeWZ2iE9x6wQl1gpaepPl
+uUsXQA+xtrn13k/c4LOsOxFwYIRKQ26ZIMApcQrAZQIDAQABo4ICyzCCAscwfQYI
+KwYBBQUHAQEEcTBvMEwGCCsGAQUFBzAChkBodHRwOi8vd3d3LmFjY3YuZXMvZmls
+ZWFkbWluL0FyY2hpdm9zL2NlcnRpZmljYWRvcy9yYWl6YWNjdjEuY3J0MB8GCCsG
+AQUFBzABhhNodHRwOi8vb2NzcC5hY2N2LmVzMB0GA1UdDgQWBBTSh7Tj3zcnk1X2
+VuqB5TbMjB4/vTAPBgNVHRMBAf8EBTADAQH/MB8GA1UdIwQYMBaAFNKHtOPfNyeT
+VfZW6oHlNsyMHj+9MIIBcwYDVR0gBIIBajCCAWYwggFiBgRVHSAAMIIBWDCCASIG
+CCsGAQUFBwICMIIBFB6CARAAQQB1AHQAbwByAGkAZABhAGQAIABkAGUAIABDAGUA
+cgB0AGkAZgBpAGMAYQBjAGkA8wBuACAAUgBhAO0AegAgAGQAZQAgAGwAYQAgAEEA
+QwBDAFYAIAAoAEEAZwBlAG4AYwBpAGEAIABkAGUAIABUAGUAYwBuAG8AbABvAGcA
+7QBhACAAeQAgAEMAZQByAHQAaQBmAGkAYwBhAGMAaQDzAG4AIABFAGwAZQBjAHQA
+cgDzAG4AaQBjAGEALAAgAEMASQBGACAAUQA0ADYAMAAxADEANQA2AEUAKQAuACAA
+QwBQAFMAIABlAG4AIABoAHQAdABwADoALwAvAHcAdwB3AC4AYQBjAGMAdgAuAGUA
+czAwBggrBgEFBQcCARYkaHR0cDovL3d3dy5hY2N2LmVzL2xlZ2lzbGFjaW9uX2Mu
+aHRtMFUGA1UdHwROMEwwSqBIoEaGRGh0dHA6Ly93d3cuYWNjdi5lcy9maWxlYWRt
+aW4vQXJjaGl2b3MvY2VydGlmaWNhZG9zL3JhaXphY2N2MV9kZXIuY3JsMA4GA1Ud
+DwEB/wQEAwIBBjAXBgNVHREEEDAOgQxhY2N2QGFjY3YuZXMwDQYJKoZIhvcNAQEF
+BQADggIBAJcxAp/n/UNnSEQU5CmH7UwoZtCPNdpNYbdKl02125DgBS4OxnnQ8pdp
+D70ER9m+27Up2pvZrqmZ1dM8MJP1jaGo/AaNRPTKFpV8M9xii6g3+CfYCS0b78gU
+JyCpZET/LtZ1qmxNYEAZSUNUY9rizLpm5U9EelvZaoErQNV/+QEnWCzI7UiRfD+m
+AM/EKXMRNt6GGT6d7hmKG9Ww7Y49nCrADdg9ZuM8Db3VlFzi4qc1GwQA9j9ajepD
+vV+JHanBsMyZ4k0ACtrJJ1vnE5Bc5PUzolVt3OAJTS+xJlsndQAJxGJ3KQhfnlms
+tn6tn1QwIgPBHnFk/vk4CpYY3QIUrCPLBhwepH2NDd4nQeit2hW3sCPdK6jT2iWH
+7ehVRE2I9DZ+hJp4rPcOVkkO1jMl1oRQQmwgEh0q1b688nCBpHBgvgW1m54ERL5h
+I6zppSSMEYCUWqKiuUnSwdzRp+0xESyeGabu4VXhwOrPDYTkF7eifKXeVSUG7szA
+h1xA2syVP1XgNce4hL60Xc16gwFy7ofmXx2utYXGJt/mwZrpHgJHnyqobalbz+xF
+d3+YJ5oyXSrjhO7FmGYvliAd3djDJ9ew+f7Zfc3Qn48LFFhRny+Lwzgt3uiP1o2H
+pPVWQxaZLPSkVrQ0uGE3ycJYgBugl6H8WY3pEfbRD0tVNEYqi4Y7
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIIFtTCCA52gAwIBAgIIYY3HhjsBggUwDQYJKoZIhvcNAQEFBQAwRDEWMBQGA1UE
+AwwNQUNFRElDT00gUm9vdDEMMAoGA1UECwwDUEtJMQ8wDQYDVQQKDAZFRElDT00x
+CzAJBgNVBAYTAkVTMB4XDTA4MDQxODE2MjQyMloXDTI4MDQxMzE2MjQyMlowRDEW
+MBQGA1UEAwwNQUNFRElDT00gUm9vdDEMMAoGA1UECwwDUEtJMQ8wDQYDVQQKDAZF
+RElDT00xCzAJBgNVBAYTAkVTMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKC
+AgEA/5KV4WgGdrQsyFhIyv2AVClVYyT/kGWbEHV7w2rbYgIB8hiGtXxaOLHkWLn7
+09gtn70yN78sFW2+tfQh0hOR2QetAQXW8713zl9CgQr5auODAKgrLlUTY4HKRxx7
+XBZXehuDYAQ6PmXDzQHe3qTWDLqO3tkE7hdWIpuPY/1NFgu3e3eM+SW10W2ZEi5P
+Grjm6gSSrj0RuVFCPYewMYWveVqc/udOXpJPQ/yrOq2lEiZmueIM15jO1FillUAK
+t0SdE3QrwqXrIhWYENiLxQSfHY9g5QYbm8+5eaA9oiM/Qj9r+hwDezCNzmzAv+Yb
+X79nuIQZ1RXve8uQNjFiybwCq0Zfm/4aaJQ0PZCOrfbkHQl/Sog4P75n/TSW9R28
+MHTLOO7VbKvU/PQAtwBbhTIWdjPp2KOZnQUAqhbm84F9b32qhm2tFXTTxKJxqvQU
+fecyuB+81fFOvW8XAjnXDpVCOscAPukmYxHqC9FK/xidstd7LzrZlvvoHpKuE1XI
+2Sf23EgbsCTBheN3nZqk8wwRHQ3ItBTutYJXCb8gWH8vIiPYcMt5bMlL8qkqyPyH
+K9caUPgn6C9D4zq92Fdx/c6mUlv53U3t5fZvie27k5x2IXXwkkwp9y+cAS7+UEae
+ZAwUswdbxcJzbPEHXEUkFDWug/FqTYl6+rPYLWbwNof1K1MCAwEAAaOBqjCBpzAP
+BgNVHRMBAf8EBTADAQH/MB8GA1UdIwQYMBaAFKaz4SsrSbbXc6GqlPUB53NlTKxQ
+MA4GA1UdDwEB/wQEAwIBhjAdBgNVHQ4EFgQUprPhKytJttdzoaqU9QHnc2VMrFAw
+RAYDVR0gBD0wOzA5BgRVHSAAMDEwLwYIKwYBBQUHAgEWI2h0dHA6Ly9hY2VkaWNv
+bS5lZGljb21ncm91cC5jb20vZG9jMA0GCSqGSIb3DQEBBQUAA4ICAQDOLAtSUWIm
+fQwng4/F9tqgaHtPkl7qpHMyEVNEskTLnewPeUKzEKbHDZ3Ltvo/Onzqv4hTGzz3
+gvoFNTPhNahXwOf9jU8/kzJPeGYDdwdY6ZXIfj7QeQCM8htRM5u8lOk6e25SLTKe
+I6RF+7YuE7CLGLHdztUdp0J/Vb77W7tH1PwkzQSulgUV1qzOMPPKC8W64iLgpq0i
+5ALudBF/TP94HTXa5gI06xgSYXcGCRZj6hitoocf8seACQl1ThCojz2GuHURwCRi
+ipZ7SkXp7FnFvmuD5uHorLUwHv4FB4D54SMNUI8FmP8sX+g7tq3PgbUhh8oIKiMn
+MCArz+2UW6yyetLHKKGKC5tNSixthT8Jcjxn4tncB7rrZXtaAWPWkFtPF2Y9fwsZ
+o5NjEFIqnxQWWOLcpfShFosOkYuByptZ+thrkQdlVV9SH686+5DdaaVbnG0OLLb6
+zqylfDJKZ0DcMDQj3dcEI2bw/FWAp/tmGYI1Z2JwOV5vx+qQQEQIHriy1tvuWacN
+GHk0vFQYXlPKNFHtRQrmjseCNj6nOGOpMCwXEGCSn1WHElkQwg9naRHMTh5+Spqt
+r0CodaxWkHS4oJyleW/c6RrIaQXpuvoDs3zk4E7Czp3otkYNbn5XOmeUwssfnHdK
+Z05phkOTOPu220+DkdRgfks+KzgHVZhepA==
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIIFuzCCA6OgAwIBAgIIVwoRl0LE48wwDQYJKoZIhvcNAQELBQAwazELMAkGA1UE
+BhMCSVQxDjAMBgNVBAcMBU1pbGFuMSMwIQYDVQQKDBpBY3RhbGlzIFMucC5BLi8w
+MzM1ODUyMDk2NzEnMCUGA1UEAwweQWN0YWxpcyBBdXRoZW50aWNhdGlvbiBSb290
+IENBMB4XDTExMDkyMjExMjIwMloXDTMwMDkyMjExMjIwMlowazELMAkGA1UEBhMC
+SVQxDjAMBgNVBAcMBU1pbGFuMSMwIQYDVQQKDBpBY3RhbGlzIFMucC5BLi8wMzM1
+ODUyMDk2NzEnMCUGA1UEAwweQWN0YWxpcyBBdXRoZW50aWNhdGlvbiBSb290IENB
+MIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAp8bEpSmkLO/lGMWwUKNv
+UTufClrJwkg4CsIcoBh/kbWHuUA/3R1oHwiD1S0eiKD4j1aPbZkCkpAW1V8IbInX
+4ay8IMKx4INRimlNAJZaby/ARH6jDuSRzVju3PvHHkVH3Se5CAGfpiEd9UEtL0z9
+KK3giq0itFZljoZUj5NDKd45RnijMCO6zfB9E1fAXdKDa0hMxKufgFpbOr3JpyI/
+gCczWw63igxdBzcIy2zSekciRDXFzMwujt0q7bd9Zg1fYVEiVRvjRuPjPdA1Yprb
+rxTIW6HMiRvhMCb8oJsfgadHHwTrozmSBp+Z07/T6k9QnBn+locePGX2oxgkg4YQ
+51Q+qDp2JE+BIcXjDwL4k5RHILv+1A7TaLndxHqEguNTVHnd25zS8gebLra8Pu2F
+be8lEfKXGkJh90qX6IuxEAf6ZYGyojnP9zz/GPvG8VqLWeICrHuS0E4UT1lF9gxe
+KF+w6D9Fz8+vm2/7hNN3WpVvrJSEnu68wEqPSpP4RCHiMUVhUE4Q2OM1fEwZtN4F
+v6MGn8i1zeQf1xcGDXqVdFUNaBr8EBtiZJ1t4JWgw5QHVw0U5r0F+7if5t+L4sbn
+fpb2U8WANFAoWPASUHEXMLrmeGO89LKtmyuy/uE5jF66CyCU3nuDuP/jVo23Eek7
+jPKxwV2dpAtMK9myGPW1n0sCAwEAAaNjMGEwHQYDVR0OBBYEFFLYiDrIn3hm7Ynz
+ezhwlMkCAjbQMA8GA1UdEwEB/wQFMAMBAf8wHwYDVR0jBBgwFoAUUtiIOsifeGbt
+ifN7OHCUyQICNtAwDgYDVR0PAQH/BAQDAgEGMA0GCSqGSIb3DQEBCwUAA4ICAQAL
+e3KHwGCmSUyIWOYdiPcUZEim2FgKDk8TNd81HdTtBjHIgT5q1d07GjLukD0R0i70
+jsNjLiNmsGe+b7bAEzlgqqI0JZN1Ut6nna0Oh4lScWoWPBkdg/iaKWW+9D+a2fDz
+WochcYBNy+A4mz+7+uAwTc+G02UQGRjRlwKxK3JCaKygvU5a2hi/a5iB0P2avl4V
+SM0RFbnAKVy06Ij3Pjaut2L9HmLecHgQHEhb2rykOLpn7VU+Xlff1ANATIGk0k9j
+pwlCCRT8AKnCgHNPLsBA2RF7SOp6AsDT6ygBJlh0wcBzIm2Tlf05fbsq4/aC4yyX
+X04fkZT6/iyj2HYauE2yOE+b+h1IYHkm4vP9qdCa6HCPSXrW5b0KDtst842/6+Ok
+fcvHlXHo2qN8xcL4dJIEG4aspCJTQLas/kx2z/uUMsA1n3Y/buWQbqCmJqK4LL7R
+K4X9p2jIugErsWx0Hbhzlefut8cl8ABMALJ+tguLHPPAUJ4lueAI3jZm/zel0btU
+ZCzJJ7VLkn5l/9Mt4blOvH+kQSGQQXemOR/qnuOf0GZvBeyqdn6/axag67XH/JJU
+LysRJyU3eExRarDzzFhdFPFqSBX/wge2sY0PjlxQRrM9vwGYT7JZVEc+NHt4bVaT
+LnPqZih4zR0Uv6CPLy64Lo7yFIrM6bV8+2ydDKXhlg==
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIIENjCCAx6gAwIBAgIBATANBgkqhkiG9w0BAQUFADBvMQswCQYDVQQGEwJTRTEU
+MBIGA1UEChMLQWRkVHJ1c3QgQUIxJjAkBgNVBAsTHUFkZFRydXN0IEV4dGVybmFs
+IFRUUCBOZXR3b3JrMSIwIAYDVQQDExlBZGRUcnVzdCBFeHRlcm5hbCBDQSBSb290
+MB4XDTAwMDUzMDEwNDgzOFoXDTIwMDUzMDEwNDgzOFowbzELMAkGA1UEBhMCU0Ux
+FDASBgNVBAoTC0FkZFRydXN0IEFCMSYwJAYDVQQLEx1BZGRUcnVzdCBFeHRlcm5h
+bCBUVFAgTmV0d29yazEiMCAGA1UEAxMZQWRkVHJ1c3QgRXh0ZXJuYWwgQ0EgUm9v
+dDCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBALf3GjPm8gAELTngTlvt
+H7xsD821+iO2zt6bETOXpClMfZOfvUq8k+0DGuOPz+VtUFrWlymUWoCwSXrbLpX9
+uMq/NzgtHj6RQa1wVsfwTz/oMp50ysiQVOnGXw94nZpAPA6sYapeFI+eh6FqUNzX
+mk6vBbOmcZSccbNQYArHE504B4YCqOmoaSYYkKtMsE8jqzpPhNjfzp/haW+710LX
+a0Tkx63ubUFfclpxCDezeWWkWaCUN/cALw3CknLa0Dhy2xSoRcRdKn23tNbE7qzN
+E0S3ySvdQwAl+mG5aWpYIxG3pzOPVnVZ9c0p10a3CitlttNCbxWyuHv77+ldU9U0
+WicCAwEAAaOB3DCB2TAdBgNVHQ4EFgQUrb2YejS0Jvf6xCZU7wO94CTLVBowCwYD
+VR0PBAQDAgEGMA8GA1UdEwEB/wQFMAMBAf8wgZkGA1UdIwSBkTCBjoAUrb2YejS0
+Jvf6xCZU7wO94CTLVBqhc6RxMG8xCzAJBgNVBAYTAlNFMRQwEgYDVQQKEwtBZGRU
+cnVzdCBBQjEmMCQGA1UECxMdQWRkVHJ1c3QgRXh0ZXJuYWwgVFRQIE5ldHdvcmsx
+IjAgBgNVBAMTGUFkZFRydXN0IEV4dGVybmFsIENBIFJvb3SCAQEwDQYJKoZIhvcN
+AQEFBQADggEBALCb4IUlwtYj4g+WBpKdQZic2YR5gdkeWxQHIzZlj7DYd7usQWxH
+YINRsPkyPef89iYTx4AWpb9a/IfPeHmJIZriTAcKhjW88t5RxNKWt9x+Tu5w/Rw5
+6wwCURQtjr0W4MHfRnXnJK3s9EK0hZNwEGe6nQY1ShjTK3rMUUKhemPR5ruhxSvC
+Nr4TDea9Y355e6cJDUCrat2PisP29owaQgVR1EX1n6diIWgVIEM8med8vSTYqZEX
+c4g/VhsxOBi0cQ+azcgOno4uG+GMmIPLHzHxREzGBHNJdmAPx/i9F4BrLunMTA5a
+mnkPIAou1Z5jJh5VkpTYghdae9C8x49OhgQ=
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIIEGDCCAwCgAwIBAgIBATANBgkqhkiG9w0BAQUFADBlMQswCQYDVQQGEwJTRTEU
+MBIGA1UEChMLQWRkVHJ1c3QgQUIxHTAbBgNVBAsTFEFkZFRydXN0IFRUUCBOZXR3
+b3JrMSEwHwYDVQQDExhBZGRUcnVzdCBDbGFzcyAxIENBIFJvb3QwHhcNMDAwNTMw
+MTAzODMxWhcNMjAwNTMwMTAzODMxWjBlMQswCQYDVQQGEwJTRTEUMBIGA1UEChML
+QWRkVHJ1c3QgQUIxHTAbBgNVBAsTFEFkZFRydXN0IFRUUCBOZXR3b3JrMSEwHwYD
+VQQDExhBZGRUcnVzdCBDbGFzcyAxIENBIFJvb3QwggEiMA0GCSqGSIb3DQEBAQUA
+A4IBDwAwggEKAoIBAQCWltQhSWDia+hBBwzexODcEyPNwTXH+9ZOEQpnXvUGW2ul
+CDtbKRY654eyNAbFvAWlA3yCyykQruGIgb3WntP+LVbBFc7jJp0VLhD7Bo8wBN6n
+tGO0/7Gcrjyvd7ZWxbWroulpOj0OM3kyP3CCkplhbY0wCI9xP6ZIVxn4JdxLZlyl
+dI+Yrsj5wAYi56xz36Uu+1LcsRVlIPo1Zmne3yzxbrww2ywkEtvrNTVokMsAsJch
+PXQhI2U0K7t4WaPW4XY5mqRJjox0r26kmqPZm9I4XJuiGMx1I4S+6+JNM3GOGvDC
++Mcdoq0Dlyz4zyXG9rgkMbFjXZJ/Y/AlyVMuH79NAgMBAAGjgdIwgc8wHQYDVR0O
+BBYEFJWxtPCUtr3H2tERCSG+wa9J/RB7MAsGA1UdDwQEAwIBBjAPBgNVHRMBAf8E
+BTADAQH/MIGPBgNVHSMEgYcwgYSAFJWxtPCUtr3H2tERCSG+wa9J/RB7oWmkZzBl
+MQswCQYDVQQGEwJTRTEUMBIGA1UEChMLQWRkVHJ1c3QgQUIxHTAbBgNVBAsTFEFk
+ZFRydXN0IFRUUCBOZXR3b3JrMSEwHwYDVQQDExhBZGRUcnVzdCBDbGFzcyAxIENB
+IFJvb3SCAQEwDQYJKoZIhvcNAQEFBQADggEBACxtZBsfzQ3duQH6lmM0MkhHma6X
+7f1yFqZzR1r0693p9db7RcwpiURdv0Y5PejuvE1Uhh4dbOMXJ0PhiVYrqW9yTkkz
+43J8KiOavD7/KCrto/8cI7pDVwlnTUtiBi34/2ydYB7YHEt9tTEv2dB8Xfjea4MY
+eDdXL+gzB2ffHsdrKpV2ro9Xo/D0UrSpUwjP4E/TelOL/bscVjby/rK25Xa71SJl
+pz/+0WatC7xrmYbvP33zGDLKe8bjq2RGlfgmadlVg3sslgf/WSxEo8bl6ancoWOA
+WiFeIc9TVPC6b4nbqKqVz4vjccweGyBECMB6tkD9xOQ14R0WHNC8K47Wcdk=
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIIEFTCCAv2gAwIBAgIBATANBgkqhkiG9w0BAQUFADBkMQswCQYDVQQGEwJTRTEU
+MBIGA1UEChMLQWRkVHJ1c3QgQUIxHTAbBgNVBAsTFEFkZFRydXN0IFRUUCBOZXR3
+b3JrMSAwHgYDVQQDExdBZGRUcnVzdCBQdWJsaWMgQ0EgUm9vdDAeFw0wMDA1MzAx
+MDQxNTBaFw0yMDA1MzAxMDQxNTBaMGQxCzAJBgNVBAYTAlNFMRQwEgYDVQQKEwtB
+ZGRUcnVzdCBBQjEdMBsGA1UECxMUQWRkVHJ1c3QgVFRQIE5ldHdvcmsxIDAeBgNV
+BAMTF0FkZFRydXN0IFB1YmxpYyBDQSBSb290MIIBIjANBgkqhkiG9w0BAQEFAAOC
+AQ8AMIIBCgKCAQEA6Rowj4OIFMEg2Dybjxt+A3S72mnTRqX4jsIMEZBRpS9mVEBV
+6tsfSlbunyNu9DnLoblv8n75XYcmYZ4c+OLspoH4IcUkzBEMP9smcnrHAZcHF/nX
+GCwwfQ56HmIexkvA/X1id9NEHif2P0tEs7c42TkfYNVRknMDtABp4/MUTu7R3AnP
+dzRGULD4EfL+OHn3Bzn+UZKXC1sIXzSGAa2Il+tmzV7R/9x98oTaunet3IAIx6eH
+1lWfl2royBFkuucZKT8Rs3iQhCBSWxHveNCD9tVIkNAwHM+A+WD+eeSI8t0A65RF
+62WUaUC6wNW0uLp9BBGo6zEFlpROWCGOn9Bg/QIDAQABo4HRMIHOMB0GA1UdDgQW
+BBSBPjfYkrAfd59ctKtzquf2NGAv+jALBgNVHQ8EBAMCAQYwDwYDVR0TAQH/BAUw
+AwEB/zCBjgYDVR0jBIGGMIGDgBSBPjfYkrAfd59ctKtzquf2NGAv+qFopGYwZDEL
+MAkGA1UEBhMCU0UxFDASBgNVBAoTC0FkZFRydXN0IEFCMR0wGwYDVQQLExRBZGRU
+cnVzdCBUVFAgTmV0d29yazEgMB4GA1UEAxMXQWRkVHJ1c3QgUHVibGljIENBIFJv
+b3SCAQEwDQYJKoZIhvcNAQEFBQADggEBAAP3FUr4JNojVhaTdt02KLmuG7jD8WS6
+IBh4lSknVwW8fCr0uVFV2ocC3g8WFzH4qnkuCRO7r7IgGRLlk/lL+YPoRNWyQSW/
+iHVv/xD8SlTQX/D67zZzfRs2RcYhbbQVuE7PnFylPVoAjgbjPGsye/Kf8Lb93/Ao
+GEjwxrzQvzSAlsJKsW2Ox5BF3i9nrEUEo3rcVZLJR2bYGozH7ZxOmuASu7VqTITh
+4SINhwBk/ox9Yjllpu9CtoAlEmEBqCQTcAARJl/6NVDFSMwGR+gn2HCNX2TmoUQm
+XiLsks3/QppEIW1cxeMiHV9HEufOX1362KqxMy3ZdvJOOjMMK7MtkAY=
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIIEHjCCAwagAwIBAgIBATANBgkqhkiG9w0BAQUFADBnMQswCQYDVQQGEwJTRTEU
+MBIGA1UEChMLQWRkVHJ1c3QgQUIxHTAbBgNVBAsTFEFkZFRydXN0IFRUUCBOZXR3
+b3JrMSMwIQYDVQQDExpBZGRUcnVzdCBRdWFsaWZpZWQgQ0EgUm9vdDAeFw0wMDA1
+MzAxMDQ0NTBaFw0yMDA1MzAxMDQ0NTBaMGcxCzAJBgNVBAYTAlNFMRQwEgYDVQQK
+EwtBZGRUcnVzdCBBQjEdMBsGA1UECxMUQWRkVHJ1c3QgVFRQIE5ldHdvcmsxIzAh
+BgNVBAMTGkFkZFRydXN0IFF1YWxpZmllZCBDQSBSb290MIIBIjANBgkqhkiG9w0B
+AQEFAAOCAQ8AMIIBCgKCAQEA5B6a/twJWoekn0e+EV+vhDTbYjx5eLfpMLXsDBwq
+xBb/4Oxx64r1EW7tTw2R0hIYLUkVAcKkIhPHEWT/IhKauY5cLwjPcWqzZwFZ8V1G
+87B4pfYOQnrjfxvM0PC3KP0q6p6zsLkEqv32x7SxuCqg+1jxGaBvcCV+PmlKfw8i
+2O+tCBGaKZnhqkRFmhJePp1tUvznoD1oL/BLcHwTOK28FSXx1s6rosAx1i+f4P8U
+WfyEk9mHfExUE+uf0S0R+Bg6Ot4l2ffTQO2kBhLEO+GRwVY18BTcZTYJbqukB8c1
+0cIDMzZbdSZtQvESa0NvS3GU+jQd7RNuyoB/mC9suWXY6QIDAQABo4HUMIHRMB0G
+A1UdDgQWBBQ5lYtii1zJ1IC6WA+XPxUIQ8yYpzALBgNVHQ8EBAMCAQYwDwYDVR0T
+AQH/BAUwAwEB/zCBkQYDVR0jBIGJMIGGgBQ5lYtii1zJ1IC6WA+XPxUIQ8yYp6Fr
+pGkwZzELMAkGA1UEBhMCU0UxFDASBgNVBAoTC0FkZFRydXN0IEFCMR0wGwYDVQQL
+ExRBZGRUcnVzdCBUVFAgTmV0d29yazEjMCEGA1UEAxMaQWRkVHJ1c3QgUXVhbGlm
+aWVkIENBIFJvb3SCAQEwDQYJKoZIhvcNAQEFBQADggEBABmrder4i2VhlRO6aQTv
+hsoToMeqT2QbPxj2qC0sVY8FtzDqQmodwCVRLae/DLPt7wh/bDxGGuoYQ992zPlm
+hpwsaPXpF/gxsxjE1kh9I0xowX67ARRvxdlu3rsEQmr49lx95dr6h+sNNVJn0J6X
+dgWTP5XHAeZpVTh/EGGZyeNfpso+gmNIquIISD6q8rKFYqa0p9m9N5xotS1WfbC3
+P6CxB9bpT9zeRXEwMn8bLgn5v1Kh7sKAPgZcLlVAwRv1cEWw3F369nJad9Jjzc9Y
+iQBCYz95OdBEsIJuQRno3eDBiFrRHnGTHyQwdOUeqN48Jzd/g66ed8/wMLH/S5no
+xqE=
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIIDTDCCAjSgAwIBAgIId3cGJyapsXwwDQYJKoZIhvcNAQELBQAwRDELMAkGA1UE
+BhMCVVMxFDASBgNVBAoMC0FmZmlybVRydXN0MR8wHQYDVQQDDBZBZmZpcm1UcnVz
+dCBDb21tZXJjaWFsMB4XDTEwMDEyOTE0MDYwNloXDTMwMTIzMTE0MDYwNlowRDEL
+MAkGA1UEBhMCVVMxFDASBgNVBAoMC0FmZmlybVRydXN0MR8wHQYDVQQDDBZBZmZp
+cm1UcnVzdCBDb21tZXJjaWFsMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKC
+AQEA9htPZwcroRX1BiLLHwGy43NFBkRJLLtJJRTWzsO3qyxPxkEylFf6EqdbDuKP
+Hx6GGaeqtS25Xw2Kwq+FNXkyLbscYjfysVtKPcrNcV/pQr6U6Mje+SJIZMblq8Yr
+ba0F8PrVC8+a5fBQpIs7R6UjW3p6+DM/uO+Zl+MgwdYoic+U+7lF7eNAFxHUdPAL
+MeIrJmqbTFeurCA+ukV6BfO9m2kVrn1OIGPENXY6BwLJN/3HR+7o8XYdcxXyl6S1
+yHp52UKqK39c/s4mT6NmgTWvRLpUHhwwMmWd5jyTXlBOeuM61G7MGvv50jeuJCqr
+VwMiKA1JdX+3KNp1v47j3A55MQIDAQABo0IwQDAdBgNVHQ4EFgQUnZPGU4teyq8/
+nx4P5ZmVvCT2lI8wDwYDVR0TAQH/BAUwAwEB/zAOBgNVHQ8BAf8EBAMCAQYwDQYJ
+KoZIhvcNAQELBQADggEBAFis9AQOzcAN/wr91LoWXym9e2iZWEnStB03TX8nfUYG
+XUPGhi4+c7ImfU+TqbbEKpqrIZcUsd6M06uJFdhrJNTxFq7YpFzUf1GO7RgBsZNj
+vbz4YYCanrHOQnDiqX0GJX0nof5v7LMeJNrjS1UaADs1tDvZ110w/YETifLCBivt
+Z8SOyUOyXGsViQK8YvxO8rUzqrJv0wqiUOP2O+guRMLbZjipM1ZI8W0bM40NjD9g
+N53Tym1+NH4Nn3J2ixufcv1SNUFFApYvHLKac0khsUlHRUe072o0EclNmsxZt9YC
+nlpOZbWUrhvfKbAW8b8Angc6F2S1BLUjIZkKlTuXfO8=
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIIDTDCCAjSgAwIBAgIIfE8EORzUmS0wDQYJKoZIhvcNAQEFBQAwRDELMAkGA1UE
+BhMCVVMxFDASBgNVBAoMC0FmZmlybVRydXN0MR8wHQYDVQQDDBZBZmZpcm1UcnVz
+dCBOZXR3b3JraW5nMB4XDTEwMDEyOTE0MDgyNFoXDTMwMTIzMTE0MDgyNFowRDEL
+MAkGA1UEBhMCVVMxFDASBgNVBAoMC0FmZmlybVRydXN0MR8wHQYDVQQDDBZBZmZp
+cm1UcnVzdCBOZXR3b3JraW5nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKC
+AQEAtITMMxcua5Rsa2FSoOujz3mUTOWUgJnLVWREZY9nZOIG41w3SfYvm4SEHi3y
+YJ0wTsyEheIszx6e/jarM3c1RNg1lho9Nuh6DtjVR6FqaYvZ/Ls6rnla1fTWcbua
+kCNrmreIdIcMHl+5ni36q1Mr3Lt2PpNMCAiMHqIjHNRqrSK6mQEubWXLviRmVSRL
+QESxG9fhwoXA3hA/Pe24/PHxI1Pcv2WXb9n5QHGNfb2V1M6+oF4nI979ptAmDgAp
+6zxG8D1gvz9Q0twmQVGeFDdCBKNwV6gbh+0t+nvujArjqWaJGctB+d1ENmHP4ndG
+yH329JKBNv3bNPFyfvMMFr20FQIDAQABo0IwQDAdBgNVHQ4EFgQUBx/S55zawm6i
+QLSwelAQUHTEyL0wDwYDVR0TAQH/BAUwAwEB/zAOBgNVHQ8BAf8EBAMCAQYwDQYJ
+KoZIhvcNAQEFBQADggEBAIlXshZ6qML91tmbmzTCnLQyFE2npN/svqe++EPbkTfO
+tDIuUFUaNU52Q3Eg75N3ThVwLofDwR1t3Mu1J9QsVtFSUzpE0nPIxBsFZVpikpzu
+QY0x2+c06lkh1QF612S4ZDnNye2v7UsDSKegmQGA3GWjNq5lWUhPgkvIZfFXHeVZ
+Lgo/bNjR9eUJtGxUAArgFU2HdW23WJZa3W3SAKD0m0i+wzekujbgfIeFlxoVot4u
+olu9rxj5kFDNcFn4J2dHy8egBzp90SxdbBk6ZrV9/ZFvgrG+CJPbFEfxojfHRZ48
+x3evZKiT3/Zpg4Jg8klCNO1aAFSFHBY2kgxc+qatv9s=
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIIFRjCCAy6gAwIBAgIIbYwURrGmCu4wDQYJKoZIhvcNAQEMBQAwQTELMAkGA1UE
+BhMCVVMxFDASBgNVBAoMC0FmZmlybVRydXN0MRwwGgYDVQQDDBNBZmZpcm1UcnVz
+dCBQcmVtaXVtMB4XDTEwMDEyOTE0MTAzNloXDTQwMTIzMTE0MTAzNlowQTELMAkG
+A1UEBhMCVVMxFDASBgNVBAoMC0FmZmlybVRydXN0MRwwGgYDVQQDDBNBZmZpcm1U
+cnVzdCBQcmVtaXVtMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAxBLf
+qV/+Qd3d9Z+K4/as4Tx4mrzY8H96oDMq3I0gW64tb+eT2TZwamjPjlGjhVtnBKAQ
+JG9dKILBl1fYSCkTtuG+kU3fhQxTGJoeJKJPj/CihQvL9Cl/0qRY7iZNyaqoe5rZ
++jjeRFcV5fiMyNlI4g0WJx0eyIOFJbe6qlVBzAMiSy2RjYvmia9mx+n/K+k8rNrS
+s8PhaJyJ+HoAVt70VZVs+7pk3WKL3wt3MutizCaam7uqYoNMtAZ6MMgpv+0GTZe5
+HMQxK9VfvFMSF5yZVylmd2EhMQcuJUmdGPLu8ytxjLW6OQdJd/zvLpKQBY0tL3d7
+70O/Nbua2Plzpyzy0FfuKE4mX4+QaAkvuPjcBukumj5Rp9EixAqnOEhss/n/fauG
+V+O61oV4d7pD6kh/9ti+I20ev9E2bFhc8e6kGVQa9QPSdubhjL08s9NIS+LI+H+S
+qHZGnEJlPqQewQcDWkYtuJfzt9WyVSHvutxMAJf7FJUnM7/oQ0dG0giZFmA7mn7S
+5u046uwBHjxIVkkJx0w3AJ6IDsBz4W9m6XJHMD4Q5QsDyZpCAGzFlH5hxIrff4Ia
+C1nEWTJ3s7xgaVY5/bQGeyzWZDbZvUjthB9+pSKPKrhC9IK31FOQeE4tGv2Bb0TX
+OwF0lkLgAOIua+rF7nKsu7/+6qqo+Nz2snmKtmcCAwEAAaNCMEAwHQYDVR0OBBYE
+FJ3AZ6YMItkm9UWrpmVSESfYRaxjMA8GA1UdEwEB/wQFMAMBAf8wDgYDVR0PAQH/
+BAQDAgEGMA0GCSqGSIb3DQEBDAUAA4ICAQCzV00QYk465KzquByvMiPIs0laUZx2
+KI15qldGF9X1Uva3ROgIRL8YhNILgM3FEv0AVQVhh0HctSSePMTYyPtwni94loMg
+Nt58D2kTiKV1NpgIpsbfrM7jWNa3Pt668+s0QNiigfV4Py/VpfzZotReBA4Xrf5B
+8OWycvpEgjNC6C1Y91aMYj+6QrCcDFx+LmUmXFNPALJ4fqENmS2NuB2OosSw/WDQ
+MKSOyARiqcTtNd56l+0OOF6SL5Nwpamcb6d9Ex1+xghIsV5n61EIJenmJWtSKZGc
+0jlzCFfemQa0W50QBuHCAKi4HEoCChTQwUHK+4w1IX2COPKpVJEZNZOUbWo6xbLQ
+u4mGk+ibyQ86p3q4ofB4Rvr8Ny/lioTz3/4E2aFooC8k4gmVBtWVyuEklut89pMF
+u+1z6S3RdTnX5yTb2E5fQ4+e0BQ5v1VwSJlXMbSc7kqYA5YwH2AG7hsj/oFgIxpH
+YoWlzBk0gG+zrBrjn/B7SK3VAdlntqlyk+otZrWyuOQ9PLLvTIzq6we/qzWaVYa8
+GKa1qF60g2xraUDTn9zxw2lrueFtCfTxqlB2Cnp9ehehVZZCmTEJ3WARjQUwfuaO
+RtGdFNrHF+QFlozEJLUbzxQHskD4o55BhrwE0GuWyCqANP2/7waj3VjFhT0+j/6e
+KeC2uAloGRwYQw==
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIIB/jCCAYWgAwIBAgIIdJclisc/elQwCgYIKoZIzj0EAwMwRTELMAkGA1UEBhMC
+VVMxFDASBgNVBAoMC0FmZmlybVRydXN0MSAwHgYDVQQDDBdBZmZpcm1UcnVzdCBQ
+cmVtaXVtIEVDQzAeFw0xMDAxMjkxNDIwMjRaFw00MDEyMzExNDIwMjRaMEUxCzAJ
+BgNVBAYTAlVTMRQwEgYDVQQKDAtBZmZpcm1UcnVzdDEgMB4GA1UEAwwXQWZmaXJt
+VHJ1c3QgUHJlbWl1bSBFQ0MwdjAQBgcqhkjOPQIBBgUrgQQAIgNiAAQNMF4bFZ0D
+0KF5Nbc6PJJ6yhUczWLznCZcBz3lVPqj1swS6vQUX+iOGasvLkjmrBhDeKzQN8O9
+ss0s5kfiGuZjuD0uL3jET9v0D6RoTFVya5UdThhClXjMNzyR4ptlKymjQjBAMB0G
+A1UdDgQWBBSaryl6wBE1NSZRMADDav5A1a7WPDAPBgNVHRMBAf8EBTADAQH/MA4G
+A1UdDwEB/wQEAwIBBjAKBggqhkjOPQQDAwNnADBkAjAXCfOHiFBar8jAQr9HX/Vs
+aobgxCd05DhT1wV/GzTjxi+zygk8N53X57hG8f2h4nECMEJZh0PUUd+60wkyWs6I
+flc9nF9Ca/UHLbXwgpP5WW+uZPpY5Yse42O+tYHNbwKMeQ==
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIIDoDCCAoigAwIBAgIBMTANBgkqhkiG9w0BAQUFADBDMQswCQYDVQQGEwJKUDEc
+MBoGA1UEChMTSmFwYW5lc2UgR292ZXJubWVudDEWMBQGA1UECxMNQXBwbGljYXRp
+b25DQTAeFw0wNzEyMTIxNTAwMDBaFw0xNzEyMTIxNTAwMDBaMEMxCzAJBgNVBAYT
+AkpQMRwwGgYDVQQKExNKYXBhbmVzZSBHb3Zlcm5tZW50MRYwFAYDVQQLEw1BcHBs
+aWNhdGlvbkNBMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAp23gdE6H
+j6UG3mii24aZS2QNcfAKBZuOquHMLtJqO8F6tJdhjYq+xpqcBrSGUeQ3DnR4fl+K
+f5Sk10cI/VBaVuRorChzoHvpfxiSQE8tnfWuREhzNgaeZCw7NCPbXCbkcXmP1G55
+IrmTwcrNwVbtiGrXoDkhBFcsovW8R0FPXjQilbUfKW1eSvNNcr5BViCH/OlQR9cw
+FO5cjFW6WY2H/CPek9AEjP3vbb3QesmlOmpyM8ZKDQUXKi17safY1vC+9D/qDiht
+QWEjdnjDuGWk81quzMKq2edY3rZ+nYVunyoKb58DKTCXKB28t89UKU5RMfkntigm
+/qJj5kEW8DOYRwIDAQABo4GeMIGbMB0GA1UdDgQWBBRUWssmP3HMlEYNllPqa0jQ
+k/5CdTAOBgNVHQ8BAf8EBAMCAQYwWQYDVR0RBFIwUKROMEwxCzAJBgNVBAYTAkpQ
+MRgwFgYDVQQKDA/ml6XmnKzlm73mlL/lupwxIzAhBgNVBAsMGuOCouODl+ODquOC
+seODvOOCt+ODp+ODs0NBMA8GA1UdEwEB/wQFMAMBAf8wDQYJKoZIhvcNAQEFBQAD
+ggEBADlqRHZ3ODrso2dGD/mLBqj7apAxzn7s2tGJfHrrLgy9mTLnsCTWw//1sogJ
+hyzjVOGjprIIC8CFqMjSnHH2HZ9g/DgzE+Ge3Atf2hZQKXsvcJEPmbo0NI2VdMV+
+eKlmXb3KIXdCEKxmJj3ekav9FfBv7WxfEPjzFvYDio+nEhEMy/0/ecGc/WLuo89U
+DNErXxc+4z6/wCs+CZv+iKZ+tJIX/COUgb1up8WMwusRRdv4QcmWdupwX3kSa+Sj
+B1oF7ydJzyGfikwJcGapJsErEU4z0g781mzSDjJkaP+tBXhfAx2o45CsJOAPQKdL
+rosot4LKGAfmt1t06SAZf7IbiVQ=
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIIDdzCCAl+gAwIBAgIIXDPLYixfszIwDQYJKoZIhvcNAQELBQAwPDEeMBwGA1UE
+AwwVQXRvcyBUcnVzdGVkUm9vdCAyMDExMQ0wCwYDVQQKDARBdG9zMQswCQYDVQQG
+EwJERTAeFw0xMTA3MDcxNDU4MzBaFw0zMDEyMzEyMzU5NTlaMDwxHjAcBgNVBAMM
+FUF0b3MgVHJ1c3RlZFJvb3QgMjAxMTENMAsGA1UECgwEQXRvczELMAkGA1UEBhMC
+REUwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCVhTuXbyo7LjvPpvMp
+Nb7PGKw+qtn4TaA+Gke5vJrf8v7MPkfoepbCJI419KkM/IL9bcFyYie96mvr54rM
+VD6QUM+A1JX76LWC1BTFtqlVJVfbsVD2sGBkWXppzwO3bw2+yj5vdHLqqjAqc2K+
+SZFhyBH+DgMq92og3AIVDV4VavzjgsG1xZ1kCWyjWZgHJ8cblithdHFsQ/H3NYkQ
+4J7sVaE3IqKHBAUsR320HLliKWYoyrfhk/WklAOZuXCFteZI6o1Q/NnezG8HDt0L
+cp2AMBYHlT8oDv3FdU9T1nSatCQujgKRz3bFmx5VdJx4IbHwLfELn8LVlhgf8FQi
+eowHAgMBAAGjfTB7MB0GA1UdDgQWBBSnpQaxLKYJYO7Rl+lwrrw7GWzbITAPBgNV
+HRMBAf8EBTADAQH/MB8GA1UdIwQYMBaAFKelBrEspglg7tGX6XCuvDsZbNshMBgG
+A1UdIAQRMA8wDQYLKwYBBAGwLQMEAQEwDgYDVR0PAQH/BAQDAgGGMA0GCSqGSIb3
+DQEBCwUAA4IBAQAmdzTblEiGKkGdLD4GkGDEjKwLVLgfuXvTBznk+j57sj1O7Z8j
+vZfza1zv7v1Apt+hk6EKhqzvINB5Ab149xnYJDE0BAGmuhWawyfc2E8PzBhj/5kP
+DpFrdRbhIfzYJsdHt6bPWHJxfrrhTZVHO8mvbaG0weyJ9rQPOLXiZNwlz6bb65pc
+maHFCN795trV1lpFDMS3wrUU77QR/w4VtfX128a961qn8FYiqTxlVMYVqL2Gns2D
+lmh6cYGJ4Qvh6hEbaAjMaZ7snkGeRDImeuKHCnE96+RapNLbxc3G3mB/ufNPRJLv
+KrcYPqcZ2Qt9sTdBQrC6YB3y/gkRsPCHe6ed
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIIGFDCCA/ygAwIBAgIIU+w77vuySF8wDQYJKoZIhvcNAQEFBQAwUTELMAkGA1UE
+BhMCRVMxQjBABgNVBAMMOUF1dG9yaWRhZCBkZSBDZXJ0aWZpY2FjaW9uIEZpcm1h
+cHJvZmVzaW9uYWwgQ0lGIEE2MjYzNDA2ODAeFw0wOTA1MjAwODM4MTVaFw0zMDEy
+MzEwODM4MTVaMFExCzAJBgNVBAYTAkVTMUIwQAYDVQQDDDlBdXRvcmlkYWQgZGUg
+Q2VydGlmaWNhY2lvbiBGaXJtYXByb2Zlc2lvbmFsIENJRiBBNjI2MzQwNjgwggIi
+MA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoICAQDKlmuO6vj78aI14H9M2uDDUtd9
+thDIAl6zQyrET2qyyhxdKJp4ERppWVevtSBC5IsP5t9bpgOSL/UR5GLXMnE42QQM
+cas9UX4PB99jBVzpv5RvwSmCwLTaUbDBPLutN0pcyvFLNg4kq7/DhHf9qFD0sefG
+L9ItWY16Ck6WaVICqjaY7Pz6FIMMNx/Jkjd/14Et5cS54D40/mf0PmbR0/RAz15i
+NA9wBj4gGFrO93IbJWyTdBSTo3OxDqqHECNZXyAFGUftaI6SEspd/NYrspI8IM/h
+X68gvqB2f3bl7BqGYTM+53u0P6APjqK5am+5hyZvQWyIplD9amML9ZMWGxmPsu2b
+m8mQ9QEM3xk9Dz44I8kvjwzRAv4bVdZO0I08r0+k8/6vKtMFnXkIoctXMbScyJCy
+Z/QYFpM6/EfY0XiWMR+6KwxfXZmtY4laJCB22N/9q06mIqqdXuYnin1oKaPnirja
+EbsXLZmdEyRG98Xi2J+Of8ePdG1asuhy9azuJBCtLxTa/y2aRnFHvkLfuwHb9H/T
+KI8xWVvTyQKmtFLKbpf7Q8UIJm+K9Lv9nyiqDdVF8xM6HdjAeI9BZzwelGSuewvF
+6NkBiDkal4ZkQdU7hwxu+g/GvUgUvzlN1J5Bto+WHWOWk9mVBngxaJ43BjuAiUVh
+OSPHG0SjFeUc+JIwuwIDAQABo4HvMIHsMBIGA1UdEwEB/wQIMAYBAf8CAQEwDgYD
+VR0PAQH/BAQDAgEGMB0GA1UdDgQWBBRlzeurNR4APn7VdMActHNHDhpkLzCBpgYD
+VR0gBIGeMIGbMIGYBgRVHSAAMIGPMC8GCCsGAQUFBwIBFiNodHRwOi8vd3d3LmZp
+cm1hcHJvZmVzaW9uYWwuY29tL2NwczBcBggrBgEFBQcCAjBQHk4AUABhAHMAZQBv
+ACAAZABlACAAbABhACAAQgBvAG4AYQBuAG8AdgBhACAANAA3ACAAQgBhAHIAYwBl
+AGwAbwBuAGEAIAAwADgAMAAxADcwDQYJKoZIhvcNAQEFBQADggIBABd9oPm03cXF
+661LJLWhAqvdpYhKsg9VSytXjDvlMd3+xDLx51tkljYyGOylMnfX40S2wBEqgLk9
+am58m9Ot/MPWo+ZkKXzR4Tgegiv/J2Wv+xYVxC5xhOW1//qkR71kMrv2JYSiJ0L1
+ILDCExARzRAVukKQKtJE4ZYm6zFIEv0q2skGz3QeqUvVhyj5eTSSPi5E6PaPT481
+PyWzOdxjKpBrIF/EUhJOlywqrJ2X3kjyo2bbwtKDlaZmp54lD+kLM5FlClrD2VQS
+3a/DTg4fJl4N3LON7NWBcN7STyQF82xO9UxJZo3R/9ILJUFI/lGExkKvgATP0H5k
+SeTy36LssUzAKh3ntLFlosS88Zj0qnAHY7S42jtM+kAiMFsRpvAFDsYCA0irhpuF
+3dvd6qJ2gHN99ZwExEWN57kci57q13XRcrHedUTnQn3iV2t93Jm8PYMo6oCTjcVM
+ZcFwgbg4/EMxsvYDNEeyrPsiBsse3RdHHF9mudMaotoRsaS8I8nkvof/uZS2+F0g
+StRf571oe2XyFR7SOqkt6dhrJKyXWERHrVkY8SFlcN7ONGCoQPHzPKTDKCOM/icz
+Q0CgFzzr6juwcqajuUpLXhZI9LK8yIySxZ2frHI2vDSANGupi5LAuBft7HZT9SQB
+jLMi6Et8Vcad+qMUu2WFbm5PEn4KPJ2V
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIIDdzCCAl+gAwIBAgIEAgAAuTANBgkqhkiG9w0BAQUFADBaMQswCQYDVQQGEwJJ
+RTESMBAGA1UEChMJQmFsdGltb3JlMRMwEQYDVQQLEwpDeWJlclRydXN0MSIwIAYD
+VQQDExlCYWx0aW1vcmUgQ3liZXJUcnVzdCBSb290MB4XDTAwMDUxMjE4NDYwMFoX
+DTI1MDUxMjIzNTkwMFowWjELMAkGA1UEBhMCSUUxEjAQBgNVBAoTCUJhbHRpbW9y
+ZTETMBEGA1UECxMKQ3liZXJUcnVzdDEiMCAGA1UEAxMZQmFsdGltb3JlIEN5YmVy
+VHJ1c3QgUm9vdDCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAKMEuyKr
+mD1X6CZymrV51Cni4eiVgLGw41uOKymaZN+hXe2wCQVt2yguzmKiYv60iNoS6zjr
+IZ3AQSsBUnuId9Mcj8e6uYi1agnnc+gRQKfRzMpijS3ljwumUNKoUMMo6vWrJYeK
+mpYcqWe4PwzV9/lSEy/CG9VwcPCPwBLKBsua4dnKM3p31vjsufFoREJIE9LAwqSu
+XmD+tqYF/LTdB1kC1FkYmGP1pWPgkAx9XbIGevOF6uvUA65ehD5f/xXtabz5OTZy
+dc93Uk3zyZAsuT3lySNTPx8kmCFcB5kpvcY67Oduhjprl3RjM71oGDHweI12v/ye
+jl0qhqdNkNwnGjkCAwEAAaNFMEMwHQYDVR0OBBYEFOWdWTCCR1jMrPoIVDaGezq1
+BE3wMBIGA1UdEwEB/wQIMAYBAf8CAQMwDgYDVR0PAQH/BAQDAgEGMA0GCSqGSIb3
+DQEBBQUAA4IBAQCFDF2O5G9RaEIFoN27TyclhAO992T9Ldcw46QQF+vaKSm2eT92
+9hkTI7gQCvlYpNRhcL0EYWoSihfVCr3FvDB81ukMJY2GQE/szKN+OMY3EU/t3Wgx
+jkzSswF07r51XgdIGn9w/xZchMB5hbgF/X++ZRGjD8ACtPhSNzkE1akxehi/oCr0
+Epn3o0WC4zxe9Z2etciefC7IpJ5OCBRLbf1wbWsaY71k5h+3zvDyny67G7fyUIhz
+ksLi4xaNmjICq44Y3ekQEe5+NauQrz4wlHrQMz2nZQ/1/I6eYs9HRCwBXbsdtTLS
+R9I4LtD+gdwyah617jzV/OeBHRnDJELqYzmp
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIIDUzCCAjugAwIBAgIBATANBgkqhkiG9w0BAQUFADBLMQswCQYDVQQGEwJOTzEd
+MBsGA1UECgwUQnV5cGFzcyBBUy05ODMxNjMzMjcxHTAbBgNVBAMMFEJ1eXBhc3Mg
+Q2xhc3MgMiBDQSAxMB4XDTA2MTAxMzEwMjUwOVoXDTE2MTAxMzEwMjUwOVowSzEL
+MAkGA1UEBhMCTk8xHTAbBgNVBAoMFEJ1eXBhc3MgQVMtOTgzMTYzMzI3MR0wGwYD
+VQQDDBRCdXlwYXNzIENsYXNzIDIgQ0EgMTCCASIwDQYJKoZIhvcNAQEBBQADggEP
+ADCCAQoCggEBAIs8B0XY9t/mx8q6jUPFR42wWsE425KEHK8T1A9vNkYgxC7McXA0
+ojTTNy7Y3Tp3L8DrKehc0rWpkTSHIln+zNvnma+WwajHQN2lFYxuyHyXA8vmIPLX
+l18xoS830r7uvqmtqEyeIWZDO6i88wmjONVZJMHCR3axiFyCO7srpgTXjAePzdVB
+HfCuuCkslFJgNJQ72uA40Z0zPhX0kzLFANq1KWYOOngPIVJfAuWSeyXTkh4vFZ2B
+5J2O6O+JzhRMVB0cgRJNcKi+EAUXfh/RuFdV7c27UsKwHnjCTTZoy1YmwVLBvXb3
+WNVyfh9EdrsAiR0WnVE1703CVu9r4Iw7DekCAwEAAaNCMEAwDwYDVR0TAQH/BAUw
+AwEB/zAdBgNVHQ4EFgQUP42aWYv8e3uco684sDntkHGA1sgwDgYDVR0PAQH/BAQD
+AgEGMA0GCSqGSIb3DQEBBQUAA4IBAQAVGn4TirnoB6NLJzKyQJHyIdFkhb5jatLP
+gcIV1Xp+DCmsNx4cfHZSldq1fyOhKXdlyTKdqC5Wq2B2zha0jX94wNWZUYN/Xtm+
+DKhQ7SLHrQVMdvvt7h5HZPb3J31cKA9FxVxiXqaakZG3Uxcu3K1gnZZkOb1naLKu
+BctN518fV4bVIJwo+28TOPX2EZL2fZleHwzoq0QkKXJAPTZSr4xYkHPB7GEseaHs
+h7U/2k3ZIQAw3pDaDtMaSKk+hQsUi4y8QZ5q9w5wwDX3OaJdZtB7WZ+oRxKaJyOk
+LY4ng5IgodcVf/EuGO70SH8vf/GhGLWhC5SgYiAynB321O+/TIho
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIIFWTCCA0GgAwIBAgIBAjANBgkqhkiG9w0BAQsFADBOMQswCQYDVQQGEwJOTzEd
+MBsGA1UECgwUQnV5cGFzcyBBUy05ODMxNjMzMjcxIDAeBgNVBAMMF0J1eXBhc3Mg
+Q2xhc3MgMiBSb290IENBMB4XDTEwMTAyNjA4MzgwM1oXDTQwMTAyNjA4MzgwM1ow
+TjELMAkGA1UEBhMCTk8xHTAbBgNVBAoMFEJ1eXBhc3MgQVMtOTgzMTYzMzI3MSAw
+HgYDVQQDDBdCdXlwYXNzIENsYXNzIDIgUm9vdCBDQTCCAiIwDQYJKoZIhvcNAQEB
+BQADggIPADCCAgoCggIBANfHXvfBB9R3+0Mh9PT1aeTuMgHbo4Yf5FkNuud1g1Lr
+6hxhFUi7HQfKjK6w3Jad6sNgkoaCKHOcVgb/S2TwDCo3SbXlzwx87vFKu3MwZfPV
+L4O2fuPn9Z6rYPnT8Z2SdIrkHJasW4DptfQxh6NR/Md+oW+OU3fUl8FVM5I+GC91
+1K2GScuVr1QGbNgGE41b/+EmGVnAJLqBcXmQRFBoJJRfuLMR8SlBYaNByyM21cHx
+MlAQTn/0hpPshNOOvEu/XAFOBz3cFIqUCqTqc/sLUegTBxj6DvEr0VQVfTzh97QZ
+QmdiXnfgolXsttlpF9U6r0TtSsWe5HonfOV116rLJeffawrbD02TTqigzXsu8lkB
+arcNuAeBfos4GzjmCleZPe4h6KP1DBbdi+w0jpwqHAAVF41og9JwnxgIzRFo1clr
+Us3ERo/ctfPYV3Me6ZQ5BL/T3jjetFPsaRyifsSP5BtwrfKi+fv3FmRmaZ9JUaLi
+FRhnBkp/1Wy1TbMz4GHrXb7pmA8y1x1LPC5aAVKRCfLf6o3YBkBjqhHk/sM3nhRS
+P/TizPJhk9H9Z2vXUq6/aKtAQ6BXNVN48FP4YUIHZMbXb5tMOA1jrGKvNouicwoN
+9SG9dKpN6nIDSdvHXx1iY8f93ZHsM+71bbRuMGjeyNYmsHVee7QHIJihdjK4TWxP
+AgMBAAGjQjBAMA8GA1UdEwEB/wQFMAMBAf8wHQYDVR0OBBYEFMmAd+BikoL1Rpzz
+uvdMw964o605MA4GA1UdDwEB/wQEAwIBBjANBgkqhkiG9w0BAQsFAAOCAgEAU18h
+9bqwOlI5LJKwbADJ784g7wbylp7ppHR/ehb8t/W2+xUbP6umwHJdELFx7rxP462s
+A20ucS6vxOOto70MEae0/0qyexAQH6dXQbLArvQsWdZHEIjzIVEpMMpghq9Gqx3t
+OluwlN5E40EIosHsHdb9T7bWR9AUC8rmyrV7d35BH16Dx7aMOZawP5aBQW9gkOLo
++fsicdl9sz1Gv7SEr5AcD48Saq/v7h56rgJKihcrdv6sVIkkLE8/trKnToyokZf7
+KcZ7XC25y2a2t6hbElGFtQl+Ynhw/qlqYLYdDnkM/crqJIByw5c/8nerQyIKx+u2
+DISCLIBrQYoIwOula9+ZEsuK1V6ADJHgJgg2SMX6OBE1/yWDLfJ6v9r9jv6ly0Us
+H8SIU653DtmadsWOLB2jutXsMq7Aqqz30XpN69QH4kj3Io6wpJ9qzo6ysmD0oyLQ
+I+uUWnpp3Q+/QFesa1lQ2aOZ4W7+jQF5JyMV3pKdewlNWudLSDBaGOYKbeaP4NK7
+5t98biGCwWg5TbSYWGZizEqQXsP6JwSxeRV0mcy+rSDeJmAc61ZRpqPq5KM/p/9h
+3PFaTWwyI0PurKju7koSCTxdccK+efrCh2gdC/1cacwG0Jp9VJkqyTkaGa9LKkPz
+Y11aWOIv4x3kqdbQCtCev9eBCfHJxyYNrJgWVqA=
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIIFWTCCA0GgAwIBAgIBAjANBgkqhkiG9w0BAQsFADBOMQswCQYDVQQGEwJOTzEd
+MBsGA1UECgwUQnV5cGFzcyBBUy05ODMxNjMzMjcxIDAeBgNVBAMMF0J1eXBhc3Mg
+Q2xhc3MgMyBSb290IENBMB4XDTEwMTAyNjA4Mjg1OFoXDTQwMTAyNjA4Mjg1OFow
+TjELMAkGA1UEBhMCTk8xHTAbBgNVBAoMFEJ1eXBhc3MgQVMtOTgzMTYzMzI3MSAw
+HgYDVQQDDBdCdXlwYXNzIENsYXNzIDMgUm9vdCBDQTCCAiIwDQYJKoZIhvcNAQEB
+BQADggIPADCCAgoCggIBAKXaCpUWUOOV8l6ddjEGMnqb8RB2uACatVI2zSRHsJ8Y
+ZLya9vrVediQYkwiL944PdbgqOkcLNt4EemOaFEVcsfzM4fkoF0LXOBXByow9c3E
+N3coTRiR5r/VUv1xLXA+58bEiuPwKAv0dpihi4dVsjoT/Lc+JzeOIuOoTyrvYLs9
+tznDDgFHmV0ST9tD+leh7fmdvhFHJlsTmKtdFoqwNxxXnUX/iJY2v7vKB3tvh2PX
+0DJq1l1sDPGzbjniazEuOQAnFN44wOwZZoYS6J1yFhNkUsepNxz9gjDthBgd9K5c
+/3ATAOux9TN6S9ZV+AWNS2mw9bMoNlwUxFFzTWsL8TQH2xc519woe2v1n/MuwU8X
+KhDzzMro6/1rqy6any2CbgTUUgGTLT2G/H783+9CHaZr77kgxve9oKeV/afmiSTY
+zIw0bOIjL9kSGiG5VZFvC5F5GQytQIgLcOJ60g7YaEi7ghM5EFjp2CoHxhLbWNvS
+O1UQRwUVZ2J+GGOmRj8JDlQyXr8NYnon74Do29lLBlo3WiXQCBJ31G8JUJc9yB3D
+34xFMFbG02SrZvPAXpacw8Tvw3xrizp5f7NJzz3iiZ+gMEuFuZyUJHmPfWupRWgP
+K9Dx2hzLabjKSWJtyNBjYt1gD1iqj6G8BaVmos8bdrKEZLFMOVLAMLrwjEsCsLa3
+AgMBAAGjQjBAMA8GA1UdEwEB/wQFMAMBAf8wHQYDVR0OBBYEFEe4zf/lb+74suwv
+Tg75JbCOPGvDMA4GA1UdDwEB/wQEAwIBBjANBgkqhkiG9w0BAQsFAAOCAgEAACAj
+QTUEkMJAYmDv4jVM1z+s4jSQuKFvdvoWFqRINyzpkMLyPPgKn9iB5btb2iUspKdV
+cSQy9sgL8rxq+JOssgfCX5/bzMiKqr5qb+FJEMwx14C7u8jYog5kV+qi9cKpMRXS
+IGrs/CIBKM+GuIAeqcwRpTzyFrNHnfzSgCHEy9BHcEGhyoMZCCxt8l13nIoUE9Q2
+HJLw5QY33KbmkJs4j1xrG0aGQ0JfPgEHU1RdZX33inOhmlRaHylDFCfChQ+1iHsa
+O5S3HWCntZznKWlXWpuTekMwGwPXYshApqr8ZORK15FTAaggiG6cX0S5y2CBNOxv
+033aSF/rtJC8LakcC6wc1aJoIIAE1vyxjy+7SjENSoYc6+I2KSb12tjE8nVhz36u
+dmNKekBlk4f4HoCMhuWG1o8O/FMsYOgWYRqiPkN7zTlgVGr18okmAWiDSKIz6MkE
+kbIRNBE+6tBDGR8Dk5AM/1E9V/RBbuHLoL7ryWPNbczk+DaqaJ3tvV2XcEQNtg41
+3OEMXbugUZTLfhbrES+jkkXITHHZvMmZUldGL1DPvTVp9D0VzgalLA8+9oG6lLvD
+u79leNKGef9JOxqDDPDeeOzI8k1MGt6CKfjBWtrt7uYnXuhF0J0cUahoq0Tj0Itq
+4/g7u9xN12TyUb7mqqta6THuBrxzvxNiCp/HuZc=
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIIEDzCCAvegAwIBAgIBATANBgkqhkiG9w0BAQUFADBKMQswCQYDVQQGEwJTSzET
+MBEGA1UEBxMKQnJhdGlzbGF2YTETMBEGA1UEChMKRGlzaWcgYS5zLjERMA8GA1UE
+AxMIQ0EgRGlzaWcwHhcNMDYwMzIyMDEzOTM0WhcNMTYwMzIyMDEzOTM0WjBKMQsw
+CQYDVQQGEwJTSzETMBEGA1UEBxMKQnJhdGlzbGF2YTETMBEGA1UEChMKRGlzaWcg
+YS5zLjERMA8GA1UEAxMIQ0EgRGlzaWcwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAw
+ggEKAoIBAQCS9jHBfYj9mQGp2HvycXXxMcbzdWb6UShGhJd4NLxs/LxFWYgmGErE
+Nx+hSkS943EE9UQX4j/8SFhvXJ56CbpRNyIjZkMhsDxkovhqFQ4/61HhVKndBpnX
+mjxUizkDPw/Fzsbrg3ICqB9x8y34dQjbYkzo+s7552oftms1grrijxaSfQUMbEYD
+XcDtab86wYqg6I7ZuUUohwjstMoVvoLdtUSLLa2GDGhibYVW8qwUYzrG0ZmsNHhW
+S8+2rT+MitcE5eN4TPWGqvWP+j1scaMtymfraHtuM6kMgiioTGohQBUgDCZbg8Kp
+FhXAJIJdKxatymP2dACw30PEEGBWZ2NFAgMBAAGjgf8wgfwwDwYDVR0TAQH/BAUw
+AwEB/zAdBgNVHQ4EFgQUjbJJaJ1yCCW5wCf1UJNWSEZx+Y8wDgYDVR0PAQH/BAQD
+AgEGMDYGA1UdEQQvMC2BE2Nhb3BlcmF0b3JAZGlzaWcuc2uGFmh0dHA6Ly93d3cu
+ZGlzaWcuc2svY2EwZgYDVR0fBF8wXTAtoCugKYYnaHR0cDovL3d3dy5kaXNpZy5z
+ay9jYS9jcmwvY2FfZGlzaWcuY3JsMCygKqAohiZodHRwOi8vY2EuZGlzaWcuc2sv
+Y2EvY3JsL2NhX2Rpc2lnLmNybDAaBgNVHSAEEzARMA8GDSuBHpGT5goAAAABAQEw
+DQYJKoZIhvcNAQEFBQADggEBAF00dGFMrzvY/59tWDYcPQuBDRIrRhCA/ec8J9B6
+yKm2fnQwM6M6int0wHl5QpNt/7EpFIKrIYwvF/k/Ji/1WcbvgAa3mkkp7M5+cTxq
+EEHA9tOasnxakZzArFvITV734VP/Q3f8nktnbNfzg9Gg4H8l37iYC5oyOGwwoPP/
+CBUz91BKez6jPiCp3C9WgArtQVCwyfTssuMmRAAOb54GvCKWU3BlxFAKRmukLyeB
+EicTXxChds6KezfqwzlhA5WYOudsiCUI/HloDYd9Yvi0X/vF2Ey9WLw/Q1vUHgFN
+PGO+I++MzVpQuGhU+QqZMxEA4Z7CRneC9VkGjCFMhwnN5ag=
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIIFaTCCA1GgAwIBAgIJAMMDmu5QkG4oMA0GCSqGSIb3DQEBBQUAMFIxCzAJBgNV
+BAYTAlNLMRMwEQYDVQQHEwpCcmF0aXNsYXZhMRMwEQYDVQQKEwpEaXNpZyBhLnMu
+MRkwFwYDVQQDExBDQSBEaXNpZyBSb290IFIxMB4XDTEyMDcxOTA5MDY1NloXDTQy
+MDcxOTA5MDY1NlowUjELMAkGA1UEBhMCU0sxEzARBgNVBAcTCkJyYXRpc2xhdmEx
+EzARBgNVBAoTCkRpc2lnIGEucy4xGTAXBgNVBAMTEENBIERpc2lnIFJvb3QgUjEw
+ggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoICAQCqw3j33Jijp1pedxiy3QRk
+D2P9m5YJgNXoqqXinCaUOuiZc4yd39ffg/N4T0Dhf9Kn0uXKE5Pn7cZ3Xza1lK/o
+OI7bm+V8u8yN63Vz4STN5qctGS7Y1oprFOsIYgrY3LMATcMjfF9DCCMyEtztDK3A
+fQ+lekLZWnDZv6fXARz2m6uOt0qGeKAeVjGu74IKgEH3G8muqzIm1Cxr7X1r5OJe
+IgpFy4QxTaz+29FHuvlglzmxZcfe+5nkCiKxLU3lSCZpq+Kq8/v8kiky6bM+TR8n
+oc2OuRf7JT7JbvN32g0S9l3HuzYQ1VTW8+DiR0jm3hTaYVKvJrT1cU/J19IG32PK
+/yHoWQbgCNWEFVP3Q+V8xaCJmGtzxmjOZd69fwX3se72V6FglcXM6pM6vpmumwKj
+rckWtc7dXpl4fho5frLABaTAgqWjR56M6ly2vGfb5ipN0gTco65F97yLnByn1tUD
+3AjLLhbKXEAz6GfDLuemROoRRRw1ZS0eRWEkG4IupZ0zXWX4Qfkuy5Q/H6MMMSRE
+7cderVC6xkGbrPAXZcD4XW9boAo0PO7X6oifmPmvTiT6l7Jkdtqr9O3jw2Dv1fkC
+yC2fg69naQanMVXVz0tv/wQFx1isXxYb5dKj6zHbHzMVTdDypVP1y+E9Tmgt2BLd
+qvLmTZtJ5cUoobqwWsagtQIDAQABo0IwQDAPBgNVHRMBAf8EBTADAQH/MA4GA1Ud
+DwEB/wQEAwIBBjAdBgNVHQ4EFgQUiQq0OJMa5qvum5EY+fU8PjXQ04IwDQYJKoZI
+hvcNAQEFBQADggIBADKL9p1Kyb4U5YysOMo6CdQbzoaz3evUuii+Eq5FLAR0rBNR
+xVgYZk2C2tXck8An4b58n1KeElb21Zyp9HWc+jcSjxyT7Ff+Bw+r1RL3D65hXlaA
+SfX8MPWbTx9BLxyE04nH4toCdu0Jz2zBuByDHBb6lM19oMgY0sidbvW9adRtPTXo
+HqJPYNcHKfyyo6SdbhWSVhlMCrDpfNIZTUJG7L399ldb3Zh+pE3McgODWF3vkzpB
+emOqfDqo9ayk0d2iLbYq/J8BjuIQscTK5GfbVSUZP/3oNn6z4eGBrxEWi1CXYBmC
+AMBrTXO40RMHPuq2MU/wQppt4hF05ZSsjYSVPCGvxdpHyN85YmLLW1AL14FABZyb
+7bq2ix4Eb5YgOe2kfSnbSM6C3NQCjR0EMVrHS/BsYVLXtFHCgWzN4funodKSds+x
+DzdYpPJScWc/DIh4gInByLUfkmO+p3qKViwaqKactV2zY9ATIKHrkWzQjX2v3wvk
+F7mGnjixlAxYjOBVqjtjbZqJYLhkKpLGN/R+Q0O3c+gB53+XD9fyexn9GtePyfqF
+a3qdnom2piiZk4hA9z7NUaPK6u95RyG1/jLix8NRb76AdPCkwzryT+lf3xkK8jsT
+Q6wxpLPn6/wY1gGp8yqPNg7rtLG8t0zJa7+h89n07eLw4+1knj0vllJPgFOL
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIIFaTCCA1GgAwIBAgIJAJK4iNuwisFjMA0GCSqGSIb3DQEBCwUAMFIxCzAJBgNV
+BAYTAlNLMRMwEQYDVQQHEwpCcmF0aXNsYXZhMRMwEQYDVQQKEwpEaXNpZyBhLnMu
+MRkwFwYDVQQDExBDQSBEaXNpZyBSb290IFIyMB4XDTEyMDcxOTA5MTUzMFoXDTQy
+MDcxOTA5MTUzMFowUjELMAkGA1UEBhMCU0sxEzARBgNVBAcTCkJyYXRpc2xhdmEx
+EzARBgNVBAoTCkRpc2lnIGEucy4xGTAXBgNVBAMTEENBIERpc2lnIFJvb3QgUjIw
+ggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoICAQCio8QACdaFXS1tFPbCw3Oe
+NcJxVX6B+6tGUODBfEl45qt5WDza/3wcn9iXAng+a0EE6UG9vgMsRfYvZNSrXaNH
+PWSb6WiaxswbP7q+sos0Ai6YVRn8jG+qX9pMzk0DIaPY0jSTVpbLTAwAFjxfGs3I
+x2ymrdMxp7zo5eFm1tL7A7RBZckQrg4FY8aAamkw/dLukO8NJ9+flXP04SXabBbe
+QTg06ov80egEFGEtQX6sx3dOy1FU+16SGBsEWmjGycT6txOgmLcRK7fWV8x8nhfR
+yyX+hk4kLlYMeE2eARKmK6cBZW58Yh2EhN/qwGu1pSqVg8NTEQxzHQuyRpDRQjrO
+QG6Vrf/GlK1ul4SOfW+eioANSW1z4nuSHsPzwfPrLgVv2RvPN3YEyLRa5Beny912
+H9AZdugsBbPWnDTYltxhh5EF5EQIM8HauQhl1K6yNg3ruji6DOWbnuuNZt2Zz9aJ
+QfYEkoopKW1rOhzndX0CcQ7zwOe9yxndnWCywmZgtrEE7snmhrmaZkCo5xHtgUUD
+i/ZnWejBBhG93c+AAk9lQHhcR1DIm+YfgXvkRKhbhZri3lrVx/k6RGZL5DJUfORs
+nLMOPReisjQS1n6yqEm70XooQL6iFh/f5DcfEXP7kAplQ6INfPgGAVUzfbANuPT1
+rqVCV3w2EYx7XsQDnYx5nQIDAQABo0IwQDAPBgNVHRMBAf8EBTADAQH/MA4GA1Ud
+DwEB/wQEAwIBBjAdBgNVHQ4EFgQUtZn4r7CU9eMg1gqtzk5WpC5uQu0wDQYJKoZI
+hvcNAQELBQADggIBACYGXnDnZTPIgm7ZnBc6G3pmsgH2eDtpXi/q/075KMOYKmFM
+tCQSin1tERT3nLXK5ryeJ45MGcipvXrA1zYObYVybqjGom32+nNjf7xueQgcnYqf
+GopTpti72TVVsRHFqQOzVju5hJMiXn7B9hJSi+osZ7z+Nkz1uM/Rs0mSO9MpDpkb
+lvdhuDvEK7Z4bLQjb/D907JedR+Zlais9trhxTF7+9FGs9K8Z7RiVLoJ92Owk6Ka
++elSLotgEqv89WBW7xBci8QaQtyDW2QOy7W81k/BfDxujRNt+3vrMNDcTa/F1bal
+TFtxyegxvug4BkihGuLq0t4SOVga/4AOgnXmt8kHbA7v/zjxmHHEt38OFdAlab0i
+nSvtBfZGR6ztwPDUO+Ls7pZbkBNOHlY667DvlruWIxG68kOGdGSVyCh13x01utI3
+gzhTODY7z2zp+WsO0PsE6E9312UBeIYMej4hYvF/Y3EMyZ9E26gnonW+boE+18Dr
+G5gPcFw0sorMwIUY6256s/daoQe/qUKS82Ail+QUoQebTnbAjn39pCXHR+3/H3Os
+zMOl6W8KjptlwlCFtaOgUxLMVYdh84GuEEZhvUQhuMI9dM9+JDX6HAcOmz0iyu8x
+L4ysEr3vQCj8KWefshNPZiTEUxnpHikV7+ZtsH8tZ/3zbBt1RqPlShfppNcL
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIICCTCCAY+gAwIBAgIQaEpYcIBr8I8C+vbe6LCQkDAKBggqhkjOPQQDAzBGMQsw
+CQYDVQQGEwJDTjEaMBgGA1UEChMRV29TaWduIENBIExpbWl0ZWQxGzAZBgNVBAMT
+EkNBIFdvU2lnbiBFQ0MgUm9vdDAeFw0xNDExMDgwMDU4NThaFw00NDExMDgwMDU4
+NThaMEYxCzAJBgNVBAYTAkNOMRowGAYDVQQKExFXb1NpZ24gQ0EgTGltaXRlZDEb
+MBkGA1UEAxMSQ0EgV29TaWduIEVDQyBSb290MHYwEAYHKoZIzj0CAQYFK4EEACID
+YgAE4f2OuEMkq5Z7hcK6C62N4DrjJLnSsb6IOsq/Srj57ywvr1FQPEd1bPiUt5v8
+KB7FVMxjnRZLU8HnIKvNrCXSf4/CwVqCXjCLelTOA7WRf6qU0NGKSMyCBSah1VES
+1ns2o0IwQDAOBgNVHQ8BAf8EBAMCAQYwDwYDVR0TAQH/BAUwAwEB/zAdBgNVHQ4E
+FgQUqv3VWqP2h4syhf3RMluARZPzA7gwCgYIKoZIzj0EAwMDaAAwZQIxAOSkhLCB
+1T2wdKyUpOgOPQB0TKGXa/kNUTyh2Tv0Daupn75OcsqF1NnstTJFGG+rrQIwfcf3
+aWMvoeGY7xMQ0Xk/0f7qO3/eVvSQsRUR2LIiFdAvwyYua/GRspBl9JrmkO5K
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIIFjTCCA3WgAwIBAgIEGErM1jANBgkqhkiG9w0BAQsFADBWMQswCQYDVQQGEwJD
+TjEwMC4GA1UECgwnQ2hpbmEgRmluYW5jaWFsIENlcnRpZmljYXRpb24gQXV0aG9y
+aXR5MRUwEwYDVQQDDAxDRkNBIEVWIFJPT1QwHhcNMTIwODA4MDMwNzAxWhcNMjkx
+MjMxMDMwNzAxWjBWMQswCQYDVQQGEwJDTjEwMC4GA1UECgwnQ2hpbmEgRmluYW5j
+aWFsIENlcnRpZmljYXRpb24gQXV0aG9yaXR5MRUwEwYDVQQDDAxDRkNBIEVWIFJP
+T1QwggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoICAQDXXWvNED8fBVnVBU03
+sQ7smCuOFR36k0sXgiFxEFLXUWRwFsJVaU2OFW2fvwwbwuCjZ9YMrM8irq93VCpL
+TIpTUnrD7i7es3ElweldPe6hL6P3KjzJIx1qqx2hp/Hz7KDVRM8Vz3IvHWOX6Jn5
+/ZOkVIBMUtRSqy5J35DNuF++P96hyk0g1CXohClTt7GIH//62pCfCqktQT+x8Rgp
+7hZZLDRJGqgG16iI0gNyejLi6mhNbiyWZXvKWfry4t3uMCz7zEasxGPrb382KzRz
+EpR/38wmnvFyXVBlWY9ps4deMm/DGIq1lY+wejfeWkU7xzbh72fROdOXW3NiGUgt
+hxwG+3SYIElz8AXSG7Ggo7cbcNOIabla1jj0Ytwli3i/+Oh+uFzJlU9fpy25IGvP
+a931DfSCt/SyZi4QKPaXWnuWFo8BGS1sbn85WAZkgwGDg8NNkt0yxoekN+kWzqot
+aK8KgWU6cMGbrU1tVMoqLUuFG7OA5nBFDWteNfB/O7ic5ARwiRIlk9oKmSJgamNg
+TnYGmE69g60dWIolhdLHZR4tjsbftsbhf4oEIRUpdPA+nJCdDC7xij5aqgwJHsfV
+PKPtl8MeNPo4+QgO48BdK4PRVmrJtqhUUy54Mmc9gn900PvhtgVguXDbjgv5E1hv
+cWAQUhC5wUEJ73IfZzF4/5YFjQIDAQABo2MwYTAfBgNVHSMEGDAWgBTj/i39KNAL
+tbq2osS/BqoFjJP7LzAPBgNVHRMBAf8EBTADAQH/MA4GA1UdDwEB/wQEAwIBBjAd
+BgNVHQ4EFgQU4/4t/SjQC7W6tqLEvwaqBYyT+y8wDQYJKoZIhvcNAQELBQADggIB
+ACXGumvrh8vegjmWPfBEp2uEcwPenStPuiB/vHiyz5ewG5zz13ku9Ui20vsXiObT
+ej/tUxPQ4i9qecsAIyjmHjdXNYmEwnZPNDatZ8POQQaIxffu2Bq41gt/UP+TqhdL
+jOztUmCypAbqTuv0axn96/Ua4CUqmtzHQTb3yHQFhDmVOdYLO6Qn+gjYXB74BGBS
+ESgoA//vU2YApUo0FmZ8/Qmkrp5nGm9BC2sGE5uPhnEFtC+NiWYzKXZUmhH4J/qy
+P5Hgzg0b8zAarb8iXRvTvyUFTeGSGn+ZnzxEk8rUQElsgIfXBDrDMlI1Dlb4pd19
+xIsNER9Tyx6yF7Zod1rg1MvIB671Oi6ON7fQAUtDKXeMOZePglr4UeWJoBjnaH9d
+Ci77o0cOPaYjesYBx4/IXr9tgFa+iiS6M+qf4TIRnvHST4D2G0CvOJ4RUHlzEhLN
+5mydLIhyPDCBBpEi6lmt2hkuIsKNuYyH4Ga8cyNfIWRjgEj1oDwYPZTISEEdQLpe
+/v5WOaHIz16eGWRGENoXkbcFgKyLmZJ956LYBws2J+dIeWCKw9cTXPhyQN9Ky8+Z
+AAoACxGV2lZFA4gKn2fQ1XmxqI1AbQ3CekD6819kR5LLU7m7Wc5P/dAVUwHY3+vZ
+5nbv0CO7O6l5s9UCKc2Jo5YPSjXnTkLAdc0Hz+Ys63su
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIIDVTCCAj2gAwIBAgIESTMAATANBgkqhkiG9w0BAQUFADAyMQswCQYDVQQGEwJD
+TjEOMAwGA1UEChMFQ05OSUMxEzARBgNVBAMTCkNOTklDIFJPT1QwHhcNMDcwNDE2
+MDcwOTE0WhcNMjcwNDE2MDcwOTE0WjAyMQswCQYDVQQGEwJDTjEOMAwGA1UEChMF
+Q05OSUMxEzARBgNVBAMTCkNOTklDIFJPT1QwggEiMA0GCSqGSIb3DQEBAQUAA4IB
+DwAwggEKAoIBAQDTNfc/c3et6FtzF8LRb+1VvG7q6KR5smzDo+/hn7E7SIX1mlwh
+IhAsxYLO2uOabjfhhyzcuQxauohV3/2q2x8x6gHx3zkBwRP9SFIhxFXf2tizVHa6
+dLG3fdfA6PZZxU3Iva0fFNrfWEQlMhkqx35+jq44sDB7R3IJMfAw28Mbdim7aXZO
+V/kbZKKTVrdvmW7bCgScEeOAH8tjlBAKqeFkgjH5jCftppkA9nCTGPihNIaj3XrC
+GHn2emU1z5DrvTOTn1OrczvmmzQgLx3vqR1jGqCA2wMv+SYahtKNu6m+UjqHZ0gN
+v7Sg2Ca+I19zN38m5pIEo3/PIKe38zrKy5nLAgMBAAGjczBxMBEGCWCGSAGG+EIB
+AQQEAwIABzAfBgNVHSMEGDAWgBRl8jGtKvf33VKWCscCwQ7vptU7ETAPBgNVHRMB
+Af8EBTADAQH/MAsGA1UdDwQEAwIB/jAdBgNVHQ4EFgQUZfIxrSr3991SlgrHAsEO
+76bVOxEwDQYJKoZIhvcNAQEFBQADggEBAEs17szkrr/Dbq2flTtLP1se31cpolnK
+OOK5Gv+e5m4y3R6u6jW39ZORTtpC4cMXYFDy0VwmuYK36m3knITnA3kXr5g9lNvH
+ugDnuL8BV8F3RTIMO/G0HAiw/VGgod2aHRM2mm23xzy54cXZF/qD1T0VoDy7Hgvi
+yJA/qIYM/PmLXoXLT1tLYhFHxUV8BS9BsZ4QaRuZluBVeftOhpm4lNqGOGqTo+fL
+buXf6iFViZx9fX+Y9QCJ7uOEwFyWtcVG6kbghVW2G8kS1sHNzYDzAgE8yGnLRUhj
+2JTQ7IUOO04RZfSCjKY9ri4ilAnIXOo8gV0WKgOXFlUJ24pBgp5mmxE=
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIIEHTCCAwWgAwIBAgIQToEtioJl4AsC7j41AkblPTANBgkqhkiG9w0BAQUFADCB
+gTELMAkGA1UEBhMCR0IxGzAZBgNVBAgTEkdyZWF0ZXIgTWFuY2hlc3RlcjEQMA4G
+A1UEBxMHU2FsZm9yZDEaMBgGA1UEChMRQ09NT0RPIENBIExpbWl0ZWQxJzAlBgNV
+BAMTHkNPTU9ETyBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eTAeFw0wNjEyMDEwMDAw
+MDBaFw0yOTEyMzEyMzU5NTlaMIGBMQswCQYDVQQGEwJHQjEbMBkGA1UECBMSR3Jl
+YXRlciBNYW5jaGVzdGVyMRAwDgYDVQQHEwdTYWxmb3JkMRowGAYDVQQKExFDT01P
+RE8gQ0EgTGltaXRlZDEnMCUGA1UEAxMeQ09NT0RPIENlcnRpZmljYXRpb24gQXV0
+aG9yaXR5MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA0ECLi3LjkRv3
+UcEbVASY06m/weaKXTuH+7uIzg3jLz8GlvCiKVCZrts7oVewdFFxze1CkU1B/qnI
+2GqGd0S7WWaXUF601CxwRM/aN5VCaTwwxHGzUvAhTaHYujl8HJ6jJJ3ygxaYqhZ8
+Q5sVW7euNJH+1GImGEaaP+vB+fGQV+useg2L23IwambV4EajcNxo2f8ESIl33rXp
++2dtQem8Ob0y2WIC8bGoPW43nOIv4tOiJovGuFVDiOEjPqXSJDlqR6sA1KGzqSX+
+DT+nHbrTUcELpNqsOO9VUCQFZUaTNE8tja3G1CEZ0o7KBWFxB3NH5YoZEr0ETc5O
+nKVIrLsm9wIDAQABo4GOMIGLMB0GA1UdDgQWBBQLWOWLxkwVN6RAqTCpIb5HNlpW
+/zAOBgNVHQ8BAf8EBAMCAQYwDwYDVR0TAQH/BAUwAwEB/zBJBgNVHR8EQjBAMD6g
+PKA6hjhodHRwOi8vY3JsLmNvbW9kb2NhLmNvbS9DT01PRE9DZXJ0aWZpY2F0aW9u
+QXV0aG9yaXR5LmNybDANBgkqhkiG9w0BAQUFAAOCAQEAPpiem/Yb6dc5t3iuHXIY
+SdOH5EOC6z/JqvWote9VfCFSZfnVDeFs9D6Mk3ORLgLETgdxb8CPOGEIqB6BCsAv
+IC9Bi5HcSEW88cbeunZrM8gALTFGTO3nnc+IlP8zwFboJIYmuNg4ON8qa90SzMc/
+RxdMosIGlgnW2/4/PEZB31jiVg88O8EckzXZOFKs7sjsLjBOlDW0JB9LeGna8gI4
+zJVSk/BwJVmcIGfE7vmLV2H0knZ9P4SNVbfo5azV8fUZVqZa+5Acr5Pr5RzUZ5dd
+BA6+C4OmF4O5MBKgxTMVBbkN+8cFduPYSo38NBejxiEovjBFMR7HeL5YYTisO+IB
+ZQ==
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIICiTCCAg+gAwIBAgIQH0evqmIAcFBUTAGem2OZKjAKBggqhkjOPQQDAzCBhTEL
+MAkGA1UEBhMCR0IxGzAZBgNVBAgTEkdyZWF0ZXIgTWFuY2hlc3RlcjEQMA4GA1UE
+BxMHU2FsZm9yZDEaMBgGA1UEChMRQ09NT0RPIENBIExpbWl0ZWQxKzApBgNVBAMT
+IkNPTU9ETyBFQ0MgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkwHhcNMDgwMzA2MDAw
+MDAwWhcNMzgwMTE4MjM1OTU5WjCBhTELMAkGA1UEBhMCR0IxGzAZBgNVBAgTEkdy
+ZWF0ZXIgTWFuY2hlc3RlcjEQMA4GA1UEBxMHU2FsZm9yZDEaMBgGA1UEChMRQ09N
+T0RPIENBIExpbWl0ZWQxKzApBgNVBAMTIkNPTU9ETyBFQ0MgQ2VydGlmaWNhdGlv
+biBBdXRob3JpdHkwdjAQBgcqhkjOPQIBBgUrgQQAIgNiAAQDR3svdcmCFYX7deSR
+FtSrYpn1PlILBs5BAH+X4QokPB0BBO490o0JlwzgdeT6+3eKKvUDYEs2ixYjFq0J
+cfRK9ChQtP6IHG4/bC8vCVlbpVsLM5niwz2J+Wos77LTBumjQjBAMB0GA1UdDgQW
+BBR1cacZSBm8nZ3qQUfflMRId5nTeTAOBgNVHQ8BAf8EBAMCAQYwDwYDVR0TAQH/
+BAUwAwEB/zAKBggqhkjOPQQDAwNoADBlAjEA7wNbeqy3eApyt4jf/7VGFAkK+qDm
+fQjGGoe9GKhzvSbKYAydzpmfz1wPMOG+FDHqAjAU9JM8SaczepBGR7NjfRObTrdv
+GDeAU/7dIOA1mjbRxwG55tzd8/8dLDoWV9mSOdY=
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIIF2DCCA8CgAwIBAgIQTKr5yttjb+Af907YWwOGnTANBgkqhkiG9w0BAQwFADCB
+hTELMAkGA1UEBhMCR0IxGzAZBgNVBAgTEkdyZWF0ZXIgTWFuY2hlc3RlcjEQMA4G
+A1UEBxMHU2FsZm9yZDEaMBgGA1UEChMRQ09NT0RPIENBIExpbWl0ZWQxKzApBgNV
+BAMTIkNPTU9ETyBSU0EgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkwHhcNMTAwMTE5
+MDAwMDAwWhcNMzgwMTE4MjM1OTU5WjCBhTELMAkGA1UEBhMCR0IxGzAZBgNVBAgT
+EkdyZWF0ZXIgTWFuY2hlc3RlcjEQMA4GA1UEBxMHU2FsZm9yZDEaMBgGA1UEChMR
+Q09NT0RPIENBIExpbWl0ZWQxKzApBgNVBAMTIkNPTU9ETyBSU0EgQ2VydGlmaWNh
+dGlvbiBBdXRob3JpdHkwggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoICAQCR
+6FSS0gpWsawNJN3Fz0RndJkrN6N9I3AAcbxT38T6KhKPS38QVr2fcHK3YX/JSw8X
+pz3jsARh7v8Rl8f0hj4K+j5c+ZPmNHrZFGvnnLOFoIJ6dq9xkNfs/Q36nGz637CC
+9BR++b7Epi9Pf5l/tfxnQ3K9DADWietrLNPtj5gcFKt+5eNu/Nio5JIk2kNrYrhV
+/erBvGy2i/MOjZrkm2xpmfh4SDBF1a3hDTxFYPwyllEnvGfDyi62a+pGx8cgoLEf
+Zd5ICLqkTqnyg0Y3hOvozIFIQ2dOciqbXL1MGyiKXCJ7tKuY2e7gUYPDCUZObT6Z
++pUX2nwzV0E8jVHtC7ZcryxjGt9XyD+86V3Em69FmeKjWiS0uqlWPc9vqv9JWL7w
+qP/0uK3pN/u6uPQLOvnoQ0IeidiEyxPx2bvhiWC4jChWrBQdnArncevPDt09qZah
+SL0896+1DSJMwBGB7FY79tOi4lu3sgQiUpWAk2nojkxl8ZEDLXB0AuqLZxUpaVIC
+u9ffUGpVRr+goyhhf3DQw6KqLCGqR84onAZFdr+CGCe01a60y1Dma/RMhnEw6abf
+Fobg2P9A3fvQQoh/ozM6LlweQRGBY84YcWsr7KaKtzFcOmpH4MN5WdYgGq/yapiq
+crxXStJLnbsQ/LBMQeXtHT1eKJ2czL+zUdqnR+WEUwIDAQABo0IwQDAdBgNVHQ4E
+FgQUu69+Aj36pvE8hI6t7jiY7NkyMtQwDgYDVR0PAQH/BAQDAgEGMA8GA1UdEwEB
+/wQFMAMBAf8wDQYJKoZIhvcNAQEMBQADggIBAArx1UaEt65Ru2yyTUEUAJNMnMvl
+wFTPoCWOAvn9sKIN9SCYPBMtrFaisNZ+EZLpLrqeLppysb0ZRGxhNaKatBYSaVqM
+4dc+pBroLwP0rmEdEBsqpIt6xf4FpuHA1sj+nq6PK7o9mfjYcwlYRm6mnPTXJ9OV
+2jeDchzTc+CiR5kDOF3VSXkAKRzH7JsgHAckaVd4sjn8OoSgtZx8jb8uk2Intzna
+FxiuvTwJaP+EmzzV1gsD41eeFPfR60/IvYcjt7ZJQ3mFXLrrkguhxuhoqEwWsRqZ
+CuhTLJK7oQkYdQxlqHvLI7cawiiFwxv/0Cti76R7CZGYZ4wUAc1oBmpjIXUDgIiK
+boHGhfKppC3n9KUkEEeDys30jXlYsQab5xoq2Z0B15R97QNKyvDb6KkBPvVWmcke
+jkk9u+UJueBPSZI9FoJAzMxZxuY67RIuaTxslbH9qh17f4a+Hg4yRvv7E491f0yL
+S0Zj/gA0QHDBw7mh3aZw4gSzQbzpgJHqZJx64SIDqZxubw5lT2yHh17zbqD5daWb
+QOhTsiedSrnAdyGN/4fy3ryM7xfft0kL0fJuMAsaDk527RH89elWsn2/x20Kk4yl
+0MC2Hb46TpSi125sC8KKfPog88Tk5c0NqMuRkrF8hey1FGlmDoLnzc7ILaZRfyHB
+NVOFBkpdn627G190
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIIEvTCCA6WgAwIBAgIBADANBgkqhkiG9w0BAQUFADB/MQswCQYDVQQGEwJFVTEn
+MCUGA1UEChMeQUMgQ2FtZXJmaXJtYSBTQSBDSUYgQTgyNzQzMjg3MSMwIQYDVQQL
+ExpodHRwOi8vd3d3LmNoYW1iZXJzaWduLm9yZzEiMCAGA1UEAxMZQ2hhbWJlcnMg
+b2YgQ29tbWVyY2UgUm9vdDAeFw0wMzA5MzAxNjEzNDNaFw0zNzA5MzAxNjEzNDRa
+MH8xCzAJBgNVBAYTAkVVMScwJQYDVQQKEx5BQyBDYW1lcmZpcm1hIFNBIENJRiBB
+ODI3NDMyODcxIzAhBgNVBAsTGmh0dHA6Ly93d3cuY2hhbWJlcnNpZ24ub3JnMSIw
+IAYDVQQDExlDaGFtYmVycyBvZiBDb21tZXJjZSBSb290MIIBIDANBgkqhkiG9w0B
+AQEFAAOCAQ0AMIIBCAKCAQEAtzZV5aVdGDDg2olUkfzIx1L4L1DZ77F1c2VHfRtb
+unXF/KGIJPov7coISjlUxFF6tdpg6jg8gbLL8bvZkSM/SAFwdakFKq0fcfPJVD0d
+BmpAPrMMhe5cG3nCYsS4No41XQEMIwRHNaqbYE6gZj3LJgqcQKH0XZi/caulAGgq
+7YN6D6IUtdQis4CwPAxaUWktWBiP7Zme8a7ileb2R6jWDA+wWFjbw2Y3npuRVDM3
+0pQcakjJyfKl2qUMI/cjDpwyVV5xnIQFUZot/eZOKjRa3spAN2cMVCFVd9oKDMyX
+roDclDZK9D7ONhMeU+SsTjoF7Nuucpw4i9A5O4kKPnf+dQIBA6OCAUQwggFAMBIG
+A1UdEwEB/wQIMAYBAf8CAQwwPAYDVR0fBDUwMzAxoC+gLYYraHR0cDovL2NybC5j
+aGFtYmVyc2lnbi5vcmcvY2hhbWJlcnNyb290LmNybDAdBgNVHQ4EFgQU45T1sU3p
+26EpW1eLTXYGduHRooowDgYDVR0PAQH/BAQDAgEGMBEGCWCGSAGG+EIBAQQEAwIA
+BzAnBgNVHREEIDAegRxjaGFtYmVyc3Jvb3RAY2hhbWJlcnNpZ24ub3JnMCcGA1Ud
+EgQgMB6BHGNoYW1iZXJzcm9vdEBjaGFtYmVyc2lnbi5vcmcwWAYDVR0gBFEwTzBN
+BgsrBgEEAYGHLgoDATA+MDwGCCsGAQUFBwIBFjBodHRwOi8vY3BzLmNoYW1iZXJz
+aWduLm9yZy9jcHMvY2hhbWJlcnNyb290Lmh0bWwwDQYJKoZIhvcNAQEFBQADggEB
+AAxBl8IahsAifJ/7kPMa0QOx7xP5IV8EnNrJpY0nbJaHkb5BkAFyk+cefV/2icZd
+p0AJPaxJRUXcLo0waLIJuvvDL8y6C98/d3tGfToSJI6WjzwFCm/SlCgdbQzALogi
+1djPHRPH8EjX1wWnz8dHnjs8NMiAT9QUu/wNUPf6s+xCX6ndbcj0dc97wXImsQEc
+XCz9ek60AcUFV7nnPKoF2YjpB0ZBzu9Bga5Y34OirsrXdx/nADydb47kMgkdTXg0
+eDQ8lJsm7U9xxhl6vSAiSFr+S30Dt+dYvsYyTnQeaN2oaFuzPu5ifdmA6Ap1erfu
+tGWaIZDgqtCYvDi1czyL+Nw=
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIIExTCCA62gAwIBAgIBADANBgkqhkiG9w0BAQUFADB9MQswCQYDVQQGEwJFVTEn
+MCUGA1UEChMeQUMgQ2FtZXJmaXJtYSBTQSBDSUYgQTgyNzQzMjg3MSMwIQYDVQQL
+ExpodHRwOi8vd3d3LmNoYW1iZXJzaWduLm9yZzEgMB4GA1UEAxMXR2xvYmFsIENo
+YW1iZXJzaWduIFJvb3QwHhcNMDMwOTMwMTYxNDE4WhcNMzcwOTMwMTYxNDE4WjB9
+MQswCQYDVQQGEwJFVTEnMCUGA1UEChMeQUMgQ2FtZXJmaXJtYSBTQSBDSUYgQTgy
+NzQzMjg3MSMwIQYDVQQLExpodHRwOi8vd3d3LmNoYW1iZXJzaWduLm9yZzEgMB4G
+A1UEAxMXR2xvYmFsIENoYW1iZXJzaWduIFJvb3QwggEgMA0GCSqGSIb3DQEBAQUA
+A4IBDQAwggEIAoIBAQCicKLQn0KuWxfH2H3PFIP8T8mhtxOviteePgQKkotgVvq0
+Mi+ITaFgCPS3CU6gSS9J1tPfnZdan5QEcOw/Wdm3zGaLmFIoCQLfxS+EjXqXd7/s
+QJ0lcqu1PzKY+7e3/HKE5TWH+VX6ox8Oby4o3Wmg2UIQxvi1RMLQQ3/bvOSiPGpV
+eAp3qdjqGTK3L/5cPxvusZjsyq16aUXjlg9V9ubtdepl6DJWk0aJqCWKZQbua795
+B9Dxt6/tLE2Su8CoX6dnfQTyFQhwrJLWfQTSM/tMtgsL+xrJxI0DqX5c8lCrEqWh
+z0hQpe/SyBoT+rB/sYIcd2oPX9wLlY/vQ37mRQklAgEDo4IBUDCCAUwwEgYDVR0T
+AQH/BAgwBgEB/wIBDDA/BgNVHR8EODA2MDSgMqAwhi5odHRwOi8vY3JsLmNoYW1i
+ZXJzaWduLm9yZy9jaGFtYmVyc2lnbnJvb3QuY3JsMB0GA1UdDgQWBBRDnDafsJ4w
+TcbOX60Qq+UDpfqpFDAOBgNVHQ8BAf8EBAMCAQYwEQYJYIZIAYb4QgEBBAQDAgAH
+MCoGA1UdEQQjMCGBH2NoYW1iZXJzaWducm9vdEBjaGFtYmVyc2lnbi5vcmcwKgYD
+VR0SBCMwIYEfY2hhbWJlcnNpZ25yb290QGNoYW1iZXJzaWduLm9yZzBbBgNVHSAE
+VDBSMFAGCysGAQQBgYcuCgEBMEEwPwYIKwYBBQUHAgEWM2h0dHA6Ly9jcHMuY2hh
+bWJlcnNpZ24ub3JnL2Nwcy9jaGFtYmVyc2lnbnJvb3QuaHRtbDANBgkqhkiG9w0B
+AQUFAAOCAQEAPDtwkfkEVCeR4e3t/mh/YV3lQWVPMvEYBZRqHN4fcNs+ezICNLUM
+bKGKfKX0j//U2K0X1S0E0T9YgOKBWYi+wONGkyT+kL0mojAt6JcmVzWJdJYY9hXi
+ryQZVgICsroPFOrGimbBhkVVi76SvpykBMdJPJ7oKXqJ1/6v/2j1pReQvayZzKWG
+VwlnRtvWFsJG8eSpUPWP0ZIV018+xgBJOm5YstHRJw0lyDL4IBHNfTIzSJRUTN3c
+ecQwn+uOuFW114hcxWokPbLTBQNRxgfvzBRydD1ucs4YKIxKoHflCStFREest2d/
+AYoFWpO+ocH/+OcOZ6RHSXZddZAa9SaP8A==
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIIDfDCCAmSgAwIBAgIQayXaioidfLwPBbOxemFFRDANBgkqhkiG9w0BAQsFADBY
+MQswCQYDVQQGEwJDTjEaMBgGA1UEChMRV29TaWduIENBIExpbWl0ZWQxLTArBgNV
+BAMTJENlcnRpZmljYXRpb24gQXV0aG9yaXR5IG9mIFdvU2lnbiBHMjAeFw0xNDEx
+MDgwMDU4NThaFw00NDExMDgwMDU4NThaMFgxCzAJBgNVBAYTAkNOMRowGAYDVQQK
+ExFXb1NpZ24gQ0EgTGltaXRlZDEtMCsGA1UEAxMkQ2VydGlmaWNhdGlvbiBBdXRo
+b3JpdHkgb2YgV29TaWduIEcyMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKC
+AQEAvsXEoCKASU+/2YcRxlPhuw+9YH+v9oIOH9ywjj2X4FA8jzrvZjtFB5sg+OPX
+JYY1kBaiXW8wGQiHC38Gsp1ij96vkqVg1CuAmlI/9ZqD6TRay9nVYlzmDuDfBpgO
+gHzKtB0TiGsOqCR3A9DuW/PKaZE1OVbFbeP3PU9ekzgkyhjpJMuSA93MHD0JcOQg
+5PGurLtzaaNjOg9FD6FKmsLRY6zLEPg95k4ot+vElbGs/V6r+kHLXZ1L3PR8du9n
+fwB6jdKgGlxNIuG12t12s9R23164i5jIFFTMaxeSt+BKv0mUYQs4kI9dJGwlezt5
+2eJ+na2fmKEG/HgUYFf47oB3sQIDAQABo0IwQDAOBgNVHQ8BAf8EBAMCAQYwDwYD
+VR0TAQH/BAUwAwEB/zAdBgNVHQ4EFgQU+mCp62XF3RYUCE4MD42b4Pdkr2cwDQYJ
+KoZIhvcNAQELBQADggEBAFfDejaCnI2Y4qtAqkePx6db7XznPWZaOzG73/MWM5H8
+fHulwqZm46qwtyeYP0nXYGdnPzZPSsvxFPpahygc7Y9BMsaV+X3avXtbwrAh449G
+3CE4Q3RM+zD4F3LBMvzIkRfEzFg3TgvMWvchNSiDbGAtROtSjFA9tWwS1/oJu2yy
+SrHFieT801LYYRf+epSEj3m2M1m6D8QL4nCgS3gu+sif/a+RZQp4OBXllxcU3fng
+LDT4ONCEIgDAFFEYKwLcMFrw6AF8NTojrwjkr6qOKEJJLvD1mTS+7Q9LGOHSJDy7
+XUe3IfKN0QqZjuNuPq1w4I+5ysxugTH2e5x6eeRncRg=
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIIDqDCCApCgAwIBAgIJAP7c4wEPyUj/MA0GCSqGSIb3DQEBBQUAMDQxCzAJBgNV
+BAYTAkZSMRIwEAYDVQQKDAlEaGlteW90aXMxETAPBgNVBAMMCENlcnRpZ25hMB4X
+DTA3MDYyOTE1MTMwNVoXDTI3MDYyOTE1MTMwNVowNDELMAkGA1UEBhMCRlIxEjAQ
+BgNVBAoMCURoaW15b3RpczERMA8GA1UEAwwIQ2VydGlnbmEwggEiMA0GCSqGSIb3
+DQEBAQUAA4IBDwAwggEKAoIBAQDIaPHJ1tazNHUmgh7stL7qXOEm7RFHYeGifBZ4
+QCHkYJ5ayGPhxLGWkv8YbWkj4Sti993iNi+RB7lIzw7sebYs5zRLcAglozyHGxny
+gQcPOJAZ0xH+hrTy0V4eHpbNgGzOOzGTtvKg0KmVEn2lmsxryIRWijOp5yIVUxbw
+zBfsV1/pogqYCd7jX5xv3EjjhQsVWqa6n6xI4wmy9/Qy3l40vhx4XUJbzg4ij02Q
+130yGLMLLGq/jj8UEYkgDncUtT2UCIf3JR7VsmAA7G8qKCVuKj4YYxclPz5EIBb2
+JsglrgVKtOdjLPOMFlN+XPsRGgjBRmKfIrjxwo1p3Po6WAbfAgMBAAGjgbwwgbkw
+DwYDVR0TAQH/BAUwAwEB/zAdBgNVHQ4EFgQUGu3+QTmQtCRZvgHyUtVF9lo53BEw
+ZAYDVR0jBF0wW4AUGu3+QTmQtCRZvgHyUtVF9lo53BGhOKQ2MDQxCzAJBgNVBAYT
+AkZSMRIwEAYDVQQKDAlEaGlteW90aXMxETAPBgNVBAMMCENlcnRpZ25hggkA/tzj
+AQ/JSP8wDgYDVR0PAQH/BAQDAgEGMBEGCWCGSAGG+EIBAQQEAwIABzANBgkqhkiG
+9w0BAQUFAAOCAQEAhQMeknH2Qq/ho2Ge6/PAD/Kl1NqV5ta+aDY9fm4fTIrv0Q8h
+bV6lUmPOEvjvKtpv6zf+EwLHyzs+ImvaYS5/1HI93TDhHkxAGYwP15zRgzB7mFnc
+fca5DClMoTOi62c6ZYTTluLtdkVwj7Ur3vkj1kluPBS1xp81HlDQwY9qcEQCYsuu
+HWhBp6pX6FOqB9IG9tUUBguRA3UsbHK1YZWaDYu5Def131TN3ubY1gkIl2PlwS6w
+t0QmwCbAr1UwnjvVNioZBPRcHv/PLLf/0P2HQBHVESO7SMAhqaQoLf0V+LBOK/Qw
+WyH8EZE0vkHve52Xdf+XlcCWWC/qu0bXu+TZLg==
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIIFnDCCA4SgAwIBAgIBATANBgkqhkiG9w0BAQUFADBjMQswCQYDVQQGEwJGUjET
+MBEGA1UEChMKQ2VydGlub21pczEXMBUGA1UECxMOMDAwMiA0MzM5OTg5MDMxJjAk
+BgNVBAMMHUNlcnRpbm9taXMgLSBBdXRvcml0w6kgUmFjaW5lMB4XDTA4MDkxNzA4
+Mjg1OVoXDTI4MDkxNzA4Mjg1OVowYzELMAkGA1UEBhMCRlIxEzARBgNVBAoTCkNl
+cnRpbm9taXMxFzAVBgNVBAsTDjAwMDIgNDMzOTk4OTAzMSYwJAYDVQQDDB1DZXJ0
+aW5vbWlzIC0gQXV0b3JpdMOpIFJhY2luZTCCAiIwDQYJKoZIhvcNAQEBBQADggIP
+ADCCAgoCggIBAJ2Fn4bT46/HsmtuM+Cet0I0VZ35gb5j2CN2DpdUzZlMGvE5x4jY
+F1AMnmHawE5V3udauHpOd4cN5bjr+p5eex7Ezyh0x5P1FMYiKAT5kcOrJ3NqDi5N
+8y4oH3DfVS9O7cdxbwlyLu3VMpfQ8Vh30WC8Tl7bmoT2R2FFK/ZQpn9qcSdIhDWe
+rP5pqZ56XjUl+rSnSTV3lqc2W+HN3yNw2F1MpQiD8aYkOBOo7C+ooWfHpi2GR+6K
+/OybDnT0K0kCe5B1jPyZOQE51kqJ5Z52qz6WKDgmi92NjMD2AR5vpTESOH2VwnHu
+7XSu5DaiQ3XV8QCb4uTXzEIDS3h65X27uK4uIJPT5GHfceF2Z5c/tt9qc1pkIuVC
+28+BA5PY9OMQ4HL2AHCs8MF6DwV/zzRpRbWT5BnbUhYjBYkOjUjkJW+zeL9i9Qf6
+lSTClrLooyPCXQP8w9PlfMl1I9f09bze5N/NgL+RiH2nE7Q5uiy6vdFrzPOlKO1E
+nn1So2+WLhl+HPNbxxaOu2B9d2ZHVIIAEWBsMsGoOBvrbpgT1u449fCfDu/+MYHB
+0iSVL1N6aaLwD4ZFjliCK0wi1F6g530mJ0jfJUaNSih8hp75mxpZuWW/Bd22Ql09
+5gBIgl4g9xGC3srYn+Y3RyYe63j3YcNBZFgCQfna4NH4+ej9Uji29YnfAgMBAAGj
+WzBZMA8GA1UdEwEB/wQFMAMBAf8wDgYDVR0PAQH/BAQDAgEGMB0GA1UdDgQWBBQN
+jLZh2kS40RR9w759XkjwzspqsDAXBgNVHSAEEDAOMAwGCiqBegFWAgIAAQEwDQYJ
+KoZIhvcNAQEFBQADggIBACQ+YAZ+He86PtvqrxyaLAEL9MW12Ukx9F1BjYkMTv9s
+ov3/4gbIOZ/xWqndIlgVqIrTseYyCYIDbNc/CMf4uboAbbnW/FIyXaR/pDGUu7ZM
+OH8oMDX/nyNTt7buFHAAQCvaR6s0fl6nVjBhK4tDrP22iCj1a7Y+YEq6QpA0Z43q
+619FVDsXrIvkxmUP7tCMXWY5zjKn2BCXwH40nJ+U8/aGH88bc62UeYdocMMzpXDn
+2NU4lG9jeeu/Cg4I58UvD0KgKxRA/yHgBcUn4YQRE7rWhh1BCxMjidPJC+iKunqj
+o3M3NYB9Ergzd0A4wPpeMNLytqOx1qKVl4GbUu1pTP+A5FPbVFsDbVRfsbjvJL1v
+nxHDx2TCDyhihWZeGnuyt++uNckZM6i4J9szVb9o4XVIRFb7zdNIu0eJOqxp9YDG
+5ERQL1TEqkPFMTFYvZbF6nVsmnWxTfj3l/+WFvKXTej28xH5On2KOG4Ey+HTRRWq
+pdEdnV1j6CTmNhTih60bWfVEm/vXd3wfAXBioSAaosUaKPQhA+4u2cGA6rnZgtZb
+dsLLO7XSAPCjDuGtbkD326C00EauFddEwk01+dIL8hf2rGbVJLJP0RyZwG71fet0
+BLj5TXcJ17TPBzAJ8bgAVtkXFhYKK4bfjwEZGuW7gmP/vgt2Fl43N+bYdJeimUV5
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIIFkjCCA3qgAwIBAgIBATANBgkqhkiG9w0BAQsFADBaMQswCQYDVQQGEwJGUjET
+MBEGA1UEChMKQ2VydGlub21pczEXMBUGA1UECxMOMDAwMiA0MzM5OTg5MDMxHTAb
+BgNVBAMTFENlcnRpbm9taXMgLSBSb290IENBMB4XDTEzMTAyMTA5MTcxOFoXDTMz
+MTAyMTA5MTcxOFowWjELMAkGA1UEBhMCRlIxEzARBgNVBAoTCkNlcnRpbm9taXMx
+FzAVBgNVBAsTDjAwMDIgNDMzOTk4OTAzMR0wGwYDVQQDExRDZXJ0aW5vbWlzIC0g
+Um9vdCBDQTCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIBANTMCQosP5L2
+fxSeC5yaah1AMGT9qt8OHgZbn1CF6s2Nq0Nn3rD6foCWnoR4kkjW4znuzuRZWJfl
+LieY6pOod5tK8O90gC3rMB+12ceAnGInkYjwSond3IjmFPnVAy//ldu9n+ws+hQV
+WZUKxkd8aRi5pwP5ynapz8dvtF4F/u7BUrJ1Mofs7SlmO/NKFoL21prbcpjp3vDF
+TKWrteoB4owuZH9kb/2jJZOLyKIOSY008B/sWEUuNKqEUL3nskoTuLAPrjhdsKkb
+5nPJWqHZZkCqqU2mNAKthH6yI8H7KsZn9DS2sJVqM09xRLWtwHkziOC/7aOgFLSc
+CbAK42C++PhmiM1b8XcF4LVzbsF9Ri6OSyemzTUK/eVNfaoqoynHWmgE6OXWk6Ri
+wsXm9E/G+Z8ajYJJGYrKWUM66A0ywfRMEwNvbqY/kXPLynNvEiCL7sCCeN5LLsJJ
+wx3tFvYk9CcbXFcx3FXuqB5vbKziRcxXV4p1VxngtViZSTYxPDMBbRZKzbgqg4SG
+m/lg0h9tkQPTYKbVPZrdd5A9NaSfD171UkRpucC63M9933zZxKyGIjK8e2uR73r4
+F2iw4lNVYC2vPsKD2NkJK/DAZNuHi5HMkesE/Xa0lZrmFAYb1TQdvtj/dBxThZng
+WVJKYe2InmtJiUZ+IFrZ50rlau7SZRFDAgMBAAGjYzBhMA4GA1UdDwEB/wQEAwIB
+BjAPBgNVHRMBAf8EBTADAQH/MB0GA1UdDgQWBBTvkUz1pcMw6C8I6tNxIqSSaHh0
+2TAfBgNVHSMEGDAWgBTvkUz1pcMw6C8I6tNxIqSSaHh02TANBgkqhkiG9w0BAQsF
+AAOCAgEAfj1U2iJdGlg+O1QnurrMyOMaauo++RLrVl89UM7g6kgmJs95Vn6RHJk/
+0KGRHCwPT5iVWVO90CLYiF2cN/z7ZMF4jIuaYAnq1fohX9B0ZedQxb8uuQsLrbWw
+F6YSjNRieOpWauwK0kDDPAUwPk2Ut59KA9N9J0u2/kTO+hkzGm2kQtHdzMjI1xZS
+g081lLMSVX3l4kLr5JyTCcBMWwerx20RoFAXlCOotQqSD7J6wWAsOMwaplv/8gzj
+qh8c3LigkyfeY+N/IZ865Z764BNqdeuWXGKRlI5nU7aJ+BIJy29SWwNyhlCVCNSN
+h4YVH5Uk2KRvms6knZtt0rJ2BobGVgjF6wnaNsIbW0G+YSrjcOa4pvi2WsS9Iff/
+ql+hbHY5ZtbqTFXhADObE5hjyW/QASAJN1LnDE8+zbz1X5YnpyACleAu6AdBBR8V
+btaw5BngDwKTACdyxYvRVB9dSsNAl35VpnzBMwQUAR1JIGkLGZOdblgi90AMRgwj
+Y/M50n92Uaf0yKHxDHYiI0ZSKS3io0EHVmmY0gUJvGnHWmHNj4FgFU2A3ZDifcRQ
+8ow7bkrHxuaAKzyBvBGAFhAn1/DNP3nMcyrDflOR1m749fPH0FFNjkulW+YZFzvW
+gQncItzujrnEj1PhZ7szuIgVRs/taTX/dQ1G885x4cVrhkIGuUE=
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIIDkjCCAnqgAwIBAgIRAIW9S/PY2uNp9pTXX8OlRCMwDQYJKoZIhvcNAQEFBQAw
+PTELMAkGA1UEBhMCRlIxETAPBgNVBAoTCENlcnRwbHVzMRswGQYDVQQDExJDbGFz
+cyAyIFByaW1hcnkgQ0EwHhcNOTkwNzA3MTcwNTAwWhcNMTkwNzA2MjM1OTU5WjA9
+MQswCQYDVQQGEwJGUjERMA8GA1UEChMIQ2VydHBsdXMxGzAZBgNVBAMTEkNsYXNz
+IDIgUHJpbWFyeSBDQTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBANxQ
+ltAS+DXSCHh6tlJw/W/uz7kRy1134ezpfgSN1sxvc0NXYKwzCkTsA18cgCSR5aiR
+VhKC9+Ar9NuuYS6JEI1rbLqzAr3VNsVINyPi8Fo3UjMXEuLRYE2+L0ER4/YXJQyL
+kcAbmXuZVg2v7tK8R1fjeUl7NIknJITesezpWE7+Tt9avkGtrAjFGA7v0lPubNCd
+EgETjdyAYveVqUSISnFOYFWe2yMZeVYHDD9jC1yw4r5+FfyUM1hBOHTE4Y+L3yas
+H7WLO7dDWWuwJKZtkIvEcupdM5i3y95ee++U8Rs+yskhwcWYAqqi9lt3m/V+llU0
+HGdpwPFC40es/CgcZlUCAwEAAaOBjDCBiTAPBgNVHRMECDAGAQH/AgEKMAsGA1Ud
+DwQEAwIBBjAdBgNVHQ4EFgQU43Mt38sOKAze3bOkynm4jrvoMIkwEQYJYIZIAYb4
+QgEBBAQDAgEGMDcGA1UdHwQwMC4wLKAqoCiGJmh0dHA6Ly93d3cuY2VydHBsdXMu
+Y29tL0NSTC9jbGFzczIuY3JsMA0GCSqGSIb3DQEBBQUAA4IBAQCnVM+IRBnL39R/
+AN9WM2K191EBkOvDP9GIROkkXe/nFL0gt5o8AP5tn9uQ3Nf0YtaLcF3n5QRIqWh8
+yfFC82x/xXp8HVGIutIKPidd3i1RTtMTZGnkLuPT55sJmabglZvOGtd/vjzOUrMR
+FcEPF80Du5wlFbqidon8BvEY0JNLDnyCt6X09l/+7UCmnYR0ObncHoUW2ikbhiMA
+ybuJfm6AiB4vFLQDJKgybwOaRywwvlbGp0ICcBvqQNi6BQNwB6SW//1IMwrh3KWB
+kJtN3X3n57LNXMhqlfil9o3EXXgIvnsG1knPGTZQIy4I5p4FTUcY1Rbpsda2ENW7
+l7+ijrRU
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIIDDDCCAfSgAwIBAgIDAQAgMA0GCSqGSIb3DQEBBQUAMD4xCzAJBgNVBAYTAlBM
+MRswGQYDVQQKExJVbml6ZXRvIFNwLiB6IG8uby4xEjAQBgNVBAMTCUNlcnR1bSBD
+QTAeFw0wMjA2MTExMDQ2MzlaFw0yNzA2MTExMDQ2MzlaMD4xCzAJBgNVBAYTAlBM
+MRswGQYDVQQKExJVbml6ZXRvIFNwLiB6IG8uby4xEjAQBgNVBAMTCUNlcnR1bSBD
+QTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAM6xwS7TT3zNJc4YPk/E
+jG+AanPIW1H4m9LcuwBcsaD8dQPugfCI7iNS6eYVM42sLQnFdvkrOYCJ5JdLkKWo
+ePhzQ3ukYbDYWMzhbGZ+nPMJXlVjhNWo7/OxLjBos8Q82KxujZlakE403Daaj4GI
+ULdtlkIJ89eVgw1BS7Bqa/j8D35in2fE7SZfECYPCE/wpFcozo+47UX2bu4lXapu
+Ob7kky/ZR6By6/qmW6/KUz/iDsaWVhFu9+lmqSbYf5VT7QqFiLpPKaVCjF62/IUg
+AKpoC6EahQGcxEZjgoi2IrHu/qpGWX7PNSzVttpd90gzFFS269lvzs2I1qsb2pY7
+HVkCAwEAAaMTMBEwDwYDVR0TAQH/BAUwAwEB/zANBgkqhkiG9w0BAQUFAAOCAQEA
+uI3O7+cUus/usESSbLQ5PqKEbq24IXfS1HeCh+YgQYHu4vgRt2PRFze+GXYkHAQa
+TOs9qmdvLdTN/mUxcMUbpgIKumB7bVjCmkn+YzILa+M6wKyrO7Do0wlRjBCDxjTg
+xSvgGrZgFCdsMneMvLJymM/NzD+5yCRCFNZX/OYmQ6kd5YCQzgNUKD73P9P4Te1q
+CjqTE5s7FCMTY5w/0YcneeVMUeMBrYVdGjux1XMQpNPyvG5k9VpWkKjHDkx0Dy5x
+O/fIR/RpbxXyEV6DHpx8Uq79AtoSqFlnGNu8cN2bsWntgM6JQEhqDjXKKWYVIZQs
+6GAqm4VKQPNriiTsBhYscw==
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIIDuzCCAqOgAwIBAgIDBETAMA0GCSqGSIb3DQEBBQUAMH4xCzAJBgNVBAYTAlBM
+MSIwIAYDVQQKExlVbml6ZXRvIFRlY2hub2xvZ2llcyBTLkEuMScwJQYDVQQLEx5D
+ZXJ0dW0gQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkxIjAgBgNVBAMTGUNlcnR1bSBU
+cnVzdGVkIE5ldHdvcmsgQ0EwHhcNMDgxMDIyMTIwNzM3WhcNMjkxMjMxMTIwNzM3
+WjB+MQswCQYDVQQGEwJQTDEiMCAGA1UEChMZVW5pemV0byBUZWNobm9sb2dpZXMg
+Uy5BLjEnMCUGA1UECxMeQ2VydHVtIENlcnRpZmljYXRpb24gQXV0aG9yaXR5MSIw
+IAYDVQQDExlDZXJ0dW0gVHJ1c3RlZCBOZXR3b3JrIENBMIIBIjANBgkqhkiG9w0B
+AQEFAAOCAQ8AMIIBCgKCAQEA4/t9o3K6wvDJFIf1awFO4W5AB7ptJ11/91sts1rH
+UV+rpDKmYYe2bg+G0jACl/jXaVehGDldamR5xgFZrDwxSjh80gTSSyjoIF87B6LM
+TXPb865Px1bVWqeWifrzq2jUI4ZZJ88JJ7ysbnKDHDBy3+Ci6dLhdHUZvSqeexVU
+BBvXQzmtVSjF4hq79MDkrjhJM8x2hZ85RdKknvISjFH4fOQtf/WsX+sWn7Et0brM
+kUJ3TCXJkDhv2/DM+44el1k+1WBO5gUo7Ul5E0u6SNsv+XLTOcr+H9g0cvW0QM8x
+AcPs3hEtF10fuFDRXhmnad4HMyjKUJX5p1TLVIZQRan5SQIDAQABo0IwQDAPBgNV
+HRMBAf8EBTADAQH/MB0GA1UdDgQWBBQIds3LB/8k9sXN7buQvOKEN0Z19zAOBgNV
+HQ8BAf8EBAMCAQYwDQYJKoZIhvcNAQEFBQADggEBAKaorSLOAT2mo/9i0Eidi15y
+sHhE49wcrwn9I0j6vSrEuVUEtRCjjSfeC4Jj0O7eDDd5QVsisrCaQVymcODU0HfL
+I9MA4GxWL+FpDQ3Zqr8hgVDZBqWo/5U30Kr+4rP1mS1FhIrlQgnXdAIv94nYmem8
+J9RHjboNRhx3zxSkHLmkMcScKHQDNP8zGSal6Q10tz6XxnboJ5ajZt3hrvJBW8qY
+VoNzcOSGGtIxQbovvi0TWnZvTuhOgQ4/WwMioBK+ZlgRSssDxLQqKi2WF+A5VLxI
+03YnnZotBqbJ7DnSq9ufmgsnAjUpsUCV5/nonFWIGUbWtzT1fs45mtk48VH3Tyw=
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIIHTzCCBTegAwIBAgIJAKPaQn6ksa7aMA0GCSqGSIb3DQEBBQUAMIGuMQswCQYD
+VQQGEwJFVTFDMEEGA1UEBxM6TWFkcmlkIChzZWUgY3VycmVudCBhZGRyZXNzIGF0
+IHd3dy5jYW1lcmZpcm1hLmNvbS9hZGRyZXNzKTESMBAGA1UEBRMJQTgyNzQzMjg3
+MRswGQYDVQQKExJBQyBDYW1lcmZpcm1hIFMuQS4xKTAnBgNVBAMTIENoYW1iZXJz
+IG9mIENvbW1lcmNlIFJvb3QgLSAyMDA4MB4XDTA4MDgwMTEyMjk1MFoXDTM4MDcz
+MTEyMjk1MFowga4xCzAJBgNVBAYTAkVVMUMwQQYDVQQHEzpNYWRyaWQgKHNlZSBj
+dXJyZW50IGFkZHJlc3MgYXQgd3d3LmNhbWVyZmlybWEuY29tL2FkZHJlc3MpMRIw
+EAYDVQQFEwlBODI3NDMyODcxGzAZBgNVBAoTEkFDIENhbWVyZmlybWEgUy5BLjEp
+MCcGA1UEAxMgQ2hhbWJlcnMgb2YgQ29tbWVyY2UgUm9vdCAtIDIwMDgwggIiMA0G
+CSqGSIb3DQEBAQUAA4ICDwAwggIKAoICAQCvAMtwNyuAWko6bHiUfaN/Gh/2NdW9
+28sNRHI+JrKQUrpjOyhYb6WzbZSm891kDFX29ufyIiKAXuFixrYp4YFs8r/lfTJq
+VKAyGVn+H4vXPWCGhSRv4xGzdz4gljUha7MI2XAuZPeEklPWDrCQiorjh40G072Q
+DuKZoRuGDtqaCrsLYVAGUvGef3bsyw/QHg3PmTA9HMRFEFis1tPo1+XqxQEHd9ZR
+5gN/ikilTWh1uem8nk4ZcfUyS5xtYBkL+8ydddy/Js2Pk3g5eXNeJQ7KXOt3EgfL
+ZEFHcpOrUMPrCXZkNNI5t3YRCQ12RcSprj1qr7V9ZS+UWBDsXHyvfuK2GNnQm05a
+Sd+pZgvMPMZ4fKecHePOjlO+Bd5gD2vlGts/4+EhySnB8esHnFIbAURRPHsl18Tl
+UlRdJQfKFiC4reRB7noI/plvg6aRArBsNlVq5331lubKgdaX8ZSD6e2wsWsSaR6s
++12pxZjptFtYer49okQ6Y1nUCyXeG0+95QGezdIp1Z8XGQpvvwyQ0wlf2eOKNcx5
+Wk0ZN5K3xMGtr/R5JJqyAQuxr1yW84Ay+1w9mPGgP0revq+ULtlVmhduYJ1jbLhj
+ya6BXBg14JC7vjxPNyK5fuvPnnchpj04gftI2jE9K+OJ9dC1vX7gUMQSibMjmhAx
+hduub+84Mxh2EQIDAQABo4IBbDCCAWgwEgYDVR0TAQH/BAgwBgEB/wIBDDAdBgNV
+HQ4EFgQU+SSsD7K1+HnA+mCIG8TZTQKeFxkwgeMGA1UdIwSB2zCB2IAU+SSsD7K1
++HnA+mCIG8TZTQKeFxmhgbSkgbEwga4xCzAJBgNVBAYTAkVVMUMwQQYDVQQHEzpN
+YWRyaWQgKHNlZSBjdXJyZW50IGFkZHJlc3MgYXQgd3d3LmNhbWVyZmlybWEuY29t
+L2FkZHJlc3MpMRIwEAYDVQQFEwlBODI3NDMyODcxGzAZBgNVBAoTEkFDIENhbWVy
+ZmlybWEgUy5BLjEpMCcGA1UEAxMgQ2hhbWJlcnMgb2YgQ29tbWVyY2UgUm9vdCAt
+IDIwMDiCCQCj2kJ+pLGu2jAOBgNVHQ8BAf8EBAMCAQYwPQYDVR0gBDYwNDAyBgRV
+HSAAMCowKAYIKwYBBQUHAgEWHGh0dHA6Ly9wb2xpY3kuY2FtZXJmaXJtYS5jb20w
+DQYJKoZIhvcNAQEFBQADggIBAJASryI1wqM58C7e6bXpeHxIvj99RZJe6dqxGfwW
+PJ+0W2aeaufDuV2I6A+tzyMP3iU6XsxPpcG1Lawk0lgH3qLPaYRgM+gQDROpI9CF
+5Y57pp49chNyM/WqfcZjHwj0/gF/JM8rLFQJ3uIrbZLGOU8W6jx+ekbURWpGqOt1
+glanq6B8aBMz9p0w8G8nOSQjKpD9kCk18pPfNKXG9/jvjA9iSnyu0/VU+I22mlaH
+FoI6M6taIgj3grrqLuBHmrS1RaMFO9ncLkVAO+rcf+g769HsJtg1pDDFOqxXnrN2
+pSB7+R5KBWIBpih1YJeSDW4+TTdDDZIVnBgizVGZoCkaPF+KMjNbMMeJL0eYD6MD
+xvbxrN8y8NmBGuScvfaAFPDRLLmF9dijscilIeUcE5fuDr3fKanvNFNb0+RqE4QG
+tjICxFKuItLcsiFCGtpA8CnJ7AoMXOLQusxI0zcKzBIKinmwPQN/aUv0NCB9szTq
+jktk9T79syNnFQ0EuPAtwQlRPLJsFfClI9eDdOTlLsn+mCdCxqvGnrDQWzilm1De
+fhiYtUU79nm06PcaewaD+9CL2rvHvRirCG88gGtAPxkZumWK5r7VXNM21+9AUiRg
+OGcEMeyP84LG3rlV8zsxkVrctQgVrXYlCg17LofiDKYGvCYQbTed7N14jHyAxfDZ
+d0jQ
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIID9zCCAt+gAwIBAgIESJ8AATANBgkqhkiG9w0BAQUFADCBijELMAkGA1UEBhMC
+Q04xMjAwBgNVBAoMKUNoaW5hIEludGVybmV0IE5ldHdvcmsgSW5mb3JtYXRpb24g
+Q2VudGVyMUcwRQYDVQQDDD5DaGluYSBJbnRlcm5ldCBOZXR3b3JrIEluZm9ybWF0
+aW9uIENlbnRlciBFViBDZXJ0aWZpY2F0ZXMgUm9vdDAeFw0xMDA4MzEwNzExMjVa
+Fw0zMDA4MzEwNzExMjVaMIGKMQswCQYDVQQGEwJDTjEyMDAGA1UECgwpQ2hpbmEg
+SW50ZXJuZXQgTmV0d29yayBJbmZvcm1hdGlvbiBDZW50ZXIxRzBFBgNVBAMMPkNo
+aW5hIEludGVybmV0IE5ldHdvcmsgSW5mb3JtYXRpb24gQ2VudGVyIEVWIENlcnRp
+ZmljYXRlcyBSb290MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAm35z
+7r07eKpkQ0H1UN+U8i6yjUqORlTSIRLIOTJCBumD1Z9S7eVnAztUwYyZmczpwA//
+DdmEEbK40ctb3B75aDFk4Zv6dOtouSCV98YPjUesWgbdYavi7NifFy2cyjw1l1Vx
+zUOFsUcW9SxTgHbP0wBkvUCZ3czY28Sf1hNfQYOL+Q2HklY0bBoQCxfVWhyXWIQ8
+hBouXJE0bhlffxdpxWXvayHG1VA6v2G5BY3vbzQ6sm8UY78WO5upKv23KzhmBsUs
+4qpnHkWnjQRmQvaPK++IIGmPMowUc9orhpFjIpryp9vOiYurXccUwVswah+xt54u
+gQEC7c+WXmPbqOY4twIDAQABo2MwYTAfBgNVHSMEGDAWgBR8cks5x8DbYqVPm6oY
+NJKiyoOCWTAPBgNVHRMBAf8EBTADAQH/MA4GA1UdDwEB/wQEAwIBBjAdBgNVHQ4E
+FgQUfHJLOcfA22KlT5uqGDSSosqDglkwDQYJKoZIhvcNAQEFBQADggEBACrDx0M3
+j92tpLIM7twUbY8opJhJywyA6vPtI2Z1fcXTIWd50XPFtQO3WKwMVC/GVhMPMdoG
+52U7HW8228gd+f2ABsqjPWYWqJ1MFn3AlUa1UeTiH9fqBk1jjZaM7+czV0I664zB
+echNdn3e9rG3geCg+aF4RhcaVpjwTj2rHO3sOdwHSPdj/gauwqRcalsyiMXHM4Ws
+ZkJHwlgkmeHlPuV1LI5D1l08eB6olYIpUNHRFrrvwb562bTYzB5MRuF3sTGrvSrI
+zo9uoV1/A3U05K2JRVRevq4opbs/eHnrc7MKDf2+yfdWrPa37S+bISnHOLaVxATy
+wy39FCqQmbkHzJ8=
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIIEMjCCAxqgAwIBAgIBATANBgkqhkiG9w0BAQUFADB7MQswCQYDVQQGEwJHQjEb
+MBkGA1UECAwSR3JlYXRlciBNYW5jaGVzdGVyMRAwDgYDVQQHDAdTYWxmb3JkMRow
+GAYDVQQKDBFDb21vZG8gQ0EgTGltaXRlZDEhMB8GA1UEAwwYQUFBIENlcnRpZmlj
+YXRlIFNlcnZpY2VzMB4XDTA0MDEwMTAwMDAwMFoXDTI4MTIzMTIzNTk1OVowezEL
+MAkGA1UEBhMCR0IxGzAZBgNVBAgMEkdyZWF0ZXIgTWFuY2hlc3RlcjEQMA4GA1UE
+BwwHU2FsZm9yZDEaMBgGA1UECgwRQ29tb2RvIENBIExpbWl0ZWQxITAfBgNVBAMM
+GEFBQSBDZXJ0aWZpY2F0ZSBTZXJ2aWNlczCCASIwDQYJKoZIhvcNAQEBBQADggEP
+ADCCAQoCggEBAL5AnfRu4ep2hxxNRUSOvkbIgwadwSr+GB+O5AL686tdUIoWMQua
+BtDFcCLNSS1UY8y2bmhGC1Pqy0wkwLxyTurxFa70VJoSCsN6sjNg4tqJVfMiWPPe
+3M/vg4aijJRPn2jymJBGhCfHdr/jzDUsi14HZGWCwEiwqJH5YZ92IFCokcdmtet4
+YgNW8IoaE+oxox6gmf049vYnMlhvB/VruPsUK6+3qszWY19zjNoFmag4qMsXeDZR
+rOme9Hg6jc8P2ULimAyrL58OAd7vn5lJ8S3frHRNG5i1R8XlKdH5kBjHYpy+g8cm
+ez6KJcfA3Z3mNWgQIJ2P2N7Sw4ScDV7oL8kCAwEAAaOBwDCBvTAdBgNVHQ4EFgQU
+oBEKIz6W8Qfs4q8p74Klf9AwpLQwDgYDVR0PAQH/BAQDAgEGMA8GA1UdEwEB/wQF
+MAMBAf8wewYDVR0fBHQwcjA4oDagNIYyaHR0cDovL2NybC5jb21vZG9jYS5jb20v
+QUFBQ2VydGlmaWNhdGVTZXJ2aWNlcy5jcmwwNqA0oDKGMGh0dHA6Ly9jcmwuY29t
+b2RvLm5ldC9BQUFDZXJ0aWZpY2F0ZVNlcnZpY2VzLmNybDANBgkqhkiG9w0BAQUF
+AAOCAQEACFb8AvCb6P+k+tZ7xkSAzk/ExfYAWMymtrwUSWgEdujm7l3sAg9g1o1Q
+GE8mTgHj5rCl7r+8dFRBv/38ErjHT1r0iWAFf2C3BUrz9vHCv8S5dIa2LX1rzNLz
+Rt0vxuBqw8M0Ayx9lt1awg6nCpnBBYurDC/zXDrPbDdVCYfeU0BsWO/8tqtlbgT2
+G9w84FoVxp7Z8VlIMCFlA2zs6SFz7JsDoeA3raAVGI/6ugLOpyypEBMs1OUIJqsi
+l2D4kF501KKaU73yqWjgom7C12yxow+ev+to51byrvLjKzg6CYG1a4XXvi3tPxq3
+smPi9WIsgtRqAEFQ8TmDn5XpNpaYbg==
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIIEPzCCAyegAwIBAgIBATANBgkqhkiG9w0BAQUFADB+MQswCQYDVQQGEwJHQjEb
+MBkGA1UECAwSR3JlYXRlciBNYW5jaGVzdGVyMRAwDgYDVQQHDAdTYWxmb3JkMRow
+GAYDVQQKDBFDb21vZG8gQ0EgTGltaXRlZDEkMCIGA1UEAwwbU2VjdXJlIENlcnRp
+ZmljYXRlIFNlcnZpY2VzMB4XDTA0MDEwMTAwMDAwMFoXDTI4MTIzMTIzNTk1OVow
+fjELMAkGA1UEBhMCR0IxGzAZBgNVBAgMEkdyZWF0ZXIgTWFuY2hlc3RlcjEQMA4G
+A1UEBwwHU2FsZm9yZDEaMBgGA1UECgwRQ29tb2RvIENBIExpbWl0ZWQxJDAiBgNV
+BAMMG1NlY3VyZSBDZXJ0aWZpY2F0ZSBTZXJ2aWNlczCCASIwDQYJKoZIhvcNAQEB
+BQADggEPADCCAQoCggEBAMBxM4KK0HDrc4eCQNUd5MvJDkKQ+d40uaG6EfQlhfPM
+cm3ye5drswfxdySRXyWP9nQ95IDC+DwN879A6vfIUtFyb+/Iq0G4bi4XKpVpDM3S
+HpR7LZQdqnXXs5jLrLxkU0C8j6ysNstcrbvd4JQX7NFc0L/vpZXJkMWwrPsbQ996
+CF23uPJAGysnnlDOXmWCiIxe004MeuoIkbY2qitC++rCoznl2yY4rYsK7hljxxwk
+3wN42ubqwUcaCwtGCd0C/N7Lh1/XMGNooa7cMqG6vv5Eq2i2pRcV/b3Vp6ea5EQz
+6YiO/O1R65NxTq0B50SOqy3LqP4BSUjwwN3HaNiS/j0CAwEAAaOBxzCBxDAdBgNV
+HQ4EFgQUPNiTiMLAggnMAZkGkyDpnnAJY08wDgYDVR0PAQH/BAQDAgEGMA8GA1Ud
+EwEB/wQFMAMBAf8wgYEGA1UdHwR6MHgwO6A5oDeGNWh0dHA6Ly9jcmwuY29tb2Rv
+Y2EuY29tL1NlY3VyZUNlcnRpZmljYXRlU2VydmljZXMuY3JsMDmgN6A1hjNodHRw
+Oi8vY3JsLmNvbW9kby5uZXQvU2VjdXJlQ2VydGlmaWNhdGVTZXJ2aWNlcy5jcmww
+DQYJKoZIhvcNAQEFBQADggEBAIcBbSMdflsXfcFhMs+P5/OKlFlm4J4oqF7Tt/Q0
+5qo5spcWxYJvMqTpjOev/e/C6LlLqqP05tqNZSH7uoDrJiiFGv45jN5bBAS0VPmj
+Z55B+glSzAVIqMk/IQQezkhr/IXownuvf7fM+F86/TXGDe+X3EyrEeFryzHRbPtI
+gKvcnDe4IRRLDXE97IMzbtFuMhbsmMcWi1mmNKsFVy2T96oTy9IT4rcuO81rUBcJ
+aD61JlfutuC23bkpgHl9j6PwpCikFcSF9CfUa7/lXORlAnZUtOM3ZiTTGWHIUhDl
+izeauan5Hb/qmZJhlv8BzaFfDbxxvA6sCx1HRR3B7Hzs/Sk=
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIIEQzCCAyugAwIBAgIBATANBgkqhkiG9w0BAQUFADB/MQswCQYDVQQGEwJHQjEb
+MBkGA1UECAwSR3JlYXRlciBNYW5jaGVzdGVyMRAwDgYDVQQHDAdTYWxmb3JkMRow
+GAYDVQQKDBFDb21vZG8gQ0EgTGltaXRlZDElMCMGA1UEAwwcVHJ1c3RlZCBDZXJ0
+aWZpY2F0ZSBTZXJ2aWNlczAeFw0wNDAxMDEwMDAwMDBaFw0yODEyMzEyMzU5NTla
+MH8xCzAJBgNVBAYTAkdCMRswGQYDVQQIDBJHcmVhdGVyIE1hbmNoZXN0ZXIxEDAO
+BgNVBAcMB1NhbGZvcmQxGjAYBgNVBAoMEUNvbW9kbyBDQSBMaW1pdGVkMSUwIwYD
+VQQDDBxUcnVzdGVkIENlcnRpZmljYXRlIFNlcnZpY2VzMIIBIjANBgkqhkiG9w0B
+AQEFAAOCAQ8AMIIBCgKCAQEA33FvNlhTWvI2VFeAxHQIIO0Yfyod5jWaHiWsnOWW
+fnJSoBVC21ndZHoa0Lh73TkVvFVIxO06AOoxEbrycXQaZ7jPM8yoMa+j49d/vzMt
+TGo87IvDktJTdyR0nAducPy9C1t2ul/y/9c3S0pgePfw+spwtOpZqqPOSC+pw7IL
+fhdyFgymBwwbOM/JYrc/oJOlh0Hyt3BAd9i+FHzjqMB6juljatEPmsbS9Is6FARW
+1O24zG71++IsWL1/T2sr92AkWCTOJu80kTrV44HQsvAEAtdbtz6SrGsSivnkBbA7
+kUlcsutT6vifR4buv5XAwAaf0lteERv0xwQ1KdJVXOTt6wIDAQABo4HJMIHGMB0G
+A1UdDgQWBBTFe1i97doladL3WRaoszLAeydb9DAOBgNVHQ8BAf8EBAMCAQYwDwYD
+VR0TAQH/BAUwAwEB/zCBgwYDVR0fBHwwejA8oDqgOIY2aHR0cDovL2NybC5jb21v
+ZG9jYS5jb20vVHJ1c3RlZENlcnRpZmljYXRlU2VydmljZXMuY3JsMDqgOKA2hjRo
+dHRwOi8vY3JsLmNvbW9kby5uZXQvVHJ1c3RlZENlcnRpZmljYXRlU2VydmljZXMu
+Y3JsMA0GCSqGSIb3DQEBBQUAA4IBAQDIk4E7ibSvuIQSTI3S8NtwuleGFTQQuS9/
+HrCoiWChisJ3DFBKmwCL2Iv0QeLQg4pKHBQGsKNoBXAxMKdTmw7pSqBYaWcOrp32
+pSxBvzwGa+RZzG0Q8ZZvH9/0BAKkn0U+yNj6NkZEUD+Cl5EfKNsYEYwq5GWDVxIS
+jBc/lDb+XbDABHcTuPQV1T84zJQ6VdCsmPW6AF/ghhmBeC8owH7TzEIK9a5QoNE+
+xqFx7D+gIIxmOom0jtTYsU0lR+4viMi14QVFwL4Ucd56/Y57fU0IlqUSc/Atyjcn
+dBInTMu2l+nZrghtWjlA3QVHdWpaIbOjGM9O9y5Xt5hwXsjEeLBi
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIIDoTCCAomgAwIBAgILBAAAAAABD4WqLUgwDQYJKoZIhvcNAQEFBQAwOzEYMBYG
+A1UEChMPQ3liZXJ0cnVzdCwgSW5jMR8wHQYDVQQDExZDeWJlcnRydXN0IEdsb2Jh
+bCBSb290MB4XDTA2MTIxNTA4MDAwMFoXDTIxMTIxNTA4MDAwMFowOzEYMBYGA1UE
+ChMPQ3liZXJ0cnVzdCwgSW5jMR8wHQYDVQQDExZDeWJlcnRydXN0IEdsb2JhbCBS
+b290MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA+Mi8vRRQZhP/8NN5
+7CPytxrHjoXxEnOmGaoQ25yiZXRadz5RfVb23CO21O1fWLE3TdVJDm71aofW0ozS
+J8bi/zafmGWgE07GKmSb1ZASzxQG9Dvj1Ci+6A74q05IlG2OlTEQXO2iLb3VOm2y
+HLtgwEZLAfVJrn5GitB0jaEMAs7u/OePuGtm839EAL9mJRQr3RAwHQeWP032a7iP
+t3sMpTjr3kfb1V05/Iin89cqdPHoWqI7n1C6poxFNcJQZZXcY4Lv3b93TZxiyWNz
+FtApD0mpSPCzqrdsxacwOUBdrsTiXSZT8M4cIwhhqJQZugRiQOwfOHB3EgZxpzAY
+XSUnpQIDAQABo4GlMIGiMA4GA1UdDwEB/wQEAwIBBjAPBgNVHRMBAf8EBTADAQH/
+MB0GA1UdDgQWBBS2CHsNesysIEyGVjJez6tuhS1wVzA/BgNVHR8EODA2MDSgMqAw
+hi5odHRwOi8vd3d3Mi5wdWJsaWMtdHJ1c3QuY29tL2NybC9jdC9jdHJvb3QuY3Js
+MB8GA1UdIwQYMBaAFLYIew16zKwgTIZWMl7Pq26FLXBXMA0GCSqGSIb3DQEBBQUA
+A4IBAQBW7wojoFROlZfJ+InaRcHUowAl9B8Tq7ejhVhpwjCt2BWKLePJzYFa+HMj
+Wqd8BfP9IjsO0QbE2zZMcwSO5bAi5MXzLqXZI+O4Tkogp24CJJ8iYGd7ix1yCcUx
+XOl5n4BHPa2hCwcUPUf/A2kaDAtE52Mlp3+yybh2hO0j9n0Hq0V+09+zv+mKts2o
+omcrUtW3ZfA5TGOgkXmTUg9U3YO7n9GPp1Nzw8v/MOx8BLjYRB+TX3EJIrduPuoc
+A06dGiBh+4E37F78CkWr1+cXVdCg6mCbpvbjjFspwgZgFJ0tl0ypkxWdYcQBX0jW
+WL1WMRJOEcgh4LMRkWXbtKaIOM5V
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIIEMzCCAxugAwIBAgIDCYPzMA0GCSqGSIb3DQEBCwUAME0xCzAJBgNVBAYTAkRF
+MRUwEwYDVQQKDAxELVRydXN0IEdtYkgxJzAlBgNVBAMMHkQtVFJVU1QgUm9vdCBD
+bGFzcyAzIENBIDIgMjAwOTAeFw0wOTExMDUwODM1NThaFw0yOTExMDUwODM1NTha
+ME0xCzAJBgNVBAYTAkRFMRUwEwYDVQQKDAxELVRydXN0IEdtYkgxJzAlBgNVBAMM
+HkQtVFJVU1QgUm9vdCBDbGFzcyAzIENBIDIgMjAwOTCCASIwDQYJKoZIhvcNAQEB
+BQADggEPADCCAQoCggEBANOySs96R+91myP6Oi/WUEWJNTrGa9v+2wBoqOADER03
+UAifTUpolDWzU9GUY6cgVq/eUXjsKj3zSEhQPgrfRlWLJ23DEE0NkVJD2IfgXU42
+tSHKXzlABF9bfsyjxiupQB7ZNoTWSPOSHjRGICTBpFGOShrvUD9pXRl/RcPHAY9R
+ySPocq60vFYJfxLLHLGvKZAKyVXMD9O0Gu1HNVpK7ZxzBCHQqr0ME7UAyiZsxGsM
+lFqVlNpQmvH/pStmMaTJOKDfHR+4CS7zp+hnUquVH+BGPtikw8paxTGA6Eian5Rp
+/hnd2HN8gcqW3o7tszIFZYQ05ub9VxC1X3a/L7AQDcUCAwEAAaOCARowggEWMA8G
+A1UdEwEB/wQFMAMBAf8wHQYDVR0OBBYEFP3aFMSfMN4hvR5COfyrYyNJ4PGEMA4G
+A1UdDwEB/wQEAwIBBjCB0wYDVR0fBIHLMIHIMIGAoH6gfIZ6bGRhcDovL2RpcmVj
+dG9yeS5kLXRydXN0Lm5ldC9DTj1ELVRSVVNUJTIwUm9vdCUyMENsYXNzJTIwMyUy
+MENBJTIwMiUyMDIwMDksTz1ELVRydXN0JTIwR21iSCxDPURFP2NlcnRpZmljYXRl
+cmV2b2NhdGlvbmxpc3QwQ6BBoD+GPWh0dHA6Ly93d3cuZC10cnVzdC5uZXQvY3Js
+L2QtdHJ1c3Rfcm9vdF9jbGFzc18zX2NhXzJfMjAwOS5jcmwwDQYJKoZIhvcNAQEL
+BQADggEBAH+X2zDI36ScfSF6gHDOFBJpiBSVYEQBrLLpME+bUMJm2H6NMLVwMeni
+acfzcNsgFYbQDfC+rAF1hM5+n02/t2A7nPPKHeJeaNijnZflQGDSNiH+0LS4F9p0
+o3/U37CYAqxva2ssJSRyoWXuJVrl5jLn8t+rSfrzkGkj2wTZ51xY/GXUl77M/C4K
+zCUqNQT4YJEVdT1B/yMfGchs64JTBKbkTCJNjYy6zltz7GRUUG3RnFX7acM2w4y8
+PIWmawomDeCTmGCufsYkl4phX5GOZpIJhzbNi5stPvZR1FDUWSi9g/LMKHtThm3Y
+Johw1+qRzT65ysCQblrGXnRl11z+o+I=
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIIEQzCCAyugAwIBAgIDCYP0MA0GCSqGSIb3DQEBCwUAMFAxCzAJBgNVBAYTAkRF
+MRUwEwYDVQQKDAxELVRydXN0IEdtYkgxKjAoBgNVBAMMIUQtVFJVU1QgUm9vdCBD
+bGFzcyAzIENBIDIgRVYgMjAwOTAeFw0wOTExMDUwODUwNDZaFw0yOTExMDUwODUw
+NDZaMFAxCzAJBgNVBAYTAkRFMRUwEwYDVQQKDAxELVRydXN0IEdtYkgxKjAoBgNV
+BAMMIUQtVFJVU1QgUm9vdCBDbGFzcyAzIENBIDIgRVYgMjAwOTCCASIwDQYJKoZI
+hvcNAQEBBQADggEPADCCAQoCggEBAJnxhDRwui+3MKCOvXwEz75ivJn9gpfSegpn
+ljgJ9hBOlSJzmY3aFS3nBfwZcyK3jpgAvDw9rKFs+9Z5JUut8Mxk2og+KbgPCdM0
+3TP1YtHhzRnp7hhPTFiu4h7WDFsVWtg6uMQYZB7jM7K1iXdODL/ZlGsTl28So/6Z
+qQTMFexgaDbtCHu39b+T7WYxg4zGcTSHThfqr4uRjRxWQa4iN1438h3Z0S0NL2lR
+p75mpoo6Kr3HGrHhFPC+Oh25z1uxav60sUYgovseO3Dvk5h9jHOW8sXvhXCtKSb8
+HgQ+HKDYD8tSg2J87otTlZCpV6LqYQXY+U3EJ/pure3511H3a6UCAwEAAaOCASQw
+ggEgMA8GA1UdEwEB/wQFMAMBAf8wHQYDVR0OBBYEFNOUikxiEyoZLsyvcop9Ntea
+HNxnMA4GA1UdDwEB/wQEAwIBBjCB3QYDVR0fBIHVMIHSMIGHoIGEoIGBhn9sZGFw
+Oi8vZGlyZWN0b3J5LmQtdHJ1c3QubmV0L0NOPUQtVFJVU1QlMjBSb290JTIwQ2xh
+c3MlMjAzJTIwQ0ElMjAyJTIwRVYlMjAyMDA5LE89RC1UcnVzdCUyMEdtYkgsQz1E
+RT9jZXJ0aWZpY2F0ZXJldm9jYXRpb25saXN0MEagRKBChkBodHRwOi8vd3d3LmQt
+dHJ1c3QubmV0L2NybC9kLXRydXN0X3Jvb3RfY2xhc3NfM19jYV8yX2V2XzIwMDku
+Y3JsMA0GCSqGSIb3DQEBCwUAA4IBAQA07XtaPKSUiO8aEXUHL7P+PPoeUSbrh/Yp
+3uDx1MYkCenBz1UbtDDZzhr+BlGmFaQt77JLvyAoJUnRpjZ3NOhk31KxEcdzes05
+nsKtjHEh8lprr988TlWvsoRlFIm5d8sqMb7Po23Pb0iUMkZv53GMoKaEGTcH8gNF
+CSuGdXzfX2lXANtu2KZyIktQ1HWYVt+3GP9DQ1CuekR78HlR10M9p9OB0/DJT7na
+xpeG0ILD5EJt/rDiZE4OJudANCa1CInXCGNjOCd1HjPqbqjdn5lPdE2BiYBL3ZqX
+KVwvvoFBuYz/6n1gBp7N1z3TLqMVvKjmJuVvw9y4AyHqnxbxLFS1
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIIECTCCAvGgAwIBAgIQDV6ZCtadt3js2AdWO4YV2TANBgkqhkiG9w0BAQUFADBb
+MQswCQYDVQQGEwJVUzEgMB4GA1UEChMXRGlnaXRhbCBTaWduYXR1cmUgVHJ1c3Qx
+ETAPBgNVBAsTCERTVCBBQ0VTMRcwFQYDVQQDEw5EU1QgQUNFUyBDQSBYNjAeFw0w
+MzExMjAyMTE5NThaFw0xNzExMjAyMTE5NThaMFsxCzAJBgNVBAYTAlVTMSAwHgYD
+VQQKExdEaWdpdGFsIFNpZ25hdHVyZSBUcnVzdDERMA8GA1UECxMIRFNUIEFDRVMx
+FzAVBgNVBAMTDkRTVCBBQ0VTIENBIFg2MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8A
+MIIBCgKCAQEAuT31LMmU3HWKlV1j6IR3dma5WZFcRt2SPp/5DgO0PWGSvSMmtWPu
+ktKe1jzIDZBfZIGxqAgNTNj50wUoUrQBJcWVHAx+PhCEdc/BGZFjz+iokYi5Q1K7
+gLFViYsx+tC3dr5BPTCapCIlF3PoHuLTrCq9Wzgh1SpL11V94zpVvddtawJXa+ZH
+fAjIgrrep4c9oW24MFbCswKBXy314powGCi4ZtPLAZZv6opFVdbgnf9nKxcCpk4a
+ahELfrd755jWjHZvwTvbUJN+5dCOHze4vbrGn2zpfDPyMjwmR/onJALJfh1biEIT
+ajV8fTXpLmaRcpPVMibEdPVTo7NdmvYJywIDAQABo4HIMIHFMA8GA1UdEwEB/wQF
+MAMBAf8wDgYDVR0PAQH/BAQDAgHGMB8GA1UdEQQYMBaBFHBraS1vcHNAdHJ1c3Rk
+c3QuY29tMGIGA1UdIARbMFkwVwYKYIZIAWUDAgEBATBJMEcGCCsGAQUFBwIBFjto
+dHRwOi8vd3d3LnRydXN0ZHN0LmNvbS9jZXJ0aWZpY2F0ZXMvcG9saWN5L0FDRVMt
+aW5kZXguaHRtbDAdBgNVHQ4EFgQUCXIGThhDD+XWzMNqizF7eI+og7gwDQYJKoZI
+hvcNAQEFBQADggEBAKPYjtay284F5zLNAdMEA+V25FYrnJmQ6AgwbN99Pe7lv7Uk
+QIRJ4dEorsTCOlMwiPH1d25Ryvr/ma8kXxug/fKshMrfqfBfBC6tFr8hlxCBPeP/
+h40y3JTlR4peahPJlJU90u7INJXQgNStMgiAVDzgvVJT11J8smk/f3rPanTK+gQq
+nExaBqXpIK1FZg9p8d2/6eMyi/rgwYZNcjwu2JN4Cir42NInPRmJX1p7ijvMDNpR
+rscL9yuwNwXsvFcj4jjSm2jzVhKIT0J8uDHEtdvkyCE06UgRNe76x5JXxZ805Mf2
+9w4LTJxoeHtxMcfrHuBnQfO3oKfN5XozNmr6mis=
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIIDSjCCAjKgAwIBAgIQRK+wgNajJ7qJMDmGLvhAazANBgkqhkiG9w0BAQUFADA/
+MSQwIgYDVQQKExtEaWdpdGFsIFNpZ25hdHVyZSBUcnVzdCBDby4xFzAVBgNVBAMT
+DkRTVCBSb290IENBIFgzMB4XDTAwMDkzMDIxMTIxOVoXDTIxMDkzMDE0MDExNVow
+PzEkMCIGA1UEChMbRGlnaXRhbCBTaWduYXR1cmUgVHJ1c3QgQ28uMRcwFQYDVQQD
+Ew5EU1QgUm9vdCBDQSBYMzCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEB
+AN+v6ZdQCINXtMxiZfaQguzH0yxrMMpb7NnDfcdAwRgUi+DoM3ZJKuM/IUmTrE4O
+rz5Iy2Xu/NMhD2XSKtkyj4zl93ewEnu1lcCJo6m67XMuegwGMoOifooUMM0RoOEq
+OLl5CjH9UL2AZd+3UWODyOKIYepLYYHsUmu5ouJLGiifSKOeDNoJjj4XLh7dIN9b
+xiqKqy69cK3FCxolkHRyxXtqqzTWMIn/5WgTe1QLyNau7Fqckh49ZLOMxt+/yUFw
+7BZy1SbsOFU5Q9D8/RhcQPGX69Wam40dutolucbY38EVAjqr2m7xPi71XAicPNaD
+aeQQmxkqtilX4+U9m5/wAl0CAwEAAaNCMEAwDwYDVR0TAQH/BAUwAwEB/zAOBgNV
+HQ8BAf8EBAMCAQYwHQYDVR0OBBYEFMSnsaR7LHH62+FLkHX/xBVghYkQMA0GCSqG
+SIb3DQEBBQUAA4IBAQCjGiybFwBcqR7uKGY3Or+Dxz9LwwmglSBd49lZRNI+DT69
+ikugdB/OEIKcdBodfpga3csTS7MgROSR6cz8faXbauX+5v3gTt23ADq1cEmv8uXr
+AvHRAosZy5Q6XkjEGB5YGV8eAlrwDPGxrancWYaLbumR9YbK+rlmM6pZW87ipxZz
+R8srzJmwN0jP41ZL9c8PDHIyh8bwRLtTcm1D9SZImlJnt1ir/md2cXjbDaJWFBM5
+JDGFoqgCWjBH4d1QB7wCCZAA62RjYJsWvIjJEubSfZGL+T0yjWW06XyxV3bqxbYo
+Ob8VZRzI9neWagqNdwvYkQsEjgfbKbYK7p2CNTUQ
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIIDnzCCAoegAwIBAgIBJjANBgkqhkiG9w0BAQUFADBxMQswCQYDVQQGEwJERTEc
+MBoGA1UEChMTRGV1dHNjaGUgVGVsZWtvbSBBRzEfMB0GA1UECxMWVC1UZWxlU2Vj
+IFRydXN0IENlbnRlcjEjMCEGA1UEAxMaRGV1dHNjaGUgVGVsZWtvbSBSb290IENB
+IDIwHhcNOTkwNzA5MTIxMTAwWhcNMTkwNzA5MjM1OTAwWjBxMQswCQYDVQQGEwJE
+RTEcMBoGA1UEChMTRGV1dHNjaGUgVGVsZWtvbSBBRzEfMB0GA1UECxMWVC1UZWxl
+U2VjIFRydXN0IENlbnRlcjEjMCEGA1UEAxMaRGV1dHNjaGUgVGVsZWtvbSBSb290
+IENBIDIwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCrC6M14IspFLEU
+ha88EOQ5bzVdSq7d6mGNlUn0b2SjGmBmpKlAIoTZ1KXleJMOaAGtuU1cOs7TuKhC
+QN/Po7qCWWqSG6wcmtoIKyUn+WkjR/Hg6yx6m/UTAtB+NHzCnjwAWav12gz1Mjwr
+rFDa1sPeg5TKqAyZMg4ISFZbavva4VhYAUlfckE8FQYBjl2tqriTtM2e66foai1S
+NNs671x1Udrb8zH57nGYMsRUFUQM+ZtV7a3fGAigo4aKSe5TBY8ZTNXeWHmb0moc
+QqvF1afPaA+W5OFhmHZhyJF81j4A4pFQh+GdCuatl9Idxjp9y7zaAzTVjlsB9WoH
+txa2bkp/AgMBAAGjQjBAMB0GA1UdDgQWBBQxw3kbuvVT1xfgiXotF2wKsyudMzAP
+BgNVHRMECDAGAQH/AgEFMA4GA1UdDwEB/wQEAwIBBjANBgkqhkiG9w0BAQUFAAOC
+AQEAlGRZrTlk5ynrE/5aw4sTV8gEJPB0d8Bg42f76Ymmg7+Wgnxu1MM9756Abrsp
+tJh6sTtU6zkXR34ajgv8HzFZMQSyzhfzLMdiNlXiItiJVbSYSKpk+tYcNthEeFpa
+IzpXl/V6ME+un2pMSyuOoAPjPuCp1NJ70rOo4nI8rZ7/gFnkm0W09juwzTkZmDLl
+6iFhkOQxIY40sfcvNUqFENrnijchvllj4PKFiDFT1FQUhXB59C4Gdyd1Lx+4ivn+
+xbrYNuSD7Odlt79jWvNGr4GUN9RBjNYj1h7P9WgbRGOiWrqnNVmh5XAFmw4jV5mU
+Cm26OWMohpLzGITY+9HPBVZkVw==
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIIDtzCCAp+gAwIBAgIQDOfg5RfYRv6P5WD8G/AwOTANBgkqhkiG9w0BAQUFADBl
+MQswCQYDVQQGEwJVUzEVMBMGA1UEChMMRGlnaUNlcnQgSW5jMRkwFwYDVQQLExB3
+d3cuZGlnaWNlcnQuY29tMSQwIgYDVQQDExtEaWdpQ2VydCBBc3N1cmVkIElEIFJv
+b3QgQ0EwHhcNMDYxMTEwMDAwMDAwWhcNMzExMTEwMDAwMDAwWjBlMQswCQYDVQQG
+EwJVUzEVMBMGA1UEChMMRGlnaUNlcnQgSW5jMRkwFwYDVQQLExB3d3cuZGlnaWNl
+cnQuY29tMSQwIgYDVQQDExtEaWdpQ2VydCBBc3N1cmVkIElEIFJvb3QgQ0EwggEi
+MA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCtDhXO5EOAXLGH87dg+XESpa7c
+JpSIqvTO9SA5KFhgDPiA2qkVlTJhPLWxKISKityfCgyDF3qPkKyK53lTXDGEKvYP
+mDI2dsze3Tyoou9q+yHyUmHfnyDXH+Kx2f4YZNISW1/5WBg1vEfNoTb5a3/UsDg+
+wRvDjDPZ2C8Y/igPs6eD1sNuRMBhNZYW/lmci3Zt1/GiSw0r/wty2p5g0I6QNcZ4
+VYcgoc/lbQrISXwxmDNsIumH0DJaoroTghHtORedmTpyoeb6pNnVFzF1roV9Iq4/
+AUaG9ih5yLHa5FcXxH4cDrC0kqZWs72yl+2qp/C3xag/lRbQ/6GW6whfGHdPAgMB
+AAGjYzBhMA4GA1UdDwEB/wQEAwIBhjAPBgNVHRMBAf8EBTADAQH/MB0GA1UdDgQW
+BBRF66Kv9JLLgjEtUYunpyGd823IDzAfBgNVHSMEGDAWgBRF66Kv9JLLgjEtUYun
+pyGd823IDzANBgkqhkiG9w0BAQUFAAOCAQEAog683+Lt8ONyc3pklL/3cmbYMuRC
+dWKuh+vy1dneVrOfzM4UKLkNl2BcEkxY5NM9g0lFWJc1aRqoR+pWxnmrEthngYTf
+fwk8lOa4JiwgvT2zKIn3X/8i4peEH+ll74fg38FnSbNd67IJKusm7Xi+fT8r87cm
+NW1fiQG2SVufAQWbqz0lwcy2f8Lxb4bG+mRo64EtlOtCt/qMHt1i8b5QZ7dsvfPx
+H2sMNgcWfzd8qVttevESRmCD1ycEvkvOl77DZypoEd+A5wwzZr8TDRRu838fYxAe
++o0bJW1sj6W3YQGx0qMmoRBxna3iw/nDmVG3KwcIzi7mULKn+gpFL6Lw8g==
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIIDljCCAn6gAwIBAgIQC5McOtY5Z+pnI7/Dr5r0SzANBgkqhkiG9w0BAQsFADBl
+MQswCQYDVQQGEwJVUzEVMBMGA1UEChMMRGlnaUNlcnQgSW5jMRkwFwYDVQQLExB3
+d3cuZGlnaWNlcnQuY29tMSQwIgYDVQQDExtEaWdpQ2VydCBBc3N1cmVkIElEIFJv
+b3QgRzIwHhcNMTMwODAxMTIwMDAwWhcNMzgwMTE1MTIwMDAwWjBlMQswCQYDVQQG
+EwJVUzEVMBMGA1UEChMMRGlnaUNlcnQgSW5jMRkwFwYDVQQLExB3d3cuZGlnaWNl
+cnQuY29tMSQwIgYDVQQDExtEaWdpQ2VydCBBc3N1cmVkIElEIFJvb3QgRzIwggEi
+MA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDZ5ygvUj82ckmIkzTz+GoeMVSA
+n61UQbVH35ao1K+ALbkKz3X9iaV9JPrjIgwrvJUXCzO/GU1BBpAAvQxNEP4Htecc
+biJVMWWXvdMX0h5i89vqbFCMP4QMls+3ywPgym2hFEwbid3tALBSfK+RbLE4E9Hp
+EgjAALAcKxHad3A2m67OeYfcgnDmCXRwVWmvo2ifv922ebPynXApVfSr/5Vh88lA
+bx3RvpO704gqu52/clpWcTs/1PPRCv4o76Pu2ZmvA9OPYLfykqGxvYmJHzDNw6Yu
+YjOuFgJ3RFrngQo8p0Quebg/BLxcoIfhG69Rjs3sLPr4/m3wOnyqi+RnlTGNAgMB
+AAGjQjBAMA8GA1UdEwEB/wQFMAMBAf8wDgYDVR0PAQH/BAQDAgGGMB0GA1UdDgQW
+BBTOw0q5mVXyuNtgv6l+vVa1lzan1jANBgkqhkiG9w0BAQsFAAOCAQEAyqVVjOPI
+QW5pJ6d1Ee88hjZv0p3GeDgdaZaikmkuOGybfQTUiaWxMTeKySHMq2zNixya1r9I
+0jJmwYrA8y8678Dj1JGG0VDjA9tzd29KOVPt3ibHtX2vK0LRdWLjSisCx1BL4Gni
+lmwORGYQRI+tBev4eaymG+g3NJ1TyWGqolKvSnAWhsI6yLETcDbYz+70CjTVW0z9
+B5yiutkBclzzTcHdDrEcDcRjvq30FPuJ7KJBDkzMyFdA0G4Dqs0MjomZmWzwPDCv
+ON9vvKO+KSAnq3T/EyJ43pdSVR6DtVQgA+6uwE9W3jfMw3+qBCe703e4YtsXfJwo
+IhNzbM8m9Yop5w==
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIICRjCCAc2gAwIBAgIQC6Fa+h3foLVJRK/NJKBs7DAKBggqhkjOPQQDAzBlMQsw
+CQYDVQQGEwJVUzEVMBMGA1UEChMMRGlnaUNlcnQgSW5jMRkwFwYDVQQLExB3d3cu
+ZGlnaWNlcnQuY29tMSQwIgYDVQQDExtEaWdpQ2VydCBBc3N1cmVkIElEIFJvb3Qg
+RzMwHhcNMTMwODAxMTIwMDAwWhcNMzgwMTE1MTIwMDAwWjBlMQswCQYDVQQGEwJV
+UzEVMBMGA1UEChMMRGlnaUNlcnQgSW5jMRkwFwYDVQQLExB3d3cuZGlnaWNlcnQu
+Y29tMSQwIgYDVQQDExtEaWdpQ2VydCBBc3N1cmVkIElEIFJvb3QgRzMwdjAQBgcq
+hkjOPQIBBgUrgQQAIgNiAAQZ57ysRGXtzbg/WPuNsVepRC0FFfLvC/8QdJ+1YlJf
+Zn4f5dwbRXkLzMZTCp2NXQLZqVneAlr2lSoOjThKiknGvMYDOAdfVdp+CW7if17Q
+RSAPWXYQ1qAk8C3eNvJsKTmjQjBAMA8GA1UdEwEB/wQFMAMBAf8wDgYDVR0PAQH/
+BAQDAgGGMB0GA1UdDgQWBBTL0L2p4ZgFUaFNN6KDec6NHSrkhDAKBggqhkjOPQQD
+AwNnADBkAjAlpIFFAmsSS3V0T8gj43DydXLefInwz5FyYZ5eEJJZVrmDxxDnOOlY
+JjZ91eQ0hjkCMHw2U/Aw5WJjOpnitqM7mzT6HtoQknFekROn3aRukswy1vUhZscv
+6pZjamVFkpUBtA==
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIIDrzCCApegAwIBAgIQCDvgVpBCRrGhdWrJWZHHSjANBgkqhkiG9w0BAQUFADBh
+MQswCQYDVQQGEwJVUzEVMBMGA1UEChMMRGlnaUNlcnQgSW5jMRkwFwYDVQQLExB3
+d3cuZGlnaWNlcnQuY29tMSAwHgYDVQQDExdEaWdpQ2VydCBHbG9iYWwgUm9vdCBD
+QTAeFw0wNjExMTAwMDAwMDBaFw0zMTExMTAwMDAwMDBaMGExCzAJBgNVBAYTAlVT
+MRUwEwYDVQQKEwxEaWdpQ2VydCBJbmMxGTAXBgNVBAsTEHd3dy5kaWdpY2VydC5j
+b20xIDAeBgNVBAMTF0RpZ2lDZXJ0IEdsb2JhbCBSb290IENBMIIBIjANBgkqhkiG
+9w0BAQEFAAOCAQ8AMIIBCgKCAQEA4jvhEXLeqKTTo1eqUKKPC3eQyaKl7hLOllsB
+CSDMAZOnTjC3U/dDxGkAV53ijSLdhwZAAIEJzs4bg7/fzTtxRuLWZscFs3YnFo97
+nh6Vfe63SKMI2tavegw5BmV/Sl0fvBf4q77uKNd0f3p4mVmFaG5cIzJLv07A6Fpt
+43C/dxC//AH2hdmoRBBYMql1GNXRor5H4idq9Joz+EkIYIvUX7Q6hL+hqkpMfT7P
+T19sdl6gSzeRntwi5m3OFBqOasv+zbMUZBfHWymeMr/y7vrTC0LUq7dBMtoM1O/4
+gdW7jVg/tRvoSSiicNoxBN33shbyTApOB6jtSj1etX+jkMOvJwIDAQABo2MwYTAO
+BgNVHQ8BAf8EBAMCAYYwDwYDVR0TAQH/BAUwAwEB/zAdBgNVHQ4EFgQUA95QNVbR
+TLtm8KPiGxvDl7I90VUwHwYDVR0jBBgwFoAUA95QNVbRTLtm8KPiGxvDl7I90VUw
+DQYJKoZIhvcNAQEFBQADggEBAMucN6pIExIK+t1EnE9SsPTfrgT1eXkIoyQY/Esr
+hMAtudXH/vTBH1jLuG2cenTnmCmrEbXjcKChzUyImZOMkXDiqw8cvpOp/2PV5Adg
+06O/nVsJ8dWO41P0jmP6P6fbtGbfYmbW0W5BjfIttep3Sp+dWOIrWcBAI+0tKIJF
+PnlUkiaY4IBIqDfv8NZ5YBberOgOzW6sRBc4L0na4UU+Krk2U886UAb3LujEV0ls
+YSEY1QSteDwsOoBrp+uvFRTp2InBuThs4pFsiv9kuXclVzDAGySj4dzp30d8tbQk
+CAUw7C29C79Fv1C5qfPrmAESrciIxpg0X40KPMbp1ZWVbd4=
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIIDjjCCAnagAwIBAgIQAzrx5qcRqaC7KGSxHQn65TANBgkqhkiG9w0BAQsFADBh
+MQswCQYDVQQGEwJVUzEVMBMGA1UEChMMRGlnaUNlcnQgSW5jMRkwFwYDVQQLExB3
+d3cuZGlnaWNlcnQuY29tMSAwHgYDVQQDExdEaWdpQ2VydCBHbG9iYWwgUm9vdCBH
+MjAeFw0xMzA4MDExMjAwMDBaFw0zODAxMTUxMjAwMDBaMGExCzAJBgNVBAYTAlVT
+MRUwEwYDVQQKEwxEaWdpQ2VydCBJbmMxGTAXBgNVBAsTEHd3dy5kaWdpY2VydC5j
+b20xIDAeBgNVBAMTF0RpZ2lDZXJ0IEdsb2JhbCBSb290IEcyMIIBIjANBgkqhkiG
+9w0BAQEFAAOCAQ8AMIIBCgKCAQEAuzfNNNx7a8myaJCtSnX/RrohCgiN9RlUyfuI
+2/Ou8jqJkTx65qsGGmvPrC3oXgkkRLpimn7Wo6h+4FR1IAWsULecYxpsMNzaHxmx
+1x7e/dfgy5SDN67sH0NO3Xss0r0upS/kqbitOtSZpLYl6ZtrAGCSYP9PIUkY92eQ
+q2EGnI/yuum06ZIya7XzV+hdG82MHauVBJVJ8zUtluNJbd134/tJS7SsVQepj5Wz
+tCO7TG1F8PapspUwtP1MVYwnSlcUfIKdzXOS0xZKBgyMUNGPHgm+F6HmIcr9g+UQ
+vIOlCsRnKPZzFBQ9RnbDhxSJITRNrw9FDKZJobq7nMWxM4MphQIDAQABo0IwQDAP
+BgNVHRMBAf8EBTADAQH/MA4GA1UdDwEB/wQEAwIBhjAdBgNVHQ4EFgQUTiJUIBiV
+5uNu5g/6+rkS7QYXjzkwDQYJKoZIhvcNAQELBQADggEBAGBnKJRvDkhj6zHd6mcY
+1Yl9PMWLSn/pvtsrF9+wX3N3KjITOYFnQoQj8kVnNeyIv/iPsGEMNKSuIEyExtv4
+NeF22d+mQrvHRAiGfzZ0JFrabA0UWTW98kndth/Jsw1HKj2ZL7tcu7XUIOGZX1NG
+Fdtom/DzMNU+MeKNhJ7jitralj41E6Vf8PlwUHBHQRFXGU7Aj64GxJUTFy8bJZ91
+8rGOmaFvE7FBcf6IKshPECBV1/MUReXgRPTqh5Uykw7+U0b6LJ3/iyK5S9kJRaTe
+pLiaWN0bfVKfjllDiIGknibVb63dDcY3fe0Dkhvld1927jyNxF1WW6LZZm6zNTfl
+MrY=
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIICPzCCAcWgAwIBAgIQBVVWvPJepDU1w6QP1atFcjAKBggqhkjOPQQDAzBhMQsw
+CQYDVQQGEwJVUzEVMBMGA1UEChMMRGlnaUNlcnQgSW5jMRkwFwYDVQQLExB3d3cu
+ZGlnaWNlcnQuY29tMSAwHgYDVQQDExdEaWdpQ2VydCBHbG9iYWwgUm9vdCBHMzAe
+Fw0xMzA4MDExMjAwMDBaFw0zODAxMTUxMjAwMDBaMGExCzAJBgNVBAYTAlVTMRUw
+EwYDVQQKEwxEaWdpQ2VydCBJbmMxGTAXBgNVBAsTEHd3dy5kaWdpY2VydC5jb20x
+IDAeBgNVBAMTF0RpZ2lDZXJ0IEdsb2JhbCBSb290IEczMHYwEAYHKoZIzj0CAQYF
+K4EEACIDYgAE3afZu4q4C/sLfyHS8L6+c/MzXRq8NOrexpu80JX28MzQC7phW1FG
+fp4tn+6OYwwX7Adw9c+ELkCDnOg/QW07rdOkFFk2eJ0DQ+4QE2xy3q6Ip6FrtUPO
+Z9wj/wMco+I+o0IwQDAPBgNVHRMBAf8EBTADAQH/MA4GA1UdDwEB/wQEAwIBhjAd
+BgNVHQ4EFgQUs9tIpPmhxdiuNkHMEWNpYim8S8YwCgYIKoZIzj0EAwMDaAAwZQIx
+AK288mw/EkrRLTnDCgmXc/SINoyIJ7vmiI1Qhadj+Z4y3maTD/HMsQmP3Wyr+mt/
+oAIwOWZbwmSNuJ5Q3KjVSaLtx9zRSX8XAbjIho9OjIgrqJqpisXRAL34VOKa5Vt8
+sycX
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIIDxTCCAq2gAwIBAgIQAqxcJmoLQJuPC3nyrkYldzANBgkqhkiG9w0BAQUFADBs
+MQswCQYDVQQGEwJVUzEVMBMGA1UEChMMRGlnaUNlcnQgSW5jMRkwFwYDVQQLExB3
+d3cuZGlnaWNlcnQuY29tMSswKQYDVQQDEyJEaWdpQ2VydCBIaWdoIEFzc3VyYW5j
+ZSBFViBSb290IENBMB4XDTA2MTExMDAwMDAwMFoXDTMxMTExMDAwMDAwMFowbDEL
+MAkGA1UEBhMCVVMxFTATBgNVBAoTDERpZ2lDZXJ0IEluYzEZMBcGA1UECxMQd3d3
+LmRpZ2ljZXJ0LmNvbTErMCkGA1UEAxMiRGlnaUNlcnQgSGlnaCBBc3N1cmFuY2Ug
+RVYgUm9vdCBDQTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAMbM5XPm
++9S75S0tMqbf5YE/yc0lSbZxKsPVlDRnogocsF9ppkCxxLeyj9CYpKlBWTrT3JTW
+PNt0OKRKzE0lgvdKpVMSOO7zSW1xkX5jtqumX8OkhPhPYlG++MXs2ziS4wblCJEM
+xChBVfvLWokVfnHoNb9Ncgk9vjo4UFt3MRuNs8ckRZqnrG0AFFoEt7oT61EKmEFB
+Ik5lYYeBQVCmeVyJ3hlKV9Uu5l0cUyx+mM0aBhakaHPQNAQTXKFx01p8VdteZOE3
+hzBWBOURtCmAEvF5OYiiAhF8J2a3iLd48soKqDirCmTCv2ZdlYTBoSUeh10aUAsg
+EsxBu24LUTi4S8sCAwEAAaNjMGEwDgYDVR0PAQH/BAQDAgGGMA8GA1UdEwEB/wQF
+MAMBAf8wHQYDVR0OBBYEFLE+w2kD+L9HAdSYJhoIAu9jZCvDMB8GA1UdIwQYMBaA
+FLE+w2kD+L9HAdSYJhoIAu9jZCvDMA0GCSqGSIb3DQEBBQUAA4IBAQAcGgaX3Nec
+nzyIZgYIVyHbIUf4KmeqvxgydkAQV8GK83rZEWWONfqe/EW1ntlMMUu4kehDLI6z
+eM7b41N5cdblIZQB2lWHmiRk9opmzN6cN82oNLFpmyPInngiK3BD41VHMWEZ71jF
+hS9OMPagMRYjyOfiZRYzy78aG6A9+MpeizGLYAiJLQwGXFK3xPkKmNEVX58Svnw2
+Yzi9RKR/5CYrCsSXaQ3pjOLAEFe4yHYSkVXySGnYvCoCWw9E1CAx2/S6cCZdkGCe
+vEsXCS+0yx5DaMkHJ8HSXPfqIbloEpw8nL+e/IBcm2PN7EeqJSdnoDfzAIJ9VNep
++OkuE6N36B9K
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIIFkDCCA3igAwIBAgIQBZsbV56OITLiOQe9p3d1XDANBgkqhkiG9w0BAQwFADBi
+MQswCQYDVQQGEwJVUzEVMBMGA1UEChMMRGlnaUNlcnQgSW5jMRkwFwYDVQQLExB3
+d3cuZGlnaWNlcnQuY29tMSEwHwYDVQQDExhEaWdpQ2VydCBUcnVzdGVkIFJvb3Qg
+RzQwHhcNMTMwODAxMTIwMDAwWhcNMzgwMTE1MTIwMDAwWjBiMQswCQYDVQQGEwJV
+UzEVMBMGA1UEChMMRGlnaUNlcnQgSW5jMRkwFwYDVQQLExB3d3cuZGlnaWNlcnQu
+Y29tMSEwHwYDVQQDExhEaWdpQ2VydCBUcnVzdGVkIFJvb3QgRzQwggIiMA0GCSqG
+SIb3DQEBAQUAA4ICDwAwggIKAoICAQC/5pBzaN675F1KPDAiMGkz7MKnJS7JIT3y
+ithZwuEppz1Yq3aaza57G4QNxDAf8xukOBbrVsaXbR2rsnnyyhHS5F/WBTxSD1If
+xp4VpX6+n6lXFllVcq9ok3DCsrp1mWpzMpTREEQQLt+C8weE5nQ7bXHiLQwb7iDV
+ySAdYyktzuxeTsiT+CFhmzTrBcZe7FsavOvJz82sNEBfsXpm7nfISKhmV1efVFiO
+DCu3T6cw2Vbuyntd463JT17lNecxy9qTXtyOj4DatpGYQJB5w3jHtrHEtWoYOAMQ
+jdjUN6QuBX2I9YI+EJFwq1WCQTLX2wRzKm6RAXwhTNS8rhsDdV14Ztk6MUSaM0C/
+CNdaSaTC5qmgZ92kJ7yhTzm1EVgX9yRcRo9k98FpiHaYdj1ZXUJ2h4mXaXpI8OCi
+EhtmmnTK3kse5w5jrubU75KSOp493ADkRSWJtppEGSt+wJS00mFt6zPZxd9LBADM
+fRyVw4/3IbKyEbe7f/LVjHAsQWCqsWMYRJUadmJ+9oCw++hkpjPRiQfhvbfmQ6QY
+uKZ3AeEPlAwhHbJUKSWJbOUOUlFHdL4mrLZBdd56rF+NP8m800ERElvlEFDrMcXK
+chYiCd98THU/Y+whX8QgUWtvsauGi0/C1kVfnSD8oR7FwI+isX4KJpn15GkvmB0t
+9dmpsh3lGwIDAQABo0IwQDAPBgNVHRMBAf8EBTADAQH/MA4GA1UdDwEB/wQEAwIB
+hjAdBgNVHQ4EFgQU7NfjgtJxXWRM3y5nP+e6mK4cD08wDQYJKoZIhvcNAQEMBQAD
+ggIBALth2X2pbL4XxJEbw6GiAI3jZGgPVs93rnD5/ZpKmbnJeFwMDF/k5hQpVgs2
+SV1EY+CtnJYYZhsjDT156W1r1lT40jzBQ0CuHVD1UvyQO7uYmWlrx8GnqGikJ9yd
++SeuMIW59mdNOj6PWTkiU0TryF0Dyu1Qen1iIQqAyHNm0aAFYF/opbSnr6j3bTWc
+fFqK1qI4mfN4i/RN0iAL3gTujJtHgXINwBQy7zBZLq7gcfJW5GqXb5JQbZaNaHqa
+sjYUegbyJLkJEVDXCLG4iXqEI2FCKeWjzaIgQdfRnGTZ6iahixTXTBmyUEFxPT9N
+cCOGDErcgdLMMpSEDQgJlxxPwO5rIHQw0uA5NBCFIRUBCOhVMt5xSdkoF1BN5r5N
+0XWs0Mr7QbhDparTwwVETyw2m+L64kW4I1NsBm9nVX9GtUw/bihaeSbSpKhil9Ie
+4u1Ki7wb/UdKDd9nZn6yW0HQO+T0O/QEY+nvwlQAUaCKKsnOeMzV6ocEGLPOr0mI
+r/OSmbaz5mEP0oUA51Aa5BuVnRmhuZyxm7EAHu/QD09CbMkKvO5D+jpxpchNJqU1
+/YldvIViHTLSoCtU7ZpXwdv6EM8Zt4tKG48BtieVU+i2iW1bvGjUI+iLUaJW+fCm
+gKDWHrO8Dw9TdSmq6hN35N6MgSGtBxBHEa2HPQfRdbzP82Z+
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIIGSzCCBDOgAwIBAgIIamg+nFGby1MwDQYJKoZIhvcNAQELBQAwgbIxCzAJBgNV
+BAYTAlRSMQ8wDQYDVQQHDAZBbmthcmExQDA+BgNVBAoMN0UtVHXEn3JhIEVCRyBC
+aWxpxZ9pbSBUZWtub2xvamlsZXJpIHZlIEhpem1ldGxlcmkgQS7Fni4xJjAkBgNV
+BAsMHUUtVHVncmEgU2VydGlmaWthc3lvbiBNZXJrZXppMSgwJgYDVQQDDB9FLVR1
+Z3JhIENlcnRpZmljYXRpb24gQXV0aG9yaXR5MB4XDTEzMDMwNTEyMDk0OFoXDTIz
+MDMwMzEyMDk0OFowgbIxCzAJBgNVBAYTAlRSMQ8wDQYDVQQHDAZBbmthcmExQDA+
+BgNVBAoMN0UtVHXEn3JhIEVCRyBCaWxpxZ9pbSBUZWtub2xvamlsZXJpIHZlIEhp
+em1ldGxlcmkgQS7Fni4xJjAkBgNVBAsMHUUtVHVncmEgU2VydGlmaWthc3lvbiBN
+ZXJrZXppMSgwJgYDVQQDDB9FLVR1Z3JhIENlcnRpZmljYXRpb24gQXV0aG9yaXR5
+MIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEA4vU/kwVRHoViVF56C/UY
+B4Oufq9899SKa6VjQzm5S/fDxmSJPZQuVIBSOTkHS0vdhQd2h8y/L5VMzH2nPbxH
+D5hw+IyFHnSOkm0bQNGZDbt1bsipa5rAhDGvykPL6ys06I+XawGb1Q5KCKpbknSF
+Q9OArqGIW66z6l7LFpp3RMih9lRozt6Plyu6W0ACDGQXwLWTzeHxE2bODHnv0ZEo
+q1+gElIwcxmOj+GMB6LDu0rw6h8VqO4lzKRG+Bsi77MOQ7osJLjFLFzUHPhdZL3D
+k14opz8n8Y4e0ypQBaNV2cvnOVPAmJ6MVGKLJrD3fY185MaeZkJVgkfnsliNZvcH
+fC425lAcP9tDJMW/hkd5s3kc91r0E+xs+D/iWR+V7kI+ua2oMoVJl0b+SzGPWsut
+dEcf6ZG33ygEIqDUD13ieU/qbIWGvaimzuT6w+Gzrt48Ue7LE3wBf4QOXVGUnhMM
+ti6lTPk5cDZvlsouDERVxcr6XQKj39ZkjFqzAQqptQpHF//vkUAqjqFGOjGY5RH8
+zLtJVor8udBhmm9lbObDyz51Sf6Pp+KJxWfXnUYTTjF2OySznhFlhqt/7x3U+Lzn
+rFpct1pHXFXOVbQicVtbC/DP3KBhZOqp12gKY6fgDT+gr9Oq0n7vUaDmUStVkhUX
+U8u3Zg5mTPj5dUyQ5xJwx0UCAwEAAaNjMGEwHQYDVR0OBBYEFC7j27JJ0JxUeVz6
+Jyr+zE7S6E5UMA8GA1UdEwEB/wQFMAMBAf8wHwYDVR0jBBgwFoAULuPbsknQnFR5
+XPonKv7MTtLoTlQwDgYDVR0PAQH/BAQDAgEGMA0GCSqGSIb3DQEBCwUAA4ICAQAF
+Nzr0TbdF4kV1JI+2d1LoHNgQk2Xz8lkGpD4eKexd0dCrfOAKkEh47U6YA5n+KGCR
+HTAduGN8qOY1tfrTYXbm1gdLymmasoR6d5NFFxWfJNCYExL/u6Au/U5Mh/jOXKqY
+GwXgAEZKgoClM4so3O0409/lPun++1ndYYRP0lSWE2ETPo+Aab6TR7U1Q9Jauz1c
+77NCR807VRMGsAnb/WP2OogKmW9+4c4bU2pEZiNRCHu8W1Ki/QY3OEBhj0qWuJA3
++GbHeJAAFS6LrVE1Uweoa2iu+U48BybNCAVwzDk/dr2l02cmAYamU9JgO3xDf1WK
+vJUawSg5TB9D0pH0clmKuVb8P7Sd2nCcdlqMQ1DujjByTd//SffGqWfZbawCEeI6
+FiWnWAjLb1NBnEg4R2gz0dfHj9R0IdTDBZB6/86WiLEVKV0jq9BgoRJP3vQXzTLl
+yb/IQ639Lo7xr+L0mPoSHyDYwKcMhcWQ9DstliaxLL5Mq+ux0orJ23gTDx4JnW2P
+AJ8C2sH6H3p6CcRK5ogql5+Ji/03X186zjhZhkuvcQu02PJwT58yE+Owp1fl2tpD
+y4Q08ijE6m30Ku/Ba3ba+367hTzSU8JNvnHhRdH9I2cNE3X7z2VnIp2usAnRCf8d
+NL/+I5c30jn6PQ0GC7TbO6Orb1wdtn7os4I07QZcJA==
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIIF5zCCA8+gAwIBAgIITK9zQhyOdAIwDQYJKoZIhvcNAQEFBQAwgYAxODA2BgNV
+BAMML0VCRyBFbGVrdHJvbmlrIFNlcnRpZmlrYSBIaXptZXQgU2HEn2xhecSxY8Sx
+c8SxMTcwNQYDVQQKDC5FQkcgQmlsacWfaW0gVGVrbm9sb2ppbGVyaSB2ZSBIaXpt
+ZXRsZXJpIEEuxZ4uMQswCQYDVQQGEwJUUjAeFw0wNjA4MTcwMDIxMDlaFw0xNjA4
+MTQwMDMxMDlaMIGAMTgwNgYDVQQDDC9FQkcgRWxla3Ryb25payBTZXJ0aWZpa2Eg
+SGl6bWV0IFNhxJ9sYXnEsWPEsXPEsTE3MDUGA1UECgwuRUJHIEJpbGnFn2ltIFRl
+a25vbG9qaWxlcmkgdmUgSGl6bWV0bGVyaSBBLsWeLjELMAkGA1UEBhMCVFIwggIi
+MA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoICAQDuoIRh0DpqZhAy2DE4f6en5f2h
+4fuXd7hxlugTlkaDT7byX3JWbhNgpQGR4lvFzVcfd2NR/y8927k/qqk153nQ9dAk
+tiHq6yOU/im/+4mRDGSaBUorzAzu8T2bgmmkTPiab+ci2hC6X5L8GCcKqKpE+i4s
+tPtGmggDg3KriORqcsnlZR9uKg+ds+g75AxuetpX/dfreYteIAbTdgtsApWjluTL
+dlHRKJ2hGvxEok3MenaoDT2/F08iiFD9rrbskFBKW5+VQarKD7JK/oCZTqNGFav4
+c0JqwmZ2sQomFd2TkuzbqV9UIlKRcF0T6kjsbgNs2d1s/OsNA/+mgxKb8amTD8Um
+TDGyY5lhcucqZJnSuOl14nypqZoaqsNW2xCaPINStnuWt6yHd6i58mcLlEOzrz5z
++kI2sSXFCjEmN1ZnuqMLfdb3ic1nobc6HmZP9qBVFCVMLDMNpkGMvQQxahByCp0O
+Lna9XvNRiYuoP1Vzv9s6xiQFlpJIqkuNKgPlV5EQ9GooFW5Hd4RcUXSfGenmHmMW
+OeMRFeNYGkS9y8RsZteEBt8w9DeiQyJ50hBs37vmExH8nYQKE3vwO9D8owrXieqW
+fo1IhR5kX9tUoqzVegJ5a9KK8GfaZXINFHDk6Y54jzJ0fFfy1tb0Nokb+Clsi7n2
+l9GkLqq+CxnCRelwXQIDAJ3Zo2MwYTAPBgNVHRMBAf8EBTADAQH/MA4GA1UdDwEB
+/wQEAwIBBjAdBgNVHQ4EFgQU587GT/wWZ5b6SqMHwQSny2re2kcwHwYDVR0jBBgw
+FoAU587GT/wWZ5b6SqMHwQSny2re2kcwDQYJKoZIhvcNAQEFBQADggIBAJuYml2+
+8ygjdsZs93/mQJ7ANtyVDR2tFcU22NU57/IeIl6zgrRdu0waypIN30ckHrMk2pGI
+6YNw3ZPX6bqz3xZaPt7gyPvT/Wwp+BVGoGgmzJNSroIBk5DKd8pNSe/iWtkqvTDO
+TLKBtjDOWU/aWR1qeqRFsIImgYZ29fUQALjuswnoT4cCB64kXPBfrAowzIpAoHME
+wfuJJPaaHFy3PApnNgUIMbOv2AFoKuB4j3TeuFGkjGwgPaL7s9QJ/XvCgKqTbCmY
+Iai7FvOpEl90tYeY8pUm3zTvilORiF0alKM/fCL414i6poyWqD1SNGKfAB5UVUJn
+xk1Gj7sURT0KlhaOEKGXmdXTMIXM3rRyt7yKPBgpaP3ccQfuJDlq+u2lrDgv+R4Q
+DgZxGhBM/nV+/x5XOULK1+EVoVZVWRvRo68R2E7DpSvvkL/A7IITW43WciyTTo9q
+Kd+FPNMN4KIYEsxVL0e3p5sC/kH2iExt2qkBR4NkJ2IQgtYSe14DHzSpyZH+r11t
+hie3I6p1GMog57AP14kOpmciY/SDQSsGS7tY1dHXt7kQY9iJSrSq3RZj9W6+YKH4
+7ejWkE8axsWgKdOnIaj1Wjz3x0miIZpKlVIglnKaZsv30oZDfCK+lvm9AahH3eU7
+QPl1K5srRmSGjR70j/sHd9DqSaIcjVIUpgqT
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIIFVjCCBD6gAwIBAgIQ7is969Qh3hSoYqwE893EATANBgkqhkiG9w0BAQUFADCB
+8zELMAkGA1UEBhMCRVMxOzA5BgNVBAoTMkFnZW5jaWEgQ2F0YWxhbmEgZGUgQ2Vy
+dGlmaWNhY2lvIChOSUYgUS0wODAxMTc2LUkpMSgwJgYDVQQLEx9TZXJ2ZWlzIFB1
+YmxpY3MgZGUgQ2VydGlmaWNhY2lvMTUwMwYDVQQLEyxWZWdldSBodHRwczovL3d3
+dy5jYXRjZXJ0Lm5ldC92ZXJhcnJlbCAoYykwMzE1MDMGA1UECxMsSmVyYXJxdWlh
+IEVudGl0YXRzIGRlIENlcnRpZmljYWNpbyBDYXRhbGFuZXMxDzANBgNVBAMTBkVD
+LUFDQzAeFw0wMzAxMDcyMzAwMDBaFw0zMTAxMDcyMjU5NTlaMIHzMQswCQYDVQQG
+EwJFUzE7MDkGA1UEChMyQWdlbmNpYSBDYXRhbGFuYSBkZSBDZXJ0aWZpY2FjaW8g
+KE5JRiBRLTA4MDExNzYtSSkxKDAmBgNVBAsTH1NlcnZlaXMgUHVibGljcyBkZSBD
+ZXJ0aWZpY2FjaW8xNTAzBgNVBAsTLFZlZ2V1IGh0dHBzOi8vd3d3LmNhdGNlcnQu
+bmV0L3ZlcmFycmVsIChjKTAzMTUwMwYDVQQLEyxKZXJhcnF1aWEgRW50aXRhdHMg
+ZGUgQ2VydGlmaWNhY2lvIENhdGFsYW5lczEPMA0GA1UEAxMGRUMtQUNDMIIBIjAN
+BgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAsyLHT+KXQpWIR4NA9h0X84NzJB5R
+85iKw5K4/0CQBXCHYMkAqbWUZRkiFRfCQ2xmRJoNBD45b6VLeqpjt4pEndljkYRm
+4CgPukLjbo73FCeTae6RDqNfDrHrZqJyTxIThmV6PttPB/SnCWDaOkKZx7J/sxaV
+HMf5NLWUhdWZXqBIoH7nF2W4onW4HvPlQn2v7fOKSGRdghST2MDk/7NQcvJ29rNd
+QlB50JQ+awwAvthrDk4q7D7SzIKiGGUzE3eeml0aE9jD2z3Il3rucO2n5nzbcc8t
+lGLfbdb1OL4/pYUKGbio2Al1QnDE6u/LDsg0qBIimAy4E5S2S+zw0JDnJwIDAQAB
+o4HjMIHgMB0GA1UdEQQWMBSBEmVjX2FjY0BjYXRjZXJ0Lm5ldDAPBgNVHRMBAf8E
+BTADAQH/MA4GA1UdDwEB/wQEAwIBBjAdBgNVHQ4EFgQUoMOLRKo3pUW/l4Ba0fF4
+opvpXY0wfwYDVR0gBHgwdjB0BgsrBgEEAfV4AQMBCjBlMCwGCCsGAQUFBwIBFiBo
+dHRwczovL3d3dy5jYXRjZXJ0Lm5ldC92ZXJhcnJlbDA1BggrBgEFBQcCAjApGidW
+ZWdldSBodHRwczovL3d3dy5jYXRjZXJ0Lm5ldC92ZXJhcnJlbCAwDQYJKoZIhvcN
+AQEFBQADggEBAKBIW4IB9k1IuDlVNZyAelOZ1Vr/sXE7zDkJlF7W2u++AVtd0x7Y
+/X1PzaBB4DSTv8vihpw3kpBWHNzrKQXlxJ7HNd+KDM3FIUPpqojlNcAZQmNaAl6k
+SBg6hW/cnbw/nZzBh7h6YQjpdwt/cKt63dmXLGQehb+8dJahw3oS7AwaboMMPOhy
+Rp/7SNVel+axofjk70YllJyJ22k4vuxcDlbHZVHlUIiIv0LVKz3l+bqeLrPK9HOS
+Agu+TGbrIP65y7WZf+a2E/rKS03Z7lNGBjvGTq2TWoF+bCpLagVFjPIhpDGQh2xl
+nJ2lYJU6Un/10asIbvPuW/mIPX64b24D5EI=
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIIEAzCCAuugAwIBAgIQVID5oHPtPwBMyonY43HmSjANBgkqhkiG9w0BAQUFADB1
+MQswCQYDVQQGEwJFRTEiMCAGA1UECgwZQVMgU2VydGlmaXRzZWVyaW1pc2tlc2t1
+czEoMCYGA1UEAwwfRUUgQ2VydGlmaWNhdGlvbiBDZW50cmUgUm9vdCBDQTEYMBYG
+CSqGSIb3DQEJARYJcGtpQHNrLmVlMCIYDzIwMTAxMDMwMTAxMDMwWhgPMjAzMDEy
+MTcyMzU5NTlaMHUxCzAJBgNVBAYTAkVFMSIwIAYDVQQKDBlBUyBTZXJ0aWZpdHNl
+ZXJpbWlza2Vza3VzMSgwJgYDVQQDDB9FRSBDZXJ0aWZpY2F0aW9uIENlbnRyZSBS
+b290IENBMRgwFgYJKoZIhvcNAQkBFglwa2lAc2suZWUwggEiMA0GCSqGSIb3DQEB
+AQUAA4IBDwAwggEKAoIBAQDIIMDs4MVLqwd4lfNE7vsLDP90jmG7sWLqI9iroWUy
+euuOF0+W2Ap7kaJjbMeMTC55v6kF/GlclY1i+blw7cNRfdCT5mzrMEvhvH2/UpvO
+bntl8jixwKIy72KyaOBhU8E2lf/slLo2rpwcpzIP5Xy0xm90/XsY6KxX7QYgSzIw
+WFv9zajmofxwvI6Sc9uXp3whrj3B9UiHbCe9nyV0gVWw93X2PaRka9ZP585ArQ/d
+MtO8ihJTmMmJ+xAdTX7Nfh9WDSFwhfYggx/2uh8Ej+p3iDXE/+pOoYtNP2MbRMNE
+1CV2yreN1x5KZmTNXMWcg+HCCIia7E6j8T4cLNlsHaFLAgMBAAGjgYowgYcwDwYD
+VR0TAQH/BAUwAwEB/zAOBgNVHQ8BAf8EBAMCAQYwHQYDVR0OBBYEFBLyWj7qVhy/
+zQas8fElyalL1BSZMEUGA1UdJQQ+MDwGCCsGAQUFBwMCBggrBgEFBQcDAQYIKwYB
+BQUHAwMGCCsGAQUFBwMEBggrBgEFBQcDCAYIKwYBBQUHAwkwDQYJKoZIhvcNAQEF
+BQADggEBAHv25MANqhlHt01Xo/6tu7Fq1Q+e2+RjxY6hUFaTlrg4wCQiZrxTFGGV
+v9DHKpY5P30osxBAIWrEr7BSdxjhlthWXePdNl4dp1BUoMUq5KqMlIpPnTX/dqQG
+E5Gion0ARD9V04I8GtVbvFZMIi5GQ4okQC3zErg7cBqklrkar4dBGmoYDQZPxz5u
+uSlNDUmJEYcyW+ZLBMjkXOZ0c5RdFpgTlf7727FE5TpwrDdr5rMzcijJs1eg9gIW
+iAYLtqZLICjU3j2LrTcFU3T+bsy8QxdxXvnFzBqpYe73dgzzcvRyrc9yAjYHR8/v
+GVCJYMzpJJUPwssd8m92kMfMdcGWxZ0=
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIIEKjCCAxKgAwIBAgIEOGPe+DANBgkqhkiG9w0BAQUFADCBtDEUMBIGA1UEChML
+RW50cnVzdC5uZXQxQDA+BgNVBAsUN3d3dy5lbnRydXN0Lm5ldC9DUFNfMjA0OCBp
+bmNvcnAuIGJ5IHJlZi4gKGxpbWl0cyBsaWFiLikxJTAjBgNVBAsTHChjKSAxOTk5
+IEVudHJ1c3QubmV0IExpbWl0ZWQxMzAxBgNVBAMTKkVudHJ1c3QubmV0IENlcnRp
+ZmljYXRpb24gQXV0aG9yaXR5ICgyMDQ4KTAeFw05OTEyMjQxNzUwNTFaFw0yOTA3
+MjQxNDE1MTJaMIG0MRQwEgYDVQQKEwtFbnRydXN0Lm5ldDFAMD4GA1UECxQ3d3d3
+LmVudHJ1c3QubmV0L0NQU18yMDQ4IGluY29ycC4gYnkgcmVmLiAobGltaXRzIGxp
+YWIuKTElMCMGA1UECxMcKGMpIDE5OTkgRW50cnVzdC5uZXQgTGltaXRlZDEzMDEG
+A1UEAxMqRW50cnVzdC5uZXQgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkgKDIwNDgp
+MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEArU1LqRKGsuqjIAcVFmQq
+K0vRvwtKTY7tgHalZ7d4QMBzQshowNtTK91euHaYNZOLGp18EzoOH1u3Hs/lJBQe
+sYGpjX24zGtLA/ECDNyrpUAkAH90lKGdCCmziAv1h3edVc3kw37XamSrhRSGlVuX
+MlBvPci6Zgzj/L24ScF2iUkZ/cCovYmjZy/Gn7xxGWC4LeksyZB2ZnuU4q941mVT
+XTzWnLLPKQP5L6RQstRIzgUyVYr9smRMDuSYB3Xbf9+5CFVghTAp+XtIpGmG4zU/
+HoZdenoVve8AjhUiVBcAkCaTvA5JaJG/+EfTnZVCwQ5N328mz8MYIWJmQ3DW1cAH
+4QIDAQABo0IwQDAOBgNVHQ8BAf8EBAMCAQYwDwYDVR0TAQH/BAUwAwEB/zAdBgNV
+HQ4EFgQUVeSB0RGAvtiJuQijMfmhJAkWuXAwDQYJKoZIhvcNAQEFBQADggEBADub
+j1abMOdTmXx6eadNl9cZlZD7Bh/KM3xGY4+WZiT6QBshJ8rmcnPyT/4xmf3IDExo
+U8aAghOY+rat2l098c5u9hURlIIM7j+VrxGrD9cv3h8Dj1csHsm7mhpElesYT6Yf
+zX1XEC+bBAlahLVu2B064dae0Wx5XnkcFMXj0EyTO2U87d89vqbllRrDtRnDvV5b
+u/8j72gZyxKTJ1wDLW8w0B62GqzeWvfRqqgnpv55gcR5mTNXuhKwqeBCbJPKVt7+
+bYQLCIt+jerXmCHG8+c8eS9enNFMFY3h7CI3zJpDC5fcgJCNs2ebb0gIFVbPv/Er
+fF6adulZkMV8gzURZVE=
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIIEkTCCA3mgAwIBAgIERWtQVDANBgkqhkiG9w0BAQUFADCBsDELMAkGA1UEBhMC
+VVMxFjAUBgNVBAoTDUVudHJ1c3QsIEluYy4xOTA3BgNVBAsTMHd3dy5lbnRydXN0
+Lm5ldC9DUFMgaXMgaW5jb3Jwb3JhdGVkIGJ5IHJlZmVyZW5jZTEfMB0GA1UECxMW
+KGMpIDIwMDYgRW50cnVzdCwgSW5jLjEtMCsGA1UEAxMkRW50cnVzdCBSb290IENl
+cnRpZmljYXRpb24gQXV0aG9yaXR5MB4XDTA2MTEyNzIwMjM0MloXDTI2MTEyNzIw
+NTM0MlowgbAxCzAJBgNVBAYTAlVTMRYwFAYDVQQKEw1FbnRydXN0LCBJbmMuMTkw
+NwYDVQQLEzB3d3cuZW50cnVzdC5uZXQvQ1BTIGlzIGluY29ycG9yYXRlZCBieSBy
+ZWZlcmVuY2UxHzAdBgNVBAsTFihjKSAyMDA2IEVudHJ1c3QsIEluYy4xLTArBgNV
+BAMTJEVudHJ1c3QgUm9vdCBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eTCCASIwDQYJ
+KoZIhvcNAQEBBQADggEPADCCAQoCggEBALaVtkNC+sZtKm9I35RMOVcF7sN5EUFo
+Nu3s/poBj6E4KPz3EEZmLk0eGrEaTsbRwJWIsMn/MYszA9u3g3s+IIRe7bJWKKf4
+4LlAcTfFy0cOlypowCKVYhXbR9n10Cv/gkvJrT7eTNuQgFA/CYqEAOwwCj0Yzfv9
+KlmaI5UXLEWeH25DeW0MXJj+SKfFI0dcXv1u5x609mhF0YaDW6KKjbHjKYD+JXGI
+rb68j6xSlkuqUY3kEzEZ6E5Nn9uss2rVvDlUccp6en+Q3X0dgNmBu1kmwhH+5pPi
+94DkZfs0Nw4pgHBNrziGLp5/V6+eF67rHMsoIV+2HNjnogQi+dPa2MsCAwEAAaOB
+sDCBrTAOBgNVHQ8BAf8EBAMCAQYwDwYDVR0TAQH/BAUwAwEB/zArBgNVHRAEJDAi
+gA8yMDA2MTEyNzIwMjM0MlqBDzIwMjYxMTI3MjA1MzQyWjAfBgNVHSMEGDAWgBRo
+kORnpKZTgMeGZqTx90tD+4S9bTAdBgNVHQ4EFgQUaJDkZ6SmU4DHhmak8fdLQ/uE
+vW0wHQYJKoZIhvZ9B0EABBAwDhsIVjcuMTo0LjADAgSQMA0GCSqGSIb3DQEBBQUA
+A4IBAQCT1DCw1wMgKtD5Y+iRDAUgqV8ZyntyTtSx29CW+1RaGSwMCPeyvIWonX9t
+O1KzKtvn1ISMY/YPyyYBkVBs9F8U4pN0wBOeMDpQ47RgxRzwIkSNcUesyBrJ6Zua
+AGAT/3B+XxFNSRuzFVJ7yVTav52Vr2ua2J7p8eRDjeIRRDq/r72DQnNSi6q7pynP
+9WQcCk3RvKqsnyrQ/39/2n3qse0wJcGE2jTSW3iDVuycNsMm4hH2Z0kdkquM++v/
+eu6FSqdQgPCnXEqULl8FmTxSQeDNtGPPAUO6nIPcj2A781q0tHuu2guQOHXvgR1m
+0vdXcDazv/wor3ElhVsT/h5/WrQ8
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIIC+TCCAoCgAwIBAgINAKaLeSkAAAAAUNCR+TAKBggqhkjOPQQDAzCBvzELMAkG
+A1UEBhMCVVMxFjAUBgNVBAoTDUVudHJ1c3QsIEluYy4xKDAmBgNVBAsTH1NlZSB3
+d3cuZW50cnVzdC5uZXQvbGVnYWwtdGVybXMxOTA3BgNVBAsTMChjKSAyMDEyIEVu
+dHJ1c3QsIEluYy4gLSBmb3IgYXV0aG9yaXplZCB1c2Ugb25seTEzMDEGA1UEAxMq
+RW50cnVzdCBSb290IENlcnRpZmljYXRpb24gQXV0aG9yaXR5IC0gRUMxMB4XDTEy
+MTIxODE1MjUzNloXDTM3MTIxODE1NTUzNlowgb8xCzAJBgNVBAYTAlVTMRYwFAYD
+VQQKEw1FbnRydXN0LCBJbmMuMSgwJgYDVQQLEx9TZWUgd3d3LmVudHJ1c3QubmV0
+L2xlZ2FsLXRlcm1zMTkwNwYDVQQLEzAoYykgMjAxMiBFbnRydXN0LCBJbmMuIC0g
+Zm9yIGF1dGhvcml6ZWQgdXNlIG9ubHkxMzAxBgNVBAMTKkVudHJ1c3QgUm9vdCBD
+ZXJ0aWZpY2F0aW9uIEF1dGhvcml0eSAtIEVDMTB2MBAGByqGSM49AgEGBSuBBAAi
+A2IABIQTydC6bUF74mzQ61VfZgIaJPRbiWlH47jCffHyAsWfoPZb1YsGGYZPUxBt
+ByQnoaD41UcZYUx9ypMn6nQM72+WCf5j7HBdNq1nd67JnXxVRDqiY1Ef9eNi1KlH
+Bz7MIKNCMEAwDgYDVR0PAQH/BAQDAgEGMA8GA1UdEwEB/wQFMAMBAf8wHQYDVR0O
+BBYEFLdj5xrdjekIplWDpOBqUEFlEUJJMAoGCCqGSM49BAMDA2cAMGQCMGF52OVC
+R98crlOZF7ZvHH3hvxGU0QOIdeSNiaSKd0bebWHvAvX7td/M/k7//qnmpwIwW5nX
+hTcGtXsI/esni0qU+eH6p44mCOh8kmhtc9hvJqwhAriZtyZBWyVgrtBIGu4G
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIIEPjCCAyagAwIBAgIESlOMKDANBgkqhkiG9w0BAQsFADCBvjELMAkGA1UEBhMC
+VVMxFjAUBgNVBAoTDUVudHJ1c3QsIEluYy4xKDAmBgNVBAsTH1NlZSB3d3cuZW50
+cnVzdC5uZXQvbGVnYWwtdGVybXMxOTA3BgNVBAsTMChjKSAyMDA5IEVudHJ1c3Qs
+IEluYy4gLSBmb3IgYXV0aG9yaXplZCB1c2Ugb25seTEyMDAGA1UEAxMpRW50cnVz
+dCBSb290IENlcnRpZmljYXRpb24gQXV0aG9yaXR5IC0gRzIwHhcNMDkwNzA3MTcy
+NTU0WhcNMzAxMjA3MTc1NTU0WjCBvjELMAkGA1UEBhMCVVMxFjAUBgNVBAoTDUVu
+dHJ1c3QsIEluYy4xKDAmBgNVBAsTH1NlZSB3d3cuZW50cnVzdC5uZXQvbGVnYWwt
+dGVybXMxOTA3BgNVBAsTMChjKSAyMDA5IEVudHJ1c3QsIEluYy4gLSBmb3IgYXV0
+aG9yaXplZCB1c2Ugb25seTEyMDAGA1UEAxMpRW50cnVzdCBSb290IENlcnRpZmlj
+YXRpb24gQXV0aG9yaXR5IC0gRzIwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEK
+AoIBAQC6hLZy254Ma+KZ6TABp3bqMriVQRrJ2mFOWHLP/vaCeb9zYQYKpSfYs1/T
+RU4cctZOMvJyig/3gxnQaoCAAEUesMfnmr8SVycco2gvCoe9amsOXmXzHHfV1IWN
+cCG0szLni6LVhjkCsbjSR87kyUnEO6fe+1R9V77w6G7CebI6C1XiUJgWMhNcL3hW
+wcKUs/Ja5CeanyTXxuzQmyWC48zCxEXFjJd6BmsqEZ+pCm5IO2/b1BEZQvePB7/1
+U1+cPvQXLOZprE4yTGJ36rfo5bs0vBmLrpxR57d+tVOxMyLlbc9wPBr64ptntoP0
+jaWvYkxN4FisZDQSA/i2jZRjJKRxAgMBAAGjQjBAMA4GA1UdDwEB/wQEAwIBBjAP
+BgNVHRMBAf8EBTADAQH/MB0GA1UdDgQWBBRqciZ60B7vfec7aVHUbI2fkBJmqzAN
+BgkqhkiG9w0BAQsFAAOCAQEAeZ8dlsa2eT8ijYfThwMEYGprmi5ZiXMRrEPR9RP/
+jTkrwPK9T3CMqS/qF8QLVJ7UG5aYMzyorWKiAHarWWluBh1+xLlEjZivEtRh2woZ
+Rkfz6/djwUAFQKXSt/S1mja/qYh2iARVBCuch38aNzx+LaUa2NSJXsq9rD1s2G2v
+1fN2D807iDginWyTmsQ9v4IbZT+mD12q/OWyFcq1rca8PdCE6OoGcrBNOTJ4vz4R
+nAuknZoh8/CbCzB428Hch0P+vGOaysXCHMnHjf87ElgI5rY97HosTvuDls4MPGmH
+VHOkc8KT/1EQrBVUAdj8BbGJoX90g5pJ19xOe4pIb4tF9g==
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIIDVDCCAjygAwIBAgIDAjRWMA0GCSqGSIb3DQEBBQUAMEIxCzAJBgNVBAYTAlVT
+MRYwFAYDVQQKEw1HZW9UcnVzdCBJbmMuMRswGQYDVQQDExJHZW9UcnVzdCBHbG9i
+YWwgQ0EwHhcNMDIwNTIxMDQwMDAwWhcNMjIwNTIxMDQwMDAwWjBCMQswCQYDVQQG
+EwJVUzEWMBQGA1UEChMNR2VvVHJ1c3QgSW5jLjEbMBkGA1UEAxMSR2VvVHJ1c3Qg
+R2xvYmFsIENBMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA2swYYzD9
+9BcjGlZ+W988bDjkcbd4kdS8odhM+KhDtgPpTSEHCIjaWC9mOSm9BXiLnTjoBbdq
+fnGk5sRgprDvgOSJKA+eJdbtg/OtppHHmMlCGDUUna2YRpIuT8rxh0PBFpVXLVDv
+iS2Aelet8u5fa9IAjbkU+BQVNdnARqN7csiRv8lVK83Qlz6cJmTM386DGXHKTubU
+1XupGc1V3sjs0l44U+VcT4wt/lAjNvxm5suOpDkZALeVAjmRCw7+OC7RHQWa9k0+
+bw8HHa8sHo9gOeL6NlMTOdReJivbPagUvTLrGAMoUgRx5aszPeE4uwc2hGKceeoW
+MPRfwCvocWvk+QIDAQABo1MwUTAPBgNVHRMBAf8EBTADAQH/MB0GA1UdDgQWBBTA
+ephojYn7qwVkDBF9qn1luMrMTjAfBgNVHSMEGDAWgBTAephojYn7qwVkDBF9qn1l
+uMrMTjANBgkqhkiG9w0BAQUFAAOCAQEANeMpauUvXVSOKVCUn5kaFOSPeCpilKIn
+Z57QzxpeR+nBsqTP3UEaBU6bS+5Kb1VSsyShNwrrZHYqLizz/Tt1kL/6cdjHPTfS
+tQWVYrmm3ok9Nns4d0iXrKYgjy6myQzCsplFAMfOEVEiIuCl6rYVSAlk6l5PdPcF
+PseKUgzbFbS9bZvlxrFUaKnjaZC2mqUPuLk/IH2uSrW4nOQdtqvmlKXBx4Ot2/Un
+hw4EbNX/3aBd7YdStysVAq45pmp06drE57xNNB6pXE0zX5IJL4hmXXeXxx12E6nV
+5fEWCRE11azbJHFwLJhWC9kXtNHjUStedejV0NxPNO3CBWaAocvmMw==
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIIDZjCCAk6gAwIBAgIBATANBgkqhkiG9w0BAQUFADBEMQswCQYDVQQGEwJVUzEW
+MBQGA1UEChMNR2VvVHJ1c3QgSW5jLjEdMBsGA1UEAxMUR2VvVHJ1c3QgR2xvYmFs
+IENBIDIwHhcNMDQwMzA0MDUwMDAwWhcNMTkwMzA0MDUwMDAwWjBEMQswCQYDVQQG
+EwJVUzEWMBQGA1UEChMNR2VvVHJ1c3QgSW5jLjEdMBsGA1UEAxMUR2VvVHJ1c3Qg
+R2xvYmFsIENBIDIwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDvPE1A
+PRDfO1MA4Wf+lGAVPoWI8YkNkMgoI5kF6CsgncbzYEbYwbLVjDHZ3CB5JIG/NTL8
+Y2nbsSpr7iFY8gjpeMtvy/wWUsiRxP89c96xPqfCfWbB9X5SJBri1WeR0IIQ13hL
+TytCOb1kLUCgsBDTOEhGiKEMuzozKmKY+wCdE1l/bztyqu6mD4b5BWHqZ38MN5aL
+5mkWRxHCJ1kDs6ZgwiFAVvqgx306E+PsV8ez1q6diYD3Aecs9pYrEw15LNnA5IZ7
+S4wMcoKK+xfNAGw6EzywhIdLFnopsk/bHdQL82Y3vdj2V7teJHq4PIu5+pIaGoSe
+2HSPqht/XvT+RSIhAgMBAAGjYzBhMA8GA1UdEwEB/wQFMAMBAf8wHQYDVR0OBBYE
+FHE4NvICMVNHK266ZUapEBVYIAUJMB8GA1UdIwQYMBaAFHE4NvICMVNHK266ZUap
+EBVYIAUJMA4GA1UdDwEB/wQEAwIBhjANBgkqhkiG9w0BAQUFAAOCAQEAA/e1K6td
+EPx7srJerJsOflN4WT5CBP51o62sgU7XAotexC3IUnbHLB/8gTKY0UvGkpMzNTEv
+/NgdRN3ggX+d6YvhZJFiCzkIjKx0nVnZellSlxG5FntvRdOW2TF9AjYPnDtuzywN
+A0ZF66D0f0hExghAzN4bcLUprbqLOzRldRtxIR0sFAqwlpW41uryZfspuk/qkZN0
+abby/+Ea0AzRdoXLiiW9l14sbxWZJue2Kf8i7MkCx1YAzUm5s2x7UwQa4qjJqhIF
+I8LO57sEAszAR6LkxCkvW0VXiVHuPOtSCP8HNR6fNWpHSlaY0VqFH4z1Ir+rzoPz
+4iIprn2DQKi6bA==
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIIDfDCCAmSgAwIBAgIQGKy1av1pthU6Y2yv2vrEoTANBgkqhkiG9w0BAQUFADBY
+MQswCQYDVQQGEwJVUzEWMBQGA1UEChMNR2VvVHJ1c3QgSW5jLjExMC8GA1UEAxMo
+R2VvVHJ1c3QgUHJpbWFyeSBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eTAeFw0wNjEx
+MjcwMDAwMDBaFw0zNjA3MTYyMzU5NTlaMFgxCzAJBgNVBAYTAlVTMRYwFAYDVQQK
+Ew1HZW9UcnVzdCBJbmMuMTEwLwYDVQQDEyhHZW9UcnVzdCBQcmltYXJ5IENlcnRp
+ZmljYXRpb24gQXV0aG9yaXR5MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKC
+AQEAvrgVe//UfH1nrYNke8hCUy3f9oQIIGHWAVlqnEQRr+92/ZV+zmEwu3qDXwK9
+AWbK7hWNb6EwnL2hhZ6UOvNWiAAxz9juapYC2e0DjPt1befquFUWBRaa9OBesYjA
+ZIVcFU2Ix7e64HXprQU9nceJSOC7KMgD4TCTZF5SwFlwIjVXiIrxlQqD17wxcwE0
+7e9GceBrAqg1cmuXm2bgyxx5X9gaBGgeRwLmnWDiNpcB3841kt++Z8dtd1k7j53W
+kBWUvEI0EME5+bEnPn7WinXFsq+W06Lem+SYvn3h6YGttm/81w7a4DSwDRp35+MI
+mO9Y+pyEtzavwt+s0vQQBnBxNQIDAQABo0IwQDAPBgNVHRMBAf8EBTADAQH/MA4G
+A1UdDwEB/wQEAwIBBjAdBgNVHQ4EFgQULNVQQZcVi/CPNmFbSvtr2ZnJM5IwDQYJ
+KoZIhvcNAQEFBQADggEBAFpwfyzdtzRP9YZRqSa+S7iq8XEN3GHHoOo0Hnp3DwQ1
+6CePbJC/kRYkRj5KTs4rFtULUh38H2eiAkUxT87z+gOneZ1TatnaYzr4gNfTmeGl
+4b7UVXGYNTq+k+qurUKykG/g/CFNNWMziUnWm07Kx+dOCQD32sfvmWKZd7aVIl6K
+oKv0uHiYyjgZmclynnjNS6yvGaBzEi38wkG6gZHaFloxt/m0cYASSJlyc1pZU8Fj
+UjPtp8nSOQJw+uCxQmYpqptR7TBUIhRf2asdweSU8Pj1K/fqynhG1riR/aYNKxoU
+AT6A8EKglQdebc3MS6RFjasS6LPeWuWgfOgPIh1a6Vk=
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIICrjCCAjWgAwIBAgIQPLL0SAoA4v7rJDteYD7DazAKBggqhkjOPQQDAzCBmDEL
+MAkGA1UEBhMCVVMxFjAUBgNVBAoTDUdlb1RydXN0IEluYy4xOTA3BgNVBAsTMChj
+KSAyMDA3IEdlb1RydXN0IEluYy4gLSBGb3IgYXV0aG9yaXplZCB1c2Ugb25seTE2
+MDQGA1UEAxMtR2VvVHJ1c3QgUHJpbWFyeSBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0
+eSAtIEcyMB4XDTA3MTEwNTAwMDAwMFoXDTM4MDExODIzNTk1OVowgZgxCzAJBgNV
+BAYTAlVTMRYwFAYDVQQKEw1HZW9UcnVzdCBJbmMuMTkwNwYDVQQLEzAoYykgMjAw
+NyBHZW9UcnVzdCBJbmMuIC0gRm9yIGF1dGhvcml6ZWQgdXNlIG9ubHkxNjA0BgNV
+BAMTLUdlb1RydXN0IFByaW1hcnkgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkgLSBH
+MjB2MBAGByqGSM49AgEGBSuBBAAiA2IABBWx6P0DFUPlrOuHNxFi79KDNlJ9RVcL
+So17VDs6bl8VAsBQps8lL33KSLjHUGMcKiEIfJo22Av+0SbFWDEwKCXzXV2juLal
+tJLtbCyf691DiaI8S0iRHVDsJt/WYC69IaNCMEAwDwYDVR0TAQH/BAUwAwEB/zAO
+BgNVHQ8BAf8EBAMCAQYwHQYDVR0OBBYEFBVfNVdRVfslsq0DafwBo/q+EVXVMAoG
+CCqGSM49BAMDA2cAMGQCMGSWWaboCd6LuvpaiIjwH5HTRqjySkwCY/tsXzjbLkGT
+qQ7mndwxHLKgpxgceeHHNgIwOlavmnRs9vuD4DPTCF+hnMJbn0bWtsuRBmOiBucz
+rD6ogRLQy7rQkgu2npaqBA+K
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIID/jCCAuagAwIBAgIQFaxulBmyeUtB9iepwxgPHzANBgkqhkiG9w0BAQsFADCB
+mDELMAkGA1UEBhMCVVMxFjAUBgNVBAoTDUdlb1RydXN0IEluYy4xOTA3BgNVBAsT
+MChjKSAyMDA4IEdlb1RydXN0IEluYy4gLSBGb3IgYXV0aG9yaXplZCB1c2Ugb25s
+eTE2MDQGA1UEAxMtR2VvVHJ1c3QgUHJpbWFyeSBDZXJ0aWZpY2F0aW9uIEF1dGhv
+cml0eSAtIEczMB4XDTA4MDQwMjAwMDAwMFoXDTM3MTIwMTIzNTk1OVowgZgxCzAJ
+BgNVBAYTAlVTMRYwFAYDVQQKEw1HZW9UcnVzdCBJbmMuMTkwNwYDVQQLEzAoYykg
+MjAwOCBHZW9UcnVzdCBJbmMuIC0gRm9yIGF1dGhvcml6ZWQgdXNlIG9ubHkxNjA0
+BgNVBAMTLUdlb1RydXN0IFByaW1hcnkgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkg
+LSBHMzCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBANziXmJYHTNXOTIz
++uvLh4yn1ErdBojqZI4xmKU4kB6Yzy5jK/BGvESyiaHAKAxJcCGVn2TAppMSAmUm
+hsalifD614SgcK9PGpc/BkTVyetyEH3kMSj7HGHmKAdEc5IiaacDiGydY8hS2pgn
+5whMcD60yRLBxWeDXTPzAxHsatBT4tG6NmCUgLthY2xbF37fQJQeqw3CIShwiP/W
+JmxsYAQlTlV+fe+/lEjetx3dcI0FX4ilm/LC7urRQEFtYjgdVgbFA0dRIBn8exAL
+DmKudlW/X3e+PkkBUz2YJQN2JFodtNuJ6nnltrM7P7pMKEF/BqxqjsHQ9gUdfeZC
+huOl1UcCAwEAAaNCMEAwDwYDVR0TAQH/BAUwAwEB/zAOBgNVHQ8BAf8EBAMCAQYw
+HQYDVR0OBBYEFMR5yo6hTgMdHNxr2zFblD4/MH8tMA0GCSqGSIb3DQEBCwUAA4IB
+AQAtxRPPVoB7eni9n64smefv2t+UXglpp+duaIy9cr5HqQ6XErhK8WTTOd8lNNTB
+zU6B8A8ExCSzNJbGpqow32hhc9f5joWJ7w5elShKKiePEI4ufIbEAp7aDHdlDkQN
+kv39sxY2+hENHYwOB4lqKVb3cvTdFZx3NWZXqxNT2I7BQMXXExZacse3aQHEerGD
+AWh9jUGhlBjBJVz88P6DAod8DQ3PLghcSkANPuyBYeYk28rgDi0Hsj5W3I31QYUH
+SJsMC8tJP33st/3LjWeJGqvtux6jAAgIFyqCXDFdRootD4abdNlF+9RAsXqqaC2G
+spki4cErx5z481+oghLrGREt
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIIFaDCCA1CgAwIBAgIBATANBgkqhkiG9w0BAQUFADBFMQswCQYDVQQGEwJVUzEW
+MBQGA1UEChMNR2VvVHJ1c3QgSW5jLjEeMBwGA1UEAxMVR2VvVHJ1c3QgVW5pdmVy
+c2FsIENBMB4XDTA0MDMwNDA1MDAwMFoXDTI5MDMwNDA1MDAwMFowRTELMAkGA1UE
+BhMCVVMxFjAUBgNVBAoTDUdlb1RydXN0IEluYy4xHjAcBgNVBAMTFUdlb1RydXN0
+IFVuaXZlcnNhbCBDQTCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIBAKYV
+VaCjxuAfjJ0hUNfBvitbtaSeodlyWL0AG0y/YckUHUWCq8YdgNY96xCcOq9tJPi8
+cQGeBvV8Xx7BDlXKg5pZMK4ZyzBIle0iN430SppyZj6tlcDgFgDgEB8rMQ7XlFTT
+QjOgNB0eRXbdT8oYN+yFFXoZCPzVx5zw8qkuEKmS5j1YPakWaDwvdSEYfyh3peFh
+F7em6fgemdtzbvQKoiFs7tqqhZJmr/Z6a4LauiIINQ/PQvE1+mrufislzDoR5G2v
+c7J2Ha3QsnhnGqQ5HFELZ1aD/ThdDc7d8Lsrlh/eezJS/R27tQahsiFepdaVaH/w
+mZ7cRQg+59IJDTWU3YBOU5fXtQlEIGQWFwMCTFMNaN7VqnJNk22CDtucvc+081xd
+VHppCZbW2xHBjXWotM85yM48vCR85mLK4b19p71XZQvk/iXttmkQ3CgaRr0BHdCX
+teGYO8A3ZNY9lO4L4fUorgtWv3GLIylBjobFS1J72HGrH4oVpjuDWtdYAVHGTEHZ
+f9hBZ3KiKN9gg6meyHv8U3NyWfWTehd2Ds735VzZC1U0oqpbtWpU5xPKV+yXbfRe
+Bi9Fi1jUIxaS5BZuKGNZMN9QAZxjiRqf2xeUgnA3wySemkfWWspOqGmJch+RbNt+
+nhutxx9z3SxPGWX9f5NAEC7S8O08ni4oPmkmM8V7AgMBAAGjYzBhMA8GA1UdEwEB
+/wQFMAMBAf8wHQYDVR0OBBYEFNq7LqqwDLiIJlF0XG0D08DYj3rWMB8GA1UdIwQY
+MBaAFNq7LqqwDLiIJlF0XG0D08DYj3rWMA4GA1UdDwEB/wQEAwIBhjANBgkqhkiG
+9w0BAQUFAAOCAgEAMXjmx7XfuJRAyXHEqDXsRh3ChfMoWIawC/yOsjmPRFWrZIRc
+aanQmjg8+uUfNeVE44B5lGiku8SfPeE0zTBGi1QrlaXv9z+ZhP015s8xxtxqv6fX
+IwjhmF7DWgh2qaavdy+3YL1ERmrvl/9zlcGO6JP7/TG37FcREUWbMPEaiDnBTzyn
+ANXH/KttgCJwpQzgXQQpAvvLoJHRfNbDflDVnVi+QTjruXU8FdmbyUqDWcDaU/0z
+uzYYm4UPFd3uLax2k7nZAY1IEKj79TiG8dsKxr2EoyNB3tZ3b4XUhRxQ4K5RirqN
+Pnbiucon8l+f725ZDQbYKxek0nxru18UGkiPGkzns0ccjkxFKyDuSN/n3QmOGKja
+QI2SJhFTYXNd673nxE0pN2HrrDktZy4W1vUAg4WhzH92xH3kt0tm7wNFYGm2DFKW
+koRepqO1pD4r2czYG0eq8kTaT/kD6PAUyz/zg97QwVTjt+gKN02LIFkDMBmhLMi9
+ER/frslKxfMnZmaGrGiR/9nmUxwPi1xpZQomyB40w11Re9epnAahNt3ViZS82eQt
+DF4JbAiXfKM9fJP/P6EUp8+1Xevb2xzEdt+Iub1FBZUbrvxGakyvSOPOrg/Sfuvm
+bJxPgWp6ZKy7PtXny3YuxadIwVyQD8vIP/rmMuGNG2+k5o7Y+SlIis5z/iw=
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIIFbDCCA1SgAwIBAgIBATANBgkqhkiG9w0BAQUFADBHMQswCQYDVQQGEwJVUzEW
+MBQGA1UEChMNR2VvVHJ1c3QgSW5jLjEgMB4GA1UEAxMXR2VvVHJ1c3QgVW5pdmVy
+c2FsIENBIDIwHhcNMDQwMzA0MDUwMDAwWhcNMjkwMzA0MDUwMDAwWjBHMQswCQYD
+VQQGEwJVUzEWMBQGA1UEChMNR2VvVHJ1c3QgSW5jLjEgMB4GA1UEAxMXR2VvVHJ1
+c3QgVW5pdmVyc2FsIENBIDIwggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoIC
+AQCzVFLByT7y2dyxUxpZKeexw0Uo5dfR7cXFS6GqdHtXr0om/Nj1XqduGdt0DE81
+WzILAePb63p3NeqqWuDW6KFXlPCQo3RWlEQwAx5cTiuFJnSCegx2oG9NzkEtoBUG
+FF+3Qs17j1hhNNwqCPkuwwGmIkQcTAeC5lvO0Ep8BNMZcyfwqph/Lq9O64ceJHdq
+XbboW0W63MOhBW9Wjo8QJqVJwy7XQYci4E+GymC16qFjwAGXEHm9ADwSbSsVsaxL
+se4YuU6W3Nx2/zu+z18DwPw76L5GG//aQMJS9/7jOvdqdzXQ2o3rXhhqMcceujwb
+KNZrVMaqW9eiLBsZzKIC9ptZvTdrhrVtgrrY6slWvKk2WP0+GfPtDCapkzj4T8Fd
+IgbQl+rhrcZV4IErKIM6+vR7IVEAvlI4zs1meaj0gVbi0IMJR1FbUGrP20gaXT73
+y/Zl92zxlfgCOzJWgjl6W70viRu/obTo/3+NjN8D8WBOWBFM66M/ECuDmgFz2ZRt
+hAAnZqzwcEAJQpKtT5MNYQlRJNiS1QuUYbKHsu3/mjX/hVTK7URDrBs8FmtISgoc
+QIgfksILAAX/8sgCSqSqqcyZlpwvWOB94b67B9xfBHJcMTTD7F8t4D1kkCLm0ey4
+Lt1ZrtmhN79UNdxzMk+MBB4zsslG8dhcyFVQyWi9qLo2CQIDAQABo2MwYTAPBgNV
+HRMBAf8EBTADAQH/MB0GA1UdDgQWBBR281Xh+qQ2+/CfXGJx7Tz0RzgQKzAfBgNV
+HSMEGDAWgBR281Xh+qQ2+/CfXGJx7Tz0RzgQKzAOBgNVHQ8BAf8EBAMCAYYwDQYJ
+KoZIhvcNAQEFBQADggIBAGbBxiPz2eAubl/oz66wsCVNK/g7WJtAJDday6sWSf+z
+dXkzoS9tcBc0kf5nfo/sm+VegqlVHy/c1FEHEv6sFj4sNcZj/NwQ6w2jqtB8zNHQ
+L1EuxBRa3ugZ4T7GzKQp5y6EqgYweHZUcyiYWTjgAA1i00J9IZ+uPTqM1fp3DRgr
+Fg5fNuH8KrUwJM/gYwx7WBr+mbpCErGR9Hxo4sjoryzqyX6uuyo9DRXcNJW2GHSo
+ag/HtPQTxORb7QrSpJdMKu0vbBKJPfEncKpqA1Ihn0CoZ1Dy81of398j9tx4TuaY
+T1U6U+Pv8vSfx3zYWK8pIpe44L2RLrB27FcRz+8pRPPphXpgY+RdM4kX2TGq2tbz
+GDVyz4crL2MjhF2EjD9XoIj8mZEoJmmZ1I+XRL6O1UixpCgp8RW04eWe3fiPpm8m
+1wk8OhwRDqZsN/etRIcsKMfYdIKz0G9KV7s1KSegi+ghp4dkNl3M2Basx7InQJJV
+OCiNUW7dFGdTbHFcJoRNdVq2fmBWqU2t+5sel/MN2dKXVHfaPRK34B7vCAas+YWH
+6aLcr34YEoP9VhdBLtUpgn2Z9DH2canPLAEnpQW5qrJITirvn5NSUZU8UnOOVkwX
+QMAJKOSLakhT2+zNVVXxxvjpoixMptEmX36vWkzaH6byHCx+rgIW0lbQL1dTR+iS
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIIB4TCCAYegAwIBAgIRKjikHJYKBN5CsiilC+g0mAIwCgYIKoZIzj0EAwIwUDEk
+MCIGA1UECxMbR2xvYmFsU2lnbiBFQ0MgUm9vdCBDQSAtIFI0MRMwEQYDVQQKEwpH
+bG9iYWxTaWduMRMwEQYDVQQDEwpHbG9iYWxTaWduMB4XDTEyMTExMzAwMDAwMFoX
+DTM4MDExOTAzMTQwN1owUDEkMCIGA1UECxMbR2xvYmFsU2lnbiBFQ0MgUm9vdCBD
+QSAtIFI0MRMwEQYDVQQKEwpHbG9iYWxTaWduMRMwEQYDVQQDEwpHbG9iYWxTaWdu
+MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEuMZ5049sJQ6fLjkZHAOkrprlOQcJ
+FspjsbmG+IpXwVfOQvpzofdlQv8ewQCybnMO/8ch5RikqtlxP6jUuc6MHaNCMEAw
+DgYDVR0PAQH/BAQDAgEGMA8GA1UdEwEB/wQFMAMBAf8wHQYDVR0OBBYEFFSwe61F
+uOJAf/sKbvu+M8k8o4TVMAoGCCqGSM49BAMCA0gAMEUCIQDckqGgE6bPA7DmxCGX
+kPoUVy0D7O48027KqGx2vKLeuwIgJ6iFJzWbVsaj8kfSt24bAgAXqmemFZHe+pTs
+ewv4n4Q=
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIICHjCCAaSgAwIBAgIRYFlJ4CYuu1X5CneKcflK2GwwCgYIKoZIzj0EAwMwUDEk
+MCIGA1UECxMbR2xvYmFsU2lnbiBFQ0MgUm9vdCBDQSAtIFI1MRMwEQYDVQQKEwpH
+bG9iYWxTaWduMRMwEQYDVQQDEwpHbG9iYWxTaWduMB4XDTEyMTExMzAwMDAwMFoX
+DTM4MDExOTAzMTQwN1owUDEkMCIGA1UECxMbR2xvYmFsU2lnbiBFQ0MgUm9vdCBD
+QSAtIFI1MRMwEQYDVQQKEwpHbG9iYWxTaWduMRMwEQYDVQQDEwpHbG9iYWxTaWdu
+MHYwEAYHKoZIzj0CAQYFK4EEACIDYgAER0UOlvt9Xb/pOdEh+J8LttV7HpI6SFkc
+8GIxLcB6KP4ap1yztsyX50XUWPrRd21DosCHZTQKH3rd6zwzocWdTaRvQZU4f8ke
+hOvRnkmSh5SHDDqFSmafnVmTTZdhBoZKo0IwQDAOBgNVHQ8BAf8EBAMCAQYwDwYD
+VR0TAQH/BAUwAwEB/zAdBgNVHQ4EFgQUPeYpSJvqB8ohREom3m7e0oPQn1kwCgYI
+KoZIzj0EAwMDaAAwZQIxAOVpEslu28YxuglB4Zf4+/2a4n0Sye18ZNPLBSWLVtmg
+515dTguDnFt2KaAJJiFqYgIwcdK1j1zqO+F4CYWodZI7yFz9SO8NdCKoCOJuxUnO
+xwy8p2Fp8fc74SrL+SvzZpA3
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIIDdTCCAl2gAwIBAgILBAAAAAABFUtaw5QwDQYJKoZIhvcNAQEFBQAwVzELMAkG
+A1UEBhMCQkUxGTAXBgNVBAoTEEdsb2JhbFNpZ24gbnYtc2ExEDAOBgNVBAsTB1Jv
+b3QgQ0ExGzAZBgNVBAMTEkdsb2JhbFNpZ24gUm9vdCBDQTAeFw05ODA5MDExMjAw
+MDBaFw0yODAxMjgxMjAwMDBaMFcxCzAJBgNVBAYTAkJFMRkwFwYDVQQKExBHbG9i
+YWxTaWduIG52LXNhMRAwDgYDVQQLEwdSb290IENBMRswGQYDVQQDExJHbG9iYWxT
+aWduIFJvb3QgQ0EwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDaDuaZ
+jc6j40+Kfvvxi4Mla+pIH/EqsLmVEQS98GPR4mdmzxzdzxtIK+6NiY6arymAZavp
+xy0Sy6scTHAHoT0KMM0VjU/43dSMUBUc71DuxC73/OlS8pF94G3VNTCOXkNz8kHp
+1Wrjsok6Vjk4bwY8iGlbKk3Fp1S4bInMm/k8yuX9ifUSPJJ4ltbcdG6TRGHRjcdG
+snUOhugZitVtbNV4FpWi6cgKOOvyJBNPc1STE4U6G7weNLWLBYy5d4ux2x8gkasJ
+U26Qzns3dLlwR5EiUWMWea6xrkEmCMgZK9FGqkjWZCrXgzT/LCrBbBlDSgeF59N8
+9iFo7+ryUp9/k5DPAgMBAAGjQjBAMA4GA1UdDwEB/wQEAwIBBjAPBgNVHRMBAf8E
+BTADAQH/MB0GA1UdDgQWBBRge2YaRQ2XyolQL30EzTSo//z9SzANBgkqhkiG9w0B
+AQUFAAOCAQEA1nPnfE920I2/7LqivjTFKDK1fPxsnCwrvQmeU79rXqoRSLblCKOz
+yj1hTdNGCbM+w6DjY1Ub8rrvrTnhQ7k4o+YviiY776BQVvnGCv04zcQLcFGUl5gE
+38NflNUVyRRBnMRddWQVDf9VMOyGj/8N7yy5Y0b2qvzfvGn9LhJIZJrglfCm7ymP
+AbEVtQwdpf5pLGkkeB6zpxxxYu7KyJesF12KwvhHhm4qxFYxldBniYUr+WymXUad
+DKqC5JlR3XC321Y9YeRq4VzW9v493kHMB65jUr9TU/Qr6cf9tveCX4XSQRjbgbME
+HMUfpIBvFSDJ3gyICh3WZlXi/EjJKSZp4A==
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIIDujCCAqKgAwIBAgILBAAAAAABD4Ym5g0wDQYJKoZIhvcNAQEFBQAwTDEgMB4G
+A1UECxMXR2xvYmFsU2lnbiBSb290IENBIC0gUjIxEzARBgNVBAoTCkdsb2JhbFNp
+Z24xEzARBgNVBAMTCkdsb2JhbFNpZ24wHhcNMDYxMjE1MDgwMDAwWhcNMjExMjE1
+MDgwMDAwWjBMMSAwHgYDVQQLExdHbG9iYWxTaWduIFJvb3QgQ0EgLSBSMjETMBEG
+A1UEChMKR2xvYmFsU2lnbjETMBEGA1UEAxMKR2xvYmFsU2lnbjCCASIwDQYJKoZI
+hvcNAQEBBQADggEPADCCAQoCggEBAKbPJA6+Lm8omUVCxKs+IVSbC9N/hHD6ErPL
+v4dfxn+G07IwXNb9rfF73OX4YJYJkhD10FPe+3t+c4isUoh7SqbKSaZeqKeMWhG8
+eoLrvozps6yWJQeXSpkqBy+0Hne/ig+1AnwblrjFuTosvNYSuetZfeLQBoZfXklq
+tTleiDTsvHgMCJiEbKjNS7SgfQx5TfC4LcshytVsW33hoCmEofnTlEnLJGKRILzd
+C9XZzPnqJworc5HGnRusyMvo4KD0L5CLTfuwNhv2GXqF4G3yYROIXJ/gkwpRl4pa
+zq+r1feqCapgvdzZX99yqWATXgAByUr6P6TqBwMhAo6CygPCm48CAwEAAaOBnDCB
+mTAOBgNVHQ8BAf8EBAMCAQYwDwYDVR0TAQH/BAUwAwEB/zAdBgNVHQ4EFgQUm+IH
+V2ccHsBqBt5ZtJot39wZhi4wNgYDVR0fBC8wLTAroCmgJ4YlaHR0cDovL2NybC5n
+bG9iYWxzaWduLm5ldC9yb290LXIyLmNybDAfBgNVHSMEGDAWgBSb4gdXZxwewGoG
+3lm0mi3f3BmGLjANBgkqhkiG9w0BAQUFAAOCAQEAmYFThxxol4aR7OBKuEQLq4Gs
+J0/WwbgcQ3izDJr86iw8bmEbTUsp9Z8FHSbBuOmDAGJFtqkIk7mpM0sYmsL4h4hO
+291xNBrBVNpGP+DTKqttVCL1OmLNIG+6KYnX3ZHu01yiPqFbQfXf5WRDLenVOavS
+ot+3i9DAgBkcRcAtjOj4LaR0VknFBbVPFd5uRHg5h6h+u/N5GJG79G+dwfCMNYxd
+AfvDbbnvRG15RjF+Cv6pgsH/76tuIMRQyV+dTZsXjAzlAcmgQWpzU/qlULRuJQ/7
+TBj0/VLZjmmx6BEP3ojY+x1J96relc8geMJgEtslQIxq/H5COEBkEveegeGTLg==
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIIDXzCCAkegAwIBAgILBAAAAAABIVhTCKIwDQYJKoZIhvcNAQELBQAwTDEgMB4G
+A1UECxMXR2xvYmFsU2lnbiBSb290IENBIC0gUjMxEzARBgNVBAoTCkdsb2JhbFNp
+Z24xEzARBgNVBAMTCkdsb2JhbFNpZ24wHhcNMDkwMzE4MTAwMDAwWhcNMjkwMzE4
+MTAwMDAwWjBMMSAwHgYDVQQLExdHbG9iYWxTaWduIFJvb3QgQ0EgLSBSMzETMBEG
+A1UEChMKR2xvYmFsU2lnbjETMBEGA1UEAxMKR2xvYmFsU2lnbjCCASIwDQYJKoZI
+hvcNAQEBBQADggEPADCCAQoCggEBAMwldpB5BngiFvXAg7aEyiie/QV2EcWtiHL8
+RgJDx7KKnQRfJMsuS+FggkbhUqsMgUdwbN1k0ev1LKMPgj0MK66X17YUhhB5uzsT
+gHeMCOFJ0mpiLx9e+pZo34knlTifBtc+ycsmWQ1z3rDI6SYOgxXG71uL0gRgykmm
+KPZpO/bLyCiR5Z2KYVc3rHQU3HTgOu5yLy6c+9C7v/U9AOEGM+iCK65TpjoWc4zd
+QQ4gOsC0p6Hpsk+QLjJg6VfLuQSSaGjlOCZgdbKfd/+RFO+uIEn8rUAVSNECMWEZ
+XriX7613t2Saer9fwRPvm2L7DWzgVGkWqQPabumDk3F2xmmFghcCAwEAAaNCMEAw
+DgYDVR0PAQH/BAQDAgEGMA8GA1UdEwEB/wQFMAMBAf8wHQYDVR0OBBYEFI/wS3+o
+LkUkrk1Q+mOai97i3Ru8MA0GCSqGSIb3DQEBCwUAA4IBAQBLQNvAUKr+yAzv95ZU
+RUm7lgAJQayzE4aGKAczymvmdLm6AC2upArT9fHxD4q/c2dKg8dEe3jgr25sbwMp
+jjM5RcOO5LlXbKr8EpbsU8Yt5CRsuZRj+9xTaGdWPoO4zzUhw8lo/s7awlOqzJCK
+6fBdRoyV3XpYKBovHd7NADdBj+1EbddTKJd+82cEHhXXipa0095MJ6RMG3NzdvQX
+mcIfeg7jLQitChws/zyrVQ4PkX4268NXSb7hLi18YIvDQVETI53O9zJrlAGomecs
+Mx86OyXShkDOOyyGeMlhLxS67ttVb9+E7gUJTb0o2HLO02JQZR7rkpeDMdmztcpH
+WD9f
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIIHSTCCBTGgAwIBAgIJAMnN0+nVfSPOMA0GCSqGSIb3DQEBBQUAMIGsMQswCQYD
+VQQGEwJFVTFDMEEGA1UEBxM6TWFkcmlkIChzZWUgY3VycmVudCBhZGRyZXNzIGF0
+IHd3dy5jYW1lcmZpcm1hLmNvbS9hZGRyZXNzKTESMBAGA1UEBRMJQTgyNzQzMjg3
+MRswGQYDVQQKExJBQyBDYW1lcmZpcm1hIFMuQS4xJzAlBgNVBAMTHkdsb2JhbCBD
+aGFtYmVyc2lnbiBSb290IC0gMjAwODAeFw0wODA4MDExMjMxNDBaFw0zODA3MzEx
+MjMxNDBaMIGsMQswCQYDVQQGEwJFVTFDMEEGA1UEBxM6TWFkcmlkIChzZWUgY3Vy
+cmVudCBhZGRyZXNzIGF0IHd3dy5jYW1lcmZpcm1hLmNvbS9hZGRyZXNzKTESMBAG
+A1UEBRMJQTgyNzQzMjg3MRswGQYDVQQKExJBQyBDYW1lcmZpcm1hIFMuQS4xJzAl
+BgNVBAMTHkdsb2JhbCBDaGFtYmVyc2lnbiBSb290IC0gMjAwODCCAiIwDQYJKoZI
+hvcNAQEBBQADggIPADCCAgoCggIBAMDfVtPkOpt2RbQT2//BthmLN0EYlVJH6xed
+KYiONWwGMi5HYvNJBL99RDaxccy9Wglz1dmFRP+RVyXfXjaOcNFccUMd2drvXNL7
+G706tcuto8xEpw2uIRU/uXpbknXYpBI4iRmKt4DS4jJvVpyR1ogQC7N0ZJJ0YPP2
+zxhPYLIj0Mc7zmFLmY/CDNBAspjcDahOo7kKrmCgrUVSY7pmvWjg+b4aqIG7HkF4
+ddPB/gBVsIdU6CeQNR1MM62X/JcumIS/LMmjv9GYERTtY/jKmIhYF5ntRQOXfjyG
+HoiMvvKRhI9lNNgATH23MRdaKXoKGCQwoze1eqkBfSbW+Q6OWfH9GzO1KTsXO0G2
+Id3UwD2ln58fQ1DJu7xsepeY7s2MH/ucUa6LcL0nn3HAa6x9kGbo1106DbDVwo3V
+yJ2dwW3Q0L9R5OP4wzg2rtandeavhENdk5IMagfeOx2YItaswTXbo6Al/3K1dh3e
+beksZixShNBFks4c5eUzHdwHU1SjqoI7mjcv3N2gZOnm3b2u/GSFHTynyQbehP9r
+6GsaPMWis0L7iwk+XwhSx2LE1AVxv8Rk5Pihg+g+EpuoHtQ2TS9x9o0o9oOpE9Jh
+wZG7SMA0j0GMS0zbaRL/UJScIINZc+18ofLx/d33SdNDWKBWY8o9PeU1VlnpDsog
+zCtLkykPAgMBAAGjggFqMIIBZjASBgNVHRMBAf8ECDAGAQH/AgEMMB0GA1UdDgQW
+BBS5CcqcHtvTbDprru1U8VuTBjUuXjCB4QYDVR0jBIHZMIHWgBS5CcqcHtvTbDpr
+ru1U8VuTBjUuXqGBsqSBrzCBrDELMAkGA1UEBhMCRVUxQzBBBgNVBAcTOk1hZHJp
+ZCAoc2VlIGN1cnJlbnQgYWRkcmVzcyBhdCB3d3cuY2FtZXJmaXJtYS5jb20vYWRk
+cmVzcykxEjAQBgNVBAUTCUE4Mjc0MzI4NzEbMBkGA1UEChMSQUMgQ2FtZXJmaXJt
+YSBTLkEuMScwJQYDVQQDEx5HbG9iYWwgQ2hhbWJlcnNpZ24gUm9vdCAtIDIwMDiC
+CQDJzdPp1X0jzjAOBgNVHQ8BAf8EBAMCAQYwPQYDVR0gBDYwNDAyBgRVHSAAMCow
+KAYIKwYBBQUHAgEWHGh0dHA6Ly9wb2xpY3kuY2FtZXJmaXJtYS5jb20wDQYJKoZI
+hvcNAQEFBQADggIBAICIf3DekijZBZRG/5BXqfEv3xoNa/p8DhxJJHkn2EaqbylZ
+UohwEurdPfWbU1Rv4WCiqAm57OtZfMY18dwY6fFn5a+6ReAJ3spED8IXDneRRXoz
+X1+WLGiLwUePmJs9wOzL9dWCkoQ10b42OFZyMVtHLaoXpGNR6woBrX/sdZ7LoR/x
+fxKxueRkf2fWIyr0uDldmOghp+G9PUIadJpwr2hsUF1Jz//7Dl3mLEfXgTpZALVz
+a2Mg9jFFCDkO9HB+QHBaP9BrQql0PSgvAm11cpUJjUhjxsYjV5KTXjXBjfkK9yyd
+Yhz2rXzdpjEetrHHfoUm+qRqtdpjMNHvkzeyZi99Bffnt0uYlDXA2TopwZ2yUDMd
+SqlapskD7+3056huirRXhOukP9DuqqqHW2Pok+JrqNS4cnhrG+055F3Lm6qH1U9O
+AP7Zap88MQ8oAgF9mOinsKJknnn4SPIVqczmyETrP3iZ8ntxPjzxmKfFGBI/5rso
+M0LpRQp8bfKGeS/Fghl9CYl8slR2iK7ewfPM4W7bMdaTrpmg7yVqc5iJWzouE4ge
+v8CSlDQb4ye3ix5vQv/n6TebUB0tovkC7stYWDpxvGjjqsGvHCgfotwjZT+B6q6Z
+09gwzxMNTxXJhLynSC34MCN32EZLeW32jO06f2ARePTpm67VVMB0gNELQp/B
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIIEADCCAuigAwIBAgIBADANBgkqhkiG9w0BAQUFADBjMQswCQYDVQQGEwJVUzEh
+MB8GA1UEChMYVGhlIEdvIERhZGR5IEdyb3VwLCBJbmMuMTEwLwYDVQQLEyhHbyBE
+YWRkeSBDbGFzcyAyIENlcnRpZmljYXRpb24gQXV0aG9yaXR5MB4XDTA0MDYyOTE3
+MDYyMFoXDTM0MDYyOTE3MDYyMFowYzELMAkGA1UEBhMCVVMxITAfBgNVBAoTGFRo
+ZSBHbyBEYWRkeSBHcm91cCwgSW5jLjExMC8GA1UECxMoR28gRGFkZHkgQ2xhc3Mg
+MiBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eTCCASAwDQYJKoZIhvcNAQEBBQADggEN
+ADCCAQgCggEBAN6d1+pXGEmhW+vXX0iG6r7d/+TvZxz0ZWizV3GgXne77ZtJ6XCA
+PVYYYwhv2vLM0D9/AlQiVBDYsoHUwHU9S3/Hd8M+eKsaA7Ugay9qK7HFiH7Eux6w
+wdhFJ2+qN1j3hybX2C32qRe3H3I2TqYXP2WYktsqbl2i/ojgC95/5Y0V4evLOtXi
+EqITLdiOr18SPaAIBQi2XKVlOARFmR6jYGB0xUGlcmIbYsUfb18aQr4CUWWoriMY
+avx4A6lNf4DD+qta/KFApMoZFv6yyO9ecw3ud72a9nmYvLEHZ6IVDd2gWMZEewo+
+YihfukEHU1jPEX44dMX4/7VpkI+EdOqXG68CAQOjgcAwgb0wHQYDVR0OBBYEFNLE
+sNKR1EwRcbNhyz2h/t2oatTjMIGNBgNVHSMEgYUwgYKAFNLEsNKR1EwRcbNhyz2h
+/t2oatTjoWekZTBjMQswCQYDVQQGEwJVUzEhMB8GA1UEChMYVGhlIEdvIERhZGR5
+IEdyb3VwLCBJbmMuMTEwLwYDVQQLEyhHbyBEYWRkeSBDbGFzcyAyIENlcnRpZmlj
+YXRpb24gQXV0aG9yaXR5ggEAMAwGA1UdEwQFMAMBAf8wDQYJKoZIhvcNAQEFBQAD
+ggEBADJL87LKPpH8EsahB4yOd6AzBhRckB4Y9wimPQoZ+YeAEW5p5JYXMP80kWNy
+OO7MHAGjHZQopDH2esRU1/blMVgDoszOYtuURXO1v0XJJLXVggKtI3lpjbi2Tc7P
+TMozI+gciKqdi0FuFskg5YmezTvacPd+mSYgFFQlq25zheabIZ0KbIIOqPjCDPoQ
+HmyW74cNxA9hi63ugyuV+I6ShHI56yDqg+2DzZduCLzrTia2cyvk0/ZM/iZx4mER
+dEr/VxqHD3VILs9RaRegAhJhldXRQLIQTO7ErBBDpqWeCtWVYpoNz4iCxTIM5Cuf
+ReYNnyicsbkqWletNw+vHX/bvZ8=
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIIDxTCCAq2gAwIBAgIBADANBgkqhkiG9w0BAQsFADCBgzELMAkGA1UEBhMCVVMx
+EDAOBgNVBAgTB0FyaXpvbmExEzARBgNVBAcTClNjb3R0c2RhbGUxGjAYBgNVBAoT
+EUdvRGFkZHkuY29tLCBJbmMuMTEwLwYDVQQDEyhHbyBEYWRkeSBSb290IENlcnRp
+ZmljYXRlIEF1dGhvcml0eSAtIEcyMB4XDTA5MDkwMTAwMDAwMFoXDTM3MTIzMTIz
+NTk1OVowgYMxCzAJBgNVBAYTAlVTMRAwDgYDVQQIEwdBcml6b25hMRMwEQYDVQQH
+EwpTY290dHNkYWxlMRowGAYDVQQKExFHb0RhZGR5LmNvbSwgSW5jLjExMC8GA1UE
+AxMoR28gRGFkZHkgUm9vdCBDZXJ0aWZpY2F0ZSBBdXRob3JpdHkgLSBHMjCCASIw
+DQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAL9xYgjx+lk09xvJGKP3gElY6SKD
+E6bFIEMBO4Tx5oVJnyfq9oQbTqC023CYxzIBsQU+B07u9PpPL1kwIuerGVZr4oAH
+/PMWdYA5UXvl+TW2dE6pjYIT5LY/qQOD+qK+ihVqf94Lw7YZFAXK6sOoBJQ7Rnwy
+DfMAZiLIjWltNowRGLfTshxgtDj6AozO091GB94KPutdfMh8+7ArU6SSYmlRJQVh
+GkSBjCypQ5Yj36w6gZoOKcUcqeldHraenjAKOc7xiID7S13MMuyFYkMlNAJWJwGR
+tDtwKj9useiciAF9n9T521NtYJ2/LOdYq7hfRvzOxBsDPAnrSTFcaUaz4EcCAwEA
+AaNCMEAwDwYDVR0TAQH/BAUwAwEB/zAOBgNVHQ8BAf8EBAMCAQYwHQYDVR0OBBYE
+FDqahQcQZyi27/a9BUFuIMGU2g/eMA0GCSqGSIb3DQEBCwUAA4IBAQCZ21151fmX
+WWcDYfF+OwYxdS2hII5PZYe096acvNjpL9DbWu7PdIxztDhC2gV7+AJ1uP2lsdeu
+9tfeE8tTEH6KRtGX+rcuKxGrkLAngPnon1rpN5+r5N9ss4UXnT3ZJE95kTXWXwTr
+gIOrmgIttRD02JDHBHNA7XIloKmf7J6raBKZV8aPEjoJpL1E/QYVN8Gb5DKj7Tjo
+2GTzLH4U/ALqn83/B2gX2yKQOC16jdFU8WnjXzPKej17CuPKf1855eJ1usV2GDPO
+LPAvTK33sefOT6jEm0pUBsV/fdUID+Ic/n4XuKxe9tQWskMJDE32p2u0mYRlynqI
+4uJEvlz36hz1
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIIEMTCCAxmgAwIBAgIBADANBgkqhkiG9w0BAQUFADCBlTELMAkGA1UEBhMCR1Ix
+RDBCBgNVBAoTO0hlbGxlbmljIEFjYWRlbWljIGFuZCBSZXNlYXJjaCBJbnN0aXR1
+dGlvbnMgQ2VydC4gQXV0aG9yaXR5MUAwPgYDVQQDEzdIZWxsZW5pYyBBY2FkZW1p
+YyBhbmQgUmVzZWFyY2ggSW5zdGl0dXRpb25zIFJvb3RDQSAyMDExMB4XDTExMTIw
+NjEzNDk1MloXDTMxMTIwMTEzNDk1MlowgZUxCzAJBgNVBAYTAkdSMUQwQgYDVQQK
+EztIZWxsZW5pYyBBY2FkZW1pYyBhbmQgUmVzZWFyY2ggSW5zdGl0dXRpb25zIENl
+cnQuIEF1dGhvcml0eTFAMD4GA1UEAxM3SGVsbGVuaWMgQWNhZGVtaWMgYW5kIFJl
+c2VhcmNoIEluc3RpdHV0aW9ucyBSb290Q0EgMjAxMTCCASIwDQYJKoZIhvcNAQEB
+BQADggEPADCCAQoCggEBAKlTAOMupvaO+mDYLZU++CwqVE7NuYRhlFhPjz2L5EPz
+dYmNUeTDN9KKiE15HrcS3UN4SoqS5tdI1Q+kOilENbgH9mgdVc04UfCMJDGFr4PJ
+fel3r+0ae50X+bOdOFAPplp5kYCvN66m0zH7tSYJnTxa71HFK9+WXesyHgLacEns
+bgzImjeN9/E2YEsmLIKe0HjzDQ9jpFEw4fkrJxIH2Oq9GGKYsFk3fb7u8yBRQlqD
+75O6aRXxYp2fmTmCobd0LovUxQt7L/DICto9eQqakxylKHJzkUOap9FNhYS5qXSP
+FEDH3N6sQWRstBmbAmNtJGSPRLIl6s5ddAxjMlyNh+UCAwEAAaOBiTCBhjAPBgNV
+HRMBAf8EBTADAQH/MAsGA1UdDwQEAwIBBjAdBgNVHQ4EFgQUppFC/RNhSiOeCKQp
+5dgTBCPuQSUwRwYDVR0eBEAwPqA8MAWCAy5ncjAFggMuZXUwBoIELmVkdTAGggQu
+b3JnMAWBAy5ncjAFgQMuZXUwBoEELmVkdTAGgQQub3JnMA0GCSqGSIb3DQEBBQUA
+A4IBAQAf73lB4XtuP7KMhjdCSk4cNx6NZrokgclPEg8hwAOXhiVtXdMiKahsog2p
+6z0GW5k6x8zDmjR/qw7IThzh+uTczQ2+vyT+bOdrwg3IBp5OjWEopmr95fZi6hg8
+TqBTnbI6nOulnJEWtk2C4AwFSKls9cz4y51JtPACpf1wA+2KIaWuE4ZJwzNzvoc7
+dIsXRSZMFpGD/md9zU1jZ/rzAxKWeAaNsWftjj++n08C9bMJL/NMh98qy5V8Acys
+Nnq/onN694/BtZqhFLKPM58N7yLcZnuEvUUXBj08yrl3NI/K6s8/MT7jiOOASSXI
+l7WdmplNsDz4SgCbZN2fOUvRJ9e4
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIIDMDCCAhigAwIBAgICA+gwDQYJKoZIhvcNAQEFBQAwRzELMAkGA1UEBhMCSEsx
+FjAUBgNVBAoTDUhvbmdrb25nIFBvc3QxIDAeBgNVBAMTF0hvbmdrb25nIFBvc3Qg
+Um9vdCBDQSAxMB4XDTAzMDUxNTA1MTMxNFoXDTIzMDUxNTA0NTIyOVowRzELMAkG
+A1UEBhMCSEsxFjAUBgNVBAoTDUhvbmdrb25nIFBvc3QxIDAeBgNVBAMTF0hvbmdr
+b25nIFBvc3QgUm9vdCBDQSAxMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKC
+AQEArP84tulmAknjorThkPlAj3n54r15/gK97iSSHSL22oVyaf7XPwnU3ZG1ApzQ
+jVrhVcNQhrkpJsLj2aDxaQMoIIBFIi1WpztUlVYiWR8o3x8gPW2iNr4joLFutbEn
+PzlTCeqrauh0ssJlXI6/fMN4hM2eFvz1Lk8gKgifd/PFHsSaUmYeSF7jEAaPIpjh
+ZY4bXSNmO7ilMlHIhqqhqZ5/dpTCpmy3QfDVyAY45tQM4vM7TG1QjMSDJ8EThFk9
+nnV0ttgCXjqQesBCNnLsak3c78QA3xMYV18meMjWCnl3v/evt3a5pQuEF10Q6m/h
+q5URX208o1xNg1vysxmKgIsLhwIDAQABoyYwJDASBgNVHRMBAf8ECDAGAQH/AgED
+MA4GA1UdDwEB/wQEAwIBxjANBgkqhkiG9w0BAQUFAAOCAQEADkbVPK7ih9legYsC
+mEEIjEy82tvuJxuC52pF7BaLT4Wg87JwvVqWuspube5Gi27nKi6Wsxkz67SfqLI3
+7piol7Yutmcn1KZJ/RyTZXaeQi/cImyaT/JaFTmxcdcrUehtHJjA2Sr0oYJ71clB
+oiMBdDhViw+5LmeiIAQ32pwL0xch4I+XeTRvhEgCIDMb5jREn5Fw9IBehEPCKdJs
+EhTkYY2sEJCehFC78JZvRZ+K88psT/oROhUVRsPNH4NbLUES7VBnQRM9IauUiqpO
+fMGx+6fWtScvl6tu4B3i0RwsH0Ti/L6RoZz71ilTc4afU9hDDl3WY4JxHYB0yvbi
+AmvZWg==
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIIEAjCCAuqgAwIBAgIFORFFEJQwDQYJKoZIhvcNAQEFBQAwgYUxCzAJBgNVBAYT
+AkZSMQ8wDQYDVQQIEwZGcmFuY2UxDjAMBgNVBAcTBVBhcmlzMRAwDgYDVQQKEwdQ
+TS9TR0ROMQ4wDAYDVQQLEwVEQ1NTSTEOMAwGA1UEAxMFSUdDL0ExIzAhBgkqhkiG
+9w0BCQEWFGlnY2FAc2dkbi5wbS5nb3V2LmZyMB4XDTAyMTIxMzE0MjkyM1oXDTIw
+MTAxNzE0MjkyMlowgYUxCzAJBgNVBAYTAkZSMQ8wDQYDVQQIEwZGcmFuY2UxDjAM
+BgNVBAcTBVBhcmlzMRAwDgYDVQQKEwdQTS9TR0ROMQ4wDAYDVQQLEwVEQ1NTSTEO
+MAwGA1UEAxMFSUdDL0ExIzAhBgkqhkiG9w0BCQEWFGlnY2FAc2dkbi5wbS5nb3V2
+LmZyMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAsh/R0GLFMzvABIaI
+s9z4iPf930Pfeo2aSVz2TqrMHLmh6yeJ8kbpO0px1R2OLc/mratjUMdUC24SyZA2
+xtgv2pGqaMVy/hcKshd+ebUyiHDKcMCWSo7kVc0dJ5S/znIq7Fz5cyD+vfcuiWe4
+u0dzEvfRNWk68gq5rv9GQkaiv6GFGvm/5P9JhfejcIYyHF2fYPepraX/z9E0+X1b
+F8bc1g4oa8Ld8fUzaJ1O/Id8NhLWo4DoQw1VYZTqZDdH6nfK0LJYBcNdfrGoRpAx
+Vs5wKpayMLh35nnAvSk7/ZR3TL0gzUEl4C7HG7vupARB0l2tEmqKm0f7yd1GQOGd
+PDPQtQIDAQABo3cwdTAPBgNVHRMBAf8EBTADAQH/MAsGA1UdDwQEAwIBRjAVBgNV
+HSAEDjAMMAoGCCqBegF5AQEBMB0GA1UdDgQWBBSjBS8YYFDCiQrdKyFP/45OqDAx
+NjAfBgNVHSMEGDAWgBSjBS8YYFDCiQrdKyFP/45OqDAxNjANBgkqhkiG9w0BAQUF
+AAOCAQEABdwm2Pp3FURo/C9mOnTgXeQp/wYHE4RKq89toB9RlPhJy3Q2FLwV3duJ
+L92PoF189RLrn544pEfMs5bZvpwlqwN+Mw+VgQ39FuCIvjfwbF3QMZsyK10XZZOY
+YLxuj7GoPB7ZHPOpJkL5ZB3C55L29B5aqhlSXa/oovdgoPaN8In1buAKBQGVyYsg
+Crpa/JosPL3Dt8ldeCUFP1YUmwza+zpI/pdpXsoQhvdOlgQITeywvl3cO45Pwf2a
+NjSaTFR+FwNIlQgRHAdvhQh+XU3Endv7rs6y0bO4g2wdsrN58dhwmX7wEwLOXt1R
+0982gaEbeC9xs/FZTEYYKKuF0mBWWg==
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIIFYDCCA0igAwIBAgIQCgFCgAAAAUUjyES1AAAAAjANBgkqhkiG9w0BAQsFADBK
+MQswCQYDVQQGEwJVUzESMBAGA1UEChMJSWRlblRydXN0MScwJQYDVQQDEx5JZGVu
+VHJ1c3QgQ29tbWVyY2lhbCBSb290IENBIDEwHhcNMTQwMTE2MTgxMjIzWhcNMzQw
+MTE2MTgxMjIzWjBKMQswCQYDVQQGEwJVUzESMBAGA1UEChMJSWRlblRydXN0MScw
+JQYDVQQDEx5JZGVuVHJ1c3QgQ29tbWVyY2lhbCBSb290IENBIDEwggIiMA0GCSqG
+SIb3DQEBAQUAA4ICDwAwggIKAoICAQCnUBneP5k91DNG8W9RYYKyqU+PZ4ldhNlT
+3Qwo2dfw/66VQ3KZ+bVdfIrBQuExUHTRgQ18zZshq0PirK1ehm7zCYofWjK9ouuU
++ehcCuz/mNKvcbO0U59Oh++SvL3sTzIwiEsXXlfEU8L2ApeN2WIrvyQfYo3fw7gp
+S0l4PJNgiCL8mdo2yMKi1CxUAGc1bnO/AljwpN3lsKImesrgNqUZFvX9t++uP0D1
+bVoE/c40yiTcdCMbXTMTEl3EASX2MN0CXZ/g1Ue9tOsbobtJSdifWwLziuQkkORi
+T0/Br4sOdBeo0XKIanoBScy0RnnGF7HamB4HWfp1IYVl3ZBWzvurpWCdxJ35UrCL
+vYf5jysjCiN2O/cz4ckA82n5S6LgTrx+kzmEB/dEcH7+B1rlsazRGMzyNeVJSQjK
+Vsk9+w8YfYs7wRPCTY/JTw436R+hDmrfYi7LNQZReSzIJTj0+kuniVyc0uMNOYZK
+dHzVWYfCP04MXFL0PfdSgvHqo6z9STQaKPNBiDoT7uje/5kdX7rL6B7yuVBgwDHT
+c+XvvqDtMwt0viAgxGds8AgDelWAf0ZOlqf0Hj7h9tgJ4TNkK2PXMl6f+cB7D3hv
+l7yTmvmcEpB4eoCHFddydJxVdHixuuFucAS6T6C6aMN7/zHwcz09lCqxC0EOoP5N
+iGVreTO01wIDAQABo0IwQDAOBgNVHQ8BAf8EBAMCAQYwDwYDVR0TAQH/BAUwAwEB
+/zAdBgNVHQ4EFgQU7UQZwNPwBovupHu+QucmVMiONnYwDQYJKoZIhvcNAQELBQAD
+ggIBAA2ukDL2pkt8RHYZYR4nKM1eVO8lvOMIkPkp165oCOGUAFjvLi5+U1KMtlwH
+6oi6mYtQlNeCgN9hCQCTrQ0U5s7B8jeUeLBfnLOic7iPBZM4zY0+sLj7wM+x8uwt
+LRvM7Kqas6pgghstO8OEPVeKlh6cdbjTMM1gCIOQ045U8U1mwF10A0Cj7oV+wh93
+nAbowacYXVKV7cndJZ5t+qntozo00Fl72u1Q8zW/7esUTTHHYPTa8Yec4kjixsU3
++wYQ+nVZZjFHKdp2mhzpgq7vmrlR94gjmmmVYjzlVYA211QC//G5Xc7UI2/YRYRK
+W2XviQzdFKcgyxilJbQN+QHwotL0AMh0jqEqSI5l2xPE4iUXfeu+h1sXIFRRk0pT
+AwvsXcoz7WL9RccvW9xYoIA55vrX/hMUpu09lEpCdNTDd1lzzY9GvlU47/rokTLq
+l1gEIt44w8y8bckzOmoKaT+gyOpyj4xjhiO9bTyWnpXgSUyqorkqG5w2gXjtw+hG
+4iZZRHUe2XWJUc0QhJ1hYMtd+ZciTY6Y5uN/9lu7rs3KSoFrXgvzUeF0K+l+J6fZ
+mUlO+KWA2yUPHGNiiskzZ2s8EIPGrd6ozRaOjfAHN3Gf8qv8QfXBi+wAN10J5U6A
+7/qxXDgGpRtK4dw4LTzcqx+QGtVKnO7RcGzM7vRX+Bi6hG6H
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIIFZjCCA06gAwIBAgIQCgFCgAAAAUUjz0Z8AAAAAjANBgkqhkiG9w0BAQsFADBN
+MQswCQYDVQQGEwJVUzESMBAGA1UEChMJSWRlblRydXN0MSowKAYDVQQDEyFJZGVu
+VHJ1c3QgUHVibGljIFNlY3RvciBSb290IENBIDEwHhcNMTQwMTE2MTc1MzMyWhcN
+MzQwMTE2MTc1MzMyWjBNMQswCQYDVQQGEwJVUzESMBAGA1UEChMJSWRlblRydXN0
+MSowKAYDVQQDEyFJZGVuVHJ1c3QgUHVibGljIFNlY3RvciBSb290IENBIDEwggIi
+MA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoICAQC2IpT8pEiv6EdrCvsnduTyP4o7
+ekosMSqMjbCpwzFrqHd2hCa2rIFCDQjrVVi7evi8ZX3yoG2LqEfpYnYeEe4IFNGy
+RBb06tD6Hi9e28tzQa68ALBKK0CyrOE7S8ItneShm+waOh7wCLPQ5CQ1B5+ctMlS
+bdsHyo+1W/CD80/HLaXIrcuVIKQxKFdYWuSNG5qrng0M8gozOSI5Cpcu81N3uURF
+/YTLNiCBWS2ab21ISGHKTN9T0a9SvESfqy9rg3LvdYDaBjMbXcjaY8ZNzaxmMc3R
+3j6HEDbhuaR672BQssvKplbgN6+rNBM5Jeg5ZuSYeqoSmJxZZoY+rfGwyj4GD3vw
+EUs3oERte8uojHH01bWRNszwFcYr3lEXsZdMUD2xlVl8BX0tIdUAvwFnol57plzy
+9yLxkA2T26pEUWbMfXYD62qoKjgZl3YNa4ph+bz27nb9cCvdKTz4Ch5bQhyLVi9V
+GxyhLrXHFub4qjySjmm2AcG1hp2JDws4lFTo6tyePSW8Uybt1as5qsVATFSrsrTZ
+2fjXctscvG29ZV/viDUqZi/u9rNl8DONfJhBaUYPQxxp+pu10GFqzcpL2UyQRqsV
+WaFHVCkugyhfHMKiq3IXAAaOReyL4jM9f9oZRORicsPfIsbyVtTdX5Vy7W1f90gD
+W/3FKqD2cyOEEBsB5wIDAQABo0IwQDAOBgNVHQ8BAf8EBAMCAQYwDwYDVR0TAQH/
+BAUwAwEB/zAdBgNVHQ4EFgQU43HgntinQtnbcZFrlJPrw6PRFKMwDQYJKoZIhvcN
+AQELBQADggIBAEf63QqwEZE4rU1d9+UOl1QZgkiHVIyqZJnYWv6IAcVYpZmxI1Qj
+t2odIFflAWJBF9MJ23XLblSQdf4an4EKwt3X9wnQW3IV5B4Jaj0z8yGa5hV+rVHV
+DRDtfULAj+7AmgjVQdZcDiFpboBhDhXAuM/FSRJSzL46zNQuOAXeNf0fb7iAaJg9
+TaDKQGXSc3z1i9kKlT/YPyNtGtEqJBnZhbMX73huqVjRI9PHE+1yJX9dsXNw0H8G
+lwmEKYBhHfpe/3OsoOOJuBxxFcbeMX8S3OFtm6/n6J91eEyrRjuazr8FGF1NFTwW
+mhlQBJqymm9li1JfPFgEKCXAZmExfrngdbkaqIHWchezxQMxNRF4eKLg6TCMf4Df
+WN88uieW4oA0beOY02QnrEh+KHdcxiVhJfiFDGX6xDIvpZgF5PgLZxYWxoK4Mhn5
++bl53B/N66+rDt0b20XkeucC4pVd/GnwU2lhlXV5C15V5jgclKlZM57IcXR5f1GJ
+tshquDDIajjDbp7hNxbqBWJMWxJH7ae0s1hWx0nzfxJoCTFx8G34Tkf71oXuxVhA
+GaQdp/lLQzfcaFpPz+vCZHTetBXZ9FRUGi8c15dxVJCO2SCdUyt/q4/i6jC8UDfv
+8Ue1fXwsBOxonbRJRBD0ckscZOf85muQ3Wl9af0AVqW3rLatt8o+Ae+c
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIIF8TCCA9mgAwIBAgIQALC3WhZIX7/hy/WL1xnmfTANBgkqhkiG9w0BAQsFADA4
+MQswCQYDVQQGEwJFUzEUMBIGA1UECgwLSVpFTlBFIFMuQS4xEzARBgNVBAMMCkl6
+ZW5wZS5jb20wHhcNMDcxMjEzMTMwODI4WhcNMzcxMjEzMDgyNzI1WjA4MQswCQYD
+VQQGEwJFUzEUMBIGA1UECgwLSVpFTlBFIFMuQS4xEzARBgNVBAMMCkl6ZW5wZS5j
+b20wggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoICAQDJ03rKDx6sp4boFmVq
+scIbRTJxldn+EFvMr+eleQGPicPK8lVx93e+d5TzcqQsRNiekpsUOqHnJJAKClaO
+xdgmlOHZSOEtPtoKct2jmRXagaKH9HtuJneJWK3W6wyyQXpzbm3benhB6QiIEn6H
+LmYRY2xU+zydcsC8Lv/Ct90NduM61/e0aL6i9eOBbsFGb12N4E3GVFWJGjMxCrFX
+uaOKmMPsOzTFlUFpfnXCPCDFYbpRR6AgkJOhkEvzTnyFRVSa0QUmQbC1TR0zvsQD
+yCV8wXDbO/QJLVQnSKwv4cSsPsjLkkxTOTcj7NMB+eAJRE1NZMDhDVqHIrytG6P+
+JrUV86f8hBnp7KGItERphIPzidF0BqnMC9bC3ieFUCbKF7jJeodWLBoBHmy+E60Q
+rLUk9TiRodZL2vG70t5HtfG8gfZZa88ZU+mNFctKy6lvROUbQc/hhqfK0GqfvEyN
+BjNaooXlkDWgYlwWTvDjovoDGrQscbNYLN57C9saD+veIR8GdwYDsMnvmfzAuU8L
+hij+0rnq49qlw0dpEuDb8PYZi+17cNcC1u2HGCgsBCRMd+RIihrGO5rUD8r6ddIB
+QFqNeb+Lz0vPqhbBleStTIo+F5HUsWLlguWABKQDfo2/2n+iD5dPDNMN+9fR5XJ+
+HMh3/1uaD7euBUbl8agW7EekFwIDAQABo4H2MIHzMIGwBgNVHREEgagwgaWBD2lu
+Zm9AaXplbnBlLmNvbaSBkTCBjjFHMEUGA1UECgw+SVpFTlBFIFMuQS4gLSBDSUYg
+QTAxMzM3MjYwLVJNZXJjLlZpdG9yaWEtR2FzdGVpeiBUMTA1NSBGNjIgUzgxQzBB
+BgNVBAkMOkF2ZGEgZGVsIE1lZGl0ZXJyYW5lbyBFdG9yYmlkZWEgMTQgLSAwMTAx
+MCBWaXRvcmlhLUdhc3RlaXowDwYDVR0TAQH/BAUwAwEB/zAOBgNVHQ8BAf8EBAMC
+AQYwHQYDVR0OBBYEFB0cZQ6o8iV7tJHP5LGx5r1VdGwFMA0GCSqGSIb3DQEBCwUA
+A4ICAQB4pgwWSp9MiDrAyw6lFn2fuUhfGI8NYjb2zRlrrKvV9pF9rnHzP7MOeIWb
+laQnIUdCSnxIOvVFfLMMjlF4rJUT3sb9fbgakEyrkgPH7UIBzg/YsfqikuFgba56
+awmqxinuaElnMIAkejEWOVt+8Rwu3WwJrfIxwYJOubv5vr8qhT/AQKM6WfxZSzwo
+JNu0FXWuDYi6LnPAvViH5ULy617uHjAimcs30cQhbIHsvm0m5hzkQiCeR7Csg1lw
+LDXWrzY0tM07+DKo7+N4ifuNRSzanLh+QBxh5z6ikixL8s36mLYp//Pye6kfLqCT
+VyvehQP5aTfLnnhqBbTFMXiJ7HqnheG5ezzevh55hM6fcA5ZwjUukCox2eRFekGk
+LhObNA5me0mrZJfQRsN5nXJQY6aYWwa9SG3YOYNw6DXwBdGqvOPbyALqfP2C2sJb
+UjWumDqtujWTI6cfSN01RpiyEGjkpTHCClguGYEQyVB1/OpaFs4R1+7vUIgtYf8/
+QnMFlEPVjjxOAToZpR9GTnfQXeWBIiGH/pR9hNiTrdZoQ0iy2+tzJOeRf1SktoA+
+naM8THLCV8Sg1Mw4J87VBp6iSNnpn86CcDaTmjvfliHjWbcM2pE38P1ZWrOZyGls
+QyYBNWNgVYkDOnXYukrZVP/u3oDYLdE41V4tC5h9Pmzb/CaIxw==
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIIE5jCCA86gAwIBAgIEO45L/DANBgkqhkiG9w0BAQUFADBdMRgwFgYJKoZIhvcN
+AQkBFglwa2lAc2suZWUxCzAJBgNVBAYTAkVFMSIwIAYDVQQKExlBUyBTZXJ0aWZp
+dHNlZXJpbWlza2Vza3VzMRAwDgYDVQQDEwdKdXVyLVNLMB4XDTAxMDgzMDE0MjMw
+MVoXDTE2MDgyNjE0MjMwMVowXTEYMBYGCSqGSIb3DQEJARYJcGtpQHNrLmVlMQsw
+CQYDVQQGEwJFRTEiMCAGA1UEChMZQVMgU2VydGlmaXRzZWVyaW1pc2tlc2t1czEQ
+MA4GA1UEAxMHSnV1ci1TSzCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEB
+AIFxNj4zB9bjMI0TfncyRsvPGbJgMUaXhvSYRqTCZUXP00B841oiqBB4M8yIsdOB
+SvZiF3tfTQou0M+LI+5PAk676w7KvRhj6IAcjeEcjT3g/1tf6mTll+g/mX8MCgkz
+ABpTpyHhOEvWgxutr2TC+Rx6jGZITWYfGAriPrsfB2WThbkasLnE+w0R9vXW+RvH
+LCu3GFH+4Hv2qEivbDtPL+/40UceJlfwUR0zlv/vWT3aTdEVNMfqPxZIe5EcgEMP
+PbgFPtGzlc3Yyg/CQ2fbt5PgIoIuvvVoKIO5wTtpeyDaTpxt4brNj3pssAki14sL
+2xzVWiZbDcDq5WDQn/413z8CAwEAAaOCAawwggGoMA8GA1UdEwEB/wQFMAMBAf8w
+ggEWBgNVHSAEggENMIIBCTCCAQUGCisGAQQBzh8BAQEwgfYwgdAGCCsGAQUFBwIC
+MIHDHoHAAFMAZQBlACAAcwBlAHIAdABpAGYAaQBrAGEAYQB0ACAAbwBuACAAdgDk
+AGwAagBhAHMAdABhAHQAdQBkACAAQQBTAC0AaQBzACAAUwBlAHIAdABpAGYAaQB0
+AHMAZQBlAHIAaQBtAGkAcwBrAGUAcwBrAHUAcwAgAGEAbABhAG0ALQBTAEsAIABz
+AGUAcgB0AGkAZgBpAGsAYQBhAHQAaQBkAGUAIABrAGkAbgBuAGkAdABhAG0AaQBz
+AGUAawBzMCEGCCsGAQUFBwIBFhVodHRwOi8vd3d3LnNrLmVlL2Nwcy8wKwYDVR0f
+BCQwIjAgoB6gHIYaaHR0cDovL3d3dy5zay5lZS9qdXVyL2NybC8wHQYDVR0OBBYE
+FASqekej5ImvGs8KQKcYP2/v6X2+MB8GA1UdIwQYMBaAFASqekej5ImvGs8KQKcY
+P2/v6X2+MA4GA1UdDwEB/wQEAwIB5jANBgkqhkiG9w0BAQUFAAOCAQEAe8EYlFOi
+CfP+JmeaUOTDBS8rNXiRTHyoERF5TElZrMj3hWVcRrs7EKACr81Ptcw2Kuxd/u+g
+kcm2k298gFTsxwhwDY77guwqYHhpNjbRxZyLabVAyJRld/JXIWY7zoVAtjNjGr95
+HvxcHdMdkxuLDF2FvZkwMhgJkVLpfKG6/2SSmuz+Ne6ML678IIbsSt4beDI3poHS
+na9aEhbKmVv8b20OxaAehsmR0FyYgl9jDIpaq9iVpszLita/ZEuOyoqysOkhMp6q
+qIWYNIE5ITuoOlIyPfZrN4YGWhWY3PARZv40ILcD9EEQfTmEeZZyY7aWAuVrua0Z
+TbvGRNs2yyqcjg==
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIIHqDCCBpCgAwIBAgIRAMy4579OKRr9otxmpRwsDxEwDQYJKoZIhvcNAQEFBQAw
+cjELMAkGA1UEBhMCSFUxETAPBgNVBAcTCEJ1ZGFwZXN0MRYwFAYDVQQKEw1NaWNy
+b3NlYyBMdGQuMRQwEgYDVQQLEwtlLVN6aWdubyBDQTEiMCAGA1UEAxMZTWljcm9z
+ZWMgZS1Temlnbm8gUm9vdCBDQTAeFw0wNTA0MDYxMjI4NDRaFw0xNzA0MDYxMjI4
+NDRaMHIxCzAJBgNVBAYTAkhVMREwDwYDVQQHEwhCdWRhcGVzdDEWMBQGA1UEChMN
+TWljcm9zZWMgTHRkLjEUMBIGA1UECxMLZS1Temlnbm8gQ0ExIjAgBgNVBAMTGU1p
+Y3Jvc2VjIGUtU3ppZ25vIFJvb3QgQ0EwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAw
+ggEKAoIBAQDtyADVgXvNOABHzNuEwSFpLHSQDCHZU4ftPkNEU6+r+ICbPHiN1I2u
+uO/TEdyB5s87lozWbxXGd36hL+BfkrYn13aaHUM86tnsL+4582pnS4uCzyL4ZVX+
+LMsvfUh6PXX5qqAnu3jCBspRwn5mS6/NoqdNAoI/gqyFxuEPkEeZlApxcpMqyabA
+vjxWTHOSJ/FrtfX9/DAFYJLG65Z+AZHCabEeHXtTRbjcQR/Ji3HWVBTji1R4P770
+Yjtb9aPs1ZJ04nQw7wHb4dSrmZsqa/i9phyGI0Jf7Enemotb9HI6QMVJPqW+jqpx
+62z69Rrkav17fVVA71hu5tnVvCSrwe+3AgMBAAGjggQ3MIIEMzBnBggrBgEFBQcB
+AQRbMFkwKAYIKwYBBQUHMAGGHGh0dHBzOi8vcmNhLmUtc3ppZ25vLmh1L29jc3Aw
+LQYIKwYBBQUHMAKGIWh0dHA6Ly93d3cuZS1zemlnbm8uaHUvUm9vdENBLmNydDAP
+BgNVHRMBAf8EBTADAQH/MIIBcwYDVR0gBIIBajCCAWYwggFiBgwrBgEEAYGoGAIB
+AQEwggFQMCgGCCsGAQUFBwIBFhxodHRwOi8vd3d3LmUtc3ppZ25vLmh1L1NaU1ov
+MIIBIgYIKwYBBQUHAgIwggEUHoIBEABBACAAdABhAG4A+gBzAO0AdAB2AOEAbgB5
+ACAA6QByAHQAZQBsAG0AZQB6AOkAcwDpAGgAZQB6ACAA6QBzACAAZQBsAGYAbwBn
+AGEAZADhAHMA4QBoAG8AegAgAGEAIABTAHoAbwBsAGcA4QBsAHQAYQB0APMAIABT
+AHoAbwBsAGcA4QBsAHQAYQB0AOEAcwBpACAAUwB6AGEAYgDhAGwAeQB6AGEAdABh
+ACAAcwB6AGUAcgBpAG4AdAAgAGsAZQBsAGwAIABlAGwAagDhAHIAbgBpADoAIABo
+AHQAdABwADoALwAvAHcAdwB3AC4AZQAtAHMAegBpAGcAbgBvAC4AaAB1AC8AUwBa
+AFMAWgAvMIHIBgNVHR8EgcAwgb0wgbqggbeggbSGIWh0dHA6Ly93d3cuZS1zemln
+bm8uaHUvUm9vdENBLmNybIaBjmxkYXA6Ly9sZGFwLmUtc3ppZ25vLmh1L0NOPU1p
+Y3Jvc2VjJTIwZS1Temlnbm8lMjBSb290JTIwQ0EsT1U9ZS1Temlnbm8lMjBDQSxP
+PU1pY3Jvc2VjJTIwTHRkLixMPUJ1ZGFwZXN0LEM9SFU/Y2VydGlmaWNhdGVSZXZv
+Y2F0aW9uTGlzdDtiaW5hcnkwDgYDVR0PAQH/BAQDAgEGMIGWBgNVHREEgY4wgYuB
+EGluZm9AZS1zemlnbm8uaHWkdzB1MSMwIQYDVQQDDBpNaWNyb3NlYyBlLVN6aWdu
+w7MgUm9vdCBDQTEWMBQGA1UECwwNZS1TemlnbsOzIEhTWjEWMBQGA1UEChMNTWlj
+cm9zZWMgS2Z0LjERMA8GA1UEBxMIQnVkYXBlc3QxCzAJBgNVBAYTAkhVMIGsBgNV
+HSMEgaQwgaGAFMegSXUWYYTbMUuE0vE3QJDvTtz3oXakdDByMQswCQYDVQQGEwJI
+VTERMA8GA1UEBxMIQnVkYXBlc3QxFjAUBgNVBAoTDU1pY3Jvc2VjIEx0ZC4xFDAS
+BgNVBAsTC2UtU3ppZ25vIENBMSIwIAYDVQQDExlNaWNyb3NlYyBlLVN6aWdubyBS
+b290IENBghEAzLjnv04pGv2i3GalHCwPETAdBgNVHQ4EFgQUx6BJdRZhhNsxS4TS
+8TdAkO9O3PcwDQYJKoZIhvcNAQEFBQADggEBANMTnGZjWS7KXHAM/IO8VbH0jgds
+ZifOwTsgqRy7RlRw7lrMoHfqaEQn6/Ip3Xep1fvj1KcExJW4C+FEaGAHQzAxQmHl
+7tnlJNUb3+FKG6qfx1/4ehHqE5MAyopYse7tDk2016g2JnzgOsHVV4Lxdbb9iV/a
+86g4nzUGCM4ilb7N1fy+W955a9x6qWVmvrElWl/tftOsRm1M9DKHtCAE4Gx4sHfR
+hUZLphK3dehKyVZs15KrnfVJONJPU+NVkBHbmJbGSfI+9J8b4PeI3CVimUTYc78/
+MPMMNz7UwiiAc7EBt51alhQBS6kRnSlqLtBdgcDPsiBDxwPgN05dCtxZICU=
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIIECjCCAvKgAwIBAgIJAMJ+QwRORz8ZMA0GCSqGSIb3DQEBCwUAMIGCMQswCQYD
+VQQGEwJIVTERMA8GA1UEBwwIQnVkYXBlc3QxFjAUBgNVBAoMDU1pY3Jvc2VjIEx0
+ZC4xJzAlBgNVBAMMHk1pY3Jvc2VjIGUtU3ppZ25vIFJvb3QgQ0EgMjAwOTEfMB0G
+CSqGSIb3DQEJARYQaW5mb0BlLXN6aWduby5odTAeFw0wOTA2MTYxMTMwMThaFw0y
+OTEyMzAxMTMwMThaMIGCMQswCQYDVQQGEwJIVTERMA8GA1UEBwwIQnVkYXBlc3Qx
+FjAUBgNVBAoMDU1pY3Jvc2VjIEx0ZC4xJzAlBgNVBAMMHk1pY3Jvc2VjIGUtU3pp
+Z25vIFJvb3QgQ0EgMjAwOTEfMB0GCSqGSIb3DQEJARYQaW5mb0BlLXN6aWduby5o
+dTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAOn4j/NjrdqG2KfgQvvP
+kd6mJviZpWNwrZuuyjNAfW2WbqEORO7hE52UQlKavXWFdCyoDh2Tthi3jCyoz/tc
+cbna7P7ofo/kLx2yqHWH2Leh5TvPmUpG0IMZfcChEhyVbUr02MelTTMuhTlAdX4U
+fIASmFDHQWe4oIBhVKZsTh/gnQ4H6cm6M+f+wFUoLAKApxn1ntxVUwOXewdI/5n7
+N4okxFnMUBBjjqqpGrCEGob5X7uxUG6k0QrM1XF+H6cbfPVTbiJfyyvm1HxdrtbC
+xkzlBQHZ7Vf8wSN5/PrIJIOV87VqUQHQd9bpEqH5GoP7ghu5sJf0dgYzQ0mg/wu1
++rUCAwEAAaOBgDB+MA8GA1UdEwEB/wQFMAMBAf8wDgYDVR0PAQH/BAQDAgEGMB0G
+A1UdDgQWBBTLD8bfQkPMPcu1SCOhGnqmKrs0aDAfBgNVHSMEGDAWgBTLD8bfQkPM
+Pcu1SCOhGnqmKrs0aDAbBgNVHREEFDASgRBpbmZvQGUtc3ppZ25vLmh1MA0GCSqG
+SIb3DQEBCwUAA4IBAQDJ0Q5eLtXMs3w+y/w9/w0olZMEyL/azXm4Q5DwpL7v8u8h
+mLzU1F0G9u5C7DBsoKqpyvGvivo/C3NqPuouQH4frlRheesuCDfXI/OMn74dseGk
+ddug4lQUsbocKaQY9hK6ohQU4zE1yED/t+AFdlfBHFny+L/k7SViXITwfn4fs775
+tyERzAMBVnCnEJIeGzSBHq2cGsMEPO0CYdYeBvNfOofyK/FFh+U9rNHHV4S9a67c
+2Pm2G2JwCz02yULyMtd6YebS2z3PyKnJm9zbWETXbzivf3jTo60adbocwTZ8jx5t
+HMN1Rq41Bab2XD0h7lbwyYIiLXpUq3DDfSJlgnCW
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIIEFTCCAv2gAwIBAgIGSUEs5AAQMA0GCSqGSIb3DQEBCwUAMIGnMQswCQYDVQQG
+EwJIVTERMA8GA1UEBwwIQnVkYXBlc3QxFTATBgNVBAoMDE5ldExvY2sgS2Z0LjE3
+MDUGA1UECwwuVGFuw7pzw610dsOhbnlraWFkw7NrIChDZXJ0aWZpY2F0aW9uIFNl
+cnZpY2VzKTE1MDMGA1UEAwwsTmV0TG9jayBBcmFueSAoQ2xhc3MgR29sZCkgRsWR
+dGFuw7pzw610dsOhbnkwHhcNMDgxMjExMTUwODIxWhcNMjgxMjA2MTUwODIxWjCB
+pzELMAkGA1UEBhMCSFUxETAPBgNVBAcMCEJ1ZGFwZXN0MRUwEwYDVQQKDAxOZXRM
+b2NrIEtmdC4xNzA1BgNVBAsMLlRhbsO6c8OtdHbDoW55a2lhZMOzayAoQ2VydGlm
+aWNhdGlvbiBTZXJ2aWNlcykxNTAzBgNVBAMMLE5ldExvY2sgQXJhbnkgKENsYXNz
+IEdvbGQpIEbFkXRhbsO6c8OtdHbDoW55MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8A
+MIIBCgKCAQEAxCRec75LbRTDofTjl5Bu0jBFHjzuZ9lk4BqKf8owyoPjIMHj9DrT
+lF8afFttvzBPhCf2nx9JvMaZCpDyD/V/Q4Q3Y1GLeqVw/HpYzY6b7cNGbIRwXdrz
+AZAj/E4wqX7hJ2Pn7WQ8oLjJM2P+FpD/sLj916jAwJRDC7bVWaaeVtAkH3B5r9s5
+VA1lddkVQZQBr17s9o3x/61k/iCa11zr/qYfCGSji3ZVrR47KGAuhyXoqq8fxmRG
+ILdwfzzeSNuWU7c5d+Qa4scWhHaXWy+7GRWF+GmF9ZmnqfI0p6m2pgP8b4Y9VHx2
+BJtr+UBdADTHLpl1neWIA6pN+APSQnbAGwIDAKiLo0UwQzASBgNVHRMBAf8ECDAG
+AQH/AgEEMA4GA1UdDwEB/wQEAwIBBjAdBgNVHQ4EFgQUzPpnk/C2uNClwB7zU/2M
+U9+D15YwDQYJKoZIhvcNAQELBQADggEBAKt/7hwWqZw8UQCgwBEIBaeZ5m8BiFRh
+bvG5GK1Krf6BQCOUL/t1fC8oS2IkgYIL9WHxHG64YTjrgfpioTtaYtOUZcTh5m2C
++C8lcLIhJsFyUR+MLMOEkMNaj7rP9KdlpeuY0fsFskZ1FSNqb4VjMIDw1Z4fKRzC
+bLBQWV2QWzuoDTDPv31/zvGdg73JRm4gpvlhUbohL3u+pRVjodSVh/GeufOJ8z2F
+uLjbvrW5KfnaNwUASZQDhETnv0Mxz3WLJdH0pmT1kvarBes96aULNmLazAZfNou2
+XjG4Kvte9nHfRCaexOYNkbQudZWAUWpLMKawYqGT8ZvYzsRjdT9ZR7E=
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIIGfTCCBWWgAwIBAgICAQMwDQYJKoZIhvcNAQEEBQAwga8xCzAJBgNVBAYTAkhV
+MRAwDgYDVQQIEwdIdW5nYXJ5MREwDwYDVQQHEwhCdWRhcGVzdDEnMCUGA1UEChMe
+TmV0TG9jayBIYWxvemF0Yml6dG9uc2FnaSBLZnQuMRowGAYDVQQLExFUYW51c2l0
+dmFueWtpYWRvazE2MDQGA1UEAxMtTmV0TG9jayBLb3pqZWd5em9pIChDbGFzcyBB
+KSBUYW51c2l0dmFueWtpYWRvMB4XDTk5MDIyNDIzMTQ0N1oXDTE5MDIxOTIzMTQ0
+N1owga8xCzAJBgNVBAYTAkhVMRAwDgYDVQQIEwdIdW5nYXJ5MREwDwYDVQQHEwhC
+dWRhcGVzdDEnMCUGA1UEChMeTmV0TG9jayBIYWxvemF0Yml6dG9uc2FnaSBLZnQu
+MRowGAYDVQQLExFUYW51c2l0dmFueWtpYWRvazE2MDQGA1UEAxMtTmV0TG9jayBL
+b3pqZWd5em9pIChDbGFzcyBBKSBUYW51c2l0dmFueWtpYWRvMIIBIjANBgkqhkiG
+9w0BAQEFAAOCAQ8AMIIBCgKCAQEAvHSMD7tM9DceqQWC2ObhbHDqeLVu0ThEDaiD
+zl3S1tWBxdRL51uUcCbbO51qTGL3cfNk1mE7PetzozfZz+qMkjvN9wfcZnSX9EUi
+3fRc4L9t875lM+QVOr/bmJBVOMTtplVjC7B4BPTjbsE/jvxReB+SnoPC/tmwqcm8
+WgD/qaiYdPv2LD4VOQ22BFWoDpggQrOxJa1+mm9dU7GrDPzr4PN6s6iz/0b2Y6LY
+Oph7tqyF/7AlT3Rj5xMHpQqPBffAZG9+pyeAlt7ULoZgx2srXnN7F+eRP2QM2Esi
+NCubMvJIH5+hCoR64sKtlz2O1cH5VqNQ6ca0+pii7pXmKgOM3wIDAQABo4ICnzCC
+ApswDgYDVR0PAQH/BAQDAgAGMBIGA1UdEwEB/wQIMAYBAf8CAQQwEQYJYIZIAYb4
+QgEBBAQDAgAHMIICYAYJYIZIAYb4QgENBIICURaCAk1GSUdZRUxFTSEgRXplbiB0
+YW51c2l0dmFueSBhIE5ldExvY2sgS2Z0LiBBbHRhbGFub3MgU3pvbGdhbHRhdGFz
+aSBGZWx0ZXRlbGVpYmVuIGxlaXJ0IGVsamFyYXNvayBhbGFwamFuIGtlc3p1bHQu
+IEEgaGl0ZWxlc2l0ZXMgZm9seWFtYXRhdCBhIE5ldExvY2sgS2Z0LiB0ZXJtZWtm
+ZWxlbG9zc2VnLWJpenRvc2l0YXNhIHZlZGkuIEEgZGlnaXRhbGlzIGFsYWlyYXMg
+ZWxmb2dhZGFzYW5hayBmZWx0ZXRlbGUgYXogZWxvaXJ0IGVsbGVub3J6ZXNpIGVs
+amFyYXMgbWVndGV0ZWxlLiBBeiBlbGphcmFzIGxlaXJhc2EgbWVndGFsYWxoYXRv
+IGEgTmV0TG9jayBLZnQuIEludGVybmV0IGhvbmxhcGphbiBhIGh0dHBzOi8vd3d3
+Lm5ldGxvY2submV0L2RvY3MgY2ltZW4gdmFneSBrZXJoZXRvIGF6IGVsbGVub3J6
+ZXNAbmV0bG9jay5uZXQgZS1tYWlsIGNpbWVuLiBJTVBPUlRBTlQhIFRoZSBpc3N1
+YW5jZSBhbmQgdGhlIHVzZSBvZiB0aGlzIGNlcnRpZmljYXRlIGlzIHN1YmplY3Qg
+dG8gdGhlIE5ldExvY2sgQ1BTIGF2YWlsYWJsZSBhdCBodHRwczovL3d3dy5uZXRs
+b2NrLm5ldC9kb2NzIG9yIGJ5IGUtbWFpbCBhdCBjcHNAbmV0bG9jay5uZXQuMA0G
+CSqGSIb3DQEBBAUAA4IBAQBIJEb3ulZv+sgoA0BO5TE5ayZrU3/b39/zcT0mwBQO
+xmd7I6gMc90Bu8bKbjc5VdXHjFYgDigKDtIqpLBJUsY4B/6+CgmM0ZjPytoUMaFP
+0jn8DxEsQ8Pdq5PHVT5HfBgaANzze9jyf1JsIPQLX2lS9O74silg6+NJMSEN1rUQ
+QeJBCWziGppWS3cC9qCbmieH6FUpccKQn0V4GuEVZD3QDtigdp+uxdAu6tYPVuxk
+f1qbFFgBJ34TUMdrKuZoPL9coAob4Q566eKAw+np9v1sEZ7Q5SgnK1QyQhSCdeZK
+8CtmdWOMovsEPoMOmzbwGOQmIMOM8CgHrTwXZoi1/baI
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIID5jCCAs6gAwIBAgIQV8szb8JcFuZHFhfjkDFo4DANBgkqhkiG9w0BAQUFADBi
+MQswCQYDVQQGEwJVUzEhMB8GA1UEChMYTmV0d29yayBTb2x1dGlvbnMgTC5MLkMu
+MTAwLgYDVQQDEydOZXR3b3JrIFNvbHV0aW9ucyBDZXJ0aWZpY2F0ZSBBdXRob3Jp
+dHkwHhcNMDYxMjAxMDAwMDAwWhcNMjkxMjMxMjM1OTU5WjBiMQswCQYDVQQGEwJV
+UzEhMB8GA1UEChMYTmV0d29yayBTb2x1dGlvbnMgTC5MLkMuMTAwLgYDVQQDEydO
+ZXR3b3JrIFNvbHV0aW9ucyBDZXJ0aWZpY2F0ZSBBdXRob3JpdHkwggEiMA0GCSqG
+SIb3DQEBAQUAA4IBDwAwggEKAoIBAQDkvH6SMG3G2I4rC7xGzuAnlt7e+foS0zwz
+c7MEL7xxjOWftiJgPl9dzgn/ggwbmlFQGiaJ3dVhXRncEg8tCqJDXRfQNJIg6nPP
+OCwGJgl6cvf6UDL4wpPTaaIjzkGxzOTVHzbRijr4jGPiFFlp7Q3Tf2vouAPlT2rl
+mGNpSAW+Lv8ztumXWWn4Zxmuk2GWRBXTcrA/vGp97Eh/jcOrqnErU2lBUzS1sLnF
+BgrEsEX1QV1uiUV7PTsmjHTC5dLRfbIR1PtYMiKagMnc/Qzpf14Dl847ABSHJ3A4
+qY5usyd2mFHgBeMhqxrVhSI8KbWaFsWAqPS7azCPL0YCorEMIuDTAgMBAAGjgZcw
+gZQwHQYDVR0OBBYEFCEwyfsA106Y2oeqKtCnLrFAMadMMA4GA1UdDwEB/wQEAwIB
+BjAPBgNVHRMBAf8EBTADAQH/MFIGA1UdHwRLMEkwR6BFoEOGQWh0dHA6Ly9jcmwu
+bmV0c29sc3NsLmNvbS9OZXR3b3JrU29sdXRpb25zQ2VydGlmaWNhdGVBdXRob3Jp
+dHkuY3JsMA0GCSqGSIb3DQEBBQUAA4IBAQC7rkvnt1frf6ott3NHhWrB5KUd5Oc8
+6fRZZXe1eltajSU24HqXLjjAV2CDmAaDn7l2em5Q4LqILPxFzBiwmZVRDuwduIj/
+h1AcgsLj4DKAv6ALR8jDMe+ZZzKATxcheQxpXN5eNK4CtSbqUN9/GGUsyfJj4akH
+/nxxH2szJGoeBfcFaMBqEssuXmHLrijTfsK0ZpEmXzwuJF/LWA/rKOyvEZbz3Htv
+wKeI8lN3s2Berq4o2jUsbzRF0ybh3uxbTydrFny9RAQYgrOJeRcQcT16ohZO9QHN
+pGxlaKFJdlxDydi8NmdspZS11My5vWo1ViHe2MPr+8ukYEywVaCge1ey
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIID8TCCAtmgAwIBAgIQQT1yx/RrH4FDffHSKFTfmjANBgkqhkiG9w0BAQUFADCB
+ijELMAkGA1UEBhMCQ0gxEDAOBgNVBAoTB1dJU2VLZXkxGzAZBgNVBAsTEkNvcHly
+aWdodCAoYykgMjAwNTEiMCAGA1UECxMZT0lTVEUgRm91bmRhdGlvbiBFbmRvcnNl
+ZDEoMCYGA1UEAxMfT0lTVEUgV0lTZUtleSBHbG9iYWwgUm9vdCBHQSBDQTAeFw0w
+NTEyMTExNjAzNDRaFw0zNzEyMTExNjA5NTFaMIGKMQswCQYDVQQGEwJDSDEQMA4G
+A1UEChMHV0lTZUtleTEbMBkGA1UECxMSQ29weXJpZ2h0IChjKSAyMDA1MSIwIAYD
+VQQLExlPSVNURSBGb3VuZGF0aW9uIEVuZG9yc2VkMSgwJgYDVQQDEx9PSVNURSBX
+SVNlS2V5IEdsb2JhbCBSb290IEdBIENBMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8A
+MIIBCgKCAQEAy0+zAJs9Nt350UlqaxBJH+zYK7LG+DKBKUOVTJoZIyEVRd7jyBxR
+VVuuk+g3/ytr6dTqvirdqFEr12bDYVxgAsj1znJ7O7jyTmUIms2kahnBAbtzptf2
+w93NvKSLtZlhuAGio9RN1AU9ka34tAhxZK9w8RxrfvbDd50kc3vkDIzh2TbhmYsF
+mQvtRTEJysIA2/dyoJaqlYfQjse2YXMNdmaM3Bu0Y6Kff5MTMPGhJ9vZ/yxViJGg
+4E8HsChWjBgbl0SOid3gF27nKu+POQoxhILYQBRJLnpB5Kf+42TMwVlxSywhp1t9
+4B3RLoGbw9ho972WG6xwsRYUC9tguSYBBQIDAQABo1EwTzALBgNVHQ8EBAMCAYYw
+DwYDVR0TAQH/BAUwAwEB/zAdBgNVHQ4EFgQUswN+rja8sHnR3JQmthG+IbJphpQw
+EAYJKwYBBAGCNxUBBAMCAQAwDQYJKoZIhvcNAQEFBQADggEBAEuh/wuHbrP5wUOx
+SPMowB0uyQlB+pQAHKSkq0lPjz0e701vvbyk9vImMMkQyh2I+3QZH4VFvbBsUfk2
+ftv1TDI6QU9bR8/oCy22xBmddMVHxjtqD6wU2zz0c5ypBd8A3HR4+vg1YFkCExh8
+vPtNsCBtQ7tgMHpnM1zFmdH4LTlSc/uMqpclXHLZCB6rTjzjgTGfA6b7wP4piFXa
+hNVQA7bihKOmNqoROgHhGEvWRGizPflTdISzRpFGlgC3gCy24eMQ4tui5yiPAZZi
+Fj4A4xylNoEYokxSdsARo27mHbrjWr42U8U+dY+GaSlYU7Wcu2+fXMUY7N0v4ZjJ
+/L7fCg0=
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIIDtTCCAp2gAwIBAgIQdrEgUnTwhYdGs/gjGvbCwDANBgkqhkiG9w0BAQsFADBt
+MQswCQYDVQQGEwJDSDEQMA4GA1UEChMHV0lTZUtleTEiMCAGA1UECxMZT0lTVEUg
+Rm91bmRhdGlvbiBFbmRvcnNlZDEoMCYGA1UEAxMfT0lTVEUgV0lTZUtleSBHbG9i
+YWwgUm9vdCBHQiBDQTAeFw0xNDEyMDExNTAwMzJaFw0zOTEyMDExNTEwMzFaMG0x
+CzAJBgNVBAYTAkNIMRAwDgYDVQQKEwdXSVNlS2V5MSIwIAYDVQQLExlPSVNURSBG
+b3VuZGF0aW9uIEVuZG9yc2VkMSgwJgYDVQQDEx9PSVNURSBXSVNlS2V5IEdsb2Jh
+bCBSb290IEdCIENBMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA2Be3
+HEokKtaXscriHvt9OO+Y9bI5mE4nuBFde9IllIiCFSZqGzG7qFshISvYD06fWvGx
+WuR51jIjK+FTzJlFXHtPrby/h0oLS5daqPZI7H17Dc0hBt+eFf1Biki3IPShehtX
+1F1Q/7pn2COZH8g/497/b1t3sWtuuMlk9+HKQUYOKXHQuSP8yYFfTvdv37+ErXNk
+u7dCjmn21HYdfp2nuFeKUWdy19SouJVUQHMD9ur06/4oQnc/nSMbsrY9gBQHTC5P
+99UKFg29ZkM3fiNDecNAhvVMKdqOmq0NpQSHiB6F4+lT1ZvIiwNjeOvgGUpuuy9r
+M2RYk61pv48b74JIxwIDAQABo1EwTzALBgNVHQ8EBAMCAYYwDwYDVR0TAQH/BAUw
+AwEB/zAdBgNVHQ4EFgQUNQ/INmNe4qPs+TtmFc5RUuORmj0wEAYJKwYBBAGCNxUB
+BAMCAQAwDQYJKoZIhvcNAQELBQADggEBAEBM+4eymYGQfp3FsLAmzYh7KzKNbrgh
+cViXfa43FK8+5/ea4n32cZiZBKpDdHij40lhPnOMTZTg+XHEthYOU3gf1qKHLwI5
+gSk8rxWYITD+KJAAjNHhy/peyP34EEY7onhCkRd0VQreUGdNZtGn//3ZwLWoo4rO
+ZvUPQ82nK1d7Y0Zqqi5S2PTt4W2tKZB4SLrhI6qjiey1q5bAtEuiHZeeevJuQHHf
+aPFlTc58Bd9TZaml8LGXBHAVRgOY1NK/VLSgWH1Sb9pWJmLU2NuJMW8c8CLC02Ic
+Nc1MaRVUGpCY3useX8p3x8uOPUNpnJpY0CQ73xtAln41rYHHTnG6iBM=
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIIJhjCCB26gAwIBAgIBCzANBgkqhkiG9w0BAQsFADCCAR4xPjA8BgNVBAMTNUF1
+dG9yaWRhZCBkZSBDZXJ0aWZpY2FjaW9uIFJhaXogZGVsIEVzdGFkbyBWZW5lem9s
+YW5vMQswCQYDVQQGEwJWRTEQMA4GA1UEBxMHQ2FyYWNhczEZMBcGA1UECBMQRGlz
+dHJpdG8gQ2FwaXRhbDE2MDQGA1UEChMtU2lzdGVtYSBOYWNpb25hbCBkZSBDZXJ0
+aWZpY2FjaW9uIEVsZWN0cm9uaWNhMUMwQQYDVQQLEzpTdXBlcmludGVuZGVuY2lh
+IGRlIFNlcnZpY2lvcyBkZSBDZXJ0aWZpY2FjaW9uIEVsZWN0cm9uaWNhMSUwIwYJ
+KoZIhvcNAQkBFhZhY3JhaXpAc3VzY2VydGUuZ29iLnZlMB4XDTEwMTIyODE2NTEw
+MFoXDTIwMTIyNTIzNTk1OVowgdExJjAkBgkqhkiG9w0BCQEWF2NvbnRhY3RvQHBy
+b2NlcnQubmV0LnZlMQ8wDQYDVQQHEwZDaGFjYW8xEDAOBgNVBAgTB01pcmFuZGEx
+KjAoBgNVBAsTIVByb3ZlZWRvciBkZSBDZXJ0aWZpY2Fkb3MgUFJPQ0VSVDE2MDQG
+A1UEChMtU2lzdGVtYSBOYWNpb25hbCBkZSBDZXJ0aWZpY2FjaW9uIEVsZWN0cm9u
+aWNhMQswCQYDVQQGEwJWRTETMBEGA1UEAxMKUFNDUHJvY2VydDCCAiIwDQYJKoZI
+hvcNAQEBBQADggIPADCCAgoCggIBANW39KOUM6FGqVVhSQ2oh3NekS1wwQYalNo9
+7BVCwfWMrmoX8Yqt/ICV6oNEolt6Vc5Pp6XVurgfoCfAUFM+jbnADrgV3NZs+J74
+BCXfgI8Qhd19L3uA3VcAZCP4bsm+lU/hdezgfl6VzbHvvnpC2Mks0+saGiKLt38G
+ieU89RLAu9MLmV+QfI4tL3czkkohRqipCKzx9hEC2ZUWno0vluYC3XXCFCpa1sl9
+JcLB/KpnheLsvtF8PPqv1W7/U0HU9TI4seJfxPmOEO8GqQKJ/+MMbpfg353bIdD0
+PghpbNjU5Db4g7ayNo+c7zo3Fn2/omnXO1ty0K+qP1xmk6wKImG20qCZyFSTXai2
+0b1dCl53lKItwIKOvMoDKjSuc/HUtQy9vmebVOvh+qBa7Dh+PsHMosdEMXXqP+UH
+0quhJZb25uSgXTcYOWEAM11G1ADEtMo88aKjPvM6/2kwLkDd9p+cJsmWN63nOaK/
+6mnbVSKVUyqUtd+tFjiBdWbjxywbk5yqjKPK2Ww8F22c3HxT4CAnQzb5EuE8XL1m
+v6JpIzi4mWCZDlZTOpx+FIywBm/xhnaQr/2v/pDGj59/i5IjnOcVdo/Vi5QTcmn7
+K2FjiO/mpF7moxdqWEfLcU8UC17IAggmosvpr2uKGcfLFFb14dq12fy/czja+eev
+bqQ34gcnAgMBAAGjggMXMIIDEzASBgNVHRMBAf8ECDAGAQH/AgEBMDcGA1UdEgQw
+MC6CD3N1c2NlcnRlLmdvYi52ZaAbBgVghl4CAqASDBBSSUYtRy0yMDAwNDAzNi0w
+MB0GA1UdDgQWBBRBDxk4qpl/Qguk1yeYVKIXTC1RVDCCAVAGA1UdIwSCAUcwggFD
+gBStuyIdxuDSAaj9dlBSk+2YwU2u06GCASakggEiMIIBHjE+MDwGA1UEAxM1QXV0
+b3JpZGFkIGRlIENlcnRpZmljYWNpb24gUmFpeiBkZWwgRXN0YWRvIFZlbmV6b2xh
+bm8xCzAJBgNVBAYTAlZFMRAwDgYDVQQHEwdDYXJhY2FzMRkwFwYDVQQIExBEaXN0
+cml0byBDYXBpdGFsMTYwNAYDVQQKEy1TaXN0ZW1hIE5hY2lvbmFsIGRlIENlcnRp
+ZmljYWNpb24gRWxlY3Ryb25pY2ExQzBBBgNVBAsTOlN1cGVyaW50ZW5kZW5jaWEg
+ZGUgU2VydmljaW9zIGRlIENlcnRpZmljYWNpb24gRWxlY3Ryb25pY2ExJTAjBgkq
+hkiG9w0BCQEWFmFjcmFpekBzdXNjZXJ0ZS5nb2IudmWCAQowDgYDVR0PAQH/BAQD
+AgEGME0GA1UdEQRGMESCDnByb2NlcnQubmV0LnZloBUGBWCGXgIBoAwMClBTQy0w
+MDAwMDKgGwYFYIZeAgKgEgwQUklGLUotMzE2MzUzNzMtNzB2BgNVHR8EbzBtMEag
+RKBChkBodHRwOi8vd3d3LnN1c2NlcnRlLmdvYi52ZS9sY3IvQ0VSVElGSUNBRE8t
+UkFJWi1TSEEzODRDUkxERVIuY3JsMCOgIaAfhh1sZGFwOi8vYWNyYWl6LnN1c2Nl
+cnRlLmdvYi52ZTA3BggrBgEFBQcBAQQrMCkwJwYIKwYBBQUHMAGGG2h0dHA6Ly9v
+Y3NwLnN1c2NlcnRlLmdvYi52ZTBBBgNVHSAEOjA4MDYGBmCGXgMBAjAsMCoGCCsG
+AQUFBwIBFh5odHRwOi8vd3d3LnN1c2NlcnRlLmdvYi52ZS9kcGMwDQYJKoZIhvcN
+AQELBQADggIBACtZ6yKZu4SqT96QxtGGcSOeSwORR3C7wJJg7ODU523G0+1ng3dS
+1fLld6c2suNUvtm7CpsR72H0xpkzmfWvADmNg7+mvTV+LFwxNG9s2/NkAZiqlCxB
+3RWGymspThbASfzXg0gTB1GEMVKIu4YXx2sviiCtxQuPcD4quxtxj7mkoP3Yldmv
+Wb8lK5jpY5MvYB7Eqvh39YtsL+1+LrVPQA3uvFd359m21D+VJzog1eWuq2w1n8Gh
+HVnchIHuTQfiSLaeS5UtQbHh6N5+LwUeaO6/u5BlOsju6rEYNxxik6SgMexxbJHm
+pHmJWhSnFFAFTKQAVzAswbVhltw+HoSvOULP5dAssSS830DD7X9jSr3hTxJkhpXz
+sOfIt+FTvZLm8wyWuevo5pLtp4EJFAv8lXrPj9Y0TzYS3F7RNHXGRoAvlQSMx4bE
+qCaJqD8Zm4G7UaRKhqsLEQ+xrmNTbSjq3TNWOByyrYDT13K9mmyZY+gAu0F2Bbdb
+mRiKw7gSXFbPVgx96OLP7bx0R/vu0xdOIk9W/1DzLuY5poLWccret9W6aAjtmcz9
+opLLabid+Qqkpj5PkygqYWwHJgD/ll9ohri4zspV4KuxPX+Y1zMOWj3YeMLEYC/H
+YvBhkdI4sPaeVdtAgAUSM84dkpvRabP/v/GSCmE1P93+hvS84Bpxs2Km
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIIF0DCCBLigAwIBAgIEOrZQizANBgkqhkiG9w0BAQUFADB/MQswCQYDVQQGEwJC
+TTEZMBcGA1UEChMQUXVvVmFkaXMgTGltaXRlZDElMCMGA1UECxMcUm9vdCBDZXJ0
+aWZpY2F0aW9uIEF1dGhvcml0eTEuMCwGA1UEAxMlUXVvVmFkaXMgUm9vdCBDZXJ0
+aWZpY2F0aW9uIEF1dGhvcml0eTAeFw0wMTAzMTkxODMzMzNaFw0yMTAzMTcxODMz
+MzNaMH8xCzAJBgNVBAYTAkJNMRkwFwYDVQQKExBRdW9WYWRpcyBMaW1pdGVkMSUw
+IwYDVQQLExxSb290IENlcnRpZmljYXRpb24gQXV0aG9yaXR5MS4wLAYDVQQDEyVR
+dW9WYWRpcyBSb290IENlcnRpZmljYXRpb24gQXV0aG9yaXR5MIIBIjANBgkqhkiG
+9w0BAQEFAAOCAQ8AMIIBCgKCAQEAv2G1lVO6V/z68mcLOhrfEYBklbTRvM16z/Yp
+li4kVEAkOPcahdxYTMukJ0KX0J+DisPkBgNbAKVRHnAEdOLB1Dqr1607BxgFjv2D
+rOpm2RgbaIr1VxqYuvXtdj182d6UajtLF8HVj71lODqV0D1VNk7feVcxKh7YWWVJ
+WCCYfqtffp/p1k3sg3Spx2zY7ilKhSoGFPlU5tPaZQeLYzcS19Dsw3sgQUSj7cug
+F+FxZc4dZjH3dgEZyH0DWLaVSR2mEiboxgx24ONmy+pdpibu5cxfvWenAScOospU
+xbF6lR1xHkopigPcakXBpBlebzbNw6Kwt/5cOOJSvPhEQ+aQuwIDAQABo4ICUjCC
+Ak4wPQYIKwYBBQUHAQEEMTAvMC0GCCsGAQUFBzABhiFodHRwczovL29jc3AucXVv
+dmFkaXNvZmZzaG9yZS5jb20wDwYDVR0TAQH/BAUwAwEB/zCCARoGA1UdIASCAREw
+ggENMIIBCQYJKwYBBAG+WAABMIH7MIHUBggrBgEFBQcCAjCBxxqBxFJlbGlhbmNl
+IG9uIHRoZSBRdW9WYWRpcyBSb290IENlcnRpZmljYXRlIGJ5IGFueSBwYXJ0eSBh
+c3N1bWVzIGFjY2VwdGFuY2Ugb2YgdGhlIHRoZW4gYXBwbGljYWJsZSBzdGFuZGFy
+ZCB0ZXJtcyBhbmQgY29uZGl0aW9ucyBvZiB1c2UsIGNlcnRpZmljYXRpb24gcHJh
+Y3RpY2VzLCBhbmQgdGhlIFF1b1ZhZGlzIENlcnRpZmljYXRlIFBvbGljeS4wIgYI
+KwYBBQUHAgEWFmh0dHA6Ly93d3cucXVvdmFkaXMuYm0wHQYDVR0OBBYEFItLbe3T
+KbkGGew5Oanwl4Rqy+/fMIGuBgNVHSMEgaYwgaOAFItLbe3TKbkGGew5Oanwl4Rq
+y+/foYGEpIGBMH8xCzAJBgNVBAYTAkJNMRkwFwYDVQQKExBRdW9WYWRpcyBMaW1p
+dGVkMSUwIwYDVQQLExxSb290IENlcnRpZmljYXRpb24gQXV0aG9yaXR5MS4wLAYD
+VQQDEyVRdW9WYWRpcyBSb290IENlcnRpZmljYXRpb24gQXV0aG9yaXR5ggQ6tlCL
+MA4GA1UdDwEB/wQEAwIBBjANBgkqhkiG9w0BAQUFAAOCAQEAitQUtf70mpKnGdSk
+fnIYj9lofFIk3WdvOXrEql494liwTXCYhGHoG+NpGA7O+0dQoE7/8CQfvbLO9Sf8
+7C9TqnN7Az10buYWnuulLsS/VidQK2K6vkscPFVcQR0kvoIgR13VRH56FmjffU1R
+cHhXHTMe/QKZnAzNCgVPx7uOpHX6Sm2xgI4JVrmcGmD+XcHXetwReNDWXcG31a0y
+mQM6isxUJTkxgXsTIlG6Rmyhu576BGxJJnSP0nPrzDCi5upZIof4l/UO/erMkqQW
+xFIY6iHOsfHmhIHluqmGKPJDWl0Snawe2ajlCmqnf6CHKc/yiU3U7MXi5nrQNiOK
+SnQ2+Q==
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIIFYDCCA0igAwIBAgIUeFhfLq0sGUvjNwc1NBMotZbUZZMwDQYJKoZIhvcNAQEL
+BQAwSDELMAkGA1UEBhMCQk0xGTAXBgNVBAoTEFF1b1ZhZGlzIExpbWl0ZWQxHjAc
+BgNVBAMTFVF1b1ZhZGlzIFJvb3QgQ0EgMSBHMzAeFw0xMjAxMTIxNzI3NDRaFw00
+MjAxMTIxNzI3NDRaMEgxCzAJBgNVBAYTAkJNMRkwFwYDVQQKExBRdW9WYWRpcyBM
+aW1pdGVkMR4wHAYDVQQDExVRdW9WYWRpcyBSb290IENBIDEgRzMwggIiMA0GCSqG
+SIb3DQEBAQUAA4ICDwAwggIKAoICAQCgvlAQjunybEC0BJyFuTHK3C3kEakEPBtV
+wedYMB0ktMPvhd6MLOHBPd+C5k+tR4ds7FtJwUrVu4/sh6x/gpqG7D0DmVIB0jWe
+rNrwU8lmPNSsAgHaJNM7qAJGr6Qc4/hzWHa39g6QDbXwz8z6+cZM5cOGMAqNF341
+68Xfuw6cwI2H44g4hWf6Pser4BOcBRiYz5P1sZK0/CPTz9XEJ0ngnjybCKOLXSoh
+4Pw5qlPafX7PGglTvF0FBM+hSo+LdoINofjSxxR3W5A2B4GbPgb6Ul5jxaYA/qXp
+UhtStZI5cgMJYr2wYBZupt0lwgNm3fME0UDiTouG9G/lg6AnhF4EwfWQvTA9xO+o
+abw4m6SkltFi2mnAAZauy8RRNOoMqv8hjlmPSlzkYZqn0ukqeI1RPToV7qJZjqlc
+3sX5kCLliEVx3ZGZbHqfPT2YfF72vhZooF6uCyP8Wg+qInYtyaEQHeTTRCOQiJ/G
+KubX9ZqzWB4vMIkIG1SitZgj7Ah3HJVdYdHLiZxfokqRmu8hqkkWCKi9YSgxyXSt
+hfbZxbGL0eUQMk1fiyA6PEkfM4VZDdvLCXVDaXP7a3F98N/ETH3Goy7IlXnLc6KO
+Tk0k+17kBL5yG6YnLUlamXrXXAkgt3+UuU/xDRxeiEIbEbfnkduebPRq34wGmAOt
+zCjvpUfzUwIDAQABo0IwQDAPBgNVHRMBAf8EBTADAQH/MA4GA1UdDwEB/wQEAwIB
+BjAdBgNVHQ4EFgQUo5fW816iEOGrRZ88F2Q87gFwnMwwDQYJKoZIhvcNAQELBQAD
+ggIBABj6W3X8PnrHX3fHyt/PX8MSxEBd1DKquGrX1RUVRpgjpeaQWxiZTOOtQqOC
+MTaIzen7xASWSIsBx40Bz1szBpZGZnQdT+3Btrm0DWHMY37XLneMlhwqI2hrhVd2
+cDMT/uFPpiN3GPoajOi9ZcnPP/TJF9zrx7zABC4tRi9pZsMbj/7sPtPKlL92CiUN
+qXsCHKnQO18LwIE6PWThv6ctTr1NxNgpxiIY0MWscgKCP6o6ojoilzHdCGPDdRS5
+YCgtW2jgFqlmgiNR9etT2DGbe+m3nUvriBbP+V04ikkwj+3x6xn0dxoxGE1nVGwv
+b2X52z3sIexe9PSLymBlVNFxZPT5pqOBMzYzcfCkeF9OrYMh3jRJjehZrJ3ydlo2
+8hP0r+AJx2EqbPfgna67hkooby7utHnNkDPDs3b69fBsnQGQ+p6Q9pxyz0fawx/k
+NSBT8lTR32GDpgLiJTjehTItXnOQUl1CxM49S+H5GYQd1aJQzEH7QRTDvdbJWqNj
+ZgKAvQU6O0ec7AAmTPWIUb+oI38YB7AL7YsmoWTTYUrrXJ/es69nA7Mf3W1daWhp
+q1467HxpvMc7hU6eFbm0FU/DlXpY18ls6Wy58yljXrQs8C097Vpl4KlbQMJImYFt
+nh8GKjwStIsPm6Ik8KaN1nrgS7ZklmOVhMJKzRwuJIczYOXD
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIIFtzCCA5+gAwIBAgICBQkwDQYJKoZIhvcNAQEFBQAwRTELMAkGA1UEBhMCQk0x
+GTAXBgNVBAoTEFF1b1ZhZGlzIExpbWl0ZWQxGzAZBgNVBAMTElF1b1ZhZGlzIFJv
+b3QgQ0EgMjAeFw0wNjExMjQxODI3MDBaFw0zMTExMjQxODIzMzNaMEUxCzAJBgNV
+BAYTAkJNMRkwFwYDVQQKExBRdW9WYWRpcyBMaW1pdGVkMRswGQYDVQQDExJRdW9W
+YWRpcyBSb290IENBIDIwggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoICAQCa
+GMpLlA0ALa8DKYrwD4HIrkwZhR0In6spRIXzL4GtMh6QRr+jhiYaHv5+HBg6XJxg
+Fyo6dIMzMH1hVBHL7avg5tKifvVrbxi3Cgst/ek+7wrGsxDp3MJGF/hd/aTa/55J
+WpzmM+Yklvc/ulsrHHo1wtZn/qtmUIttKGAr79dgw8eTvI02kfN/+NsRE8Scd3bB
+rrcCaoF6qUWD4gXmuVbBlDePSHFjIuwXZQeVikvfj8ZaCuWw419eaxGrDPmF60Tp
++ARz8un+XJiM9XOva7R+zdRcAitMOeGylZUtQofX1bOQQ7dsE/He3fbE+Ik/0XX1
+ksOR1YqI0JDs3G3eicJlcZaLDQP9nL9bFqyS2+r+eXyt66/3FsvbzSUr5R/7mp/i
+Ucw6UwxI5g69ybR2BlLmEROFcmMDBOAENisgGQLodKcftslWZvB1JdxnwQ5hYIiz
+PtGo/KPaHbDRsSNU30R2be1B2MGyIrZTHN81Hdyhdyox5C315eXbyOD/5YDXC2Og
+/zOhD7osFRXql7PSorW+8oyWHhqPHWykYTe5hnMz15eWniN9gqRMgeKh0bpnX5UH
+oycR7hYQe7xFSkyyBNKr79X9DFHOUGoIMfmR2gyPZFwDwzqLID9ujWc9Otb+fVuI
+yV77zGHcizN300QyNQliBJIWENieJ0f7OyHj+OsdWwIDAQABo4GwMIGtMA8GA1Ud
+EwEB/wQFMAMBAf8wCwYDVR0PBAQDAgEGMB0GA1UdDgQWBBQahGK8SEwzJQTU7tD2
+A8QZRtGUazBuBgNVHSMEZzBlgBQahGK8SEwzJQTU7tD2A8QZRtGUa6FJpEcwRTEL
+MAkGA1UEBhMCQk0xGTAXBgNVBAoTEFF1b1ZhZGlzIExpbWl0ZWQxGzAZBgNVBAMT
+ElF1b1ZhZGlzIFJvb3QgQ0EgMoICBQkwDQYJKoZIhvcNAQEFBQADggIBAD4KFk2f
+BluornFdLwUvZ+YTRYPENvbzwCYMDbVHZF34tHLJRqUDGCdViXh9duqWNIAXINzn
+g/iN/Ae42l9NLmeyhP3ZRPx3UIHmfLTJDQtyU/h2BwdBR5YM++CCJpNVjP4iH2Bl
+fF/nJrP3MpCYUNQ3cVX2kiF495V5+vgtJodmVjB3pjd4M1IQWK4/YY7yarHvGH5K
+WWPKjaJW1acvvFYfzznB4vsKqBUsfU16Y8Zsl0Q80m/DShcK+JDSV6IZUaUtl0Ha
+B0+pUNqQjZRG4T7wlP0QADj1O+hA4bRuVhogzG9Yje0uRY/W6ZM/57Es3zrWIozc
+hLsib9D45MY56QSIPMO661V6bYCZJPVsAfv4l7CUW+v90m/xd2gNNWQjrLhVoQPR
+TUIZ3Ph1WVaj+ahJefivDrkRoHy3au000LYmYjgahwz46P0u05B/B5EqHdZ+XIWD
+mbA4CD/pXvk1B+TJYm5Xf6dQlfe6yJvmjqIBxdZmv3lh8zwc4bmCXF2gw+nYSL0Z
+ohEUGW6yhhtoPkg3Goi3XZZenMfvJ2II4pEZXNLxId26F0KCl3GBUzGpn/Z9Yr9y
+4aOTHcyKJloJONDO1w2AFrR4pTqHTI2KpdVGl/IsELm8VCLAAVBpQ570su9t+Oza
+8eOx79+Rj1QqCyXBJhnEUhAFZdWCEOrCMc0u
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIIFYDCCA0igAwIBAgIURFc0JFuBiZs18s64KztbpybwdSgwDQYJKoZIhvcNAQEL
+BQAwSDELMAkGA1UEBhMCQk0xGTAXBgNVBAoTEFF1b1ZhZGlzIExpbWl0ZWQxHjAc
+BgNVBAMTFVF1b1ZhZGlzIFJvb3QgQ0EgMiBHMzAeFw0xMjAxMTIxODU5MzJaFw00
+MjAxMTIxODU5MzJaMEgxCzAJBgNVBAYTAkJNMRkwFwYDVQQKExBRdW9WYWRpcyBM
+aW1pdGVkMR4wHAYDVQQDExVRdW9WYWRpcyBSb290IENBIDIgRzMwggIiMA0GCSqG
+SIb3DQEBAQUAA4ICDwAwggIKAoICAQChriWyARjcV4g/Ruv5r+LrI3HimtFhZiFf
+qq8nUeVuGxbULX1QsFN3vXg6YOJkApt8hpvWGo6t/x8Vf9WVHhLL5hSEBMHfNrMW
+n4rjyduYNM7YMxcoRvynyfDStNVNCXJJ+fKH46nafaF9a7I6JaltUkSs+L5u+9ym
+c5GQYaYDFCDy54ejiK2toIz/pgslUiXnFgHVy7g1gQyjO/Dh4fxaXc6AcW34Sas+
+O7q414AB+6XrW7PFXmAqMaCvN+ggOp+oMiwMzAkd056OXbxMmO7FGmh77FOm6RQ1
+o9/NgJ8MSPsc9PG/Srj61YxxSscfrf5BmrODXfKEVu+lV0POKa2Mq1W/xPtbAd0j
+IaFYAI7D0GoT7RPjEiuA3GfmlbLNHiJuKvhB1PLKFAeNilUSxmn1uIZoL1NesNKq
+IcGY5jDjZ1XHm26sGahVpkUG0CM62+tlXSoREfA7T8pt9DTEceT/AFr2XK4jYIVz
+8eQQsSWu1ZK7E8EM4DnatDlXtas1qnIhO4M15zHfeiFuuDIIfR0ykRVKYnLP43eh
+vNURG3YBZwjgQQvD6xVu+KQZ2aKrr+InUlYrAoosFCT5v0ICvybIxo/gbjh9Uy3l
+7ZizlWNof/k19N+IxWA1ksB8aRxhlRbQ694Lrz4EEEVlWFA4r0jyWbYW8jwNkALG
+cC4BrTwV1wIDAQABo0IwQDAPBgNVHRMBAf8EBTADAQH/MA4GA1UdDwEB/wQEAwIB
+BjAdBgNVHQ4EFgQU7edvdlq/YOxJW8ald7tyFnGbxD0wDQYJKoZIhvcNAQELBQAD
+ggIBAJHfgD9DCX5xwvfrs4iP4VGyvD11+ShdyLyZm3tdquXK4Qr36LLTn91nMX66
+AarHakE7kNQIXLJgapDwyM4DYvmL7ftuKtwGTTwpD4kWilhMSA/ohGHqPHKmd+RC
+roijQ1h5fq7KpVMNqT1wvSAZYaRsOPxDMuHBR//47PERIjKWnML2W2mWeyAMQ0Ga
+W/ZZGYjeVYg3UQt4XAoeo0L9x52ID8DyeAIkVJOviYeIyUqAHerQbj5hLja7NQ4n
+lv1mNDthcnPxFlxHBlRJAHpYErAK74X9sbgzdWqTHBLmYF5vHX/JHyPLhGGfHoJE
++V+tYlUkmlKY7VHnoX6XOuYvHxHaU4AshZ6rNRDbIl9qxV6XU/IyAgkwo1jwDQHV
+csaxfGl7w/U2Rcxhbl5MlMVerugOXou/983g7aEOGzPuVBj+D77vfoRrQ+NwmNtd
+dbINWQeFFSM51vHfqSYP1kjHs6Yi9TM3WpVHn3u6GBVv/9YUZINJ0gpnIdsPNWNg
+KCLjsZWDzYWm3S8P52dSbrsvhXz1SnPnxT7AvSESBT/8twNJAlvIJebiVDj1eYeM
+HVOyToV7BjjHLPj4sHKNJeV3UvQDHEimUF+IIDBu8oJDqz2XhOdT+yHBTw8imoa4
+WSr2Rz0ZiC3oheGe7IUIarFsNMkd7EgrO3jtZsSOeWmD3n+M
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIIGnTCCBIWgAwIBAgICBcYwDQYJKoZIhvcNAQEFBQAwRTELMAkGA1UEBhMCQk0x
+GTAXBgNVBAoTEFF1b1ZhZGlzIExpbWl0ZWQxGzAZBgNVBAMTElF1b1ZhZGlzIFJv
+b3QgQ0EgMzAeFw0wNjExMjQxOTExMjNaFw0zMTExMjQxOTA2NDRaMEUxCzAJBgNV
+BAYTAkJNMRkwFwYDVQQKExBRdW9WYWRpcyBMaW1pdGVkMRswGQYDVQQDExJRdW9W
+YWRpcyBSb290IENBIDMwggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoICAQDM
+V0IWVJzmmNPTTe7+7cefQzlKZbPoFog02w1ZkXTPkrgEQK0CSzGrvI2RaNggDhoB
+4hp7Thdd4oq3P5kazethq8Jlph+3t723j/z9cI8LoGe+AaJZz3HmDyl2/7FWeUUr
+H556VOijKTVopAFPD6QuN+8bv+OPEKhyq1hX51SGyMnzW9os2l2ObjyjPtr7guXd
+8lyyBTNvijbO0BNO/79KDDRMpsMhvVAEVeuxu537RR5kFd5VAYwCdrXLoT9Cabwv
+vWhDFlaJKjdhkf2mrk7AyxRllDdLkgbvBNDInIjbC3uBr7E9KsRlOni27tyAsdLT
+mZw67mtaa7ONt9XOnMK+pUsvFrGeaDsGb659n/je7Mwpp5ijJUMv7/FfJuGITfhe
+btfZFG4ZM2mnO4SJk8RTVROhUXhA+LjJou57ulJCg54U7QVSWllWp5f8nT8KKdjc
+T5EOE7zelaTfi5m+rJsziO+1ga8bxiJTyPbH7pcUsMV8eFLI8M5ud2CEpukqdiDt
+WAEXMJPpGovgc2PZapKUSU60rUqFxKMiMPwJ7Wgic6aIDFUhWMXhOp8q3crhkODZ
+c6tsgLjoC2SToJyMGf+z0gzskSaHirOi4XCPLArlzW1oUevaPwV/izLmE1xr/l9A
+4iLItLRkT9a6fUg+qGkM17uGcclzuD87nSVL2v9A6wIDAQABo4IBlTCCAZEwDwYD
+VR0TAQH/BAUwAwEB/zCB4QYDVR0gBIHZMIHWMIHTBgkrBgEEAb5YAAMwgcUwgZMG
+CCsGAQUFBwICMIGGGoGDQW55IHVzZSBvZiB0aGlzIENlcnRpZmljYXRlIGNvbnN0
+aXR1dGVzIGFjY2VwdGFuY2Ugb2YgdGhlIFF1b1ZhZGlzIFJvb3QgQ0EgMyBDZXJ0
+aWZpY2F0ZSBQb2xpY3kgLyBDZXJ0aWZpY2F0aW9uIFByYWN0aWNlIFN0YXRlbWVu
+dC4wLQYIKwYBBQUHAgEWIWh0dHA6Ly93d3cucXVvdmFkaXNnbG9iYWwuY29tL2Nw
+czALBgNVHQ8EBAMCAQYwHQYDVR0OBBYEFPLAE+CCQz777i9nMpY1XNu4ywLQMG4G
+A1UdIwRnMGWAFPLAE+CCQz777i9nMpY1XNu4ywLQoUmkRzBFMQswCQYDVQQGEwJC
+TTEZMBcGA1UEChMQUXVvVmFkaXMgTGltaXRlZDEbMBkGA1UEAxMSUXVvVmFkaXMg
+Um9vdCBDQSAzggIFxjANBgkqhkiG9w0BAQUFAAOCAgEAT62gLEz6wPJv92ZVqyM0
+7ucp2sNbtrCD2dDQ4iH782CnO11gUyeim/YIIirnv6By5ZwkajGxkHon24QRiSem
+d1o417+shvzuXYO8BsbRd2sPbSQvS3pspweWyuOEn62Iix2rFo1bZhfZFvSLgNLd
++LJ2w/w4E6oM3kJpK27zPOuAJ9v1pkQNn1pVWQvVDVJIxa6f8i+AxeoyUDUSly7B
+4f/xI4hROJ/yZlZ25w9Rl6VSDE1JUZU2Pb+iSwwQHYaZTKrzchGT5Or2m9qoXadN
+t54CrnMAyNojA+j56hl0YgCUyyIgvpSnWbWCar6ZeXqp8kokUvd0/bpO5qgdAm6x
+DYBEwa7TIzdfu4V8K5Iu6H6li92Z4b8nby1dqnuH/grdS/yO9SbkbnBCbjPsMZ57
+k8HkyWkaPcBrTiJt7qtYTcbQQcEr6k8Sh17rRdhs9ZgC06DYVYoGmRmioHfRMJ6s
+zHXug/WwYjnPbFfiTNKRCw51KBuav/0aQ/HKd/s7j2G4aSgWQgRecCocIdiP4b0j
+Wy10QJLZYxkNc91pvGJHvOB0K7Lrfb5BG7XARsWhIstfTsEokt4YutUqKLsRixeT
+mJlglFwjz1onl14LBQaTNx47aTbrqZ5hHY8y2o4M1nQ+ewkk2gF3R8Q7zTSMmfXK
+4SVhM7JZG+Ju1zdXtg2pEto=
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIIFYDCCA0igAwIBAgIULvWbAiin23r/1aOp7r0DoM8Sah0wDQYJKoZIhvcNAQEL
+BQAwSDELMAkGA1UEBhMCQk0xGTAXBgNVBAoTEFF1b1ZhZGlzIExpbWl0ZWQxHjAc
+BgNVBAMTFVF1b1ZhZGlzIFJvb3QgQ0EgMyBHMzAeFw0xMjAxMTIyMDI2MzJaFw00
+MjAxMTIyMDI2MzJaMEgxCzAJBgNVBAYTAkJNMRkwFwYDVQQKExBRdW9WYWRpcyBM
+aW1pdGVkMR4wHAYDVQQDExVRdW9WYWRpcyBSb290IENBIDMgRzMwggIiMA0GCSqG
+SIb3DQEBAQUAA4ICDwAwggIKAoICAQCzyw4QZ47qFJenMioKVjZ/aEzHs286IxSR
+/xl/pcqs7rN2nXrpixurazHb+gtTTK/FpRp5PIpM/6zfJd5O2YIyC0TeytuMrKNu
+FoM7pmRLMon7FhY4futD4tN0SsJiCnMK3UmzV9KwCoWdcTzeo8vAMvMBOSBDGzXR
+U7Ox7sWTaYI+FrUoRqHe6okJ7UO4BUaKhvVZR74bbwEhELn9qdIoyhA5CcoTNs+c
+ra1AdHkrAj80//ogaX3T7mH1urPnMNA3I4ZyYUUpSFlob3emLoG+B01vr87ERROR
+FHAGjx+f+IdpsQ7vw4kZ6+ocYfx6bIrc1gMLnia6Et3UVDmrJqMz6nWB2i3ND0/k
+A9HvFZcba5DFApCTZgIhsUfei5pKgLlVj7WiL8DWM2fafsSntARE60f75li59wzw
+eyuxwHApw0BiLTtIadwjPEjrewl5qW3aqDCYz4ByA4imW0aucnl8CAMhZa634Ryl
+sSqiMd5mBPfAdOhx3v89WcyWJhKLhZVXGqtrdQtEPREoPHtht+KPZ0/l7DxMYIBp
+VzgeAVuNVejH38DMdyM0SXV89pgR6y3e7UEuFAUCf+D+IOs15xGsIs5XPd7JMG0Q
+A4XN8f+MFrXBsj6IbGB/kE+V9/YtrQE5BwT6dYB9v0lQ7e/JxHwc64B+27bQ3RP+
+ydOc17KXqQIDAQABo0IwQDAPBgNVHRMBAf8EBTADAQH/MA4GA1UdDwEB/wQEAwIB
+BjAdBgNVHQ4EFgQUxhfQvKjqAkPyGwaZXSuQILnXnOQwDQYJKoZIhvcNAQELBQAD
+ggIBADRh2Va1EodVTd2jNTFGu6QHcrxfYWLopfsLN7E8trP6KZ1/AvWkyaiTt3px
+KGmPc+FSkNrVvjrlt3ZqVoAh313m6Tqe5T72omnHKgqwGEfcIHB9UqM+WXzBusnI
+FUBhynLWcKzSt/Ac5IYp8M7vaGPQtSCKFWGafoaYtMnCdvvMujAWzKNhxnQT5Wvv
+oxXqA/4Ti2Tk08HS6IT7SdEQTXlm66r99I0xHnAUrdzeZxNMgRVhvLfZkXdxGYFg
+u/BYpbWcC/ePIlUnwEsBbTuZDdQdm2NnL9DuDcpmvJRPpq3t/O5jrFc/ZSXPsoaP
+0Aj/uHYUbt7lJ+yreLVTubY/6CD50qi+YUbKh4yE8/nxoGibIh6BJpsQBJFxwAYf
+3KDTuVan45gtf4Od34wrnDKOMpTwATwiKp9Dwi7DmDkHOHv8XgBCH/MyJnmDhPbl
+8MFREsALHgQjDFSlTC9JxUrRtm5gDWv8a4uFJGS3iQ6rJUdbPM9+Sb3H6QrG2vd+
+DhcI00iX0HGS8A85PjRqHH3Y8iKuu2n0M7SmSFXRDw4m6Oy2Cy2nhTXN/VnIn9HN
+PlopNLk9hM6xZdRZkZFWdSHBd575euFgndOtBBj0fOtek49TSiIp+EgrPk2GrFt/
+ywaZWWDYWGWVjUTR939+J399roD1B0y2PpxxVJkES/1Y+Zj0
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIIDYTCCAkmgAwIBAgIQCgEBAQAAAnwAAAAKAAAAAjANBgkqhkiG9w0BAQUFADA6
+MRkwFwYDVQQKExBSU0EgU2VjdXJpdHkgSW5jMR0wGwYDVQQLExRSU0EgU2VjdXJp
+dHkgMjA0OCBWMzAeFw0wMTAyMjIyMDM5MjNaFw0yNjAyMjIyMDM5MjNaMDoxGTAX
+BgNVBAoTEFJTQSBTZWN1cml0eSBJbmMxHTAbBgNVBAsTFFJTQSBTZWN1cml0eSAy
+MDQ4IFYzMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAt49VcdKA3Xtp
+eafwGFAyPGJn9gqVB93mG/Oe2dJBVGutn3y+Gc37RqtBaB4Y6lXIL5F4iSj7Jylg
+/9+PjDvJSZu1pJTOAeo+tWN7fyb9Gd3AIb2E0S1PRsNO3Ng3OTsor8udGuorryGl
+wSMiuLgbWhOHV4PR8CDn6E8jQrAApX2J6elhc5SYcSa8LWrg903w8bYqODGBDSnh
+AMFRD0xS+ARaqn1y07iHKrtjEAMqs6FPDVpeRrc9DvV07Jmf+T0kgYim3WBU6JU2
+PcYJk5qjEoAAVZkZR73QpXzDuvsf9/UP+Ky5tfQ3mBMY3oVbtwyCO4dvlTlYMNpu
+AWgXIszACwIDAQABo2MwYTAPBgNVHRMBAf8EBTADAQH/MA4GA1UdDwEB/wQEAwIB
+BjAfBgNVHSMEGDAWgBQHw1EwpKrpRa41JPr/JCwz0LGdjDAdBgNVHQ4EFgQUB8NR
+MKSq6UWuNST6/yQsM9CxnYwwDQYJKoZIhvcNAQEFBQADggEBAF8+hnZuuDU8TjYc
+HnmYv/3VEhF5Ug7uMYm83X/50cYVIeiKAVQNOvtUudZj1LGqlk2iQk3UUx+LEN5/
+Zb5gEydxiKRz44Rj0aRV4VCT5hsOedBnvEbIvz8XDZXmxpBp3ue0L96VfdASPz0+
+f00/FGj1EVDVwfSQpQgdMWD/YIwjVAqv/qFuxdF6Kmh4zx6CCiC0H63lhbJqaHVO
+rSU3lIW+vaHU6rcMSzyd6BIA8F+sDeGscGNz9395nzIlQnQFgCi/vcEkllgVsRch
+6YlL2weIZ/QVrXA+L02FO8K32/6YaCOJ4XQP3vTFhGMpG8zLB8kApKnXwiJPZ9d3
+7CAFYd4=
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIIGizCCBXOgAwIBAgIEO0XlaDANBgkqhkiG9w0BAQUFADBoMQswCQYDVQQGEwJF
+UzEfMB0GA1UEChMWR2VuZXJhbGl0YXQgVmFsZW5jaWFuYTEPMA0GA1UECxMGUEtJ
+R1ZBMScwJQYDVQQDEx5Sb290IENBIEdlbmVyYWxpdGF0IFZhbGVuY2lhbmEwHhcN
+MDEwNzA2MTYyMjQ3WhcNMjEwNzAxMTUyMjQ3WjBoMQswCQYDVQQGEwJFUzEfMB0G
+A1UEChMWR2VuZXJhbGl0YXQgVmFsZW5jaWFuYTEPMA0GA1UECxMGUEtJR1ZBMScw
+JQYDVQQDEx5Sb290IENBIEdlbmVyYWxpdGF0IFZhbGVuY2lhbmEwggEiMA0GCSqG
+SIb3DQEBAQUAA4IBDwAwggEKAoIBAQDGKqtXETcvIorKA3Qdyu0togu8M1JAJke+
+WmmmO3I2F0zo37i7L3bhQEZ0ZQKQUgi0/6iMweDHiVYQOTPvaLRfX9ptI6GJXiKj
+SgbwJ/BXufjpTjJ3Cj9BZPPrZe52/lSqfR0grvPXdMIKX/UIKFIIzFVd0g/bmoGl
+u6GzwZTNVOAydTGRGmKy3nXiz0+J2ZGQD0EbtFpKd71ng+CT516nDOeB0/RSrFOy
+A8dEJvt55cs0YFAQexvba9dHq198aMpunUEDEO5rmXteJajCq+TA81yc477OMUxk
+Hl6AovWDfgzWyoxVjr7gvkkHD6MkQXpYHYTqWBLI4bft75PelAgxAgMBAAGjggM7
+MIIDNzAyBggrBgEFBQcBAQQmMCQwIgYIKwYBBQUHMAGGFmh0dHA6Ly9vY3NwLnBr
+aS5ndmEuZXMwEgYDVR0TAQH/BAgwBgEB/wIBAjCCAjQGA1UdIASCAiswggInMIIC
+IwYKKwYBBAG/VQIBADCCAhMwggHoBggrBgEFBQcCAjCCAdoeggHWAEEAdQB0AG8A
+cgBpAGQAYQBkACAAZABlACAAQwBlAHIAdABpAGYAaQBjAGEAYwBpAPMAbgAgAFIA
+YQDtAHoAIABkAGUAIABsAGEAIABHAGUAbgBlAHIAYQBsAGkAdABhAHQAIABWAGEA
+bABlAG4AYwBpAGEAbgBhAC4ADQAKAEwAYQAgAEQAZQBjAGwAYQByAGEAYwBpAPMA
+bgAgAGQAZQAgAFAAcgDhAGMAdABpAGMAYQBzACAAZABlACAAQwBlAHIAdABpAGYA
+aQBjAGEAYwBpAPMAbgAgAHEAdQBlACAAcgBpAGcAZQAgAGUAbAAgAGYAdQBuAGMA
+aQBvAG4AYQBtAGkAZQBuAHQAbwAgAGQAZQAgAGwAYQAgAHAAcgBlAHMAZQBuAHQA
+ZQAgAEEAdQB0AG8AcgBpAGQAYQBkACAAZABlACAAQwBlAHIAdABpAGYAaQBjAGEA
+YwBpAPMAbgAgAHMAZQAgAGUAbgBjAHUAZQBuAHQAcgBhACAAZQBuACAAbABhACAA
+ZABpAHIAZQBjAGMAaQDzAG4AIAB3AGUAYgAgAGgAdAB0AHAAOgAvAC8AdwB3AHcA
+LgBwAGsAaQAuAGcAdgBhAC4AZQBzAC8AYwBwAHMwJQYIKwYBBQUHAgEWGWh0dHA6
+Ly93d3cucGtpLmd2YS5lcy9jcHMwHQYDVR0OBBYEFHs100DSHHgZZu90ECjcPk+y
+eAT8MIGVBgNVHSMEgY0wgYqAFHs100DSHHgZZu90ECjcPk+yeAT8oWykajBoMQsw
+CQYDVQQGEwJFUzEfMB0GA1UEChMWR2VuZXJhbGl0YXQgVmFsZW5jaWFuYTEPMA0G
+A1UECxMGUEtJR1ZBMScwJQYDVQQDEx5Sb290IENBIEdlbmVyYWxpdGF0IFZhbGVu
+Y2lhbmGCBDtF5WgwDQYJKoZIhvcNAQEFBQADggEBACRhTvW1yEICKrNcda3Fbcrn
+lD+laJWIwVTAEGmiEi8YPyVQqHxK6sYJ2fR1xkDar1CdPaUWu20xxsdzCkj+IHLt
+b8zog2EWRpABlUt9jppSCS/2bxzkoXHPjCpaF3ODR00PNvsETUlR4hTJZGH71BTg
+9J63NI8KJr2XXPR5OkowGcytT6CYirQxlyric21+eLj4iIlPsSKRZEv1UN4D2+XF
+ducTZnV+ZfsBn5OHiJ35Rld8TWCvmHMTI6QgkYH60GFmuH3Rr9ZvHmw96RH9qfmC
+IoaZM3Fa6hlXPZHNqcCjbgcTpsnt+GijnsNacgmHKNHEc8RzGF9QdRYxn7fofMM=
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIIDbTCCAlWgAwIBAgIBATANBgkqhkiG9w0BAQUFADBYMQswCQYDVQQGEwJKUDEr
+MCkGA1UEChMiSmFwYW4gQ2VydGlmaWNhdGlvbiBTZXJ2aWNlcywgSW5jLjEcMBoG
+A1UEAxMTU2VjdXJlU2lnbiBSb290Q0ExMTAeFw0wOTA0MDgwNDU2NDdaFw0yOTA0
+MDgwNDU2NDdaMFgxCzAJBgNVBAYTAkpQMSswKQYDVQQKEyJKYXBhbiBDZXJ0aWZp
+Y2F0aW9uIFNlcnZpY2VzLCBJbmMuMRwwGgYDVQQDExNTZWN1cmVTaWduIFJvb3RD
+QTExMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA/XeqpRyQBTvLTJsz
+i1oURaTnkBbR31fSIRCkF/3frNYfp+TbfPfs37gD2pRY/V1yfIw/XwFndBWW4wI8
+h9uuywGOwvNmxoVF9ALGOrVisq/6nL+k5tSAMJjzDbaTj6nU2DbysPyKyiyhFTOV
+MdrAG/LuYpmGYz+/3ZMqg6h2uRMft85OQoWPIucuGvKVCbIFtUROd6EgvanyTgp9
+UK31BQ1FT0Zx/Sg+U/sE2C3XZR1KG/rPO7AxmjVuyIsG0wCR8pQIZUyxNAYAeoni
+8McDWc/V1uinMrPmmECGxc0nEovMe863ETxiYAcjPitAbpSACW22s293bzUIUPsC
+h8U+iQIDAQABo0IwQDAdBgNVHQ4EFgQUW/hNT7KlhtQ60vFjmqC+CfZXt94wDgYD
+VR0PAQH/BAQDAgEGMA8GA1UdEwEB/wQFMAMBAf8wDQYJKoZIhvcNAQEFBQADggEB
+AKChOBZmLqdWHyGcBvod7bkixTgm2E5P7KN/ed5GIaGHd48HCJqypMWvDzKYC3xm
+KbabfSVSSUOrTC4rbnpwrxYO4wJs+0LmGJ1F2FXI6Dvd5+H0LgscNFxsWEr7jIhQ
+X5Ucv+2rIrVls4W6ng+4reV6G4pQOh29Dbx7VFALuUKvVaAYga1lme++5Jy/xIWr
+QbJUb9wlze144o4MjQlJ3WN7WmmWAiGovVJZ6X01y8hSyn+B/tlr0/cR7SXf+Of5
+pPpyl4RTDaXQMhhRdlkUbA/r7F+AjHVDg8OFmP9Mni0N5HeDk061lgeLKBObjBmN
+QSdJQO7e5iNEOdyhIta6A/I=
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIIDuDCCAqCgAwIBAgIQDPCOXAgWpa1Cf/DrJxhZ0DANBgkqhkiG9w0BAQUFADBI
+MQswCQYDVQQGEwJVUzEgMB4GA1UEChMXU2VjdXJlVHJ1c3QgQ29ycG9yYXRpb24x
+FzAVBgNVBAMTDlNlY3VyZVRydXN0IENBMB4XDTA2MTEwNzE5MzExOFoXDTI5MTIz
+MTE5NDA1NVowSDELMAkGA1UEBhMCVVMxIDAeBgNVBAoTF1NlY3VyZVRydXN0IENv
+cnBvcmF0aW9uMRcwFQYDVQQDEw5TZWN1cmVUcnVzdCBDQTCCASIwDQYJKoZIhvcN
+AQEBBQADggEPADCCAQoCggEBAKukgeWVzfX2FI7CT8rU4niVWJxB4Q2ZQCQXOZEz
+Zum+4YOvYlyJ0fwkW2Gz4BERQRwdbvC4u/jep4G6pkjGnx29vo6pQT64lO0pGtSO
+0gMdA+9tDWccV9cGrcrI9f4Or2YlSASWC12juhbDCE/RRvgUXPLIXgGZbf2IzIao
+wW8xQmxSPmjL8xk037uHGFaAJsTQ3MBv396gwpEWoGQRS0S8Hvbn+mPeZqx2pHGj
+7DaUaHp3pLHnDi+BeuK1cobvomuL8A/b01k/unK8RCSc43Oz969XL0Imnal0ugBS
+8kvNU3xHCzaFDmapCJcWNFfBZveA4+1wVMeT4C4oFVmHursCAwEAAaOBnTCBmjAT
+BgkrBgEEAYI3FAIEBh4EAEMAQTALBgNVHQ8EBAMCAYYwDwYDVR0TAQH/BAUwAwEB
+/zAdBgNVHQ4EFgQUQjK2FvoE/f5dS3rD/fdMQB1aQ68wNAYDVR0fBC0wKzApoCeg
+JYYjaHR0cDovL2NybC5zZWN1cmV0cnVzdC5jb20vU1RDQS5jcmwwEAYJKwYBBAGC
+NxUBBAMCAQAwDQYJKoZIhvcNAQEFBQADggEBADDtT0rhWDpSclu1pqNlGKa7UTt3
+6Z3q059c4EVlew3KW+JwULKUBRSuSceNQQcSc5R+DCMh/bwQf2AQWnL1mA6s7Ll/
+3XpvXdMc9P+IBWlCqQVxyLesJugutIxq/3HcuLHfmbx8IVQr5Fiiu1cprp6poxkm
+D5kuCLDv/WnPmRoJjeOnnyvJNjR7JLN4TJUXpAYmHrZkUjZfYGfZnMUFdAvnZyPS
+CPyI6a6Lf+Ew9Dd+/cYy2i2eRDAwbO4H3tI0/NL/QPZL9GZGBlSm8jIKYyYwa5vR
+3ItHuuG51WLQoqD0ZwV4KWMabwTW+MZMo5qxN7SN5ShLHZ4swrhovO0C7jE=
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIIDvDCCAqSgAwIBAgIQB1YipOjUiolN9BPI8PjqpTANBgkqhkiG9w0BAQUFADBK
+MQswCQYDVQQGEwJVUzEgMB4GA1UEChMXU2VjdXJlVHJ1c3QgQ29ycG9yYXRpb24x
+GTAXBgNVBAMTEFNlY3VyZSBHbG9iYWwgQ0EwHhcNMDYxMTA3MTk0MjI4WhcNMjkx
+MjMxMTk1MjA2WjBKMQswCQYDVQQGEwJVUzEgMB4GA1UEChMXU2VjdXJlVHJ1c3Qg
+Q29ycG9yYXRpb24xGTAXBgNVBAMTEFNlY3VyZSBHbG9iYWwgQ0EwggEiMA0GCSqG
+SIb3DQEBAQUAA4IBDwAwggEKAoIBAQCvNS7YrGxVaQZx5RNoJLNP2MwhR/jxYDiJ
+iQPpvepeRlMJ3Fz1Wuj3RSoC6zFh1ykzTM7HfAo3fg+6MpjhHZevj8fcyTiW89sa
+/FHtaMbQbqR8JNGuQsiWUGMu4P51/pinX0kuleM5M2SOHqRfkNJnPLLZ/kG5VacJ
+jnIFHovdRIWCQtBJwB1g8NEXLJXr9qXBkqPFwqcIYA1gBBCWeZ4WNOaptvolRTnI
+HmX5k/Wq8VLcmZg9pYYaDDUz+kulBAYVHDGA76oYa8J719rO+TMg1fW9ajMtgQT7
+sFzUnKPiXB3jqUJ1XnvUd+85VLrJChgbEplJL4hL/VBi0XPnj3pDAgMBAAGjgZ0w
+gZowEwYJKwYBBAGCNxQCBAYeBABDAEEwCwYDVR0PBAQDAgGGMA8GA1UdEwEB/wQF
+MAMBAf8wHQYDVR0OBBYEFK9EBMJBfkiD2045AuzshHrmzsmkMDQGA1UdHwQtMCsw
+KaAnoCWGI2h0dHA6Ly9jcmwuc2VjdXJldHJ1c3QuY29tL1NHQ0EuY3JsMBAGCSsG
+AQQBgjcVAQQDAgEAMA0GCSqGSIb3DQEBBQUAA4IBAQBjGghAfaReUw132HquHw0L
+URYD7xh8yOOvaliTFGCRsoTciE6+OYo68+aCiV0BN7OrJKQVDpI1WkpEXk5X+nXO
+H0jOZvQ8QCaSmGwb7iRGDBezUqXbpZGRzzfTb+cnCDpOGR86p1hcF895P4vkp9Mm
+I50mD1hp/Ed+stCNi5O/KU9DaXR2Z0vPB4zmAve14bRDtUstFJ/53CYNv6ZHdAbY
+iNE6KTCEztI5gGIbqMdXSbxqVVFnFUq+NQfk1XWYN3kwFNspnWzFacxHVaIw98xc
+f8LDmBxrThaA63p4ZUWiABqvDA1VZDRIuJK58bRQKfJPIx/abKwfROHdI3hRW8cW
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIIDfTCCAmWgAwIBAgIBADANBgkqhkiG9w0BAQUFADBgMQswCQYDVQQGEwJKUDEl
+MCMGA1UEChMcU0VDT00gVHJ1c3QgU3lzdGVtcyBDTy4sTFRELjEqMCgGA1UECxMh
+U2VjdXJpdHkgQ29tbXVuaWNhdGlvbiBFViBSb290Q0ExMB4XDTA3MDYwNjAyMTIz
+MloXDTM3MDYwNjAyMTIzMlowYDELMAkGA1UEBhMCSlAxJTAjBgNVBAoTHFNFQ09N
+IFRydXN0IFN5c3RlbXMgQ08uLExURC4xKjAoBgNVBAsTIVNlY3VyaXR5IENvbW11
+bmljYXRpb24gRVYgUm9vdENBMTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoC
+ggEBALx/7FebJOD+nLpCeamIivqA4PUHKUPqjgo0No0c+qe1OXj/l3X3L+SqawSE
+RMqm4miO/VVQYg+kcQ7OBzgtQoVQrTyWb4vVog7P3kmJPdZkLjjlHmy1V4qe70gO
+zXppFodEtZDkBp2uoQSXWHnvIEqCa4wiv+wfD+mEce3xDuS4GBPMVjZd0ZoeUWs5
+bmB2iDQL87PRsJ3KYeJkHcFGB7hj3R4zZbOOCVVSPbW9/wfrrWFVGCypaZhKqkDF
+MxRldAD5kd6vA0jFQFTcD4SQaCDFkpbcLuUCRarAX1T4bepJz11sS6/vmsJWXMY1
+VkJqMF/Cq/biPT+zyRGPMUzXn0kCAwEAAaNCMEAwHQYDVR0OBBYEFDVK9U2vP9eC
+OKyrcWUXdYydVZPmMA4GA1UdDwEB/wQEAwIBBjAPBgNVHRMBAf8EBTADAQH/MA0G
+CSqGSIb3DQEBBQUAA4IBAQCoh+ns+EBnXcPBZsdAS5f8hxOQWsTvoMpfi7ent/HW
+tWS3irO4G8za+6xmiEHO6Pzk2x6Ipu0nUBsCMCRGef4Eh3CXQHPRwMFXGZpppSeZ
+q51ihPZRwSzJIxXYKLerJRO1RuGGAv8mjMSIkh1W/hln8lXkgKNrnKt34VFxDSDb
+EJrbvXZ5B3eZKK2aXtqxT0QsNY6llsf9g/BYxnnWmHyojf6GPgcWkuF75x3sM3Z+
+Qi5KhfmRiWiEA4Glm5q+4zfFVKtWOxgtQaQM+ELbmaDgcm+7XeEWT1MKZPlO9L9O
+VL14bIjqv5wTJMJwaaJ/D8g8rQjJsJhAoyrniIPtd490
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIIDdzCCAl+gAwIBAgIBADANBgkqhkiG9w0BAQsFADBdMQswCQYDVQQGEwJKUDEl
+MCMGA1UEChMcU0VDT00gVHJ1c3QgU3lzdGVtcyBDTy4sTFRELjEnMCUGA1UECxMe
+U2VjdXJpdHkgQ29tbXVuaWNhdGlvbiBSb290Q0EyMB4XDTA5MDUyOTA1MDAzOVoX
+DTI5MDUyOTA1MDAzOVowXTELMAkGA1UEBhMCSlAxJTAjBgNVBAoTHFNFQ09NIFRy
+dXN0IFN5c3RlbXMgQ08uLExURC4xJzAlBgNVBAsTHlNlY3VyaXR5IENvbW11bmlj
+YXRpb24gUm9vdENBMjCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBANAV
+OVKxUrO6xVmCxF1SrjpDZYBLx/KWvNs2l9amZIyoXvDjChz335c9S672XewhtUGr
+zbl+dp+++T42NKA7wfYxEUV0kz1XgMX5iZnK5atq1LXaQZAQwdbWQonCv/Q4EpVM
+VAX3NuRFg3sUZdbcDE3R3n4MqzvEFb46VqZab3ZpUql6ucjrappdUtAtCms1FgkQ
+hNBqyjoGADdH5H5XTz+L62e4iKrFvlNVspHEfbmwhRkGeC7bYRr6hfVKkaHnFtWO
+ojnflLhwHyg/i/xAXmODPIMqGplrz95Zajv8bxbXH/1KEOtOghY6rCcMU/Gt1SSw
+awNQwS08Ft1ENCcadfsCAwEAAaNCMEAwHQYDVR0OBBYEFAqFqXdlBZh8QIH4D5cs
+OPEK7DzPMA4GA1UdDwEB/wQEAwIBBjAPBgNVHRMBAf8EBTADAQH/MA0GCSqGSIb3
+DQEBCwUAA4IBAQBMOqNErLlFsceTfsgLCkLfZOoc7llsCLqJX2rKSpWeeo8HxdpF
+coJxDjrSzG+ntKEju/Ykn8sX/oymzsLS28yN/HH8AynBbF0zX2S2ZTuJbxh2ePXc
+okgfGT+Ok+vx+hfuzU7jBBJV1uXk3fs+BXziHV7Gp7yXT2g69ekuCkO2r1dcYmh8
+t/2jioSgrGK+KwmHNPBqAbubKVY8/gA3zyNs8U6qtnRGEmyR7jTV7JqR50S+kDFy
+1UkC9gLl9B/rfNmWVan/7Ir5mUf/NVoCqgTLiluHcSmRvaS0eg29mvVXIwAHIRc/
+SjnRBUkLp7Y3gaVdjKozXoEofKd9J+sAro03
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIIDWjCCAkKgAwIBAgIBADANBgkqhkiG9w0BAQUFADBQMQswCQYDVQQGEwJKUDEY
+MBYGA1UEChMPU0VDT00gVHJ1c3QubmV0MScwJQYDVQQLEx5TZWN1cml0eSBDb21t
+dW5pY2F0aW9uIFJvb3RDQTEwHhcNMDMwOTMwMDQyMDQ5WhcNMjMwOTMwMDQyMDQ5
+WjBQMQswCQYDVQQGEwJKUDEYMBYGA1UEChMPU0VDT00gVHJ1c3QubmV0MScwJQYD
+VQQLEx5TZWN1cml0eSBDb21tdW5pY2F0aW9uIFJvb3RDQTEwggEiMA0GCSqGSIb3
+DQEBAQUAA4IBDwAwggEKAoIBAQCzs/5/022x7xZ8V6UMbXaKL0u/ZPtM7orw8yl8
+9f/uKuDp6bpbZCKamm8sOiZpUQWZJtzVHGpxxpp9Hp3dfGzGjGdnSj74cbAZJ6kJ
+DKaVv0uMDPpVmDvY6CKhS3E4eayXkmmziX7qIWgGmBSWh9JhNrxtJ1aeV+7AwFb9
+Ms+k2Y7CI9eNqPPYJayX5HA49LY6tJ07lyZDo6G8SVlyTCMwhwFY9k6+HGhWZq/N
+QV3Is00qVUarH9oe4kA92819uZKAnDfdDJZkndwi92SL32HeFZRSFaB9UslLqCHJ
+xrHty8OVYNEP8Ktw+N/LTX7s1vqr2b1/VPKl6Xn62dZ2JChzAgMBAAGjPzA9MB0G
+A1UdDgQWBBSgc0mZaNyFW2XjmygvV5+9M7wHSDALBgNVHQ8EBAMCAQYwDwYDVR0T
+AQH/BAUwAwEB/zANBgkqhkiG9w0BAQUFAAOCAQEAaECpqLvkT115swW1F7NgE+vG
+kl3g0dNq/vu+m22/xwVtWSDEHPC32oRYAmP6SBbvT6UL90qY8j+eG61Ha2POCEfr
+Uj94nK9NrvjVT8+amCoQQTlSxN3Zmw7vkwGusi7KaEIkQmywszo+zenaSMQVy+n5
+Bw+SUEmK3TGXX8npN6o7WWWXlDLJs58+OmJYxUmtYg5xpTKqL8aJdkNAExNnPaJU
+JRDL8Try2frbSVa7pv6nQTXD4IhhyYjH3zYQIphZ6rBK+1YWc26sTfcioU+tHXot
+RSflMMFe8toTyyVCUZVHA4xsIcx0Qu1T/zOLjw9XARYvz6buyXAiFL39vmwLAw==
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIIDIDCCAgigAwIBAgIBHTANBgkqhkiG9w0BAQUFADA5MQswCQYDVQQGEwJGSTEP
+MA0GA1UEChMGU29uZXJhMRkwFwYDVQQDExBTb25lcmEgQ2xhc3MyIENBMB4XDTAx
+MDQwNjA3Mjk0MFoXDTIxMDQwNjA3Mjk0MFowOTELMAkGA1UEBhMCRkkxDzANBgNV
+BAoTBlNvbmVyYTEZMBcGA1UEAxMQU29uZXJhIENsYXNzMiBDQTCCASIwDQYJKoZI
+hvcNAQEBBQADggEPADCCAQoCggEBAJAXSjWdyvANlsdE+hY3/Ei9vX+ALTU74W+o
+Z6m/AxxNjG8yR9VBaKQTBME1DJqEQ/xcHf+Js+gXGM2RX/uJ4+q/Tl18GybTdXnt
+5oTjV+WtKcT0OijnpXuENmmz/V52vaMtmdOQTiMofRhj8VQ7Jp12W5dCsv+u8E7s
+3TmVToMGf+dJQMjFAbJUWmYdPfz56TwKnoG4cPABi+QjVHzIrviQHgCWctRUz2Ej
+vOr7nQKV0ba5cTppCD8PtOFCx4j1P5iop7oc4HFx71hXgVB6XGt0Rg6DA5jDjqhu
+8nYybieDwnPz3BjotJPqdURrBGAgcVeHnfO+oJAjPYok4doh28MCAwEAAaMzMDEw
+DwYDVR0TAQH/BAUwAwEB/zARBgNVHQ4ECgQISqCqWITTXjwwCwYDVR0PBAQDAgEG
+MA0GCSqGSIb3DQEBBQUAA4IBAQBazof5FnIVV0sd2ZvnoiYw7JNn39Yt0jSv9zil
+zqsWuasvfDXLrNAPtEwr/IDva4yRXzZ299uzGxnq9LIR/WFxRL8oszodv7ND6J+/
+3DEIcbCdjdY0RzKQxmUk96BKfARzjzlvF4xytb1LyHr4e4PDKE6cCepnP7JnBBvD
+FNr450kkkdAdavphOe9r5yF1BgfYErQhIHBCcYHaPJo2vqZbDWpsmh+Re/n570K6
+Tk6ezAyNlNzZRZxe7EJQY670XcSxEtzKO6gunRRaBXW37Ndj4ro1tgQIkejanZz2
+ZrUYrAqmVCY0M9IbwdR/GjqOC6oybtv8TyWf2TLHllpwrN9M
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIIFcDCCA1igAwIBAgIEAJiWjTANBgkqhkiG9w0BAQsFADBYMQswCQYDVQQGEwJO
+TDEeMBwGA1UECgwVU3RhYXQgZGVyIE5lZGVybGFuZGVuMSkwJwYDVQQDDCBTdGFh
+dCBkZXIgTmVkZXJsYW5kZW4gRVYgUm9vdCBDQTAeFw0xMDEyMDgxMTE5MjlaFw0y
+MjEyMDgxMTEwMjhaMFgxCzAJBgNVBAYTAk5MMR4wHAYDVQQKDBVTdGFhdCBkZXIg
+TmVkZXJsYW5kZW4xKTAnBgNVBAMMIFN0YWF0IGRlciBOZWRlcmxhbmRlbiBFViBS
+b290IENBMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEA48d+ifkkSzrS
+M4M1LGns3Amk41GoJSt5uAg94JG6hIXGhaTK5skuU6TJJB79VWZxXSzFYGgEt9nC
+UiY4iKTWO0Cmws0/zZiTs1QUWJZV1VD+hq2kY39ch/aO5ieSZxeSAgMs3NZmdO3d
+Z//BYY1jTw+bbRcwJu+r0h8QoPnFfxZpgQNH7R5ojXKhTbImxrpsX23Wr9GxE46p
+rfNeaXUmGD5BKyF/7otdBwadQ8QpCiv8Kj6GyzyDOvnJDdrFmeK8eEEzduG/L13l
+pJhQDBXd4Pqcfzho0LKmeqfRMb1+ilgnQ7O6M5HTp5gVXJrm0w912fxBmJc+qiXb
+j5IusHsMX/FjqTf5m3VpTCgmJdrV8hJwRVXj33NeN/UhbJCONVrJ0yPr08C+eKxC
+KFhmpUZtcALXEPlLVPxdhkqHz3/KRawRWrUgUY0viEeXOcDPusBCAUCZSCELa6fS
+/ZbV0b5GnUngC6agIk440ME8MLxwjyx1zNDFjFE7PZQIZCZhfbnDZY8UnCHQqv0X
+cgOPvZuM5l5Tnrmd74K74bzickFbIZTTRTeU0d8JOV3nI6qaHcptqAqGhYqCvkIH
+1vI4gnPah1vlPNOePqc7nvQDs/nxfRN0Av+7oeX6AHkcpmZBiFxgV6YuCcS6/ZrP
+px9Aw7vMWgpVSzs4dlG4Y4uElBbmVvMCAwEAAaNCMEAwDwYDVR0TAQH/BAUwAwEB
+/zAOBgNVHQ8BAf8EBAMCAQYwHQYDVR0OBBYEFP6rAJCYniT8qcwaivsnuL8wbqg7
+MA0GCSqGSIb3DQEBCwUAA4ICAQDPdyxuVr5Os7aEAJSrR8kN0nbHhp8dB9O2tLsI
+eK9p0gtJ3jPFrK3CiAJ9Brc1AsFgyb/E6JTe1NOpEyVa/m6irn0F3H3zbPB+po3u
+2dfOWBfoqSmuc0iH55vKbimhZF8ZE/euBhD/UcabTVUlT5OZEAFTdfETzsemQUHS
+v4ilf0X8rLiltTMMgsT7B/Zq5SWEXwbKwYY5EdtYzXc7LMJMD16a4/CrPmEbUCTC
+wPTxGfARKbalGAKb12NMcIxHowNDXLldRqANb/9Zjr7dn3LDWyvfjFvO5QxGbJKy
+CqNMVEIYFRIYvdr8unRu/8G2oGTYqV9Vrp9canaW2HNnh/tNf1zuacpzEPuKqf2e
+vTY4SUmH9A4U8OmHuD+nT3pajnnUk+S7aFKErGzp85hwVXIy+TSrK0m1zSBi5Dp6
+Z2Orltxtrpfs/J92VoguZs9btsmksNcFuuEnL5O7Jiqik7Ab846+HUCjuTaPPoIa
+Gl6I6lD4WeKDRikL40Rc4ZW2aZCaFG+XroHPaO+Zmr615+F/+PoTRxZMzG0IQOeL
+eG9QgkRQP2YGiqtDhFZKDyAthg710tvSeopLzaXoTvFeJiUBWSOgftL2fiFX1ye8
+FVdMpEbB4IMeDExNH08GGeL5qPQ6gqGyeUN51q1veieQA6TqJIc/2b3Z6fJfUEkc
+7uzXLg==
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIIDujCCAqKgAwIBAgIEAJiWijANBgkqhkiG9w0BAQUFADBVMQswCQYDVQQGEwJO
+TDEeMBwGA1UEChMVU3RhYXQgZGVyIE5lZGVybGFuZGVuMSYwJAYDVQQDEx1TdGFh
+dCBkZXIgTmVkZXJsYW5kZW4gUm9vdCBDQTAeFw0wMjEyMTcwOTIzNDlaFw0xNTEy
+MTYwOTE1MzhaMFUxCzAJBgNVBAYTAk5MMR4wHAYDVQQKExVTdGFhdCBkZXIgTmVk
+ZXJsYW5kZW4xJjAkBgNVBAMTHVN0YWF0IGRlciBOZWRlcmxhbmRlbiBSb290IENB
+MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAmNK1URF6gaYUmHFtvszn
+ExvWJw56s2oYHLZhWtVhCb/ekBPHZ+7d89rFDBKeNVU+LCeIQGv33N0iYfXCxw71
+9tV2U02PjLwYdjeFnejKScfST5gTCaI+Ioicf9byEGW07l8Y1Rfj+MX94p2i71MO
+hXeiD+EwR+4A5zN9RGcaC1Hoi6CeUJhoNFIfLm0B8mBF8jHrqTFoKbt6QZ7GGX+U
+tFE5A3+y3qcym7RHjm+0Sq7lr7HcsBthvJly3uSJt3omXdozSVtSnA71iq3DuD3o
+BmrC1SoLbHuEvVYFy4ZlkuxEK7COudxwC0barbxjiDn622r+I/q85Ej0ZytqERAh
+SQIDAQABo4GRMIGOMAwGA1UdEwQFMAMBAf8wTwYDVR0gBEgwRjBEBgRVHSAAMDww
+OgYIKwYBBQUHAgEWLmh0dHA6Ly93d3cucGtpb3ZlcmhlaWQubmwvcG9saWNpZXMv
+cm9vdC1wb2xpY3kwDgYDVR0PAQH/BAQDAgEGMB0GA1UdDgQWBBSofeu8Y6R0E3QA
+7Jbg0zTBLL9s+DANBgkqhkiG9w0BAQUFAAOCAQEABYSHVXQ2YcG70dTGFagTtJ+k
+/rvuFbQvBgwp8qiSpGEN/KtcCFtREytNwiphyPgJWPwtArI5fZlmgb9uXJVFIGzm
+eafR2Bwp/MIgJ1HI8XxdNGdphREwxgDS1/PTfLbwMVcoEoJz6TMvplW0C5GUR5z6
+u3pCMuiufi3IvKwUv9kP2Vv8wfl6leF9fpb8cbDCTMjfRTTJzg3ynGQI0DvDKcWy
+7ZAEwbEpkcUwb8GpcjPM/l0WFywRaed+/sWDCN+83CI6LiBpIzlWYGeQiy52OfsR
+iJf2fL1LuCAWZwWN4jvBcj+UlTfHXbme2JOhF4//DGYVwSR8MnwDHTuhWEUykw==
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIIFyjCCA7KgAwIBAgIEAJiWjDANBgkqhkiG9w0BAQsFADBaMQswCQYDVQQGEwJO
+TDEeMBwGA1UECgwVU3RhYXQgZGVyIE5lZGVybGFuZGVuMSswKQYDVQQDDCJTdGFh
+dCBkZXIgTmVkZXJsYW5kZW4gUm9vdCBDQSAtIEcyMB4XDTA4MDMyNjExMTgxN1oX
+DTIwMDMyNTExMDMxMFowWjELMAkGA1UEBhMCTkwxHjAcBgNVBAoMFVN0YWF0IGRl
+ciBOZWRlcmxhbmRlbjErMCkGA1UEAwwiU3RhYXQgZGVyIE5lZGVybGFuZGVuIFJv
+b3QgQ0EgLSBHMjCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIBAMVZ5291
+qj5LnLW4rJ4L5PnZyqtdj7U5EILXr1HgO+EASGrP2uEGQxGZqhQlEq0i6ABtQ8Sp
+uOUfiUtnvWFI7/3S4GCI5bkYYCjDdyutsDeqN95kWSpGV+RLufg3fNU254DBtvPU
+Z5uW6M7XxgpT0GtJlvOjCwV3SPcl5XCsMBQgJeN/dVrlSPhOewMHBPqCYYdu8DvE
+pMfQ9XQ+pV0aCPKbJdL2rAQmPlU6Yiile7Iwr/g3wtG61jj99O9JMDeZJiFIhQGp
+5Rbn3JBV3w/oOM2ZNyFPXfUib2rFEhZgF1XyZWampzCROME4HYYEhLoaJXhena/M
+UGDWE4dS7WMfbWV9whUYdMrhfmQpjHLYFhN9C0lK8SgbIHRrxT3dsKpICT0ugpTN
+GmXZK4iambwYfp/ufWZ8Pr2UuIHOzZgweMFvZ9C+X+Bo7d7iscksWXiSqt8rYGPy
+5V6548r6f1CGPqI0GAwJaCgRHOThuVw+R7oyPxjMW4T182t0xHJ04eOLoEq9jWYv
+6q012iDTiIJh8BIitrzQ1aTsr1SIJSQ8p22xcik/Plemf1WvbibG/ufMQFxRRIEK
+eN5KzlW/HdXZt1bv8Hb/C3m1r737qWmRRpdogBQ2HbN/uymYNqUg+oJgYjOk7Na6
+B6duxc8UpufWkjTYgfX8HV2qXB72o007uPc5AgMBAAGjgZcwgZQwDwYDVR0TAQH/
+BAUwAwEB/zBSBgNVHSAESzBJMEcGBFUdIAAwPzA9BggrBgEFBQcCARYxaHR0cDov
+L3d3dy5wa2lvdmVyaGVpZC5ubC9wb2xpY2llcy9yb290LXBvbGljeS1HMjAOBgNV
+HQ8BAf8EBAMCAQYwHQYDVR0OBBYEFJFoMocVHYnitfGsNig0jQt8YojrMA0GCSqG
+SIb3DQEBCwUAA4ICAQCoQUpnKpKBglBu4dfYszk78wIVCVBR7y29JHuIhjv5tLyS
+CZa59sCrI2AGeYwRTlHSeYAz+51IvuxBQ4EffkdAHOV6CMqqi3WtFMTC6GY8ggen
+5ieCWxjmD27ZUD6KQhgpxrRW/FYQoAUXvQwjf/ST7ZwaUb7dRUG/kSS0H4zpX897
+IZmflZ85OkYcbPnNe5yQzSipx6lVu6xiNGI1E0sUOlWDuYaNkqbG9AclVMwWVxJK
+gnjIFNkXgiYtXSAfea7+1HAWFpWD2DU5/1JddRwWxRNVz0fMdWVSSt7wsKfkCpYL
++63C4iWEst3kvX5ZbJvw8NjnyvLplzh+ib7M+zkXYT9y2zqR2GUBGR2tUKRXCnxL
+vJxxcypFURmFzI79R6d0lR2o0a9OF7FpJsKqeFdbxU2n5Z4FF5TKsl+gSRiNNOkm
+bEgeqmiSBeGCc1qb3AdbCG19ndeNIdn8FCCqwkXfP+cAslHkwvgFuXkajDTznlvk
+N1trSt8sV4pAWja63XVECDdCcAz+3F4hoKOKwJCcaNpQ5kUQR3i2TtJlycM33+FC
+Y7BXN0Ute4qcvwXqZVUz9zkQxSgqIXobisQk+T8VyJoVIPVVYpbtbZNQvOSqeK3Z
+ywplh6ZmwcSBo3c6WB4L7oOLnR7SUqTMHW+wmG2UMbX4cQrcufx9MmDm66+KAQ==
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIIFdDCCA1ygAwIBAgIEAJiiOTANBgkqhkiG9w0BAQsFADBaMQswCQYDVQQGEwJO
+TDEeMBwGA1UECgwVU3RhYXQgZGVyIE5lZGVybGFuZGVuMSswKQYDVQQDDCJTdGFh
+dCBkZXIgTmVkZXJsYW5kZW4gUm9vdCBDQSAtIEczMB4XDTEzMTExNDExMjg0MloX
+DTI4MTExMzIzMDAwMFowWjELMAkGA1UEBhMCTkwxHjAcBgNVBAoMFVN0YWF0IGRl
+ciBOZWRlcmxhbmRlbjErMCkGA1UEAwwiU3RhYXQgZGVyIE5lZGVybGFuZGVuIFJv
+b3QgQ0EgLSBHMzCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIBAL4yolQP
+cPssXFnrbMSkUeiFKrPMSjTysF/zDsccPVMeiAho2G89rcKezIJnByeHaHE6n3WW
+IkYFsO2tx1ueKt6c/DrGlaf1F2cY5y9JCAxcz+bMNO14+1Cx3Gsy8KL+tjzk7FqX
+xz8ecAgwoNzFs21v0IJyEavSgWhZghe3eJJg+szeP4TrjTgzkApyI/o1zCZxMdFy
+KJLZWyNtZrVtB0LrpjPOktvA9mxjeM3KTj215VKb8b475lRgsGYeCasH/lSJEULR
+9yS6YHgamPfJEf0WwTUaVHXvQ9Plrk7O53vDxk5hUUurmkVLoR9BvUhTFXFkC4az
+5S6+zqQbwSmEorXLCCN2QyIkHxcE1G6cxvx/K2Ya7Irl1s9N9WMJtxU51nus6+N8
+6U78dULI7ViVDAZCopz35HCz33JvWjdAidiFpNfxC95DGdRKWCyMijmev4SH8RY7
+Ngzp07TKbBlBUgmhHbBqv4LvcFEhMtwFdozL92TkA1CvjJFnq8Xy7ljY3r735zHP
+bMk7ccHViLVlvMDoFxcHErVc0qsgk7TmgoNwNsXNo42ti+yjwUOH5kPiNL6VizXt
+BznaqB16nzaeErAMZRKQFWDZJkBE41ZgpRDUajz9QdwOWke275dhdU/Z/seyHdTt
+XUmzqWrLZoQT1Vyg3N9udwbRcXXIV2+vD3dbAgMBAAGjQjBAMA8GA1UdEwEB/wQF
+MAMBAf8wDgYDVR0PAQH/BAQDAgEGMB0GA1UdDgQWBBRUrfrHkleuyjWcLhL75Lpd
+INyUVzANBgkqhkiG9w0BAQsFAAOCAgEAMJmdBTLIXg47mAE6iqTnB/d6+Oea31BD
+U5cqPco8R5gu4RV78ZLzYdqQJRZlwJ9UXQ4DO1t3ApyEtg2YXzTdO2PCwyiBwpwp
+LiniyMMB8jPqKqrMCQj3ZWfGzd/TtiunvczRDnBfuCPRy5FOCvTIeuXZYzbB1N/8
+Ipf3YF3qKS9Ysr1YvY2WTxB1v0h7PVGHoTx0IsL8B3+A3MSs/mrBcDCw6Y5p4ixp
+gZQJut3+TcCDjJRYwEYgr5wfAvg1VUkvRtTA8KCWAg8zxXHzniN9lLf9OtMJgwYh
+/WA9rjLA0u6NpvDntIJ8CsxwyXmA+P5M9zWEGYox+wrZ13+b8KKaa8MFSu1BYBQw
+0aoRQm7TIwIEC8Zl3d1Sd9qBa7Ko+gE4uZbqKmxnl4mUnrzhVNXkanjvSr0rmj1A
+fsbAddJu+2gw7OyLnflJNZoaLNmzlTnVHpL3prllL+U9bTpITAjc5CgSKL59NVzq
+4BZ+Extq1z7XnvwtdbLBFNUjA9tbbws+eC8N3jONFrdI54OagQ97wUNNVQQXOEpR
+1VmiiXTTn74eS9fGbbeIJG9gkaSChVtWQbzQRKtqE77RLFi3EjNYsjdj3BP1lB0/
+QFH1T/U67cjF68IeHRaVesd+QnGTbksVtzDfqu1XhUisHWrdOWnk4Xl4vs4Fv6EM
+94B7IWcnMFk=
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIIEDzCCAvegAwIBAgIBADANBgkqhkiG9w0BAQUFADBoMQswCQYDVQQGEwJVUzEl
+MCMGA1UEChMcU3RhcmZpZWxkIFRlY2hub2xvZ2llcywgSW5jLjEyMDAGA1UECxMp
+U3RhcmZpZWxkIENsYXNzIDIgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkwHhcNMDQw
+NjI5MTczOTE2WhcNMzQwNjI5MTczOTE2WjBoMQswCQYDVQQGEwJVUzElMCMGA1UE
+ChMcU3RhcmZpZWxkIFRlY2hub2xvZ2llcywgSW5jLjEyMDAGA1UECxMpU3RhcmZp
+ZWxkIENsYXNzIDIgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkwggEgMA0GCSqGSIb3
+DQEBAQUAA4IBDQAwggEIAoIBAQC3Msj+6XGmBIWtDBFk385N78gDGIc/oav7PKaf
+8MOh2tTYbitTkPskpD6E8J7oX+zlJ0T1KKY/e97gKvDIr1MvnsoFAZMej2YcOadN
++lq2cwQlZut3f+dZxkqZJRRU6ybH838Z1TBwj6+wRir/resp7defqgSHo9T5iaU0
+X9tDkYI22WY8sbi5gv2cOj4QyDvvBmVmepsZGD3/cVE8MC5fvj13c7JdBmzDI1aa
+K4UmkhynArPkPw2vCHmCuDY96pzTNbO8acr1zJ3o/WSNF4Azbl5KXZnJHoe0nRrA
+1W4TNSNe35tfPe/W93bC6j67eA0cQmdrBNj41tpvi/JEoAGrAgEDo4HFMIHCMB0G
+A1UdDgQWBBS/X7fRzt0fhvRbVazc1xDCDqmI5zCBkgYDVR0jBIGKMIGHgBS/X7fR
+zt0fhvRbVazc1xDCDqmI56FspGowaDELMAkGA1UEBhMCVVMxJTAjBgNVBAoTHFN0
+YXJmaWVsZCBUZWNobm9sb2dpZXMsIEluYy4xMjAwBgNVBAsTKVN0YXJmaWVsZCBD
+bGFzcyAyIENlcnRpZmljYXRpb24gQXV0aG9yaXR5ggEAMAwGA1UdEwQFMAMBAf8w
+DQYJKoZIhvcNAQEFBQADggEBAAWdP4id0ckaVaGsafPzWdqbAYcaT1epoXkJKtv3
+L7IezMdeatiDh6GX70k1PncGQVhiv45YuApnP+yz3SFmH8lU+nLMPUxA2IGvd56D
+eruix/U0F47ZEUD0/CwqTRV/p2JdLiXTAAsgGh1o+Re49L2L7ShZ3U0WixeDyLJl
+xy16paq8U4Zt3VekyvggQQto8PT7dL5WXXp59fkdheMtlb71cZBDzI0fmgAKhynp
+VSJYACPq4xJDKVtHCN2MQWplBqjlIapBtJUhlbl90TSrE9atvNziPTnNvT51cKEY
+WQPJIrSPnNVeKtelttQKbfi3QBFGmh95DmK/D5fs4C8fF5Q=
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIID3TCCAsWgAwIBAgIBADANBgkqhkiG9w0BAQsFADCBjzELMAkGA1UEBhMCVVMx
+EDAOBgNVBAgTB0FyaXpvbmExEzARBgNVBAcTClNjb3R0c2RhbGUxJTAjBgNVBAoT
+HFN0YXJmaWVsZCBUZWNobm9sb2dpZXMsIEluYy4xMjAwBgNVBAMTKVN0YXJmaWVs
+ZCBSb290IENlcnRpZmljYXRlIEF1dGhvcml0eSAtIEcyMB4XDTA5MDkwMTAwMDAw
+MFoXDTM3MTIzMTIzNTk1OVowgY8xCzAJBgNVBAYTAlVTMRAwDgYDVQQIEwdBcml6
+b25hMRMwEQYDVQQHEwpTY290dHNkYWxlMSUwIwYDVQQKExxTdGFyZmllbGQgVGVj
+aG5vbG9naWVzLCBJbmMuMTIwMAYDVQQDEylTdGFyZmllbGQgUm9vdCBDZXJ0aWZp
+Y2F0ZSBBdXRob3JpdHkgLSBHMjCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoC
+ggEBAL3twQP89o/8ArFvW59I2Z154qK3A2FWGMNHttfKPTUuiUP3oWmb3ooa/RMg
+nLRJdzIpVv257IzdIvpy3Cdhl+72WoTsbhm5iSzchFvVdPtrX8WJpRBSiUZV9Lh1
+HOZ/5FSuS/hVclcCGfgXcVnrHigHdMWdSL5stPSksPNkN3mSwOxGXn/hbVNMYq/N
+Hwtjuzqd+/x5AJhhdM8mgkBj87JyahkNmcrUDnXMN/uLicFZ8WJ/X7NfZTD4p7dN
+dloedl40wOiWVpmKs/B/pM293DIxfJHP4F8R+GuqSVzRmZTRouNjWwl2tVZi4Ut0
+HZbUJtQIBFnQmA4O5t78w+wfkPECAwEAAaNCMEAwDwYDVR0TAQH/BAUwAwEB/zAO
+BgNVHQ8BAf8EBAMCAQYwHQYDVR0OBBYEFHwMMh+n2TB/xH1oo2Kooc6rB1snMA0G
+CSqGSIb3DQEBCwUAA4IBAQARWfolTwNvlJk7mh+ChTnUdgWUXuEok21iXQnCoKjU
+sHU48TRqneSfioYmUeYs0cYtbpUgSpIB7LiKZ3sx4mcujJUDJi5DnUox9g61DLu3
+4jd/IroAow57UvtruzvE03lRTs2Q9GcHGcg8RnoNAX3FWOdt5oUwF5okxBDgBPfg
+8n/Uqgr/Qh037ZTlZFkSIHc40zI+OIF1lnP6aI+xy84fxez6nH7PfrHxBy22/L/K
+pL/QlwVKvOoYKAKQvVR4CSFx09F9HdkWsKlhPdAKACL8x3vLCWRFCztAgfd9fDL1
+mMpYjn0q7pBZc2T5NnReJaH1ZgUufzkVqSr7UIuOhWn0
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIID7zCCAtegAwIBAgIBADANBgkqhkiG9w0BAQsFADCBmDELMAkGA1UEBhMCVVMx
+EDAOBgNVBAgTB0FyaXpvbmExEzARBgNVBAcTClNjb3R0c2RhbGUxJTAjBgNVBAoT
+HFN0YXJmaWVsZCBUZWNobm9sb2dpZXMsIEluYy4xOzA5BgNVBAMTMlN0YXJmaWVs
+ZCBTZXJ2aWNlcyBSb290IENlcnRpZmljYXRlIEF1dGhvcml0eSAtIEcyMB4XDTA5
+MDkwMTAwMDAwMFoXDTM3MTIzMTIzNTk1OVowgZgxCzAJBgNVBAYTAlVTMRAwDgYD
+VQQIEwdBcml6b25hMRMwEQYDVQQHEwpTY290dHNkYWxlMSUwIwYDVQQKExxTdGFy
+ZmllbGQgVGVjaG5vbG9naWVzLCBJbmMuMTswOQYDVQQDEzJTdGFyZmllbGQgU2Vy
+dmljZXMgUm9vdCBDZXJ0aWZpY2F0ZSBBdXRob3JpdHkgLSBHMjCCASIwDQYJKoZI
+hvcNAQEBBQADggEPADCCAQoCggEBANUMOsQq+U7i9b4Zl1+OiFOxHz/Lz58gE20p
+OsgPfTz3a3Y4Y9k2YKibXlwAgLIvWX/2h/klQ4bnaRtSmpDhcePYLQ1Ob/bISdm2
+8xpWriu2dBTrz/sm4xq6HZYuajtYlIlHVv8loJNwU4PahHQUw2eeBGg6345AWh1K
+Ts9DkTvnVtYAcMtS7nt9rjrnvDH5RfbCYM8TWQIrgMw0R9+53pBlbQLPLJGmpufe
+hRhJfGZOozptqbXuNC66DQO4M99H67FrjSXZm86B0UVGMpZwh94CDklDhbZsc7tk
+6mFBrMnUVN+HL8cisibMn1lUaJ/8viovxFUcdUBgF4UCVTmLfwUCAwEAAaNCMEAw
+DwYDVR0TAQH/BAUwAwEB/zAOBgNVHQ8BAf8EBAMCAQYwHQYDVR0OBBYEFJxfAN+q
+AdcwKziIorhtSpzyEZGDMA0GCSqGSIb3DQEBCwUAA4IBAQBLNqaEd2ndOxmfZyMI
+bw5hyf2E3F/YNoHN2BtBLZ9g3ccaaNnRbobhiCPPE95Dz+I0swSdHynVv/heyNXB
+ve6SbzJ08pGCL72CQnqtKrcgfU28elUSwhXqvfdqlS5sdJ/PHLTyxQGjhdByPq1z
+qwubdQxtRbeOlKyWN7Wg0I8VRw7j6IPdj/3vQQF3zCepYoUz8jcI73HPdwbeyBkd
+iEDPfUYd/x7H4c7/I9vG+o1VTqkC50cRRj70/b17KSa7qWFiNyi2LSr2EIZkyXCn
+0q23KXB56jzaYyWf/Wi3MOxw+3WKt21gZ7IeyLnp2KhvAotnDU0mV3HaIPzBSlCN
+sSi6
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIIHyTCCBbGgAwIBAgIBATANBgkqhkiG9w0BAQUFADB9MQswCQYDVQQGEwJJTDEW
+MBQGA1UEChMNU3RhcnRDb20gTHRkLjErMCkGA1UECxMiU2VjdXJlIERpZ2l0YWwg
+Q2VydGlmaWNhdGUgU2lnbmluZzEpMCcGA1UEAxMgU3RhcnRDb20gQ2VydGlmaWNh
+dGlvbiBBdXRob3JpdHkwHhcNMDYwOTE3MTk0NjM2WhcNMzYwOTE3MTk0NjM2WjB9
+MQswCQYDVQQGEwJJTDEWMBQGA1UEChMNU3RhcnRDb20gTHRkLjErMCkGA1UECxMi
+U2VjdXJlIERpZ2l0YWwgQ2VydGlmaWNhdGUgU2lnbmluZzEpMCcGA1UEAxMgU3Rh
+cnRDb20gQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkwggIiMA0GCSqGSIb3DQEBAQUA
+A4ICDwAwggIKAoICAQDBiNsJvGxGfHiflXu1M5DycmLWwTYgIiRezul38kMKogZk
+pMyONvg45iPwbm2xPN1yo4UcodM9tDMr0y+v/uqwQVlntsQGfQqedIXWeUyAN3rf
+OQVSWff0G0ZDpNKFhdLDcfN1YjS6LIp/Ho/u7TTQEceWzVI9ujPW3U3eCztKS5/C
+Ji/6tRYccjV3yjxd5srhJosaNnZcAdt0FCX+7bWgiA/deMotHweXMAEtcnn6RtYT
+Kqi5pquDSR3l8u/d5AGOGAqPY1MWhWKpDhk6zLVmpsJrdAfkK+F2PrRt2PZE4XNi
+HzvEvqBTViVsUQn3qqvKv3b9bZvzndu/PWa8DFaqr5hIlTpL36dYUNk4dalb6kMM
+Av+Z6+hsTXBbKWWc3apdzK8BMewM69KN6Oqce+Zu9ydmDBpI125C4z/eIT574Q1w
++2OqqGwaVLRcJXrJosmLFqa7LH4XXgVNWG4SHQHuEhANxjJ/GP/89PrNbpHoNkm+
+Gkhpi8KWTRoSsmkXwQqQ1vp5Iki/untp+HDH+no32NgN0nZPV/+Qt+OR0t3vwmC3
+Zzrd/qqc8NSLf3Iizsafl7b4r4qgEKjZ+xjGtrVcUjyJthkqcwEKDwOzEmDyei+B
+26Nu/yYwl/WL3YlXtq09s68rxbd2AvCl1iuahhQqcvbjM4xdCUsT37uMdBNSSwID
+AQABo4ICUjCCAk4wDAYDVR0TBAUwAwEB/zALBgNVHQ8EBAMCAa4wHQYDVR0OBBYE
+FE4L7xqkQFulF2mHMMo0aEPQQa7yMGQGA1UdHwRdMFswLKAqoCiGJmh0dHA6Ly9j
+ZXJ0LnN0YXJ0Y29tLm9yZy9zZnNjYS1jcmwuY3JsMCugKaAnhiVodHRwOi8vY3Js
+LnN0YXJ0Y29tLm9yZy9zZnNjYS1jcmwuY3JsMIIBXQYDVR0gBIIBVDCCAVAwggFM
+BgsrBgEEAYG1NwEBATCCATswLwYIKwYBBQUHAgEWI2h0dHA6Ly9jZXJ0LnN0YXJ0
+Y29tLm9yZy9wb2xpY3kucGRmMDUGCCsGAQUFBwIBFilodHRwOi8vY2VydC5zdGFy
+dGNvbS5vcmcvaW50ZXJtZWRpYXRlLnBkZjCB0AYIKwYBBQUHAgIwgcMwJxYgU3Rh
+cnQgQ29tbWVyY2lhbCAoU3RhcnRDb20pIEx0ZC4wAwIBARqBl0xpbWl0ZWQgTGlh
+YmlsaXR5LCByZWFkIHRoZSBzZWN0aW9uICpMZWdhbCBMaW1pdGF0aW9ucyogb2Yg
+dGhlIFN0YXJ0Q29tIENlcnRpZmljYXRpb24gQXV0aG9yaXR5IFBvbGljeSBhdmFp
+bGFibGUgYXQgaHR0cDovL2NlcnQuc3RhcnRjb20ub3JnL3BvbGljeS5wZGYwEQYJ
+YIZIAYb4QgEBBAQDAgAHMDgGCWCGSAGG+EIBDQQrFilTdGFydENvbSBGcmVlIFNT
+TCBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eTANBgkqhkiG9w0BAQUFAAOCAgEAFmyZ
+9GYMNPXQhV59CuzaEE44HF7fpiUFS5Eyweg78T3dRAlbB0mKKctmArexmvclmAk8
+jhvh3TaHK0u7aNM5Zj2gJsfyOZEdUauCe37Vzlrk4gNXcGmXCPleWKYK34wGmkUW
+FjgKXlf2Ysd6AgXmvB618p70qSmD+LIU424oh0TDkBreOKk8rENNZEXO3SipXPJz
+ewT4F+irsfMuXGRuczE6Eri8sxHkfY+BUZo7jYn0TZNmezwD7dOaHZrzZVD1oNB1
+ny+v8OqCQ5j4aZyJecRDjkZy42Q2Eq/3JR44iZB3fsNrarnDy0RLrHiQi+fHLB5L
+EUTINFInzQpdn4XBidUaePKVEFMy3YCEZnXZtWgo+2EuvoSoOMCZEoalHmdkrQYu
+L6lwhceWD3yJZfWOQ1QOq92lgDmUYMA0yZZwLKMS9R9Ie70cfmu3nZD0Ijuu+Pwq
+yvqCUqDvr0tVk+vBtfAii6w0TiYiBKGHLHVKt+V9E9e4DGTANtLJL4YSjCMJwRuC
+O3NJo2pXh5Tl1njFmUNj403gdy3hZZlyaQQaRwnmDwFWJPsfvw55qVguucQJAX6V
+um0ABj6y6koQOdjQK/W/7HW/lwLFCRsI3FU34oH7N4RDYiDK51ZLZer+bMEkkySh
+NOsF/5oirpt9P/FlUQqmMGqz9IgcgA38corog14=
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIIHhzCCBW+gAwIBAgIBLTANBgkqhkiG9w0BAQsFADB9MQswCQYDVQQGEwJJTDEW
+MBQGA1UEChMNU3RhcnRDb20gTHRkLjErMCkGA1UECxMiU2VjdXJlIERpZ2l0YWwg
+Q2VydGlmaWNhdGUgU2lnbmluZzEpMCcGA1UEAxMgU3RhcnRDb20gQ2VydGlmaWNh
+dGlvbiBBdXRob3JpdHkwHhcNMDYwOTE3MTk0NjM3WhcNMzYwOTE3MTk0NjM2WjB9
+MQswCQYDVQQGEwJJTDEWMBQGA1UEChMNU3RhcnRDb20gTHRkLjErMCkGA1UECxMi
+U2VjdXJlIERpZ2l0YWwgQ2VydGlmaWNhdGUgU2lnbmluZzEpMCcGA1UEAxMgU3Rh
+cnRDb20gQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkwggIiMA0GCSqGSIb3DQEBAQUA
+A4ICDwAwggIKAoICAQDBiNsJvGxGfHiflXu1M5DycmLWwTYgIiRezul38kMKogZk
+pMyONvg45iPwbm2xPN1yo4UcodM9tDMr0y+v/uqwQVlntsQGfQqedIXWeUyAN3rf
+OQVSWff0G0ZDpNKFhdLDcfN1YjS6LIp/Ho/u7TTQEceWzVI9ujPW3U3eCztKS5/C
+Ji/6tRYccjV3yjxd5srhJosaNnZcAdt0FCX+7bWgiA/deMotHweXMAEtcnn6RtYT
+Kqi5pquDSR3l8u/d5AGOGAqPY1MWhWKpDhk6zLVmpsJrdAfkK+F2PrRt2PZE4XNi
+HzvEvqBTViVsUQn3qqvKv3b9bZvzndu/PWa8DFaqr5hIlTpL36dYUNk4dalb6kMM
+Av+Z6+hsTXBbKWWc3apdzK8BMewM69KN6Oqce+Zu9ydmDBpI125C4z/eIT574Q1w
++2OqqGwaVLRcJXrJosmLFqa7LH4XXgVNWG4SHQHuEhANxjJ/GP/89PrNbpHoNkm+
+Gkhpi8KWTRoSsmkXwQqQ1vp5Iki/untp+HDH+no32NgN0nZPV/+Qt+OR0t3vwmC3
+Zzrd/qqc8NSLf3Iizsafl7b4r4qgEKjZ+xjGtrVcUjyJthkqcwEKDwOzEmDyei+B
+26Nu/yYwl/WL3YlXtq09s68rxbd2AvCl1iuahhQqcvbjM4xdCUsT37uMdBNSSwID
+AQABo4ICEDCCAgwwDwYDVR0TAQH/BAUwAwEB/zAOBgNVHQ8BAf8EBAMCAQYwHQYD
+VR0OBBYEFE4L7xqkQFulF2mHMMo0aEPQQa7yMB8GA1UdIwQYMBaAFE4L7xqkQFul
+F2mHMMo0aEPQQa7yMIIBWgYDVR0gBIIBUTCCAU0wggFJBgsrBgEEAYG1NwEBATCC
+ATgwLgYIKwYBBQUHAgEWImh0dHA6Ly93d3cuc3RhcnRzc2wuY29tL3BvbGljeS5w
+ZGYwNAYIKwYBBQUHAgEWKGh0dHA6Ly93d3cuc3RhcnRzc2wuY29tL2ludGVybWVk
+aWF0ZS5wZGYwgc8GCCsGAQUFBwICMIHCMCcWIFN0YXJ0IENvbW1lcmNpYWwgKFN0
+YXJ0Q29tKSBMdGQuMAMCAQEagZZMaW1pdGVkIExpYWJpbGl0eSwgcmVhZCB0aGUg
+c2VjdGlvbiAqTGVnYWwgTGltaXRhdGlvbnMqIG9mIHRoZSBTdGFydENvbSBDZXJ0
+aWZpY2F0aW9uIEF1dGhvcml0eSBQb2xpY3kgYXZhaWxhYmxlIGF0IGh0dHA6Ly93
+d3cuc3RhcnRzc2wuY29tL3BvbGljeS5wZGYwEQYJYIZIAYb4QgEBBAQDAgAHMDgG
+CWCGSAGG+EIBDQQrFilTdGFydENvbSBGcmVlIFNTTCBDZXJ0aWZpY2F0aW9uIEF1
+dGhvcml0eTANBgkqhkiG9w0BAQsFAAOCAgEAjo/n3JR5fPGFf59Jb2vKXfuM/gTF
+wWLRfUKKvFO3lANmMD+x5wqnUCBVJX92ehQN6wQOQOY+2IirByeDqXWmN3PH/UvS
+Ta0XQMhGvjt/UfzDtgUx3M2FIk5xt/JxXrAaxrqTi3iSSoX4eA+D/i+tLPfkpLst
+0OcNOrg+zvZ49q5HJMqjNTbOx8aHmNrs++myziebiMMEofYLWWivydsQD032ZGNc
+pRJvkrKTlMeIFw6Ttn5ii5B/q06f/ON1FE8qMt9bDeD1e5MNq6HPh+GlBEXoPBKl
+CcWw0bdT82AUuoVpaiF8H3VhFyAXe2w7QSlc4axa0c2Mm+tgHRns9+Ww2vl5GKVF
+P0lDV9LdJNUso/2RjSe15esUBppMeyG7Oq0wBhjA2MFrLH9ZXF2RsXAiV+uKa0hK
+1Q8p7MZAwC+ITGgBF3f0JBlPvfrhsiAhS90a2Cl9qrjeVOwhVYBsHvUwyKMQ5bLm
+KhQxw4UtjJixhlpPiVktucf3HMiKf8CdBUrmQk9io20ppB+Fq9vlgcitKj1MXVuE
+JnHEhV5xJMqlG2zYYdMa4FTbzrqpMrUi9nNBCV24F10OD5mQ1kfabwo6YigUZ4LZ
+8dCAWZvLMdibD4x3TrVoivJs9iQOLWxwxXPR3hTQcY+203sC9uO41Alua551hDnm
+fyWl8kgAwKQB2j8=
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIIFYzCCA0ugAwIBAgIBOzANBgkqhkiG9w0BAQsFADBTMQswCQYDVQQGEwJJTDEW
+MBQGA1UEChMNU3RhcnRDb20gTHRkLjEsMCoGA1UEAxMjU3RhcnRDb20gQ2VydGlm
+aWNhdGlvbiBBdXRob3JpdHkgRzIwHhcNMTAwMTAxMDEwMDAxWhcNMzkxMjMxMjM1
+OTAxWjBTMQswCQYDVQQGEwJJTDEWMBQGA1UEChMNU3RhcnRDb20gTHRkLjEsMCoG
+A1UEAxMjU3RhcnRDb20gQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkgRzIwggIiMA0G
+CSqGSIb3DQEBAQUAA4ICDwAwggIKAoICAQC2iTZbB7cgNr2Cu+EWIAOVeq8Oo1XJ
+JZlKxdBWQYeQTSFgpBSHO839sj60ZwNq7eEPS8CRhXBF4EKe3ikj1AENoBB5uNsD
+vfOpL9HG4A/LnooUCri99lZi8cVytjIl2bLzvWXFDSxu1ZJvGIsAQRSCb0AgJnoo
+D/Uefyf3lLE3PbfHkffiAez9lInhzG7TNtYKGXmu1zSCZf98Qru23QumNK9LYP5/
+Q0kGi4xDuFby2X8hQxfqp0iVAXV16iulQ5XqFYSdCI0mblWbq9zSOdIxHWDirMxW
+RST1HFSr7obdljKF+ExP6JV2tgXdNiNnvP8V4so75qbsO+wmETRIjfaAKxojAuuK
+HDp2KntWFhxyKrOq42ClAJ8Em+JvHhRYW6Vsi1g8w7pOOlz34ZYrPu8HvKTlXcxN
+nw3h3Kq74W4a7I/htkxNeXJdFzULHdfBR9qWJODQcqhaX2YtENwvKhOuJv4KHBnM
+0D4LnMgJLvlblnpHnOl68wVQdJVznjAJ85eCXuaPOQgeWeU1FEIT/wCc976qUM/i
+UUjXuG+v+E5+M5iSFGI6dWPPe/regjupuznixL0sAA7IF6wT700ljtizkC+p2il9
+Ha90OrInwMEePnWjFqmveiJdnxMaz6eg6+OGCtP95paV1yPIN93EfKo2rJgaErHg
+TuixO/XWb/Ew1wIDAQABo0IwQDAPBgNVHRMBAf8EBTADAQH/MA4GA1UdDwEB/wQE
+AwIBBjAdBgNVHQ4EFgQUS8W0QGutHLOlHGVuRjaJhwUMDrYwDQYJKoZIhvcNAQEL
+BQADggIBAHNXPyzVlTJ+N9uWkusZXn5T50HsEbZH77Xe7XRcxfGOSeD8bpkTzZ+K
+2s06Ctg6Wgk/XzTQLwPSZh0avZyQN8gMjgdalEVGKua+etqhqaRpEpKwfTbURIfX
+UfEpY9Z1zRbkJ4kd+MIySP3bmdCPX1R0zKxnNBFi2QwKN4fRoxdIjtIXHfbX/dtl
+6/2o1PXWT6RbdejF0mCy2wl+JYt7ulKSnj7oxXehPOBKc2thz4bcQ///If4jXSRK
+9dNtD2IEBVeC2m6kMyV5Sy5UGYvMLD0w6dEG/+gyRr61M3Z3qAFdlsHB1b6uJcDJ
+HgoJIIihDsnzb02CVAAgp9KP5DlUFy6NHrgbuxu9mk47EDTcnIhT76IxW1hPkWLI
+wpqazRVdOKnWvvgTtZ8SafJQYqz7Fzf07rh1Z2AQ+4NQ+US1dZxAF7L+/XldblhY
+XzD8AK6vM8EOTmy6p6ahfzLbOOCxchcKK5HsamMm7YnUeMx0HgX4a/6ManY5Ka5l
+IxKVCCIcl85bBu4M4ru8H0ST9tg4RQUh7eStqxK2A6RCLi3ECToDZ2mEmuFZkIoo
+hdVddLHRDiBYmxOlsGOm7XtH/UVVMKTumtTm4ofvmMkyghEpIrwACjFeLQ/Ajulr
+so8uBtjRkcfGEvRM/TAXw8HaOFvjqermobp573PYtlNXLfbQ4ddI
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIIFujCCA6KgAwIBAgIJALtAHEP1Xk+wMA0GCSqGSIb3DQEBBQUAMEUxCzAJBgNV
+BAYTAkNIMRUwEwYDVQQKEwxTd2lzc1NpZ24gQUcxHzAdBgNVBAMTFlN3aXNzU2ln
+biBHb2xkIENBIC0gRzIwHhcNMDYxMDI1MDgzMDM1WhcNMzYxMDI1MDgzMDM1WjBF
+MQswCQYDVQQGEwJDSDEVMBMGA1UEChMMU3dpc3NTaWduIEFHMR8wHQYDVQQDExZT
+d2lzc1NpZ24gR29sZCBDQSAtIEcyMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIIC
+CgKCAgEAr+TufoskDhJuqVAtFkQ7kpJcyrhdhJJCEyq8ZVeCQD5XJM1QiyUqt2/8
+76LQwB8CJEoTlo8jE+YoWACjR8cGp4QjK7u9lit/VcyLwVcfDmJlD909Vopz2q5+
+bbqBHH5CjCA12UNNhPqE21Is8w4ndwtrvxEvcnifLtg+5hg3Wipy+dpikJKVyh+c
+6bM8K8vzARO/Ws/BtQpgvd21mWRTuKCWs2/iJneRjOBiEAKfNA+k1ZIzUd6+jbqE
+emA8atufK+ze3gE/bk3lUIbLtK/tREDFylqM2tIrfKjuvqblCqoOpd8FUrdVxyJd
+MmqXl2MT28nbeTZ7hTpKxVKJ+STnnXepgv9VHKVxaSvRAiTysybUa9oEVeXBCsdt
+MDeQKuSeFDNeFhdVxVu1yzSJkvGdJo+hB9TGsnhQ2wwMC3wLjEHXuendjIj3o02y
+MszYF9rNt85mndT9Xv+9lz4pded+p2JYryU0pUHHPbwNUMoDAw8IWh+Vc3hiv69y
+FGkOpeUDDniOJihC8AcLYiAQZzlG+qkDzAQ4embvIIO1jEpWjpEA/I5cgt6IoMPi
+aG59je883WX0XaxR7ySArqpWl2/5rX3aYT+YdzylkbYcjCbaZaIJbcHiVOO5ykxM
+gI93e2CaHt+28kgeDrpOVG2Y4OGiGqJ3UM/EY5LsRxmd6+ZrzsECAwEAAaOBrDCB
+qTAOBgNVHQ8BAf8EBAMCAQYwDwYDVR0TAQH/BAUwAwEB/zAdBgNVHQ4EFgQUWyV7
+lqRlUX64OfPAeGZe6Drn8O4wHwYDVR0jBBgwFoAUWyV7lqRlUX64OfPAeGZe6Drn
+8O4wRgYDVR0gBD8wPTA7BglghXQBWQECAQEwLjAsBggrBgEFBQcCARYgaHR0cDov
+L3JlcG9zaXRvcnkuc3dpc3NzaWduLmNvbS8wDQYJKoZIhvcNAQEFBQADggIBACe6
+45R88a7A3hfm5djV9VSwg/S7zV4Fe0+fdWavPOhWfvxyeDgD2StiGwC5+OlgzczO
+UYrHUDFu4Up+GC9pWbY9ZIEr44OE5iKHjn3g7gKZYbge9LgriBIWhMIxkziWMaa5
+O1M/wySTVltpkuzFwbs4AOPsF6m43Md8AYOfMke6UiI0HTJ6CVanfCU2qT1L2sCC
+bwq7EsiHSycR+R4tx5M/nttfJmtS2S6K8RTGRI0Vqbe/vd6mGu6uLftIdxf+u+yv
+GPUqUfA5hJeVbG4bwyvEdGB5JbAKJ9/fXtI5z0V9QkvfsywexcZdylU6oJxpmo/a
+77KwPJ+HbBIrZXAVUjEaJM9vMSNQH4xPjyPDdEFjHFWoFN0+4FFQz/EbMFYOkrCC
+hdiDyyJkvC24JdVUorgG6q2SpCSgwYa1ShNqR88uC1aVVMvOmttqtKay20EIhid3
+92qgQmwLOM7XdVAyksLfKzAiSNDVQTglXaTpXZ/GlHXQRf0wl0OPkKsKx4ZzYEpp
+Ld6leNcG2mqeSz53OiATIgHQv2ieY2BrNU0LbbqhPcCT4H8js1WtciVORvnSFu+w
+ZMEBnunKoGqYDs/YYPIvSbjkQuE4NRb0yG5P94FW6LqjviOvrv1vA+ACOzB2+htt
+Qc8Bsem4yWb02ybzOqR08kkkW8mw0FfB+j564ZfJ
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIIFvTCCA6WgAwIBAgIITxvUL1S7L0swDQYJKoZIhvcNAQEFBQAwRzELMAkGA1UE
+BhMCQ0gxFTATBgNVBAoTDFN3aXNzU2lnbiBBRzEhMB8GA1UEAxMYU3dpc3NTaWdu
+IFNpbHZlciBDQSAtIEcyMB4XDTA2MTAyNTA4MzI0NloXDTM2MTAyNTA4MzI0Nlow
+RzELMAkGA1UEBhMCQ0gxFTATBgNVBAoTDFN3aXNzU2lnbiBBRzEhMB8GA1UEAxMY
+U3dpc3NTaWduIFNpbHZlciBDQSAtIEcyMIICIjANBgkqhkiG9w0BAQEFAAOCAg8A
+MIICCgKCAgEAxPGHf9N4Mfc4yfjDmUO8x/e8N+dOcbpLj6VzHVxumK4DV644N0Mv
+Fz0fyM5oEMF4rhkDKxD6LHmD9ui5aLlV8gREpzn5/ASLHvGiTSf5YXu6t+WiE7br
+YT7QbNHm+/pe7R20nqA1W6GSy/BJkv6FCgU+5tkL4k+73JU3/JHpMjUi0R86TieF
+nbAVlDLaYQ1HTWBCrpJH6INaUFjpiou5XaHc3ZlKHzZnu0jkg7Y360g6rw9njxcH
+6ATK72oxh9TAtvmUcXtnZLi2kUpCe2UuMGoM9ZDulebyzYLs2aFK7PayS+VFheZt
+eJMELpyCbTapxDFkH4aDCyr0NQp4yVXPQbBH6TCfmb5hqAaEuSh6XzjZG6k4sIN/
+c8HDO0gqgg8hm7jMqDXDhBuDsz6+pJVpATqJAHgE2cn0mRmrVn5bi4Y5FZGkECwJ
+MoBgs5PAKrYYC51+jUnyEEp/+dVGLxmSo5mnJqy7jDzmDrxHB9xzUfFwZC8I+bRH
+HTBsROopN4WSaGa8gzj+ezku01DwH/teYLappvonQfGbGHLy9YR0SslnxFSuSGTf
+jNFusB3hB48IHpmccelM2KX3RxIfdNFRnobzwqIjQAtz20um53MGjMGg6cFZrEb6
+5i/4z3GcRm25xBWNOHkDRUjvxF3XCO6HOSKGsg0PWEP3calILv3q1h8CAwEAAaOB
+rDCBqTAOBgNVHQ8BAf8EBAMCAQYwDwYDVR0TAQH/BAUwAwEB/zAdBgNVHQ4EFgQU
+F6DNweRBtjpbO8tFnb0cwpj6hlgwHwYDVR0jBBgwFoAUF6DNweRBtjpbO8tFnb0c
+wpj6hlgwRgYDVR0gBD8wPTA7BglghXQBWQEDAQEwLjAsBggrBgEFBQcCARYgaHR0
+cDovL3JlcG9zaXRvcnkuc3dpc3NzaWduLmNvbS8wDQYJKoZIhvcNAQEFBQADggIB
+AHPGgeAn0i0P4JUw4ppBf1AsX19iYamGamkYDHRJ1l2E6kFSGG9YrVBWIGrGvShp
+WJHckRE1qTodvBqlYJ7YH39FkWnZfrt4csEGDyrOj4VwYaygzQu4OSlWhDJOhrs9
+xCrZ1x9y7v5RoSJBsXECYxqCsGKrXlcSH9/L3XWgwF15kIwb4FDm3jH+mHtwX6WQ
+2K34ArZv02DdQEsixT2tOnqfGhpHkXkzuoLcMmkDlm4fS/Bx/uNncqCxv1yL5PqZ
+IseEuRuNI5c/7SXgz2W79WEE790eslpBIlqhn10s6FvJbakMDHiqYMZWjwFaDGi8
+aRl5xB9+lwW/xekkUV7U1UtT7dkjWjYDZaPBA61BMPNGG4WQr2W11bHkFlt4dR2X
+em1ZqSqPe97Dh4kQmUlzeMg9vVE1dCrV8X5pGyq7O70luJpaPXJhkGaH7gzWTdQR
+dAtq/gsD/KNVV4n+SsuuWxcFyPKNIzFTONItaj+CuY0IavdeQXRuwxF+B6wpYJE/
+OMpXEA29MC/HpeZBoNquBYeaoKRlbEwJDIm6uNO5wJOKMPqN5ZprFQFOZ6raYlY+
+hAhm0sQ2fac+EPyI4NSA5QC9qvNOBqN6avlicuMJT+ubDgEj8Z+7fNzcbBGXJbLy
+tGMU0gYqZ4yD9c7qB9iaah7s5Aq7KkzrCWA5zspi2C5u
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIIF2TCCA8GgAwIBAgIQXAuFXAvnWUHfV8w/f52oNjANBgkqhkiG9w0BAQUFADBk
+MQswCQYDVQQGEwJjaDERMA8GA1UEChMIU3dpc3Njb20xJTAjBgNVBAsTHERpZ2l0
+YWwgQ2VydGlmaWNhdGUgU2VydmljZXMxGzAZBgNVBAMTElN3aXNzY29tIFJvb3Qg
+Q0EgMTAeFw0wNTA4MTgxMjA2MjBaFw0yNTA4MTgyMjA2MjBaMGQxCzAJBgNVBAYT
+AmNoMREwDwYDVQQKEwhTd2lzc2NvbTElMCMGA1UECxMcRGlnaXRhbCBDZXJ0aWZp
+Y2F0ZSBTZXJ2aWNlczEbMBkGA1UEAxMSU3dpc3Njb20gUm9vdCBDQSAxMIICIjAN
+BgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEA0LmwqAzZuz8h+BvVM5OAFmUgdbI9
+m2BtRsiMMW8Xw/qabFbtPMWRV8PNq5ZJkCoZSx6jbVfd8StiKHVFXqrWW/oLJdih
+FvkcxC7mlSpnzNApbjyFNDhhSbEAn9Y6cV9Nbc5fuankiX9qUvrKm/LcqfmdmUc/
+TilftKaNXXsLmREDA/7n29uj/x2lzZAeAR81sH8A25Bvxn570e56eqeqDFdvpG3F
+EzuwpdntMhy0XmeLVNxzh+XTF3xmUHJd1BpYwdnP2IkCb6dJtDZd0KTeByy2dbco
+kdaXvij1mB7qWybJvbCXc9qukSbraMH5ORXWZ0sKbU/Lz7DkQnGMU3nn7uHbHaBu
+HYwadzVcFh4rUx80i9Fs/PJnB3r1re3WmquhsUvhzDdf/X/NTa64H5xD+SpYVUNF
+vJbNcA78yeNmuk6NO4HLFWR7uZToXTNShXEuT46iBhFRyePLoW4xCGQMwtI89Tbo
+19AOeCMgkckkKmUpWyL3Ic6DXqTz3kvTaI9GdVyDCW4pa8RwjPWd1yAv/0bSKzjC
+L3UcPX7ape8eYIVpQtPM+GP+HkM5haa2Y0EQs3MevNP6yn0WR+Kn1dCjigoIlmJW
+bjTb2QK5MHXjBNLnj8KwEUAKrNVxAmKLMb7dxiNYMUJDLXT5xp6mig/p/r+D5kNX
+JLrvRjSq1xIBOO0CAwEAAaOBhjCBgzAOBgNVHQ8BAf8EBAMCAYYwHQYDVR0hBBYw
+FDASBgdghXQBUwABBgdghXQBUwABMBIGA1UdEwEB/wQIMAYBAf8CAQcwHwYDVR0j
+BBgwFoAUAyUv3m+CATpcLNwroWm1Z9SM0/0wHQYDVR0OBBYEFAMlL95vggE6XCzc
+K6FptWfUjNP9MA0GCSqGSIb3DQEBBQUAA4ICAQA1EMvspgQNDQ/NwNurqPKIlwzf
+ky9NfEBWMXrrpA9gzXrzvsMnjgM+pN0S734edAY8PzHyHHuRMSG08NBsl9Tpl7Ik
+Vh5WwzW9iAUPWxAaZOHHgjD5Mq2eUCzneAXQMbFamIp1TpBcahQq4FJHgmDmHtqB
+sfsUC1rxn9KVuj7QG9YVHaO+htXbD8BJZLsuUBlL0iT43R4HVtA4oJVwIHaM190e
+3p9xxCPvgxNcoyQVTSlAPGrEqdi3pkSlDfTgnXceQHAm/NrZNuR55LU/vJtlvrsR
+ls/bxig5OgjOR1tTWsWZ/l2p3e9M1MalrQLmjAcSHm8D0W+go/MpvRLHUKKwf4ip
+mXeascClOS5cfGniLLDqN2qk4Vrh9VDlg++luyqI54zb/W1elxmofmZ1a3Hqv7HH
+b6D0jqTsNFFbjCYDcKF31QESVwA12yPeDooomf2xEG9L/zgtYE4snOtnta1J7ksf
+rK/7DZBaZmBwXarNeNQk7shBoJMBkpxqnvy5JMWzFYJ+vq6VK+uxwNrjAWALXmms
+hFZhvnEX/h0TD/7Gh0Xp/jKgGg0TpJRVcaUWi7rKibCyx/yP2FS1k2Kdzs9Z+z0Y
+zirLNRWCXf9UIltxUvu3yf5gmwBBZPCqKuy2QkPOiWaByIufOVQDJdMWNY6E0F/6
+MBr1mmz0DlP5OlvRHA==
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIIF2TCCA8GgAwIBAgIQHp4o6Ejy5e/DfEoeWhhntjANBgkqhkiG9w0BAQsFADBk
+MQswCQYDVQQGEwJjaDERMA8GA1UEChMIU3dpc3Njb20xJTAjBgNVBAsTHERpZ2l0
+YWwgQ2VydGlmaWNhdGUgU2VydmljZXMxGzAZBgNVBAMTElN3aXNzY29tIFJvb3Qg
+Q0EgMjAeFw0xMTA2MjQwODM4MTRaFw0zMTA2MjUwNzM4MTRaMGQxCzAJBgNVBAYT
+AmNoMREwDwYDVQQKEwhTd2lzc2NvbTElMCMGA1UECxMcRGlnaXRhbCBDZXJ0aWZp
+Y2F0ZSBTZXJ2aWNlczEbMBkGA1UEAxMSU3dpc3Njb20gUm9vdCBDQSAyMIICIjAN
+BgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAlUJOhJ1R5tMJ6HJaI2nbeHCOFvEr
+jw0DzpPMLgAIe6szjPTpQOYXTKueuEcUMncy3SgM3hhLX3af+Dk7/E6J2HzFZ++r
+0rk0X2s682Q2zsKwzxNoysjL67XiPS4h3+os1OD5cJZM/2pYmLcX5BtS5X4HAB1f
+2uY+lQS3aYg5oUFgJWFLlTloYhyxCwWJwDaCFCE/rtuh/bxvHGCGtlOUSbkrRsVP
+ACu/obvLP+DHVxxX6NZp+MEkUp2IVd3Chy50I9AU/SpHWrumnf2U5NGKpV+GY3aF
+y6//SSj8gO1MedK75MDvAe5QQQg1I3ArqRa0jG6F6bYRzzHdUyYb3y1aSgJA/MTA
+tukxGggo5WDDH8SQjhBiYEQN7Aq+VRhxLKX0srwVYv8c474d2h5Xszx+zYIdkeNL
+6yxSNLCK/RJOlrDrcH+eOfdmQrGrrFLadkBXeyq96G4DsguAhYidDMfCd7Camlf0
+uPoTXGiTOmekl9AbmbeGMktg2M7v0Ax/lZ9vh0+Hio5fCHyqW/xavqGRn1V9TrAL
+acywlKinh/LTSlDcX3KwFnUey7QYYpqwpzmqm59m2I2mbJYV4+by+PGDYmy7Velh
+k6M99bFXi08jsJvllGov34zflVEpYKELKeRcVVi3qPyZ7iVNTA6z00yPhOgpD/0Q
+VAKFyPnlw4vP5w8CAwEAAaOBhjCBgzAOBgNVHQ8BAf8EBAMCAYYwHQYDVR0hBBYw
+FDASBgdghXQBUwIBBgdghXQBUwIBMBIGA1UdEwEB/wQIMAYBAf8CAQcwHQYDVR0O
+BBYEFE0mICKJS9PVpAqhb97iEoHF8TwuMB8GA1UdIwQYMBaAFE0mICKJS9PVpAqh
+b97iEoHF8TwuMA0GCSqGSIb3DQEBCwUAA4ICAQAyCrKkG8t9voJXiblqf/P0wS4R
+fbgZPnm3qKhyN2abGu2sEzsOv2LwnN+ee6FTSA5BesogpxcbtnjsQJHzQq0Qw1zv
+/2BZf82Fo4s9SBwlAjxnffUy6S8w5X2lejjQ82YqZh6NM4OKb3xuqFp1mrjX2lhI
+REeoTPpMSQpKwhI3qEAMw8jh0FcNlzKVxzqfl9NX+Ave5XLzo9v/tdhZsnPdTSpx
+srpJ9csc1fV5yJmz/MFMdOO0vSk3FQQoHt5FRnDsr7p4DooqzgB53MBfGWcsa0vv
+aGgLQ+OswWIJ76bdZWGgr4RVSJFSHMYlkSrQwSIjYVmvRRGFHQEkNI/Ps/8XciAT
+woCqISxxOQ7Qj1zB09GOInJGTB2Wrk9xseEFKZZZ9LuedT3PDTcNYtsmjGOpI99n
+Bjx8Oto0QuFmtEYE3saWmA9LSHokMnWRn6z3aOkquVVlzl1h0ydw2Df+n7mvoC5W
+t6NlUe07qxS/TFED6F+KBZvuim6c779o+sjaC+NCydAXFJy3SuCvkychVSa1ZC+N
+8f+mQAWFBVzKBxlcCxMoTFh/wqXvRdpg065lYZ1Tg3TCrvJcwhbtkj6EPnNgiLx2
+9CzP0H1907he0ZESEOnN3col49XtmS++dYFLJPlFRpTJKSFTnCZFqhMX5OfNeOI5
+wSsSnqaeG8XmDtkx2Q==
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIIF4DCCA8igAwIBAgIRAPL6ZOJ0Y9ON/RAdBB92ylgwDQYJKoZIhvcNAQELBQAw
+ZzELMAkGA1UEBhMCY2gxETAPBgNVBAoTCFN3aXNzY29tMSUwIwYDVQQLExxEaWdp
+dGFsIENlcnRpZmljYXRlIFNlcnZpY2VzMR4wHAYDVQQDExVTd2lzc2NvbSBSb290
+IEVWIENBIDIwHhcNMTEwNjI0MDk0NTA4WhcNMzEwNjI1MDg0NTA4WjBnMQswCQYD
+VQQGEwJjaDERMA8GA1UEChMIU3dpc3Njb20xJTAjBgNVBAsTHERpZ2l0YWwgQ2Vy
+dGlmaWNhdGUgU2VydmljZXMxHjAcBgNVBAMTFVN3aXNzY29tIFJvb3QgRVYgQ0Eg
+MjCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIBAMT3HS9X6lds93BdY7Bx
+UglgRCgzo3pOCvrY6myLURYaVa5UJsTMRQdBTxB5f3HSek4/OE6zAMaVylvNwSqD
+1ycfMQ4jFrclyxy0uYAyXhqdk/HoPGAsp15XGVhRXrwsVgu42O+LgrQ8uMIkqBPH
+oCE2G3pXKSinLr9xJZDzRINpUKTk4RtiGZQJo/PDvO/0vezbE53PnUgJUmfANykR
+HvvSEaeFGHR55E+FFOtSN+KxRdjMDUN/rhPSays/p8LiqG12W0OfvrSdsyaGOx9/
+5fLoZigWJdBLlzin5M8J0TbDC77aO0RYjb7xnglrPvMyxyuHxuxenPaHZa0zKcQv
+idm5y8kDnftslFGXEBuGCxobP/YCfnvUxVFkKJ3106yDgYjTdLRZncHrYTNaRdHL
+OdAGalNgHa/2+2m8atwBz735j9m9W8E6X47aD0upm50qKGsaCnw8qyIL5XctcfaC
+NYGu+HuB5ur+rPQam3Rc6I8k9l2dRsQs0h4rIWqDJ2dVSqTjyDKXZpBy2uPUZC5f
+46Fq9mDU5zXNysRojddxyNMkM3OxbPlq4SjbX8Y96L5V5jcb7STZDxmPX2MYWFCB
+UWVv8p9+agTnNCRxunZLWB4ZvRVgRaoMEkABnRDixzgHcgplwLa7JSnaFp6LNYth
+7eVxV4O1PHGf40+/fh6Bn0GXAgMBAAGjgYYwgYMwDgYDVR0PAQH/BAQDAgGGMB0G
+A1UdIQQWMBQwEgYHYIV0AVMCAgYHYIV0AVMCAjASBgNVHRMBAf8ECDAGAQH/AgED
+MB0GA1UdDgQWBBRF2aWBbj2ITY1x0kbBbkUe88SAnTAfBgNVHSMEGDAWgBRF2aWB
+bj2ITY1x0kbBbkUe88SAnTANBgkqhkiG9w0BAQsFAAOCAgEAlDpzBp9SSzBc1P6x
+XCX5145v9Ydkn+0UjrgEjihLj6p7jjm02Vj2e6E1CqGdivdj5eu9OYLU43otb98T
+PLr+flaYC/NUn81ETm484T4VvwYmneTwkLbUwp4wLh/vx3rEUMfqe9pQy3omywC0
+Wqu1kx+AiYQElY2NfwmTv9SoqORjbdlk5LgpWgi/UOGED1V7XwgiG/W9mR4U9s70
+WBCCswo9GcG/W6uqmdjyMb3lOGbcWAXH7WMaLgqXfIeTK7KK4/HsGOV1timH59yL
+Gn602MnTihdsfSlEvoqq9X46Lmgxk7lq2prg2+kupYTNHAq4Sgj5nPFhJpiTt3tm
+7JFe3VE/23MPrQRYCd0EApUKPtN236YQHoA96M2kZNEzx5LH4k5E4wnJTsJdhw4S
+nr8PyQUQ3nqjsTzyP6WqJ3mtMX0f/fwZacXduT98zca0wjAefm6S139hdlqP65VN
+vBFuIXxZN5nQBrz5Bm0yFqXZaajh3DyAHmBR3NdUIR7KYndP+tiPsys6DXhyyWhB
+WkdKwqPrGtcKqzwyVcgKEZzfdNbwQBUdyLmPtTbFr/giuMod89a2GQ+fYWVq6nTI
+fI/DT11lgh/ZDYnadXL77/FHZxOzyNEZiCcmmpl5fx7kLD977vHeTYuWl8PVP3wb
+I+2ksx0WckNLIOFZfsLorSa/ovc=
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIIDwzCCAqugAwIBAgIBATANBgkqhkiG9w0BAQsFADCBgjELMAkGA1UEBhMCREUx
+KzApBgNVBAoMIlQtU3lzdGVtcyBFbnRlcnByaXNlIFNlcnZpY2VzIEdtYkgxHzAd
+BgNVBAsMFlQtU3lzdGVtcyBUcnVzdCBDZW50ZXIxJTAjBgNVBAMMHFQtVGVsZVNl
+YyBHbG9iYWxSb290IENsYXNzIDIwHhcNMDgxMDAxMTA0MDE0WhcNMzMxMDAxMjM1
+OTU5WjCBgjELMAkGA1UEBhMCREUxKzApBgNVBAoMIlQtU3lzdGVtcyBFbnRlcnBy
+aXNlIFNlcnZpY2VzIEdtYkgxHzAdBgNVBAsMFlQtU3lzdGVtcyBUcnVzdCBDZW50
+ZXIxJTAjBgNVBAMMHFQtVGVsZVNlYyBHbG9iYWxSb290IENsYXNzIDIwggEiMA0G
+CSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCqX9obX+hzkeXaXPSi5kfl82hVYAUd
+AqSzm1nzHoqvNK38DcLZSBnuaY/JIPwhqgcZ7bBcrGXHX+0CfHt8LRvWurmAwhiC
+FoT6ZrAIxlQjgeTNuUk/9k9uN0goOA/FvudocP05l03Sx5iRUKrERLMjfTlH6VJi
+1hKTXrcxlkIF+3anHqP1wvzpesVsqXFP6st4vGCvx9702cu+fjOlbpSD8DT6Iavq
+jnKgP6TeMFvvhk1qlVtDRKgQFRzlAVfFmPHmBiiRqiDFt1MmUUOyCxGVWOHAD3bZ
+wI18gfNycJ5v/hqO2V81xrJvNHy+SE/iWjnX2J14np+GPgNeGYtEotXHAgMBAAGj
+QjBAMA8GA1UdEwEB/wQFMAMBAf8wDgYDVR0PAQH/BAQDAgEGMB0GA1UdDgQWBBS/
+WSA2AHmgoCJrjNXyYdK4LMuCSjANBgkqhkiG9w0BAQsFAAOCAQEAMQOiYQsfdOhy
+NsZt+U2e+iKo4YFWz827n+qrkRk4r6p8FU3ztqONpfSO9kSpp+ghla0+AGIWiPAC
+uvxhI+YzmzB6azZie60EI4RYZeLbK4rnJVM3YlNfvNoBYimipidx5joifsFvHZVw
+IEoHNN/q/xWA5brXethbdXwFeilHfkCoMRN3zUA7tFFHei4R40cR3p1m0IvVVGb6
+g1XqfMIpiRvpb7PO4gWEyS8+eIVibslfwXhjdFjASBgMmTnrpMwatXlajRWc2BQN
+9noHV8cigwUtPJslJj0Ys6lDfMjIq2SPDqO/nBudMNva0Bkuqjzx+zOAduTNrRlP
+BSeOE6Fuwg==
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIIDwzCCAqugAwIBAgIBATANBgkqhkiG9w0BAQsFADCBgjELMAkGA1UEBhMCREUx
+KzApBgNVBAoMIlQtU3lzdGVtcyBFbnRlcnByaXNlIFNlcnZpY2VzIEdtYkgxHzAd
+BgNVBAsMFlQtU3lzdGVtcyBUcnVzdCBDZW50ZXIxJTAjBgNVBAMMHFQtVGVsZVNl
+YyBHbG9iYWxSb290IENsYXNzIDMwHhcNMDgxMDAxMTAyOTU2WhcNMzMxMDAxMjM1
+OTU5WjCBgjELMAkGA1UEBhMCREUxKzApBgNVBAoMIlQtU3lzdGVtcyBFbnRlcnBy
+aXNlIFNlcnZpY2VzIEdtYkgxHzAdBgNVBAsMFlQtU3lzdGVtcyBUcnVzdCBDZW50
+ZXIxJTAjBgNVBAMMHFQtVGVsZVNlYyBHbG9iYWxSb290IENsYXNzIDMwggEiMA0G
+CSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQC9dZPwYiJvJK7genasfb3ZJNW4t/zN
+8ELg63iIVl6bmlQdTQyK9tPPcPRStdiTBONGhnFBSivwKixVA9ZIw+A5OO3yXDw/
+RLyTPWGrTs0NvvAgJ1gORH8EGoel15YUNpDQSXuhdfsaa3Ox+M6pCSzyU9XDFES4
+hqX2iys52qMzVNn6chr3IhUciJFrf2blw2qAsCTz34ZFiP0Zf3WHHx+xGwpzJFu5
+ZeAsVMhg02YXP+HMVDNzkQI6pn97djmiH5a2OK61yJN0HZ65tOVgnS9W0eDrXltM
+EnAMbEQgqxHY9Bn20pxSN+f6tsIxO0rUFJmtxxr1XV/6B7h8DR/Wgx6zAgMBAAGj
+QjBAMA8GA1UdEwEB/wQFMAMBAf8wDgYDVR0PAQH/BAQDAgEGMB0GA1UdDgQWBBS1
+A/d2O2GCahKqGFPrAyGUv/7OyjANBgkqhkiG9w0BAQsFAAOCAQEAVj3vlNW92nOy
+WL6ukK2YJ5f+AbGwUgC4TeQbIXQbfsDuXmkqJa9c1h3a0nnJ85cp4IaH3gRZD/FZ
+1GSFS5mvJQQeyUapl96Cshtwn5z2r3Ex3XsFpSzTucpH9sry9uetuUg/vBa3wW30
+6gmv7PO15wWeph6KU1HWk4HMdJP2udqmJQV0eVp+QD6CSyYRMG7hP0HHRwA11fXT
+91Q+gT3aSWqas+8QPebrb9HIIkfLzM8BMZLZGOMivgkeGj5asuRrDFR6fUNOuIml
+e9eiPZaGzPImNC1qkp2aGtAw4l1OBLBfiyB+d8E9lYLRRpo7PHi4b6HQDWSieB4p
+TpPDpFQUWw==
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIIEPTCCAyWgAwIBAgIBATANBgkqhkiG9w0BAQUFADCBvzE/MD0GA1UEAww2VMOc
+UktUUlVTVCBFbGVrdHJvbmlrIFNlcnRpZmlrYSBIaXptZXQgU2HEn2xhecSxY8Sx
+c8SxMQswCQYDVQQGEwJUUjEPMA0GA1UEBwwGQW5rYXJhMV4wXAYDVQQKDFVUw5xS
+S1RSVVNUIEJpbGdpIMSwbGV0acWfaW0gdmUgQmlsacWfaW0gR8O8dmVubGnEn2kg
+SGl6bWV0bGVyaSBBLsWeLiAoYykgQXJhbMSxayAyMDA3MB4XDTA3MTIyNTE4Mzcx
+OVoXDTE3MTIyMjE4MzcxOVowgb8xPzA9BgNVBAMMNlTDnFJLVFJVU1QgRWxla3Ry
+b25payBTZXJ0aWZpa2EgSGl6bWV0IFNhxJ9sYXnEsWPEsXPEsTELMAkGA1UEBhMC
+VFIxDzANBgNVBAcMBkFua2FyYTFeMFwGA1UECgxVVMOcUktUUlVTVCBCaWxnaSDE
+sGxldGnFn2ltIHZlIEJpbGnFn2ltIEfDvHZlbmxpxJ9pIEhpem1ldGxlcmkgQS7F
+ni4gKGMpIEFyYWzEsWsgMjAwNzCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoC
+ggEBAKu3PgqMyKVYFeaK7yc9SrToJdPNM8Ig3BnuiD9NYvDdE3ePYakqtdTyuTFY
+KTsvP2qcb3N2Je40IIDu6rfwxArNK4aUyeNgsURSsloptJGXg9i3phQvKUmi8wUG
++7RP2qFsmmaf8EMJyupyj+sA1zU511YXRxcw9L6/P8JorzZAwan0qafoEGsIiveG
+HtyaKhUG9qPw9ODHFNRRf8+0222vR5YXm3dx2KdxnSQM9pQ/hTEST7ruToK4uT6P
+IzdezKKqdfcYbwnTrqdUKDT74eA7YH2gvnmJhsifLfkKS8RQouf9eRbHegsYz85M
+733WB2+Y8a+xwXrXgTW4qhe04MsCAwEAAaNCMEAwHQYDVR0OBBYEFCnFkKslrxHk
+Yb+j/4hhkeYO/pyBMA4GA1UdDwEB/wQEAwIBBjAPBgNVHRMBAf8EBTADAQH/MA0G
+CSqGSIb3DQEBBQUAA4IBAQAQDdr4Ouwo0RSVgrESLFF6QSU2TJ/sPx+EnWVUXKgW
+AkD6bho3hO9ynYYKVZ1WKKxmLNA6VpM0ByWtCLCPyA8JWcqdmBzlVPi5RX9ql2+I
+aE1KBiY3iAIOtsbWcpnOa3faYjGkVh+uX4132l32iPwa2Z61gfAyuOOI0JzzaqC5
+mxRZNTZPz/OOXl0XrRWV2N2y1RVuAE6zS89mlOTgzbUF2mNXi+WzqtvALhyQRNsa
+XRik7r4EW5nVcV9VZWRi1aKbBFmGyGJ353yCRWo9F7/snXUMrqNvWtMvmDb08PUZ
+qxFdyKbjKlhqQgnDvZImZjINXQhVdP+MmNAKpoRq0Tl9
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIIFQTCCAymgAwIBAgICDL4wDQYJKoZIhvcNAQELBQAwUTELMAkGA1UEBhMCVFcx
+EjAQBgNVBAoTCVRBSVdBTi1DQTEQMA4GA1UECxMHUm9vdCBDQTEcMBoGA1UEAxMT
+VFdDQSBHbG9iYWwgUm9vdCBDQTAeFw0xMjA2MjcwNjI4MzNaFw0zMDEyMzExNTU5
+NTlaMFExCzAJBgNVBAYTAlRXMRIwEAYDVQQKEwlUQUlXQU4tQ0ExEDAOBgNVBAsT
+B1Jvb3QgQ0ExHDAaBgNVBAMTE1RXQ0EgR2xvYmFsIFJvb3QgQ0EwggIiMA0GCSqG
+SIb3DQEBAQUAA4ICDwAwggIKAoICAQCwBdvI64zEbooh745NnHEKH1Jw7W2CnJfF
+10xORUnLQEK1EjRsGcJ0pDFfhQKX7EMzClPSnIyOt7h52yvVavKOZsTuKwEHktSz
+0ALfUPZVr2YOy+BHYC8rMjk1Ujoog/h7FsYYuGLWRyWRzvAZEk2tY/XTP3VfKfCh
+MBwqoJimFb3u/Rk28OKRQ4/6ytYQJ0lM793B8YVwm8rqqFpD/G2Gb3PpN0Wp8DbH
+zIh1HrtsBv+baz4X7GGqcXzGHaL3SekVtTzWoWH1EfcFbx39Eb7QMAfCKbAJTibc
+46KokWofwpFFiFzlmLhxpRUZyXx1EcxwdE8tmx2RRP1WKKD+u4ZqyPpcC1jcxkt2
+yKsi2XMPpfRaAok/T54igu6idFMqPVMnaR1sjjIsZAAmY2E2TqNGtz99sy2sbZCi
+laLOz9qC5wc0GZbpuCGqKX6mOL6OKUohZnkfs8O1CWfe1tQHRvMq2uYiN2DLgbYP
+oA/pyJV/v1WRBXrPPRXAb94JlAGD1zQbzECl8LibZ9WYkTunhHiVJqRaCPgrdLQA
+BDzfuBSO6N+pjWxnkjMdwLfS7JLIvgm/LCkFbwJrnu+8vyq8W8BQj0FwcYeyTbcE
+qYSjMq+u7msXi7Kx/mzhkIyIqJdIzshNy/MGz19qCkKxHh53L46g5pIOBvwFItIm
+4TFRfTLcDwIDAQABoyMwITAOBgNVHQ8BAf8EBAMCAQYwDwYDVR0TAQH/BAUwAwEB
+/zANBgkqhkiG9w0BAQsFAAOCAgEAXzSBdu+WHdXltdkCY4QWwa6gcFGn90xHNcgL
+1yg9iXHZqjNB6hQbbCEAwGxCGX6faVsgQt+i0trEfJdLjbDorMjupWkEmQqSpqsn
+LhpNgb+E1HAerUf+/UqdM+DyucRFCCEK2mlpc3INvjT+lIutwx4116KD7+U4x6WF
+H6vPNOw/KP4M8VeGTslV9xzU2KV9Bnpv1d8Q34FOIWWxtuEXeZVFBs5fzNxGiWNo
+RI2T9GRwoD2dKAXDOXC4Ynsg/eTb6QihuJ49CcdP+yz4k3ZB3lLg4VfSnQO8d57+
+nile98FRYB/e2guyLXW3Q0iT5/Z5xoRdgFlglPx4mI88k1HtQJAH32RjJMtOcQWh
+15QaiDLxInQirqWm2BJpTGCjAu4r7NRjkgtevi92a6O2JryPA9gK8kxkRr05YuWW
+6zRjESjMlfGt7+/cgFhI6Uu46mWs6fyAtbXIRfmswZ/ZuepiiI7E8UuDEq3mi4TW
+nsLrgxifarsbJGAzcMzs9zLzXNl5fe+epP7JI8Mk7hWSsT2RTyaGvWZzJBPqpK5j
+wa19hAM8EHiGG3njxPPyBJUgriOCxLM6AGK/5jYk4Ve6xx6QddVfP5VhK8E7zeWz
+aGHQRiapIVJpLesux+t3zqY6tQMzT3bR51xUAV3LePTJDL/PEo4XLSNolOer/qmy
+KwbQBM0=
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIIDezCCAmOgAwIBAgIBATANBgkqhkiG9w0BAQUFADBfMQswCQYDVQQGEwJUVzES
+MBAGA1UECgwJVEFJV0FOLUNBMRAwDgYDVQQLDAdSb290IENBMSowKAYDVQQDDCFU
+V0NBIFJvb3QgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkwHhcNMDgwODI4MDcyNDMz
+WhcNMzAxMjMxMTU1OTU5WjBfMQswCQYDVQQGEwJUVzESMBAGA1UECgwJVEFJV0FO
+LUNBMRAwDgYDVQQLDAdSb290IENBMSowKAYDVQQDDCFUV0NBIFJvb3QgQ2VydGlm
+aWNhdGlvbiBBdXRob3JpdHkwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIB
+AQCwfnK4pAOU5qfeCTiRShFAh6d8WWQUe7UREN3+v9XAu1bihSX0NXIP+FPQQeFE
+AcK0HMMxQhZHhTMidrIKbw/lJVBPhYa+v5guEGcevhEFhgWQxFnQfHgQsIBct+HH
+K3XLfJ+utdGdIzdjp9xCoi2SBBtQwXu4PhvJVgSLL1KbralW6cH/ralYhzC2gfeX
+RfwZVzsrb+RH9JlF/h3x+JejiB03HFyP4HYlmlD4oFT/RJB2I9IyxsOrBr/8+7/z
+rX2SYgJbKdM1o5OaQ2RgXbL6Mv87BK9NQGr5x+PvI/1ry+UPizgN7gr8/g+YnzAx
+3WxSZfmLgb4i4RxYA7qRG4kHAgMBAAGjQjBAMA4GA1UdDwEB/wQEAwIBBjAPBgNV
+HRMBAf8EBTADAQH/MB0GA1UdDgQWBBRqOFsmjd6LWvJPelSDGRjjCDWmujANBgkq
+hkiG9w0BAQUFAAOCAQEAPNV3PdrfibqHDAhUaiBQkr6wQT25JmSDCi/oQMCXKCeC
+MErJk/9q56YAf4lCmtYR5VPOL8zy2gXE/uJQxDqGfczafhAJO5I1KlOy/usrBdls
+XebQ79NqZp4VKIV66IIArB6nCWlWQtNoURi+VJq/REG6Sb4gumlc7rh3zc5sH62D
+lhh9DrUUOYTxKOkto557HnpyWoOzeW/vtPzQCqVYT0bf+215WfKEIlKuD8z7fDvn
+aspHYcN6+NOSBB+4IIThNlQWx0DeO4pz3N/GCUzf7Nr/1FNCocnyYh0igzyXxfkZ
+YiesZSLX0zzG5Y6yU8xJzrww/nsOM5D77dIUkR8Hrw==
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIIFcjCCA1qgAwIBAgIQH51ZWtcvwgZEpYAIaeNe9jANBgkqhkiG9w0BAQUFADA/
+MQswCQYDVQQGEwJUVzEwMC4GA1UECgwnR292ZXJubWVudCBSb290IENlcnRpZmlj
+YXRpb24gQXV0aG9yaXR5MB4XDTAyMTIwNTEzMjMzM1oXDTMyMTIwNTEzMjMzM1ow
+PzELMAkGA1UEBhMCVFcxMDAuBgNVBAoMJ0dvdmVybm1lbnQgUm9vdCBDZXJ0aWZp
+Y2F0aW9uIEF1dGhvcml0eTCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIB
+AJoluOzMonWoe/fOW1mKydGGEghU7Jzy50b2iPN86aXfTEc2pBsBHH8eV4qNw8XR
+IePaJD9IK/ufLqGU5ywck9G/GwGHU5nOp/UKIXZ3/6m3xnOUT0b3EEk3+qhZSV1q
+gQdW8or5BtD3cCJNtLdBuTK4sfCxw5w/cP1T3YGq2GN49thTbqGsaoQkclSGxtKy
+yhwOeYHWtXBiCAEuTk8O1RGvqa/lmr/czIdtJuTJV6L7lvnM4T9TjGxMfptTCAts
+F/tnyMKtsc2AtJfcdgEWFelq16TheEfOhtX7MfP6Mb40qij7cEwdScevLJ1tZqa2
+jWR+tSBqnTuBto9AAGdLiYa4zGX+FVPpBMHWXx1E1wovJ5pGfaENda1UhhXcSTvx
+ls4Pm6Dso3pdvtUqdULle96ltqqvKKyskKw4t9VoNSZ63Pc78/1Fm9G7Q3hub/FC
+VGqY8A2tl+lSXunVanLeavcbYBT0peS2cWeqH+riTcFCQP5nRhc4L0c/cZyu5SHK
+YS1tB6iEfC3uUSXxY5Ce/eFXiGvviiNtsea9P63RPZYLhY3Naye7twWb7LuRqQoH
+EgKXTiCQ8P8NHuJBO9NAOueNXdpm5AKwB1KYXA6OM5zCppX7VRluTI6uSw+9wThN
+Xo+EHWbNxWCWtFJaBYmOlXqYwZE8lSOyDvR5tMl8wUohAgMBAAGjajBoMB0GA1Ud
+DgQWBBTMzO/MKWCkO7GStjz6MmKPrCUVOzAMBgNVHRMEBTADAQH/MDkGBGcqBwAE
+MTAvMC0CAQAwCQYFKw4DAhoFADAHBgVnKgMAAAQUA5vwIhP/lSg209yewDL7MTqK
+UWUwDQYJKoZIhvcNAQEFBQADggIBAECASvomyc5eMN1PhnR2WPWus4MzeKR6dBcZ
+TulStbngCnRiqmjKeKBMmo4sIy7VahIkv9Ro04rQ2JyftB8M3jh+Vzj8jeJPXgyf
+qzvS/3WXy6TjZwj/5cAWtUgBfen5Cv8b5Wppv3ghqMKnI6mGq3ZW6A4M9hPdKmaK
+ZEk9GhiHkASfQlK3T8v+R0F2Ne//AHY2RTKbxkaFXeIksB7jSJaYV0eUVXoPQbFE
+JPPB/hprv4j9wabak2BegUqZIJxIZhm1AHlUD7gsL0u8qV1bYH+Mh6XgUmMqvtg7
+hUAV/h62ZT/FS9p+tXo1KaMuephgIqP0fSdOLeq0dDzpD6QzDxARvBMB1uUO07+1
+EqLhRSPAzAhuYbeJq4PjJB7mXQfnHyA+z2fI56wwbSdLaG5LKlwCCDTb+HbkZ6Mm
+nD+iMsJKxYEYMRBWqoTvLQr/uB930r+lWKBi5NdLkXWNiYCYfm3LU05er/ayl4WX
+udpVBrkk7tfGOB5jGxI7leFYrPLfhNVfmS8NVVvmONsuP3LpSIXLuykTjx44Vbnz
+ssQwmSNOXfJIoRIM3BKQCZBUkQM8R+XVyWXgt0t97EfTsws+rZ7QdAAO671RrcDe
+LMDDav7v3Aun+kbfYNucpllQdSNpc5Oy+fwC00fmcc4QAu4njIT/rEUNE1yDMuAl
+pYYsfPQS
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIIFODCCAyCgAwIBAgIRAJW+FqD3LkbxezmCcvqLzZYwDQYJKoZIhvcNAQEFBQAw
+NzEUMBIGA1UECgwLVGVsaWFTb25lcmExHzAdBgNVBAMMFlRlbGlhU29uZXJhIFJv
+b3QgQ0EgdjEwHhcNMDcxMDE4MTIwMDUwWhcNMzIxMDE4MTIwMDUwWjA3MRQwEgYD
+VQQKDAtUZWxpYVNvbmVyYTEfMB0GA1UEAwwWVGVsaWFTb25lcmEgUm9vdCBDQSB2
+MTCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIBAMK+6yfwIaPzaSZVfp3F
+VRaRXP3vIb9TgHot0pGMYzHw7CTww6XScnwQbfQ3t+XmfHnqjLWCi65ItqwA3GV1
+7CpNX8GH9SBlK4GoRz6JI5UwFpB/6FcHSOcZrr9FZ7E3GwYq/t75rH2D+1665I+X
+Z75Ljo1kB1c4VWk0Nj0TSO9P4tNmHqTPGrdeNjPUtAa9GAH9d4RQAEX1jF3oI7x+
+/jXh7VB7qTCNGdMJjmhnXb88lxhTuylixcpecsHHltTbLaC0H2kD7OriUPEMPPCs
+81Mt8Bz17Ww5OXOAFshSsCPN4D7c3TxHoLs1iuKYaIu+5b9y7tL6pe0S7fyYGKkm
+dtwoSxAgHNN/Fnct7W+A90m7UwW7XWjH1Mh1Fj+JWov3F0fUTPHSiXk+TT2YqGHe
+Oh7S+F4D4MHJHIzTjU3TlTazN19jY5szFPAtJmtTfImMMsJu7D0hADnJoWjiUIMu
+sDor8zagrC/kb2HCUQk5PotTubtn2txTuXZZNp1D5SDgPTJghSJRt8czu90VL6R4
+pgd7gUY2BIbdeTXHlSw7sKMXNeVzH7RcWe/a6hBle3rQf5+ztCo3O3CLm1u5K7fs
+slESl1MpWtTwEhDcTwK7EpIvYtQ/aUN8Ddb8WHUBiJ1YFkveupD/RwGJBmr2X7KQ
+arMCpgKIv7NHfirZ1fpoeDVNAgMBAAGjPzA9MA8GA1UdEwEB/wQFMAMBAf8wCwYD
+VR0PBAQDAgEGMB0GA1UdDgQWBBTwj1k4ALP1j5qWDNXr+nuqF+gTEjANBgkqhkiG
+9w0BAQUFAAOCAgEAvuRcYk4k9AwI//DTDGjkk0kiP0Qnb7tt3oNmzqjMDfz1mgbl
+dxSR651Be5kqhOX//CHBXfDkH1e3damhXwIm/9fH907eT/j3HEbAek9ALCI18Bmx
+0GtnLLCo4MBANzX2hFxc469CeP6nyQ1Q6g2EdvZR74NTxnr/DlZJLo961gzmJ1Tj
+TQpgcmLNkQfWpb/ImWvtxBnmq0wROMVvMeJuScg/doAmAyYp4Db29iBT4xdwNBed
+Y2gea+zDTYa4EzAvXUYNR0PVG6pZDrlcjQZIrXSHX8f8MVRBE+LHIQ6e4B4N4cB7
+Q4WQxYpYxmUKeFfyxiMPAdkgS94P+5KFdSpcc41teyWRyu5FrgZLAMzTsVlQ2jqI
+OylDRl6XK1TOU2+NSueW+r9xDkKLfP0ooNBIytrEgUy7onOTJsjrDNYmiLbAJM+7
+vVvrdX3pCI6GMyx5dwlppYn8s3CQh3aP0yK7Qs69cwsgJirQmz1wHiRszYd2qReW
+t88NkvuOGKmYSdGe/mBEciG5Ge3C9THxOUiIkCR1VBatzvT4aRRkOfujuLpwQMcn
+HL/EVlP6Y2XQ8xwOFvVrhlhNGNTkDY6lnVuR3HYkUD/GKvvZt5y11ubQ2egZixVx
+SK236thZiNSQvxaz2emsWWFUyBy6ysHK4bkgTI86k4mloMy/0/Z1pHWWbVY=
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIIDZzCCAk+gAwIBAgIQGx+ttiD5JNM2a/fH8YygWTANBgkqhkiG9w0BAQUFADBF
+MQswCQYDVQQGEwJHQjEYMBYGA1UEChMPVHJ1c3RpcyBMaW1pdGVkMRwwGgYDVQQL
+ExNUcnVzdGlzIEZQUyBSb290IENBMB4XDTAzMTIyMzEyMTQwNloXDTI0MDEyMTEx
+MzY1NFowRTELMAkGA1UEBhMCR0IxGDAWBgNVBAoTD1RydXN0aXMgTGltaXRlZDEc
+MBoGA1UECxMTVHJ1c3RpcyBGUFMgUm9vdCBDQTCCASIwDQYJKoZIhvcNAQEBBQAD
+ggEPADCCAQoCggEBAMVQe547NdDfxIzNjpvto8A2mfRC6qc+gIMPpqdZh8mQRUN+
+AOqGeSoDvT03mYlmt+WKVoaTnGhLaASMk5MCPjDSNzoiYYkchU59j9WvezX2fihH
+iTHcDnlkH5nSW7r+f2C/revnPDgpai/lkQtV/+xvWNUtyd5MZnGPDNcE2gfmHhjj
+vSkCqPoc4Vu5g6hBSLwacY3nYuUtsuvffM/bq1rKMfFMIvMFE/eC+XN5DL7XSxzA
+0RU8k0Fk0ea+IxciAIleH2ulrG6nS4zto3Lmr2NNL4XSFDWaLk6M6jKYKIahkQlB
+OrTh4/L68MkKokHdqeMDx4gVOxzUGpTXn2RZEm0CAwEAAaNTMFEwDwYDVR0TAQH/
+BAUwAwEB/zAfBgNVHSMEGDAWgBS6+nEleYtXQSUhhgtx67JkDoshZzAdBgNVHQ4E
+FgQUuvpxJXmLV0ElIYYLceuyZA6LIWcwDQYJKoZIhvcNAQEFBQADggEBAH5Y//01
+GX2cGE+esCu8jowU/yyg2kdbw++BLa8F6nRIW/M+TgfHbcWzk88iNVy2P3UnXwmW
+zaD+vkAMXBJV+JOCyinpXj9WV4s4NvdFGkwozZ5BuO1WTISkQMi4sKUraXAEasP4
+1BIy+Q7DsdwyhEQsb8tGD+pmQQ9P8Vilpg0ND2HepZ5dfWWhPBfnqFVO76DH7cZE
+f1T1o+CP8HxVIo8ptoGj4W1OLBuAZ+ytIJ8MYmHVl/9D7S3B2l0pKoU/rGXuhg8F
+jZBf3+6f9L/uHfuY5H+QK4R4EA5sSVPvFVtlRkpdr7r7OnIdzfYliB6XzCGcKQEN
+ZetX2fNXlrtIzYE=
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIIFFzCCA/+gAwIBAgIBETANBgkqhkiG9w0BAQUFADCCASsxCzAJBgNVBAYTAlRS
+MRgwFgYDVQQHDA9HZWJ6ZSAtIEtvY2FlbGkxRzBFBgNVBAoMPlTDvHJraXllIEJp
+bGltc2VsIHZlIFRla25vbG9qaWsgQXJhxZ90xLFybWEgS3VydW11IC0gVMOcQsSw
+VEFLMUgwRgYDVQQLDD9VbHVzYWwgRWxla3Ryb25payB2ZSBLcmlwdG9sb2ppIEFy
+YcWfdMSxcm1hIEVuc3RpdMO8c8O8IC0gVUVLQUUxIzAhBgNVBAsMGkthbXUgU2Vy
+dGlmaWthc3lvbiBNZXJrZXppMUowSAYDVQQDDEFUw5xCxLBUQUsgVUVLQUUgS8O2
+ayBTZXJ0aWZpa2EgSGl6bWV0IFNhxJ9sYXnEsWPEsXPEsSAtIFPDvHLDvG0gMzAe
+Fw0wNzA4MjQxMTM3MDdaFw0xNzA4MjExMTM3MDdaMIIBKzELMAkGA1UEBhMCVFIx
+GDAWBgNVBAcMD0dlYnplIC0gS29jYWVsaTFHMEUGA1UECgw+VMO8cmtpeWUgQmls
+aW1zZWwgdmUgVGVrbm9sb2ppayBBcmHFn3TEsXJtYSBLdXJ1bXUgLSBUw5xCxLBU
+QUsxSDBGBgNVBAsMP1VsdXNhbCBFbGVrdHJvbmlrIHZlIEtyaXB0b2xvamkgQXJh
+xZ90xLFybWEgRW5zdGl0w7xzw7wgLSBVRUtBRTEjMCEGA1UECwwaS2FtdSBTZXJ0
+aWZpa2FzeW9uIE1lcmtlemkxSjBIBgNVBAMMQVTDnELEsFRBSyBVRUtBRSBLw7Zr
+IFNlcnRpZmlrYSBIaXptZXQgU2HEn2xhecSxY8Sxc8SxIC0gU8O8csO8bSAzMIIB
+IjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAim1L/xCIOsP2fpTo6iBkcK4h
+gb46ezzb8R1Sf1n68yJMlaCQvEhOEav7t7WNeoMojCZG2E6VQIdhn8WebYGHV2yK
+O7Rm6sxA/OOqbLLLAdsyv9Lrhc+hDVXDWzhXcLh1xnnRFDDtG1hba+818qEhTsXO
+fJlfbLm4IpNQp81McGq+agV/E5wrHur+R84EpW+sky58K5+eeROR6Oqeyjh1jmKw
+lZMq5d/pXpduIF9fhHpEORlAHLpVK/swsoHvhOPc7Jg4OQOFCKlUAwUp8MmPi+oL
+hmUZEdPpCSPeaJMDyTYcIW7OjGbxmTDY17PDHfiBLqi9ggtm/oLL4eAagsNAgQID
+AQABo0IwQDAdBgNVHQ4EFgQUvYiHyY/2pAoLquvF/pEjnatKijIwDgYDVR0PAQH/
+BAQDAgEGMA8GA1UdEwEB/wQFMAMBAf8wDQYJKoZIhvcNAQEFBQADggEBAB18+kmP
+NOm3JpIWmgV050vQbTlswyb2zrgxvMTfvCr4N5EY3ATIZJkrGG2AA1nJrvhY0D7t
+wyOfaTyGOBye79oneNGEN3GKPEs5z35FBtYt2IpNeBLWrcLTy9LQQfMmNkqblWwM
+7uXRQydmwYj3erMgbOqwaSvHIOgMA8RBBZniP+Rr+KCGgceExh/VS4ESshYhLBOh
+gLJeDEoTniDYYkCrkOpkSi+sDQESeUWoL4cZaMjihccwsnX5OD+ywJO0a+IDRM5n
+oN+J1q2MdqMTw5RhK2vZbMEHCiIHhWyFJEapvj+LeISCfiQMnf2BN+MlqO02TpUs
+yZyQ2uypQjyttgI=
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIIEJzCCAw+gAwIBAgIHAI4X/iQggTANBgkqhkiG9w0BAQsFADCBsTELMAkGA1UE
+BhMCVFIxDzANBgNVBAcMBkFua2FyYTFNMEsGA1UECgxEVMOcUktUUlVTVCBCaWxn
+aSDEsGxldGnFn2ltIHZlIEJpbGnFn2ltIEfDvHZlbmxpxJ9pIEhpem1ldGxlcmkg
+QS7Fni4xQjBABgNVBAMMOVTDnFJLVFJVU1QgRWxla3Ryb25payBTZXJ0aWZpa2Eg
+SGl6bWV0IFNhxJ9sYXnEsWPEsXPEsSBINTAeFw0xMzA0MzAwODA3MDFaFw0yMzA0
+MjgwODA3MDFaMIGxMQswCQYDVQQGEwJUUjEPMA0GA1UEBwwGQW5rYXJhMU0wSwYD
+VQQKDERUw5xSS1RSVVNUIEJpbGdpIMSwbGV0acWfaW0gdmUgQmlsacWfaW0gR8O8
+dmVubGnEn2kgSGl6bWV0bGVyaSBBLsWeLjFCMEAGA1UEAww5VMOcUktUUlVTVCBF
+bGVrdHJvbmlrIFNlcnRpZmlrYSBIaXptZXQgU2HEn2xhecSxY8Sxc8SxIEg1MIIB
+IjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEApCUZ4WWe60ghUEoI5RHwWrom
+/4NZzkQqL/7hzmAD/I0Dpe3/a6i6zDQGn1k19uwsu537jVJp45wnEFPzpALFp/kR
+Gml1bsMdi9GYjZOHp3GXDSHHmflS0yxjXVW86B8BSLlg/kJK9siArs1mep5Fimh3
+4khon6La8eHBEJ/rPCmBp+EyCNSgBbGM+42WAA4+Jd9ThiI7/PS98wl+d+yG6w8z
+5UNP9FR1bSmZLmZaQ9/LXMrI5Tjxfjs1nQ/0xVqhzPMggCTTV+wVunUlm+hkS7M0
+hO8EuPbJbKoCPrZV4jI3X/xml1/N1p7HIL9Nxqw/dV8c7TKcfGkAaZHjIxhT6QID
+AQABo0IwQDAdBgNVHQ4EFgQUVpkHHtOsDGlktAxQR95DLL4gwPswDgYDVR0PAQH/
+BAQDAgEGMA8GA1UdEwEB/wQFMAMBAf8wDQYJKoZIhvcNAQELBQADggEBAJ5FdnsX
+SDLyOIspve6WSk6BGLFRRyDN0GSxDsnZAdkJzsiZ3GglE9Rc8qPoBP5yCccLqh0l
+VX6Wmle3usURehnmp349hQ71+S4pL+f5bFgWV1Al9j4uPqrtd3GqqpmWRgqujuwq
+URawXs3qZwQcWDD1YIq9pr1N5Za0/EKJAWv2cMhQOQwt1WbZyNKzMrcbGW3LM/nf
+peYVhDfwwvJllpKQd/Ct9JDpEXjXk4nAPQu6KfTomZ1yju2dL+6SfaHx/126M2CF
+Yv4HAqGEVka+lgqaE9chTLd8B59OTj+RdPsnnRHM3eaxynFNExc5JsUpISuTKWqW
++qtB4Uu2NQvAmxU=
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIIEJjCCAw6gAwIBAgIGfaHyZeyKMA0GCSqGSIb3DQEBCwUAMIGxMQswCQYDVQQG
+EwJUUjEPMA0GA1UEBwwGQW5rYXJhMU0wSwYDVQQKDERUw5xSS1RSVVNUIEJpbGdp
+IMSwbGV0acWfaW0gdmUgQmlsacWfaW0gR8O8dmVubGnEn2kgSGl6bWV0bGVyaSBB
+LsWeLjFCMEAGA1UEAww5VMOcUktUUlVTVCBFbGVrdHJvbmlrIFNlcnRpZmlrYSBI
+aXptZXQgU2HEn2xhecSxY8Sxc8SxIEg2MB4XDTEzMTIxODA5MDQxMFoXDTIzMTIx
+NjA5MDQxMFowgbExCzAJBgNVBAYTAlRSMQ8wDQYDVQQHDAZBbmthcmExTTBLBgNV
+BAoMRFTDnFJLVFJVU1QgQmlsZ2kgxLBsZXRpxZ9pbSB2ZSBCaWxpxZ9pbSBHw7x2
+ZW5sacSfaSBIaXptZXRsZXJpIEEuxZ4uMUIwQAYDVQQDDDlUw5xSS1RSVVNUIEVs
+ZWt0cm9uaWsgU2VydGlmaWthIEhpem1ldCBTYcSfbGF5xLFjxLFzxLEgSDYwggEi
+MA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCdsGjW6L0UlqMACprx9MfMkU1x
+eHe59yEmFXNRFpQJRwXiM/VomjX/3EsvMsew7eKC5W/a2uqsxgbPJQ1BgfbBOCK9
++bGlprMBvD9QFyv26WZV1DOzXPhDIHiTVRZwGTLmiddk671IUP320EEDwnS3/faA
+z1vFq6TWlRKb55cTMgPp1KtDWxbtMyJkKbbSk60vbNg9tvYdDjTu0n2pVQ8g9P0p
+u5FbHH3GQjhtQiht1AH7zYiXSX6484P4tZgvsycLSF5W506jM7NE1qXyGJTtHB6p
+lVxiSvgNZ1GpryHV+DKdeboaX+UEVU0TRv/yz3THGmNtwx8XEsMeED5gCLMxAgMB
+AAGjQjBAMB0GA1UdDgQWBBTdVRcT9qzoSCHK77Wv0QAy7Z6MtTAOBgNVHQ8BAf8E
+BAMCAQYwDwYDVR0TAQH/BAUwAwEB/zANBgkqhkiG9w0BAQsFAAOCAQEAb1gNl0Oq
+FlQ+v6nfkkU/hQu7VtMMUszIv3ZnXuaqs6fvuay0EBQNdH49ba3RfdCaqaXKGDsC
+QC4qnFAUi/5XfldcEQlLNkVS9z2sFP1E34uXI9TDwe7UU5X+LEr+DXCqu4svLcsy
+o4LyVN/Y8t3XSHLuSqMplsNEzm61kod2pLv0kmzOLBQJZo6NrRa1xxsJYTvjIKID
+gI6tflEATseWhvtDmHd9KMeP2Cpu54Rvl0EpABZeTeIT6lnAY2c6RPuY/ATTMHKm
+9ocJV612ph1jmv3XZch4gyt1O6VbuA1df74jrlZVlFjvH4GMKrLN5ptjnhi85WsG
+tAuYSyher4hYyw==
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIICjzCCAhWgAwIBAgIQXIuZxVqUxdJxVt7NiYDMJjAKBggqhkjOPQQDAzCBiDEL
+MAkGA1UEBhMCVVMxEzARBgNVBAgTCk5ldyBKZXJzZXkxFDASBgNVBAcTC0plcnNl
+eSBDaXR5MR4wHAYDVQQKExVUaGUgVVNFUlRSVVNUIE5ldHdvcmsxLjAsBgNVBAMT
+JVVTRVJUcnVzdCBFQ0MgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkwHhcNMTAwMjAx
+MDAwMDAwWhcNMzgwMTE4MjM1OTU5WjCBiDELMAkGA1UEBhMCVVMxEzARBgNVBAgT
+Ck5ldyBKZXJzZXkxFDASBgNVBAcTC0plcnNleSBDaXR5MR4wHAYDVQQKExVUaGUg
+VVNFUlRSVVNUIE5ldHdvcmsxLjAsBgNVBAMTJVVTRVJUcnVzdCBFQ0MgQ2VydGlm
+aWNhdGlvbiBBdXRob3JpdHkwdjAQBgcqhkjOPQIBBgUrgQQAIgNiAAQarFRaqflo
+I+d61SRvU8Za2EurxtW20eZzca7dnNYMYf3boIkDuAUU7FfO7l0/4iGzzvfUinng
+o4N+LZfQYcTxmdwlkWOrfzCjtHDix6EznPO/LlxTsV+zfTJ/ijTjeXmjQjBAMB0G
+A1UdDgQWBBQ64QmG1M8ZwpZ2dEl23OA1xmNjmjAOBgNVHQ8BAf8EBAMCAQYwDwYD
+VR0TAQH/BAUwAwEB/zAKBggqhkjOPQQDAwNoADBlAjA2Z6EWCNzklwBBHU6+4WMB
+zzuqQhFkoJ2UOQIReVx7Hfpkue4WQrO/isIJxOzksU0CMQDpKmFHjFJKS04YcPbW
+RNZu9YO6bVi9JNlWSOrvxKJGgYhqOkbRqZtNyWHa0V1Xahg=
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIIF3jCCA8agAwIBAgIQAf1tMPyjylGoG7xkDjUDLTANBgkqhkiG9w0BAQwFADCB
+iDELMAkGA1UEBhMCVVMxEzARBgNVBAgTCk5ldyBKZXJzZXkxFDASBgNVBAcTC0pl
+cnNleSBDaXR5MR4wHAYDVQQKExVUaGUgVVNFUlRSVVNUIE5ldHdvcmsxLjAsBgNV
+BAMTJVVTRVJUcnVzdCBSU0EgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkwHhcNMTAw
+MjAxMDAwMDAwWhcNMzgwMTE4MjM1OTU5WjCBiDELMAkGA1UEBhMCVVMxEzARBgNV
+BAgTCk5ldyBKZXJzZXkxFDASBgNVBAcTC0plcnNleSBDaXR5MR4wHAYDVQQKExVU
+aGUgVVNFUlRSVVNUIE5ldHdvcmsxLjAsBgNVBAMTJVVTRVJUcnVzdCBSU0EgQ2Vy
+dGlmaWNhdGlvbiBBdXRob3JpdHkwggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAwggIK
+AoICAQCAEmUXNg7D2wiz0KxXDXbtzSfTTK1Qg2HiqiBNCS1kCdzOiZ/MPans9s/B
+3PHTsdZ7NygRK0faOca8Ohm0X6a9fZ2jY0K2dvKpOyuR+OJv0OwWIJAJPuLodMkY
+tJHUYmTbf6MG8YgYapAiPLz+E/CHFHv25B+O1ORRxhFnRghRy4YUVD+8M/5+bJz/
+Fp0YvVGONaanZshyZ9shZrHUm3gDwFA66Mzw3LyeTP6vBZY1H1dat//O+T23LLb2
+VN3I5xI6Ta5MirdcmrS3ID3KfyI0rn47aGYBROcBTkZTmzNg95S+UzeQc0PzMsNT
+79uq/nROacdrjGCT3sTHDN/hMq7MkztReJVni+49Vv4M0GkPGw/zJSZrM233bkf6
+c0Plfg6lZrEpfDKEY1WJxA3Bk1QwGROs0303p+tdOmw1XNtB1xLaqUkL39iAigmT
+Yo61Zs8liM2EuLE/pDkP2QKe6xJMlXzzawWpXhaDzLhn4ugTncxbgtNMs+1b/97l
+c6wjOy0AvzVVdAlJ2ElYGn+SNuZRkg7zJn0cTRe8yexDJtC/QV9AqURE9JnnV4ee
+UB9XVKg+/XRjL7FQZQnmWEIuQxpMtPAlR1n6BB6T1CZGSlCBst6+eLf8ZxXhyVeE
+Hg9j1uliutZfVS7qXMYoCAQlObgOK6nyTJccBz8NUvXt7y+CDwIDAQABo0IwQDAd
+BgNVHQ4EFgQUU3m/WqorSs9UgOHYm8Cd8rIDZsswDgYDVR0PAQH/BAQDAgEGMA8G
+A1UdEwEB/wQFMAMBAf8wDQYJKoZIhvcNAQEMBQADggIBAFzUfA3P9wF9QZllDHPF
+Up/L+M+ZBn8b2kMVn54CVVeWFPFSPCeHlCjtHzoBN6J2/FNQwISbxmtOuowhT6KO
+VWKR82kV2LyI48SqC/3vqOlLVSoGIG1VeCkZ7l8wXEskEVX/JJpuXior7gtNn3/3
+ATiUFJVDBwn7YKnuHKsSjKCaXqeYalltiz8I+8jRRa8YFWSQEg9zKC7F4iRO/Fjs
+8PRF/iKz6y+O0tlFYQXBl2+odnKPi4w2r78NBc5xjeambx9spnFixdjQg3IM8WcR
+iQycE0xyNN+81XHfqnHd4blsjDwSXWXavVcStkNr/+XeTWYRUc+ZruwXtuhxkYze
+Sf7dNXGiFSeUHM9h4ya7b6NnJSFd5t0dCy5oGzuCr+yDZ4XUmFF0sbmZgIn/f3gZ
+XHlKYC6SQK5MNyosycdiyA5d9zZbyuAlJQG03RoHnHcAP9Dc1ew91Pq7P8yF1m9/
+qS3fuQL39ZeatTXaw2ewh0qpKJ4jjv9cJ2vhsE/zB+4ALtRZh8tSQZXq9EfX7mRB
+VXyNWQKV3WKdwrnuWih0hKWbt5DHDAff9Yk2dDLWKMGwsAvgnEzDHNb842m1R0aB
+L6KCq9NjRHDEjf8tM7qtj3u1cIiuPhnPQCjY/MiQu12ZIvVS5ljFH4gxQ+6IHdfG
+jjxDah2nGN59PRbxYvnKkKj9
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIIEdDCCA1ygAwIBAgIQRL4Mi1AAJLQR0zYq/mUK/TANBgkqhkiG9w0BAQUFADCB
+lzELMAkGA1UEBhMCVVMxCzAJBgNVBAgTAlVUMRcwFQYDVQQHEw5TYWx0IExha2Ug
+Q2l0eTEeMBwGA1UEChMVVGhlIFVTRVJUUlVTVCBOZXR3b3JrMSEwHwYDVQQLExho
+dHRwOi8vd3d3LnVzZXJ0cnVzdC5jb20xHzAdBgNVBAMTFlVUTi1VU0VSRmlyc3Qt
+SGFyZHdhcmUwHhcNOTkwNzA5MTgxMDQyWhcNMTkwNzA5MTgxOTIyWjCBlzELMAkG
+A1UEBhMCVVMxCzAJBgNVBAgTAlVUMRcwFQYDVQQHEw5TYWx0IExha2UgQ2l0eTEe
+MBwGA1UEChMVVGhlIFVTRVJUUlVTVCBOZXR3b3JrMSEwHwYDVQQLExhodHRwOi8v
+d3d3LnVzZXJ0cnVzdC5jb20xHzAdBgNVBAMTFlVUTi1VU0VSRmlyc3QtSGFyZHdh
+cmUwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCx98M4P7Sof885glFn
+0G2f0v9Y8+efK+wNiVSZuTiZFvfgIXlIwrthdBKWHTxqctU8EGc6Oe0rE81m65UJ
+M6Rsl7HoxuzBdXmcRl6Nq9Bq/bkqVRcQVLMZ8Jr28bFdtqdt++BxF2uiiPsA3/4a
+MXcMmgF6sTLjKwEHOG7DpV4jvEWbe1DByTCP2+UretNb+zNAHqDVmBe8i4fDidNd
+oI6yqqr2jmmIBsX6iSHzCJ1pLgkzmykNRg+MzEk0sGlRvfkGzWitZky8PqxhvQqI
+DsjfPe58BEydCl5rkdbux+0ojatNh4lz0G6k0B4WixThdkQDf2Os5M1JnMWS9Ksy
+oUhbAgMBAAGjgbkwgbYwCwYDVR0PBAQDAgHGMA8GA1UdEwEB/wQFMAMBAf8wHQYD
+VR0OBBYEFKFyXyYbKJhDlV0HN9WFlp1L0sNFMEQGA1UdHwQ9MDswOaA3oDWGM2h0
+dHA6Ly9jcmwudXNlcnRydXN0LmNvbS9VVE4tVVNFUkZpcnN0LUhhcmR3YXJlLmNy
+bDAxBgNVHSUEKjAoBggrBgEFBQcDAQYIKwYBBQUHAwUGCCsGAQUFBwMGBggrBgEF
+BQcDBzANBgkqhkiG9w0BAQUFAAOCAQEARxkP3nTGmZev/K0oXnWO6y1n7k57K9cM
+//bey1WiCuFMVGWTYGufEpytXoMs61quwOQt9ABjHbjAbPLPSbtNk28Gpgoiskli
+CE7/yMgUsogWXecB5BKV5UU0s4tpvc+0hY91UZ59Ojg6FEgSxvunOxqNDYJAB+gE
+CJChicsZUN/KHAG8HQQZexB2lzvukJDKxA4fFm517zP4029bHpbj4HR3dHuKom4t
+3XbWOTCC8KucUvIqx69JXn7HaOWCgchqJ/kniCrVWFCVH/A7HFe7fRQ5YiuayZSS
+KqMiDP+JJn1fIytH1xUdqWqeUQ0qUZ6B+dQ7XnASfxAynB67nfhmqA==
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIIDhDCCAwqgAwIBAgIQL4D+I4wOIg9IZxIokYesszAKBggqhkjOPQQDAzCByjEL
+MAkGA1UEBhMCVVMxFzAVBgNVBAoTDlZlcmlTaWduLCBJbmMuMR8wHQYDVQQLExZW
+ZXJpU2lnbiBUcnVzdCBOZXR3b3JrMTowOAYDVQQLEzEoYykgMjAwNyBWZXJpU2ln
+biwgSW5jLiAtIEZvciBhdXRob3JpemVkIHVzZSBvbmx5MUUwQwYDVQQDEzxWZXJp
+U2lnbiBDbGFzcyAzIFB1YmxpYyBQcmltYXJ5IENlcnRpZmljYXRpb24gQXV0aG9y
+aXR5IC0gRzQwHhcNMDcxMTA1MDAwMDAwWhcNMzgwMTE4MjM1OTU5WjCByjELMAkG
+A1UEBhMCVVMxFzAVBgNVBAoTDlZlcmlTaWduLCBJbmMuMR8wHQYDVQQLExZWZXJp
+U2lnbiBUcnVzdCBOZXR3b3JrMTowOAYDVQQLEzEoYykgMjAwNyBWZXJpU2lnbiwg
+SW5jLiAtIEZvciBhdXRob3JpemVkIHVzZSBvbmx5MUUwQwYDVQQDEzxWZXJpU2ln
+biBDbGFzcyAzIFB1YmxpYyBQcmltYXJ5IENlcnRpZmljYXRpb24gQXV0aG9yaXR5
+IC0gRzQwdjAQBgcqhkjOPQIBBgUrgQQAIgNiAASnVnp8Utpkmw4tXNherJI9/gHm
+GUo9FANL+mAnINmDiWn6VMaaGF5VKmTeBvaNSjutEDxlPZCIBIngMGGzrl0Bp3ve
+fLK+ymVhAIau2o970ImtTR1ZmkGxvEeA3J5iw/mjgbIwga8wDwYDVR0TAQH/BAUw
+AwEB/zAOBgNVHQ8BAf8EBAMCAQYwbQYIKwYBBQUHAQwEYTBfoV2gWzBZMFcwVRYJ
+aW1hZ2UvZ2lmMCEwHzAHBgUrDgMCGgQUj+XTGoasjY5rw8+AatRIGCx7GS4wJRYj
+aHR0cDovL2xvZ28udmVyaXNpZ24uY29tL3ZzbG9nby5naWYwHQYDVR0OBBYEFLMW
+kf3upm7ktS5Jj4d4gYDs5bG1MAoGCCqGSM49BAMDA2gAMGUCMGYhDBgmYFo4e1ZC
+4Kf8NoRRkSAsdk1DPcQdhCPQrNZ8NQbOzWm9kA3bbEhCHQ6qQgIxAJw9SDkjOVga
+FRJZap7v1VmyHVIsmXHNxynfGyphe3HR3vPA5Q06Sqotp9iGKt0uEA==
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIIE0zCCA7ugAwIBAgIQGNrRniZ96LtKIVjNzGs7SjANBgkqhkiG9w0BAQUFADCB
+yjELMAkGA1UEBhMCVVMxFzAVBgNVBAoTDlZlcmlTaWduLCBJbmMuMR8wHQYDVQQL
+ExZWZXJpU2lnbiBUcnVzdCBOZXR3b3JrMTowOAYDVQQLEzEoYykgMjAwNiBWZXJp
+U2lnbiwgSW5jLiAtIEZvciBhdXRob3JpemVkIHVzZSBvbmx5MUUwQwYDVQQDEzxW
+ZXJpU2lnbiBDbGFzcyAzIFB1YmxpYyBQcmltYXJ5IENlcnRpZmljYXRpb24gQXV0
+aG9yaXR5IC0gRzUwHhcNMDYxMTA4MDAwMDAwWhcNMzYwNzE2MjM1OTU5WjCByjEL
+MAkGA1UEBhMCVVMxFzAVBgNVBAoTDlZlcmlTaWduLCBJbmMuMR8wHQYDVQQLExZW
+ZXJpU2lnbiBUcnVzdCBOZXR3b3JrMTowOAYDVQQLEzEoYykgMjAwNiBWZXJpU2ln
+biwgSW5jLiAtIEZvciBhdXRob3JpemVkIHVzZSBvbmx5MUUwQwYDVQQDEzxWZXJp
+U2lnbiBDbGFzcyAzIFB1YmxpYyBQcmltYXJ5IENlcnRpZmljYXRpb24gQXV0aG9y
+aXR5IC0gRzUwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCvJAgIKXo1
+nmAMqudLO07cfLw8RRy7K+D+KQL5VwijZIUVJ/XxrcgxiV0i6CqqpkKzj/i5Vbex
+t0uz/o9+B1fs70PbZmIVYc9gDaTY3vjgw2IIPVQT60nKWVSFJuUrjxuf6/WhkcIz
+SdhDY2pSS9KP6HBRTdGJaXvHcPaz3BJ023tdS1bTlr8Vd6Gw9KIl8q8ckmcY5fQG
+BO+QueQA5N06tRn/Arr0PO7gi+s3i+z016zy9vA9r911kTMZHRxAy3QkGSGT2RT+
+rCpSx4/VBEnkjWNHiDxpg8v+R70rfk/Fla4OndTRQ8Bnc+MUCH7lP59zuDMKz10/
+NIeWiu5T6CUVAgMBAAGjgbIwga8wDwYDVR0TAQH/BAUwAwEB/zAOBgNVHQ8BAf8E
+BAMCAQYwbQYIKwYBBQUHAQwEYTBfoV2gWzBZMFcwVRYJaW1hZ2UvZ2lmMCEwHzAH
+BgUrDgMCGgQUj+XTGoasjY5rw8+AatRIGCx7GS4wJRYjaHR0cDovL2xvZ28udmVy
+aXNpZ24uY29tL3ZzbG9nby5naWYwHQYDVR0OBBYEFH/TZafC3ey78DAJ80M5+gKv
+MzEzMA0GCSqGSIb3DQEBBQUAA4IBAQCTJEowX2LP2BqYLz3q3JktvXf2pXkiOOzE
+p6B4Eq1iDkVwZMXnl2YtmAl+X6/WzChl8gGqCBpH3vn5fJJaCGkgDdk+bW48DW7Y
+5gaRQBi5+MHt39tBquCWIMnNZBU4gcmU7qKEKQsTb47bDN0lAtukixlE0kF6BWlK
+WE9gyn6CagsCqiUXObXbf+eEZSqVir2G3l6BFoMtEMze/aiCKm0oHw0LxOXnGiYZ
+4fQRbxC1lfznQgUy286dUV4otp6F01vvpX1FQHKOtw5rDgb7MzVIcbidJ4vEZV8N
+hnacRHr2lVz2XTIIM6RUthg/aFzyQkqFOFSDX9HoLPKsEdao7WNq
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIIEuTCCA6GgAwIBAgIQQBrEZCGzEyEDDrvkEhrFHTANBgkqhkiG9w0BAQsFADCB
+vTELMAkGA1UEBhMCVVMxFzAVBgNVBAoTDlZlcmlTaWduLCBJbmMuMR8wHQYDVQQL
+ExZWZXJpU2lnbiBUcnVzdCBOZXR3b3JrMTowOAYDVQQLEzEoYykgMjAwOCBWZXJp
+U2lnbiwgSW5jLiAtIEZvciBhdXRob3JpemVkIHVzZSBvbmx5MTgwNgYDVQQDEy9W
+ZXJpU2lnbiBVbml2ZXJzYWwgUm9vdCBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eTAe
+Fw0wODA0MDIwMDAwMDBaFw0zNzEyMDEyMzU5NTlaMIG9MQswCQYDVQQGEwJVUzEX
+MBUGA1UEChMOVmVyaVNpZ24sIEluYy4xHzAdBgNVBAsTFlZlcmlTaWduIFRydXN0
+IE5ldHdvcmsxOjA4BgNVBAsTMShjKSAyMDA4IFZlcmlTaWduLCBJbmMuIC0gRm9y
+IGF1dGhvcml6ZWQgdXNlIG9ubHkxODA2BgNVBAMTL1ZlcmlTaWduIFVuaXZlcnNh
+bCBSb290IENlcnRpZmljYXRpb24gQXV0aG9yaXR5MIIBIjANBgkqhkiG9w0BAQEF
+AAOCAQ8AMIIBCgKCAQEAx2E3XrEBNNti1xWb/1hajCMj1mCOkdeQmIN65lgZOIzF
+9uVkhbSicfvtvbnazU0AtMgtc6XHaXGVHzk8skQHnOgO+k1KxCHfKWGPMiJhgsWH
+H26MfF8WIFFE0XBPV+rjHOPMee5Y2A7Cs0WTwCznmhcrewA3ekEzeOEz4vMQGn+H
+LL729fdC4uW/h2KJXwBL38Xd5HVEMkE6HnFuacsLdUYI0crSK5XQz/u5QGtkjFdN
+/BMReYTtXlT2NJ8IAfMQJQYXStrxHXpma5hgZqTZ79IugvHw7wnqRMkVauIDbjPT
+rJ9VAMf2CGqUuV/c4DPxhGD5WycRtPwW8rtWaoAljQIDAQABo4GyMIGvMA8GA1Ud
+EwEB/wQFMAMBAf8wDgYDVR0PAQH/BAQDAgEGMG0GCCsGAQUFBwEMBGEwX6FdoFsw
+WTBXMFUWCWltYWdlL2dpZjAhMB8wBwYFKw4DAhoEFI/l0xqGrI2Oa8PPgGrUSBgs
+exkuMCUWI2h0dHA6Ly9sb2dvLnZlcmlzaWduLmNvbS92c2xvZ28uZ2lmMB0GA1Ud
+DgQWBBS2d/ppSEefUxLVwuoHMnYH0ZcHGTANBgkqhkiG9w0BAQsFAAOCAQEASvj4
+sAPmLGd75JR3Y8xuTPl9Dg3cyLk1uXBPY/ok+myDjEedO2Pzmvl2MpWRsXe8rJq+
+seQxIcaBlVZaDrHC1LGmWazxY8u4TB1ZkErvkBYoH1quEPuBUDgMbMzxPcP1Y+Oz
+4yHJJDnp/RVmRvQbEdBNc6N9Rvk97ahfYtTxP/jgdFcrGJ2BtMQo2pSXpXDrrB2+
+BxHw1dvd5Yzw1TKwg+ZX4o+/vqGqvz0dtdQ46tewXDpPaj+PwGZsY6rp2aQW9IHR
+lRQOfc2VNNnSj3BzgXucfr2YYdhFh5iQxeuGMMY1v/D/w1WIg0vvBZIGcfK4mJO3
+7M2CYfE45k+XmCpajQ==
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIIEGjCCAwICEQCbfgZJoz5iudXukEhxKe9XMA0GCSqGSIb3DQEBBQUAMIHKMQsw
+CQYDVQQGEwJVUzEXMBUGA1UEChMOVmVyaVNpZ24sIEluYy4xHzAdBgNVBAsTFlZl
+cmlTaWduIFRydXN0IE5ldHdvcmsxOjA4BgNVBAsTMShjKSAxOTk5IFZlcmlTaWdu
+LCBJbmMuIC0gRm9yIGF1dGhvcml6ZWQgdXNlIG9ubHkxRTBDBgNVBAMTPFZlcmlT
+aWduIENsYXNzIDMgUHVibGljIFByaW1hcnkgQ2VydGlmaWNhdGlvbiBBdXRob3Jp
+dHkgLSBHMzAeFw05OTEwMDEwMDAwMDBaFw0zNjA3MTYyMzU5NTlaMIHKMQswCQYD
+VQQGEwJVUzEXMBUGA1UEChMOVmVyaVNpZ24sIEluYy4xHzAdBgNVBAsTFlZlcmlT
+aWduIFRydXN0IE5ldHdvcmsxOjA4BgNVBAsTMShjKSAxOTk5IFZlcmlTaWduLCBJ
+bmMuIC0gRm9yIGF1dGhvcml6ZWQgdXNlIG9ubHkxRTBDBgNVBAMTPFZlcmlTaWdu
+IENsYXNzIDMgUHVibGljIFByaW1hcnkgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkg
+LSBHMzCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAMu6nFL8eB8aHm8b
+N3O9+MlrlBIwT/A2R/XQkQr1F8ilYcEWQE37imGQ5XYgwREGfassbqb1EUGO+i2t
+KmFZpGcmTNDovFJbcCAEWNF6yaRpvIMXZK0Fi7zQWM6NjPXr8EJJC52XJ2cybuGu
+kxUccLwgTS8Y3pKI6GyFVxEa6X7jJhFUokWWVYPKMIno3Nij7SqAP395ZVc+FSBm
+CC+Vk7+qRy+oRpfwEuL+wgorUeZ25rdGt+INpsyow0xZVYnm6FNcHOqd8GIWC6fJ
+Xwzw3sJ2zq/3avL6QaaiMxTJ5Xpj055iN9WFZZ4O5lMkdBteHRJTW8cs54NJOxWu
+imi5V5cCAwEAATANBgkqhkiG9w0BAQUFAAOCAQEAERSWwauSCPc/L8my/uRan2Te
+2yFPhpk0djZX3dAVL8WtfxUfN2JzPtTnX84XA9s1+ivbrmAJXx5fj267Cz3qWhMe
+DGBvtcC1IyIuBwvLqXTLR7sdwdela8wv0kL9Sd2nic9TutoAWii/gt/4uhMdUIaC
+/Y4wjylGsB49Ndo4YhYYSq3mtlFs3q9i6wHQHiT+eo8SGhJouPtmmRQURVyu565p
+F4ErWjfJXir0xuKhXFSbplQAz/DxwceYMBo7Nhbbo27q/a2ywtrvAkcTisDxszGt
+TxzhT5yvDwyd93gN2PQ1VoDat20Xj50egWTh/sVFuq1ruQp6Tk9LhO5L8X3dEQ==
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIIDojCCAoqgAwIBAgIQE4Y1TR0/BvLB+WUF1ZAcYjANBgkqhkiG9w0BAQUFADBr
+MQswCQYDVQQGEwJVUzENMAsGA1UEChMEVklTQTEvMC0GA1UECxMmVmlzYSBJbnRl
+cm5hdGlvbmFsIFNlcnZpY2UgQXNzb2NpYXRpb24xHDAaBgNVBAMTE1Zpc2EgZUNv
+bW1lcmNlIFJvb3QwHhcNMDIwNjI2MDIxODM2WhcNMjIwNjI0MDAxNjEyWjBrMQsw
+CQYDVQQGEwJVUzENMAsGA1UEChMEVklTQTEvMC0GA1UECxMmVmlzYSBJbnRlcm5h
+dGlvbmFsIFNlcnZpY2UgQXNzb2NpYXRpb24xHDAaBgNVBAMTE1Zpc2EgZUNvbW1l
+cmNlIFJvb3QwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCvV95WHm6h
+2mCxlCfLF9sHP4CFT8icttD0b0/Pmdjh28JIXDqsOTPHH2qLJj0rNfVIsZHBAk4E
+lpF7sDPwsRROEW+1QK8bRaVK7362rPKgH1g/EkZgPI2h4H3PVz4zHvtH8aoVlwdV
+ZqW1LS7YgFmypw23RuwhY/81q6UCzyr0TP579ZRdhE2o8mCP2w4lPJ9zcc+U30rq
+299yOIzzlr3xF7zSujtFWsan9sYXiwGd/BmoKoMWuDpI/k4+oKsGGelT84ATB+0t
+vz8KPFUgOSwsAGl0lUq8ILKpeeUYiZGo3BxN77t+Nwtd/jmliFKMAGzsGHxBvfaL
+dXe6YJ2E5/4tAgMBAAGjQjBAMA8GA1UdEwEB/wQFMAMBAf8wDgYDVR0PAQH/BAQD
+AgEGMB0GA1UdDgQWBBQVOIMPPyw/cDMezUb+B4wg4NfDtzANBgkqhkiG9w0BAQUF
+AAOCAQEAX/FBfXxcCLkr4NWSR/pnXKUTwwMhmytMiUbPWU3J/qVAtmPN3XEolWcR
+zCSs00Rsca4BIGsDoo8Ytyk6feUWYFN4PMCvFYP3j1IzJL1kk5fui/fbGKhtcbP3
+LBfQdCVp9/5rPJS+TUtBjE7ic9DjkCJzQ83z7+pzzkWKsKZJ/0x9nXGIxHYdkFsd
+7v3M9+79YKWxehZx0RbQfBI8bGmX265fOZpwLwU8GUYEmSA20GBuYQa7FkKMcPcw
+++DbZqMAAb3mLNqRX6BGi01qnD093QVG/na/oAo85ADmJ7f/hC3euiInlhBx6yLt
+398znM/jra6O1I7mT1GvFpLgXPYHDw==
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIIEvTCCA6WgAwIBAgIBATANBgkqhkiG9w0BAQUFADCBhTELMAkGA1UEBhMCVVMx
+IDAeBgNVBAoMF1dlbGxzIEZhcmdvIFdlbGxzU2VjdXJlMRwwGgYDVQQLDBNXZWxs
+cyBGYXJnbyBCYW5rIE5BMTYwNAYDVQQDDC1XZWxsc1NlY3VyZSBQdWJsaWMgUm9v
+dCBDZXJ0aWZpY2F0ZSBBdXRob3JpdHkwHhcNMDcxMjEzMTcwNzU0WhcNMjIxMjE0
+MDAwNzU0WjCBhTELMAkGA1UEBhMCVVMxIDAeBgNVBAoMF1dlbGxzIEZhcmdvIFdl
+bGxzU2VjdXJlMRwwGgYDVQQLDBNXZWxscyBGYXJnbyBCYW5rIE5BMTYwNAYDVQQD
+DC1XZWxsc1NlY3VyZSBQdWJsaWMgUm9vdCBDZXJ0aWZpY2F0ZSBBdXRob3JpdHkw
+ggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDub7S9eeKPCCGeOARBJe+r
+WxxTkqxtnt3CxC5FlAM1iGd0V+PfjLindo8796jE2yljDpFoNoqXjopxaAkH5OjU
+Dk/41itMpBb570OYj7OeUt9tkTmPOL13i0Nj67eT/DBMHAGTthP796EfvyXhdDcs
+HqRePGj4S78NuR4uNuip5Kf4D8uCdXw1LSLWwr8L87T8bJVhHlfXBIEyg1J55oNj
+z7fLY4sR4r1e6/aN7ZVyKLSsEmLpSjPmgzKuBXWVvYSV2ypcm44uDLiBK0HmOFaf
+SZtsdvqKXfcBeYF8wYNABf5x/Qw/zE5gCQ5lRxAvAcAFP4/4s0HvWkJ+We/Slwxl
+AgMBAAGjggE0MIIBMDAPBgNVHRMBAf8EBTADAQH/MDkGA1UdHwQyMDAwLqAsoCqG
+KGh0dHA6Ly9jcmwucGtpLndlbGxzZmFyZ28uY29tL3dzcHJjYS5jcmwwDgYDVR0P
+AQH/BAQDAgHGMB0GA1UdDgQWBBQmlRkQ2eihl5H/3BnZtQQ+0nMKajCBsgYDVR0j
+BIGqMIGngBQmlRkQ2eihl5H/3BnZtQQ+0nMKaqGBi6SBiDCBhTELMAkGA1UEBhMC
+VVMxIDAeBgNVBAoMF1dlbGxzIEZhcmdvIFdlbGxzU2VjdXJlMRwwGgYDVQQLDBNX
+ZWxscyBGYXJnbyBCYW5rIE5BMTYwNAYDVQQDDC1XZWxsc1NlY3VyZSBQdWJsaWMg
+Um9vdCBDZXJ0aWZpY2F0ZSBBdXRob3JpdHmCAQEwDQYJKoZIhvcNAQEFBQADggEB
+ALkVsUSRzCPIK0134/iaeycNzXK7mQDKfGYZUMbVmO2rvwNa5U3lHshPcZeG1eMd
+/ZDJPHV3V3p9+N701NX3leZ0bh08rnyd2wIDBSxxSyU+B+NemvVmFymIGjifz6pB
+A4SXa5M4esowRBskRDPQ5NHcKDj0E0M1NSljqHyita04pO2t/caaH/+Xc/77szWn
+k4bGdpEA5qxRFsQnMlzbc9qlk1eOPm01JghZ1edE13YgY+esE2fDbbFwRnzVlhE9
+iW9dqKHrjQrawx0zbKPqZxmamX9LPYNRKh3KL4YMon4QLSvUFpULB6ouFJJJtylv
+2G0xffX8oRAHh84vWdw+WNs=
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIIFdjCCA16gAwIBAgIQXmjWEXGUY1BWAGjzPsnFkTANBgkqhkiG9w0BAQUFADBV
+MQswCQYDVQQGEwJDTjEaMBgGA1UEChMRV29TaWduIENBIExpbWl0ZWQxKjAoBgNV
+BAMTIUNlcnRpZmljYXRpb24gQXV0aG9yaXR5IG9mIFdvU2lnbjAeFw0wOTA4MDgw
+MTAwMDFaFw0zOTA4MDgwMTAwMDFaMFUxCzAJBgNVBAYTAkNOMRowGAYDVQQKExFX
+b1NpZ24gQ0EgTGltaXRlZDEqMCgGA1UEAxMhQ2VydGlmaWNhdGlvbiBBdXRob3Jp
+dHkgb2YgV29TaWduMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAvcqN
+rLiRFVaXe2tcesLea9mhsMMQI/qnobLMMfo+2aYpbxY94Gv4uEBf2zmoAHqLoE1U
+fcIiePyOCbiohdfMlZdLdNiefvAA5A6JrkkoRBoQmTIPJYhTpA2zDxIIFgsDcScc
+f+Hb0v1naMQFXQoOXXDX2JegvFNBmpGN9J42Znp+VsGQX+axaCA2pIwkLCxHC1l2
+ZjC1vt7tj/id07sBMOby8w7gLJKA84X5KIq0VC6a7fd2/BVoFutKbOsuEo/Uz/4M
+x1wdC34FMr5esAkqQtXJTpCzWQ27en7N1QhatH/YHGkR+ScPewavVIMYe+HdVHpR
+aG53/Ma/UkpmRqGyZxq7o093oL5d//xWC0Nyd5DKnvnyOfUNqfTq1+ezEC8wQjch
+zDBwyYaYD8xYTYO7feUapTeNtqwylwA6Y3EkHp43xP901DfA4v6IRmAR3Qg/UDar
+uHqklWJqbrDKaiFaafPz+x1wOZXzp26mgYmhiMU7ccqjUu6Du/2gd/Tkb+dC221K
+mYo0SLwX3OSACCK28jHAPwQ+658geda4BmRkAjHXqc1S+4RFaQkAKtxVi8QGRkvA
+Sh0JWzko/amrzgD5LkhLJuYwTKVYyrREgk/nkR4zw7CT/xH8gdLKH3Ep3XZPkiWv
+HYG3Dy+MwwbMLyejSuQOmbp8HkUff6oZRZb9/D0CAwEAAaNCMEAwDgYDVR0PAQH/
+BAQDAgEGMA8GA1UdEwEB/wQFMAMBAf8wHQYDVR0OBBYEFOFmzw7R8bNLtwYgFP6H
+EtX2/vs+MA0GCSqGSIb3DQEBBQUAA4ICAQCoy3JAsnbBfnv8rWTjMnvMPLZdRtP1
+LOJwXcgu2AZ9mNELIaCJWSQBnfmvCX0KI4I01fx8cpm5o9dU9OpScA7F9dY74ToJ
+MuYhOZO9sxXqT2r09Ys/L3yNWC7F4TmgPsc9SnOeQHrAK2GpZ8nzJLmzbVUsWh2e
+JXLOC62qx1ViC777Y7NhRCOjy+EaDveaBk3e1CNOIZZbOVtXHS9dCF4Jef98l7VN
+g64N1uajeeAz0JmWAjCnPv/So0M/BVoG6kQC2nz4SNAzqfkHx5Xh9T71XXG68pWp
+dIhhWeO/yloTunK0jF02h+mmxTwTv97QRCbut+wucPrXnbes5cVAWubXbHssw1ab
+R80LzvobtCHXt2a49CUwi1wNuepnsvRtrtWhnk/Yn+knArAdBtaP4/tIEp9/EaEQ
+PkxROpaw0RPxx9gmrjrKkcRpnd8BKWRRb2jaFOwIQZeQjdCygPLPwj2/kWjFgGce
+xGATVdVhmVd8upUPYUk6ynW8yQqTP2cOEvIo4jEbwFcW3wh8GcF+Dx+FHgo2fFt+
+J7x6v+Db9NpSvd4MVHAxkUOVyLzwPt0JfjBkUO1/AaQzZ01oT74V77D2AhGiGxMl
+OtzCWfHjXEa7ZywCRuoeSKbmW9m1vFGikpbbqsY3Iqb+zCB0oy2pLmvLwIIRIbWT
+ee5Ehr7XHuQe+w==
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIIFWDCCA0CgAwIBAgIQUHBrzdgT/BtOOzNy0hFIjTANBgkqhkiG9w0BAQsFADBG
+MQswCQYDVQQGEwJDTjEaMBgGA1UEChMRV29TaWduIENBIExpbWl0ZWQxGzAZBgNV
+BAMMEkNBIOayg+mAmuagueivgeS5pjAeFw0wOTA4MDgwMTAwMDFaFw0zOTA4MDgw
+MTAwMDFaMEYxCzAJBgNVBAYTAkNOMRowGAYDVQQKExFXb1NpZ24gQ0EgTGltaXRl
+ZDEbMBkGA1UEAwwSQ0Eg5rKD6YCa5qC56K+B5LmmMIICIjANBgkqhkiG9w0BAQEF
+AAOCAg8AMIICCgKCAgEA0EkhHiX8h8EqwqzbdoYGTufQdDTc7WU1/FDWiD+k8H/r
+D195L4mx/bxjWDeTmzj4t1up+thxx7S8gJeNbEvxUNUqKaqoGXqW5pWOdO2XCld1
+9AXbbQs5uQF/qvbW2mzmBeCkTVL829B0txGMe41P/4eDrv8FAxNXUDf+jJZSEExf
+v5RxadmWPgxDT74wwJ85dE8GRV2j1lY5aAfMh09Qd5Nx2UQIsYo06Yms25tO4dnk
+UkWMLhQfkWsZHWgpLFbE4h4TV2TwYeO5Ed+w4VegG63XX9Gv2ystP9Bojg/qnw+L
+NVgbExz03jWhCl3W6t8Sb8D7aQdGctyB9gQjF+BNdeFyb7Ao65vh4YOhn0pdr8yb
++gIgthhid5E7o9Vlrdx8kHccREGkSovrlXLp9glk3Kgtn3R46MGiCWOc76DbT52V
+qyBPt7D3h1ymoOQ3OMdc4zUPLK2jgKLsLl3Az+2LBcLmc272idX10kaO6m1jGx6K
+yX2m+Jzr5dVjhU1zZmkR/sgO9MHHZklTfuQZa/HpelmjbX7FF+Ynxu8b22/8DU0G
+AbQOXDBGVWCvOGU6yke6rCzMRh+yRpY/8+0mBe53oWprfi1tWFxK1I5nuPHa1UaK
+J/kR8slC/k7e3x9cxKSGhxYzoacXGKUN5AXlK8IrC6KVkLn9YDxOiT7nnO4fuwEC
+AwEAAaNCMEAwDgYDVR0PAQH/BAQDAgEGMA8GA1UdEwEB/wQFMAMBAf8wHQYDVR0O
+BBYEFOBNv9ybQV0T6GTwp+kVpOGBwboxMA0GCSqGSIb3DQEBCwUAA4ICAQBqinA4
+WbbaixjIvirTthnVZil6Xc1bL3McJk6jfW+rtylNpumlEYOnOXOvEESS5iVdT2H6
+yAa+Tkvv/vMx/sZ8cApBWNromUuWyXi8mHwCKe0JgOYKOoICKuLJL8hWGSbueBwj
+/feTZU7n85iYr83d2Z5AiDEoOqsuC7CsDCT6eiaY8xJhEPRdF/d+4niXVOKM6Cm6
+jBAyvd0zaziGfjk9DgNyp115j0WKWa5bIW4xRtVZjc8VX90xJc/bYNaBRHIpAlf2
+ltTW/+op2znFuCyKGo3Oy+dCMYYFaA6eFN0AkLppRQjbbpCBhqcqBT/mhDn4t/lX
+X0ykeVoQDF7Va/81XwVRHmyjdanPUIPTfPRm94KNPQx96N97qA4bLJyuQHCH2u2n
+FoJavjVsIE4iYdm8UXrNemHcSxH5/mc0zy4EZmFcV5cjjPOGG0jfKq+nwf/Yjj4D
+u9gqsPoUJbJRa4ZDhS4HIxaAjUz7tGM7zMN07RujHv41D198HRaG9Q7DlfEvr10l
+O1Hm13ZBONFLAzkopR6RctR9q5czxNM+4Gm2KHmgCY0c0f9BckgG/Jou5yD5m6Le
+ie2uPAmvylezkolwQOQvT8Jwg0DXJCxr5wkf09XHwQj02w47HAcLQxGEIYbpgNR1
+2KvxAmLBsX5VYc8T1yaw15zLKYs4SgsOkI26oQ==
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIIEMDCCAxigAwIBAgIQUJRs7Bjq1ZxN1ZfvdY+grTANBgkqhkiG9w0BAQUFADCB
+gjELMAkGA1UEBhMCVVMxHjAcBgNVBAsTFXd3dy54cmFtcHNlY3VyaXR5LmNvbTEk
+MCIGA1UEChMbWFJhbXAgU2VjdXJpdHkgU2VydmljZXMgSW5jMS0wKwYDVQQDEyRY
+UmFtcCBHbG9iYWwgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkwHhcNMDQxMTAxMTcx
+NDA0WhcNMzUwMTAxMDUzNzE5WjCBgjELMAkGA1UEBhMCVVMxHjAcBgNVBAsTFXd3
+dy54cmFtcHNlY3VyaXR5LmNvbTEkMCIGA1UEChMbWFJhbXAgU2VjdXJpdHkgU2Vy
+dmljZXMgSW5jMS0wKwYDVQQDEyRYUmFtcCBHbG9iYWwgQ2VydGlmaWNhdGlvbiBB
+dXRob3JpdHkwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCYJB69FbS6
+38eMpSe2OAtp87ZOqCwuIR1cRN8hXX4jdP5efrRKt6atH67gBhbim1vZZ3RrXYCP
+KZ2GG9mcDZhtdhAoWORlsH9KmHmf4MMxfoArtYzAQDsRhtDLooY2YKTVMIJt2W7Q
+DxIEM5dfT2Fa8OT5kavnHTu86M/0ay00fOJIYRyO82FEzG+gSqmUsE3a56k0enI4
+qEHMPJQRfevIpoy3hsvKMzvZPTeL+3o+hiznc9cKV6xkmxnr9A8ECIqsAxcZZPRa
+JSKNNCyy9mgdEm3Tih4U2sSPpuIjhdV6Db1q4Ons7Be7QhtnqiXtRYMh/MHJfNVi
+PvryxS3T/dRlAgMBAAGjgZ8wgZwwEwYJKwYBBAGCNxQCBAYeBABDAEEwCwYDVR0P
+BAQDAgGGMA8GA1UdEwEB/wQFMAMBAf8wHQYDVR0OBBYEFMZPoj0GY4QJnM5i5ASs
+jVy16bYbMDYGA1UdHwQvMC0wK6ApoCeGJWh0dHA6Ly9jcmwueHJhbXBzZWN1cml0
+eS5jb20vWEdDQS5jcmwwEAYJKwYBBAGCNxUBBAMCAQEwDQYJKoZIhvcNAQEFBQAD
+ggEBAJEVOQMBG2f7Shz5CmBbodpNl2L5JFMn14JkTpAuw0kbK5rc/Kh4ZzXxHfAR
+vbdI4xD2Dd8/0sm2qlWkSLoC295ZLhVbO50WfUfXN+pfTXYSNrsf16GBBEYgoyxt
+qZ4Bfj8pzgCT3/3JknOJiWSe5yvkHJEs0rnOfc5vMZnT5r7SHpDwCRR5XCOrTdLa
+IR9NmXmd4c8nnxCbHIgNsIpkQTG4DmyQJKSbXHGPurt+HBvbaoAPIbzp26a3QPSy
+i6mx5O+aGtA9aZnuqCij4Tyz8LIRnM98QObd50N9otg6tamN8jSZxNQQ4Qb9CYQQ
+O+7ETPTsJ3xCwnR8gooJybQDJbw=
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIIDODCCAiCgAwIBAgIGIAYFFnACMA0GCSqGSIb3DQEBBQUAMDsxCzAJBgNVBAYT
+AlJPMREwDwYDVQQKEwhjZXJ0U0lHTjEZMBcGA1UECxMQY2VydFNJR04gUk9PVCBD
+QTAeFw0wNjA3MDQxNzIwMDRaFw0zMTA3MDQxNzIwMDRaMDsxCzAJBgNVBAYTAlJP
+MREwDwYDVQQKEwhjZXJ0U0lHTjEZMBcGA1UECxMQY2VydFNJR04gUk9PVCBDQTCC
+ASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBALczuX7IJUqOtdu0KBuqV5Do
+0SLTZLrTk+jUrIZhQGpgV2hUhE28alQCBf/fm5oqrl0Hj0rDKH/v+yv6efHHrfAQ
+UySQi2bJqIirr1qjAOm+ukbuW3N7LBeCgV5iLKECZbO9xSsAfsT8AzNXDe3i+s5d
+RdY4zTW2ssHQnIFKquSyAVwdj1+ZxLGt24gh65AIgoDzMKND5pCCrlUoSe1b16kQ
+OA7+j0xbm0bqQfWwCHTD0IgztnzXdN/chNFDDnU5oSVAKOp4yw4sLjmdjItuFhwv
+JoIQ4uNllAoEwF73XVv4EOLQunpL+943AAAaWyjj0pxzPjKHmKHJUS/X3qwzs08C
+AwEAAaNCMEAwDwYDVR0TAQH/BAUwAwEB/zAOBgNVHQ8BAf8EBAMCAcYwHQYDVR0O
+BBYEFOCMm9slSbPxfIbWskKHC9BroNnkMA0GCSqGSIb3DQEBBQUAA4IBAQA+0hyJ
+LjX8+HXd5n9liPRyTMks1zJO890ZeUe9jjtbkw9QSSQTaxQGcu8J06Gh40CEyecY
+MnQ8SG4Pn0vU9x7Tk4ZkVJdjclDVVc/6IJMCopvDI5NOFlV2oHB5bc0hH88vLbwZ
+44gx+FkagQnIl6Z0x2DEW8xXjrJ1/RsCCdtZb3KTafcxQdaIOL+Hsr0Wefmq5L6I
+Jd1hJyMctTEHBDa0GpC9oHRxUIltvBTjD4au8as+x6AJzKNI0eDbZOeStc+vckNw
+i/nDhDwTqn6Sm1dTk/pwwpEOMfmbZ13pljheX7NzTogVZ96edhBiIL5VaZVDADlN
+9u6wWk5JRFRYX0KD
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIIFsDCCA5igAwIBAgIQFci9ZUdcr7iXAF7kBtK8nTANBgkqhkiG9w0BAQUFADBe
+MQswCQYDVQQGEwJUVzEjMCEGA1UECgwaQ2h1bmdod2EgVGVsZWNvbSBDby4sIEx0
+ZC4xKjAoBgNVBAsMIWVQS0kgUm9vdCBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eTAe
+Fw0wNDEyMjAwMjMxMjdaFw0zNDEyMjAwMjMxMjdaMF4xCzAJBgNVBAYTAlRXMSMw
+IQYDVQQKDBpDaHVuZ2h3YSBUZWxlY29tIENvLiwgTHRkLjEqMCgGA1UECwwhZVBL
+SSBSb290IENlcnRpZmljYXRpb24gQXV0aG9yaXR5MIICIjANBgkqhkiG9w0BAQEF
+AAOCAg8AMIICCgKCAgEA4SUP7o3biDN1Z82tH306Tm2d0y8U82N0ywEhajfqhFAH
+SyZbCUNsIZ5qyNUD9WBpj8zwIuQf5/dqIjG3LBXy4P4AakP/h2XGtRrBp0xtInAh
+ijHyl3SJCRImHJ7K2RKilTza6We/CKBk49ZCt0Xvl/T29de1ShUCWH2YWEtgvM3X
+DZoTM1PRYfl61dd4s5oz9wCGzh1NlDivqOx4UXCKXBCDUSH3ET00hl7lSM2XgYI1
+TBnsZfZrxQWh7kcT1rMhJ5QQCtkkO7q+RBNGMD+XPNjX12ruOzjjK9SXDrkb5wdJ
+fzcq+Xd4z1TtW0ado4AOkUPB1ltfFLqfpo0kR0BZv3I4sjZsN/+Z0V0OWQqraffA
+sgRFelQArr5T9rXn4fg8ozHSqf4hUmTFpmfwdQcGlBSBVcYn5AGPF8Fqcde+S/uU
+WH1+ETOxQvdibBjWzwloPn9s9h6PYq2lY9sJpx8iQkEeb5mKPtf5P0B6ebClAZLS
+nT0IFaUQAS2zMnaolQ2zepr7BxB4EW/hj8e6DyUadCrlHJhBmd8hh+iVBmoKs2pH
+dmX2Os+PYhcZewoozRrSgx4hxyy/vv9haLdnG7t4TY3OZ+XkwY63I2binZB1NJip
+NiuKmpS5nezMirH4JYlcWrYvjB9teSSnUmjDhDXiZo1jDiVN1Rmy5nk3pyKdVDEC
+AwEAAaNqMGgwHQYDVR0OBBYEFB4M97Zn8uGSJglFwFU5Lnc/QkqiMAwGA1UdEwQF
+MAMBAf8wOQYEZyoHAAQxMC8wLQIBADAJBgUrDgMCGgUAMAcGBWcqAwAABBRFsMLH
+ClZ87lt4DJX5GFPBphzYEDANBgkqhkiG9w0BAQUFAAOCAgEACbODU1kBPpVJufGB
+uvl2ICO1J2B01GqZNF5sAFPZn/KmsSQHRGoqxqWOeBLoR9lYGxMqXnmbnwoqZ6Yl
+PwZpVnPDimZI+ymBV3QGypzqKOg4ZyYr8dW1P2WT+DZdjo2NQCCHGervJ8A9tDkP
+JXtoUHRVnAxZfVo9QZQlUgjgRywVMRnVvwdVxrsStZf0X4OFunHB2WyBEXYKCrC/
+gpf36j36+uwtqSiUO1bd0lEursC9CBWMd1I0ltabrNMdjmEPNXubrjlpC2JgQCA2
+j6/7Nu4tCEoduL+bXPjqpRugc6bY+G7gMwRfaKonh+3ZwZCc7b3jajWvY9+rGNm6
+5ulK6lCKD2GTHuItGeIwlDWSXQ62B68ZgI9HkFFLLk3dheLSClIKF5r8GrBQAuUB
+o2M3IUxExJtRmREOc5wGj1QupyheRDmHVi03vYVElOEMSyycw5KFNGHLD7ibSkNS
+/jQ6fbjpKdx2qcgw+BRxgMYeNkh0IkFch4LoGHGLQYlE535YW6i4jRPpp2zDR+2z
+Gp1iro2C6pSe3VkQw63d4k3jMdXH7OjysP6SHhYKGvzZ8/gntsm+HbRsZJB/9OTE
+W9c3rkIO3aQab3yIVMUWbuF6aC74Or8NpDyJO3inTmODBCEIZ43ygknQW/2xzQ+D
+hNQ+IIX3Sj0rnP0qCglN6oH4EZw=
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIIEIDCCAwigAwIBAgIQNE7VVyDV7exJ9C/ON9srbTANBgkqhkiG9w0BAQUFADCB
+qTELMAkGA1UEBhMCVVMxFTATBgNVBAoTDHRoYXd0ZSwgSW5jLjEoMCYGA1UECxMf
+Q2VydGlmaWNhdGlvbiBTZXJ2aWNlcyBEaXZpc2lvbjE4MDYGA1UECxMvKGMpIDIw
+MDYgdGhhd3RlLCBJbmMuIC0gRm9yIGF1dGhvcml6ZWQgdXNlIG9ubHkxHzAdBgNV
+BAMTFnRoYXd0ZSBQcmltYXJ5IFJvb3QgQ0EwHhcNMDYxMTE3MDAwMDAwWhcNMzYw
+NzE2MjM1OTU5WjCBqTELMAkGA1UEBhMCVVMxFTATBgNVBAoTDHRoYXd0ZSwgSW5j
+LjEoMCYGA1UECxMfQ2VydGlmaWNhdGlvbiBTZXJ2aWNlcyBEaXZpc2lvbjE4MDYG
+A1UECxMvKGMpIDIwMDYgdGhhd3RlLCBJbmMuIC0gRm9yIGF1dGhvcml6ZWQgdXNl
+IG9ubHkxHzAdBgNVBAMTFnRoYXd0ZSBQcmltYXJ5IFJvb3QgQ0EwggEiMA0GCSqG
+SIb3DQEBAQUAA4IBDwAwggEKAoIBAQCsoPD7gFnUnMekz52hWXMJEEUMDSxuaPFs
+W0hoSVk3/AszGcJ3f8wQLZU0HObrTQmnHNK4yZc2AreJ1CRfBsDMRJSUjQJib+ta
+3RGNKJpchJAQeg29dGYvajig4tVUROsdB58Hum/u6f1OCyn1PoSgAfGcq/gcfomk
+6KHYcWUNo1F77rzSImANuVud37r8UVsLr5iy6S7pBOhih94ryNdOwUxkHt3Ph1i6
+Sk/KaAcdHJ1KxtUvkcx8cXIcxcBn6zL9yZJclNqFwJu/U30rCfSMnZEfl2pSy94J
+NqR32HuHUETVPm4pafs5SSYeCaWAe0At6+gnhcn+Yf1+5nyXHdWdAgMBAAGjQjBA
+MA8GA1UdEwEB/wQFMAMBAf8wDgYDVR0PAQH/BAQDAgEGMB0GA1UdDgQWBBR7W0XP
+r87Lev0xkhpqtvNG61dIUDANBgkqhkiG9w0BAQUFAAOCAQEAeRHAS7ORtvzw6WfU
+DW5FvlXok9LOAz/t2iWwHVfLHjp2oEzsUHboZHIMpKnxuIvW1oeEuzLlQRHAd9mz
+YJ3rG9XRbkREqaYB7FViHXe4XI5ISXycO1cRrK1zN44veFyQaEfZYGDm/Ac9IiAX
+xPcW6cTYcvnIc3zfFi8VqT79aie2oetaupgf1eNNZAqdE8hhuvU5HIe6uL17In/2
+/qxAeeWsEG89jxt5dovEN7MhGITlNgDrYyCZuen+MwS7QcjBAvlEYyCegc5C09Y/
+LHbTY5xZ3Y+m4Q6gLkH3LpVHz7z9M/P2C2F+fpErgUfCJzDupxBdN49cOSvkBPB7
+jVaMaA==
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIICiDCCAg2gAwIBAgIQNfwmXNmET8k9Jj1Xm67XVjAKBggqhkjOPQQDAzCBhDEL
+MAkGA1UEBhMCVVMxFTATBgNVBAoTDHRoYXd0ZSwgSW5jLjE4MDYGA1UECxMvKGMp
+IDIwMDcgdGhhd3RlLCBJbmMuIC0gRm9yIGF1dGhvcml6ZWQgdXNlIG9ubHkxJDAi
+BgNVBAMTG3RoYXd0ZSBQcmltYXJ5IFJvb3QgQ0EgLSBHMjAeFw0wNzExMDUwMDAw
+MDBaFw0zODAxMTgyMzU5NTlaMIGEMQswCQYDVQQGEwJVUzEVMBMGA1UEChMMdGhh
+d3RlLCBJbmMuMTgwNgYDVQQLEy8oYykgMjAwNyB0aGF3dGUsIEluYy4gLSBGb3Ig
+YXV0aG9yaXplZCB1c2Ugb25seTEkMCIGA1UEAxMbdGhhd3RlIFByaW1hcnkgUm9v
+dCBDQSAtIEcyMHYwEAYHKoZIzj0CAQYFK4EEACIDYgAEotWcgnuVnfFSeIf+iha/
+BebfowJPDQfGAFG6DAJSLSKkQjnE/o/qycG+1E3/n3qe4rF8mq2nhglzh9HnmuN6
+papu+7qzcMBniKI11KOasf2twu8x+qi58/sIxpHR+ymVo0IwQDAPBgNVHRMBAf8E
+BTADAQH/MA4GA1UdDwEB/wQEAwIBBjAdBgNVHQ4EFgQUmtgAMADna3+FGO6Lts6K
+DPgR4bswCgYIKoZIzj0EAwMDaQAwZgIxAN344FdHW6fmCsO99YCKlzUNG4k8VIZ3
+KMqh9HneteY4sPBlcIx/AlTCv//YoT7ZzwIxAMSNlPzcU9LcnXgWHxUzI1NS41ox
+XZ3Krr0TKUQNJ1uo52icEvdYPy5yAlejj6EULg==
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIIEKjCCAxKgAwIBAgIQYAGXt0an6rS0mtZLL/eQ+zANBgkqhkiG9w0BAQsFADCB
+rjELMAkGA1UEBhMCVVMxFTATBgNVBAoTDHRoYXd0ZSwgSW5jLjEoMCYGA1UECxMf
+Q2VydGlmaWNhdGlvbiBTZXJ2aWNlcyBEaXZpc2lvbjE4MDYGA1UECxMvKGMpIDIw
+MDggdGhhd3RlLCBJbmMuIC0gRm9yIGF1dGhvcml6ZWQgdXNlIG9ubHkxJDAiBgNV
+BAMTG3RoYXd0ZSBQcmltYXJ5IFJvb3QgQ0EgLSBHMzAeFw0wODA0MDIwMDAwMDBa
+Fw0zNzEyMDEyMzU5NTlaMIGuMQswCQYDVQQGEwJVUzEVMBMGA1UEChMMdGhhd3Rl
+LCBJbmMuMSgwJgYDVQQLEx9DZXJ0aWZpY2F0aW9uIFNlcnZpY2VzIERpdmlzaW9u
+MTgwNgYDVQQLEy8oYykgMjAwOCB0aGF3dGUsIEluYy4gLSBGb3IgYXV0aG9yaXpl
+ZCB1c2Ugb25seTEkMCIGA1UEAxMbdGhhd3RlIFByaW1hcnkgUm9vdCBDQSAtIEcz
+MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAsr8nLPvb2FvdeHsbnndm
+gcs+vHyu86YnmjSjaDFxODNi5PNxZnmxqWWjpYvVj2AtP0LMqmsywCPLLEHd5N/8
+YZzic7IilRFDGF/Eth9XbAoFWCLINkw6fKXRz4aviKdEAhN0cXMKQlkC+BsUa0Lf
+b1+6a4KinVvnSr0eAXLbS3ToO39/fR8EtCab4LRarEc9VbjXsCZSKAExQGbY2SS9
+9irY7CFJXJv2eul/VTV+lmuNk5Mny5K76qxAwJ/C+IDPXfRa3M50hqY+bAtTyr2S
+zhkGcuYMXDhpxwTWvGzOW/b3aJzcJRVIiKHpqfiYnODz1TEoYRFsZ5aNOZnLwkUk
+OQIDAQABo0IwQDAPBgNVHRMBAf8EBTADAQH/MA4GA1UdDwEB/wQEAwIBBjAdBgNV
+HQ4EFgQUrWyqlGCc7eT/+j4KdCtjA/e2Wb8wDQYJKoZIhvcNAQELBQADggEBABpA
+2JVlrAmSicY59BDlqQ5mU1143vokkbvnRFHfxhY0Cu9qRFHqKweKA3rD6z8KLFIW
+oCtDuSWQP3CpMyVtRRooOyfPqsMpQhvfO0zAMzRbQYi/aytlryjvsvXDqmbOe1bu
+t8jLZ8HJnBoYuMTDSQPxYA5QzUbF83d597YV4Djbxy8ooAw/dyZ02SUS2jHaGh7c
+KUGRIjxpp7sC8rZcJwOJ9Abqm+RyguOhCcHpABnTPtRwa7pxpqpYrvS76Wy274fM
+m7v/OeZWYdMKp8RcTGB7BXcmer/YB1IsYvdwY9k5vG8cwnncdimvzsUsZAReiDZu
+MdRAGmI0Nj81Aa6sY6A=
+-----END CERTIFICATE-----
diff --git a/data/ca.crt b/data/ca.crt
index a25e92e..93b6fdc 100644
--- a/data/ca.crt
+++ b/data/ca.crt
@@ -1,18 +1,18 @@
------BEGIN CERTIFICATE-----
-MIIC9TCCAd2gAwIBAgIJAONWqXF8YfsjMA0GCSqGSIb3DQEBCwUAMBExDzANBgNV
-BAMMBk15Um9vdDAeFw0xNjA3MTUxMzIyNTBaFw0yNjA3MTMxMzIyNTBaMBExDzAN
-BgNVBAMMBk15Um9vdDCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBALmL
-YWepekAk5xg615ogxlkDdMITeq3iQFkXS7rseFZJXI4ZwsCHprZjQKG1MyHxXBCB
-YPSvZY7Dk4aG0FOYUpGaB3I5WfIetjcybiZIKnlAdZD2PUDec13kJi+OE9R67xtJ
-nsU9IRuPBRpCYFvuQ/PyuxfNKdOcZ8E/iU3vGg/n+Y9D2jDNedZMfoiKWJ96D6S/
-/TO9+fS0QT8vpdoDfR0EfFG8XOCb3KLSp2eLg2E8j00uCHmViAe9gezAR2Kc5moG
-6DDrCdCf1uC17r+oJoLi2YfzoMKUsQU0m42o5x9sfnjUsF0vJrlvqW1d3bjDXGF7
-CasNZmnv3wEKJYKnMx0CAwEAAaNQME4wHQYDVR0OBBYEFBk1NKEFRhDnJC3G9dUt
-kV2p6qp+MB8GA1UdIwQYMBaAFBk1NKEFRhDnJC3G9dUtkV2p6qp+MAwGA1UdEwQF
-MAMBAf8wDQYJKoZIhvcNAQELBQADggEBAE/+JX3WUOy6XWYj/rxMvGIP95wxVv+5
-6yUZoyZxwDxh961W3PLZo8PhJAHwssq4uKIfwFppEdRS0DXKeu8KDBi/SXqoESPA
-Da2tC3ZUUBd88Pa6AW6QbBoj9JFDwkKOSCEJBtl5hDwikvT2jhDZOD9EvHU8n120
-oQ+S18jiNXg6KBnGaSgeqylC42BLRvqh15lmvAHAoVOC20h4YebfXExfZQRUou27
-mC5Hj6wFDPRgQq4j1aMeNJ1xJdlW/jyZ3PS4XtauWo8cw+a+FX/QcleBV7XFtNQQ
-t+653fvxCFA33ZnaTLT9Za5nJOf+7FB7jnkJFgrSxhV5uvbuXdxg/Lc=
------END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIIC9TCCAd2gAwIBAgIJAONWqXF8YfsjMA0GCSqGSIb3DQEBCwUAMBExDzANBgNV
+BAMMBk15Um9vdDAeFw0xNjA3MTUxMzIyNTBaFw0yNjA3MTMxMzIyNTBaMBExDzAN
+BgNVBAMMBk15Um9vdDCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBALmL
+YWepekAk5xg615ogxlkDdMITeq3iQFkXS7rseFZJXI4ZwsCHprZjQKG1MyHxXBCB
+YPSvZY7Dk4aG0FOYUpGaB3I5WfIetjcybiZIKnlAdZD2PUDec13kJi+OE9R67xtJ
+nsU9IRuPBRpCYFvuQ/PyuxfNKdOcZ8E/iU3vGg/n+Y9D2jDNedZMfoiKWJ96D6S/
+/TO9+fS0QT8vpdoDfR0EfFG8XOCb3KLSp2eLg2E8j00uCHmViAe9gezAR2Kc5moG
+6DDrCdCf1uC17r+oJoLi2YfzoMKUsQU0m42o5x9sfnjUsF0vJrlvqW1d3bjDXGF7
+CasNZmnv3wEKJYKnMx0CAwEAAaNQME4wHQYDVR0OBBYEFBk1NKEFRhDnJC3G9dUt
+kV2p6qp+MB8GA1UdIwQYMBaAFBk1NKEFRhDnJC3G9dUtkV2p6qp+MAwGA1UdEwQF
+MAMBAf8wDQYJKoZIhvcNAQELBQADggEBAE/+JX3WUOy6XWYj/rxMvGIP95wxVv+5
+6yUZoyZxwDxh961W3PLZo8PhJAHwssq4uKIfwFppEdRS0DXKeu8KDBi/SXqoESPA
+Da2tC3ZUUBd88Pa6AW6QbBoj9JFDwkKOSCEJBtl5hDwikvT2jhDZOD9EvHU8n120
+oQ+S18jiNXg6KBnGaSgeqylC42BLRvqh15lmvAHAoVOC20h4YebfXExfZQRUou27
+mC5Hj6wFDPRgQq4j1aMeNJ1xJdlW/jyZ3PS4XtauWo8cw+a+FX/QcleBV7XFtNQQ
+t+653fvxCFA33ZnaTLT9Za5nJOf+7FB7jnkJFgrSxhV5uvbuXdxg/Lc=
+-----END CERTIFICATE-----
diff --git a/data/ca.key b/data/ca.key
index e7317cd..f14f09d 100644
--- a/data/ca.key
+++ b/data/ca.key
@@ -1,27 +1,27 @@
------BEGIN RSA PRIVATE KEY-----
-MIIEpQIBAAKCAQEAuYthZ6l6QCTnGDrXmiDGWQN0whN6reJAWRdLuux4VklcjhnC
-wIemtmNAobUzIfFcEIFg9K9ljsOThobQU5hSkZoHcjlZ8h62NzJuJkgqeUB1kPY9
-QN5zXeQmL44T1HrvG0mexT0hG48FGkJgW+5D8/K7F80p05xnwT+JTe8aD+f5j0Pa
-MM151kx+iIpYn3oPpL/9M7359LRBPy+l2gN9HQR8Ubxc4JvcotKnZ4uDYTyPTS4I
-eZWIB72B7MBHYpzmagboMOsJ0J/W4LXuv6gmguLZh/OgwpSxBTSbjajnH2x+eNSw
-XS8muW+pbV3duMNcYXsJqw1mae/fAQolgqczHQIDAQABAoIBAQCG7ehAxUuE2BFC
-WpAtooX7d3ryI85EI1OeNkW5Qnvka+cl42/wKPXAjv8SWb48gdPsoNmMNv0IzAs9
-ek6HbC8neTbPBwv0+gaSr1bQ+gwBLzIP4DH9OYf2EJMAZDbhfyDg3DHcx66K5v/T
-7885K1U5Uxxhm64+F/CP5Q+JoEZ4p4EZIW2Jof2fCdfPkItbirsXVYOHIbWZstrm
-g81F5cejcYULElih0S8eCJEp0LXCkLiRFy09mPQuOdozews1qWSZMbCWyRiFlfl7
-7iYrZD5o5j5KlDGUuFe7bTU5rB0ZPi9vUe1gCzu7OCfA5qK/fCe3LaCfpQgOu+Kh
-vCrJSg21AoGBAOcipLzjpDgRqVlxDuNqwKZjlZMb+ree3E0qYtEsOoUOA9kK29w6
-TFoCAyzgrgYURV3RE1S0TrkhJlTdNDoYRzjALgv9uvNPqc/XpDLzXWPwVr5mqHYh
-PEhg7r+Ywu88KyucKus305rVbU6wmNs2thoztNBDTzU48PVXMxP3YNOrAoGBAM2B
-L6himfBQi8u6uFP42QY8cN4f1bYuHRIS3NQGb5WekieA9PKyQf2V+lTSfxqWVQ3X
-L0oVEw94cqiHML5aPIcTrhqvGWGGE9FBrRDeayl2b0wxuPAAOPILtOlM0S0uh53k
-xa04sRP0GlEbIkWESW8sjDqyxLhZpGPv0M11OcxXAoGAa2TybH3NSOwT5uYcR9jL
-SMSOtDrU5MqgjA48ufo1+qrHaOqdu5cu8MdsmEaRNWvnyy6hL8NTrLtVZysc4D11
-ok3RV2r+mZ0TRupodfAUHaKHe5KRhcnti6fWZxngwW4QlQPMAV0AKjouvthZPcoP
-FN+fjQEpZY5ej3CD4CwaRl8CgYEAotPkRf/yRvYa/g5xNJ+snYNQTr9cnt/EyuhF
-Ln329c7RsRk9e/r/zISD96ddbFyHAdNpNcKi+pQODTgox/pJkSFnxt7MNnh8xUXL
-cd05fX3Iy89t4EPc2vOpoVzrNGh0rgdxFUIhFFVKcM8WBYy+fqcGaQ/yTLtCRKjk
-gZaLeDsCgYEAyuj6SV76bhsh3Rtf4i01cnHeZXc+LDFiDYYMsdj26mKzREX6wazR
-qnAyqK74M9UwlE6QFfZ9mK8MWVY+Ijp0RViEHl2l6d/N+KQfrK7OwjLdmFz9sxsc
-V1XQQitdx9/XrICR1B4A6hQYpe6NmRkAn2GJHpprIn8P3+6bOTOefvQ=
------END RSA PRIVATE KEY-----
+-----BEGIN RSA PRIVATE KEY-----
+MIIEpQIBAAKCAQEAuYthZ6l6QCTnGDrXmiDGWQN0whN6reJAWRdLuux4VklcjhnC
+wIemtmNAobUzIfFcEIFg9K9ljsOThobQU5hSkZoHcjlZ8h62NzJuJkgqeUB1kPY9
+QN5zXeQmL44T1HrvG0mexT0hG48FGkJgW+5D8/K7F80p05xnwT+JTe8aD+f5j0Pa
+MM151kx+iIpYn3oPpL/9M7359LRBPy+l2gN9HQR8Ubxc4JvcotKnZ4uDYTyPTS4I
+eZWIB72B7MBHYpzmagboMOsJ0J/W4LXuv6gmguLZh/OgwpSxBTSbjajnH2x+eNSw
+XS8muW+pbV3duMNcYXsJqw1mae/fAQolgqczHQIDAQABAoIBAQCG7ehAxUuE2BFC
+WpAtooX7d3ryI85EI1OeNkW5Qnvka+cl42/wKPXAjv8SWb48gdPsoNmMNv0IzAs9
+ek6HbC8neTbPBwv0+gaSr1bQ+gwBLzIP4DH9OYf2EJMAZDbhfyDg3DHcx66K5v/T
+7885K1U5Uxxhm64+F/CP5Q+JoEZ4p4EZIW2Jof2fCdfPkItbirsXVYOHIbWZstrm
+g81F5cejcYULElih0S8eCJEp0LXCkLiRFy09mPQuOdozews1qWSZMbCWyRiFlfl7
+7iYrZD5o5j5KlDGUuFe7bTU5rB0ZPi9vUe1gCzu7OCfA5qK/fCe3LaCfpQgOu+Kh
+vCrJSg21AoGBAOcipLzjpDgRqVlxDuNqwKZjlZMb+ree3E0qYtEsOoUOA9kK29w6
+TFoCAyzgrgYURV3RE1S0TrkhJlTdNDoYRzjALgv9uvNPqc/XpDLzXWPwVr5mqHYh
+PEhg7r+Ywu88KyucKus305rVbU6wmNs2thoztNBDTzU48PVXMxP3YNOrAoGBAM2B
+L6himfBQi8u6uFP42QY8cN4f1bYuHRIS3NQGb5WekieA9PKyQf2V+lTSfxqWVQ3X
+L0oVEw94cqiHML5aPIcTrhqvGWGGE9FBrRDeayl2b0wxuPAAOPILtOlM0S0uh53k
+xa04sRP0GlEbIkWESW8sjDqyxLhZpGPv0M11OcxXAoGAa2TybH3NSOwT5uYcR9jL
+SMSOtDrU5MqgjA48ufo1+qrHaOqdu5cu8MdsmEaRNWvnyy6hL8NTrLtVZysc4D11
+ok3RV2r+mZ0TRupodfAUHaKHe5KRhcnti6fWZxngwW4QlQPMAV0AKjouvthZPcoP
+FN+fjQEpZY5ej3CD4CwaRl8CgYEAotPkRf/yRvYa/g5xNJ+snYNQTr9cnt/EyuhF
+Ln329c7RsRk9e/r/zISD96ddbFyHAdNpNcKi+pQODTgox/pJkSFnxt7MNnh8xUXL
+cd05fX3Iy89t4EPc2vOpoVzrNGh0rgdxFUIhFFVKcM8WBYy+fqcGaQ/yTLtCRKjk
+gZaLeDsCgYEAyuj6SV76bhsh3Rtf4i01cnHeZXc+LDFiDYYMsdj26mKzREX6wazR
+qnAyqK74M9UwlE6QFfZ9mK8MWVY+Ijp0RViEHl2l6d/N+KQfrK7OwjLdmFz9sxsc
+V1XQQitdx9/XrICR1B4A6hQYpe6NmRkAn2GJHpprIn8P3+6bOTOefvQ=
+-----END RSA PRIVATE KEY-----
diff --git a/data/dh/amazon1024.pem b/data/dh/amazon1024.pem
index 86998aa..41f3bd7 100644
--- a/data/dh/amazon1024.pem
+++ b/data/dh/amazon1024.pem
@@ -1,9 +1,9 @@
------BEGIN X9.42 DH PARAMETERS-----
-MIIBHgKBgQDWwJStV/U3T2jVjHsJaHLZRc7h+CZk4FlEIeHV48jpi8Pwpq+PkvGe
-P++TN7mbnJOgVdValuQlc0AFpo7UcED98ApVk266S5P2TLoaAE5FE2EcmyF0OKcD
-ogYMIDjQz6r/u6SPudrEskUNxYywMgoDF+KjG0SgJ4fGV/sMDL7BHQIVAJQUoYp7
-V16PQvbLLbwi6x/CHUkpAoGAJ+GrExtsItJZ0Znp34rLsf4v1EYa+3yzIdaUawLG
-appFwGLV/9AeRwdc97CChF6H5JUppmqEBTVNEUgYSTMHg0HJ+mJ/3jwqmhleLK4z
-FFxHvYa7zUmwEvI1u8WEhs4ddVIhdfx8nv066qwGhVsAPmWiII0W59idk1nf1ecA
-LeE=
------END X9.42 DH PARAMETERS-----
+-----BEGIN X9.42 DH PARAMETERS-----
+MIIBHgKBgQDWwJStV/U3T2jVjHsJaHLZRc7h+CZk4FlEIeHV48jpi8Pwpq+PkvGe
+P++TN7mbnJOgVdValuQlc0AFpo7UcED98ApVk266S5P2TLoaAE5FE2EcmyF0OKcD
+ogYMIDjQz6r/u6SPudrEskUNxYywMgoDF+KjG0SgJ4fGV/sMDL7BHQIVAJQUoYp7
+V16PQvbLLbwi6x/CHUkpAoGAJ+GrExtsItJZ0Znp34rLsf4v1EYa+3yzIdaUawLG
+appFwGLV/9AeRwdc97CChF6H5JUppmqEBTVNEUgYSTMHg0HJ+mJ/3jwqmhleLK4z
+FFxHvYa7zUmwEvI1u8WEhs4ddVIhdfx8nv066qwGhVsAPmWiII0W59idk1nf1ecA
+LeE=
+-----END X9.42 DH PARAMETERS-----
diff --git a/data/dh/default-dh.pem b/data/dh/default-dh.pem
index 961a6fb..a108ef7 100644
--- a/data/dh/default-dh.pem
+++ b/data/dh/default-dh.pem
@@ -1,9 +1,9 @@
------BEGIN DH PARAMETERS-----
-MIIBOAKCATEA//////////+t+FRYortKmq/cViAnPTzx2LnFg84tNpWp4TZBFGQz
-+8yTnc4kmz75fS/jY2MMddj2gbICrsRhetPfHtXV/WVhJDP1H18GbtCFY2VVPe0a
-87VXE15/V8k1mE8McODmi3fipona8+/och3xWKE2rec1MKzKT0g6eXq8CrGCsyT7
-YdEIqUuyyOP7uWrat2DX9GgdT0Kj3jlN9K5W7edjcrsZCwenyO4KbXCeAvzhzffi
-7MA0BM0oNC9hkXL+nOmFg/+OTxIy7vKBg8P+OxtMb61zO7X8vC7CIAXFjvGDfRaD
-ssbzSibBsu/6iGtCOGEfz9zeNVs7ZRkDW7w09N75nAI4YbRvydbmyQd62R0mkff3
-7lmMsPrBhtkcrv4TCYUzyLP//////////wIBAg==
------END DH PARAMETERS-----
+-----BEGIN DH PARAMETERS-----
+MIIBOAKCATEA//////////+t+FRYortKmq/cViAnPTzx2LnFg84tNpWp4TZBFGQz
++8yTnc4kmz75fS/jY2MMddj2gbICrsRhetPfHtXV/WVhJDP1H18GbtCFY2VVPe0a
+87VXE15/V8k1mE8McODmi3fipona8+/och3xWKE2rec1MKzKT0g6eXq8CrGCsyT7
+YdEIqUuyyOP7uWrat2DX9GgdT0Kj3jlN9K5W7edjcrsZCwenyO4KbXCeAvzhzffi
+7MA0BM0oNC9hkXL+nOmFg/+OTxIy7vKBg8P+OxtMb61zO7X8vC7CIAXFjvGDfRaD
+ssbzSibBsu/6iGtCOGEfz9zeNVs7ZRkDW7w09N75nAI4YbRvydbmyQd62R0mkff3
+7lmMsPrBhtkcrv4TCYUzyLP//////////wIBAg==
+-----END DH PARAMETERS-----
diff --git a/data/dh/ffdhe2432.pem b/data/dh/ffdhe2432.pem
index 961a6fb..a108ef7 100644
--- a/data/dh/ffdhe2432.pem
+++ b/data/dh/ffdhe2432.pem
@@ -1,9 +1,9 @@
------BEGIN DH PARAMETERS-----
-MIIBOAKCATEA//////////+t+FRYortKmq/cViAnPTzx2LnFg84tNpWp4TZBFGQz
-+8yTnc4kmz75fS/jY2MMddj2gbICrsRhetPfHtXV/WVhJDP1H18GbtCFY2VVPe0a
-87VXE15/V8k1mE8McODmi3fipona8+/och3xWKE2rec1MKzKT0g6eXq8CrGCsyT7
-YdEIqUuyyOP7uWrat2DX9GgdT0Kj3jlN9K5W7edjcrsZCwenyO4KbXCeAvzhzffi
-7MA0BM0oNC9hkXL+nOmFg/+OTxIy7vKBg8P+OxtMb61zO7X8vC7CIAXFjvGDfRaD
-ssbzSibBsu/6iGtCOGEfz9zeNVs7ZRkDW7w09N75nAI4YbRvydbmyQd62R0mkff3
-7lmMsPrBhtkcrv4TCYUzyLP//////////wIBAg==
------END DH PARAMETERS-----
+-----BEGIN DH PARAMETERS-----
+MIIBOAKCATEA//////////+t+FRYortKmq/cViAnPTzx2LnFg84tNpWp4TZBFGQz
++8yTnc4kmz75fS/jY2MMddj2gbICrsRhetPfHtXV/WVhJDP1H18GbtCFY2VVPe0a
+87VXE15/V8k1mE8McODmi3fipona8+/och3xWKE2rec1MKzKT0g6eXq8CrGCsyT7
+YdEIqUuyyOP7uWrat2DX9GgdT0Kj3jlN9K5W7edjcrsZCwenyO4KbXCeAvzhzffi
+7MA0BM0oNC9hkXL+nOmFg/+OTxIy7vKBg8P+OxtMb61zO7X8vC7CIAXFjvGDfRaD
+ssbzSibBsu/6iGtCOGEfz9zeNVs7ZRkDW7w09N75nAI4YbRvydbmyQd62R0mkff3
+7lmMsPrBhtkcrv4TCYUzyLP//////////wIBAg==
+-----END DH PARAMETERS-----
diff --git a/data/dh/ffdhe3072.pem b/data/dh/ffdhe3072.pem
index fb31ccd..254b1e1 100644
--- a/data/dh/ffdhe3072.pem
+++ b/data/dh/ffdhe3072.pem
@@ -1,11 +1,11 @@
------BEGIN DH PARAMETERS-----
-MIIBiAKCAYEA//////////+t+FRYortKmq/cViAnPTzx2LnFg84tNpWp4TZBFGQz
-+8yTnc4kmz75fS/jY2MMddj2gbICrsRhetPfHtXV/WVhJDP1H18GbtCFY2VVPe0a
-87VXE15/V8k1mE8McODmi3fipona8+/och3xWKE2rec1MKzKT0g6eXq8CrGCsyT7
-YdEIqUuyyOP7uWrat2DX9GgdT0Kj3jlN9K5W7edjcrsZCwenyO4KbXCeAvzhzffi
-7MA0BM0oNC9hkXL+nOmFg/+OTxIy7vKBg8P+OxtMb61zO7X8vC7CIAXFjvGDfRaD
-ssbzSibBsu/6iGtCOGEfz9zeNVs7ZRkDW7w09N75nAI4YbRvydbmyQd62R0mkff3
-7lmMsPrBhtkcrv4TCYUTknC0EwyTvEN5RPT9RFLi103TZPLiHnH1S/9croKrnJ32
-nuhtK8UiNjoNq8Uhl5sN6todv5pC1cRITgq80Gv6U93vPBsg7j/VnXwl5B0rZsYu
-N///////////AgEC
------END DH PARAMETERS-----
+-----BEGIN DH PARAMETERS-----
+MIIBiAKCAYEA//////////+t+FRYortKmq/cViAnPTzx2LnFg84tNpWp4TZBFGQz
++8yTnc4kmz75fS/jY2MMddj2gbICrsRhetPfHtXV/WVhJDP1H18GbtCFY2VVPe0a
+87VXE15/V8k1mE8McODmi3fipona8+/och3xWKE2rec1MKzKT0g6eXq8CrGCsyT7
+YdEIqUuyyOP7uWrat2DX9GgdT0Kj3jlN9K5W7edjcrsZCwenyO4KbXCeAvzhzffi
+7MA0BM0oNC9hkXL+nOmFg/+OTxIy7vKBg8P+OxtMb61zO7X8vC7CIAXFjvGDfRaD
+ssbzSibBsu/6iGtCOGEfz9zeNVs7ZRkDW7w09N75nAI4YbRvydbmyQd62R0mkff3
+7lmMsPrBhtkcrv4TCYUTknC0EwyTvEN5RPT9RFLi103TZPLiHnH1S/9croKrnJ32
+nuhtK8UiNjoNq8Uhl5sN6todv5pC1cRITgq80Gv6U93vPBsg7j/VnXwl5B0rZsYu
+N///////////AgEC
+-----END DH PARAMETERS-----
diff --git a/data/dh/ffdhe4096.pem b/data/dh/ffdhe4096.pem
index 3cf0fcb..190b823 100644
--- a/data/dh/ffdhe4096.pem
+++ b/data/dh/ffdhe4096.pem
@@ -1,13 +1,13 @@
------BEGIN DH PARAMETERS-----
-MIICCAKCAgEA//////////+t+FRYortKmq/cViAnPTzx2LnFg84tNpWp4TZBFGQz
-+8yTnc4kmz75fS/jY2MMddj2gbICrsRhetPfHtXV/WVhJDP1H18GbtCFY2VVPe0a
-87VXE15/V8k1mE8McODmi3fipona8+/och3xWKE2rec1MKzKT0g6eXq8CrGCsyT7
-YdEIqUuyyOP7uWrat2DX9GgdT0Kj3jlN9K5W7edjcrsZCwenyO4KbXCeAvzhzffi
-7MA0BM0oNC9hkXL+nOmFg/+OTxIy7vKBg8P+OxtMb61zO7X8vC7CIAXFjvGDfRaD
-ssbzSibBsu/6iGtCOGEfz9zeNVs7ZRkDW7w09N75nAI4YbRvydbmyQd62R0mkff3
-7lmMsPrBhtkcrv4TCYUTknC0EwyTvEN5RPT9RFLi103TZPLiHnH1S/9croKrnJ32
-nuhtK8UiNjoNq8Uhl5sN6todv5pC1cRITgq80Gv6U93vPBsg7j/VnXwl5B0rZp4e
-8W5vUsMWTfT7eTDp5OWIV7asfV9C1p9tGHdjzx1VA0AEh/VbpX4xzHpxNciG77Qx
-iu1qHgEtnmgyqQdgCpGBMMRtx3j5ca0AOAkpmaMzy4t6Gh25PXFAADwqTs6p+Y0K
-zAqCkc3OyX3Pjsm1Wn+IpGtNtahR9EGC4caKAH5eZV9q//////////8CAQI=
------END DH PARAMETERS-----
+-----BEGIN DH PARAMETERS-----
+MIICCAKCAgEA//////////+t+FRYortKmq/cViAnPTzx2LnFg84tNpWp4TZBFGQz
++8yTnc4kmz75fS/jY2MMddj2gbICrsRhetPfHtXV/WVhJDP1H18GbtCFY2VVPe0a
+87VXE15/V8k1mE8McODmi3fipona8+/och3xWKE2rec1MKzKT0g6eXq8CrGCsyT7
+YdEIqUuyyOP7uWrat2DX9GgdT0Kj3jlN9K5W7edjcrsZCwenyO4KbXCeAvzhzffi
+7MA0BM0oNC9hkXL+nOmFg/+OTxIy7vKBg8P+OxtMb61zO7X8vC7CIAXFjvGDfRaD
+ssbzSibBsu/6iGtCOGEfz9zeNVs7ZRkDW7w09N75nAI4YbRvydbmyQd62R0mkff3
+7lmMsPrBhtkcrv4TCYUTknC0EwyTvEN5RPT9RFLi103TZPLiHnH1S/9croKrnJ32
+nuhtK8UiNjoNq8Uhl5sN6todv5pC1cRITgq80Gv6U93vPBsg7j/VnXwl5B0rZp4e
+8W5vUsMWTfT7eTDp5OWIV7asfV9C1p9tGHdjzx1VA0AEh/VbpX4xzHpxNciG77Qx
+iu1qHgEtnmgyqQdgCpGBMMRtx3j5ca0AOAkpmaMzy4t6Gh25PXFAADwqTs6p+Y0K
+zAqCkc3OyX3Pjsm1Wn+IpGtNtahR9EGC4caKAH5eZV9q//////////8CAQI=
+-----END DH PARAMETERS-----
diff --git a/data/dh/ffdhe6144.pem b/data/dh/ffdhe6144.pem
index d8239bb..ff7d4e5 100644
--- a/data/dh/ffdhe6144.pem
+++ b/data/dh/ffdhe6144.pem
@@ -1,19 +1,19 @@
------BEGIN DH PARAMETERS-----
-MIIDCAKCAwEA//////////+t+FRYortKmq/cViAnPTzx2LnFg84tNpWp4TZBFGQz
-+8yTnc4kmz75fS/jY2MMddj2gbICrsRhetPfHtXV/WVhJDP1H18GbtCFY2VVPe0a
-87VXE15/V8k1mE8McODmi3fipona8+/och3xWKE2rec1MKzKT0g6eXq8CrGCsyT7
-YdEIqUuyyOP7uWrat2DX9GgdT0Kj3jlN9K5W7edjcrsZCwenyO4KbXCeAvzhzffi
-7MA0BM0oNC9hkXL+nOmFg/+OTxIy7vKBg8P+OxtMb61zO7X8vC7CIAXFjvGDfRaD
-ssbzSibBsu/6iGtCOGEfz9zeNVs7ZRkDW7w09N75nAI4YbRvydbmyQd62R0mkff3
-7lmMsPrBhtkcrv4TCYUTknC0EwyTvEN5RPT9RFLi103TZPLiHnH1S/9croKrnJ32
-nuhtK8UiNjoNq8Uhl5sN6todv5pC1cRITgq80Gv6U93vPBsg7j/VnXwl5B0rZp4e
-8W5vUsMWTfT7eTDp5OWIV7asfV9C1p9tGHdjzx1VA0AEh/VbpX4xzHpxNciG77Qx
-iu1qHgEtnmgyqQdgCpGBMMRtx3j5ca0AOAkpmaMzy4t6Gh25PXFAADwqTs6p+Y0K
-zAqCkc3OyX3Pjsm1Wn+IpGtNtahR9EGC4caKAH5eDdkCC/1ktkUDbHpOZ30sOFMq
-OiO6RELK9T6mO7RUMpt2JMiRe91kscD9TLOOjDNMcBw6za0GV/zP7HGbH1w+TkYE
-HziBR/tM/bR3pSRx96mpaRC4VTIu22NA2KAO8JI1BRHjCr7B//njom5/sp+MGDAj
-w1h+ONoAd9m0dj5OS5Syu8GUxmUed8r5ku6qwCMqKBv2s6c5wSJhFoIK6NtYR6Z8
-vvnJCRtGLVOM1ysDdGrnf15iKSwxFWKoRlBdyC24VDOK5J9SNclbkReMzy3Vys70
-A+ydGBDGJysEWztx+dxrgNY/3UqOmtseaWKmlSbUMWHBpB1XDXk42tSkDjKc0OQO
-Zf//////////AgEC
------END DH PARAMETERS-----
+-----BEGIN DH PARAMETERS-----
+MIIDCAKCAwEA//////////+t+FRYortKmq/cViAnPTzx2LnFg84tNpWp4TZBFGQz
++8yTnc4kmz75fS/jY2MMddj2gbICrsRhetPfHtXV/WVhJDP1H18GbtCFY2VVPe0a
+87VXE15/V8k1mE8McODmi3fipona8+/och3xWKE2rec1MKzKT0g6eXq8CrGCsyT7
+YdEIqUuyyOP7uWrat2DX9GgdT0Kj3jlN9K5W7edjcrsZCwenyO4KbXCeAvzhzffi
+7MA0BM0oNC9hkXL+nOmFg/+OTxIy7vKBg8P+OxtMb61zO7X8vC7CIAXFjvGDfRaD
+ssbzSibBsu/6iGtCOGEfz9zeNVs7ZRkDW7w09N75nAI4YbRvydbmyQd62R0mkff3
+7lmMsPrBhtkcrv4TCYUTknC0EwyTvEN5RPT9RFLi103TZPLiHnH1S/9croKrnJ32
+nuhtK8UiNjoNq8Uhl5sN6todv5pC1cRITgq80Gv6U93vPBsg7j/VnXwl5B0rZp4e
+8W5vUsMWTfT7eTDp5OWIV7asfV9C1p9tGHdjzx1VA0AEh/VbpX4xzHpxNciG77Qx
+iu1qHgEtnmgyqQdgCpGBMMRtx3j5ca0AOAkpmaMzy4t6Gh25PXFAADwqTs6p+Y0K
+zAqCkc3OyX3Pjsm1Wn+IpGtNtahR9EGC4caKAH5eDdkCC/1ktkUDbHpOZ30sOFMq
+OiO6RELK9T6mO7RUMpt2JMiRe91kscD9TLOOjDNMcBw6za0GV/zP7HGbH1w+TkYE
+HziBR/tM/bR3pSRx96mpaRC4VTIu22NA2KAO8JI1BRHjCr7B//njom5/sp+MGDAj
+w1h+ONoAd9m0dj5OS5Syu8GUxmUed8r5ku6qwCMqKBv2s6c5wSJhFoIK6NtYR6Z8
+vvnJCRtGLVOM1ysDdGrnf15iKSwxFWKoRlBdyC24VDOK5J9SNclbkReMzy3Vys70
+A+ydGBDGJysEWztx+dxrgNY/3UqOmtseaWKmlSbUMWHBpB1XDXk42tSkDjKc0OQO
+Zf//////////AgEC
+-----END DH PARAMETERS-----
diff --git a/data/dh/ffdhe8192.pem b/data/dh/ffdhe8192.pem
index 4484cf8..9f40a5f 100644
--- a/data/dh/ffdhe8192.pem
+++ b/data/dh/ffdhe8192.pem
@@ -1,24 +1,24 @@
------BEGIN DH PARAMETERS-----
-MIIECAKCBAEA//////////+t+FRYortKmq/cViAnPTzx2LnFg84tNpWp4TZBFGQz
-+8yTnc4kmz75fS/jY2MMddj2gbICrsRhetPfHtXV/WVhJDP1H18GbtCFY2VVPe0a
-87VXE15/V8k1mE8McODmi3fipona8+/och3xWKE2rec1MKzKT0g6eXq8CrGCsyT7
-YdEIqUuyyOP7uWrat2DX9GgdT0Kj3jlN9K5W7edjcrsZCwenyO4KbXCeAvzhzffi
-7MA0BM0oNC9hkXL+nOmFg/+OTxIy7vKBg8P+OxtMb61zO7X8vC7CIAXFjvGDfRaD
-ssbzSibBsu/6iGtCOGEfz9zeNVs7ZRkDW7w09N75nAI4YbRvydbmyQd62R0mkff3
-7lmMsPrBhtkcrv4TCYUTknC0EwyTvEN5RPT9RFLi103TZPLiHnH1S/9croKrnJ32
-nuhtK8UiNjoNq8Uhl5sN6todv5pC1cRITgq80Gv6U93vPBsg7j/VnXwl5B0rZp4e
-8W5vUsMWTfT7eTDp5OWIV7asfV9C1p9tGHdjzx1VA0AEh/VbpX4xzHpxNciG77Qx
-iu1qHgEtnmgyqQdgCpGBMMRtx3j5ca0AOAkpmaMzy4t6Gh25PXFAADwqTs6p+Y0K
-zAqCkc3OyX3Pjsm1Wn+IpGtNtahR9EGC4caKAH5eDdkCC/1ktkUDbHpOZ30sOFMq
-OiO6RELK9T6mO7RUMpt2JMiRe91kscD9TLOOjDNMcBw6za0GV/zP7HGbH1w+TkYE
-HziBR/tM/bR3pSRx96mpaRC4VTIu22NA2KAO8JI1BRHjCr7B//njom5/sp+MGDAj
-w1h+ONoAd9m0dj5OS5Syu8GUxmUed8r5ku6qwCMqKBv2s6c5wSJhFoIK6NtYR6Z8
-vvnJCRtGLVOM1ysDdGrnf15iKSwxFWKoRlBdyC24VDOK5J9SNclbkReMzy3Vys70
-A+ydGBDGJysEWztx+dxrgNY/3UqOmtseaWKmlSbUMWHBpB1XDXk42tSkDjKcz/Rq
-qjatAEz2AMg4HkJaMdlRrmT9sj/OyVCdQ2h/62nt0cxeC4zDvfZLEO+GtjFCo6uI
-KVVbL3R8kyZlyywPHMAb1wIpOIg50q8F5FRQSseLdYKCKEbAujXDX1xZFgzARv2C
-UVQfxoychrAiu3CZh2pGDnRRqKkxCXA/7hwhfmw4JuUsUappHg5CPPyZ6eMWUMEh
-e2JIFs2tmpX51bgBlIjZwKCh/jB1pXfiMYP4HUo/L6RXHvyM4LqKT+i2hV3+crCm
-bt7S+6v75Yow+vq+HF1xqH4vdB74wf6G/qa7/eUwZ38Nl9EdSfeoRD0IIuUGqfRh
-TgEeKpSDj/iM1oyLt8XGQkz//////////wIBAg==
------END DH PARAMETERS-----
+-----BEGIN DH PARAMETERS-----
+MIIECAKCBAEA//////////+t+FRYortKmq/cViAnPTzx2LnFg84tNpWp4TZBFGQz
++8yTnc4kmz75fS/jY2MMddj2gbICrsRhetPfHtXV/WVhJDP1H18GbtCFY2VVPe0a
+87VXE15/V8k1mE8McODmi3fipona8+/och3xWKE2rec1MKzKT0g6eXq8CrGCsyT7
+YdEIqUuyyOP7uWrat2DX9GgdT0Kj3jlN9K5W7edjcrsZCwenyO4KbXCeAvzhzffi
+7MA0BM0oNC9hkXL+nOmFg/+OTxIy7vKBg8P+OxtMb61zO7X8vC7CIAXFjvGDfRaD
+ssbzSibBsu/6iGtCOGEfz9zeNVs7ZRkDW7w09N75nAI4YbRvydbmyQd62R0mkff3
+7lmMsPrBhtkcrv4TCYUTknC0EwyTvEN5RPT9RFLi103TZPLiHnH1S/9croKrnJ32
+nuhtK8UiNjoNq8Uhl5sN6todv5pC1cRITgq80Gv6U93vPBsg7j/VnXwl5B0rZp4e
+8W5vUsMWTfT7eTDp5OWIV7asfV9C1p9tGHdjzx1VA0AEh/VbpX4xzHpxNciG77Qx
+iu1qHgEtnmgyqQdgCpGBMMRtx3j5ca0AOAkpmaMzy4t6Gh25PXFAADwqTs6p+Y0K
+zAqCkc3OyX3Pjsm1Wn+IpGtNtahR9EGC4caKAH5eDdkCC/1ktkUDbHpOZ30sOFMq
+OiO6RELK9T6mO7RUMpt2JMiRe91kscD9TLOOjDNMcBw6za0GV/zP7HGbH1w+TkYE
+HziBR/tM/bR3pSRx96mpaRC4VTIu22NA2KAO8JI1BRHjCr7B//njom5/sp+MGDAj
+w1h+ONoAd9m0dj5OS5Syu8GUxmUed8r5ku6qwCMqKBv2s6c5wSJhFoIK6NtYR6Z8
+vvnJCRtGLVOM1ysDdGrnf15iKSwxFWKoRlBdyC24VDOK5J9SNclbkReMzy3Vys70
+A+ydGBDGJysEWztx+dxrgNY/3UqOmtseaWKmlSbUMWHBpB1XDXk42tSkDjKcz/Rq
+qjatAEz2AMg4HkJaMdlRrmT9sj/OyVCdQ2h/62nt0cxeC4zDvfZLEO+GtjFCo6uI
+KVVbL3R8kyZlyywPHMAb1wIpOIg50q8F5FRQSseLdYKCKEbAujXDX1xZFgzARv2C
+UVQfxoychrAiu3CZh2pGDnRRqKkxCXA/7hwhfmw4JuUsUappHg5CPPyZ6eMWUMEh
+e2JIFs2tmpX51bgBlIjZwKCh/jB1pXfiMYP4HUo/L6RXHvyM4LqKT+i2hV3+crCm
+bt7S+6v75Yow+vq+HF1xqH4vdB74wf6G/qa7/eUwZ38Nl9EdSfeoRD0IIuUGqfRh
+TgEeKpSDj/iM1oyLt8XGQkz//////////wIBAg==
+-----END DH PARAMETERS-----
diff --git a/data/dh/modp1024.pem b/data/dh/modp1024.pem
index b552b71..7f1a350 100644
--- a/data/dh/modp1024.pem
+++ b/data/dh/modp1024.pem
@@ -1,9 +1,9 @@
------BEGIN X9.42 DH PARAMETERS-----
-MIIBHwKBgQCxC4+WoIDgHd6S3l6uXVTsUsmfvPsGo8aaap3KUtI7YWBz4oZ1oj0Y
-mDjvHi7mUsAT7LSuqQYRIySXXDzUm4O/rMvdfZDEvXCYSI6cIZpzck7/1vrlZEc4
-+qMaT/VbzMChUa9fDci0vUW/N982XBpl5oz9p21NpwjfH7K8LkpDcQIVAPUYqoeB
-qN8nirpOfWS3y51JRiNTAoGBAKTRy9XD/TQSZ2WkQu+5mQX4EE3SWKxQf9ZAbP8U
-Jm0xJm/qHlxBVkt3fmkPVQTyExYCF7SwG4hqXpFUf54nSfTX+9fTuaku4ZCdDSJj
-+Ap2pqJMCHoJH1MdvwoBabaiitZipNGOc6+jLXedWRjQi8iFj03O+XwqJIVebusi
-s7Ll
------END X9.42 DH PARAMETERS-----
+-----BEGIN X9.42 DH PARAMETERS-----
+MIIBHwKBgQCxC4+WoIDgHd6S3l6uXVTsUsmfvPsGo8aaap3KUtI7YWBz4oZ1oj0Y
+mDjvHi7mUsAT7LSuqQYRIySXXDzUm4O/rMvdfZDEvXCYSI6cIZpzck7/1vrlZEc4
++qMaT/VbzMChUa9fDci0vUW/N982XBpl5oz9p21NpwjfH7K8LkpDcQIVAPUYqoeB
+qN8nirpOfWS3y51JRiNTAoGBAKTRy9XD/TQSZ2WkQu+5mQX4EE3SWKxQf9ZAbP8U
+Jm0xJm/qHlxBVkt3fmkPVQTyExYCF7SwG4hqXpFUf54nSfTX+9fTuaku4ZCdDSJj
++Ap2pqJMCHoJH1MdvwoBabaiitZipNGOc6+jLXedWRjQi8iFj03O+XwqJIVebusi
+s7Ll
+-----END X9.42 DH PARAMETERS-----
diff --git a/data/server.crt b/data/server.crt
index cc6b39d..6a61ae3 100644
--- a/data/server.crt
+++ b/data/server.crt
@@ -1,16 +1,16 @@
------BEGIN CERTIFICATE-----
-MIICmTCCAYECAQEwDQYJKoZIhvcNAQELBQAwETEPMA0GA1UEAwwGTXlSb290MB4X
-DTE2MDcxNTEzMzE1OVoXDTE2MDgxNDEzMzE1OVowFDESMBAGA1UEAwwJbG9jYWxo
-b3N0MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA0o5i5FPfdm7hpWHo
-E2mYwBJPErAPVLDYw8IVb+sSFYgC0nBn2Y1pRG2w00/KF0J9uqiEJd4Hxw4C10p5
-ptL9NVdwONt9cl9LZah3q8yBMmNM4v9K8EvJ/CccxHiufH5HkcGGMONUJGv9NrVD
-SISE7+LK9ZyJsSGC19J4BJFMkNU20YPfYMoGjnJnibsqZ2a/+Q5sbgwsdopCRIVZ
-1DRy4FiRd+3xD0dNNms94Kj7o7ghEexTMy/H0VG/dQJ/zz3Z6vyZxyen57Ic26Df
-0Hgi20I8ca0bSVHOImYYpQr+f4Ce7lpkGUwdtnJtZHCkjIA9nraQiAehh5bcaka4
-NrYaOQIDAQABMA0GCSqGSIb3DQEBCwUAA4IBAQAR3WUpRDhMRXGASTxcenTT7pay
-BzlOhsuxxANmeYO2JkQtjYoqOjiTsLudC6fxbYweTIu1gbfz7foaeDiutbe74yho
-KKVTCfDeqZ6kjBMt6BjQEg2LbWS6zdBn4zTknOvincsKd3xwA76aWLzK3fxnKHxx
-ORIGMJL0Xf17H8VzdamvJhd+LS4+Xg/0+zsq9R+yNa8Lp17T+t7YNG+dBaF8tWrS
-vMDPeRR12ApaO9DC+DtdScM1akbDezgryh0P/kt05Yb7six/1lUogY8/4WIYWWg7
-+HDsNwl2+gdVZ0xvH6RMbcDE8UI3TdnV88yDhJLvo5bEY9kfbpWmivATsT3w
------END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIICmTCCAYECAQEwDQYJKoZIhvcNAQELBQAwETEPMA0GA1UEAwwGTXlSb290MB4X
+DTE2MDcxNTEzMzE1OVoXDTE2MDgxNDEzMzE1OVowFDESMBAGA1UEAwwJbG9jYWxo
+b3N0MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA0o5i5FPfdm7hpWHo
+E2mYwBJPErAPVLDYw8IVb+sSFYgC0nBn2Y1pRG2w00/KF0J9uqiEJd4Hxw4C10p5
+ptL9NVdwONt9cl9LZah3q8yBMmNM4v9K8EvJ/CccxHiufH5HkcGGMONUJGv9NrVD
+SISE7+LK9ZyJsSGC19J4BJFMkNU20YPfYMoGjnJnibsqZ2a/+Q5sbgwsdopCRIVZ
+1DRy4FiRd+3xD0dNNms94Kj7o7ghEexTMy/H0VG/dQJ/zz3Z6vyZxyen57Ic26Df
+0Hgi20I8ca0bSVHOImYYpQr+f4Ce7lpkGUwdtnJtZHCkjIA9nraQiAehh5bcaka4
+NrYaOQIDAQABMA0GCSqGSIb3DQEBCwUAA4IBAQAR3WUpRDhMRXGASTxcenTT7pay
+BzlOhsuxxANmeYO2JkQtjYoqOjiTsLudC6fxbYweTIu1gbfz7foaeDiutbe74yho
+KKVTCfDeqZ6kjBMt6BjQEg2LbWS6zdBn4zTknOvincsKd3xwA76aWLzK3fxnKHxx
+ORIGMJL0Xf17H8VzdamvJhd+LS4+Xg/0+zsq9R+yNa8Lp17T+t7YNG+dBaF8tWrS
+vMDPeRR12ApaO9DC+DtdScM1akbDezgryh0P/kt05Yb7six/1lUogY8/4WIYWWg7
++HDsNwl2+gdVZ0xvH6RMbcDE8UI3TdnV88yDhJLvo5bEY9kfbpWmivATsT3w
+-----END CERTIFICATE-----
diff --git a/data/server.key b/data/server.key
index 77dca88..78ea515 100644
--- a/data/server.key
+++ b/data/server.key
@@ -1,27 +1,27 @@
------BEGIN RSA PRIVATE KEY-----
-MIIEogIBAAKCAQEA0o5i5FPfdm7hpWHoE2mYwBJPErAPVLDYw8IVb+sSFYgC0nBn
-2Y1pRG2w00/KF0J9uqiEJd4Hxw4C10p5ptL9NVdwONt9cl9LZah3q8yBMmNM4v9K
-8EvJ/CccxHiufH5HkcGGMONUJGv9NrVDSISE7+LK9ZyJsSGC19J4BJFMkNU20YPf
-YMoGjnJnibsqZ2a/+Q5sbgwsdopCRIVZ1DRy4FiRd+3xD0dNNms94Kj7o7ghEexT
-My/H0VG/dQJ/zz3Z6vyZxyen57Ic26Df0Hgi20I8ca0bSVHOImYYpQr+f4Ce7lpk
-GUwdtnJtZHCkjIA9nraQiAehh5bcaka4NrYaOQIDAQABAoIBAFplFr+/4mgOIoHG
-DsSGyTVsptX3EB3j7qvcXye1XAYyZkPCTlNwCol+LjQKRVDHEwNX5aP8NoqW0VFs
-f93HJz4HU/6U/L5lexEhyn7PRYhEaXXq9FlFsGm4wPj4drCr5j4FP38tmaopUoRy
-PXicrBXw4AGiOtr48BuIGE6dsqlamLUS81x20OZuZlmGkHZPRQlRYG2GDMyBnne9
-kyUeTGf2OLl0iMwhInaOP8HOJltOiEUta3mP7NoJjq3QULHmPOOGBcqZq+k2Wgbp
-sjF4LC3cUseSPSm/f2ctKMWijHKJr+8d8gzif2VNSmURCslfEWkWrjzTcvt+al0p
-vTIW5AECgYEA8X8VN38+ROl06i4W59sz10h+zNoHXMbxtsqztDbyW5U9kixlVlBZ
-hLjc/x10jvEa40txAyJUyhVksZKE+na28PQa0+mZLdNYxE3EXE7AXhHyS+eGWzDt
-vp6A3438fYWWq8YmkieV7W20Zb7iEIrq0V5cigypa46IXqvcfgeL8pECgYEA3zOb
-7UEr2BaxhuTgqDCh4deXLXReihN6KiTo6csaMEakMufWUq2pApRCaf+2NNrlH+Xf
-+XSxAZL1yE3KeQY2RT7Fcibu3Qv1KInAVYxAMn9tMfEaQqSdC041Sq390OzmzCJ4
-qwyHkINwzZy32dypogqPPY0voJ5r05pGLNQ2sSkCgYAHK7jbjwGwViZMldXESLP/
-Xn21Y3v4e0fOH7K6VS9ZHNNZNcxEhdpCoKKfSKafX/VmbmUKrMhLv9rfkvQz47aG
-7Rim1jbgL3hhS9Xaz9PSd0H0kwlgR9GnaVl2SecHayIQM7ANgvNmu20x4DsiNp3G
-XcDtsHaPZQoTlZLUgzDaoQKBgEXqk7BpFsPUr/1yWpE00rC86MU7S5Xy7fSfpTn+
-/hAbQLoVd0Rk06lUKc2sZTX/T4CDcHpivEOi9kytWXw5nuxn8k+EtJQXd88f/1iM
-21s2IU1gmfpAOFVfRUBEalp0qwNM1QG3pgt1sPMnYUvkXFq+9gmw3TdyCJK7I7pN
-K2ipAoGAadZannLuddA9OqrXE0m2Z0qTHQgAPkiIAu4U7av8+kGW7duytvJ4xlC6
-rWRI0Oy19rzTtj6Hp7Qp/1RAMp/SD6aNR21AGkTRqFKyLxuO4NxNJpof/RRY3I2H
-Ld+2TkOYUeZpPCCFpEiZY90O6NmTjFdIFcAQ4EPMQHRDQWftVNA=
------END RSA PRIVATE KEY-----
+-----BEGIN RSA PRIVATE KEY-----
+MIIEogIBAAKCAQEA0o5i5FPfdm7hpWHoE2mYwBJPErAPVLDYw8IVb+sSFYgC0nBn
+2Y1pRG2w00/KF0J9uqiEJd4Hxw4C10p5ptL9NVdwONt9cl9LZah3q8yBMmNM4v9K
+8EvJ/CccxHiufH5HkcGGMONUJGv9NrVDSISE7+LK9ZyJsSGC19J4BJFMkNU20YPf
+YMoGjnJnibsqZ2a/+Q5sbgwsdopCRIVZ1DRy4FiRd+3xD0dNNms94Kj7o7ghEexT
+My/H0VG/dQJ/zz3Z6vyZxyen57Ic26Df0Hgi20I8ca0bSVHOImYYpQr+f4Ce7lpk
+GUwdtnJtZHCkjIA9nraQiAehh5bcaka4NrYaOQIDAQABAoIBAFplFr+/4mgOIoHG
+DsSGyTVsptX3EB3j7qvcXye1XAYyZkPCTlNwCol+LjQKRVDHEwNX5aP8NoqW0VFs
+f93HJz4HU/6U/L5lexEhyn7PRYhEaXXq9FlFsGm4wPj4drCr5j4FP38tmaopUoRy
+PXicrBXw4AGiOtr48BuIGE6dsqlamLUS81x20OZuZlmGkHZPRQlRYG2GDMyBnne9
+kyUeTGf2OLl0iMwhInaOP8HOJltOiEUta3mP7NoJjq3QULHmPOOGBcqZq+k2Wgbp
+sjF4LC3cUseSPSm/f2ctKMWijHKJr+8d8gzif2VNSmURCslfEWkWrjzTcvt+al0p
+vTIW5AECgYEA8X8VN38+ROl06i4W59sz10h+zNoHXMbxtsqztDbyW5U9kixlVlBZ
+hLjc/x10jvEa40txAyJUyhVksZKE+na28PQa0+mZLdNYxE3EXE7AXhHyS+eGWzDt
+vp6A3438fYWWq8YmkieV7W20Zb7iEIrq0V5cigypa46IXqvcfgeL8pECgYEA3zOb
+7UEr2BaxhuTgqDCh4deXLXReihN6KiTo6csaMEakMufWUq2pApRCaf+2NNrlH+Xf
++XSxAZL1yE3KeQY2RT7Fcibu3Qv1KInAVYxAMn9tMfEaQqSdC041Sq390OzmzCJ4
+qwyHkINwzZy32dypogqPPY0voJ5r05pGLNQ2sSkCgYAHK7jbjwGwViZMldXESLP/
+Xn21Y3v4e0fOH7K6VS9ZHNNZNcxEhdpCoKKfSKafX/VmbmUKrMhLv9rfkvQz47aG
+7Rim1jbgL3hhS9Xaz9PSd0H0kwlgR9GnaVl2SecHayIQM7ANgvNmu20x4DsiNp3G
+XcDtsHaPZQoTlZLUgzDaoQKBgEXqk7BpFsPUr/1yWpE00rC86MU7S5Xy7fSfpTn+
+/hAbQLoVd0Rk06lUKc2sZTX/T4CDcHpivEOi9kytWXw5nuxn8k+EtJQXd88f/1iM
+21s2IU1gmfpAOFVfRUBEalp0qwNM1QG3pgt1sPMnYUvkXFq+9gmw3TdyCJK7I7pN
+K2ipAoGAadZannLuddA9OqrXE0m2Z0qTHQgAPkiIAu4U7av8+kGW7duytvJ4xlC6
+rWRI0Oy19rzTtj6Hp7Qp/1RAMp/SD6aNR21AGkTRqFKyLxuO4NxNJpof/RRY3I2H
+Ld+2TkOYUeZpPCCFpEiZY90O6NmTjFdIFcAQ4EPMQHRDQWftVNA=
+-----END RSA PRIVATE KEY-----
diff --git a/data/test_chain.pem b/data/test_chain.pem
index 629ff14..26c6509 100644
--- a/data/test_chain.pem
+++ b/data/test_chain.pem
@@ -1,34 +1,34 @@
------BEGIN CERTIFICATE-----
-MIICmTCCAYECAQEwDQYJKoZIhvcNAQELBQAwETEPMA0GA1UEAwwGTXlSb290MB4X
-DTE2MDcxNTEzMzE1OVoXDTE2MDgxNDEzMzE1OVowFDESMBAGA1UEAwwJbG9jYWxo
-b3N0MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA0o5i5FPfdm7hpWHo
-E2mYwBJPErAPVLDYw8IVb+sSFYgC0nBn2Y1pRG2w00/KF0J9uqiEJd4Hxw4C10p5
-ptL9NVdwONt9cl9LZah3q8yBMmNM4v9K8EvJ/CccxHiufH5HkcGGMONUJGv9NrVD
-SISE7+LK9ZyJsSGC19J4BJFMkNU20YPfYMoGjnJnibsqZ2a/+Q5sbgwsdopCRIVZ
-1DRy4FiRd+3xD0dNNms94Kj7o7ghEexTMy/H0VG/dQJ/zz3Z6vyZxyen57Ic26Df
-0Hgi20I8ca0bSVHOImYYpQr+f4Ce7lpkGUwdtnJtZHCkjIA9nraQiAehh5bcaka4
-NrYaOQIDAQABMA0GCSqGSIb3DQEBCwUAA4IBAQAR3WUpRDhMRXGASTxcenTT7pay
-BzlOhsuxxANmeYO2JkQtjYoqOjiTsLudC6fxbYweTIu1gbfz7foaeDiutbe74yho
-KKVTCfDeqZ6kjBMt6BjQEg2LbWS6zdBn4zTknOvincsKd3xwA76aWLzK3fxnKHxx
-ORIGMJL0Xf17H8VzdamvJhd+LS4+Xg/0+zsq9R+yNa8Lp17T+t7YNG+dBaF8tWrS
-vMDPeRR12ApaO9DC+DtdScM1akbDezgryh0P/kt05Yb7six/1lUogY8/4WIYWWg7
-+HDsNwl2+gdVZ0xvH6RMbcDE8UI3TdnV88yDhJLvo5bEY9kfbpWmivATsT3w
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIIC9TCCAd2gAwIBAgIJAONWqXF8YfsjMA0GCSqGSIb3DQEBCwUAMBExDzANBgNV
-BAMMBk15Um9vdDAeFw0xNjA3MTUxMzIyNTBaFw0yNjA3MTMxMzIyNTBaMBExDzAN
-BgNVBAMMBk15Um9vdDCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBALmL
-YWepekAk5xg615ogxlkDdMITeq3iQFkXS7rseFZJXI4ZwsCHprZjQKG1MyHxXBCB
-YPSvZY7Dk4aG0FOYUpGaB3I5WfIetjcybiZIKnlAdZD2PUDec13kJi+OE9R67xtJ
-nsU9IRuPBRpCYFvuQ/PyuxfNKdOcZ8E/iU3vGg/n+Y9D2jDNedZMfoiKWJ96D6S/
-/TO9+fS0QT8vpdoDfR0EfFG8XOCb3KLSp2eLg2E8j00uCHmViAe9gezAR2Kc5moG
-6DDrCdCf1uC17r+oJoLi2YfzoMKUsQU0m42o5x9sfnjUsF0vJrlvqW1d3bjDXGF7
-CasNZmnv3wEKJYKnMx0CAwEAAaNQME4wHQYDVR0OBBYEFBk1NKEFRhDnJC3G9dUt
-kV2p6qp+MB8GA1UdIwQYMBaAFBk1NKEFRhDnJC3G9dUtkV2p6qp+MAwGA1UdEwQF
-MAMBAf8wDQYJKoZIhvcNAQELBQADggEBAE/+JX3WUOy6XWYj/rxMvGIP95wxVv+5
-6yUZoyZxwDxh961W3PLZo8PhJAHwssq4uKIfwFppEdRS0DXKeu8KDBi/SXqoESPA
-Da2tC3ZUUBd88Pa6AW6QbBoj9JFDwkKOSCEJBtl5hDwikvT2jhDZOD9EvHU8n120
-oQ+S18jiNXg6KBnGaSgeqylC42BLRvqh15lmvAHAoVOC20h4YebfXExfZQRUou27
-mC5Hj6wFDPRgQq4j1aMeNJ1xJdlW/jyZ3PS4XtauWo8cw+a+FX/QcleBV7XFtNQQ
-t+653fvxCFA33ZnaTLT9Za5nJOf+7FB7jnkJFgrSxhV5uvbuXdxg/Lc=
------END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIICmTCCAYECAQEwDQYJKoZIhvcNAQELBQAwETEPMA0GA1UEAwwGTXlSb290MB4X
+DTE2MDcxNTEzMzE1OVoXDTE2MDgxNDEzMzE1OVowFDESMBAGA1UEAwwJbG9jYWxo
+b3N0MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA0o5i5FPfdm7hpWHo
+E2mYwBJPErAPVLDYw8IVb+sSFYgC0nBn2Y1pRG2w00/KF0J9uqiEJd4Hxw4C10p5
+ptL9NVdwONt9cl9LZah3q8yBMmNM4v9K8EvJ/CccxHiufH5HkcGGMONUJGv9NrVD
+SISE7+LK9ZyJsSGC19J4BJFMkNU20YPfYMoGjnJnibsqZ2a/+Q5sbgwsdopCRIVZ
+1DRy4FiRd+3xD0dNNms94Kj7o7ghEexTMy/H0VG/dQJ/zz3Z6vyZxyen57Ic26Df
+0Hgi20I8ca0bSVHOImYYpQr+f4Ce7lpkGUwdtnJtZHCkjIA9nraQiAehh5bcaka4
+NrYaOQIDAQABMA0GCSqGSIb3DQEBCwUAA4IBAQAR3WUpRDhMRXGASTxcenTT7pay
+BzlOhsuxxANmeYO2JkQtjYoqOjiTsLudC6fxbYweTIu1gbfz7foaeDiutbe74yho
+KKVTCfDeqZ6kjBMt6BjQEg2LbWS6zdBn4zTknOvincsKd3xwA76aWLzK3fxnKHxx
+ORIGMJL0Xf17H8VzdamvJhd+LS4+Xg/0+zsq9R+yNa8Lp17T+t7YNG+dBaF8tWrS
+vMDPeRR12ApaO9DC+DtdScM1akbDezgryh0P/kt05Yb7six/1lUogY8/4WIYWWg7
++HDsNwl2+gdVZ0xvH6RMbcDE8UI3TdnV88yDhJLvo5bEY9kfbpWmivATsT3w
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIIC9TCCAd2gAwIBAgIJAONWqXF8YfsjMA0GCSqGSIb3DQEBCwUAMBExDzANBgNV
+BAMMBk15Um9vdDAeFw0xNjA3MTUxMzIyNTBaFw0yNjA3MTMxMzIyNTBaMBExDzAN
+BgNVBAMMBk15Um9vdDCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBALmL
+YWepekAk5xg615ogxlkDdMITeq3iQFkXS7rseFZJXI4ZwsCHprZjQKG1MyHxXBCB
+YPSvZY7Dk4aG0FOYUpGaB3I5WfIetjcybiZIKnlAdZD2PUDec13kJi+OE9R67xtJ
+nsU9IRuPBRpCYFvuQ/PyuxfNKdOcZ8E/iU3vGg/n+Y9D2jDNedZMfoiKWJ96D6S/
+/TO9+fS0QT8vpdoDfR0EfFG8XOCb3KLSp2eLg2E8j00uCHmViAe9gezAR2Kc5moG
+6DDrCdCf1uC17r+oJoLi2YfzoMKUsQU0m42o5x9sfnjUsF0vJrlvqW1d3bjDXGF7
+CasNZmnv3wEKJYKnMx0CAwEAAaNQME4wHQYDVR0OBBYEFBk1NKEFRhDnJC3G9dUt
+kV2p6qp+MB8GA1UdIwQYMBaAFBk1NKEFRhDnJC3G9dUtkV2p6qp+MAwGA1UdEwQF
+MAMBAf8wDQYJKoZIhvcNAQELBQADggEBAE/+JX3WUOy6XWYj/rxMvGIP95wxVv+5
+6yUZoyZxwDxh961W3PLZo8PhJAHwssq4uKIfwFppEdRS0DXKeu8KDBi/SXqoESPA
+Da2tC3ZUUBd88Pa6AW6QbBoj9JFDwkKOSCEJBtl5hDwikvT2jhDZOD9EvHU8n120
+oQ+S18jiNXg6KBnGaSgeqylC42BLRvqh15lmvAHAoVOC20h4YebfXExfZQRUou27
+mC5Hj6wFDPRgQq4j1aMeNJ1xJdlW/jyZ3PS4XtauWo8cw+a+FX/QcleBV7XFtNQQ
+t+653fvxCFA33ZnaTLT9Za5nJOf+7FB7jnkJFgrSxhV5uvbuXdxg/Lc=
+-----END CERTIFICATE-----
diff --git a/libs/ffi/ffi.c b/libs/ffi/ffi.c
index 566f400..86d0653 100644
--- a/libs/ffi/ffi.c
+++ b/libs/ffi/ffi.c
@@ -1,304 +1,304 @@
-#include <stdio.h>
-#include <memory.h>
-#include <unistd.h>
-#include <sys/stat.h>
-#include <sys/cdefs.h>
-#if __APPLE__
-#include <sys/errno.h> // OS/X only provides include/sys/errno.h
-#else
-#include <errno.h> // MinGW only provides include/errno.h
-#include <malloc.h>
-#endif
-#include <caml/callback.h>
-#include <caml/alloc.h>
-#include <caml/memory.h>
-#include <caml/threads.h>
-#include <caml/printexc.h>
-#include "mitlsffi.h"
-
-#define MITLS_FFI_LIST \
-  MITLS_FFI_ENTRY(Config) \
-  MITLS_FFI_ENTRY(Connect) \
-  MITLS_FFI_ENTRY(Send) \
-  MITLS_FFI_ENTRY(Recv)
-
-// Pointers to ML code.  Initialized in FFI_mitls_init().  Invoke via caml_callback()
-#define MITLS_FFI_ENTRY(x) value* g_mitls_FFI_##x;
-MITLS_FFI_LIST
-#undef MITLS_FFI_ENTRY
-
-// Pass a C pointer into F* and recover it back.  OCaml limits integers to 2^30/2^62
-// so shift right by 1 before conversion to OCaml.  The low bit must be 0 in order to
-// meet structure alignment rules, so this is not lossy.
-_Static_assert(sizeof(size_t) <= sizeof(value), "OCaml value isn't large enough to hold a C pointer");
-#define PtrToValue(p) Val_long(((size_t)p)>>1)
-#define ValueToPtr(v) ((void*)((Long_val(v)<<1)))
-
-typedef struct mitls_state {
-    value fstar_state;    // a GC root representing an F*-side state object
-} mitls_state;
-
-//
-// Initialize miTLS.
-//
-//  Called once ahead of using miTLS
-//
-//  Returns:  0 for error, nonzero for success
-//
-int  FFI_mitls_init(void)
-{
-    char *Argv[2];
-
-    // Build a stub argv[] to satisfy caml_Startup()
-    Argv[0] = "";
-    Argv[1] = NULL;
-
-    // Initialize the OCaml runtime
-    caml_startup(Argv);
-
-    // Bind to functions registered via Callback.register from ML
-#define MITLS_FFI_ENTRY(x) \
-    g_mitls_FFI_##x = caml_named_value("MITLS_FFI_" # x); \
-    if (!g_mitls_FFI_##x) { \
-        return 0; \
-    }
- MITLS_FFI_LIST
- #undef MITLS_FFI_ENTRY
-
-    // On return from caml_startup(), this thread continues to own
-    // the OCaml global runtime lock as if it was running OCaml code.
-    // Release it, so other threads can call into OCaml.
-    caml_release_runtime_system();
-
-    return 1; // success
-}
-
-void FFI_mitls_cleanup(void)
-{
-#define MITLS_FFI_ENTRY(x) \
-    g_mitls_FFI_##x = NULL;
- MITLS_FFI_LIST
- #undef MITLS_FFI_ENTRY
-}
-
-// Called by the host app to configure miTLS ahead of creating a connection
-int FFI_mitls_configure(mitls_state **state, const char *tls_version, const char *host_name, char **outmsg, char **errmsg)
-{
-    CAMLparam0();
-    CAMLlocal3(config, version, host);
-    int ret = 0;
-
-    *state = NULL;
-    *outmsg = NULL;
-    *errmsg = NULL;
-
-    version = caml_copy_string(tls_version);
-    host = caml_copy_string(host_name);
-    caml_acquire_runtime_system();
-    config = caml_callback2_exn(*g_mitls_FFI_Config, version, host);
-    if (Is_exception_result(config)) {
-        // call caml_format_exception(Extract_exception(config)) to extract the exception information
-    } else {
-        mitls_state * s;
-
-        // Allocate space on the heap, to store an OCaml value
-        s = (mitls_state*)malloc(sizeof(mitls_state));
-        if (s) {
-            // Tell the OCaml GC about the heap address, so it is treated
-            // as a GC root, keeping the config object live.
-            s->fstar_state = config;
-            caml_register_generational_global_root(&s->fstar_state);
-            *state = s;
-            ret = 1;
-        }
-    }
-    caml_release_runtime_system();
-
-    CAMLreturnT(int,ret);
-}
-
-// Called by the host app to free a mitls_state allocated by FFI_mitls_configure()
-void FFI_mitls_close(mitls_state *state)
-{
-    if (state) {
-        caml_acquire_runtime_system();
-        caml_remove_generational_global_root(&state->fstar_state);
-        caml_release_runtime_system();
-        state->fstar_state = 0;
-        free(state);
-    }
-}
-
-void FFI_mitls_free_msg(char *msg)
-{
-
-}
-
-void FFI_mitls_free_packet(void *packet)
-{
-    free(packet);
-}
-
-void * copypacket(value packet, /* out */ size_t *packet_size)
-{
-    void *p;
-    mlsize_t size;
-
-    size = caml_string_length(packet);
-    p = malloc(size);
-    if (p) {
-        memcpy(p, String_val(packet), size);
-        *packet_size = size;
-    }
-    return p;
-}
-
-// Called from FStar code to send via TCP
-CAMLprim value ocaml_send_tcp(value cookie, value bytes)
-{
-    mlsize_t buffer_size;
-    char *buffer;
-    int retval;
-    struct _FFI_mitls_callbacks *callbacks;
-    char *localbuffer;
-
-    CAMLparam2(cookie, bytes);
-
-    callbacks = (struct _FFI_mitls_callbacks *)ValueToPtr(cookie);
-    buffer = Bp_val(bytes);
-    buffer_size = caml_string_length(bytes);
-    // Copy the buffer out of the OCaml heap into a local buffer on the stack
-    localbuffer = (char*)alloca(buffer_size);
-    memcpy(localbuffer, buffer, buffer_size);
-
-    caml_release_runtime_system();
-    // All pointers into the OCaml heap are now off-limits until the
-    // runtime_system lock has been re-aquired.
-    retval = (*callbacks->send)(callbacks, localbuffer, buffer_size);
-    caml_acquire_runtime_system();
-
-    CAMLreturn(Val_int(retval));
-}
-
-// Called from FStar code to receive via TCP
-CAMLprim value ocaml_recv_tcp(value cookie, value bytes)
-{
-    mlsize_t buffer_size;
-    char *buffer;
-    ssize_t retval;
-    struct _FFI_mitls_callbacks *callbacks;
-    char *localbuffer;
-
-    CAMLparam2(cookie, bytes);
-
-    callbacks = (struct _FFI_mitls_callbacks *)ValueToPtr(cookie);
-    buffer_size = caml_string_length(bytes);
-    localbuffer = (char*)alloca(buffer_size);
-
-    caml_release_runtime_system();
-    // All pointers into the OCaml heap are now off-limits until the
-    // runtime_system lock has been re-aquired.
-    retval = (*callbacks->recv)(callbacks, localbuffer, buffer_size);
-    caml_acquire_runtime_system();
-
-    buffer = Bp_val(bytes);
-    memcpy(buffer, localbuffer, buffer_size);
-
-    CAMLreturn(Val_int(retval));
-}
-
-// Called by the host app to create a TLS connection.
-int FFI_mitls_connect(struct _FFI_mitls_callbacks *callbacks, /* in */ mitls_state *state, /* out */ char **outmsg, /* out */ char **errmsg)
-{
-    CAMLparam0();
-    CAMLlocal1(result);
-    int ret;
-
-    *outmsg = NULL;
-    *errmsg = NULL;
-
-    caml_acquire_runtime_system();
-    result = caml_callback2_exn(*g_mitls_FFI_Connect, state->fstar_state, PtrToValue(callbacks));
-    if (Is_exception_result(result)) {
-        // Call caml_format_exception(Extract_exception(result)) to extract the exception text
-        ret = 0;
-    } else {
-        // Connect returns back (Connection.connection * int)
-        value connection = Field(result,0);
-        ret = Int_val(Field(result,1));
-        if (ret == 0) {
-            caml_modify_generational_global_root(&state->fstar_state, connection);
-            ret = 1;
-        } else {
-            ret = 0;
-        }
-        // The result is an integer.  How to deduce the value of 'c' needed for
-        // subsequent FFI.read and FFI.write is TBD.
-
-    }
-    caml_release_runtime_system();
-    CAMLreturnT(int,ret);
-}
-
-// Called by the host app transmit a packet
-int FFI_mitls_send(/* in */ mitls_state *state, const void* buffer, size_t buffer_size, /* out */ char **outmsg, /* out */ char **errmsg)
-{
-    CAMLparam0();
-    CAMLlocal2(buffer_value, result);
-    int ret = 0;
-
-    *outmsg = NULL;
-    *errmsg = NULL;
-
-    caml_acquire_runtime_system();
-    buffer_value = caml_alloc_string(buffer_size);
-    memcpy(Bp_val(buffer_value), buffer, buffer_size);
-
-    result = caml_callback2_exn(*g_mitls_FFI_Send, state->fstar_state, buffer_value);
-    if (Is_exception_result(result)) {
-        // Call caml_format_exception(Extract_exception(result)) to extract the exception text
-        ret = 0;
-    } else {
-        ret = 1;
-    }
-    caml_release_runtime_system();
-
-    CAMLreturnT(int,ret);
-}
-
-// Called by the host app to receive a packet
-void * FFI_mitls_receive(/* in */ mitls_state *state, /* out */ size_t *packet_size, /* out */ char **outmsg, /* out */ char **errmsg)
-{
-    CAMLparam0();
-    CAMLlocal1(result);
-    void *p = NULL;
-
-    *outmsg = NULL;
-    *errmsg = NULL;
-
-    caml_acquire_runtime_system();
-    result = caml_callback_exn(*g_mitls_FFI_Recv, state->fstar_state);
-    if (Is_exception_result(result)) {
-        // call caml_format_exception(Extract_exception(result)) to extract the exception text
-        p = NULL;
-    } else {
-        // Return the plaintext data
-        p = copypacket(result, packet_size);
-    }
-    caml_release_runtime_system();
-
-    CAMLreturnT(void*,p);
-}
-
-
-// Register the calling thread, so it can call miTLS.  Returns 1 for success, 0 for error.
-int FFI_mitls_thread_register(void)
-{
-    return caml_c_thread_register();
-}
-
-// Unregister the calling thread, so it can no longer call miTLS.  Returns 1 for success, 0 for error.
-int FFI_mitls_thread_unregister(void)
-{
-    return caml_c_thread_unregister();
-}
+#include <stdio.h>
+#include <memory.h>
+#include <unistd.h>
+#include <sys/stat.h>
+#include <sys/cdefs.h>
+#if __APPLE__ 
+#include <sys/errno.h> // OS/X only provides include/sys/errno.h
+#else
+#include <errno.h> // MinGW only provides include/errno.h
+#include <malloc.h>
+#endif
+#include <caml/callback.h>
+#include <caml/alloc.h>
+#include <caml/memory.h>
+#include <caml/threads.h>
+#include <caml/printexc.h>
+#include "mitlsffi.h"
+
+#define MITLS_FFI_LIST \
+  MITLS_FFI_ENTRY(Config) \
+  MITLS_FFI_ENTRY(Connect) \
+  MITLS_FFI_ENTRY(Send) \
+  MITLS_FFI_ENTRY(Recv)
+ 
+// Pointers to ML code.  Initialized in FFI_mitls_init().  Invoke via caml_callback()
+#define MITLS_FFI_ENTRY(x) value* g_mitls_FFI_##x;
+MITLS_FFI_LIST
+#undef MITLS_FFI_ENTRY
+
+// Pass a C pointer into F* and recover it back.  OCaml limits integers to 2^30/2^62
+// so shift right by 1 before conversion to OCaml.  The low bit must be 0 in order to
+// meet structure alignment rules, so this is not lossy.
+_Static_assert(sizeof(size_t) <= sizeof(value), "OCaml value isn't large enough to hold a C pointer");
+#define PtrToValue(p) Val_long(((size_t)p)>>1)
+#define ValueToPtr(v) ((void*)((Long_val(v)<<1)))
+
+typedef struct mitls_state {
+    value fstar_state;    // a GC root representing an F*-side state object
+} mitls_state;
+
+//
+// Initialize miTLS.
+//
+//  Called once ahead of using miTLS
+//
+//  Returns:  0 for error, nonzero for success
+//
+int  FFI_mitls_init(void)
+{
+    char *Argv[2];
+
+    // Build a stub argv[] to satisfy caml_Startup()
+    Argv[0] = "";
+    Argv[1] = NULL;
+    
+    // Initialize the OCaml runtime
+    caml_startup(Argv);
+    
+    // Bind to functions registered via Callback.register from ML
+#define MITLS_FFI_ENTRY(x) \
+    g_mitls_FFI_##x = caml_named_value("MITLS_FFI_" # x); \
+    if (!g_mitls_FFI_##x) { \
+        return 0; \
+    }
+ MITLS_FFI_LIST  
+ #undef MITLS_FFI_ENTRY
+ 
+    // On return from caml_startup(), this thread continues to own
+    // the OCaml global runtime lock as if it was running OCaml code.
+    // Release it, so other threads can call into OCaml.
+    caml_release_runtime_system();
+    
+    return 1; // success
+}
+
+void FFI_mitls_cleanup(void)
+{
+#define MITLS_FFI_ENTRY(x) \
+    g_mitls_FFI_##x = NULL;
+ MITLS_FFI_LIST  
+ #undef MITLS_FFI_ENTRY
+}
+
+// Called by the host app to configure miTLS ahead of creating a connection
+int FFI_mitls_configure(mitls_state **state, const char *tls_version, const char *host_name, char **outmsg, char **errmsg)
+{
+    CAMLparam0();
+    CAMLlocal3(config, version, host);
+    int ret = 0;
+
+    *state = NULL;
+    *outmsg = NULL;
+    *errmsg = NULL;
+    
+    version = caml_copy_string(tls_version);  
+    host = caml_copy_string(host_name);
+    caml_acquire_runtime_system();
+    config = caml_callback2_exn(*g_mitls_FFI_Config, version, host);
+    if (Is_exception_result(config)) {
+        // call caml_format_exception(Extract_exception(config)) to extract the exception information
+    } else {
+        mitls_state * s;
+        
+        // Allocate space on the heap, to store an OCaml value
+        s = (mitls_state*)malloc(sizeof(mitls_state));
+        if (s) {
+            // Tell the OCaml GC about the heap address, so it is treated
+            // as a GC root, keeping the config object live.
+            s->fstar_state = config; 
+            caml_register_generational_global_root(&s->fstar_state);
+            *state = s;
+            ret = 1;
+        }
+    }
+    caml_release_runtime_system();
+
+    CAMLreturnT(int,ret);
+}
+
+// Called by the host app to free a mitls_state allocated by FFI_mitls_configure()
+void FFI_mitls_close(mitls_state *state)
+{
+    if (state) {
+        caml_acquire_runtime_system();
+        caml_remove_generational_global_root(&state->fstar_state);
+        caml_release_runtime_system();
+        state->fstar_state = 0;
+        free(state);
+    }
+}
+
+void FFI_mitls_free_msg(char *msg)
+{
+
+}
+
+void FFI_mitls_free_packet(void *packet)
+{
+    free(packet);
+}
+
+void * copypacket(value packet, /* out */ size_t *packet_size)
+{
+    void *p;
+    mlsize_t size;
+        
+    size = caml_string_length(packet);
+    p = malloc(size);
+    if (p) {
+        memcpy(p, String_val(packet), size);
+        *packet_size = size;
+    }
+    return p;
+}
+
+// Called from FStar code to send via TCP
+CAMLprim value ocaml_send_tcp(value cookie, value bytes)
+{
+    mlsize_t buffer_size;
+    char *buffer;
+    int retval;
+    struct _FFI_mitls_callbacks *callbacks;
+    char *localbuffer;
+
+    CAMLparam2(cookie, bytes);
+    
+    callbacks = (struct _FFI_mitls_callbacks *)ValueToPtr(cookie);
+    buffer = Bp_val(bytes);
+    buffer_size = caml_string_length(bytes);
+    // Copy the buffer out of the OCaml heap into a local buffer on the stack
+    localbuffer = (char*)alloca(buffer_size);
+    memcpy(localbuffer, buffer, buffer_size);
+    
+    caml_release_runtime_system();
+    // All pointers into the OCaml heap are now off-limits until the
+    // runtime_system lock has been re-aquired.
+    retval = (*callbacks->send)(callbacks, localbuffer, buffer_size);
+    caml_acquire_runtime_system();
+    
+    CAMLreturn(Val_int(retval));
+}
+
+// Called from FStar code to receive via TCP
+CAMLprim value ocaml_recv_tcp(value cookie, value bytes)
+{
+    mlsize_t buffer_size;
+    char *buffer;
+    ssize_t retval;
+    struct _FFI_mitls_callbacks *callbacks;
+    char *localbuffer;
+    
+    CAMLparam2(cookie, bytes);
+    
+    callbacks = (struct _FFI_mitls_callbacks *)ValueToPtr(cookie);
+    buffer_size = caml_string_length(bytes);
+    localbuffer = (char*)alloca(buffer_size);
+    
+    caml_release_runtime_system();
+    // All pointers into the OCaml heap are now off-limits until the
+    // runtime_system lock has been re-aquired.
+    retval = (*callbacks->recv)(callbacks, localbuffer, buffer_size);
+    caml_acquire_runtime_system();
+    
+    buffer = Bp_val(bytes);
+    memcpy(buffer, localbuffer, buffer_size);
+    
+    CAMLreturn(Val_int(retval));
+}
+
+// Called by the host app to create a TLS connection.
+int FFI_mitls_connect(struct _FFI_mitls_callbacks *callbacks, /* in */ mitls_state *state, /* out */ char **outmsg, /* out */ char **errmsg)
+{
+    CAMLparam0();
+    CAMLlocal1(result);
+    int ret;
+    
+    *outmsg = NULL;
+    *errmsg = NULL;
+    
+    caml_acquire_runtime_system();
+    result = caml_callback2_exn(*g_mitls_FFI_Connect, state->fstar_state, PtrToValue(callbacks));
+    if (Is_exception_result(result)) {
+        // Call caml_format_exception(Extract_exception(result)) to extract the exception text
+        ret = 0;
+    } else {
+        // Connect returns back (Connection.connection * int)
+        value connection = Field(result,0);
+        ret = Int_val(Field(result,1));
+        if (ret == 0) {
+            caml_modify_generational_global_root(&state->fstar_state, connection);
+            ret = 1;
+        } else {
+            ret = 0;
+        }
+        // The result is an integer.  How to deduce the value of 'c' needed for
+        // subsequent FFI.read and FFI.write is TBD.
+        
+    }
+    caml_release_runtime_system();
+    CAMLreturnT(int,ret);
+}
+
+// Called by the host app transmit a packet
+int FFI_mitls_send(/* in */ mitls_state *state, const void* buffer, size_t buffer_size, /* out */ char **outmsg, /* out */ char **errmsg)
+{
+    CAMLparam0();
+    CAMLlocal2(buffer_value, result);
+    int ret = 0;
+
+    *outmsg = NULL;
+    *errmsg = NULL;
+    
+    caml_acquire_runtime_system();
+    buffer_value = caml_alloc_string(buffer_size);
+    memcpy(Bp_val(buffer_value), buffer, buffer_size);
+    
+    result = caml_callback2_exn(*g_mitls_FFI_Send, state->fstar_state, buffer_value);
+    if (Is_exception_result(result)) {
+        // Call caml_format_exception(Extract_exception(result)) to extract the exception text
+        ret = 0;
+    } else {
+        ret = 1;
+    }
+    caml_release_runtime_system();
+    
+    CAMLreturnT(int,ret);
+}
+
+// Called by the host app to receive a packet
+void * FFI_mitls_receive(/* in */ mitls_state *state, /* out */ size_t *packet_size, /* out */ char **outmsg, /* out */ char **errmsg)
+{
+    CAMLparam0();
+    CAMLlocal1(result);
+    void *p = NULL;
+
+    *outmsg = NULL;
+    *errmsg = NULL;
+
+    caml_acquire_runtime_system();
+    result = caml_callback_exn(*g_mitls_FFI_Recv, state->fstar_state);
+    if (Is_exception_result(result)) {
+        // call caml_format_exception(Extract_exception(result)) to extract the exception text
+        p = NULL;
+    } else {
+        // Return the plaintext data
+        p = copypacket(result, packet_size);
+    }
+    caml_release_runtime_system();
+    
+    CAMLreturnT(void*,p);
+}
+
+
+// Register the calling thread, so it can call miTLS.  Returns 1 for success, 0 for error.
+int FFI_mitls_thread_register(void)
+{
+    return caml_c_thread_register();
+}
+
+// Unregister the calling thread, so it can no longer call miTLS.  Returns 1 for success, 0 for error.
+int FFI_mitls_thread_unregister(void)
+{
+    return caml_c_thread_unregister();
+}
diff --git a/libs/ffi/mitlsffi.h b/libs/ffi/mitlsffi.h
index 0b975bf..d325254 100644
--- a/libs/ffi/mitlsffi.h
+++ b/libs/ffi/mitlsffi.h
@@ -1,53 +1,53 @@
-#ifndef HEADER_MITLS_FFI_H
-#define HEADER_MITLS_FFI_H
-
-typedef struct mitls_state mitls_state;
-
-// Functions exported from libmitls.dll
-//   Functions returning 'int' return 0 for failure, or nonzero for success
-
-// Perform one-time initialization
-extern int  FFI_mitls_init(void);
-
-// Perform one-time termination
-extern void FFI_mitls_cleanup(void);
-
-// Configure miTLS ahead of connecting
-extern int   FFI_mitls_configure(/* out */ mitls_state **state, const char *tls_version, const char *host_name, /* out */ char **outmsg, /* out */ char **errmsg);
-
-// Close a miTLS session - either after configure or connect
-extern void FFI_mitls_close(/* in */ mitls_state *state);
-
-// Callbacks from miTLS to the host application, to send and receive TCP
-struct _FFI_mitls_callbacks;
-typedef int (*pfn_FFI_send)(struct _FFI_mitls_callbacks *callbacks, const void *buffer, size_t buffer_size);
-typedef int (*pfn_FFI_recv)(struct _FFI_mitls_callbacks *callbacks, void *buffer, size_t buffer_size);
-struct _FFI_mitls_callbacks {
-    pfn_FFI_send send;
-    pfn_FFI_recv recv;
-};
-
-// Connect to a TLS server
-extern int   FFI_mitls_connect(struct _FFI_mitls_callbacks *callbacks, /* in */ mitls_state *state, /* out */ char **outmsg, /* out */ char **errmsg);
-
-// Send a message
-extern int FFI_mitls_send(/* in */ mitls_state *state, const void* buffer, size_t buffer_size,
-                            /* out */ char **outmsg, /* out */ char **errmsg); // Returns NULL for failure, or a TCP packet to be sent then freed with FFI_mitls_free_packet()
-
-// Receive a message
-extern void *FFI_mitls_receive(/* in */ mitls_state *state, /* out */ size_t *packet_size,
-                               /* out */ char **outmsg, /* out */ char **errmsg);     // Returns NULL for failure, a plaintext packet to be freed with FFI_mitls_free_packet()
-
-// Free a packet returned FFI_mitls_receive();
-extern void FFI_mitls_free_packet(void* packet);
-
-// Free an outmsg or errmsg
-extern void FFI_mitls_free_msg(char *msg);
-
-// Register the calling thread, so it can call miTLS.  Returns 1 for success, 0 for error.
-extern int FFI_mitls_thread_register(void);
-
-// Unregister the calling thread, so it can no longer call miTLS.  Returns 1 for success, 0 for error.
-extern int FFI_mitls_thread_unregister(void);
-
+#ifndef HEADER_MITLS_FFI_H
+#define HEADER_MITLS_FFI_H
+
+typedef struct mitls_state mitls_state;
+
+// Functions exported from libmitls.dll
+//   Functions returning 'int' return 0 for failure, or nonzero for success
+
+// Perform one-time initialization
+extern int  FFI_mitls_init(void);
+
+// Perform one-time termination
+extern void FFI_mitls_cleanup(void);
+
+// Configure miTLS ahead of connecting
+extern int   FFI_mitls_configure(/* out */ mitls_state **state, const char *tls_version, const char *host_name, /* out */ char **outmsg, /* out */ char **errmsg);
+
+// Close a miTLS session - either after configure or connect
+extern void FFI_mitls_close(/* in */ mitls_state *state);
+
+// Callbacks from miTLS to the host application, to send and receive TCP
+struct _FFI_mitls_callbacks;
+typedef int (*pfn_FFI_send)(struct _FFI_mitls_callbacks *callbacks, const void *buffer, size_t buffer_size);
+typedef int (*pfn_FFI_recv)(struct _FFI_mitls_callbacks *callbacks, void *buffer, size_t buffer_size);
+struct _FFI_mitls_callbacks {
+    pfn_FFI_send send;
+    pfn_FFI_recv recv;
+};
+
+// Connect to a TLS server
+extern int   FFI_mitls_connect(struct _FFI_mitls_callbacks *callbacks, /* in */ mitls_state *state, /* out */ char **outmsg, /* out */ char **errmsg);
+
+// Send a message
+extern int FFI_mitls_send(/* in */ mitls_state *state, const void* buffer, size_t buffer_size,
+                            /* out */ char **outmsg, /* out */ char **errmsg); // Returns NULL for failure, or a TCP packet to be sent then freed with FFI_mitls_free_packet()
+                                    
+// Receive a message
+extern void *FFI_mitls_receive(/* in */ mitls_state *state, /* out */ size_t *packet_size, 
+                               /* out */ char **outmsg, /* out */ char **errmsg);     // Returns NULL for failure, a plaintext packet to be freed with FFI_mitls_free_packet()
+
+// Free a packet returned FFI_mitls_receive();
+extern void FFI_mitls_free_packet(void* packet);
+
+// Free an outmsg or errmsg
+extern void FFI_mitls_free_msg(char *msg);
+
+// Register the calling thread, so it can call miTLS.  Returns 1 for success, 0 for error.
+extern int FFI_mitls_thread_register(void);
+
+// Unregister the calling thread, so it can no longer call miTLS.  Returns 1 for success, 0 for error.
+extern int FFI_mitls_thread_unregister(void);
+
#endif // HEADER_MITLS_FFI_H
\ No newline at end of file
diff --git a/libs/fs/DHDBManager/App.config b/libs/fs/DHDBManager/App.config
index ef730a5..e370815 100644
--- a/libs/fs/DHDBManager/App.config
+++ b/libs/fs/DHDBManager/App.config
@@ -1,16 +1,16 @@
-﻿<?xml version="1.0" encoding="utf-8"?>
-<configuration>
-  <startup>
-    <supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.0" />
-  </startup>
-  <runtime>
-    <assemblyBinding xmlns="urn:schemas-microsoft-com:asm.v1">
-      <dependentAssembly>
-        <assemblyIdentity name="FSharp.Core" publicKeyToken="b03f5f7f11d50a3a" culture="neutral" />
-        <bindingRedirect oldVersion="2.0.0.0" newVersion="4.3.0.0" />
-        <bindingRedirect oldVersion="2.3.5.0" newVersion="4.3.0.0" />
-        <bindingRedirect oldVersion="4.0.0.0" newVersion="4.3.0.0" />
-      </dependentAssembly>
-    </assemblyBinding>
-  </runtime>
+﻿<?xml version="1.0" encoding="utf-8"?>
+<configuration>
+  <startup>
+    <supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.0" />
+  </startup>
+  <runtime>
+    <assemblyBinding xmlns="urn:schemas-microsoft-com:asm.v1">
+      <dependentAssembly>
+        <assemblyIdentity name="FSharp.Core" publicKeyToken="b03f5f7f11d50a3a" culture="neutral" />
+        <bindingRedirect oldVersion="2.0.0.0" newVersion="4.3.0.0" />
+        <bindingRedirect oldVersion="2.3.5.0" newVersion="4.3.0.0" />
+        <bindingRedirect oldVersion="4.0.0.0" newVersion="4.3.0.0" />
+      </dependentAssembly>
+    </assemblyBinding>
+  </runtime>
</configuration>
\ No newline at end of file
diff --git a/libs/fs/DHDBManager/packages.config b/libs/fs/DHDBManager/packages.config
index 222102e..5a2e696 100644
--- a/libs/fs/DHDBManager/packages.config
+++ b/libs/fs/DHDBManager/packages.config
@@ -1,8 +1,8 @@
-﻿<?xml version="1.0" encoding="utf-8"?>
-<packages>
-  <package id="FSPowerPack.Community" version="3.0.0.0" targetFramework="net40" />
-  <package id="FSPowerPack.Core.Community" version="3.0.0.0" targetFramework="net40" />
-  <package id="FSPowerPack.Linq.Community" version="3.0.0.0" targetFramework="net40" />
-  <package id="FSPowerPack.Metadata.Community" version="3.0.0.0" targetFramework="net40" />
-  <package id="FSPowerPack.Parallel.Seq.Community" version="3.0.0.0" targetFramework="net40" />
+﻿<?xml version="1.0" encoding="utf-8"?>
+<packages>
+  <package id="FSPowerPack.Community" version="3.0.0.0" targetFramework="net40" />
+  <package id="FSPowerPack.Core.Community" version="3.0.0.0" targetFramework="net40" />
+  <package id="FSPowerPack.Linq.Community" version="3.0.0.0" targetFramework="net40" />
+  <package id="FSPowerPack.Metadata.Community" version="3.0.0.0" targetFramework="net40" />
+  <package id="FSPowerPack.Parallel.Seq.Community" version="3.0.0.0" targetFramework="net40" />
</packages>
\ No newline at end of file
diff --git a/libs/fs/OpenSSL/OpenSSL.cs b/libs/fs/OpenSSL/OpenSSL.cs
index 47669c1..3759aae 100644
--- a/libs/fs/OpenSSL/OpenSSL.cs
+++ b/libs/fs/OpenSSL/OpenSSL.cs
@@ -1,665 +1,665 @@
-﻿using System;
-using System.Collections.Generic;
-using System.Security.Permissions;
-using System.Runtime.InteropServices;
-
-namespace OpenSSL
-{
-    /* ---------------------------------------------------------------------- */
-    public sealed class Config
-    {
-#if __MonoCS__
-        public const string DLL = @"libcrypto.so";
-#else
-        public const string DLL = @"libeay32.dll";
-#endif
-    }
-
-    /* ---------------------------------------------------------------------- */
-    public class EVPException : ApplicationException { };
-
-    /* ---------------------------------------------------------------------- */
-    unsafe struct EVP_MD_CTX { };
-    unsafe struct EVP_MD { };
-
-    public enum MDType
-    {
-        MD5, SHA1, SHA256, SHA384, SHA512
-    }
-
-    /* ---------------------------------------------------------------------- */
-    internal sealed unsafe class _MD
-    {
-        [DllImport(Config.DLL, CharSet = CharSet.None, CallingConvention = CallingConvention.Cdecl)]
-        public static extern EVP_MD_CTX* EVP_MD_CTX_create();
-
-        [DllImport(Config.DLL, CharSet = CharSet.None, CallingConvention = CallingConvention.Cdecl)]
-        public static extern void EVP_MD_CTX_destroy(EVP_MD_CTX* handle);
-
-        [DllImport(Config.DLL, CharSet = CharSet.None, CallingConvention = CallingConvention.Cdecl)]
-        public static extern EVP_MD* EVP_MD_CTX_md(EVP_MD_CTX* handle);
-
-        [DllImport(Config.DLL, CharSet = CharSet.None, CallingConvention = CallingConvention.Cdecl)]
-        public static extern int EVP_DigestInit_ex(EVP_MD_CTX* handle, EVP_MD* type, IntPtr engine);
-
-        [DllImport(Config.DLL, CharSet = CharSet.None, CallingConvention = CallingConvention.Cdecl)]
-        public static extern int EVP_DigestUpdate(EVP_MD_CTX* handle, byte[] array, UIntPtr size);
-
-        [DllImport(Config.DLL, CharSet = CharSet.None, CallingConvention = CallingConvention.Cdecl)]
-        public static extern int EVP_DigestFinal_ex(EVP_MD_CTX* handle, byte[] array, IntPtr psize);
-
-        [DllImport(Config.DLL, CharSet = CharSet.None, CallingConvention = CallingConvention.Cdecl)]
-        public static extern int EVP_MD_block_size(EVP_MD* handle);
-
-        [DllImport(Config.DLL, CharSet = CharSet.None, CallingConvention = CallingConvention.Cdecl)]
-        public static extern int EVP_MD_size(EVP_MD* handle);
-
-        [DllImport(Config.DLL, CharSet = CharSet.None, CallingConvention = CallingConvention.Cdecl)]
-        public static extern EVP_MD* EVP_md5();
-
-        [DllImport(Config.DLL, CharSet = CharSet.None, CallingConvention = CallingConvention.Cdecl)]
-        public static extern EVP_MD* EVP_sha1();
-
-        [DllImport(Config.DLL, CharSet = CharSet.None, CallingConvention = CallingConvention.Cdecl)]
-        public static extern EVP_MD* EVP_sha256();
-
-        [DllImport(Config.DLL, CharSet = CharSet.None, CallingConvention = CallingConvention.Cdecl)]
-        public static extern EVP_MD* EVP_sha384();
-
-        [DllImport(Config.DLL, CharSet = CharSet.None, CallingConvention = CallingConvention.Cdecl)]
-        public static extern EVP_MD* EVP_sha512();
-    }
-
-    /* ---------------------------------------------------------------------- */
-#if !__MonoCS__
-    [HostProtectionAttribute(MayLeakOnAbort=true)]
-#endif
-    public sealed unsafe class MD : IDisposable
-    {
-        private EVP_MD_CTX* _handle = null;
-        private MDType _type;
-
-        public void Dispose()
-        {
-            if (this._handle != null)
-                _MD.EVP_MD_CTX_destroy(this._handle);
-            this._handle = null;
-        }
-
-        internal static EVP_MD* GetMD(MDType type)
-        {
-            switch (type)
-            {
-                case MDType.MD5   : return _MD.EVP_md5   ();
-                case MDType.SHA1  : return _MD.EVP_sha1  ();
-                case MDType.SHA256: return _MD.EVP_sha256();
-                case MDType.SHA384: return _MD.EVP_sha384();
-                case MDType.SHA512: return _MD.EVP_sha512();
-            }
-
-            return null;
-        }
-
-        public MD(MDType type)
-        {
-            EVP_MD* md = null; // Statically allocated (MT), don't free
-            EVP_MD_CTX* handle = null;
-
-            if ((md = MD.GetMD(type)) == null)
-                throw new EVPException();
-
-            if ((handle = _MD.EVP_MD_CTX_create()) == null)
-                goto Bailout;
-
-            if (_MD.EVP_DigestInit_ex(handle, md, IntPtr.Zero) == 0)
-                goto Bailout;
-
-            this._handle = handle;
-            this._type = type;
-
-            return ;
-
-        Bailout:
-            if (handle != null)
-                _MD.EVP_MD_CTX_destroy(handle);
-            throw new EVPException();
-        }
-
-        public void Update(byte[] b)
-        {
-            _MD.EVP_DigestUpdate(this._handle, b, (UIntPtr)b.Length);
-        }
-
-        public byte[] Final()
-        {
-            byte[] data = new byte[this.Size];
-            using (this)
-            {
-                _MD.EVP_DigestFinal_ex(this._handle, data, IntPtr.Zero);
-                return data;
-            }
-        }
-
-        public string Name
-        {
-            get { return Enum.GetName(typeof(MDType), this._type); }
-        }
-
-        public int BlockSize
-        {
-            get { return _MD.EVP_MD_block_size(_MD.EVP_MD_CTX_md(this._handle)); }
-        }
-
-        public int Size
-        {
-            get { return _MD.EVP_MD_size(_MD.EVP_MD_CTX_md(this._handle)); }
-        }
-    };
-
-    /* ---------------------------------------------------------------------- */
-    unsafe struct EVP_CIPHER_CTX { };
-    unsafe struct EVP_CIPHER { };
-
-    public enum CType
-    {
-        DES3, AES128, AES256
-    }
-
-    public enum CMode
-    {
-        ECB, CBC, GCM
-    }
-
-    /* ---------------------------------------------------------------------- */
-    internal sealed unsafe class _CIPHER
-    {
-        [DllImport(Config.DLL, CharSet = CharSet.None, CallingConvention = CallingConvention.Cdecl)]
-        public static extern EVP_CIPHER_CTX* EVP_CIPHER_CTX_new();
-
-        [DllImport(Config.DLL, CharSet = CharSet.None, CallingConvention = CallingConvention.Cdecl)]
-        public static extern void EVP_CIPHER_CTX_init(EVP_CIPHER_CTX *handle);
-
-        [DllImport(Config.DLL, CharSet = CharSet.None, CallingConvention = CallingConvention.Cdecl)]
-        public static extern void EVP_CIPHER_CTX_free(EVP_CIPHER_CTX *handle);
-
-        [DllImport(Config.DLL, CharSet = CharSet.None, CallingConvention = CallingConvention.Cdecl)]
-        public static extern void EVP_CIPHER_CTX_cleanup(EVP_CIPHER_CTX *handle);
-
-        [DllImport(Config.DLL, CharSet = CharSet.None, CallingConvention = CallingConvention.Cdecl)]
-        public static extern int EVP_CipherInit_ex(EVP_CIPHER_CTX *handle, EVP_CIPHER *cipher, IntPtr engine, byte[] key, byte[] iv, int enc);
-
-        [DllImport(Config.DLL, CharSet = CharSet.None, CallingConvention = CallingConvention.Cdecl)]
-        public static extern int EVP_CIPHER_CTX_set_padding(EVP_CIPHER_CTX *handle, int padding);
-
-        [DllImport(Config.DLL, CharSet = CharSet.None, CallingConvention = CallingConvention.Cdecl)]
-        public static extern int EVP_CIPHER_CTX_ctrl(EVP_CIPHER_CTX *handle, int type, int arg, byte[] ptr);
-
-        [DllImport(Config.DLL, CharSet = CharSet.None, CallingConvention = CallingConvention.Cdecl)]
-        public static extern int EVP_CIPHER_CTX_ctrl(EVP_CIPHER_CTX *handle, int type, int arg, IntPtr ptr);
-
-        [DllImport(Config.DLL, CharSet = CharSet.None, CallingConvention = CallingConvention.Cdecl)]
-        public static extern int EVP_CipherUpdate(EVP_CIPHER_CTX *handle, byte[] outbuf, ref int outlen, byte[] inbuf, int inlen);
-
-        [DllImport(Config.DLL, CharSet = CharSet.None, CallingConvention = CallingConvention.Cdecl)]
-        public static extern int EVP_CipherFinal_ex(EVP_CIPHER_CTX *handle, byte[] outbuf, ref int outlen);
-
-        [DllImport(Config.DLL, CharSet = CharSet.None, CallingConvention = CallingConvention.Cdecl)]
-        public static extern int EVP_CipherUpdate(EVP_CIPHER_CTX *handle, IntPtr outbuf, ref int outlen, IntPtr inbuf, int inlen);
-
-        [DllImport(Config.DLL, CharSet = CharSet.None, CallingConvention = CallingConvention.Cdecl)]
-        public static extern int EVP_CipherFinal_ex(EVP_CIPHER_CTX *handle, IntPtr outbuf, ref int outlen);
-
-        [DllImport(Config.DLL, CharSet = CharSet.None, CallingConvention = CallingConvention.Cdecl)]
-        public static extern EVP_CIPHER* EVP_CIPHER_CTX_cipher(EVP_CIPHER_CTX *handle);
-
-        [DllImport(Config.DLL, CharSet = CharSet.None, CallingConvention = CallingConvention.Cdecl)]
-        public static extern int EVP_CIPHER_CTX_block_size(EVP_CIPHER_CTX *handle);
-
-        [DllImport(Config.DLL, CharSet = CharSet.None, CallingConvention = CallingConvention.Cdecl)]
-        public static extern int EVP_CIPHER_CTX_key_length(EVP_CIPHER_CTX *handle);
-
-        [DllImport(Config.DLL, CharSet = CharSet.None, CallingConvention = CallingConvention.Cdecl)]
-        public static extern int EVP_CIPHER_CTX_set_key_length(EVP_CIPHER_CTX *handle, int length);
-
-        [DllImport(Config.DLL, CharSet = CharSet.None, CallingConvention = CallingConvention.Cdecl)]
-        public static extern int EVP_CIPHER_CTX_iv_length(EVP_CIPHER_CTX *handle);
-
-        [DllImport(Config.DLL, CharSet = CharSet.None, CallingConvention = CallingConvention.Cdecl)]
-        public static extern int EVP_CIPHER_CTX_set_iv_length(EVP_CIPHER_CTX *handle, int length);
-
-        [DllImport(Config.DLL, CharSet = CharSet.None, CallingConvention = CallingConvention.Cdecl)]
-        public static extern EVP_CIPHER* EVP_des_ede3();
-
-        [DllImport(Config.DLL, CharSet = CharSet.None, CallingConvention = CallingConvention.Cdecl)]
-        public static extern EVP_CIPHER* EVP_des_ede3_cbc();
-
-        [DllImport(Config.DLL, CharSet = CharSet.None, CallingConvention = CallingConvention.Cdecl)]
-        public static extern EVP_CIPHER* EVP_aes_128_ecb();
-
-        [DllImport(Config.DLL, CharSet = CharSet.None, CallingConvention = CallingConvention.Cdecl)]
-        public static extern EVP_CIPHER* EVP_aes_128_cbc();
-
-        [DllImport(Config.DLL, CharSet = CharSet.None, CallingConvention = CallingConvention.Cdecl)]
-        public static extern EVP_CIPHER* EVP_aes_128_gcm();
-
-        [DllImport(Config.DLL, CharSet = CharSet.None, CallingConvention = CallingConvention.Cdecl)]
-        public static extern EVP_CIPHER* EVP_aes_256_ecb();
-
-        [DllImport(Config.DLL, CharSet = CharSet.None, CallingConvention = CallingConvention.Cdecl)]
-        public static extern EVP_CIPHER* EVP_aes_256_cbc();
-
-        [DllImport(Config.DLL, CharSet = CharSet.None, CallingConvention = CallingConvention.Cdecl)]
-        public static extern EVP_CIPHER* EVP_aes_256_gcm();
-
-        [DllImport(Config.DLL, CharSet = CharSet.None, CallingConvention = CallingConvention.Cdecl)]
-        public static extern EVP_CIPHER* EVP_rc4();
-    }
-
-    /* ---------------------------------------------------------------------- */
-#if !__MonoCS__
-    [HostProtectionAttribute(MayLeakOnAbort=true)]
-#endif
-    public sealed unsafe class CIPHER  : IDisposable
-    {
-        public const int EVP_CTRL_GCM_SET_IVLEN    = 0x09;
-        public const int EVP_CTRL_GCM_GET_TAG      = 0x10;
-        public const int EVP_CTRL_GCM_SET_TAG      = 0x11;
-        public const int EVP_CTRL_GCM_SET_IV_FIXED = 0x12;
-        public const int EVP_CTRL_GCM_SET_IV_GEN   = 0x13;
-
-        private EVP_CIPHER_CTX* _handle = null;
-        private CType  _type;
-        private CMode  _mode;
-        private bool   _encrypt;
-        private byte[] _key;
-        private byte[] _iv;
-
-        private static Dictionary<Tuple<CType, CMode>, Func<IntPtr>> _ciphers;
-
-        static CIPHER() {
-            _ciphers = new Dictionary<Tuple<CType, CMode>, Func<IntPtr>>();
-
-            _ciphers.Add(new Tuple<CType, CMode>(CType.DES3  , CMode.ECB), () => (IntPtr) _CIPHER.EVP_des_ede3());
-            _ciphers.Add(new Tuple<CType, CMode>(CType.DES3  , CMode.CBC), () => (IntPtr) _CIPHER.EVP_des_ede3_cbc());
-            _ciphers.Add(new Tuple<CType, CMode>(CType.AES128, CMode.ECB), () => (IntPtr) _CIPHER.EVP_aes_128_ecb());
-            _ciphers.Add(new Tuple<CType, CMode>(CType.AES128, CMode.CBC), () => (IntPtr) _CIPHER.EVP_aes_128_cbc());
-            _ciphers.Add(new Tuple<CType, CMode>(CType.AES128, CMode.GCM), () => (IntPtr) _CIPHER.EVP_aes_128_gcm());
-            _ciphers.Add(new Tuple<CType, CMode>(CType.AES256, CMode.ECB), () => (IntPtr) _CIPHER.EVP_aes_256_ecb());
-            _ciphers.Add(new Tuple<CType, CMode>(CType.AES256, CMode.CBC), () => (IntPtr) _CIPHER.EVP_aes_256_cbc());
-            _ciphers.Add(new Tuple<CType, CMode>(CType.AES256, CMode.GCM), () => (IntPtr) _CIPHER.EVP_aes_256_gcm());
-        }
-
-        public void Dispose()
-        {
-            if (this._handle != null) {
-                _CIPHER.EVP_CIPHER_CTX_cleanup(this._handle);
-                _CIPHER.EVP_CIPHER_CTX_free(this._handle);
-            }
-            this._handle = null;
-        }
-
-        public CIPHER(CType type, CMode mode, bool encrypt)
-        {
-            EVP_CIPHER *cipher = null; // Statically allocated (MT), don't free
-            EVP_CIPHER_CTX *handle = null;
-
-            try {
-                cipher = (EVP_CIPHER*) _ciphers[new Tuple<CType, CMode>(type, mode)]();
-            } catch (KeyNotFoundException) {}
-
-            if (cipher == null)
-                goto Bailout;
-
-            if ((handle = _CIPHER.EVP_CIPHER_CTX_new()) == null)
-                goto Bailout;
-            _CIPHER.EVP_CIPHER_CTX_init(handle);
-            if (_CIPHER.EVP_CipherInit_ex(handle, cipher, IntPtr.Zero, null, null, encrypt ? 1 : 0) == 0)
-                goto Bailout;
-            _CIPHER.EVP_CIPHER_CTX_set_padding(handle, 0);
-
-            this._handle  = handle;
-            this._type    = type;
-            this._mode    = mode;
-            this._encrypt = encrypt;
-
-            return ;
-
-        Bailout:
-            if (handle != null)
-                _CIPHER.EVP_CIPHER_CTX_free(handle);
-            throw new EVPException();
-        }
-
-        public CType type
-        {
-            get { return this._type; }
-        }
-
-        public CMode mode
-        {
-            get { return this._mode; }
-        }
-
-        public bool ForEncryption
-        {
-            get { return this._encrypt; }
-        }
-
-        public int KeyLength
-        {
-            get
-            {
-                return _CIPHER.EVP_CIPHER_CTX_key_length(this._handle);
-            }
-
-            set
-            {
-                if (_CIPHER.EVP_CIPHER_CTX_set_key_length(this._handle, value) == 0)
-                    throw new EVPException();
-            }
-        }
-
-        public byte[] Key
-        {
-            get { return this._key; }
-
-            set
-            {
-                this.KeyLength = value.Length;
-                if (_CIPHER.EVP_CipherInit_ex(this._handle, null, IntPtr.Zero, value, null, -1) == 0)
-                    throw new EVPException();
-                this._key = value;
-            }
-        }
-
-        public int IVLength
-        {
-            get
-            {
-                return _CIPHER.EVP_CIPHER_CTX_iv_length(this._handle);
-            }
-        }
-
-        public byte[] IV
-        {
-            get { return this._iv; }
-
-            set
-            {
-                if (_CIPHER.EVP_CipherInit_ex(this._handle, null, IntPtr.Zero, null, value, -1) == 0)
-                    throw new EVPException();
-                this._iv = value;
-            }
-        }
-
-        public int BlockSize
-        {
-            get
-            {
-                return _CIPHER.EVP_CIPHER_CTX_block_size(this._handle);
-            }
-        }
-
-        public string Name
-        {
-            get { return Enum.GetName(typeof(CType), this._type); }
-        }
-
-        public int Process(byte[] ib, int ioff, int ilen, byte[] ob, int ooff)
-        {
-            int olen = 0;
-
-            if (ib == null)
-                throw new EVPException();
-            if (ioff < 0 || ioff >= ib.Length)
-                throw new EVPException();
-            if (ib.Length - ioff < ilen)
-                throw new EVPException();
-
-            if (ob != null) {
-                if (ooff < 0 || ooff >= ob.Length)
-                    throw new EVPException();
-                olen = ob.Length - ooff;
-            } else
-                ooff = 0;
-
-            fixed (byte *obp = ob) {
-            fixed (byte *ibp = ib) {
-                IntPtr op = new IntPtr(obp + ooff);
-                IntPtr ip = new IntPtr(ibp + ioff);
-
-                if (_CIPHER.EVP_CipherUpdate(this._handle, op, ref olen, ip, ilen) == 0)
-                    throw new EVPException();
-            }
-            }
-
-            return olen;
-        }
-
-        public int Final(byte[] ob, int off)
-        {
-            int olen = 0;
-
-            if (ob == null) {
-                if (_CIPHER.EVP_CipherFinal_ex(this._handle, IntPtr.Zero, ref olen) == 0)
-                    throw new EVPException();
-                return olen;
-            }
-
-            if (ob != null) {
-                if (off < 0 || off >= ob.Length)
-                    throw new EVPException();
-                olen = ob.Length - off;
-            } else
-                off = 0;
-
-            fixed (byte *obp = ob) {
-                IntPtr p = new IntPtr(obp + off);
-
-                if (_CIPHER.EVP_CipherFinal_ex(this._handle, p, ref olen) == 0)
-                    throw new EVPException();
-            }
-
-            return olen;
-        }
-
-        public void CTRL(int type, int arg, byte[] ptr, int offset)
-        {
-            if (ptr == null)
-                offset = 0;
-
-            fixed (byte *p = ptr) {
-                IntPtr ip = new IntPtr(p + offset);
-
-                if (_CIPHER.EVP_CIPHER_CTX_ctrl(this._handle, type, arg, ip) == 0)
-                    throw new EVPException();
-            }
-        }
-    }
-
-    /* ---------------------------------------------------------------------- */
-    public enum SType
-    {
-        RC4
-    }
-
-    /* ---------------------------------------------------------------------- */
-#if !__MonoCS__
-    [HostProtectionAttribute(MayLeakOnAbort=true)]
-#endif
-    public sealed unsafe class SCIPHER  : IDisposable
-    {
-        private EVP_CIPHER_CTX* _handle = null;
-        private SType  _type;
-        private bool   _encrypt;
-        private byte[] _key;
-
-        private static Dictionary<SType, Func<IntPtr>> _ciphers;
-
-        static SCIPHER() {
-            _ciphers = new Dictionary<SType, Func<IntPtr>>();
-            _ciphers.Add(SType.RC4, () => (IntPtr) _CIPHER.EVP_rc4());
-        }
-
-
-        public void Dispose()
-        {
-            if (this._handle != null) {
-                _CIPHER.EVP_CIPHER_CTX_cleanup(this._handle);
-                _CIPHER.EVP_CIPHER_CTX_free(this._handle);
-            }
-            this._handle = null;
-        }
-
-        public SCIPHER(SType type, bool encrypt)
-        {
-            EVP_CIPHER *cipher = null; // Statically allocated (MT), don't free
-            EVP_CIPHER_CTX *handle = null;
-
-            try {
-                cipher = (EVP_CIPHER*) _ciphers[type]();
-            } catch (KeyNotFoundException) {}
-
-            if (cipher == null)
-                goto Bailout;
-
-            if ((handle = _CIPHER.EVP_CIPHER_CTX_new()) == null)
-                goto Bailout;
-            _CIPHER.EVP_CIPHER_CTX_init(handle);
-            if (_CIPHER.EVP_CipherInit_ex(handle, cipher, IntPtr.Zero, null, null, encrypt ? 1 : 0) == 0)
-                goto Bailout;
-            _CIPHER.EVP_CIPHER_CTX_set_padding(handle, 0);
-
-            this._handle  = handle;
-            this._type    = type;
-            this._encrypt = encrypt;
-
-            return ;
-
-        Bailout:
-            if (handle != null)
-                _CIPHER.EVP_CIPHER_CTX_free(handle);
-            throw new EVPException();
-        }
-
-        public SType type
-        {
-            get { return this._type; }
-        }
-
-        public bool ForEncryption
-        {
-            get { return this._encrypt; }
-        }
-
-        public int KeyLength
-        {
-            get
-            {
-                return _CIPHER.EVP_CIPHER_CTX_key_length(this._handle);
-            }
-
-            set
-            {
-                if (_CIPHER.EVP_CIPHER_CTX_set_key_length(this._handle, value) == 0)
-                    throw new EVPException();
-            }
-        }
-
-        public byte[] Key
-        {
-            get { return this._key; }
-
-            set
-            {
-                this.KeyLength = value.Length;
-                if (_CIPHER.EVP_CipherInit_ex(this._handle, null, IntPtr.Zero, value, null, -1) == 0)
-                    throw new EVPException();
-                this._key = value;
-            }
-        }
-
-        public string Name
-        {
-            get { return Enum.GetName(typeof(CType), this._type); }
-        }
-
-        public byte[] Process(byte[] b)
-        {
-            byte[] aout   = new byte[b.Length];
-            int    outlen = aout.Length;
-
-            if (_CIPHER.EVP_CipherUpdate(this._handle, aout, ref outlen, b, b.Length) == 0)
-                throw new EVPException();
-
-            if (outlen != aout.Length)
-                Array.Resize(ref aout, outlen);
-
-            return aout;
-        }
-    }
-
-    /* ---------------------------------------------------------------------- */
-    internal sealed unsafe class _HMAC
-    {
-        [DllImport(Config.DLL, CharSet = CharSet.None, CallingConvention = CallingConvention.Cdecl)]
-        public static extern IntPtr HMAC
-            (EVP_MD *md, byte[] key, int klen, byte[] data, int len, byte[] aout, ref int olen);
-    }
-
-    /* ---------------------------------------------------------------------- */
-    public sealed unsafe class HMAC
-    {
-        private byte[]  _key;
-        private MDType  _type;
-        private EVP_MD *_md;
-
-
-        public HMAC(MDType type)
-        {
-            this._type = type;
-            this._md   = MD.GetMD(this._type);
-
-            if (this._md == null)
-                throw new EVPException();
-        }
-
-        public MDType type
-        {
-            get { return this._type; }
-        }
-
-        public byte[] Key
-        {
-            get { return this._key; }
-            set { this._key = value; }
-        }
-
-        public string Name
-        {
-            get { return Enum.GetName(typeof(MDType), this._type); }
-        }
-
-        public byte[] HMac(byte[] b)
-        {
-            if (this._key == null)
-                throw new EVPException();
-
-            byte[] aout = new byte[_MD.EVP_MD_size(this._md)];
-            int aoutlen = aout.Length;
-
-            if (_HMAC.HMAC(this._md, this._key, this._key.Length, b, b.Length, aout, ref aoutlen) == IntPtr.Zero)
-                throw new EVPException();
-            if (aoutlen != aout.Length)
-                throw new EVPException();
-            return aout;
-        }
-    }
-
-    /* ---------------------------------------------------------------------- */
-    public class Core
-    {
-        [DllImport(Config.DLL, CharSet = CharSet.None)]
-        public static extern int SSLeay();
-    }
-}
+﻿using System;
+using System.Collections.Generic;
+using System.Security.Permissions;
+using System.Runtime.InteropServices;
+
+namespace OpenSSL
+{
+    /* ---------------------------------------------------------------------- */
+    public sealed class Config
+    {
+#if __MonoCS__
+        public const string DLL = @"libcrypto.so";
+#else
+        public const string DLL = @"libeay32.dll";
+#endif
+    }
+    
+    /* ---------------------------------------------------------------------- */
+    public class EVPException : ApplicationException { };
+
+    /* ---------------------------------------------------------------------- */
+    unsafe struct EVP_MD_CTX { };
+    unsafe struct EVP_MD { };
+
+    public enum MDType
+    {
+        MD5, SHA1, SHA256, SHA384, SHA512
+    }
+
+    /* ---------------------------------------------------------------------- */
+    internal sealed unsafe class _MD
+    {
+        [DllImport(Config.DLL, CharSet = CharSet.None, CallingConvention = CallingConvention.Cdecl)]
+        public static extern EVP_MD_CTX* EVP_MD_CTX_create();
+
+        [DllImport(Config.DLL, CharSet = CharSet.None, CallingConvention = CallingConvention.Cdecl)]
+        public static extern void EVP_MD_CTX_destroy(EVP_MD_CTX* handle);
+
+        [DllImport(Config.DLL, CharSet = CharSet.None, CallingConvention = CallingConvention.Cdecl)]
+        public static extern EVP_MD* EVP_MD_CTX_md(EVP_MD_CTX* handle);
+
+        [DllImport(Config.DLL, CharSet = CharSet.None, CallingConvention = CallingConvention.Cdecl)]
+        public static extern int EVP_DigestInit_ex(EVP_MD_CTX* handle, EVP_MD* type, IntPtr engine);
+
+        [DllImport(Config.DLL, CharSet = CharSet.None, CallingConvention = CallingConvention.Cdecl)]
+        public static extern int EVP_DigestUpdate(EVP_MD_CTX* handle, byte[] array, UIntPtr size);
+
+        [DllImport(Config.DLL, CharSet = CharSet.None, CallingConvention = CallingConvention.Cdecl)]
+        public static extern int EVP_DigestFinal_ex(EVP_MD_CTX* handle, byte[] array, IntPtr psize);
+
+        [DllImport(Config.DLL, CharSet = CharSet.None, CallingConvention = CallingConvention.Cdecl)]
+        public static extern int EVP_MD_block_size(EVP_MD* handle);
+
+        [DllImport(Config.DLL, CharSet = CharSet.None, CallingConvention = CallingConvention.Cdecl)]
+        public static extern int EVP_MD_size(EVP_MD* handle);
+
+        [DllImport(Config.DLL, CharSet = CharSet.None, CallingConvention = CallingConvention.Cdecl)]
+        public static extern EVP_MD* EVP_md5();
+
+        [DllImport(Config.DLL, CharSet = CharSet.None, CallingConvention = CallingConvention.Cdecl)]
+        public static extern EVP_MD* EVP_sha1();
+
+        [DllImport(Config.DLL, CharSet = CharSet.None, CallingConvention = CallingConvention.Cdecl)]
+        public static extern EVP_MD* EVP_sha256();
+
+        [DllImport(Config.DLL, CharSet = CharSet.None, CallingConvention = CallingConvention.Cdecl)]
+        public static extern EVP_MD* EVP_sha384();
+
+        [DllImport(Config.DLL, CharSet = CharSet.None, CallingConvention = CallingConvention.Cdecl)]
+        public static extern EVP_MD* EVP_sha512();
+    }
+
+    /* ---------------------------------------------------------------------- */
+#if !__MonoCS__
+    [HostProtectionAttribute(MayLeakOnAbort=true)]
+#endif
+    public sealed unsafe class MD : IDisposable
+    {
+        private EVP_MD_CTX* _handle = null;
+        private MDType _type;
+
+        public void Dispose()
+        {
+            if (this._handle != null)
+                _MD.EVP_MD_CTX_destroy(this._handle);
+            this._handle = null;
+        }
+
+        internal static EVP_MD* GetMD(MDType type)
+        {
+            switch (type)
+            {
+                case MDType.MD5   : return _MD.EVP_md5   ();
+                case MDType.SHA1  : return _MD.EVP_sha1  ();
+                case MDType.SHA256: return _MD.EVP_sha256();
+                case MDType.SHA384: return _MD.EVP_sha384();
+                case MDType.SHA512: return _MD.EVP_sha512();
+            }
+
+            return null;
+        }
+
+        public MD(MDType type)
+        {
+            EVP_MD* md = null; // Statically allocated (MT), don't free
+            EVP_MD_CTX* handle = null;
+
+            if ((md = MD.GetMD(type)) == null)
+                throw new EVPException();
+
+            if ((handle = _MD.EVP_MD_CTX_create()) == null)
+                goto Bailout;
+
+            if (_MD.EVP_DigestInit_ex(handle, md, IntPtr.Zero) == 0)
+                goto Bailout;
+
+            this._handle = handle;
+            this._type = type;
+        
+            return ;
+
+        Bailout:
+            if (handle != null)
+                _MD.EVP_MD_CTX_destroy(handle);
+            throw new EVPException();
+        }
+
+        public void Update(byte[] b)
+        {
+            _MD.EVP_DigestUpdate(this._handle, b, (UIntPtr)b.Length);
+        }
+
+        public byte[] Final()
+        {
+            byte[] data = new byte[this.Size];
+            using (this)
+            {
+                _MD.EVP_DigestFinal_ex(this._handle, data, IntPtr.Zero);
+                return data;
+            }
+        }
+
+        public string Name
+        {
+            get { return Enum.GetName(typeof(MDType), this._type); }
+        }
+
+        public int BlockSize
+        {
+            get { return _MD.EVP_MD_block_size(_MD.EVP_MD_CTX_md(this._handle)); }
+        }
+
+        public int Size
+        {
+            get { return _MD.EVP_MD_size(_MD.EVP_MD_CTX_md(this._handle)); }
+        }
+    };
+
+    /* ---------------------------------------------------------------------- */
+    unsafe struct EVP_CIPHER_CTX { };
+    unsafe struct EVP_CIPHER { };
+
+    public enum CType
+    {
+        DES3, AES128, AES256
+    }
+
+    public enum CMode
+    {
+        ECB, CBC, GCM
+    }
+
+    /* ---------------------------------------------------------------------- */
+    internal sealed unsafe class _CIPHER
+    {
+        [DllImport(Config.DLL, CharSet = CharSet.None, CallingConvention = CallingConvention.Cdecl)]
+        public static extern EVP_CIPHER_CTX* EVP_CIPHER_CTX_new(); 
+
+        [DllImport(Config.DLL, CharSet = CharSet.None, CallingConvention = CallingConvention.Cdecl)]
+        public static extern void EVP_CIPHER_CTX_init(EVP_CIPHER_CTX *handle); 
+
+        [DllImport(Config.DLL, CharSet = CharSet.None, CallingConvention = CallingConvention.Cdecl)]
+        public static extern void EVP_CIPHER_CTX_free(EVP_CIPHER_CTX *handle); 
+
+        [DllImport(Config.DLL, CharSet = CharSet.None, CallingConvention = CallingConvention.Cdecl)]
+        public static extern void EVP_CIPHER_CTX_cleanup(EVP_CIPHER_CTX *handle); 
+
+        [DllImport(Config.DLL, CharSet = CharSet.None, CallingConvention = CallingConvention.Cdecl)]
+        public static extern int EVP_CipherInit_ex(EVP_CIPHER_CTX *handle, EVP_CIPHER *cipher, IntPtr engine, byte[] key, byte[] iv, int enc);
+        
+        [DllImport(Config.DLL, CharSet = CharSet.None, CallingConvention = CallingConvention.Cdecl)]
+        public static extern int EVP_CIPHER_CTX_set_padding(EVP_CIPHER_CTX *handle, int padding);
+        
+        [DllImport(Config.DLL, CharSet = CharSet.None, CallingConvention = CallingConvention.Cdecl)]
+        public static extern int EVP_CIPHER_CTX_ctrl(EVP_CIPHER_CTX *handle, int type, int arg, byte[] ptr);
+
+        [DllImport(Config.DLL, CharSet = CharSet.None, CallingConvention = CallingConvention.Cdecl)]
+        public static extern int EVP_CIPHER_CTX_ctrl(EVP_CIPHER_CTX *handle, int type, int arg, IntPtr ptr);
+
+        [DllImport(Config.DLL, CharSet = CharSet.None, CallingConvention = CallingConvention.Cdecl)]
+        public static extern int EVP_CipherUpdate(EVP_CIPHER_CTX *handle, byte[] outbuf, ref int outlen, byte[] inbuf, int inlen);
+        
+        [DllImport(Config.DLL, CharSet = CharSet.None, CallingConvention = CallingConvention.Cdecl)]
+        public static extern int EVP_CipherFinal_ex(EVP_CIPHER_CTX *handle, byte[] outbuf, ref int outlen);
+        
+        [DllImport(Config.DLL, CharSet = CharSet.None, CallingConvention = CallingConvention.Cdecl)]
+        public static extern int EVP_CipherUpdate(EVP_CIPHER_CTX *handle, IntPtr outbuf, ref int outlen, IntPtr inbuf, int inlen);
+        
+        [DllImport(Config.DLL, CharSet = CharSet.None, CallingConvention = CallingConvention.Cdecl)]
+        public static extern int EVP_CipherFinal_ex(EVP_CIPHER_CTX *handle, IntPtr outbuf, ref int outlen);
+
+        [DllImport(Config.DLL, CharSet = CharSet.None, CallingConvention = CallingConvention.Cdecl)]
+        public static extern EVP_CIPHER* EVP_CIPHER_CTX_cipher(EVP_CIPHER_CTX *handle);
+
+        [DllImport(Config.DLL, CharSet = CharSet.None, CallingConvention = CallingConvention.Cdecl)]
+        public static extern int EVP_CIPHER_CTX_block_size(EVP_CIPHER_CTX *handle);
+
+        [DllImport(Config.DLL, CharSet = CharSet.None, CallingConvention = CallingConvention.Cdecl)]
+        public static extern int EVP_CIPHER_CTX_key_length(EVP_CIPHER_CTX *handle);
+
+        [DllImport(Config.DLL, CharSet = CharSet.None, CallingConvention = CallingConvention.Cdecl)]
+        public static extern int EVP_CIPHER_CTX_set_key_length(EVP_CIPHER_CTX *handle, int length);
+
+        [DllImport(Config.DLL, CharSet = CharSet.None, CallingConvention = CallingConvention.Cdecl)]
+        public static extern int EVP_CIPHER_CTX_iv_length(EVP_CIPHER_CTX *handle);
+
+        [DllImport(Config.DLL, CharSet = CharSet.None, CallingConvention = CallingConvention.Cdecl)]
+        public static extern int EVP_CIPHER_CTX_set_iv_length(EVP_CIPHER_CTX *handle, int length);
+
+        [DllImport(Config.DLL, CharSet = CharSet.None, CallingConvention = CallingConvention.Cdecl)]
+        public static extern EVP_CIPHER* EVP_des_ede3();
+
+        [DllImport(Config.DLL, CharSet = CharSet.None, CallingConvention = CallingConvention.Cdecl)]
+        public static extern EVP_CIPHER* EVP_des_ede3_cbc();
+
+        [DllImport(Config.DLL, CharSet = CharSet.None, CallingConvention = CallingConvention.Cdecl)]
+        public static extern EVP_CIPHER* EVP_aes_128_ecb();
+
+        [DllImport(Config.DLL, CharSet = CharSet.None, CallingConvention = CallingConvention.Cdecl)]
+        public static extern EVP_CIPHER* EVP_aes_128_cbc();
+
+        [DllImport(Config.DLL, CharSet = CharSet.None, CallingConvention = CallingConvention.Cdecl)]
+        public static extern EVP_CIPHER* EVP_aes_128_gcm();
+
+        [DllImport(Config.DLL, CharSet = CharSet.None, CallingConvention = CallingConvention.Cdecl)]
+        public static extern EVP_CIPHER* EVP_aes_256_ecb();
+
+        [DllImport(Config.DLL, CharSet = CharSet.None, CallingConvention = CallingConvention.Cdecl)]
+        public static extern EVP_CIPHER* EVP_aes_256_cbc();
+
+        [DllImport(Config.DLL, CharSet = CharSet.None, CallingConvention = CallingConvention.Cdecl)]
+        public static extern EVP_CIPHER* EVP_aes_256_gcm();
+
+        [DllImport(Config.DLL, CharSet = CharSet.None, CallingConvention = CallingConvention.Cdecl)]
+        public static extern EVP_CIPHER* EVP_rc4();
+    }
+
+    /* ---------------------------------------------------------------------- */
+#if !__MonoCS__
+    [HostProtectionAttribute(MayLeakOnAbort=true)]
+#endif
+    public sealed unsafe class CIPHER  : IDisposable
+    {
+        public const int EVP_CTRL_GCM_SET_IVLEN    = 0x09;
+        public const int EVP_CTRL_GCM_GET_TAG      = 0x10;
+        public const int EVP_CTRL_GCM_SET_TAG      = 0x11;
+        public const int EVP_CTRL_GCM_SET_IV_FIXED = 0x12;
+        public const int EVP_CTRL_GCM_SET_IV_GEN   = 0x13;
+
+        private EVP_CIPHER_CTX* _handle = null;
+        private CType  _type;
+        private CMode  _mode;
+        private bool   _encrypt;
+        private byte[] _key;
+        private byte[] _iv;
+
+        private static Dictionary<Tuple<CType, CMode>, Func<IntPtr>> _ciphers;
+
+        static CIPHER() {
+            _ciphers = new Dictionary<Tuple<CType, CMode>, Func<IntPtr>>();
+
+            _ciphers.Add(new Tuple<CType, CMode>(CType.DES3  , CMode.ECB), () => (IntPtr) _CIPHER.EVP_des_ede3());
+            _ciphers.Add(new Tuple<CType, CMode>(CType.DES3  , CMode.CBC), () => (IntPtr) _CIPHER.EVP_des_ede3_cbc());
+            _ciphers.Add(new Tuple<CType, CMode>(CType.AES128, CMode.ECB), () => (IntPtr) _CIPHER.EVP_aes_128_ecb());
+            _ciphers.Add(new Tuple<CType, CMode>(CType.AES128, CMode.CBC), () => (IntPtr) _CIPHER.EVP_aes_128_cbc());
+            _ciphers.Add(new Tuple<CType, CMode>(CType.AES128, CMode.GCM), () => (IntPtr) _CIPHER.EVP_aes_128_gcm());
+            _ciphers.Add(new Tuple<CType, CMode>(CType.AES256, CMode.ECB), () => (IntPtr) _CIPHER.EVP_aes_256_ecb());
+            _ciphers.Add(new Tuple<CType, CMode>(CType.AES256, CMode.CBC), () => (IntPtr) _CIPHER.EVP_aes_256_cbc());
+            _ciphers.Add(new Tuple<CType, CMode>(CType.AES256, CMode.GCM), () => (IntPtr) _CIPHER.EVP_aes_256_gcm());
+        }
+
+        public void Dispose()
+        {
+            if (this._handle != null) {
+                _CIPHER.EVP_CIPHER_CTX_cleanup(this._handle);
+                _CIPHER.EVP_CIPHER_CTX_free(this._handle);
+            }
+            this._handle = null;
+        }
+        
+        public CIPHER(CType type, CMode mode, bool encrypt)
+        {
+            EVP_CIPHER *cipher = null; // Statically allocated (MT), don't free
+            EVP_CIPHER_CTX *handle = null;
+
+            try {
+                cipher = (EVP_CIPHER*) _ciphers[new Tuple<CType, CMode>(type, mode)]();
+            } catch (KeyNotFoundException) {}
+
+            if (cipher == null)
+                goto Bailout;
+
+            if ((handle = _CIPHER.EVP_CIPHER_CTX_new()) == null)
+                goto Bailout;
+            _CIPHER.EVP_CIPHER_CTX_init(handle);
+            if (_CIPHER.EVP_CipherInit_ex(handle, cipher, IntPtr.Zero, null, null, encrypt ? 1 : 0) == 0)
+                goto Bailout;
+            _CIPHER.EVP_CIPHER_CTX_set_padding(handle, 0);
+
+            this._handle  = handle;
+            this._type    = type;
+            this._mode    = mode;
+            this._encrypt = encrypt;
+
+            return ;
+
+        Bailout:
+            if (handle != null)
+                _CIPHER.EVP_CIPHER_CTX_free(handle);
+            throw new EVPException();
+        }
+
+        public CType type
+        {
+            get { return this._type; }
+        }
+
+        public CMode mode
+        {
+            get { return this._mode; }
+        }
+
+        public bool ForEncryption
+        {
+            get { return this._encrypt; }
+        }
+
+        public int KeyLength
+        {
+            get
+            {
+                return _CIPHER.EVP_CIPHER_CTX_key_length(this._handle);
+            }
+
+            set
+            {
+                if (_CIPHER.EVP_CIPHER_CTX_set_key_length(this._handle, value) == 0)
+                    throw new EVPException();
+            }
+        }
+
+        public byte[] Key
+        {
+            get { return this._key; }
+
+            set
+            {
+                this.KeyLength = value.Length;
+                if (_CIPHER.EVP_CipherInit_ex(this._handle, null, IntPtr.Zero, value, null, -1) == 0)
+                    throw new EVPException();
+                this._key = value;
+            }
+        }
+
+        public int IVLength
+        {
+            get
+            {
+                return _CIPHER.EVP_CIPHER_CTX_iv_length(this._handle);
+            }
+        }
+
+        public byte[] IV
+        {
+            get { return this._iv; }
+
+            set
+            {
+                if (_CIPHER.EVP_CipherInit_ex(this._handle, null, IntPtr.Zero, null, value, -1) == 0)
+                    throw new EVPException();
+                this._iv = value;
+            }
+        }
+
+        public int BlockSize
+        {
+            get
+            {
+                return _CIPHER.EVP_CIPHER_CTX_block_size(this._handle);
+            }
+        }
+
+        public string Name
+        {
+            get { return Enum.GetName(typeof(CType), this._type); }
+        }
+
+        public int Process(byte[] ib, int ioff, int ilen, byte[] ob, int ooff)
+        {
+            int olen = 0;
+
+            if (ib == null)
+                throw new EVPException();
+            if (ioff < 0 || ioff >= ib.Length)
+                throw new EVPException();
+            if (ib.Length - ioff < ilen)
+                throw new EVPException();
+
+            if (ob != null) {
+                if (ooff < 0 || ooff >= ob.Length)
+                    throw new EVPException();
+                olen = ob.Length - ooff;
+            } else
+                ooff = 0;
+
+            fixed (byte *obp = ob) {
+            fixed (byte *ibp = ib) {
+                IntPtr op = new IntPtr(obp + ooff);
+                IntPtr ip = new IntPtr(ibp + ioff);
+
+                if (_CIPHER.EVP_CipherUpdate(this._handle, op, ref olen, ip, ilen) == 0)
+                    throw new EVPException();
+            }
+            }
+
+            return olen;
+        }
+
+        public int Final(byte[] ob, int off)
+        {
+            int olen = 0;
+
+            if (ob == null) {
+                if (_CIPHER.EVP_CipherFinal_ex(this._handle, IntPtr.Zero, ref olen) == 0)
+                    throw new EVPException();
+                return olen;
+            }
+
+            if (ob != null) {
+                if (off < 0 || off >= ob.Length)
+                    throw new EVPException();
+                olen = ob.Length - off;
+            } else
+                off = 0;
+
+            fixed (byte *obp = ob) {
+                IntPtr p = new IntPtr(obp + off);
+
+                if (_CIPHER.EVP_CipherFinal_ex(this._handle, p, ref olen) == 0)
+                    throw new EVPException();
+            }
+
+            return olen;
+        }
+
+        public void CTRL(int type, int arg, byte[] ptr, int offset)
+        {
+            if (ptr == null)
+                offset = 0;
+
+            fixed (byte *p = ptr) {
+                IntPtr ip = new IntPtr(p + offset);
+
+                if (_CIPHER.EVP_CIPHER_CTX_ctrl(this._handle, type, arg, ip) == 0)
+                    throw new EVPException();
+            }
+        }
+    }
+
+    /* ---------------------------------------------------------------------- */
+    public enum SType
+    {
+        RC4
+    }
+
+    /* ---------------------------------------------------------------------- */
+#if !__MonoCS__
+    [HostProtectionAttribute(MayLeakOnAbort=true)]
+#endif
+    public sealed unsafe class SCIPHER  : IDisposable
+    {
+        private EVP_CIPHER_CTX* _handle = null;
+        private SType  _type;
+        private bool   _encrypt;
+        private byte[] _key;
+
+        private static Dictionary<SType, Func<IntPtr>> _ciphers;
+
+        static SCIPHER() {
+            _ciphers = new Dictionary<SType, Func<IntPtr>>();
+            _ciphers.Add(SType.RC4, () => (IntPtr) _CIPHER.EVP_rc4());
+        }
+
+
+        public void Dispose()
+        {
+            if (this._handle != null) {
+                _CIPHER.EVP_CIPHER_CTX_cleanup(this._handle);
+                _CIPHER.EVP_CIPHER_CTX_free(this._handle);
+            }
+            this._handle = null;
+        }
+        
+        public SCIPHER(SType type, bool encrypt)
+        {
+            EVP_CIPHER *cipher = null; // Statically allocated (MT), don't free
+            EVP_CIPHER_CTX *handle = null;
+
+            try {
+                cipher = (EVP_CIPHER*) _ciphers[type]();
+            } catch (KeyNotFoundException) {}
+
+            if (cipher == null)
+                goto Bailout;
+
+            if ((handle = _CIPHER.EVP_CIPHER_CTX_new()) == null)
+                goto Bailout;
+            _CIPHER.EVP_CIPHER_CTX_init(handle);
+            if (_CIPHER.EVP_CipherInit_ex(handle, cipher, IntPtr.Zero, null, null, encrypt ? 1 : 0) == 0)
+                goto Bailout;
+            _CIPHER.EVP_CIPHER_CTX_set_padding(handle, 0);
+
+            this._handle  = handle;
+            this._type    = type;
+            this._encrypt = encrypt;
+
+            return ;
+
+        Bailout:
+            if (handle != null)
+                _CIPHER.EVP_CIPHER_CTX_free(handle);
+            throw new EVPException();
+        }
+
+        public SType type
+        {
+            get { return this._type; }
+        }
+
+        public bool ForEncryption
+        {
+            get { return this._encrypt; }
+        }
+
+        public int KeyLength
+        {
+            get
+            {
+                return _CIPHER.EVP_CIPHER_CTX_key_length(this._handle);
+            }
+
+            set
+            {
+                if (_CIPHER.EVP_CIPHER_CTX_set_key_length(this._handle, value) == 0)
+                    throw new EVPException();
+            }
+        }
+
+        public byte[] Key
+        {
+            get { return this._key; }
+
+            set
+            {
+                this.KeyLength = value.Length;
+                if (_CIPHER.EVP_CipherInit_ex(this._handle, null, IntPtr.Zero, value, null, -1) == 0)
+                    throw new EVPException();
+                this._key = value;
+            }
+        }
+
+        public string Name
+        {
+            get { return Enum.GetName(typeof(CType), this._type); }
+        }
+
+        public byte[] Process(byte[] b)
+        {
+            byte[] aout   = new byte[b.Length];
+            int    outlen = aout.Length;
+
+            if (_CIPHER.EVP_CipherUpdate(this._handle, aout, ref outlen, b, b.Length) == 0)
+                throw new EVPException();
+
+            if (outlen != aout.Length)
+                Array.Resize(ref aout, outlen);
+            
+            return aout;
+        }
+    }
+
+    /* ---------------------------------------------------------------------- */
+    internal sealed unsafe class _HMAC
+    {
+        [DllImport(Config.DLL, CharSet = CharSet.None, CallingConvention = CallingConvention.Cdecl)]
+        public static extern IntPtr HMAC
+            (EVP_MD *md, byte[] key, int klen, byte[] data, int len, byte[] aout, ref int olen); 
+    }
+
+    /* ---------------------------------------------------------------------- */
+    public sealed unsafe class HMAC
+    {
+        private byte[]  _key;
+        private MDType  _type;
+        private EVP_MD *_md;
+
+        
+        public HMAC(MDType type)
+        {
+            this._type = type;
+            this._md   = MD.GetMD(this._type);
+
+            if (this._md == null)
+                throw new EVPException();
+        }
+
+        public MDType type
+        {
+            get { return this._type; }
+        }
+
+        public byte[] Key
+        {
+            get { return this._key; }
+            set { this._key = value; }
+        }
+
+        public string Name
+        {
+            get { return Enum.GetName(typeof(MDType), this._type); }
+        }
+
+        public byte[] HMac(byte[] b)
+        {
+            if (this._key == null)
+                throw new EVPException();
+
+            byte[] aout = new byte[_MD.EVP_MD_size(this._md)];
+            int aoutlen = aout.Length;
+
+            if (_HMAC.HMAC(this._md, this._key, this._key.Length, b, b.Length, aout, ref aoutlen) == IntPtr.Zero)
+                throw new EVPException();
+            if (aoutlen != aout.Length)
+                throw new EVPException();
+            return aout;
+        }
+    }
+    
+    /* ---------------------------------------------------------------------- */
+    public class Core
+    {
+        [DllImport(Config.DLL, CharSet = CharSet.None)]
+        public static extern int SSLeay();
+    }
+}
diff --git a/libs/fs/OpenSSL/OpenSSL.csproj b/libs/fs/OpenSSL/OpenSSL.csproj
index ceea6b6..f7bf8bd 100644
--- a/libs/fs/OpenSSL/OpenSSL.csproj
+++ b/libs/fs/OpenSSL/OpenSSL.csproj
@@ -1,56 +1,56 @@
-﻿<?xml version="1.0" encoding="utf-8"?>
-<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
-  <PropertyGroup>
-    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
-    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
-    <ProductVersion>8.0.30703</ProductVersion>
-    <SchemaVersion>2.0</SchemaVersion>
-    <ProjectGuid>{DB787D27-C33E-4D14-BF2C-B92CBDBF0C54}</ProjectGuid>
-    <OutputType>Library</OutputType>
-    <AppDesignerFolder>Properties</AppDesignerFolder>
-    <RootNamespace>OpenSSL</RootNamespace>
-    <AssemblyName>OpenSSL</AssemblyName>
-    <TargetFrameworkVersion>v4.0</TargetFrameworkVersion>
-    <FileAlignment>512</FileAlignment>
-  </PropertyGroup>
-  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
-    <DebugSymbols>true</DebugSymbols>
-    <DebugType>full</DebugType>
-    <Optimize>false</Optimize>
-    <OutputPath>bin\Debug\</OutputPath>
-    <DefineConstants>DEBUG;TRACE</DefineConstants>
-    <ErrorReport>prompt</ErrorReport>
-    <WarningLevel>4</WarningLevel>
-    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
-  </PropertyGroup>
-  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
-    <DebugType>pdbonly</DebugType>
-    <Optimize>true</Optimize>
-    <OutputPath>bin\Release\</OutputPath>
-    <DefineConstants>TRACE</DefineConstants>
-    <ErrorReport>prompt</ErrorReport>
-    <WarningLevel>4</WarningLevel>
-    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
-  </PropertyGroup>
-  <ItemGroup>
-    <Reference Include="System" />
-    <Reference Include="System.Core" />
-    <Reference Include="System.Xml.Linq" />
-    <Reference Include="System.Data.DataSetExtensions" />
-    <Reference Include="Microsoft.CSharp" />
-    <Reference Include="System.Data" />
-    <Reference Include="System.Xml" />
-  </ItemGroup>
-  <ItemGroup>
-    <Compile Include="OpenSSL.cs" />
-    <Compile Include="Properties\AssemblyInfo.cs" />
-  </ItemGroup>
-  <Import Project="$(MSBuildToolsPath)\Microsoft.CSharp.targets" />
-  <!-- To modify your build process, add your task inside one of the targets below and uncomment it.
-       Other similar extension points exist, see Microsoft.Common.targets.
-  <Target Name="BeforeBuild">
-  </Target>
-  <Target Name="AfterBuild">
-  </Target>
-  -->
+﻿<?xml version="1.0" encoding="utf-8"?>
+<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+  <PropertyGroup>
+    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
+    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
+    <ProductVersion>8.0.30703</ProductVersion>
+    <SchemaVersion>2.0</SchemaVersion>
+    <ProjectGuid>{DB787D27-C33E-4D14-BF2C-B92CBDBF0C54}</ProjectGuid>
+    <OutputType>Library</OutputType>
+    <AppDesignerFolder>Properties</AppDesignerFolder>
+    <RootNamespace>OpenSSL</RootNamespace>
+    <AssemblyName>OpenSSL</AssemblyName>
+    <TargetFrameworkVersion>v4.0</TargetFrameworkVersion>
+    <FileAlignment>512</FileAlignment>
+  </PropertyGroup>
+  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
+    <DebugSymbols>true</DebugSymbols>
+    <DebugType>full</DebugType>
+    <Optimize>false</Optimize>
+    <OutputPath>bin\Debug\</OutputPath>
+    <DefineConstants>DEBUG;TRACE</DefineConstants>
+    <ErrorReport>prompt</ErrorReport>
+    <WarningLevel>4</WarningLevel>
+    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
+  </PropertyGroup>
+  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
+    <DebugType>pdbonly</DebugType>
+    <Optimize>true</Optimize>
+    <OutputPath>bin\Release\</OutputPath>
+    <DefineConstants>TRACE</DefineConstants>
+    <ErrorReport>prompt</ErrorReport>
+    <WarningLevel>4</WarningLevel>
+    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
+  </PropertyGroup>
+  <ItemGroup>
+    <Reference Include="System" />
+    <Reference Include="System.Core" />
+    <Reference Include="System.Xml.Linq" />
+    <Reference Include="System.Data.DataSetExtensions" />
+    <Reference Include="Microsoft.CSharp" />
+    <Reference Include="System.Data" />
+    <Reference Include="System.Xml" />
+  </ItemGroup>
+  <ItemGroup>
+    <Compile Include="OpenSSL.cs" />
+    <Compile Include="Properties\AssemblyInfo.cs" />
+  </ItemGroup>
+  <Import Project="$(MSBuildToolsPath)\Microsoft.CSharp.targets" />
+  <!-- To modify your build process, add your task inside one of the targets below and uncomment it. 
+       Other similar extension points exist, see Microsoft.Common.targets.
+  <Target Name="BeforeBuild">
+  </Target>
+  <Target Name="AfterBuild">
+  </Target>
+  -->
</Project>
\ No newline at end of file
diff --git a/libs/fs/OpenSSL/Properties/AssemblyInfo.cs b/libs/fs/OpenSSL/Properties/AssemblyInfo.cs
index 0e4f9fc..4c5acb4 100644
--- a/libs/fs/OpenSSL/Properties/AssemblyInfo.cs
+++ b/libs/fs/OpenSSL/Properties/AssemblyInfo.cs
@@ -1,36 +1,36 @@
-﻿using System.Reflection;
-using System.Runtime.CompilerServices;
-using System.Runtime.InteropServices;
-
-// General Information about an assembly is controlled through the following
-// set of attributes. Change these attribute values to modify the information
-// associated with an assembly.
-[assembly: AssemblyTitle("OpenSSL")]
-[assembly: AssemblyDescription("")]
-[assembly: AssemblyConfiguration("")]
-[assembly: AssemblyCompany("")]
-[assembly: AssemblyProduct("OpenSSL")]
-[assembly: AssemblyCopyright("Copyright ©  2013")]
-[assembly: AssemblyTrademark("")]
-[assembly: AssemblyCulture("")]
-
-// Setting ComVisible to false makes the types in this assembly not visible
-// to COM components.  If you need to access a type in this assembly from
-// COM, set the ComVisible attribute to true on that type.
-[assembly: ComVisible(false)]
-
-// The following GUID is for the ID of the typelib if this project is exposed to COM
-[assembly: Guid("4bcb676e-9955-43b3-bd6f-d30f7ea0e083")]
-
-// Version information for an assembly consists of the following four values:
-//
-//      Major Version
-//      Minor Version
-//      Build Number
-//      Revision
-//
-// You can specify all the values or you can default the Build and Revision Numbers
-// by using the '*' as shown below:
-// [assembly: AssemblyVersion("1.0.*")]
-[assembly: AssemblyVersion("1.0.0.0")]
-[assembly: AssemblyFileVersion("1.0.0.0")]
+﻿using System.Reflection;
+using System.Runtime.CompilerServices;
+using System.Runtime.InteropServices;
+
+// General Information about an assembly is controlled through the following 
+// set of attributes. Change these attribute values to modify the information
+// associated with an assembly.
+[assembly: AssemblyTitle("OpenSSL")]
+[assembly: AssemblyDescription("")]
+[assembly: AssemblyConfiguration("")]
+[assembly: AssemblyCompany("")]
+[assembly: AssemblyProduct("OpenSSL")]
+[assembly: AssemblyCopyright("Copyright ©  2013")]
+[assembly: AssemblyTrademark("")]
+[assembly: AssemblyCulture("")]
+
+// Setting ComVisible to false makes the types in this assembly not visible 
+// to COM components.  If you need to access a type in this assembly from 
+// COM, set the ComVisible attribute to true on that type.
+[assembly: ComVisible(false)]
+
+// The following GUID is for the ID of the typelib if this project is exposed to COM
+[assembly: Guid("4bcb676e-9955-43b3-bd6f-d30f7ea0e083")]
+
+// Version information for an assembly consists of the following four values:
+//
+//      Major Version
+//      Minor Version 
+//      Build Number
+//      Revision
+//
+// You can specify all the values or you can default the Build and Revision Numbers 
+// by using the '*' as shown below:
+// [assembly: AssemblyVersion("1.0.*")]
+[assembly: AssemblyVersion("1.0.0.0")]
+[assembly: AssemblyFileVersion("1.0.0.0")]
diff --git a/libs/fs/Platform/packages.config b/libs/fs/Platform/packages.config
index 6f5b1e0..fd4bb11 100644
--- a/libs/fs/Platform/packages.config
+++ b/libs/fs/Platform/packages.config
@@ -1,4 +1,4 @@
-﻿<?xml version="1.0" encoding="utf-8"?>
-<packages>
-  <package id="Newtonsoft.Json" version="6.0.6" targetFramework="net40" />
+﻿<?xml version="1.0" encoding="utf-8"?>
+<packages>
+  <package id="Newtonsoft.Json" version="6.0.6" targetFramework="net40" />
</packages>
\ No newline at end of file
diff --git a/miTLS_icla.txt b/miTLS_icla.txt
index 9cd572e..706a27e 100644
--- a/miTLS_icla.txt
+++ b/miTLS_icla.txt
@@ -1,159 +1,159 @@
-                         INRIA and Microsoft
-     Individual Contributor License Agreement ("Agreement") v1.0
-           http://www.mitls.org/licenses/miTLS_icla.txt
-
-Thank you for your interest in the miTLS project, owned and managed by
-the Institut National de Recherche en Informatique et Automatique
-("INRIA") and Microsoft Corporation ("Microsoft"), together "Project
-Owners". In order to clarify the intellectual property license granted
-with Contributions from any person or entity, the Project Owners must
-have a Contributor License Agreement ("CLA") on file that has been
-signed by each Contributor, indicating agreement to the license terms
-below. This license is for your protection as a Contributor as well as
-the protection of the project, the Project Owners, and its users; it
-does not change your rights to use your own Contributions for any
-other purpose. If you have not already done so, please complete and
-sign, then scan and email a pdf file of this Agreement to
-legal@mitls.org. If necessary, send an original signed Agreement to
-Centre de Recherche Commun INRIA-Microsoft Research, Campus de l'ecole
-polytechnique, batiment Alan Turing, 1 rue Honore d'Estienne d'Orves,
-91120 Palaiseau France. Please read this document carefully before
-signing and keep a copy for your records.
-
-  Full name :_________________________________________________________________
-  (optional) Public name:_____________________________________________________
-  Mailing Address:____________________________________________________________
-                  ____________________________________________________________
-  Country:____________________________________________________________________
-  Telephone:__________________________________________________________________
-  E-Mail:_____________________________________________________________________
-
-You accept and agree to the following terms and conditions for Your
-present and future Contributions submitted to the Project Owners. In
-return, the Project Owners shall not use Your Contributions in a way
-that is contrary to the public benefit. Except for the license granted
-herein to the Project Owners and recipients of software distributed
-by the the Project Owners, You reserve all right, title, and interest in
-and to Your Contributions.
-
-1. Definitions. "You" (or "Your") shall mean the copyright owner or
-legal entity authorized by the copyright owner that is making this
-Agreement with the Project Owners. For legal entities, the entity
-making a Contribution and all other entities that control, are
-controlled by, or are under common control with that entity are
-considered to be a single Contributor. For the purposes of this
-definition, "control" means (i) the power, direct or indirect, to
-cause the direction or management of such entity, whether by contract
-or otherwise, or (ii) ownership of fifty percent (50%) or more of the
-outstanding shares, or (iii) beneficial ownership of such entity.
-
-"Contribution" shall mean any original work of authorship, including
-any modifications or additions to an existing work, that is
-intentionally submitted by You to the Project Owners for inclusion
-in, or documentation of, any of the products owned or managed by the
-the Project Owners (the "Work"). For the purposes of this definition,
-"submitted" means any form of electronic, verbal, or written
-communication sent to the Project Owners or its representatives,
-including but not limited to communication on electronic mailing
-lists, source code control systems, and issue tracking systems that
-are managed by, or on behalf of, the Project Owners for the purpose
-of discussing and improving the Work, but excluding communication that
-is conspicuously marked or otherwise designated in writing by You as
-"Not a Contribution."
-
-2. Grant of Copyright License. Subject to the terms and conditions of
-this Agreement, You hereby grant to the Project Owners and to
-recipients of software distributed by the Project Owners a perpetual,
-worldwide, non-exclusive, no-charge, royalty-free, irrevocable
-copyright license to reproduce, prepare derivative works of, publicly
-display, publicly perform, sublicense, and distribute Your
-Contributions and such derivative works.
-
-3. Grant of Patent License. Subject to the terms and conditions of
-this Agreement, You hereby grant to the Project Owners and to
-recipients of software distributed by the Project Owners a perpetual,
-worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except
-as stated in this section) patent license to make, have made, use,
-offer to sell, sell, import, and otherwise transfer the Work, where
-such license applies only to those patent claims licensable by You
-that are necessarily infringed by Your Contribution(s) alone or by
-combination of Your Contribution(s) with the Work to which such
-Contribution(s) was submitted. If any entity institutes patent
-litigation against You or any other entity (including a cross-claim or
-counterclaim in a lawsuit) alleging that your Contribution, or the
-Work to which you have contributed, constitutes direct or contributory
-patent infringement, then any patent licenses granted to that entity
-under this Agreement for that Contribution or Work shall terminate as
-of the date such litigation is filed.
-
-4. You represent that you are legally entitled to grant the above
-license. If your employer(s) has rights to intellectual property that
-you create that includes your Contributions, you represent that you
-have received permission to make Contributions on behalf of that
-employer, that your employer has waived such rights for your
-Contributions to the Project Owners, or that your employer has
-executed a separate Corporate CLA with the Project Owners.
-
-5. You represent that each of Your Contributions is Your original
-creation (see section 7 for submissions on behalf of others). You
-represent that Your Contribution submissions include complete details
-of any third-party license or other restriction (including, but not
-limited to, related patents and trademarks) of which you are
-personally aware and which are associated with any part of Your
-Contributions.
-
-6. You are not expected to provide support for Your Contributions,
-except to the extent You desire to provide support. You may provide
-support for free, for a fee, or not at all. Unless required by
-applicable law or agreed to in writing, You provide Your Contributions
-on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
-either express or implied, including, without limitation, any
-warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY,
-or FITNESS FOR A PARTICULAR PURPOSE.
-
-7. Should You wish to submit work that is not Your original creation,
-You may submit it to the Project Owners separately from any
-Contribution, identifying the complete details of its source and of
-any license or other restriction (including, but not limited to,
-related patents, trademarks, and license agreements) of which you are
-personally aware, and conspicuously marking the work as "Submitted on
-behalf of a third-party: [named here]".
-
-8. You agree to notify the Project Owners of any facts or
-circumstances of which you become aware that would make these
-representations inaccurate in any respect.
-
-Please sign: _______________________________________ Date: ______________________
-
-
-
-In addition to Your signature above, please initial one of the boxes below:
-
-___ I am employed by someone else, and per Section 4 above, my
-employer, by signing below, agrees to be a party to this Agreement,
-and the defined term "You" includes my employer.
-
-Employer Name (Individual or Company): ______________________________________
-Signature: _________________________________________
-By: _________________________________________
-Title: _________________________________________
-Date: _________________________________________
-
-___ I am employed by someone else, and my employer, by signing below,
-waives any rights it may have to my Submissions by virtue of my having
-created it during the term of my employment (including by virtue of
-any contract with my employer). If signed below, the defined term
-"You" does not include my employer.
-
-Employer Name (Individual or Company): ______________________________________
-Signature: _________________________________________
-By: _________________________________________
-Title: _________________________________________
-Date: _________________________________________
-
-___ I am not employed by anyone (other than myself) and have sole
-rights to my Submissions.
-
-If you have multiple employers, please attach a signature page for
-each of the employers.
-
+                         INRIA and Microsoft
+     Individual Contributor License Agreement ("Agreement") v1.0
+           http://www.mitls.org/licenses/miTLS_icla.txt
+
+Thank you for your interest in the miTLS project, owned and managed by
+the Institut National de Recherche en Informatique et Automatique
+("INRIA") and Microsoft Corporation ("Microsoft"), together "Project
+Owners". In order to clarify the intellectual property license granted
+with Contributions from any person or entity, the Project Owners must
+have a Contributor License Agreement ("CLA") on file that has been
+signed by each Contributor, indicating agreement to the license terms
+below. This license is for your protection as a Contributor as well as
+the protection of the project, the Project Owners, and its users; it
+does not change your rights to use your own Contributions for any
+other purpose. If you have not already done so, please complete and
+sign, then scan and email a pdf file of this Agreement to
+legal@mitls.org. If necessary, send an original signed Agreement to
+Centre de Recherche Commun INRIA-Microsoft Research, Campus de l'ecole
+polytechnique, batiment Alan Turing, 1 rue Honore d'Estienne d'Orves,
+91120 Palaiseau France. Please read this document carefully before
+signing and keep a copy for your records.
+
+  Full name :_________________________________________________________________
+  (optional) Public name:_____________________________________________________
+  Mailing Address:____________________________________________________________
+                  ____________________________________________________________
+  Country:____________________________________________________________________
+  Telephone:__________________________________________________________________
+  E-Mail:_____________________________________________________________________
+
+You accept and agree to the following terms and conditions for Your
+present and future Contributions submitted to the Project Owners. In
+return, the Project Owners shall not use Your Contributions in a way
+that is contrary to the public benefit. Except for the license granted
+herein to the Project Owners and recipients of software distributed
+by the the Project Owners, You reserve all right, title, and interest in
+and to Your Contributions.
+
+1. Definitions. "You" (or "Your") shall mean the copyright owner or
+legal entity authorized by the copyright owner that is making this
+Agreement with the Project Owners. For legal entities, the entity
+making a Contribution and all other entities that control, are
+controlled by, or are under common control with that entity are
+considered to be a single Contributor. For the purposes of this
+definition, "control" means (i) the power, direct or indirect, to
+cause the direction or management of such entity, whether by contract
+or otherwise, or (ii) ownership of fifty percent (50%) or more of the
+outstanding shares, or (iii) beneficial ownership of such entity.
+
+"Contribution" shall mean any original work of authorship, including
+any modifications or additions to an existing work, that is
+intentionally submitted by You to the Project Owners for inclusion
+in, or documentation of, any of the products owned or managed by the
+the Project Owners (the "Work"). For the purposes of this definition,
+"submitted" means any form of electronic, verbal, or written
+communication sent to the Project Owners or its representatives,
+including but not limited to communication on electronic mailing
+lists, source code control systems, and issue tracking systems that
+are managed by, or on behalf of, the Project Owners for the purpose
+of discussing and improving the Work, but excluding communication that
+is conspicuously marked or otherwise designated in writing by You as
+"Not a Contribution."
+
+2. Grant of Copyright License. Subject to the terms and conditions of
+this Agreement, You hereby grant to the Project Owners and to
+recipients of software distributed by the Project Owners a perpetual,
+worldwide, non-exclusive, no-charge, royalty-free, irrevocable
+copyright license to reproduce, prepare derivative works of, publicly
+display, publicly perform, sublicense, and distribute Your
+Contributions and such derivative works.
+
+3. Grant of Patent License. Subject to the terms and conditions of
+this Agreement, You hereby grant to the Project Owners and to
+recipients of software distributed by the Project Owners a perpetual,
+worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except
+as stated in this section) patent license to make, have made, use,
+offer to sell, sell, import, and otherwise transfer the Work, where
+such license applies only to those patent claims licensable by You
+that are necessarily infringed by Your Contribution(s) alone or by
+combination of Your Contribution(s) with the Work to which such
+Contribution(s) was submitted. If any entity institutes patent
+litigation against You or any other entity (including a cross-claim or
+counterclaim in a lawsuit) alleging that your Contribution, or the
+Work to which you have contributed, constitutes direct or contributory
+patent infringement, then any patent licenses granted to that entity
+under this Agreement for that Contribution or Work shall terminate as
+of the date such litigation is filed.
+
+4. You represent that you are legally entitled to grant the above
+license. If your employer(s) has rights to intellectual property that
+you create that includes your Contributions, you represent that you
+have received permission to make Contributions on behalf of that
+employer, that your employer has waived such rights for your
+Contributions to the Project Owners, or that your employer has
+executed a separate Corporate CLA with the Project Owners.
+
+5. You represent that each of Your Contributions is Your original
+creation (see section 7 for submissions on behalf of others). You
+represent that Your Contribution submissions include complete details
+of any third-party license or other restriction (including, but not
+limited to, related patents and trademarks) of which you are
+personally aware and which are associated with any part of Your
+Contributions.
+
+6. You are not expected to provide support for Your Contributions,
+except to the extent You desire to provide support. You may provide
+support for free, for a fee, or not at all. Unless required by
+applicable law or agreed to in writing, You provide Your Contributions
+on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+either express or implied, including, without limitation, any
+warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY,
+or FITNESS FOR A PARTICULAR PURPOSE.
+
+7. Should You wish to submit work that is not Your original creation,
+You may submit it to the Project Owners separately from any
+Contribution, identifying the complete details of its source and of
+any license or other restriction (including, but not limited to,
+related patents, trademarks, and license agreements) of which you are
+personally aware, and conspicuously marking the work as "Submitted on
+behalf of a third-party: [named here]".
+
+8. You agree to notify the Project Owners of any facts or
+circumstances of which you become aware that would make these
+representations inaccurate in any respect.
+
+Please sign: _______________________________________ Date: ______________________
+
+
+
+In addition to Your signature above, please initial one of the boxes below: 
+
+___ I am employed by someone else, and per Section 4 above, my
+employer, by signing below, agrees to be a party to this Agreement,
+and the defined term "You" includes my employer.
+
+Employer Name (Individual or Company): ______________________________________ 
+Signature: _________________________________________
+By: _________________________________________
+Title: _________________________________________ 
+Date: _________________________________________ 
+
+___ I am employed by someone else, and my employer, by signing below,
+waives any rights it may have to my Submissions by virtue of my having
+created it during the term of my employment (including by virtue of
+any contract with my employer). If signed below, the defined term
+"You" does not include my employer.
+
+Employer Name (Individual or Company): ______________________________________ 
+Signature: _________________________________________
+By: _________________________________________
+Title: _________________________________________ 
+Date: _________________________________________
+
+___ I am not employed by anyone (other than myself) and have sole
+rights to my Submissions.
+
+If you have multiple employers, please attach a signature page for
+each of the employers.
+
diff --git a/scripts/anonymize b/scripts/anonymize
index ab94000..94da64d 100644
--- a/scripts/anonymize
+++ b/scripts/anonymize
@@ -1,255 +1,255 @@
-#! /usr/bin/env python2
-
-import sys, os, re, codecs, StringIO as sio
-
-# --------------------------------------------------------------------
-def _noexn(f):
-    try: f()
-    except: pass
-
-# --------------------------------------------------------------------
-class Object(object):
-    def __init__(self, **kw):
-        self.__dict__.update(kw)
-
-# --------------------------------------------------------------------
-MODE_FULL    = 0x00
-MODE_RELEASE = 0x01
-
-AKWS = ['AP', 'CF', 'KB', 'MK', 'PYS', 'SZ', 'BB']
-
-# --------------------------------------------------------------------
-def parser(mode):
-    import pyparsing as p
-
-    def internal_comment(comment):
-        if mode.mode == MODE_FULL:
-            return comment.strip()[0:1] != '@'
-        if mode.mode == MODE_RELEASE:
-            m = re.search(r'^\s*(\w+?):*\b', comment)
-            return \
-                m is not None and \
-                    (m.group(1) in ['FIXME', 'TODO'] \
-                         or m.group(1) in mode.data)
-        return False
-
-    ml_comments = p.Regex(r'\(\*(?:[^*]*\*+)+?\)')
-    ss_comments = p.Regex(r'//.*')
-    ml_strings  = p.Regex(r'"(?:[^"\n\r\\]|(?:"")|(?:\\x[0-9a-fA-F]+)|(?:\\.))*"')
-
-    def ml_comments_action(_s, _loc, tk):
-        return [] if internal_comment(tk[0][2:-2]) else tk
-    ml_comments.setParseAction(ml_comments_action)
-
-    def ss_comments_action(_s, _loc, tk):
-        return [] if internal_comment(tk[0][2:]) else tk
-    ss_comments.setParseAction(ss_comments_action)
-
-    return ml_comments | ss_comments | ml_strings
-
-# --------------------------------------------------------------------
-def filter_hashes(input, symbols):
-    hif    = re.compile(r'^\s*#\s*if\s+(\w+)\b')
-    helse  = re.compile(r'^\s*#\s*else\b')
-    hend   = re.compile(r'^\s*#\s*endif\b')
-    hashes = []
-    output = []
-
-    class Mode(object):
-        MODE_OF_KIND = dict(I = None, U = False, D = True)
-
-        def ofname(name):
-            dfl  = 'I' if re.search('^__.+__$', name) else 'U'
-            kind = symbols.get(name, dfl)
-            return Mode.MODE_OF_KIND[kind]
-        ofname = staticmethod(ofname)
-
-        def flip(mode):
-            return None if mode is None else (not mode)
-        flip = staticmethod(flip)
-
-        def inprint(mode):
-            return mode in (None, True)
-        inprint = staticmethod(inprint)
-
-    for line in input:
-        m = None
-        for i, r in enumerate([hif, helse, hend]):
-            m = re.search(r, line)
-            if m is not None: break
-
-        if m is not None:
-            if i == 0:
-                hashes.append(Object(
-                        name = m.group(1),
-                        keep = Mode.ofname(m.group(1))))
-                if hashes[-1].keep is None:
-                    output.append(line)
-
-            elif i == 1:
-                if hashes:
-                    hashes[-1].keep = Mode.flip(hashes[-1].keep)
-                if hashes[-1].keep is None:
-                    output.append(line)
-
-            elif i == 2:
-                if hashes:
-                    if hashes[-1].keep is None:
-                        output.append(line)
-                    hashes.pop()
-
-        else:
-            if all([Mode.inprint(x.keep) for x in hashes]):
-                output.append(line)
-
-    return output
-
-# --------------------------------------------------------------------
-def _options(args):
-    from optparse import OptionParser
-
-    modes  = 'full|release[:kw1,...,kwn]'
-    parser = OptionParser(usage = '%prog <options> [filenames...]')
-
-    def osymbol(option, opt, value, parser, kind):
-         parser.values \
-             .ensure_value(option.dest, dict()) \
-             [value] = kind
-
-    parser.add_option("-B", None,
-                      action  = "store_false",
-                      dest    = "backup",
-                      help    = "do NOT create a backup file",
-                      default = True)
-    parser.add_option("-c", None,
-                      dest    = "header",
-                      help    = "add header from HEADER",
-                      metavar = "HEADER")
-    parser.add_option("-m", None,
-                      dest    = "mode",
-                      help    = "set anonymisation mode [%s]" % (modes,),
-                      default = 'full',
-                      metavar = "MODE")
-    defhelp = dict(
-        D = 'define',
-        U = 'undefine',
-        I = 'include (keep)'
-    )
-    for x in ("D", "U", "I"):
-        parser.add_option("-%s" % (x,), None,
-                          dest          = "symbols",
-                          help          = "%s symbol SYMBOL (implies -P)" % (defhelp[x],),
-                          action        = "callback",
-                          callback      = osymbol,
-                          callback_args = (x,),
-                          type          = str,
-                          metavar       = "SYMBOL")
-    parser.add_option("-P", None,
-                      action  = 'store_true',
-                      dest    = "preprocess",
-                      help    = "preprocess file for #symbols",
-                      default = False)
-    parser.add_option("-r", None,
-                      dest    = "rename",
-                      help    = "rename output file using given pattern",
-                      metavar = "PATTERN",
-                      default = None)
-    parser.add_option("-o", None,
-                      dest    = "output",
-                      help    = "output directory",
-                      metavar = "OUTPUT",
-                      default = None)
-
-    (options, args) = parser.parse_args()
-
-    if options.mode == 'full':
-        options.mode = Object(mode = MODE_FULL, data = None)
-    elif options.mode.startswith('release'):
-        if ':' in options.mode:
-            kws = ''.join(options.mode.split(':', 1)[1:]).split(',')
-            kws = [x.strip() for x in kws]
-            kws = [x for x in kws if x]
-        else:
-            kws = AKWS[:]
-        options.mode = Object(mode = MODE_RELEASE, data = set(kws))
-    else:
-        parser.error('invalid mode: %s' % (options.mode,))
-
-    if options.symbols is not None:
-        options.preprocess = True
-    else:
-        options.symbols = dict()
-
-    return (options, args)
-
-# --------------------------------------------------------------------
-def _read_file(filename):
-    contents = open(filename, 'rb').read()
-
-    if contents.startswith(codecs.BOM_UTF8):
-        return unicode(contents[len(codecs.BOM_UTF8):], 'utf-8')
-    return unicode(contents, 'utf-8')
-
-# --------------------------------------------------------------------
-CRLN = '\r\n'
-
-def _process_file(filename, options):
-    output = parser(options.mode).transformString(_read_file(filename))
-    output = [x.rstrip() for x in output.splitlines()]
-
-    if options.preprocess:
-        output = filter_hashes(output, options.symbols.copy())
-
-    output = CRLN.join(output) + CRLN
-    output = re.sub('(?:\r\n){3,}', 2 * CRLN, output)
-    output = re.sub('(?:\r\n)+$', CRLN, output)
-    output = re.sub('^(?:\r\n)*', '', output)
-
-    if options.header:
-        output = CRLN.join(options.header.splitlines()) + 2 * CRLN + output
-
-    dirname , basename = os.path.split(filename)
-    basename, ext      = os.path.splitext(basename)
-
-    if options.rename is None:
-        outname = basename
-    else:
-        outname = options.rename.replace('%', basename)
-    outname = outname + ext
-
-    if options.output is None:
-        outname = os.path.join(dirname, outname)
-    else:
-        outname = os.path.join(options.output, outname)
-
-    if options.backup:
-        if os.path.exists(outname + '~'):
-            os.unlink(outname + '~')
-        if os.path.exists(outname):
-            os.rename(outname, outname + '~')
-    else:
-        _noexn(lambda : os.unlink(outname))
-
-    try:
-        with codecs.open(outname, 'w', 'utf-8') as ostream:
-            ostream.write(output)
-    except:
-        _noexn(lambda : os.unlink(outname))
-        raise
-
-# --------------------------------------------------------------------
-def _main():
-    options, filenames = _options(sys.argv[:1])
-
-    if options.header:
-        options.header = open(options.header, 'r').read().splitlines()
-        options.header = [' * ' + x for x in options.header]
-        options.header = ['(*'] + options.header + [' *)']
-        options.header = CRLN.join(options.header)
-
-    for filename in filenames:
-        _process_file(filename, options)
-
-# --------------------------------------------------------------------
-if __name__ == '__main__':
-    _main()
+#! /usr/bin/env python2
+
+import sys, os, re, codecs, StringIO as sio
+
+# --------------------------------------------------------------------
+def _noexn(f):
+    try: f()
+    except: pass
+
+# --------------------------------------------------------------------
+class Object(object):
+    def __init__(self, **kw):
+        self.__dict__.update(kw)
+
+# --------------------------------------------------------------------
+MODE_FULL    = 0x00
+MODE_RELEASE = 0x01
+
+AKWS = ['AP', 'CF', 'KB', 'MK', 'PYS', 'SZ', 'BB']
+
+# --------------------------------------------------------------------
+def parser(mode):
+    import pyparsing as p
+
+    def internal_comment(comment):
+        if mode.mode == MODE_FULL:
+            return comment.strip()[0:1] != '@'
+        if mode.mode == MODE_RELEASE:
+            m = re.search(r'^\s*(\w+?):*\b', comment)
+            return \
+                m is not None and \
+                    (m.group(1) in ['FIXME', 'TODO'] \
+                         or m.group(1) in mode.data)
+        return False
+
+    ml_comments = p.Regex(r'\(\*(?:[^*]*\*+)+?\)')
+    ss_comments = p.Regex(r'//.*')
+    ml_strings  = p.Regex(r'"(?:[^"\n\r\\]|(?:"")|(?:\\x[0-9a-fA-F]+)|(?:\\.))*"')
+
+    def ml_comments_action(_s, _loc, tk):
+        return [] if internal_comment(tk[0][2:-2]) else tk
+    ml_comments.setParseAction(ml_comments_action)
+
+    def ss_comments_action(_s, _loc, tk):
+        return [] if internal_comment(tk[0][2:]) else tk
+    ss_comments.setParseAction(ss_comments_action)
+
+    return ml_comments | ss_comments | ml_strings
+
+# --------------------------------------------------------------------
+def filter_hashes(input, symbols):
+    hif    = re.compile(r'^\s*#\s*if\s+(\w+)\b')
+    helse  = re.compile(r'^\s*#\s*else\b')
+    hend   = re.compile(r'^\s*#\s*endif\b')
+    hashes = []
+    output = []
+
+    class Mode(object):
+        MODE_OF_KIND = dict(I = None, U = False, D = True)
+
+        def ofname(name):
+            dfl  = 'I' if re.search('^__.+__$', name) else 'U'
+            kind = symbols.get(name, dfl)
+            return Mode.MODE_OF_KIND[kind]
+        ofname = staticmethod(ofname)
+
+        def flip(mode):
+            return None if mode is None else (not mode)
+        flip = staticmethod(flip)
+
+        def inprint(mode):
+            return mode in (None, True)
+        inprint = staticmethod(inprint)
+
+    for line in input:
+        m = None
+        for i, r in enumerate([hif, helse, hend]):
+            m = re.search(r, line)
+            if m is not None: break
+
+        if m is not None:
+            if i == 0:
+                hashes.append(Object(
+                        name = m.group(1),
+                        keep = Mode.ofname(m.group(1))))
+                if hashes[-1].keep is None:
+                    output.append(line)
+
+            elif i == 1:
+                if hashes:
+                    hashes[-1].keep = Mode.flip(hashes[-1].keep)
+                if hashes[-1].keep is None:
+                    output.append(line)
+
+            elif i == 2:
+                if hashes:
+                    if hashes[-1].keep is None:
+                        output.append(line)
+                    hashes.pop()
+
+        else:
+            if all([Mode.inprint(x.keep) for x in hashes]):
+                output.append(line)
+
+    return output
+
+# --------------------------------------------------------------------
+def _options(args):
+    from optparse import OptionParser
+
+    modes  = 'full|release[:kw1,...,kwn]'
+    parser = OptionParser(usage = '%prog <options> [filenames...]')
+
+    def osymbol(option, opt, value, parser, kind):
+         parser.values \
+             .ensure_value(option.dest, dict()) \
+             [value] = kind
+
+    parser.add_option("-B", None,
+                      action  = "store_false",
+                      dest    = "backup",
+                      help    = "do NOT create a backup file",
+                      default = True)
+    parser.add_option("-c", None,
+                      dest    = "header",
+                      help    = "add header from HEADER",
+                      metavar = "HEADER")
+    parser.add_option("-m", None,
+                      dest    = "mode",
+                      help    = "set anonymisation mode [%s]" % (modes,),
+                      default = 'full',
+                      metavar = "MODE")
+    defhelp = dict(
+        D = 'define',
+        U = 'undefine',
+        I = 'include (keep)'
+    )
+    for x in ("D", "U", "I"):
+        parser.add_option("-%s" % (x,), None,
+                          dest          = "symbols",
+                          help          = "%s symbol SYMBOL (implies -P)" % (defhelp[x],),
+                          action        = "callback",
+                          callback      = osymbol,
+                          callback_args = (x,),
+                          type          = str,
+                          metavar       = "SYMBOL")
+    parser.add_option("-P", None,
+                      action  = 'store_true',
+                      dest    = "preprocess",
+                      help    = "preprocess file for #symbols",
+                      default = False)
+    parser.add_option("-r", None,
+                      dest    = "rename",
+                      help    = "rename output file using given pattern",
+                      metavar = "PATTERN",
+                      default = None)
+    parser.add_option("-o", None,
+                      dest    = "output",
+                      help    = "output directory",
+                      metavar = "OUTPUT",
+                      default = None)
+
+    (options, args) = parser.parse_args()
+
+    if options.mode == 'full':
+        options.mode = Object(mode = MODE_FULL, data = None)
+    elif options.mode.startswith('release'):
+        if ':' in options.mode:
+            kws = ''.join(options.mode.split(':', 1)[1:]).split(',')
+            kws = [x.strip() for x in kws]
+            kws = [x for x in kws if x]
+        else:
+            kws = AKWS[:]
+        options.mode = Object(mode = MODE_RELEASE, data = set(kws))
+    else:
+        parser.error('invalid mode: %s' % (options.mode,))
+
+    if options.symbols is not None:
+        options.preprocess = True
+    else:
+        options.symbols = dict()
+
+    return (options, args)
+
+# --------------------------------------------------------------------
+def _read_file(filename):
+    contents = open(filename, 'rb').read()
+
+    if contents.startswith(codecs.BOM_UTF8):
+        return unicode(contents[len(codecs.BOM_UTF8):], 'utf-8')
+    return unicode(contents, 'utf-8')
+
+# --------------------------------------------------------------------
+CRLN = '\r\n'
+
+def _process_file(filename, options):
+    output = parser(options.mode).transformString(_read_file(filename))
+    output = [x.rstrip() for x in output.splitlines()]
+
+    if options.preprocess:
+        output = filter_hashes(output, options.symbols.copy())
+
+    output = CRLN.join(output) + CRLN
+    output = re.sub('(?:\r\n){3,}', 2 * CRLN, output)
+    output = re.sub('(?:\r\n)+$', CRLN, output)
+    output = re.sub('^(?:\r\n)*', '', output)
+
+    if options.header:
+        output = CRLN.join(options.header.splitlines()) + 2 * CRLN + output
+
+    dirname , basename = os.path.split(filename)
+    basename, ext      = os.path.splitext(basename)
+
+    if options.rename is None:
+        outname = basename
+    else:
+        outname = options.rename.replace('%', basename)
+    outname = outname + ext
+
+    if options.output is None:
+        outname = os.path.join(dirname, outname)
+    else:
+        outname = os.path.join(options.output, outname)
+
+    if options.backup:
+        if os.path.exists(outname + '~'):
+            os.unlink(outname + '~')
+        if os.path.exists(outname):
+            os.rename(outname, outname + '~')
+    else:
+        _noexn(lambda : os.unlink(outname))
+
+    try:
+        with codecs.open(outname, 'w', 'utf-8') as ostream:
+            ostream.write(output)
+    except:
+        _noexn(lambda : os.unlink(outname))
+        raise
+
+# --------------------------------------------------------------------
+def _main():
+    options, filenames = _options(sys.argv[:1])
+
+    if options.header:
+        options.header = open(options.header, 'r').read().splitlines()
+        options.header = [' * ' + x for x in options.header]
+        options.header = ['(*'] + options.header + [' *)']
+        options.header = CRLN.join(options.header)
+
+    for filename in filenames:
+        _process_file(filename, options)
+
+# --------------------------------------------------------------------
+if __name__ == '__main__':
+    _main()
diff --git a/scripts/distribution b/scripts/distribution
index fcd21ab..50827ff 100644
--- a/scripts/distribution
+++ b/scripts/distribution
@@ -1,212 +1,212 @@
-#! /usr/bin/env python
-
-# --------------------------------------------------------------------
-import sys, os, re, codecs, itertools as it, subprocess as sp
-import glob, fnmatch, xml.etree.ElementTree as etree
-import errno, shutil
-
-MSBUILD = 'http://schemas.microsoft.com/developer/msbuild/2003'
-
-# --------------------------------------------------------------------
-MYROOT  = os.path.dirname(__file__)
-INSTALL = os.path.join(MYROOT, 'install-sh')
-
-# --------------------------------------------------------------------
-class Object(object):
-    def __init__(self, **kw):
-        self.__dict__.update(kw)
-
-# --------------------------------------------------------------------
-def _read_file(filename):
-    contents = open(filename, 'rb').read()
-
-    if contents.startswith(codecs.BOM_UTF8):
-        return unicode(contents[len(codecs.BOM_UTF8):], 'utf-8')
-    return unicode(contents, 'utf-8')
-
-# --------------------------------------------------------------------
-def _error(message):
-    print >>sys.stderr, "%s: %s" % (sys.argv[0], message)
-    exit(1)
-
-# --------------------------------------------------------------------
-def install_dir(distdir, x):
-    fulldir = os.path.join(distdir, x)
-
-    print >>sys.stderr, "[D] [%s]" % (x,)
-
-    try:
-        os.makedirs(fulldir)
-    except OSError, e:
-        if e.errno != errno.EEXIST:
-            raise
-
-    os.chmod(fulldir, 0755)
-
-# --------------------------------------------------------------------
-def install_files(distdir, dir, files):
-    print >>sys.stderr, \
-        "[F] [%s] <- %s" % \
-        (dir, " ".join([x[0] for x in files]))
-
-    for (f, (c, b)) in files:
-        fp = os.path.join(dir, f)
-
-        if c is None:
-            shutil.copyfile(fp, os.path.join(distdir, fp))
-        else:
-            print >>sys.stderr, "*** specializing contents of %s" % (fp,)
-            with open(os.path.join(distdir, fp), 'wb') as output:
-                output.write(c)
-
-        os.chmod(os.path.join(distdir, fp), 0755 if b else 0644)
-
-# --------------------------------------------------------------------
-def _find(dirname, glob):
-    for dirpath, dirnames, filenames in os.walk(dirname):
-        for filename in fnmatch.filter(filenames, glob):
-            yield os.path.join(dirpath, filename)
-
-# --------------------------------------------------------------------
-def _proj(filename):
-    with open(filename, 'r') as stream:
-        doc = etree.parse(stream)
-
-    files = doc.findall('.//{0}ItemGroup/*'.format('{%s}' % (MSBUILD,)))
-    files = [x.get('Include') for x in files if x.get('Include') is not None]
-    files = [os.path.join(*x.split('\\')) for x in files]
-    files = [os.path.join(os.path.dirname(filename), x) for x in files]
-    files = [x for x in files if os.path.isfile(x)]
-
-    return [filename] + files
-
-# --------------------------------------------------------------------
-RE_PROJECT = ur"""
-\s*Project                              # literal
-\(\"\{(?P<type>[0-9a-fA-F\-]*)\}\"\)    # <type>
-\s*=\s*                                 # literal
-\"(?P<name>\w*)\"                       # <name>
-\s*,\s*                                 # literal
-\"(?P<path>[\w:\\/\.]*)\"               # <path>
-\s*,\s*                                 # literal
-\"\{(?P<id>[0-9a-fA-F\-]*)\}\"          # <id>
-(?:.*)$
-"""
-
-RE_END_PROJECT = r'EndProject\b'
-
-def _vs(filename, projects):
-    soldir  = os.path.dirname(filename)
-    project = set(projects)
-    doc     = [x.rstrip() for x in _read_file(filename).splitlines()]
-    status  = Object(inproject = False)
-    vsprj   = dict()
-    uids    = set()
-    output  = []
-
-    for line in doc:
-        if status.inproject:
-            if status.inproject.accpt:
-                output.append(line)
-            if re.search('^EndProject(?:\b|$)', line):
-                status.inproject = False
-            continue
-
-        m = re.search(RE_PROJECT, line, re.VERBOSE)
-
-        if m is not None:
-            if status.inproject:
-                raise RuntimeError('VS: nested projects')
-
-            status.inproject = Object(
-                type  = m.group('type'),
-                name  = m.group('name'),
-                path  = os.path.join(soldir,os.path.join(*m.group('path').split('\\'))),
-                id    = m.group('id'),
-                accpt = m.group('name') in projects,
-            )
-
-            if status.inproject.accpt:
-                output.append(line)
-                vsprj[m.group('name')] = status.inproject
-                uids.add(m.group('id').lower())
-            continue
-
-        m = re.search('^\s*\{([0-9a-fA-F\-]*)\}\.', line)
-
-        if m is not None:
-            if m.group(1).lower() in uids:
-                output.append(line)
-        else:
-            output.append(line)
-
-    yield Object(path     = filename,
-                 contents = ('\r\n'.join(output)).encode('utf-8'))
-
-    for project in vsprj.itervalues():
-        for x in _proj(project.path):
-            yield x
-
-# --------------------------------------------------------------------
-def _expand(x):
-    vsm   = re.search(r'^vs:(.*?):(.*)$', x)
-    projm = re.search(r'^proj:(.*)', x)
-    findm = re.search(r'^find:(.*?):(.*$)$', x)
-    if vsm is not None:
-        return list(_vs(vsm.group(1), vsm.group(2).split(',')))
-    if projm is not None:
-        return list(_proj(projm.group(1)))
-    if findm is not None:
-        return list(_find(findm.group(1), findm.group(2)))
-    if not hasattr(glob, 'has_magic') or glob.has_magic(x):
-        return glob.glob(x)
-    return [x]
-
-# --------------------------------------------------------------------
-def _main():
-    if len(sys.argv)-1 != 2:
-        print >>sys.stderr, "Usage: %s [dist-dir] [MANIFEST]" % (sys.argv[0])
-        exit (1)
-
-    distdir  = sys.argv[1]
-    manifest = sys.argv[2]
-
-    def _to_xpath(x):
-        if isinstance(x, basestring):
-            x = Object(path = x, contents = None)
-        x.path = os.path.normpath(x.path)
-        return x
-
-    manifest = open(manifest, 'r').readlines()
-    manifest = [re.sub('#.*$', '', x).strip() for x in manifest]
-    manifest = [x for x in manifest if x]
-    manifest = list(it.chain(*[_expand(x) for x in manifest]))
-    manifest = [_to_xpath(x) for x in manifest]
-    noaccess = [x.path for x in manifest if not os.access(x.path, os.F_OK)]
-
-    if noaccess:
-        msg = 'cannot access the following MANIFEST files: %s'
-        _error(msg % ', '.join(noaccess))
-
-    bygroup = dict()
-
-    for x in manifest:
-        if os.path.isdir(x.path):
-            bygroup.setdefault(x.path, dict())
-        else:
-            (xdir, xbase) = os.path.split(x.path)
-            xexec = os.access(x.path, os.X_OK)
-            xdict = bygroup.setdefault(xdir, dict())
-            if xdict.get(xbase, None) is not None:
-                if xdict[xbase][0] is not None:
-                    if x.contents is not None:
-                        _error('two specialized contents for a single file')
-            xdict[xbase] = (x.contents, xexec)
-
-    for x, v in bygroup.iteritems():
-        install_dir(distdir, x)
-        install_files(distdir, x, v.items())
-
-# --------------------------------------------------------------------
-if __name__ == '__main__':
-    _main()
+#! /usr/bin/env python
+
+# --------------------------------------------------------------------
+import sys, os, re, codecs, itertools as it, subprocess as sp
+import glob, fnmatch, xml.etree.ElementTree as etree
+import errno, shutil
+
+MSBUILD = 'http://schemas.microsoft.com/developer/msbuild/2003'
+
+# --------------------------------------------------------------------
+MYROOT  = os.path.dirname(__file__)
+INSTALL = os.path.join(MYROOT, 'install-sh')
+
+# --------------------------------------------------------------------
+class Object(object):
+    def __init__(self, **kw):
+        self.__dict__.update(kw)
+
+# --------------------------------------------------------------------
+def _read_file(filename):
+    contents = open(filename, 'rb').read()
+
+    if contents.startswith(codecs.BOM_UTF8):
+        return unicode(contents[len(codecs.BOM_UTF8):], 'utf-8')
+    return unicode(contents, 'utf-8')
+
+# --------------------------------------------------------------------
+def _error(message):
+    print >>sys.stderr, "%s: %s" % (sys.argv[0], message)
+    exit(1)
+
+# --------------------------------------------------------------------
+def install_dir(distdir, x):
+    fulldir = os.path.join(distdir, x)
+
+    print >>sys.stderr, "[D] [%s]" % (x,)
+
+    try:
+        os.makedirs(fulldir)
+    except OSError, e:
+        if e.errno != errno.EEXIST:
+            raise
+
+    os.chmod(fulldir, 0755)
+
+# --------------------------------------------------------------------
+def install_files(distdir, dir, files):
+    print >>sys.stderr, \
+        "[F] [%s] <- %s" % \
+        (dir, " ".join([x[0] for x in files]))
+
+    for (f, (c, b)) in files:
+        fp = os.path.join(dir, f)
+
+        if c is None:
+            shutil.copyfile(fp, os.path.join(distdir, fp))
+        else:
+            print >>sys.stderr, "*** specializing contents of %s" % (fp,)
+            with open(os.path.join(distdir, fp), 'wb') as output:
+                output.write(c)
+
+        os.chmod(os.path.join(distdir, fp), 0755 if b else 0644)
+
+# --------------------------------------------------------------------
+def _find(dirname, glob):
+    for dirpath, dirnames, filenames in os.walk(dirname):
+        for filename in fnmatch.filter(filenames, glob):
+            yield os.path.join(dirpath, filename)
+
+# --------------------------------------------------------------------
+def _proj(filename):
+    with open(filename, 'r') as stream:
+        doc = etree.parse(stream)
+
+    files = doc.findall('.//{0}ItemGroup/*'.format('{%s}' % (MSBUILD,)))
+    files = [x.get('Include') for x in files if x.get('Include') is not None]
+    files = [os.path.join(*x.split('\\')) for x in files]
+    files = [os.path.join(os.path.dirname(filename), x) for x in files]
+    files = [x for x in files if os.path.isfile(x)]
+
+    return [filename] + files
+
+# --------------------------------------------------------------------
+RE_PROJECT = ur"""
+\s*Project                              # literal
+\(\"\{(?P<type>[0-9a-fA-F\-]*)\}\"\)    # <type>
+\s*=\s*                                 # literal
+\"(?P<name>\w*)\"                       # <name>
+\s*,\s*                                 # literal
+\"(?P<path>[\w:\\/\.]*)\"               # <path>
+\s*,\s*                                 # literal
+\"\{(?P<id>[0-9a-fA-F\-]*)\}\"          # <id>
+(?:.*)$
+"""
+
+RE_END_PROJECT = r'EndProject\b'
+
+def _vs(filename, projects):
+    soldir  = os.path.dirname(filename)
+    project = set(projects)
+    doc     = [x.rstrip() for x in _read_file(filename).splitlines()]
+    status  = Object(inproject = False)
+    vsprj   = dict()
+    uids    = set()
+    output  = []
+
+    for line in doc:
+        if status.inproject:
+            if status.inproject.accpt:
+                output.append(line)
+            if re.search('^EndProject(?:\b|$)', line):
+                status.inproject = False
+            continue
+
+        m = re.search(RE_PROJECT, line, re.VERBOSE)
+
+        if m is not None:
+            if status.inproject:
+                raise RuntimeError('VS: nested projects')
+
+            status.inproject = Object(
+                type  = m.group('type'),
+                name  = m.group('name'),
+                path  = os.path.join(soldir,os.path.join(*m.group('path').split('\\'))),
+                id    = m.group('id'),
+                accpt = m.group('name') in projects,
+            )
+
+            if status.inproject.accpt:
+                output.append(line)
+                vsprj[m.group('name')] = status.inproject
+                uids.add(m.group('id').lower())
+            continue
+
+        m = re.search('^\s*\{([0-9a-fA-F\-]*)\}\.', line)
+
+        if m is not None:
+            if m.group(1).lower() in uids:
+                output.append(line)
+        else:
+            output.append(line)
+
+    yield Object(path     = filename,
+                 contents = ('\r\n'.join(output)).encode('utf-8'))
+
+    for project in vsprj.itervalues():
+        for x in _proj(project.path):
+            yield x
+
+# --------------------------------------------------------------------
+def _expand(x):
+    vsm   = re.search(r'^vs:(.*?):(.*)$', x)
+    projm = re.search(r'^proj:(.*)', x)
+    findm = re.search(r'^find:(.*?):(.*$)$', x)
+    if vsm is not None:
+        return list(_vs(vsm.group(1), vsm.group(2).split(',')))
+    if projm is not None:
+        return list(_proj(projm.group(1)))
+    if findm is not None:
+        return list(_find(findm.group(1), findm.group(2)))
+    if not hasattr(glob, 'has_magic') or glob.has_magic(x):
+        return glob.glob(x)
+    return [x]
+
+# --------------------------------------------------------------------
+def _main():
+    if len(sys.argv)-1 != 2:
+        print >>sys.stderr, "Usage: %s [dist-dir] [MANIFEST]" % (sys.argv[0])
+        exit (1)
+
+    distdir  = sys.argv[1]
+    manifest = sys.argv[2]
+
+    def _to_xpath(x):
+        if isinstance(x, basestring):
+            x = Object(path = x, contents = None)
+        x.path = os.path.normpath(x.path)
+        return x
+
+    manifest = open(manifest, 'r').readlines()
+    manifest = [re.sub('#.*$', '', x).strip() for x in manifest]
+    manifest = [x for x in manifest if x]
+    manifest = list(it.chain(*[_expand(x) for x in manifest]))
+    manifest = [_to_xpath(x) for x in manifest]
+    noaccess = [x.path for x in manifest if not os.access(x.path, os.F_OK)]
+
+    if noaccess:
+        msg = 'cannot access the following MANIFEST files: %s'
+        _error(msg % ', '.join(noaccess))
+
+    bygroup = dict()
+
+    for x in manifest:
+        if os.path.isdir(x.path):
+            bygroup.setdefault(x.path, dict())
+        else:
+            (xdir, xbase) = os.path.split(x.path)
+            xexec = os.access(x.path, os.X_OK)
+            xdict = bygroup.setdefault(xdir, dict())
+            if xdict.get(xbase, None) is not None:
+                if xdict[xbase][0] is not None:
+                    if x.contents is not None:
+                        _error('two specialized contents for a single file')
+            xdict[xbase] = (x.contents, xexec)
+
+    for x, v in bygroup.iteritems():
+        install_dir(distdir, x)
+        install_files(distdir, x, v.items())
+
+# --------------------------------------------------------------------
+if __name__ == '__main__':
+    _main()
diff --git a/scripts/makegen b/scripts/makegen
index e6d12dd..d02ced7 100644
--- a/scripts/makegen
+++ b/scripts/makegen
@@ -1,54 +1,54 @@
-#! /usr/bin/env python
-
-# --------------------------------------------------------------------
-import sys, os, xml.etree.ElementTree as etree
-
-# --------------------------------------------------------------------
-MSBUILD = 'http://schemas.microsoft.com/developer/msbuild/2003'
-
-def _main():
-    from optparse import OptionParser
-
-    parser = OptionParser(usage = '%prog <options> [fsproj]')
-    parser.add_option("-o", None,
-                      dest    = "output",
-                      help    = "output makefile to FILE",
-                      metavar = "FILE")
-    parser.add_option("-r", None,
-                      dest   = "raw",
-                      action = 'store_true',
-                      help   = "RAW output")
-
-    (options, args) = parser.parse_args()
-
-    if len(args) != 1:
-        parser.print_usage(sys.stderr); exit(1)
-
-    with open(args[0], 'r') as stream:
-        doc = etree.parse(stream)
-
-    files = doc.findall('.//{0}ItemGroup/*'.format('{%s}' % (MSBUILD,)))
-    files = [x.get('Include') for x in files if x.get('Include') is not None]
-
-    srcfiles = [x for x in files if os.path.splitext(x)[1] in ('.fsi', '.fs')]
-    f7files  = [x for x in files if os.path.splitext(x)[1] in ('.fs7',)]
-
-    output = sys.stdout
-    try:
-        if options.output is not None:
-            output = open(options.output, 'w')
-
-        if options.raw:
-            print >>output, ' '.join(srcfiles + f7files)
-        else:
-            print >>output, 'src  += %s' % (' '.join(srcfiles),)
-            print >>output, 'src7 += %s' % (' '.join(f7files),)
-            print >>output, 'deps += '
-    finally:
-        if output is not sys.stdout:
-            output.close()
-        del output
-
-# --------------------------------------------------------------------
-if __name__ == '__main__':
-    _main()
+#! /usr/bin/env python
+
+# --------------------------------------------------------------------
+import sys, os, xml.etree.ElementTree as etree
+
+# --------------------------------------------------------------------
+MSBUILD = 'http://schemas.microsoft.com/developer/msbuild/2003'
+
+def _main():
+    from optparse import OptionParser
+
+    parser = OptionParser(usage = '%prog <options> [fsproj]')
+    parser.add_option("-o", None,
+                      dest    = "output",
+                      help    = "output makefile to FILE",
+                      metavar = "FILE")
+    parser.add_option("-r", None,
+                      dest   = "raw",
+                      action = 'store_true',
+                      help   = "RAW output")
+
+    (options, args) = parser.parse_args()
+
+    if len(args) != 1:
+        parser.print_usage(sys.stderr); exit(1)
+
+    with open(args[0], 'r') as stream:
+        doc = etree.parse(stream)
+
+    files = doc.findall('.//{0}ItemGroup/*'.format('{%s}' % (MSBUILD,)))
+    files = [x.get('Include') for x in files if x.get('Include') is not None]
+
+    srcfiles = [x for x in files if os.path.splitext(x)[1] in ('.fsi', '.fs')]
+    f7files  = [x for x in files if os.path.splitext(x)[1] in ('.fs7',)]
+
+    output = sys.stdout
+    try:
+        if options.output is not None:
+            output = open(options.output, 'w')
+
+        if options.raw:
+            print >>output, ' '.join(srcfiles + f7files)
+        else:
+            print >>output, 'src  += %s' % (' '.join(srcfiles),)
+            print >>output, 'src7 += %s' % (' '.join(f7files),)
+            print >>output, 'deps += '
+    finally:
+        if output is not sys.stdout:
+            output.close()
+        del output
+
+# --------------------------------------------------------------------
+if __name__ == '__main__':
+    _main()
diff --git a/scripts/pyparsing.py b/scripts/pyparsing.py
index d3d6700..149ccaf 100644
--- a/scripts/pyparsing.py
+++ b/scripts/pyparsing.py
@@ -1,3725 +1,3725 @@
-# module pyparsing.py
-#
-# Copyright (c) 2003-2011  Paul T. McGuire
-#
-# Permission is hereby granted, free of charge, to any person obtaining
-# a copy of this software and associated documentation files (the
-# "Software"), to deal in the Software without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Software, and to
-# permit persons to whom the Software is furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be
-# included in all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
-# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
-# CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
-# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
-# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-#
-#from __future__ import generators
-
-__doc__ = \
-"""
-pyparsing module - Classes and methods to define and execute parsing grammars
-
-The pyparsing module is an alternative approach to creating and executing simple grammars,
-vs. the traditional lex/yacc approach, or the use of regular expressions.  With pyparsing, you
-don't need to learn a new syntax for defining grammars or matching expressions - the parsing module
-provides a library of classes that you use to construct the grammar directly in Python.
-
-Here is a program to parse "Hello, World!" (or any greeting of the form C{"<salutation>, <addressee>!"})::
-
-    from pyparsing import Word, alphas
-
-    # define grammar of a greeting
-    greet = Word( alphas ) + "," + Word( alphas ) + "!"
-
-    hello = "Hello, World!"
-    print hello, "->", greet.parseString( hello )
-
-The program outputs the following::
-
-    Hello, World! -> ['Hello', ',', 'World', '!']
-
-The Python representation of the grammar is quite readable, owing to the self-explanatory
-class names, and the use of '+', '|' and '^' operators.
-
-The parsed results returned from C{parseString()} can be accessed as a nested list, a dictionary, or an
-object with named attributes.
-
-The pyparsing module handles some of the problems that are typically vexing when writing text parsers:
- - extra or missing whitespace (the above program will also handle "Hello,World!", "Hello  ,  World  !", etc.)
- - quoted strings
- - embedded comments
-"""
-
-__version__ = "1.5.7"
-__versionTime__ = "17 November 2012 16:18"
-__author__ = "Paul McGuire <ptmcg@users.sourceforge.net>"
-
-import string
-from weakref import ref as wkref
-import copy
-import sys
-import warnings
-import re
-import sre_constants
-#~ sys.stderr.write( "testing pyparsing module, version %s, %s\n" % (__version__,__versionTime__ ) )
-
-__all__ = [
-'And', 'CaselessKeyword', 'CaselessLiteral', 'CharsNotIn', 'Combine', 'Dict', 'Each', 'Empty',
-'FollowedBy', 'Forward', 'GoToColumn', 'Group', 'Keyword', 'LineEnd', 'LineStart', 'Literal',
-'MatchFirst', 'NoMatch', 'NotAny', 'OneOrMore', 'OnlyOnce', 'Optional', 'Or',
-'ParseBaseException', 'ParseElementEnhance', 'ParseException', 'ParseExpression', 'ParseFatalException',
-'ParseResults', 'ParseSyntaxException', 'ParserElement', 'QuotedString', 'RecursiveGrammarException',
-'Regex', 'SkipTo', 'StringEnd', 'StringStart', 'Suppress', 'Token', 'TokenConverter', 'Upcase',
-'White', 'Word', 'WordEnd', 'WordStart', 'ZeroOrMore',
-'alphanums', 'alphas', 'alphas8bit', 'anyCloseTag', 'anyOpenTag', 'cStyleComment', 'col',
-'commaSeparatedList', 'commonHTMLEntity', 'countedArray', 'cppStyleComment', 'dblQuotedString',
-'dblSlashComment', 'delimitedList', 'dictOf', 'downcaseTokens', 'empty', 'hexnums',
-'htmlComment', 'javaStyleComment', 'keepOriginalText', 'line', 'lineEnd', 'lineStart', 'lineno',
-'makeHTMLTags', 'makeXMLTags', 'matchOnlyAtCol', 'matchPreviousExpr', 'matchPreviousLiteral',
-'nestedExpr', 'nullDebugAction', 'nums', 'oneOf', 'opAssoc', 'operatorPrecedence', 'printables',
-'punc8bit', 'pythonStyleComment', 'quotedString', 'removeQuotes', 'replaceHTMLEntity',
-'replaceWith', 'restOfLine', 'sglQuotedString', 'srange', 'stringEnd',
-'stringStart', 'traceParseAction', 'unicodeString', 'upcaseTokens', 'withAttribute',
-'indentedBlock', 'originalTextFor', 'ungroup', 'infixNotation',
-]
-
-_MAX_INT = sys.maxint
-range = xrange
-set = lambda s : dict( [(c,0) for c in s] )
-
-def _ustr(obj):
-    """Drop-in replacement for str(obj) that tries to be Unicode friendly. It first tries
-       str(obj). If that fails with a UnicodeEncodeError, then it tries unicode(obj). It
-       then < returns the unicode object | encodes it with the default encoding | ... >.
-    """
-    if isinstance(obj,unicode):
-        return obj
-
-    try:
-        # If this works, then _ustr(obj) has the same behaviour as str(obj), so
-        # it won't break any existing code.
-        return str(obj)
-
-    except UnicodeEncodeError:
-        # The Python docs (http://docs.python.org/ref/customization.html#l2h-182)
-        # state that "The return value must be a string object". However, does a
-        # unicode object (being a subclass of basestring) count as a "string
-        # object"?
-        # If so, then return a unicode object:
-        return unicode(obj)
-        # Else encode it... but how? There are many choices... :)
-        # Replace unprintables with escape codes?
-        #return unicode(obj).encode(sys.getdefaultencoding(), 'backslashreplace_errors')
-        # Replace unprintables with question marks?
-        #return unicode(obj).encode(sys.getdefaultencoding(), 'replace')
-        # ...
-
-# build list of single arg builtins, tolerant of Python version, that can be used as parse actions
-singleArgBuiltins = []
-import __builtin__
-for fname in "sum len sorted reversed list tuple set any all min max".split():
-    try:
-        singleArgBuiltins.append(getattr(__builtin__,fname))
-    except AttributeError:
-        continue
-
-def _xml_escape(data):
-    """Escape &, <, >, ", ', etc. in a string of data."""
-
-    # ampersand must be replaced first
-    from_symbols = '&><"\''
-    to_symbols = ['&'+s+';' for s in "amp gt lt quot apos".split()]
-    for from_,to_ in zip(from_symbols, to_symbols):
-        data = data.replace(from_, to_)
-    return data
-
-class _Constants(object):
-    pass
-
-alphas     = string.ascii_lowercase + string.ascii_uppercase
-nums       = "0123456789"
-hexnums    = nums + "ABCDEFabcdef"
-alphanums  = alphas + nums
-_bslash    = chr(92)
-printables = "".join( [ c for c in string.printable if c not in string.whitespace ] )
-
-class ParseBaseException(Exception):
-    """base exception class for all parsing runtime exceptions"""
-    # Performance tuning: we construct a *lot* of these, so keep this
-    # constructor as small and fast as possible
-    def __init__( self, pstr, loc=0, msg=None, elem=None ):
-        self.loc = loc
-        if msg is None:
-            self.msg = pstr
-            self.pstr = ""
-        else:
-            self.msg = msg
-            self.pstr = pstr
-        self.parserElement = elem
-
-    def __getattr__( self, aname ):
-        """supported attributes by name are:
-            - lineno - returns the line number of the exception text
-            - col - returns the column number of the exception text
-            - line - returns the line containing the exception text
-        """
-        if( aname == "lineno" ):
-            return lineno( self.loc, self.pstr )
-        elif( aname in ("col", "column") ):
-            return col( self.loc, self.pstr )
-        elif( aname == "line" ):
-            return line( self.loc, self.pstr )
-        else:
-            raise AttributeError(aname)
-
-    def __str__( self ):
-        return "%s (at char %d), (line:%d, col:%d)" % \
-                ( self.msg, self.loc, self.lineno, self.column )
-    def __repr__( self ):
-        return _ustr(self)
-    def markInputline( self, markerString = ">!<" ):
-        """Extracts the exception line from the input string, and marks
-           the location of the exception with a special symbol.
-        """
-        line_str = self.line
-        line_column = self.column - 1
-        if markerString:
-            line_str = "".join( [line_str[:line_column],
-                                markerString, line_str[line_column:]])
-        return line_str.strip()
-    def __dir__(self):
-        return "loc msg pstr parserElement lineno col line " \
-               "markInputline __str__ __repr__".split()
-
-class ParseException(ParseBaseException):
-    """exception thrown when parse expressions don't match class;
-       supported attributes by name are:
-        - lineno - returns the line number of the exception text
-        - col - returns the column number of the exception text
-        - line - returns the line containing the exception text
-    """
-    pass
-
-class ParseFatalException(ParseBaseException):
-    """user-throwable exception thrown when inconsistent parse content
-       is found; stops all parsing immediately"""
-    pass
-
-class ParseSyntaxException(ParseFatalException):
-    """just like C{L{ParseFatalException}}, but thrown internally when an
-       C{L{ErrorStop<And._ErrorStop>}} ('-' operator) indicates that parsing is to stop immediately because
-       an unbacktrackable syntax error has been found"""
-    def __init__(self, pe):
-        super(ParseSyntaxException, self).__init__(
-                                    pe.pstr, pe.loc, pe.msg, pe.parserElement)
-
-#~ class ReparseException(ParseBaseException):
-    #~ """Experimental class - parse actions can raise this exception to cause
-       #~ pyparsing to reparse the input string:
-        #~ - with a modified input string, and/or
-        #~ - with a modified start location
-       #~ Set the values of the ReparseException in the constructor, and raise the
-       #~ exception in a parse action to cause pyparsing to use the new string/location.
-       #~ Setting the values as None causes no change to be made.
-       #~ """
-    #~ def __init_( self, newstring, restartLoc ):
-        #~ self.newParseText = newstring
-        #~ self.reparseLoc = restartLoc
-
-class RecursiveGrammarException(Exception):
-    """exception thrown by C{validate()} if the grammar could be improperly recursive"""
-    def __init__( self, parseElementList ):
-        self.parseElementTrace = parseElementList
-
-    def __str__( self ):
-        return "RecursiveGrammarException: %s" % self.parseElementTrace
-
-class _ParseResultsWithOffset(object):
-    def __init__(self,p1,p2):
-        self.tup = (p1,p2)
-    def __getitem__(self,i):
-        return self.tup[i]
-    def __repr__(self):
-        return repr(self.tup)
-    def setOffset(self,i):
-        self.tup = (self.tup[0],i)
-
-class ParseResults(object):
-    """Structured parse results, to provide multiple means of access to the parsed data:
-       - as a list (C{len(results)})
-       - by list index (C{results[0], results[1]}, etc.)
-       - by attribute (C{results.<resultsName>})
-       """
-    #~ __slots__ = ( "__toklist", "__tokdict", "__doinit", "__name", "__parent", "__accumNames", "__weakref__" )
-    def __new__(cls, toklist, name=None, asList=True, modal=True ):
-        if isinstance(toklist, cls):
-            return toklist
-        retobj = object.__new__(cls)
-        retobj.__doinit = True
-        return retobj
-
-    # Performance tuning: we construct a *lot* of these, so keep this
-    # constructor as small and fast as possible
-    def __init__( self, toklist, name=None, asList=True, modal=True, isinstance=isinstance ):
-        if self.__doinit:
-            self.__doinit = False
-            self.__name = None
-            self.__parent = None
-            self.__accumNames = {}
-            if isinstance(toklist, list):
-                self.__toklist = toklist[:]
-            else:
-                self.__toklist = [toklist]
-            self.__tokdict = dict()
-
-        if name is not None and name:
-            if not modal:
-                self.__accumNames[name] = 0
-            if isinstance(name,int):
-                name = _ustr(name) # will always return a str, but use _ustr for consistency
-            self.__name = name
-            if not toklist in (None,'',[]):
-                if isinstance(toklist,basestring):
-                    toklist = [ toklist ]
-                if asList:
-                    if isinstance(toklist,ParseResults):
-                        self[name] = _ParseResultsWithOffset(toklist.copy(),0)
-                    else:
-                        self[name] = _ParseResultsWithOffset(ParseResults(toklist[0]),0)
-                    self[name].__name = name
-                else:
-                    try:
-                        self[name] = toklist[0]
-                    except (KeyError,TypeError,IndexError):
-                        self[name] = toklist
-
-    def __getitem__( self, i ):
-        if isinstance( i, (int,slice) ):
-            return self.__toklist[i]
-        else:
-            if i not in self.__accumNames:
-                return self.__tokdict[i][-1][0]
-            else:
-                return ParseResults([ v[0] for v in self.__tokdict[i] ])
-
-    def __setitem__( self, k, v, isinstance=isinstance ):
-        if isinstance(v,_ParseResultsWithOffset):
-            self.__tokdict[k] = self.__tokdict.get(k,list()) + [v]
-            sub = v[0]
-        elif isinstance(k,int):
-            self.__toklist[k] = v
-            sub = v
-        else:
-            self.__tokdict[k] = self.__tokdict.get(k,list()) + [_ParseResultsWithOffset(v,0)]
-            sub = v
-        if isinstance(sub,ParseResults):
-            sub.__parent = wkref(self)
-
-    def __delitem__( self, i ):
-        if isinstance(i,(int,slice)):
-            mylen = len( self.__toklist )
-            del self.__toklist[i]
-
-            # convert int to slice
-            if isinstance(i, int):
-                if i < 0:
-                    i += mylen
-                i = slice(i, i+1)
-            # get removed indices
-            removed = list(range(*i.indices(mylen)))
-            removed.reverse()
-            # fixup indices in token dictionary
-            for name in self.__tokdict:
-                occurrences = self.__tokdict[name]
-                for j in removed:
-                    for k, (value, position) in enumerate(occurrences):
-                        occurrences[k] = _ParseResultsWithOffset(value, position - (position > j))
-        else:
-            del self.__tokdict[i]
-
-    def __contains__( self, k ):
-        return k in self.__tokdict
-
-    def __len__( self ): return len( self.__toklist )
-    def __bool__(self): return len( self.__toklist ) > 0
-    __nonzero__ = __bool__
-    def __iter__( self ): return iter( self.__toklist )
-    def __reversed__( self ): return iter( self.__toklist[::-1] )
-    def keys( self ):
-        """Returns all named result keys."""
-        return self.__tokdict.keys()
-
-    def pop( self, index=-1 ):
-        """Removes and returns item at specified index (default=last).
-           Will work with either numeric indices or dict-key indicies."""
-        ret = self[index]
-        del self[index]
-        return ret
-
-    def get(self, key, defaultValue=None):
-        """Returns named result matching the given key, or if there is no
-           such name, then returns the given C{defaultValue} or C{None} if no
-           C{defaultValue} is specified."""
-        if key in self:
-            return self[key]
-        else:
-            return defaultValue
-
-    def insert( self, index, insStr ):
-        """Inserts new element at location index in the list of parsed tokens."""
-        self.__toklist.insert(index, insStr)
-        # fixup indices in token dictionary
-        for name in self.__tokdict:
-            occurrences = self.__tokdict[name]
-            for k, (value, position) in enumerate(occurrences):
-                occurrences[k] = _ParseResultsWithOffset(value, position + (position > index))
-
-    def items( self ):
-        """Returns all named result keys and values as a list of tuples."""
-        return [(k,self[k]) for k in self.__tokdict]
-
-    def values( self ):
-        """Returns all named result values."""
-        return [ v[-1][0] for v in self.__tokdict.values() ]
-
-    def __getattr__( self, name ):
-        if True: #name not in self.__slots__:
-            if name in self.__tokdict:
-                if name not in self.__accumNames:
-                    return self.__tokdict[name][-1][0]
-                else:
-                    return ParseResults([ v[0] for v in self.__tokdict[name] ])
-            else:
-                return ""
-        return None
-
-    def __add__( self, other ):
-        ret = self.copy()
-        ret += other
-        return ret
-
-    def __iadd__( self, other ):
-        if other.__tokdict:
-            offset = len(self.__toklist)
-            addoffset = ( lambda a: (a<0 and offset) or (a+offset) )
-            otheritems = other.__tokdict.items()
-            otherdictitems = [(k, _ParseResultsWithOffset(v[0],addoffset(v[1])) )
-                                for (k,vlist) in otheritems for v in vlist]
-            for k,v in otherdictitems:
-                self[k] = v
-                if isinstance(v[0],ParseResults):
-                    v[0].__parent = wkref(self)
-
-        self.__toklist += other.__toklist
-        self.__accumNames.update( other.__accumNames )
-        return self
-
-    def __radd__(self, other):
-        if isinstance(other,int) and other == 0:
-            return self.copy()
-
-    def __repr__( self ):
-        return "(%s, %s)" % ( repr( self.__toklist ), repr( self.__tokdict ) )
-
-    def __str__( self ):
-        out = []
-        for i in self.__toklist:
-            if isinstance(i, ParseResults):
-                out.append(_ustr(i))
-            else:
-                out.append(repr(i))
-        return '[' + ', '.join(out) + ']'
-
-    def _asStringList( self, sep='' ):
-        out = []
-        for item in self.__toklist:
-            if out and sep:
-                out.append(sep)
-            if isinstance( item, ParseResults ):
-                out += item._asStringList()
-            else:
-                out.append( _ustr(item) )
-        return out
-
-    def asList( self ):
-        """Returns the parse results as a nested list of matching tokens, all converted to strings."""
-        out = []
-        for res in self.__toklist:
-            if isinstance(res,ParseResults):
-                out.append( res.asList() )
-            else:
-                out.append( res )
-        return out
-
-    def asDict( self ):
-        """Returns the named parse results as dictionary."""
-        return dict( self.items() )
-
-    def copy( self ):
-        """Returns a new copy of a C{ParseResults} object."""
-        ret = ParseResults( self.__toklist )
-        ret.__tokdict = self.__tokdict.copy()
-        ret.__parent = self.__parent
-        ret.__accumNames.update( self.__accumNames )
-        ret.__name = self.__name
-        return ret
-
-    def asXML( self, doctag=None, namedItemsOnly=False, indent="", formatted=True ):
-        """Returns the parse results as XML. Tags are created for tokens and lists that have defined results names."""
-        nl = "\n"
-        out = []
-        namedItems = dict( [ (v[1],k) for (k,vlist) in self.__tokdict.items()
-                                                            for v in vlist ] )
-        nextLevelIndent = indent + "  "
-
-        # collapse out indents if formatting is not desired
-        if not formatted:
-            indent = ""
-            nextLevelIndent = ""
-            nl = ""
-
-        selfTag = None
-        if doctag is not None:
-            selfTag = doctag
-        else:
-            if self.__name:
-                selfTag = self.__name
-
-        if not selfTag:
-            if namedItemsOnly:
-                return ""
-            else:
-                selfTag = "ITEM"
-
-        out += [ nl, indent, "<", selfTag, ">" ]
-
-        worklist = self.__toklist
-        for i,res in enumerate(worklist):
-            if isinstance(res,ParseResults):
-                if i in namedItems:
-                    out += [ res.asXML(namedItems[i],
-                                        namedItemsOnly and doctag is None,
-                                        nextLevelIndent,
-                                        formatted)]
-                else:
-                    out += [ res.asXML(None,
-                                        namedItemsOnly and doctag is None,
-                                        nextLevelIndent,
-                                        formatted)]
-            else:
-                # individual token, see if there is a name for it
-                resTag = None
-                if i in namedItems:
-                    resTag = namedItems[i]
-                if not resTag:
-                    if namedItemsOnly:
-                        continue
-                    else:
-                        resTag = "ITEM"
-                xmlBodyText = _xml_escape(_ustr(res))
-                out += [ nl, nextLevelIndent, "<", resTag, ">",
-                                                xmlBodyText,
-                                                "</", resTag, ">" ]
-
-        out += [ nl, indent, "</", selfTag, ">" ]
-        return "".join(out)
-
-    def __lookup(self,sub):
-        for k,vlist in self.__tokdict.items():
-            for v,loc in vlist:
-                if sub is v:
-                    return k
-        return None
-
-    def getName(self):
-        """Returns the results name for this token expression."""
-        if self.__name:
-            return self.__name
-        elif self.__parent:
-            par = self.__parent()
-            if par:
-                return par.__lookup(self)
-            else:
-                return None
-        elif (len(self) == 1 and
-               len(self.__tokdict) == 1 and
-               self.__tokdict.values()[0][0][1] in (0,-1)):
-            return self.__tokdict.keys()[0]
-        else:
-            return None
-
-    def dump(self,indent='',depth=0):
-        """Diagnostic method for listing out the contents of a C{ParseResults}.
-           Accepts an optional C{indent} argument so that this string can be embedded
-           in a nested display of other data."""
-        out = []
-        out.append( indent+_ustr(self.asList()) )
-        keys = self.items()
-        keys.sort()
-        for k,v in keys:
-            if out:
-                out.append('\n')
-            out.append( "%s%s- %s: " % (indent,('  '*depth), k) )
-            if isinstance(v,ParseResults):
-                if v.keys():
-                    out.append( v.dump(indent,depth+1) )
-                else:
-                    out.append(_ustr(v))
-            else:
-                out.append(_ustr(v))
-        return "".join(out)
-
-    # add support for pickle protocol
-    def __getstate__(self):
-        return ( self.__toklist,
-                 ( self.__tokdict.copy(),
-                   self.__parent is not None and self.__parent() or None,
-                   self.__accumNames,
-                   self.__name ) )
-
-    def __setstate__(self,state):
-        self.__toklist = state[0]
-        (self.__tokdict,
-         par,
-         inAccumNames,
-         self.__name) = state[1]
-        self.__accumNames = {}
-        self.__accumNames.update(inAccumNames)
-        if par is not None:
-            self.__parent = wkref(par)
-        else:
-            self.__parent = None
-
-    def __dir__(self):
-        return dir(super(ParseResults,self)) + list(self.keys())
-
-def col (loc,strg):
-    """Returns current column within a string, counting newlines as line separators.
-   The first column is number 1.
-
-   Note: the default parsing behavior is to expand tabs in the input string
-   before starting the parsing process.  See L{I{ParserElement.parseString}<ParserElement.parseString>} for more information
-   on parsing strings containing C{<TAB>}s, and suggested methods to maintain a
-   consistent view of the parsed string, the parse location, and line and column
-   positions within the parsed string.
-   """
-    return (loc<len(strg) and strg[loc] == '\n') and 1 or loc - strg.rfind("\n", 0, loc)
-
-def lineno(loc,strg):
-    """Returns current line number within a string, counting newlines as line separators.
-   The first line is number 1.
-
-   Note: the default parsing behavior is to expand tabs in the input string
-   before starting the parsing process.  See L{I{ParserElement.parseString}<ParserElement.parseString>} for more information
-   on parsing strings containing C{<TAB>}s, and suggested methods to maintain a
-   consistent view of the parsed string, the parse location, and line and column
-   positions within the parsed string.
-   """
-    return strg.count("\n",0,loc) + 1
-
-def line( loc, strg ):
-    """Returns the line of text containing loc within a string, counting newlines as line separators.
-       """
-    lastCR = strg.rfind("\n", 0, loc)
-    nextCR = strg.find("\n", loc)
-    if nextCR >= 0:
-        return strg[lastCR+1:nextCR]
-    else:
-        return strg[lastCR+1:]
-
-def _defaultStartDebugAction( instring, loc, expr ):
-    print ("Match " + _ustr(expr) + " at loc " + _ustr(loc) + "(%d,%d)" % ( lineno(loc,instring), col(loc,instring) ))
-
-def _defaultSuccessDebugAction( instring, startloc, endloc, expr, toks ):
-    print ("Matched " + _ustr(expr) + " -> " + str(toks.asList()))
-
-def _defaultExceptionDebugAction( instring, loc, expr, exc ):
-    print ("Exception raised:" + _ustr(exc))
-
-def nullDebugAction(*args):
-    """'Do-nothing' debug action, to suppress debugging output during parsing."""
-    pass
-
-'decorator to trim function calls to match the arity of the target'
-def _trim_arity(func, maxargs=2):
-    if func in singleArgBuiltins:
-        return lambda s,l,t: func(t)
-    limit = [0]
-    foundArity = [False]
-    def wrapper(*args):
-        while 1:
-            try:
-                ret = func(*args[limit[0]:])
-                foundArity[0] = True
-                return ret
-            except TypeError:
-                if limit[0] <= maxargs and not foundArity[0]:
-                    limit[0] += 1
-                    continue
-                raise
-    return wrapper
-
-class ParserElement(object):
-    """Abstract base level parser element class."""
-    DEFAULT_WHITE_CHARS = " \n\t\r"
-    verbose_stacktrace = False
-
-    def setDefaultWhitespaceChars( chars ):
-        """Overrides the default whitespace chars
-        """
-        ParserElement.DEFAULT_WHITE_CHARS = chars
-    setDefaultWhitespaceChars = staticmethod(setDefaultWhitespaceChars)
-
-    def inlineLiteralsUsing(cls):
-        """
-        Set class to be used for inclusion of string literals into a parser.
-        """
-        ParserElement.literalStringClass = cls
-    inlineLiteralsUsing = staticmethod(inlineLiteralsUsing)
-
-    def __init__( self, savelist=False ):
-        self.parseAction = list()
-        self.failAction = None
-        #~ self.name = "<unknown>"  # don't define self.name, let subclasses try/except upcall
-        self.strRepr = None
-        self.resultsName = None
-        self.saveAsList = savelist
-        self.skipWhitespace = True
-        self.whiteChars = ParserElement.DEFAULT_WHITE_CHARS
-        self.copyDefaultWhiteChars = True
-        self.mayReturnEmpty = False # used when checking for left-recursion
-        self.keepTabs = False
-        self.ignoreExprs = list()
-        self.debug = False
-        self.streamlined = False
-        self.mayIndexError = True # used to optimize exception handling for subclasses that don't advance parse index
-        self.errmsg = ""
-        self.modalResults = True # used to mark results names as modal (report only last) or cumulative (list all)
-        self.debugActions = ( None, None, None ) #custom debug actions
-        self.re = None
-        self.callPreparse = True # used to avoid redundant calls to preParse
-        self.callDuringTry = False
-
-    def copy( self ):
-        """Make a copy of this C{ParserElement}.  Useful for defining different parse actions
-           for the same parsing pattern, using copies of the original parse element."""
-        cpy = copy.copy( self )
-        cpy.parseAction = self.parseAction[:]
-        cpy.ignoreExprs = self.ignoreExprs[:]
-        if self.copyDefaultWhiteChars:
-            cpy.whiteChars = ParserElement.DEFAULT_WHITE_CHARS
-        return cpy
-
-    def setName( self, name ):
-        """Define name for this expression, for use in debugging."""
-        self.name = name
-        self.errmsg = "Expected " + self.name
-        if hasattr(self,"exception"):
-            self.exception.msg = self.errmsg
-        return self
-
-    def setResultsName( self, name, listAllMatches=False ):
-        """Define name for referencing matching tokens as a nested attribute
-           of the returned parse results.
-           NOTE: this returns a *copy* of the original C{ParserElement} object;
-           this is so that the client can define a basic element, such as an
-           integer, and reference it in multiple places with different names.
-
-           You can also set results names using the abbreviated syntax,
-           C{expr("name")} in place of C{expr.setResultsName("name")} -
-           see L{I{__call__}<__call__>}.
-        """
-        newself = self.copy()
-        if name.endswith("*"):
-            name = name[:-1]
-            listAllMatches=True
-        newself.resultsName = name
-        newself.modalResults = not listAllMatches
-        return newself
-
-    def setBreak(self,breakFlag = True):
-        """Method to invoke the Python pdb debugger when this element is
-           about to be parsed. Set C{breakFlag} to True to enable, False to
-           disable.
-        """
-        if breakFlag:
-            _parseMethod = self._parse
-            def breaker(instring, loc, doActions=True, callPreParse=True):
-                import pdb
-                pdb.set_trace()
-                return _parseMethod( instring, loc, doActions, callPreParse )
-            breaker._originalParseMethod = _parseMethod
-            self._parse = breaker
-        else:
-            if hasattr(self._parse,"_originalParseMethod"):
-                self._parse = self._parse._originalParseMethod
-        return self
-
-    def setParseAction( self, *fns, **kwargs ):
-        """Define action to perform when successfully matching parse element definition.
-           Parse action fn is a callable method with 0-3 arguments, called as C{fn(s,loc,toks)},
-           C{fn(loc,toks)}, C{fn(toks)}, or just C{fn()}, where:
-            - s   = the original string being parsed (see note below)
-            - loc = the location of the matching substring
-            - toks = a list of the matched tokens, packaged as a C{L{ParseResults}} object
-           If the functions in fns modify the tokens, they can return them as the return
-           value from fn, and the modified list of tokens will replace the original.
-           Otherwise, fn does not need to return any value.
-
-           Note: the default parsing behavior is to expand tabs in the input string
-           before starting the parsing process.  See L{I{parseString}<parseString>} for more information
-           on parsing strings containing C{<TAB>}s, and suggested methods to maintain a
-           consistent view of the parsed string, the parse location, and line and column
-           positions within the parsed string.
-           """
-        self.parseAction = list(map(_trim_arity, list(fns)))
-        self.callDuringTry = ("callDuringTry" in kwargs and kwargs["callDuringTry"])
-        return self
-
-    def addParseAction( self, *fns, **kwargs ):
-        """Add parse action to expression's list of parse actions. See L{I{setParseAction}<setParseAction>}."""
-        self.parseAction += list(map(_trim_arity, list(fns)))
-        self.callDuringTry = self.callDuringTry or ("callDuringTry" in kwargs and kwargs["callDuringTry"])
-        return self
-
-    def setFailAction( self, fn ):
-        """Define action to perform if parsing fails at this expression.
-           Fail acton fn is a callable function that takes the arguments
-           C{fn(s,loc,expr,err)} where:
-            - s = string being parsed
-            - loc = location where expression match was attempted and failed
-            - expr = the parse expression that failed
-            - err = the exception thrown
-           The function returns no value.  It may throw C{L{ParseFatalException}}
-           if it is desired to stop parsing immediately."""
-        self.failAction = fn
-        return self
-
-    def _skipIgnorables( self, instring, loc ):
-        exprsFound = True
-        while exprsFound:
-            exprsFound = False
-            for e in self.ignoreExprs:
-                try:
-                    while 1:
-                        loc,dummy = e._parse( instring, loc )
-                        exprsFound = True
-                except ParseException:
-                    pass
-        return loc
-
-    def preParse( self, instring, loc ):
-        if self.ignoreExprs:
-            loc = self._skipIgnorables( instring, loc )
-
-        if self.skipWhitespace:
-            wt = self.whiteChars
-            instrlen = len(instring)
-            while loc < instrlen and instring[loc] in wt:
-                loc += 1
-
-        return loc
-
-    def parseImpl( self, instring, loc, doActions=True ):
-        return loc, []
-
-    def postParse( self, instring, loc, tokenlist ):
-        return tokenlist
-
-    #~ @profile
-    def _parseNoCache( self, instring, loc, doActions=True, callPreParse=True ):
-        debugging = ( self.debug ) #and doActions )
-
-        if debugging or self.failAction:
-            #~ print ("Match",self,"at loc",loc,"(%d,%d)" % ( lineno(loc,instring), col(loc,instring) ))
-            if (self.debugActions[0] ):
-                self.debugActions[0]( instring, loc, self )
-            if callPreParse and self.callPreparse:
-                preloc = self.preParse( instring, loc )
-            else:
-                preloc = loc
-            tokensStart = preloc
-            try:
-                try:
-                    loc,tokens = self.parseImpl( instring, preloc, doActions )
-                except IndexError:
-                    raise ParseException( instring, len(instring), self.errmsg, self )
-            except ParseBaseException, err:
-                #~ print ("Exception raised:", err)
-                err = None
-                if self.debugActions[2]:
-                    self.debugActions[2]( instring, tokensStart, self, err )
-                if self.failAction:
-                    self.failAction( instring, tokensStart, self, err )
-                raise
-        else:
-            if callPreParse and self.callPreparse:
-                preloc = self.preParse( instring, loc )
-            else:
-                preloc = loc
-            tokensStart = preloc
-            if self.mayIndexError or loc >= len(instring):
-                try:
-                    loc,tokens = self.parseImpl( instring, preloc, doActions )
-                except IndexError:
-                    raise ParseException( instring, len(instring), self.errmsg, self )
-            else:
-                loc,tokens = self.parseImpl( instring, preloc, doActions )
-
-        tokens = self.postParse( instring, loc, tokens )
-
-        retTokens = ParseResults( tokens, self.resultsName, asList=self.saveAsList, modal=self.modalResults )
-        if self.parseAction and (doActions or self.callDuringTry):
-            if debugging:
-                try:
-                    for fn in self.parseAction:
-                        tokens = fn( instring, tokensStart, retTokens )
-                        if tokens is not None:
-                            retTokens = ParseResults( tokens,
-                                                      self.resultsName,
-                                                      asList=self.saveAsList and isinstance(tokens,(ParseResults,list)),
-                                                      modal=self.modalResults )
-                except ParseBaseException, err:
-                    #~ print "Exception raised in user parse action:", err
-                    if (self.debugActions[2] ):
-                        self.debugActions[2]( instring, tokensStart, self, err )
-                    raise
-            else:
-                for fn in self.parseAction:
-                    tokens = fn( instring, tokensStart, retTokens )
-                    if tokens is not None:
-                        retTokens = ParseResults( tokens,
-                                                  self.resultsName,
-                                                  asList=self.saveAsList and isinstance(tokens,(ParseResults,list)),
-                                                  modal=self.modalResults )
-
-        if debugging:
-            #~ print ("Matched",self,"->",retTokens.asList())
-            if (self.debugActions[1] ):
-                self.debugActions[1]( instring, tokensStart, loc, self, retTokens )
-
-        return loc, retTokens
-
-    def tryParse( self, instring, loc ):
-        try:
-            return self._parse( instring, loc, doActions=False )[0]
-        except ParseFatalException:
-            raise ParseException( instring, loc, self.errmsg, self)
-
-    # this method gets repeatedly called during backtracking with the same arguments -
-    # we can cache these arguments and save ourselves the trouble of re-parsing the contained expression
-    def _parseCache( self, instring, loc, doActions=True, callPreParse=True ):
-        lookup = (self,instring,loc,callPreParse,doActions)
-        if lookup in ParserElement._exprArgCache:
-            value = ParserElement._exprArgCache[ lookup ]
-            if isinstance(value, Exception):
-                raise value
-            return (value[0],value[1].copy())
-        else:
-            try:
-                value = self._parseNoCache( instring, loc, doActions, callPreParse )
-                ParserElement._exprArgCache[ lookup ] = (value[0],value[1].copy())
-                return value
-            except ParseBaseException, pe:
-                ParserElement._exprArgCache[ lookup ] = pe
-                raise
-
-    _parse = _parseNoCache
-
-    # argument cache for optimizing repeated calls when backtracking through recursive expressions
-    _exprArgCache = {}
-    def resetCache():
-        ParserElement._exprArgCache.clear()
-    resetCache = staticmethod(resetCache)
-
-    _packratEnabled = False
-    def enablePackrat():
-        """Enables "packrat" parsing, which adds memoizing to the parsing logic.
-           Repeated parse attempts at the same string location (which happens
-           often in many complex grammars) can immediately return a cached value,
-           instead of re-executing parsing/validating code.  Memoizing is done of
-           both valid results and parsing exceptions.
-
-           This speedup may break existing programs that use parse actions that
-           have side-effects.  For this reason, packrat parsing is disabled when
-           you first import pyparsing.  To activate the packrat feature, your
-           program must call the class method C{ParserElement.enablePackrat()}.  If
-           your program uses C{psyco} to "compile as you go", you must call
-           C{enablePackrat} before calling C{psyco.full()}.  If you do not do this,
-           Python will crash.  For best results, call C{enablePackrat()} immediately
-           after importing pyparsing.
-        """
-        if not ParserElement._packratEnabled:
-            ParserElement._packratEnabled = True
-            ParserElement._parse = ParserElement._parseCache
-    enablePackrat = staticmethod(enablePackrat)
-
-    def parseString( self, instring, parseAll=False ):
-        """Execute the parse expression with the given string.
-           This is the main interface to the client code, once the complete
-           expression has been built.
-
-           If you want the grammar to require that the entire input string be
-           successfully parsed, then set C{parseAll} to True (equivalent to ending
-           the grammar with C{L{StringEnd()}}).
-
-           Note: C{parseString} implicitly calls C{expandtabs()} on the input string,
-           in order to report proper column numbers in parse actions.
-           If the input string contains tabs and
-           the grammar uses parse actions that use the C{loc} argument to index into the
-           string being parsed, you can ensure you have a consistent view of the input
-           string by:
-            - calling C{parseWithTabs} on your grammar before calling C{parseString}
-              (see L{I{parseWithTabs}<parseWithTabs>})
-            - define your parse action using the full C{(s,loc,toks)} signature, and
-              reference the input string using the parse action's C{s} argument
-            - explictly expand the tabs in your input string before calling
-              C{parseString}
-        """
-        ParserElement.resetCache()
-        if not self.streamlined:
-            self.streamline()
-            #~ self.saveAsList = True
-        for e in self.ignoreExprs:
-            e.streamline()
-        if not self.keepTabs:
-            instring = instring.expandtabs()
-        try:
-            loc, tokens = self._parse( instring, 0 )
-            if parseAll:
-                loc = self.preParse( instring, loc )
-                se = Empty() + StringEnd()
-                se._parse( instring, loc )
-        except ParseBaseException, exc:
-            if ParserElement.verbose_stacktrace:
-                raise
-            else:
-                # catch and re-raise exception from here, clears out pyparsing internal stack trace
-                raise exc
-        else:
-            return tokens
-
-    def scanString( self, instring, maxMatches=_MAX_INT, overlap=False ):
-        """Scan the input string for expression matches.  Each match will return the
-           matching tokens, start location, and end location.  May be called with optional
-           C{maxMatches} argument, to clip scanning after 'n' matches are found.  If
-           C{overlap} is specified, then overlapping matches will be reported.
-
-           Note that the start and end locations are reported relative to the string
-           being parsed.  See L{I{parseString}<parseString>} for more information on parsing
-           strings with embedded tabs."""
-        if not self.streamlined:
-            self.streamline()
-        for e in self.ignoreExprs:
-            e.streamline()
-
-        if not self.keepTabs:
-            instring = _ustr(instring).expandtabs()
-        instrlen = len(instring)
-        loc = 0
-        preparseFn = self.preParse
-        parseFn = self._parse
-        ParserElement.resetCache()
-        matches = 0
-        try:
-            while loc <= instrlen and matches < maxMatches:
-                try:
-                    preloc = preparseFn( instring, loc )
-                    nextLoc,tokens = parseFn( instring, preloc, callPreParse=False )
-                except ParseException:
-                    loc = preloc+1
-                else:
-                    if nextLoc > loc:
-                        matches += 1
-                        yield tokens, preloc, nextLoc
-                        if overlap:
-                            nextloc = preparseFn( instring, loc )
-                            if nextloc > loc:
-                                loc = nextLoc
-                            else:
-                                loc += 1
-                        else:
-                            loc = nextLoc
-                    else:
-                        loc = preloc+1
-        except ParseBaseException, exc:
-            if ParserElement.verbose_stacktrace:
-                raise
-            else:
-                # catch and re-raise exception from here, clears out pyparsing internal stack trace
-                raise exc
-
-    def transformString( self, instring ):
-        """Extension to C{L{scanString}}, to modify matching text with modified tokens that may
-           be returned from a parse action.  To use C{transformString}, define a grammar and
-           attach a parse action to it that modifies the returned token list.
-           Invoking C{transformString()} on a target string will then scan for matches,
-           and replace the matched text patterns according to the logic in the parse
-           action.  C{transformString()} returns the resulting transformed string."""
-        out = []
-        lastE = 0
-        # force preservation of <TAB>s, to minimize unwanted transformation of string, and to
-        # keep string locs straight between transformString and scanString
-        self.keepTabs = True
-        try:
-            for t,s,e in self.scanString( instring ):
-                out.append( instring[lastE:s] )
-                if t:
-                    if isinstance(t,ParseResults):
-                        out += t.asList()
-                    elif isinstance(t,list):
-                        out += t
-                    else:
-                        out.append(t)
-                lastE = e
-            out.append(instring[lastE:])
-            out = [o for o in out if o]
-            return "".join(map(_ustr,_flatten(out)))
-        except ParseBaseException, exc:
-            if ParserElement.verbose_stacktrace:
-                raise
-            else:
-                # catch and re-raise exception from here, clears out pyparsing internal stack trace
-                raise exc
-
-    def searchString( self, instring, maxMatches=_MAX_INT ):
-        """Another extension to C{L{scanString}}, simplifying the access to the tokens found
-           to match the given parse expression.  May be called with optional
-           C{maxMatches} argument, to clip searching after 'n' matches are found.
-        """
-        try:
-            return ParseResults([ t for t,s,e in self.scanString( instring, maxMatches ) ])
-        except ParseBaseException, exc:
-            if ParserElement.verbose_stacktrace:
-                raise
-            else:
-                # catch and re-raise exception from here, clears out pyparsing internal stack trace
-                raise exc
-
-    def __add__(self, other ):
-        """Implementation of + operator - returns C{L{And}}"""
-        if isinstance( other, basestring ):
-            other = ParserElement.literalStringClass( other )
-        if not isinstance( other, ParserElement ):
-            warnings.warn("Cannot combine element of type %s with ParserElement" % type(other),
-                    SyntaxWarning, stacklevel=2)
-            return None
-        return And( [ self, other ] )
-
-    def __radd__(self, other ):
-        """Implementation of + operator when left operand is not a C{L{ParserElement}}"""
-        if isinstance( other, basestring ):
-            other = ParserElement.literalStringClass( other )
-        if not isinstance( other, ParserElement ):
-            warnings.warn("Cannot combine element of type %s with ParserElement" % type(other),
-                    SyntaxWarning, stacklevel=2)
-            return None
-        return other + self
-
-    def __sub__(self, other):
-        """Implementation of - operator, returns C{L{And}} with error stop"""
-        if isinstance( other, basestring ):
-            other = ParserElement.literalStringClass( other )
-        if not isinstance( other, ParserElement ):
-            warnings.warn("Cannot combine element of type %s with ParserElement" % type(other),
-                    SyntaxWarning, stacklevel=2)
-            return None
-        return And( [ self, And._ErrorStop(), other ] )
-
-    def __rsub__(self, other ):
-        """Implementation of - operator when left operand is not a C{L{ParserElement}}"""
-        if isinstance( other, basestring ):
-            other = ParserElement.literalStringClass( other )
-        if not isinstance( other, ParserElement ):
-            warnings.warn("Cannot combine element of type %s with ParserElement" % type(other),
-                    SyntaxWarning, stacklevel=2)
-            return None
-        return other - self
-
-    def __mul__(self,other):
-        """Implementation of * operator, allows use of C{expr * 3} in place of
-           C{expr + expr + expr}.  Expressions may also me multiplied by a 2-integer
-           tuple, similar to C{{min,max}} multipliers in regular expressions.  Tuples
-           may also include C{None} as in:
-            - C{expr*(n,None)} or C{expr*(n,)} is equivalent
-              to C{expr*n + L{ZeroOrMore}(expr)}
-              (read as "at least n instances of C{expr}")
-            - C{expr*(None,n)} is equivalent to C{expr*(0,n)}
-              (read as "0 to n instances of C{expr}")
-            - C{expr*(None,None)} is equivalent to C{L{ZeroOrMore}(expr)}
-            - C{expr*(1,None)} is equivalent to C{L{OneOrMore}(expr)}
-
-           Note that C{expr*(None,n)} does not raise an exception if
-           more than n exprs exist in the input stream; that is,
-           C{expr*(None,n)} does not enforce a maximum number of expr
-           occurrences.  If this behavior is desired, then write
-           C{expr*(None,n) + ~expr}
-
-        """
-        if isinstance(other,int):
-            minElements, optElements = other,0
-        elif isinstance(other,tuple):
-            other = (other + (None, None))[:2]
-            if other[0] is None:
-                other = (0, other[1])
-            if isinstance(other[0],int) and other[1] is None:
-                if other[0] == 0:
-                    return ZeroOrMore(self)
-                if other[0] == 1:
-                    return OneOrMore(self)
-                else:
-                    return self*other[0] + ZeroOrMore(self)
-            elif isinstance(other[0],int) and isinstance(other[1],int):
-                minElements, optElements = other
-                optElements -= minElements
-            else:
-                raise TypeError("cannot multiply 'ParserElement' and ('%s','%s') objects", type(other[0]),type(other[1]))
-        else:
-            raise TypeError("cannot multiply 'ParserElement' and '%s' objects", type(other))
-
-        if minElements < 0:
-            raise ValueError("cannot multiply ParserElement by negative value")
-        if optElements < 0:
-            raise ValueError("second tuple value must be greater or equal to first tuple value")
-        if minElements == optElements == 0:
-            raise ValueError("cannot multiply ParserElement by 0 or (0,0)")
-
-        if (optElements):
-            def makeOptionalList(n):
-                if n>1:
-                    return Optional(self + makeOptionalList(n-1))
-                else:
-                    return Optional(self)
-            if minElements:
-                if minElements == 1:
-                    ret = self + makeOptionalList(optElements)
-                else:
-                    ret = And([self]*minElements) + makeOptionalList(optElements)
-            else:
-                ret = makeOptionalList(optElements)
-        else:
-            if minElements == 1:
-                ret = self
-            else:
-                ret = And([self]*minElements)
-        return ret
-
-    def __rmul__(self, other):
-        return self.__mul__(other)
-
-    def __or__(self, other ):
-        """Implementation of | operator - returns C{L{MatchFirst}}"""
-        if isinstance( other, basestring ):
-            other = ParserElement.literalStringClass( other )
-        if not isinstance( other, ParserElement ):
-            warnings.warn("Cannot combine element of type %s with ParserElement" % type(other),
-                    SyntaxWarning, stacklevel=2)
-            return None
-        return MatchFirst( [ self, other ] )
-
-    def __ror__(self, other ):
-        """Implementation of | operator when left operand is not a C{L{ParserElement}}"""
-        if isinstance( other, basestring ):
-            other = ParserElement.literalStringClass( other )
-        if not isinstance( other, ParserElement ):
-            warnings.warn("Cannot combine element of type %s with ParserElement" % type(other),
-                    SyntaxWarning, stacklevel=2)
-            return None
-        return other | self
-
-    def __xor__(self, other ):
-        """Implementation of ^ operator - returns C{L{Or}}"""
-        if isinstance( other, basestring ):
-            other = ParserElement.literalStringClass( other )
-        if not isinstance( other, ParserElement ):
-            warnings.warn("Cannot combine element of type %s with ParserElement" % type(other),
-                    SyntaxWarning, stacklevel=2)
-            return None
-        return Or( [ self, other ] )
-
-    def __rxor__(self, other ):
-        """Implementation of ^ operator when left operand is not a C{L{ParserElement}}"""
-        if isinstance( other, basestring ):
-            other = ParserElement.literalStringClass( other )
-        if not isinstance( other, ParserElement ):
-            warnings.warn("Cannot combine element of type %s with ParserElement" % type(other),
-                    SyntaxWarning, stacklevel=2)
-            return None
-        return other ^ self
-
-    def __and__(self, other ):
-        """Implementation of & operator - returns C{L{Each}}"""
-        if isinstance( other, basestring ):
-            other = ParserElement.literalStringClass( other )
-        if not isinstance( other, ParserElement ):
-            warnings.warn("Cannot combine element of type %s with ParserElement" % type(other),
-                    SyntaxWarning, stacklevel=2)
-            return None
-        return Each( [ self, other ] )
-
-    def __rand__(self, other ):
-        """Implementation of & operator when left operand is not a C{L{ParserElement}}"""
-        if isinstance( other, basestring ):
-            other = ParserElement.literalStringClass( other )
-        if not isinstance( other, ParserElement ):
-            warnings.warn("Cannot combine element of type %s with ParserElement" % type(other),
-                    SyntaxWarning, stacklevel=2)
-            return None
-        return other & self
-
-    def __invert__( self ):
-        """Implementation of ~ operator - returns C{L{NotAny}}"""
-        return NotAny( self )
-
-    def __call__(self, name):
-        """Shortcut for C{L{setResultsName}}, with C{listAllMatches=default}::
-             userdata = Word(alphas).setResultsName("name") + Word(nums+"-").setResultsName("socsecno")
-           could be written as::
-             userdata = Word(alphas)("name") + Word(nums+"-")("socsecno")
-
-           If C{name} is given with a trailing C{'*'} character, then C{listAllMatches} will be
-           passed as C{True}.
-           """
-        return self.setResultsName(name)
-
-    def suppress( self ):
-        """Suppresses the output of this C{ParserElement}; useful to keep punctuation from
-           cluttering up returned output.
-        """
-        return Suppress( self )
-
-    def leaveWhitespace( self ):
-        """Disables the skipping of whitespace before matching the characters in the
-           C{ParserElement}'s defined pattern.  This is normally only used internally by
-           the pyparsing module, but may be needed in some whitespace-sensitive grammars.
-        """
-        self.skipWhitespace = False
-        return self
-
-    def setWhitespaceChars( self, chars ):
-        """Overrides the default whitespace chars
-        """
-        self.skipWhitespace = True
-        self.whiteChars = chars
-        self.copyDefaultWhiteChars = False
-        return self
-
-    def parseWithTabs( self ):
-        """Overrides default behavior to expand C{<TAB>}s to spaces before parsing the input string.
-           Must be called before C{parseString} when the input grammar contains elements that
-           match C{<TAB>} characters."""
-        self.keepTabs = True
-        return self
-
-    def ignore( self, other ):
-        """Define expression to be ignored (e.g., comments) while doing pattern
-           matching; may be called repeatedly, to define multiple comment or other
-           ignorable patterns.
-        """
-        if isinstance( other, Suppress ):
-            if other not in self.ignoreExprs:
-                self.ignoreExprs.append( other.copy() )
-        else:
-            self.ignoreExprs.append( Suppress( other.copy() ) )
-        return self
-
-    def setDebugActions( self, startAction, successAction, exceptionAction ):
-        """Enable display of debugging messages while doing pattern matching."""
-        self.debugActions = (startAction or _defaultStartDebugAction,
-                             successAction or _defaultSuccessDebugAction,
-                             exceptionAction or _defaultExceptionDebugAction)
-        self.debug = True
-        return self
-
-    def setDebug( self, flag=True ):
-        """Enable display of debugging messages while doing pattern matching.
-           Set C{flag} to True to enable, False to disable."""
-        if flag:
-            self.setDebugActions( _defaultStartDebugAction, _defaultSuccessDebugAction, _defaultExceptionDebugAction )
-        else:
-            self.debug = False
-        return self
-
-    def __str__( self ):
-        return self.name
-
-    def __repr__( self ):
-        return _ustr(self)
-
-    def streamline( self ):
-        self.streamlined = True
-        self.strRepr = None
-        return self
-
-    def checkRecursion( self, parseElementList ):
-        pass
-
-    def validate( self, validateTrace=[] ):
-        """Check defined expressions for valid structure, check for infinite recursive definitions."""
-        self.checkRecursion( [] )
-
-    def parseFile( self, file_or_filename, parseAll=False ):
-        """Execute the parse expression on the given file or filename.
-           If a filename is specified (instead of a file object),
-           the entire file is opened, read, and closed before parsing.
-        """
-        try:
-            file_contents = file_or_filename.read()
-        except AttributeError:
-            f = open(file_or_filename, "r")
-            file_contents = f.read()
-            f.close()
-        try:
-            return self.parseString(file_contents, parseAll)
-        except ParseBaseException, exc:
-            if ParserElement.verbose_stacktrace:
-                raise
-            else:
-                # catch and re-raise exception from here, clears out pyparsing internal stack trace
-                raise exc
-
-    def getException(self):
-        return ParseException("",0,self.errmsg,self)
-
-    def __getattr__(self,aname):
-        if aname == "myException":
-            self.myException = ret = self.getException();
-            return ret;
-        else:
-            raise AttributeError("no such attribute " + aname)
-
-    def __eq__(self,other):
-        if isinstance(other, ParserElement):
-            return self is other or self.__dict__ == other.__dict__
-        elif isinstance(other, basestring):
-            try:
-                self.parseString(_ustr(other), parseAll=True)
-                return True
-            except ParseBaseException:
-                return False
-        else:
-            return super(ParserElement,self)==other
-
-    def __ne__(self,other):
-        return not (self == other)
-
-    def __hash__(self):
-        return hash(id(self))
-
-    def __req__(self,other):
-        return self == other
-
-    def __rne__(self,other):
-        return not (self == other)
-
-
-class Token(ParserElement):
-    """Abstract C{ParserElement} subclass, for defining atomic matching patterns."""
-    def __init__( self ):
-        super(Token,self).__init__( savelist=False )
-
-    def setName(self, name):
-        s = super(Token,self).setName(name)
-        self.errmsg = "Expected " + self.name
-        return s
-
-
-class Empty(Token):
-    """An empty token, will always match."""
-    def __init__( self ):
-        super(Empty,self).__init__()
-        self.name = "Empty"
-        self.mayReturnEmpty = True
-        self.mayIndexError = False
-
-
-class NoMatch(Token):
-    """A token that will never match."""
-    def __init__( self ):
-        super(NoMatch,self).__init__()
-        self.name = "NoMatch"
-        self.mayReturnEmpty = True
-        self.mayIndexError = False
-        self.errmsg = "Unmatchable token"
-
-    def parseImpl( self, instring, loc, doActions=True ):
-        exc = self.myException
-        exc.loc = loc
-        exc.pstr = instring
-        raise exc
-
-
-class Literal(Token):
-    """Token to exactly match a specified string."""
-    def __init__( self, matchString ):
-        super(Literal,self).__init__()
-        self.match = matchString
-        self.matchLen = len(matchString)
-        try:
-            self.firstMatchChar = matchString[0]
-        except IndexError:
-            warnings.warn("null string passed to Literal; use Empty() instead",
-                            SyntaxWarning, stacklevel=2)
-            self.__class__ = Empty
-        self.name = '"%s"' % _ustr(self.match)
-        self.errmsg = "Expected " + self.name
-        self.mayReturnEmpty = False
-        self.mayIndexError = False
-
-    # Performance tuning: this routine gets called a *lot*
-    # if this is a single character match string  and the first character matches,
-    # short-circuit as quickly as possible, and avoid calling startswith
-    #~ @profile
-    def parseImpl( self, instring, loc, doActions=True ):
-        if (instring[loc] == self.firstMatchChar and
-            (self.matchLen==1 or instring.startswith(self.match,loc)) ):
-            return loc+self.matchLen, self.match
-        #~ raise ParseException( instring, loc, self.errmsg )
-        exc = self.myException
-        exc.loc = loc
-        exc.pstr = instring
-        raise exc
-_L = Literal
-ParserElement.literalStringClass = Literal
-
-class Keyword(Token):
-    """Token to exactly match a specified string as a keyword, that is, it must be
-       immediately followed by a non-keyword character.  Compare with C{L{Literal}}::
-         Literal("if") will match the leading C{'if'} in C{'ifAndOnlyIf'}.
-         Keyword("if") will not; it will only match the leading C{'if'} in C{'if x=1'}, or C{'if(y==2)'}
-       Accepts two optional constructor arguments in addition to the keyword string:
-       C{identChars} is a string of characters that would be valid identifier characters,
-       defaulting to all alphanumerics + "_" and "$"; C{caseless} allows case-insensitive
-       matching, default is C{False}.
-    """
-    DEFAULT_KEYWORD_CHARS = alphanums+"_$"
-
-    def __init__( self, matchString, identChars=DEFAULT_KEYWORD_CHARS, caseless=False ):
-        super(Keyword,self).__init__()
-        self.match = matchString
-        self.matchLen = len(matchString)
-        try:
-            self.firstMatchChar = matchString[0]
-        except IndexError:
-            warnings.warn("null string passed to Keyword; use Empty() instead",
-                            SyntaxWarning, stacklevel=2)
-        self.name = '"%s"' % self.match
-        self.errmsg = "Expected " + self.name
-        self.mayReturnEmpty = False
-        self.mayIndexError = False
-        self.caseless = caseless
-        if caseless:
-            self.caselessmatch = matchString.upper()
-            identChars = identChars.upper()
-        self.identChars = set(identChars)
-
-    def parseImpl( self, instring, loc, doActions=True ):
-        if self.caseless:
-            if ( (instring[ loc:loc+self.matchLen ].upper() == self.caselessmatch) and
-                 (loc >= len(instring)-self.matchLen or instring[loc+self.matchLen].upper() not in self.identChars) and
-                 (loc == 0 or instring[loc-1].upper() not in self.identChars) ):
-                return loc+self.matchLen, self.match
-        else:
-            if (instring[loc] == self.firstMatchChar and
-                (self.matchLen==1 or instring.startswith(self.match,loc)) and
-                (loc >= len(instring)-self.matchLen or instring[loc+self.matchLen] not in self.identChars) and
-                (loc == 0 or instring[loc-1] not in self.identChars) ):
-                return loc+self.matchLen, self.match
-        #~ raise ParseException( instring, loc, self.errmsg )
-        exc = self.myException
-        exc.loc = loc
-        exc.pstr = instring
-        raise exc
-
-    def copy(self):
-        c = super(Keyword,self).copy()
-        c.identChars = Keyword.DEFAULT_KEYWORD_CHARS
-        return c
-
-    def setDefaultKeywordChars( chars ):
-        """Overrides the default Keyword chars
-        """
-        Keyword.DEFAULT_KEYWORD_CHARS = chars
-    setDefaultKeywordChars = staticmethod(setDefaultKeywordChars)
-
-class CaselessLiteral(Literal):
-    """Token to match a specified string, ignoring case of letters.
-       Note: the matched results will always be in the case of the given
-       match string, NOT the case of the input text.
-    """
-    def __init__( self, matchString ):
-        super(CaselessLiteral,self).__init__( matchString.upper() )
-        # Preserve the defining literal.
-        self.returnString = matchString
-        self.name = "'%s'" % self.returnString
-        self.errmsg = "Expected " + self.name
-
-    def parseImpl( self, instring, loc, doActions=True ):
-        if instring[ loc:loc+self.matchLen ].upper() == self.match:
-            return loc+self.matchLen, self.returnString
-        #~ raise ParseException( instring, loc, self.errmsg )
-        exc = self.myException
-        exc.loc = loc
-        exc.pstr = instring
-        raise exc
-
-class CaselessKeyword(Keyword):
-    def __init__( self, matchString, identChars=Keyword.DEFAULT_KEYWORD_CHARS ):
-        super(CaselessKeyword,self).__init__( matchString, identChars, caseless=True )
-
-    def parseImpl( self, instring, loc, doActions=True ):
-        if ( (instring[ loc:loc+self.matchLen ].upper() == self.caselessmatch) and
-             (loc >= len(instring)-self.matchLen or instring[loc+self.matchLen].upper() not in self.identChars) ):
-            return loc+self.matchLen, self.match
-        #~ raise ParseException( instring, loc, self.errmsg )
-        exc = self.myException
-        exc.loc = loc
-        exc.pstr = instring
-        raise exc
-
-class Word(Token):
-    """Token for matching words composed of allowed character sets.
-       Defined with string containing all allowed initial characters,
-       an optional string containing allowed body characters (if omitted,
-       defaults to the initial character set), and an optional minimum,
-       maximum, and/or exact length.  The default value for C{min} is 1 (a
-       minimum value < 1 is not valid); the default values for C{max} and C{exact}
-       are 0, meaning no maximum or exact length restriction. An optional
-       C{exclude} parameter can list characters that might be found in
-       the input C{bodyChars} string; useful to define a word of all printables
-       except for one or two characters, for instance.
-    """
-    def __init__( self, initChars, bodyChars=None, min=1, max=0, exact=0, asKeyword=False, excludeChars=None ):
-        super(Word,self).__init__()
-        if excludeChars:
-            initChars = ''.join([c for c in initChars if c not in excludeChars])
-            if bodyChars:
-                bodyChars = ''.join([c for c in bodyChars if c not in excludeChars])
-        self.initCharsOrig = initChars
-        self.initChars = set(initChars)
-        if bodyChars :
-            self.bodyCharsOrig = bodyChars
-            self.bodyChars = set(bodyChars)
-        else:
-            self.bodyCharsOrig = initChars
-            self.bodyChars = set(initChars)
-
-        self.maxSpecified = max > 0
-
-        if min < 1:
-            raise ValueError("cannot specify a minimum length < 1; use Optional(Word()) if zero-length word is permitted")
-
-        self.minLen = min
-
-        if max > 0:
-            self.maxLen = max
-        else:
-            self.maxLen = _MAX_INT
-
-        if exact > 0:
-            self.maxLen = exact
-            self.minLen = exact
-
-        self.name = _ustr(self)
-        self.errmsg = "Expected " + self.name
-        self.mayIndexError = False
-        self.asKeyword = asKeyword
-
-        if ' ' not in self.initCharsOrig+self.bodyCharsOrig and (min==1 and max==0 and exact==0):
-            if self.bodyCharsOrig == self.initCharsOrig:
-                self.reString = "[%s]+" % _escapeRegexRangeChars(self.initCharsOrig)
-            elif len(self.bodyCharsOrig) == 1:
-                self.reString = "%s[%s]*" % \
-                                      (re.escape(self.initCharsOrig),
-                                      _escapeRegexRangeChars(self.bodyCharsOrig),)
-            else:
-                self.reString = "[%s][%s]*" % \
-                                      (_escapeRegexRangeChars(self.initCharsOrig),
-                                      _escapeRegexRangeChars(self.bodyCharsOrig),)
-            if self.asKeyword:
-                self.reString = r"\b"+self.reString+r"\b"
-            try:
-                self.re = re.compile( self.reString )
-            except:
-                self.re = None
-
-    def parseImpl( self, instring, loc, doActions=True ):
-        if self.re:
-            result = self.re.match(instring,loc)
-            if not result:
-                exc = self.myException
-                exc.loc = loc
-                exc.pstr = instring
-                raise exc
-
-            loc = result.end()
-            return loc, result.group()
-
-        if not(instring[ loc ] in self.initChars):
-            #~ raise ParseException( instring, loc, self.errmsg )
-            exc = self.myException
-            exc.loc = loc
-            exc.pstr = instring
-            raise exc
-        start = loc
-        loc += 1
-        instrlen = len(instring)
-        bodychars = self.bodyChars
-        maxloc = start + self.maxLen
-        maxloc = min( maxloc, instrlen )
-        while loc < maxloc and instring[loc] in bodychars:
-            loc += 1
-
-        throwException = False
-        if loc - start < self.minLen:
-            throwException = True
-        if self.maxSpecified and loc < instrlen and instring[loc] in bodychars:
-            throwException = True
-        if self.asKeyword:
-            if (start>0 and instring[start-1] in bodychars) or (loc<instrlen and instring[loc] in bodychars):
-                throwException = True
-
-        if throwException:
-            #~ raise ParseException( instring, loc, self.errmsg )
-            exc = self.myException
-            exc.loc = loc
-            exc.pstr = instring
-            raise exc
-
-        return loc, instring[start:loc]
-
-    def __str__( self ):
-        try:
-            return super(Word,self).__str__()
-        except:
-            pass
-
-
-        if self.strRepr is None:
-
-            def charsAsStr(s):
-                if len(s)>4:
-                    return s[:4]+"..."
-                else:
-                    return s
-
-            if ( self.initCharsOrig != self.bodyCharsOrig ):
-                self.strRepr = "W:(%s,%s)" % ( charsAsStr(self.initCharsOrig), charsAsStr(self.bodyCharsOrig) )
-            else:
-                self.strRepr = "W:(%s)" % charsAsStr(self.initCharsOrig)
-
-        return self.strRepr
-
-
-class Regex(Token):
-    """Token for matching strings that match a given regular expression.
-       Defined with string specifying the regular expression in a form recognized by the inbuilt Python re module.
-    """
-    compiledREtype = type(re.compile("[A-Z]"))
-    def __init__( self, pattern, flags=0):
-        """The parameters C{pattern} and C{flags} are passed to the C{re.compile()} function as-is. See the Python C{re} module for an explanation of the acceptable patterns and flags."""
-        super(Regex,self).__init__()
-
-        if isinstance(pattern, basestring):
-            if len(pattern) == 0:
-                warnings.warn("null string passed to Regex; use Empty() instead",
-                        SyntaxWarning, stacklevel=2)
-
-            self.pattern = pattern
-            self.flags = flags
-
-            try:
-                self.re = re.compile(self.pattern, self.flags)
-                self.reString = self.pattern
-            except sre_constants.error:
-                warnings.warn("invalid pattern (%s) passed to Regex" % pattern,
-                    SyntaxWarning, stacklevel=2)
-                raise
-
-        elif isinstance(pattern, Regex.compiledREtype):
-            self.re = pattern
-            self.pattern = \
-            self.reString = str(pattern)
-            self.flags = flags
-
-        else:
-            raise ValueError("Regex may only be constructed with a string or a compiled RE object")
-
-        self.name = _ustr(self)
-        self.errmsg = "Expected " + self.name
-        self.mayIndexError = False
-        self.mayReturnEmpty = True
-
-    def parseImpl( self, instring, loc, doActions=True ):
-        result = self.re.match(instring,loc)
-        if not result:
-            exc = self.myException
-            exc.loc = loc
-            exc.pstr = instring
-            raise exc
-
-        loc = result.end()
-        d = result.groupdict()
-        ret = ParseResults(result.group())
-        if d:
-            for k in d:
-                ret[k] = d[k]
-        return loc,ret
-
-    def __str__( self ):
-        try:
-            return super(Regex,self).__str__()
-        except:
-            pass
-
-        if self.strRepr is None:
-            self.strRepr = "Re:(%s)" % repr(self.pattern)
-
-        return self.strRepr
-
-
-class QuotedString(Token):
-    """Token for matching strings that are delimited by quoting characters.
-    """
-    def __init__( self, quoteChar, escChar=None, escQuote=None, multiline=False, unquoteResults=True, endQuoteChar=None):
-        """
-           Defined with the following parameters:
-            - quoteChar - string of one or more characters defining the quote delimiting string
-            - escChar - character to escape quotes, typically backslash (default=None)
-            - escQuote - special quote sequence to escape an embedded quote string (such as SQL's "" to escape an embedded ") (default=None)
-            - multiline - boolean indicating whether quotes can span multiple lines (default=C{False})
-            - unquoteResults - boolean indicating whether the matched text should be unquoted (default=C{True})
-            - endQuoteChar - string of one or more characters defining the end of the quote delimited string (default=C{None} => same as quoteChar)
-        """
-        super(QuotedString,self).__init__()
-
-        # remove white space from quote chars - wont work anyway
-        quoteChar = quoteChar.strip()
-        if len(quoteChar) == 0:
-            warnings.warn("quoteChar cannot be the empty string",SyntaxWarning,stacklevel=2)
-            raise SyntaxError()
-
-        if endQuoteChar is None:
-            endQuoteChar = quoteChar
-        else:
-            endQuoteChar = endQuoteChar.strip()
-            if len(endQuoteChar) == 0:
-                warnings.warn("endQuoteChar cannot be the empty string",SyntaxWarning,stacklevel=2)
-                raise SyntaxError()
-
-        self.quoteChar = quoteChar
-        self.quoteCharLen = len(quoteChar)
-        self.firstQuoteChar = quoteChar[0]
-        self.endQuoteChar = endQuoteChar
-        self.endQuoteCharLen = len(endQuoteChar)
-        self.escChar = escChar
-        self.escQuote = escQuote
-        self.unquoteResults = unquoteResults
-
-        if multiline:
-            self.flags = re.MULTILINE | re.DOTALL
-            self.pattern = r'%s(?:[^%s%s]' % \
-                ( re.escape(self.quoteChar),
-                  _escapeRegexRangeChars(self.endQuoteChar[0]),
-                  (escChar is not None and _escapeRegexRangeChars(escChar) or '') )
-        else:
-            self.flags = 0
-            self.pattern = r'%s(?:[^%s\n\r%s]' % \
-                ( re.escape(self.quoteChar),
-                  _escapeRegexRangeChars(self.endQuoteChar[0]),
-                  (escChar is not None and _escapeRegexRangeChars(escChar) or '') )
-        if len(self.endQuoteChar) > 1:
-            self.pattern += (
-                '|(?:' + ')|(?:'.join(["%s[^%s]" % (re.escape(self.endQuoteChar[:i]),
-                                               _escapeRegexRangeChars(self.endQuoteChar[i]))
-                                    for i in range(len(self.endQuoteChar)-1,0,-1)]) + ')'
-                )
-        if escQuote:
-            self.pattern += (r'|(?:%s)' % re.escape(escQuote))
-        if escChar:
-            self.pattern += (r'|(?:%s.)' % re.escape(escChar))
-            charset = ''.join(set(self.quoteChar[0]+self.endQuoteChar[0])).replace('^',r'\^').replace('-',r'\-')
-            self.escCharReplacePattern = re.escape(self.escChar)+("([%s])" % charset)
-        self.pattern += (r')*%s' % re.escape(self.endQuoteChar))
-
-        try:
-            self.re = re.compile(self.pattern, self.flags)
-            self.reString = self.pattern
-        except sre_constants.error:
-            warnings.warn("invalid pattern (%s) passed to Regex" % self.pattern,
-                SyntaxWarning, stacklevel=2)
-            raise
-
-        self.name = _ustr(self)
-        self.errmsg = "Expected " + self.name
-        self.mayIndexError = False
-        self.mayReturnEmpty = True
-
-    def parseImpl( self, instring, loc, doActions=True ):
-        result = instring[loc] == self.firstQuoteChar and self.re.match(instring,loc) or None
-        if not result:
-            exc = self.myException
-            exc.loc = loc
-            exc.pstr = instring
-            raise exc
-
-        loc = result.end()
-        ret = result.group()
-
-        if self.unquoteResults:
-
-            # strip off quotes
-            ret = ret[self.quoteCharLen:-self.endQuoteCharLen]
-
-            if isinstance(ret,basestring):
-                # replace escaped characters
-                if self.escChar:
-                    ret = re.sub(self.escCharReplacePattern,"\g<1>",ret)
-
-                # replace escaped quotes
-                if self.escQuote:
-                    ret = ret.replace(self.escQuote, self.endQuoteChar)
-
-        return loc, ret
-
-    def __str__( self ):
-        try:
-            return super(QuotedString,self).__str__()
-        except:
-            pass
-
-        if self.strRepr is None:
-            self.strRepr = "quoted string, starting with %s ending with %s" % (self.quoteChar, self.endQuoteChar)
-
-        return self.strRepr
-
-
-class CharsNotIn(Token):
-    """Token for matching words composed of characters *not* in a given set.
-       Defined with string containing all disallowed characters, and an optional
-       minimum, maximum, and/or exact length.  The default value for C{min} is 1 (a
-       minimum value < 1 is not valid); the default values for C{max} and C{exact}
-       are 0, meaning no maximum or exact length restriction.
-    """
-    def __init__( self, notChars, min=1, max=0, exact=0 ):
-        super(CharsNotIn,self).__init__()
-        self.skipWhitespace = False
-        self.notChars = notChars
-
-        if min < 1:
-            raise ValueError("cannot specify a minimum length < 1; use Optional(CharsNotIn()) if zero-length char group is permitted")
-
-        self.minLen = min
-
-        if max > 0:
-            self.maxLen = max
-        else:
-            self.maxLen = _MAX_INT
-
-        if exact > 0:
-            self.maxLen = exact
-            self.minLen = exact
-
-        self.name = _ustr(self)
-        self.errmsg = "Expected " + self.name
-        self.mayReturnEmpty = ( self.minLen == 0 )
-        self.mayIndexError = False
-
-    def parseImpl( self, instring, loc, doActions=True ):
-        if instring[loc] in self.notChars:
-            #~ raise ParseException( instring, loc, self.errmsg )
-            exc = self.myException
-            exc.loc = loc
-            exc.pstr = instring
-            raise exc
-
-        start = loc
-        loc += 1
-        notchars = self.notChars
-        maxlen = min( start+self.maxLen, len(instring) )
-        while loc < maxlen and \
-              (instring[loc] not in notchars):
-            loc += 1
-
-        if loc - start < self.minLen:
-            #~ raise ParseException( instring, loc, self.errmsg )
-            exc = self.myException
-            exc.loc = loc
-            exc.pstr = instring
-            raise exc
-
-        return loc, instring[start:loc]
-
-    def __str__( self ):
-        try:
-            return super(CharsNotIn, self).__str__()
-        except:
-            pass
-
-        if self.strRepr is None:
-            if len(self.notChars) > 4:
-                self.strRepr = "!W:(%s...)" % self.notChars[:4]
-            else:
-                self.strRepr = "!W:(%s)" % self.notChars
-
-        return self.strRepr
-
-class White(Token):
-    """Special matching class for matching whitespace.  Normally, whitespace is ignored
-       by pyparsing grammars.  This class is included when some whitespace structures
-       are significant.  Define with a string containing the whitespace characters to be
-       matched; default is C{" \\t\\r\\n"}.  Also takes optional C{min}, C{max}, and C{exact} arguments,
-       as defined for the C{L{Word}} class."""
-    whiteStrs = {
-        " " : "<SPC>",
-        "\t": "<TAB>",
-        "\n": "<LF>",
-        "\r": "<CR>",
-        "\f": "<FF>",
-        }
-    def __init__(self, ws=" \t\r\n", min=1, max=0, exact=0):
-        super(White,self).__init__()
-        self.matchWhite = ws
-        self.setWhitespaceChars( "".join([c for c in self.whiteChars if c not in self.matchWhite]) )
-        #~ self.leaveWhitespace()
-        self.name = ("".join([White.whiteStrs[c] for c in self.matchWhite]))
-        self.mayReturnEmpty = True
-        self.errmsg = "Expected " + self.name
-
-        self.minLen = min
-
-        if max > 0:
-            self.maxLen = max
-        else:
-            self.maxLen = _MAX_INT
-
-        if exact > 0:
-            self.maxLen = exact
-            self.minLen = exact
-
-    def parseImpl( self, instring, loc, doActions=True ):
-        if not(instring[ loc ] in self.matchWhite):
-            #~ raise ParseException( instring, loc, self.errmsg )
-            exc = self.myException
-            exc.loc = loc
-            exc.pstr = instring
-            raise exc
-        start = loc
-        loc += 1
-        maxloc = start + self.maxLen
-        maxloc = min( maxloc, len(instring) )
-        while loc < maxloc and instring[loc] in self.matchWhite:
-            loc += 1
-
-        if loc - start < self.minLen:
-            #~ raise ParseException( instring, loc, self.errmsg )
-            exc = self.myException
-            exc.loc = loc
-            exc.pstr = instring
-            raise exc
-
-        return loc, instring[start:loc]
-
-
-class _PositionToken(Token):
-    def __init__( self ):
-        super(_PositionToken,self).__init__()
-        self.name=self.__class__.__name__
-        self.mayReturnEmpty = True
-        self.mayIndexError = False
-
-class GoToColumn(_PositionToken):
-    """Token to advance to a specific column of input text; useful for tabular report scraping."""
-    def __init__( self, colno ):
-        super(GoToColumn,self).__init__()
-        self.col = colno
-
-    def preParse( self, instring, loc ):
-        if col(loc,instring) != self.col:
-            instrlen = len(instring)
-            if self.ignoreExprs:
-                loc = self._skipIgnorables( instring, loc )
-            while loc < instrlen and instring[loc].isspace() and col( loc, instring ) != self.col :
-                loc += 1
-        return loc
-
-    def parseImpl( self, instring, loc, doActions=True ):
-        thiscol = col( loc, instring )
-        if thiscol > self.col:
-            raise ParseException( instring, loc, "Text not in expected column", self )
-        newloc = loc + self.col - thiscol
-        ret = instring[ loc: newloc ]
-        return newloc, ret
-
-class LineStart(_PositionToken):
-    """Matches if current position is at the beginning of a line within the parse string"""
-    def __init__( self ):
-        super(LineStart,self).__init__()
-        self.setWhitespaceChars( ParserElement.DEFAULT_WHITE_CHARS.replace("\n","") )
-        self.errmsg = "Expected start of line"
-
-    def preParse( self, instring, loc ):
-        preloc = super(LineStart,self).preParse(instring,loc)
-        if instring[preloc] == "\n":
-            loc += 1
-        return loc
-
-    def parseImpl( self, instring, loc, doActions=True ):
-        if not( loc==0 or
-            (loc == self.preParse( instring, 0 )) or
-            (instring[loc-1] == "\n") ): #col(loc, instring) != 1:
-            #~ raise ParseException( instring, loc, "Expected start of line" )
-            exc = self.myException
-            exc.loc = loc
-            exc.pstr = instring
-            raise exc
-        return loc, []
-
-class LineEnd(_PositionToken):
-    """Matches if current position is at the end of a line within the parse string"""
-    def __init__( self ):
-        super(LineEnd,self).__init__()
-        self.setWhitespaceChars( ParserElement.DEFAULT_WHITE_CHARS.replace("\n","") )
-        self.errmsg = "Expected end of line"
-
-    def parseImpl( self, instring, loc, doActions=True ):
-        if loc<len(instring):
-            if instring[loc] == "\n":
-                return loc+1, "\n"
-            else:
-                #~ raise ParseException( instring, loc, "Expected end of line" )
-                exc = self.myException
-                exc.loc = loc
-                exc.pstr = instring
-                raise exc
-        elif loc == len(instring):
-            return loc+1, []
-        else:
-            exc = self.myException
-            exc.loc = loc
-            exc.pstr = instring
-            raise exc
-
-class StringStart(_PositionToken):
-    """Matches if current position is at the beginning of the parse string"""
-    def __init__( self ):
-        super(StringStart,self).__init__()
-        self.errmsg = "Expected start of text"
-
-    def parseImpl( self, instring, loc, doActions=True ):
-        if loc != 0:
-            # see if entire string up to here is just whitespace and ignoreables
-            if loc != self.preParse( instring, 0 ):
-                #~ raise ParseException( instring, loc, "Expected start of text" )
-                exc = self.myException
-                exc.loc = loc
-                exc.pstr = instring
-                raise exc
-        return loc, []
-
-class StringEnd(_PositionToken):
-    """Matches if current position is at the end of the parse string"""
-    def __init__( self ):
-        super(StringEnd,self).__init__()
-        self.errmsg = "Expected end of text"
-
-    def parseImpl( self, instring, loc, doActions=True ):
-        if loc < len(instring):
-            #~ raise ParseException( instring, loc, "Expected end of text" )
-            exc = self.myException
-            exc.loc = loc
-            exc.pstr = instring
-            raise exc
-        elif loc == len(instring):
-            return loc+1, []
-        elif loc > len(instring):
-            return loc, []
-        else:
-            exc = self.myException
-            exc.loc = loc
-            exc.pstr = instring
-            raise exc
-
-class WordStart(_PositionToken):
-    """Matches if the current position is at the beginning of a Word, and
-       is not preceded by any character in a given set of C{wordChars}
-       (default=C{printables}). To emulate the C{\b} behavior of regular expressions,
-       use C{WordStart(alphanums)}. C{WordStart} will also match at the beginning of
-       the string being parsed, or at the beginning of a line.
-    """
-    def __init__(self, wordChars = printables):
-        super(WordStart,self).__init__()
-        self.wordChars = set(wordChars)
-        self.errmsg = "Not at the start of a word"
-
-    def parseImpl(self, instring, loc, doActions=True ):
-        if loc != 0:
-            if (instring[loc-1] in self.wordChars or
-                instring[loc] not in self.wordChars):
-                exc = self.myException
-                exc.loc = loc
-                exc.pstr = instring
-                raise exc
-        return loc, []
-
-class WordEnd(_PositionToken):
-    """Matches if the current position is at the end of a Word, and
-       is not followed by any character in a given set of C{wordChars}
-       (default=C{printables}). To emulate the C{\b} behavior of regular expressions,
-       use C{WordEnd(alphanums)}. C{WordEnd} will also match at the end of
-       the string being parsed, or at the end of a line.
-    """
-    def __init__(self, wordChars = printables):
-        super(WordEnd,self).__init__()
-        self.wordChars = set(wordChars)
-        self.skipWhitespace = False
-        self.errmsg = "Not at the end of a word"
-
-    def parseImpl(self, instring, loc, doActions=True ):
-        instrlen = len(instring)
-        if instrlen>0 and loc<instrlen:
-            if (instring[loc] in self.wordChars or
-                instring[loc-1] not in self.wordChars):
-                #~ raise ParseException( instring, loc, "Expected end of word" )
-                exc = self.myException
-                exc.loc = loc
-                exc.pstr = instring
-                raise exc
-        return loc, []
-
-
-class ParseExpression(ParserElement):
-    """Abstract subclass of ParserElement, for combining and post-processing parsed tokens."""
-    def __init__( self, exprs, savelist = False ):
-        super(ParseExpression,self).__init__(savelist)
-        if isinstance( exprs, list ):
-            self.exprs = exprs
-        elif isinstance( exprs, basestring ):
-            self.exprs = [ Literal( exprs ) ]
-        else:
-            try:
-                self.exprs = list( exprs )
-            except TypeError:
-                self.exprs = [ exprs ]
-        self.callPreparse = False
-
-    def __getitem__( self, i ):
-        return self.exprs[i]
-
-    def append( self, other ):
-        self.exprs.append( other )
-        self.strRepr = None
-        return self
-
-    def leaveWhitespace( self ):
-        """Extends C{leaveWhitespace} defined in base class, and also invokes C{leaveWhitespace} on
-           all contained expressions."""
-        self.skipWhitespace = False
-        self.exprs = [ e.copy() for e in self.exprs ]
-        for e in self.exprs:
-            e.leaveWhitespace()
-        return self
-
-    def ignore( self, other ):
-        if isinstance( other, Suppress ):
-            if other not in self.ignoreExprs:
-                super( ParseExpression, self).ignore( other )
-                for e in self.exprs:
-                    e.ignore( self.ignoreExprs[-1] )
-        else:
-            super( ParseExpression, self).ignore( other )
-            for e in self.exprs:
-                e.ignore( self.ignoreExprs[-1] )
-        return self
-
-    def __str__( self ):
-        try:
-            return super(ParseExpression,self).__str__()
-        except:
-            pass
-
-        if self.strRepr is None:
-            self.strRepr = "%s:(%s)" % ( self.__class__.__name__, _ustr(self.exprs) )
-        return self.strRepr
-
-    def streamline( self ):
-        super(ParseExpression,self).streamline()
-
-        for e in self.exprs:
-            e.streamline()
-
-        # collapse nested And's of the form And( And( And( a,b), c), d) to And( a,b,c,d )
-        # but only if there are no parse actions or resultsNames on the nested And's
-        # (likewise for Or's and MatchFirst's)
-        if ( len(self.exprs) == 2 ):
-            other = self.exprs[0]
-            if ( isinstance( other, self.__class__ ) and
-                  not(other.parseAction) and
-                  other.resultsName is None and
-                  not other.debug ):
-                self.exprs = other.exprs[:] + [ self.exprs[1] ]
-                self.strRepr = None
-                self.mayReturnEmpty |= other.mayReturnEmpty
-                self.mayIndexError  |= other.mayIndexError
-
-            other = self.exprs[-1]
-            if ( isinstance( other, self.__class__ ) and
-                  not(other.parseAction) and
-                  other.resultsName is None and
-                  not other.debug ):
-                self.exprs = self.exprs[:-1] + other.exprs[:]
-                self.strRepr = None
-                self.mayReturnEmpty |= other.mayReturnEmpty
-                self.mayIndexError  |= other.mayIndexError
-
-        return self
-
-    def setResultsName( self, name, listAllMatches=False ):
-        ret = super(ParseExpression,self).setResultsName(name,listAllMatches)
-        return ret
-
-    def validate( self, validateTrace=[] ):
-        tmp = validateTrace[:]+[self]
-        for e in self.exprs:
-            e.validate(tmp)
-        self.checkRecursion( [] )
-
-    def copy(self):
-        ret = super(ParseExpression,self).copy()
-        ret.exprs = [e.copy() for e in self.exprs]
-        return ret
-
-class And(ParseExpression):
-    """Requires all given C{ParseExpression}s to be found in the given order.
-       Expressions may be separated by whitespace.
-       May be constructed using the C{'+'} operator.
-    """
-
-    class _ErrorStop(Empty):
-        def __init__(self, *args, **kwargs):
-            super(And._ErrorStop,self).__init__(*args, **kwargs)
-            self.name = '-'
-            self.leaveWhitespace()
-
-    def __init__( self, exprs, savelist = True ):
-        super(And,self).__init__(exprs, savelist)
-        self.mayReturnEmpty = True
-        for e in self.exprs:
-            if not e.mayReturnEmpty:
-                self.mayReturnEmpty = False
-                break
-        self.setWhitespaceChars( exprs[0].whiteChars )
-        self.skipWhitespace = exprs[0].skipWhitespace
-        self.callPreparse = True
-
-    def parseImpl( self, instring, loc, doActions=True ):
-        # pass False as last arg to _parse for first element, since we already
-        # pre-parsed the string as part of our And pre-parsing
-        loc, resultlist = self.exprs[0]._parse( instring, loc, doActions, callPreParse=False )
-        errorStop = False
-        for e in self.exprs[1:]:
-            if isinstance(e, And._ErrorStop):
-                errorStop = True
-                continue
-            if errorStop:
-                try:
-                    loc, exprtokens = e._parse( instring, loc, doActions )
-                except ParseSyntaxException:
-                    raise
-                except ParseBaseException, pe:
-                    raise ParseSyntaxException(pe)
-                except IndexError:
-                    raise ParseSyntaxException( ParseException(instring, len(instring), self.errmsg, self) )
-            else:
-                loc, exprtokens = e._parse( instring, loc, doActions )
-            if exprtokens or exprtokens.keys():
-                resultlist += exprtokens
-        return loc, resultlist
-
-    def __iadd__(self, other ):
-        if isinstance( other, basestring ):
-            other = Literal( other )
-        return self.append( other ) #And( [ self, other ] )
-
-    def checkRecursion( self, parseElementList ):
-        subRecCheckList = parseElementList[:] + [ self ]
-        for e in self.exprs:
-            e.checkRecursion( subRecCheckList )
-            if not e.mayReturnEmpty:
-                break
-
-    def __str__( self ):
-        if hasattr(self,"name"):
-            return self.name
-
-        if self.strRepr is None:
-            self.strRepr = "{" + " ".join( [ _ustr(e) for e in self.exprs ] ) + "}"
-
-        return self.strRepr
-
-
-class Or(ParseExpression):
-    """Requires that at least one C{ParseExpression} is found.
-       If two expressions match, the expression that matches the longest string will be used.
-       May be constructed using the C{'^'} operator.
-    """
-    def __init__( self, exprs, savelist = False ):
-        super(Or,self).__init__(exprs, savelist)
-        self.mayReturnEmpty = False
-        for e in self.exprs:
-            if e.mayReturnEmpty:
-                self.mayReturnEmpty = True
-                break
-
-    def parseImpl( self, instring, loc, doActions=True ):
-        maxExcLoc = -1
-        maxMatchLoc = -1
-        maxException = None
-        for e in self.exprs:
-            try:
-                loc2 = e.tryParse( instring, loc )
-            except ParseException, err:
-                if err.loc > maxExcLoc:
-                    maxException = err
-                    maxExcLoc = err.loc
-            except IndexError:
-                if len(instring) > maxExcLoc:
-                    maxException = ParseException(instring,len(instring),e.errmsg,self)
-                    maxExcLoc = len(instring)
-            else:
-                if loc2 > maxMatchLoc:
-                    maxMatchLoc = loc2
-                    maxMatchExp = e
-
-        if maxMatchLoc < 0:
-            if maxException is not None:
-                raise maxException
-            else:
-                raise ParseException(instring, loc, "no defined alternatives to match", self)
-
-        return maxMatchExp._parse( instring, loc, doActions )
-
-    def __ixor__(self, other ):
-        if isinstance( other, basestring ):
-            other = ParserElement.literalStringClass( other )
-        return self.append( other ) #Or( [ self, other ] )
-
-    def __str__( self ):
-        if hasattr(self,"name"):
-            return self.name
-
-        if self.strRepr is None:
-            self.strRepr = "{" + " ^ ".join( [ _ustr(e) for e in self.exprs ] ) + "}"
-
-        return self.strRepr
-
-    def checkRecursion( self, parseElementList ):
-        subRecCheckList = parseElementList[:] + [ self ]
-        for e in self.exprs:
-            e.checkRecursion( subRecCheckList )
-
-
-class MatchFirst(ParseExpression):
-    """Requires that at least one C{ParseExpression} is found.
-       If two expressions match, the first one listed is the one that will match.
-       May be constructed using the C{'|'} operator.
-    """
-    def __init__( self, exprs, savelist = False ):
-        super(MatchFirst,self).__init__(exprs, savelist)
-        if exprs:
-            self.mayReturnEmpty = False
-            for e in self.exprs:
-                if e.mayReturnEmpty:
-                    self.mayReturnEmpty = True
-                    break
-        else:
-            self.mayReturnEmpty = True
-
-    def parseImpl( self, instring, loc, doActions=True ):
-        maxExcLoc = -1
-        maxException = None
-        for e in self.exprs:
-            try:
-                ret = e._parse( instring, loc, doActions )
-                return ret
-            except ParseException, err:
-                if err.loc > maxExcLoc:
-                    maxException = err
-                    maxExcLoc = err.loc
-            except IndexError:
-                if len(instring) > maxExcLoc:
-                    maxException = ParseException(instring,len(instring),e.errmsg,self)
-                    maxExcLoc = len(instring)
-
-        # only got here if no expression matched, raise exception for match that made it the furthest
-        else:
-            if maxException is not None:
-                raise maxException
-            else:
-                raise ParseException(instring, loc, "no defined alternatives to match", self)
-
-    def __ior__(self, other ):
-        if isinstance( other, basestring ):
-            other = ParserElement.literalStringClass( other )
-        return self.append( other ) #MatchFirst( [ self, other ] )
-
-    def __str__( self ):
-        if hasattr(self,"name"):
-            return self.name
-
-        if self.strRepr is None:
-            self.strRepr = "{" + " | ".join( [ _ustr(e) for e in self.exprs ] ) + "}"
-
-        return self.strRepr
-
-    def checkRecursion( self, parseElementList ):
-        subRecCheckList = parseElementList[:] + [ self ]
-        for e in self.exprs:
-            e.checkRecursion( subRecCheckList )
-
-
-class Each(ParseExpression):
-    """Requires all given C{ParseExpression}s to be found, but in any order.
-       Expressions may be separated by whitespace.
-       May be constructed using the C{'&'} operator.
-    """
-    def __init__( self, exprs, savelist = True ):
-        super(Each,self).__init__(exprs, savelist)
-        self.mayReturnEmpty = True
-        for e in self.exprs:
-            if not e.mayReturnEmpty:
-                self.mayReturnEmpty = False
-                break
-        self.skipWhitespace = True
-        self.initExprGroups = True
-
-    def parseImpl( self, instring, loc, doActions=True ):
-        if self.initExprGroups:
-            opt1 = [ e.expr for e in self.exprs if isinstance(e,Optional) ]
-            opt2 = [ e for e in self.exprs if e.mayReturnEmpty and e not in opt1 ]
-            self.optionals = opt1 + opt2
-            self.multioptionals = [ e.expr for e in self.exprs if isinstance(e,ZeroOrMore) ]
-            self.multirequired = [ e.expr for e in self.exprs if isinstance(e,OneOrMore) ]
-            self.required = [ e for e in self.exprs if not isinstance(e,(Optional,ZeroOrMore,OneOrMore)) ]
-            self.required += self.multirequired
-            self.initExprGroups = False
-        tmpLoc = loc
-        tmpReqd = self.required[:]
-        tmpOpt  = self.optionals[:]
-        matchOrder = []
-
-        keepMatching = True
-        while keepMatching:
-            tmpExprs = tmpReqd + tmpOpt + self.multioptionals + self.multirequired
-            failed = []
-            for e in tmpExprs:
-                try:
-                    tmpLoc = e.tryParse( instring, tmpLoc )
-                except ParseException:
-                    failed.append(e)
-                else:
-                    matchOrder.append(e)
-                    if e in tmpReqd:
-                        tmpReqd.remove(e)
-                    elif e in tmpOpt:
-                        tmpOpt.remove(e)
-            if len(failed) == len(tmpExprs):
-                keepMatching = False
-
-        if tmpReqd:
-            missing = ", ".join( [ _ustr(e) for e in tmpReqd ] )
-            raise ParseException(instring,loc,"Missing one or more required elements (%s)" % missing )
-
-        # add any unmatched Optionals, in case they have default values defined
-        matchOrder += [e for e in self.exprs if isinstance(e,Optional) and e.expr in tmpOpt]
-
-        resultlist = []
-        for e in matchOrder:
-            loc,results = e._parse(instring,loc,doActions)
-            resultlist.append(results)
-
-        finalResults = ParseResults([])
-        for r in resultlist:
-            dups = {}
-            for k in r.keys():
-                if k in finalResults.keys():
-                    tmp = ParseResults(finalResults[k])
-                    tmp += ParseResults(r[k])
-                    dups[k] = tmp
-            finalResults += ParseResults(r)
-            for k,v in dups.items():
-                finalResults[k] = v
-        return loc, finalResults
-
-    def __str__( self ):
-        if hasattr(self,"name"):
-            return self.name
-
-        if self.strRepr is None:
-            self.strRepr = "{" + " & ".join( [ _ustr(e) for e in self.exprs ] ) + "}"
-
-        return self.strRepr
-
-    def checkRecursion( self, parseElementList ):
-        subRecCheckList = parseElementList[:] + [ self ]
-        for e in self.exprs:
-            e.checkRecursion( subRecCheckList )
-
-
-class ParseElementEnhance(ParserElement):
-    """Abstract subclass of C{ParserElement}, for combining and post-processing parsed tokens."""
-    def __init__( self, expr, savelist=False ):
-        super(ParseElementEnhance,self).__init__(savelist)
-        if isinstance( expr, basestring ):
-            expr = Literal(expr)
-        self.expr = expr
-        self.strRepr = None
-        if expr is not None:
-            self.mayIndexError = expr.mayIndexError
-            self.mayReturnEmpty = expr.mayReturnEmpty
-            self.setWhitespaceChars( expr.whiteChars )
-            self.skipWhitespace = expr.skipWhitespace
-            self.saveAsList = expr.saveAsList
-            self.callPreparse = expr.callPreparse
-            self.ignoreExprs.extend(expr.ignoreExprs)
-
-    def parseImpl( self, instring, loc, doActions=True ):
-        if self.expr is not None:
-            return self.expr._parse( instring, loc, doActions, callPreParse=False )
-        else:
-            raise ParseException("",loc,self.errmsg,self)
-
-    def leaveWhitespace( self ):
-        self.skipWhitespace = False
-        self.expr = self.expr.copy()
-        if self.expr is not None:
-            self.expr.leaveWhitespace()
-        return self
-
-    def ignore( self, other ):
-        if isinstance( other, Suppress ):
-            if other not in self.ignoreExprs:
-                super( ParseElementEnhance, self).ignore( other )
-                if self.expr is not None:
-                    self.expr.ignore( self.ignoreExprs[-1] )
-        else:
-            super( ParseElementEnhance, self).ignore( other )
-            if self.expr is not None:
-                self.expr.ignore( self.ignoreExprs[-1] )
-        return self
-
-    def streamline( self ):
-        super(ParseElementEnhance,self).streamline()
-        if self.expr is not None:
-            self.expr.streamline()
-        return self
-
-    def checkRecursion( self, parseElementList ):
-        if self in parseElementList:
-            raise RecursiveGrammarException( parseElementList+[self] )
-        subRecCheckList = parseElementList[:] + [ self ]
-        if self.expr is not None:
-            self.expr.checkRecursion( subRecCheckList )
-
-    def validate( self, validateTrace=[] ):
-        tmp = validateTrace[:]+[self]
-        if self.expr is not None:
-            self.expr.validate(tmp)
-        self.checkRecursion( [] )
-
-    def __str__( self ):
-        try:
-            return super(ParseElementEnhance,self).__str__()
-        except:
-            pass
-
-        if self.strRepr is None and self.expr is not None:
-            self.strRepr = "%s:(%s)" % ( self.__class__.__name__, _ustr(self.expr) )
-        return self.strRepr
-
-
-class FollowedBy(ParseElementEnhance):
-    """Lookahead matching of the given parse expression.  C{FollowedBy}
-    does *not* advance the parsing position within the input string, it only
-    verifies that the specified parse expression matches at the current
-    position.  C{FollowedBy} always returns a null token list."""
-    def __init__( self, expr ):
-        super(FollowedBy,self).__init__(expr)
-        self.mayReturnEmpty = True
-
-    def parseImpl( self, instring, loc, doActions=True ):
-        self.expr.tryParse( instring, loc )
-        return loc, []
-
-
-class NotAny(ParseElementEnhance):
-    """Lookahead to disallow matching with the given parse expression.  C{NotAny}
-    does *not* advance the parsing position within the input string, it only
-    verifies that the specified parse expression does *not* match at the current
-    position.  Also, C{NotAny} does *not* skip over leading whitespace. C{NotAny}
-    always returns a null token list.  May be constructed using the '~' operator."""
-    def __init__( self, expr ):
-        super(NotAny,self).__init__(expr)
-        #~ self.leaveWhitespace()
-        self.skipWhitespace = False  # do NOT use self.leaveWhitespace(), don't want to propagate to exprs
-        self.mayReturnEmpty = True
-        self.errmsg = "Found unwanted token, "+_ustr(self.expr)
-
-    def parseImpl( self, instring, loc, doActions=True ):
-        try:
-            self.expr.tryParse( instring, loc )
-        except (ParseException,IndexError):
-            pass
-        else:
-            #~ raise ParseException(instring, loc, self.errmsg )
-            exc = self.myException
-            exc.loc = loc
-            exc.pstr = instring
-            raise exc
-        return loc, []
-
-    def __str__( self ):
-        if hasattr(self,"name"):
-            return self.name
-
-        if self.strRepr is None:
-            self.strRepr = "~{" + _ustr(self.expr) + "}"
-
-        return self.strRepr
-
-
-class ZeroOrMore(ParseElementEnhance):
-    """Optional repetition of zero or more of the given expression."""
-    def __init__( self, expr ):
-        super(ZeroOrMore,self).__init__(expr)
-        self.mayReturnEmpty = True
-
-    def parseImpl( self, instring, loc, doActions=True ):
-        tokens = []
-        try:
-            loc, tokens = self.expr._parse( instring, loc, doActions, callPreParse=False )
-            hasIgnoreExprs = ( len(self.ignoreExprs) > 0 )
-            while 1:
-                if hasIgnoreExprs:
-                    preloc = self._skipIgnorables( instring, loc )
-                else:
-                    preloc = loc
-                loc, tmptokens = self.expr._parse( instring, preloc, doActions )
-                if tmptokens or tmptokens.keys():
-                    tokens += tmptokens
-        except (ParseException,IndexError):
-            pass
-
-        return loc, tokens
-
-    def __str__( self ):
-        if hasattr(self,"name"):
-            return self.name
-
-        if self.strRepr is None:
-            self.strRepr = "[" + _ustr(self.expr) + "]..."
-
-        return self.strRepr
-
-    def setResultsName( self, name, listAllMatches=False ):
-        ret = super(ZeroOrMore,self).setResultsName(name,listAllMatches)
-        ret.saveAsList = True
-        return ret
-
-
-class OneOrMore(ParseElementEnhance):
-    """Repetition of one or more of the given expression."""
-    def parseImpl( self, instring, loc, doActions=True ):
-        # must be at least one
-        loc, tokens = self.expr._parse( instring, loc, doActions, callPreParse=False )
-        try:
-            hasIgnoreExprs = ( len(self.ignoreExprs) > 0 )
-            while 1:
-                if hasIgnoreExprs:
-                    preloc = self._skipIgnorables( instring, loc )
-                else:
-                    preloc = loc
-                loc, tmptokens = self.expr._parse( instring, preloc, doActions )
-                if tmptokens or tmptokens.keys():
-                    tokens += tmptokens
-        except (ParseException,IndexError):
-            pass
-
-        return loc, tokens
-
-    def __str__( self ):
-        if hasattr(self,"name"):
-            return self.name
-
-        if self.strRepr is None:
-            self.strRepr = "{" + _ustr(self.expr) + "}..."
-
-        return self.strRepr
-
-    def setResultsName( self, name, listAllMatches=False ):
-        ret = super(OneOrMore,self).setResultsName(name,listAllMatches)
-        ret.saveAsList = True
-        return ret
-
-class _NullToken(object):
-    def __bool__(self):
-        return False
-    __nonzero__ = __bool__
-    def __str__(self):
-        return ""
-
-_optionalNotMatched = _NullToken()
-class Optional(ParseElementEnhance):
-    """Optional matching of the given expression.
-       A default return string can also be specified, if the optional expression
-       is not found.
-    """
-    def __init__( self, exprs, default=_optionalNotMatched ):
-        super(Optional,self).__init__( exprs, savelist=False )
-        self.defaultValue = default
-        self.mayReturnEmpty = True
-
-    def parseImpl( self, instring, loc, doActions=True ):
-        try:
-            loc, tokens = self.expr._parse( instring, loc, doActions, callPreParse=False )
-        except (ParseException,IndexError):
-            if self.defaultValue is not _optionalNotMatched:
-                if self.expr.resultsName:
-                    tokens = ParseResults([ self.defaultValue ])
-                    tokens[self.expr.resultsName] = self.defaultValue
-                else:
-                    tokens = [ self.defaultValue ]
-            else:
-                tokens = []
-        return loc, tokens
-
-    def __str__( self ):
-        if hasattr(self,"name"):
-            return self.name
-
-        if self.strRepr is None:
-            self.strRepr = "[" + _ustr(self.expr) + "]"
-
-        return self.strRepr
-
-
-class SkipTo(ParseElementEnhance):
-    """Token for skipping over all undefined text until the matched expression is found.
-       If C{include} is set to true, the matched expression is also parsed (the skipped text
-       and matched expression are returned as a 2-element list).  The C{ignore}
-       argument is used to define grammars (typically quoted strings and comments) that
-       might contain false matches.
-    """
-    def __init__( self, other, include=False, ignore=None, failOn=None ):
-        super( SkipTo, self ).__init__( other )
-        self.ignoreExpr = ignore
-        self.mayReturnEmpty = True
-        self.mayIndexError = False
-        self.includeMatch = include
-        self.asList = False
-        if failOn is not None and isinstance(failOn, basestring):
-            self.failOn = Literal(failOn)
-        else:
-            self.failOn = failOn
-        self.errmsg = "No match found for "+_ustr(self.expr)
-
-    def parseImpl( self, instring, loc, doActions=True ):
-        startLoc = loc
-        instrlen = len(instring)
-        expr = self.expr
-        failParse = False
-        while loc <= instrlen:
-            try:
-                if self.failOn:
-                    try:
-                        self.failOn.tryParse(instring, loc)
-                    except ParseBaseException:
-                        pass
-                    else:
-                        failParse = True
-                        raise ParseException(instring, loc, "Found expression " + str(self.failOn))
-                    failParse = False
-                if self.ignoreExpr is not None:
-                    while 1:
-                        try:
-                            loc = self.ignoreExpr.tryParse(instring,loc)
-                            # print "found ignoreExpr, advance to", loc
-                        except ParseBaseException:
-                            break
-                expr._parse( instring, loc, doActions=False, callPreParse=False )
-                skipText = instring[startLoc:loc]
-                if self.includeMatch:
-                    loc,mat = expr._parse(instring,loc,doActions,callPreParse=False)
-                    if mat:
-                        skipRes = ParseResults( skipText )
-                        skipRes += mat
-                        return loc, [ skipRes ]
-                    else:
-                        return loc, [ skipText ]
-                else:
-                    return loc, [ skipText ]
-            except (ParseException,IndexError):
-                if failParse:
-                    raise
-                else:
-                    loc += 1
-        exc = self.myException
-        exc.loc = loc
-        exc.pstr = instring
-        raise exc
-
-class Forward(ParseElementEnhance):
-    """Forward declaration of an expression to be defined later -
-       used for recursive grammars, such as algebraic infix notation.
-       When the expression is known, it is assigned to the C{Forward} variable using the '<<' operator.
-
-       Note: take care when assigning to C{Forward} not to overlook precedence of operators.
-       Specifically, '|' has a lower precedence than '<<', so that::
-          fwdExpr << a | b | c
-       will actually be evaluated as::
-          (fwdExpr << a) | b | c
-       thereby leaving b and c out as parseable alternatives.  It is recommended that you
-       explicitly group the values inserted into the C{Forward}::
-          fwdExpr << (a | b | c)
-       Converting to use the '<<=' operator instead will avoid this problem.
-    """
-    def __init__( self, other=None ):
-        super(Forward,self).__init__( other, savelist=False )
-
-    def __lshift__( self, other ):
-        if isinstance( other, basestring ):
-            other = ParserElement.literalStringClass(other)
-        self.expr = other
-        self.mayReturnEmpty = other.mayReturnEmpty
-        self.strRepr = None
-        self.mayIndexError = self.expr.mayIndexError
-        self.mayReturnEmpty = self.expr.mayReturnEmpty
-        self.setWhitespaceChars( self.expr.whiteChars )
-        self.skipWhitespace = self.expr.skipWhitespace
-        self.saveAsList = self.expr.saveAsList
-        self.ignoreExprs.extend(self.expr.ignoreExprs)
-        return None
-    __ilshift__ = __lshift__
-
-    def leaveWhitespace( self ):
-        self.skipWhitespace = False
-        return self
-
-    def streamline( self ):
-        if not self.streamlined:
-            self.streamlined = True
-            if self.expr is not None:
-                self.expr.streamline()
-        return self
-
-    def validate( self, validateTrace=[] ):
-        if self not in validateTrace:
-            tmp = validateTrace[:]+[self]
-            if self.expr is not None:
-                self.expr.validate(tmp)
-        self.checkRecursion([])
-
-    def __str__( self ):
-        if hasattr(self,"name"):
-            return self.name
-
-        self._revertClass = self.__class__
-        self.__class__ = _ForwardNoRecurse
-        try:
-            if self.expr is not None:
-                retString = _ustr(self.expr)
-            else:
-                retString = "None"
-        finally:
-            self.__class__ = self._revertClass
-        return self.__class__.__name__ + ": " + retString
-
-    def copy(self):
-        if self.expr is not None:
-            return super(Forward,self).copy()
-        else:
-            ret = Forward()
-            ret << self
-            return ret
-
-class _ForwardNoRecurse(Forward):
-    def __str__( self ):
-        return "..."
-
-class TokenConverter(ParseElementEnhance):
-    """Abstract subclass of C{ParseExpression}, for converting parsed results."""
-    def __init__( self, expr, savelist=False ):
-        super(TokenConverter,self).__init__( expr )#, savelist )
-        self.saveAsList = False
-
-class Upcase(TokenConverter):
-    """Converter to upper case all matching tokens."""
-    def __init__(self, *args):
-        super(Upcase,self).__init__(*args)
-        warnings.warn("Upcase class is deprecated, use upcaseTokens parse action instead",
-                       DeprecationWarning,stacklevel=2)
-
-    def postParse( self, instring, loc, tokenlist ):
-        return list(map( str.upper, tokenlist ))
-
-
-class Combine(TokenConverter):
-    """Converter to concatenate all matching tokens to a single string.
-       By default, the matching patterns must also be contiguous in the input string;
-       this can be disabled by specifying C{'adjacent=False'} in the constructor.
-    """
-    def __init__( self, expr, joinString="", adjacent=True ):
-        super(Combine,self).__init__( expr )
-        # suppress whitespace-stripping in contained parse expressions, but re-enable it on the Combine itself
-        if adjacent:
-            self.leaveWhitespace()
-        self.adjacent = adjacent
-        self.skipWhitespace = True
-        self.joinString = joinString
-        self.callPreparse = True
-
-    def ignore( self, other ):
-        if self.adjacent:
-            ParserElement.ignore(self, other)
-        else:
-            super( Combine, self).ignore( other )
-        return self
-
-    def postParse( self, instring, loc, tokenlist ):
-        retToks = tokenlist.copy()
-        del retToks[:]
-        retToks += ParseResults([ "".join(tokenlist._asStringList(self.joinString)) ], modal=self.modalResults)
-
-        if self.resultsName and len(retToks.keys())>0:
-            return [ retToks ]
-        else:
-            return retToks
-
-class Group(TokenConverter):
-    """Converter to return the matched tokens as a list - useful for returning tokens of C{L{ZeroOrMore}} and C{L{OneOrMore}} expressions."""
-    def __init__( self, expr ):
-        super(Group,self).__init__( expr )
-        self.saveAsList = True
-
-    def postParse( self, instring, loc, tokenlist ):
-        return [ tokenlist ]
-
-class Dict(TokenConverter):
-    """Converter to return a repetitive expression as a list, but also as a dictionary.
-       Each element can also be referenced using the first token in the expression as its key.
-       Useful for tabular report scraping when the first column can be used as a item key.
-    """
-    def __init__( self, exprs ):
-        super(Dict,self).__init__( exprs )
-        self.saveAsList = True
-
-    def postParse( self, instring, loc, tokenlist ):
-        for i,tok in enumerate(tokenlist):
-            if len(tok) == 0:
-                continue
-            ikey = tok[0]
-            if isinstance(ikey,int):
-                ikey = _ustr(tok[0]).strip()
-            if len(tok)==1:
-                tokenlist[ikey] = _ParseResultsWithOffset("",i)
-            elif len(tok)==2 and not isinstance(tok[1],ParseResults):
-                tokenlist[ikey] = _ParseResultsWithOffset(tok[1],i)
-            else:
-                dictvalue = tok.copy() #ParseResults(i)
-                del dictvalue[0]
-                if len(dictvalue)!= 1 or (isinstance(dictvalue,ParseResults) and dictvalue.keys()):
-                    tokenlist[ikey] = _ParseResultsWithOffset(dictvalue,i)
-                else:
-                    tokenlist[ikey] = _ParseResultsWithOffset(dictvalue[0],i)
-
-        if self.resultsName:
-            return [ tokenlist ]
-        else:
-            return tokenlist
-
-
-class Suppress(TokenConverter):
-    """Converter for ignoring the results of a parsed expression."""
-    def postParse( self, instring, loc, tokenlist ):
-        return []
-
-    def suppress( self ):
-        return self
-
-
-class OnlyOnce(object):
-    """Wrapper for parse actions, to ensure they are only called once."""
-    def __init__(self, methodCall):
-        self.callable = _trim_arity(methodCall)
-        self.called = False
-    def __call__(self,s,l,t):
-        if not self.called:
-            results = self.callable(s,l,t)
-            self.called = True
-            return results
-        raise ParseException(s,l,"")
-    def reset(self):
-        self.called = False
-
-def traceParseAction(f):
-    """Decorator for debugging parse actions."""
-    f = _trim_arity(f)
-    def z(*paArgs):
-        thisFunc = f.func_name
-        s,l,t = paArgs[-3:]
-        if len(paArgs)>3:
-            thisFunc = paArgs[0].__class__.__name__ + '.' + thisFunc
-        sys.stderr.write( ">>entering %s(line: '%s', %d, %s)\n" % (thisFunc,line(l,s),l,t) )
-        try:
-            ret = f(*paArgs)
-        except Exception, exc:
-            sys.stderr.write( "<<leaving %s (exception: %s)\n" % (thisFunc,exc) )
-            raise
-        sys.stderr.write( "<<leaving %s (ret: %s)\n" % (thisFunc,ret) )
-        return ret
-    try:
-        z.__name__ = f.__name__
-    except AttributeError:
-        pass
-    return z
-
-#
-# global helpers
-#
-def delimitedList( expr, delim=",", combine=False ):
-    """Helper to define a delimited list of expressions - the delimiter defaults to ','.
-       By default, the list elements and delimiters can have intervening whitespace, and
-       comments, but this can be overridden by passing C{combine=True} in the constructor.
-       If C{combine} is set to C{True}, the matching tokens are returned as a single token
-       string, with the delimiters included; otherwise, the matching tokens are returned
-       as a list of tokens, with the delimiters suppressed.
-    """
-    dlName = _ustr(expr)+" ["+_ustr(delim)+" "+_ustr(expr)+"]..."
-    if combine:
-        return Combine( expr + ZeroOrMore( delim + expr ) ).setName(dlName)
-    else:
-        return ( expr + ZeroOrMore( Suppress( delim ) + expr ) ).setName(dlName)
-
-def countedArray( expr, intExpr=None ):
-    """Helper to define a counted list of expressions.
-       This helper defines a pattern of the form::
-           integer expr expr expr...
-       where the leading integer tells how many expr expressions follow.
-       The matched tokens returns the array of expr tokens as a list - the leading count token is suppressed.
-    """
-    arrayExpr = Forward()
-    def countFieldParseAction(s,l,t):
-        n = t[0]
-        arrayExpr << (n and Group(And([expr]*n)) or Group(empty))
-        return []
-    if intExpr is None:
-        intExpr = Word(nums).setParseAction(lambda t:int(t[0]))
-    else:
-        intExpr = intExpr.copy()
-    intExpr.setName("arrayLen")
-    intExpr.addParseAction(countFieldParseAction, callDuringTry=True)
-    return ( intExpr + arrayExpr )
-
-def _flatten(L):
-    ret = []
-    for i in L:
-        if isinstance(i,list):
-            ret.extend(_flatten(i))
-        else:
-            ret.append(i)
-    return ret
-
-def matchPreviousLiteral(expr):
-    """Helper to define an expression that is indirectly defined from
-       the tokens matched in a previous expression, that is, it looks
-       for a 'repeat' of a previous expression.  For example::
-           first = Word(nums)
-           second = matchPreviousLiteral(first)
-           matchExpr = first + ":" + second
-       will match C{"1:1"}, but not C{"1:2"}.  Because this matches a
-       previous literal, will also match the leading C{"1:1"} in C{"1:10"}.
-       If this is not desired, use C{matchPreviousExpr}.
-       Do *not* use with packrat parsing enabled.
-    """
-    rep = Forward()
-    def copyTokenToRepeater(s,l,t):
-        if t:
-            if len(t) == 1:
-                rep << t[0]
-            else:
-                # flatten t tokens
-                tflat = _flatten(t.asList())
-                rep << And( [ Literal(tt) for tt in tflat ] )
-        else:
-            rep << Empty()
-    expr.addParseAction(copyTokenToRepeater, callDuringTry=True)
-    return rep
-
-def matchPreviousExpr(expr):
-    """Helper to define an expression that is indirectly defined from
-       the tokens matched in a previous expression, that is, it looks
-       for a 'repeat' of a previous expression.  For example::
-           first = Word(nums)
-           second = matchPreviousExpr(first)
-           matchExpr = first + ":" + second
-       will match C{"1:1"}, but not C{"1:2"}.  Because this matches by
-       expressions, will *not* match the leading C{"1:1"} in C{"1:10"};
-       the expressions are evaluated first, and then compared, so
-       C{"1"} is compared with C{"10"}.
-       Do *not* use with packrat parsing enabled.
-    """
-    rep = Forward()
-    e2 = expr.copy()
-    rep << e2
-    def copyTokenToRepeater(s,l,t):
-        matchTokens = _flatten(t.asList())
-        def mustMatchTheseTokens(s,l,t):
-            theseTokens = _flatten(t.asList())
-            if  theseTokens != matchTokens:
-                raise ParseException("",0,"")
-        rep.setParseAction( mustMatchTheseTokens, callDuringTry=True )
-    expr.addParseAction(copyTokenToRepeater, callDuringTry=True)
-    return rep
-
-def _escapeRegexRangeChars(s):
-    #~  escape these chars: ^-]
-    for c in r"\^-]":
-        s = s.replace(c,_bslash+c)
-    s = s.replace("\n",r"\n")
-    s = s.replace("\t",r"\t")
-    return _ustr(s)
-
-def oneOf( strs, caseless=False, useRegex=True ):
-    """Helper to quickly define a set of alternative Literals, and makes sure to do
-       longest-first testing when there is a conflict, regardless of the input order,
-       but returns a C{L{MatchFirst}} for best performance.
-
-       Parameters:
-        - strs - a string of space-delimited literals, or a list of string literals
-        - caseless - (default=False) - treat all literals as caseless
-        - useRegex - (default=True) - as an optimization, will generate a Regex
-          object; otherwise, will generate a C{MatchFirst} object (if C{caseless=True}, or
-          if creating a C{Regex} raises an exception)
-    """
-    if caseless:
-        isequal = ( lambda a,b: a.upper() == b.upper() )
-        masks = ( lambda a,b: b.upper().startswith(a.upper()) )
-        parseElementClass = CaselessLiteral
-    else:
-        isequal = ( lambda a,b: a == b )
-        masks = ( lambda a,b: b.startswith(a) )
-        parseElementClass = Literal
-
-    if isinstance(strs,(list,tuple)):
-        symbols = list(strs[:])
-    elif isinstance(strs,basestring):
-        symbols = strs.split()
-    else:
-        warnings.warn("Invalid argument to oneOf, expected string or list",
-                SyntaxWarning, stacklevel=2)
-
-    i = 0
-    while i < len(symbols)-1:
-        cur = symbols[i]
-        for j,other in enumerate(symbols[i+1:]):
-            if ( isequal(other, cur) ):
-                del symbols[i+j+1]
-                break
-            elif ( masks(cur, other) ):
-                del symbols[i+j+1]
-                symbols.insert(i,other)
-                cur = other
-                break
-        else:
-            i += 1
-
-    if not caseless and useRegex:
-        #~ print (strs,"->", "|".join( [ _escapeRegexChars(sym) for sym in symbols] ))
-        try:
-            if len(symbols)==len("".join(symbols)):
-                return Regex( "[%s]" % "".join( [ _escapeRegexRangeChars(sym) for sym in symbols] ) )
-            else:
-                return Regex( "|".join( [ re.escape(sym) for sym in symbols] ) )
-        except:
-            warnings.warn("Exception creating Regex for oneOf, building MatchFirst",
-                    SyntaxWarning, stacklevel=2)
-
-
-    # last resort, just use MatchFirst
-    return MatchFirst( [ parseElementClass(sym) for sym in symbols ] )
-
-def dictOf( key, value ):
-    """Helper to easily and clearly define a dictionary by specifying the respective patterns
-       for the key and value.  Takes care of defining the C{L{Dict}}, C{L{ZeroOrMore}}, and C{L{Group}} tokens
-       in the proper order.  The key pattern can include delimiting markers or punctuation,
-       as long as they are suppressed, thereby leaving the significant key text.  The value
-       pattern can include named results, so that the C{Dict} results can include named token
-       fields.
-    """
-    return Dict( ZeroOrMore( Group ( key + value ) ) )
-
-def originalTextFor(expr, asString=True):
-    """Helper to return the original, untokenized text for a given expression.  Useful to
-       restore the parsed fields of an HTML start tag into the raw tag text itself, or to
-       revert separate tokens with intervening whitespace back to the original matching
-       input text. Simpler to use than the parse action C{L{keepOriginalText}}, and does not
-       require the inspect module to chase up the call stack.  By default, returns a
-       string containing the original parsed text.
-
-       If the optional C{asString} argument is passed as C{False}, then the return value is a
-       C{L{ParseResults}} containing any results names that were originally matched, and a
-       single token containing the original matched text from the input string.  So if
-       the expression passed to C{L{originalTextFor}} contains expressions with defined
-       results names, you must set C{asString} to C{False} if you want to preserve those
-       results name values."""
-    locMarker = Empty().setParseAction(lambda s,loc,t: loc)
-    endlocMarker = locMarker.copy()
-    endlocMarker.callPreparse = False
-    matchExpr = locMarker("_original_start") + expr + endlocMarker("_original_end")
-    if asString:
-        extractText = lambda s,l,t: s[t._original_start:t._original_end]
-    else:
-        def extractText(s,l,t):
-            del t[:]
-            t.insert(0, s[t._original_start:t._original_end])
-            del t["_original_start"]
-            del t["_original_end"]
-    matchExpr.setParseAction(extractText)
-    return matchExpr
-
-def ungroup(expr):
-    """Helper to undo pyparsing's default grouping of And expressions, even
-       if all but one are non-empty."""
-    return TokenConverter(expr).setParseAction(lambda t:t[0])
-
-# convenience constants for positional expressions
-empty       = Empty().setName("empty")
-lineStart   = LineStart().setName("lineStart")
-lineEnd     = LineEnd().setName("lineEnd")
-stringStart = StringStart().setName("stringStart")
-stringEnd   = StringEnd().setName("stringEnd")
-
-_escapedPunc = Word( _bslash, r"\[]-*.$+^?()~ ", exact=2 ).setParseAction(lambda s,l,t:t[0][1])
-_printables_less_backslash = "".join([ c for c in printables if c not in  r"\]" ])
-_escapedHexChar = Regex(r"\\0?[xX][0-9a-fA-F]+").setParseAction(lambda s,l,t:unichr(int(t[0].lstrip(r'\0x'),16)))
-_escapedOctChar = Regex(r"\\0[0-7]+").setParseAction(lambda s,l,t:unichr(int(t[0][1:],8)))
-_singleChar = _escapedPunc | _escapedHexChar | _escapedOctChar | Word(_printables_less_backslash,exact=1)
-_charRange = Group(_singleChar + Suppress("-") + _singleChar)
-_reBracketExpr = Literal("[") + Optional("^").setResultsName("negate") + Group( OneOrMore( _charRange | _singleChar ) ).setResultsName("body") + "]"
-
-_expanded = lambda p: (isinstance(p,ParseResults) and ''.join([ unichr(c) for c in range(ord(p[0]),ord(p[1])+1) ]) or p)
-
-def srange(s):
-    r"""Helper to easily define string ranges for use in Word construction.  Borrows
-       syntax from regexp '[]' string range definitions::
-          srange("[0-9]")   -> "0123456789"
-          srange("[a-z]")   -> "abcdefghijklmnopqrstuvwxyz"
-          srange("[a-z$_]") -> "abcdefghijklmnopqrstuvwxyz$_"
-       The input string must be enclosed in []'s, and the returned string is the expanded
-       character set joined into a single string.
-       The values enclosed in the []'s may be::
-          a single character
-          an escaped character with a leading backslash (such as \- or \])
-          an escaped hex character with a leading '\x' (\x21, which is a '!' character)
-            (\0x## is also supported for backwards compatibility)
-          an escaped octal character with a leading '\0' (\041, which is a '!' character)
-          a range of any of the above, separated by a dash ('a-z', etc.)
-          any combination of the above ('aeiouy', 'a-zA-Z0-9_$', etc.)
-    """
-    try:
-        return "".join([_expanded(part) for part in _reBracketExpr.parseString(s).body])
-    except:
-        return ""
-
-def matchOnlyAtCol(n):
-    """Helper method for defining parse actions that require matching at a specific
-       column in the input text.
-    """
-    def verifyCol(strg,locn,toks):
-        if col(locn,strg) != n:
-            raise ParseException(strg,locn,"matched token not at column %d" % n)
-    return verifyCol
-
-def replaceWith(replStr):
-    """Helper method for common parse actions that simply return a literal value.  Especially
-       useful when used with C{L{transformString<ParserElement.transformString>}()}.
-    """
-    def _replFunc(*args):
-        return [replStr]
-    return _replFunc
-
-def removeQuotes(s,l,t):
-    """Helper parse action for removing quotation marks from parsed quoted strings.
-       To use, add this parse action to quoted string using::
-         quotedString.setParseAction( removeQuotes )
-    """
-    return t[0][1:-1]
-
-def upcaseTokens(s,l,t):
-    """Helper parse action to convert tokens to upper case."""
-    return [ tt.upper() for tt in map(_ustr,t) ]
-
-def downcaseTokens(s,l,t):
-    """Helper parse action to convert tokens to lower case."""
-    return [ tt.lower() for tt in map(_ustr,t) ]
-
-def keepOriginalText(s,startLoc,t):
-    """DEPRECATED - use new helper method C{L{originalTextFor}}.
-       Helper parse action to preserve original parsed text,
-       overriding any nested parse actions."""
-    try:
-        endloc = getTokensEndLoc()
-    except ParseException:
-        raise ParseFatalException("incorrect usage of keepOriginalText - may only be called as a parse action")
-    del t[:]
-    t += ParseResults(s[startLoc:endloc])
-    return t
-
-def getTokensEndLoc():
-    """Method to be called from within a parse action to determine the end
-       location of the parsed tokens."""
-    import inspect
-    fstack = inspect.stack()
-    try:
-        # search up the stack (through intervening argument normalizers) for correct calling routine
-        for f in fstack[2:]:
-            if f[3] == "_parseNoCache":
-                endloc = f[0].f_locals["loc"]
-                return endloc
-        else:
-            raise ParseFatalException("incorrect usage of getTokensEndLoc - may only be called from within a parse action")
-    finally:
-        del fstack
-
-def _makeTags(tagStr, xml):
-    """Internal helper to construct opening and closing tag expressions, given a tag name"""
-    if isinstance(tagStr,basestring):
-        resname = tagStr
-        tagStr = Keyword(tagStr, caseless=not xml)
-    else:
-        resname = tagStr.name
-
-    tagAttrName = Word(alphas,alphanums+"_-:")
-    if (xml):
-        tagAttrValue = dblQuotedString.copy().setParseAction( removeQuotes )
-        openTag = Suppress("<") + tagStr("tag") + \
-                Dict(ZeroOrMore(Group( tagAttrName + Suppress("=") + tagAttrValue ))) + \
-                Optional("/",default=[False]).setResultsName("empty").setParseAction(lambda s,l,t:t[0]=='/') + Suppress(">")
-    else:
-        printablesLessRAbrack = "".join( [ c for c in printables if c not in ">" ] )
-        tagAttrValue = quotedString.copy().setParseAction( removeQuotes ) | Word(printablesLessRAbrack)
-        openTag = Suppress("<") + tagStr("tag") + \
-                Dict(ZeroOrMore(Group( tagAttrName.setParseAction(downcaseTokens) + \
-                Optional( Suppress("=") + tagAttrValue ) ))) + \
-                Optional("/",default=[False]).setResultsName("empty").setParseAction(lambda s,l,t:t[0]=='/') + Suppress(">")
-    closeTag = Combine(_L("</") + tagStr + ">")
-
-    openTag = openTag.setResultsName("start"+"".join(resname.replace(":"," ").title().split())).setName("<%s>" % tagStr)
-    closeTag = closeTag.setResultsName("end"+"".join(resname.replace(":"," ").title().split())).setName("</%s>" % tagStr)
-    openTag.tag = resname
-    closeTag.tag = resname
-    return openTag, closeTag
-
-def makeHTMLTags(tagStr):
-    """Helper to construct opening and closing tag expressions for HTML, given a tag name"""
-    return _makeTags( tagStr, False )
-
-def makeXMLTags(tagStr):
-    """Helper to construct opening and closing tag expressions for XML, given a tag name"""
-    return _makeTags( tagStr, True )
-
-def withAttribute(*args,**attrDict):
-    """Helper to create a validating parse action to be used with start tags created
-       with C{L{makeXMLTags}} or C{L{makeHTMLTags}}. Use C{withAttribute} to qualify a starting tag
-       with a required attribute value, to avoid false matches on common tags such as
-       C{<TD>} or C{<DIV>}.
-
-       Call C{withAttribute} with a series of attribute names and values. Specify the list
-       of filter attributes names and values as:
-        - keyword arguments, as in C{(align="right")}, or
-        - as an explicit dict with C{**} operator, when an attribute name is also a Python
-          reserved word, as in C{**{"class":"Customer", "align":"right"}}
-        - a list of name-value tuples, as in ( ("ns1:class", "Customer"), ("ns2:align","right") )
-       For attribute names with a namespace prefix, you must use the second form.  Attribute
-       names are matched insensitive to upper/lower case.
-
-       To verify that the attribute exists, but without specifying a value, pass
-       C{withAttribute.ANY_VALUE} as the value.
-       """
-    if args:
-        attrs = args[:]
-    else:
-        attrs = attrDict.items()
-    attrs = [(k,v) for k,v in attrs]
-    def pa(s,l,tokens):
-        for attrName,attrValue in attrs:
-            if attrName not in tokens:
-                raise ParseException(s,l,"no matching attribute " + attrName)
-            if attrValue != withAttribute.ANY_VALUE and tokens[attrName] != attrValue:
-                raise ParseException(s,l,"attribute '%s' has value '%s', must be '%s'" %
-                                            (attrName, tokens[attrName], attrValue))
-    return pa
-withAttribute.ANY_VALUE = object()
-
-opAssoc = _Constants()
-opAssoc.LEFT = object()
-opAssoc.RIGHT = object()
-
-def infixNotation( baseExpr, opList, lpar=Suppress('('), rpar=Suppress(')') ):
-    """Helper method for constructing grammars of expressions made up of
-       operators working in a precedence hierarchy.  Operators may be unary or
-       binary, left- or right-associative.  Parse actions can also be attached
-       to operator expressions.
-
-       Parameters:
-        - baseExpr - expression representing the most basic element for the nested
-        - opList - list of tuples, one for each operator precedence level in the
-          expression grammar; each tuple is of the form
-          (opExpr, numTerms, rightLeftAssoc, parseAction), where:
-           - opExpr is the pyparsing expression for the operator;
-              may also be a string, which will be converted to a Literal;
-              if numTerms is 3, opExpr is a tuple of two expressions, for the
-              two operators separating the 3 terms
-           - numTerms is the number of terms for this operator (must
-              be 1, 2, or 3)
-           - rightLeftAssoc is the indicator whether the operator is
-              right or left associative, using the pyparsing-defined
-              constants C{opAssoc.RIGHT} and C{opAssoc.LEFT}.
-           - parseAction is the parse action to be associated with
-              expressions matching this operator expression (the
-              parse action tuple member may be omitted)
-        - lpar - expression for matching left-parentheses (default=Suppress('('))
-        - rpar - expression for matching right-parentheses (default=Suppress(')'))
-    """
-    ret = Forward()
-    lastExpr = baseExpr | ( lpar + ret + rpar )
-    for i,operDef in enumerate(opList):
-        opExpr,arity,rightLeftAssoc,pa = (operDef + (None,))[:4]
-        if arity == 3:
-            if opExpr is None or len(opExpr) != 2:
-                raise ValueError("if numterms=3, opExpr must be a tuple or list of two expressions")
-            opExpr1, opExpr2 = opExpr
-        thisExpr = Forward()#.setName("expr%d" % i)
-        if rightLeftAssoc == opAssoc.LEFT:
-            if arity == 1:
-                matchExpr = FollowedBy(lastExpr + opExpr) + Group( lastExpr + OneOrMore( opExpr ) )
-            elif arity == 2:
-                if opExpr is not None:
-                    matchExpr = FollowedBy(lastExpr + opExpr + lastExpr) + Group( lastExpr + OneOrMore( opExpr + lastExpr ) )
-                else:
-                    matchExpr = FollowedBy(lastExpr+lastExpr) + Group( lastExpr + OneOrMore(lastExpr) )
-            elif arity == 3:
-                matchExpr = FollowedBy(lastExpr + opExpr1 + lastExpr + opExpr2 + lastExpr) + \
-                            Group( lastExpr + opExpr1 + lastExpr + opExpr2 + lastExpr )
-            else:
-                raise ValueError("operator must be unary (1), binary (2), or ternary (3)")
-        elif rightLeftAssoc == opAssoc.RIGHT:
-            if arity == 1:
-                # try to avoid LR with this extra test
-                if not isinstance(opExpr, Optional):
-                    opExpr = Optional(opExpr)
-                matchExpr = FollowedBy(opExpr.expr + thisExpr) + Group( opExpr + thisExpr )
-            elif arity == 2:
-                if opExpr is not None:
-                    matchExpr = FollowedBy(lastExpr + opExpr + thisExpr) + Group( lastExpr + OneOrMore( opExpr + thisExpr ) )
-                else:
-                    matchExpr = FollowedBy(lastExpr + thisExpr) + Group( lastExpr + OneOrMore( thisExpr ) )
-            elif arity == 3:
-                matchExpr = FollowedBy(lastExpr + opExpr1 + thisExpr + opExpr2 + thisExpr) + \
-                            Group( lastExpr + opExpr1 + thisExpr + opExpr2 + thisExpr )
-            else:
-                raise ValueError("operator must be unary (1), binary (2), or ternary (3)")
-        else:
-            raise ValueError("operator must indicate right or left associativity")
-        if pa:
-            matchExpr.setParseAction( pa )
-        thisExpr << ( matchExpr | lastExpr )
-        lastExpr = thisExpr
-    ret << lastExpr
-    return ret
-operatorPrecedence = infixNotation
-
-dblQuotedString = Regex(r'"(?:[^"\n\r\\]|(?:"")|(?:\\x[0-9a-fA-F]+)|(?:\\.))*"').setName("string enclosed in double quotes")
-sglQuotedString = Regex(r"'(?:[^'\n\r\\]|(?:'')|(?:\\x[0-9a-fA-F]+)|(?:\\.))*'").setName("string enclosed in single quotes")
-quotedString = Regex(r'''(?:"(?:[^"\n\r\\]|(?:"")|(?:\\x[0-9a-fA-F]+)|(?:\\.))*")|(?:'(?:[^'\n\r\\]|(?:'')|(?:\\x[0-9a-fA-F]+)|(?:\\.))*')''').setName("quotedString using single or double quotes")
-unicodeString = Combine(_L('u') + quotedString.copy())
-
-def nestedExpr(opener="(", closer=")", content=None, ignoreExpr=quotedString.copy()):
-    """Helper method for defining nested lists enclosed in opening and closing
-       delimiters ("(" and ")" are the default).
-
-       Parameters:
-        - opener - opening character for a nested list (default="("); can also be a pyparsing expression
-        - closer - closing character for a nested list (default=")"); can also be a pyparsing expression
-        - content - expression for items within the nested lists (default=None)
-        - ignoreExpr - expression for ignoring opening and closing delimiters (default=quotedString)
-
-       If an expression is not provided for the content argument, the nested
-       expression will capture all whitespace-delimited content between delimiters
-       as a list of separate values.
-
-       Use the C{ignoreExpr} argument to define expressions that may contain
-       opening or closing characters that should not be treated as opening
-       or closing characters for nesting, such as quotedString or a comment
-       expression.  Specify multiple expressions using an C{L{Or}} or C{L{MatchFirst}}.
-       The default is L{quotedString}, but if no expressions are to be ignored,
-       then pass C{None} for this argument.
-    """
-    if opener == closer:
-        raise ValueError("opening and closing strings cannot be the same")
-    if content is None:
-        if isinstance(opener,basestring) and isinstance(closer,basestring):
-            if len(opener) == 1 and len(closer)==1:
-                if ignoreExpr is not None:
-                    content = (Combine(OneOrMore(~ignoreExpr +
-                                    CharsNotIn(opener+closer+ParserElement.DEFAULT_WHITE_CHARS,exact=1))
-                                ).setParseAction(lambda t:t[0].strip()))
-                else:
-                    content = (empty.copy()+CharsNotIn(opener+closer+ParserElement.DEFAULT_WHITE_CHARS
-                                ).setParseAction(lambda t:t[0].strip()))
-            else:
-                if ignoreExpr is not None:
-                    content = (Combine(OneOrMore(~ignoreExpr +
-                                    ~Literal(opener) + ~Literal(closer) +
-                                    CharsNotIn(ParserElement.DEFAULT_WHITE_CHARS,exact=1))
-                                ).setParseAction(lambda t:t[0].strip()))
-                else:
-                    content = (Combine(OneOrMore(~Literal(opener) + ~Literal(closer) +
-                                    CharsNotIn(ParserElement.DEFAULT_WHITE_CHARS,exact=1))
-                                ).setParseAction(lambda t:t[0].strip()))
-        else:
-            raise ValueError("opening and closing arguments must be strings if no content expression is given")
-    ret = Forward()
-    if ignoreExpr is not None:
-        ret << Group( Suppress(opener) + ZeroOrMore( ignoreExpr | ret | content ) + Suppress(closer) )
-    else:
-        ret << Group( Suppress(opener) + ZeroOrMore( ret | content )  + Suppress(closer) )
-    return ret
-
-def indentedBlock(blockStatementExpr, indentStack, indent=True):
-    """Helper method for defining space-delimited indentation blocks, such as
-       those used to define block statements in Python source code.
-
-       Parameters:
-        - blockStatementExpr - expression defining syntax of statement that
-            is repeated within the indented block
-        - indentStack - list created by caller to manage indentation stack
-            (multiple statementWithIndentedBlock expressions within a single grammar
-            should share a common indentStack)
-        - indent - boolean indicating whether block must be indented beyond the
-            the current level; set to False for block of left-most statements
-            (default=True)
-
-       A valid block must contain at least one C{blockStatement}.
-    """
-    def checkPeerIndent(s,l,t):
-        if l >= len(s): return
-        curCol = col(l,s)
-        if curCol != indentStack[-1]:
-            if curCol > indentStack[-1]:
-                raise ParseFatalException(s,l,"illegal nesting")
-            raise ParseException(s,l,"not a peer entry")
-
-    def checkSubIndent(s,l,t):
-        curCol = col(l,s)
-        if curCol > indentStack[-1]:
-            indentStack.append( curCol )
-        else:
-            raise ParseException(s,l,"not a subentry")
-
-    def checkUnindent(s,l,t):
-        if l >= len(s): return
-        curCol = col(l,s)
-        if not(indentStack and curCol < indentStack[-1] and curCol <= indentStack[-2]):
-            raise ParseException(s,l,"not an unindent")
-        indentStack.pop()
-
-    NL = OneOrMore(LineEnd().setWhitespaceChars("\t ").suppress())
-    INDENT = Empty() + Empty().setParseAction(checkSubIndent)
-    PEER   = Empty().setParseAction(checkPeerIndent)
-    UNDENT = Empty().setParseAction(checkUnindent)
-    if indent:
-        smExpr = Group( Optional(NL) +
-            #~ FollowedBy(blockStatementExpr) +
-            INDENT + (OneOrMore( PEER + Group(blockStatementExpr) + Optional(NL) )) + UNDENT)
-    else:
-        smExpr = Group( Optional(NL) +
-            (OneOrMore( PEER + Group(blockStatementExpr) + Optional(NL) )) )
-    blockStatementExpr.ignore(_bslash + LineEnd())
-    return smExpr
-
-alphas8bit = srange(r"[\0xc0-\0xd6\0xd8-\0xf6\0xf8-\0xff]")
-punc8bit = srange(r"[\0xa1-\0xbf\0xd7\0xf7]")
-
-anyOpenTag,anyCloseTag = makeHTMLTags(Word(alphas,alphanums+"_:"))
-commonHTMLEntity = Combine(_L("&") + oneOf("gt lt amp nbsp quot").setResultsName("entity") +";").streamline()
-_htmlEntityMap = dict(zip("gt lt amp nbsp quot".split(),'><& "'))
-replaceHTMLEntity = lambda t : t.entity in _htmlEntityMap and _htmlEntityMap[t.entity] or None
-
-# it's easy to get these comment structures wrong - they're very common, so may as well make them available
-cStyleComment = Regex(r"/\*(?:[^*]*\*+)+?/").setName("C style comment")
-
-htmlComment = Regex(r"<!--[\s\S]*?-->")
-restOfLine = Regex(r".*").leaveWhitespace()
-dblSlashComment = Regex(r"\/\/(\\\n|.)*").setName("// comment")
-cppStyleComment = Regex(r"/(?:\*(?:[^*]*\*+)+?/|/[^\n]*(?:\n[^\n]*)*?(?:(?<!\\)|\Z))").setName("C++ style comment")
-
-javaStyleComment = cppStyleComment
-pythonStyleComment = Regex(r"#.*").setName("Python style comment")
-_noncomma = "".join( [ c for c in printables if c != "," ] )
-_commasepitem = Combine(OneOrMore(Word(_noncomma) +
-                                  Optional( Word(" \t") +
-                                            ~Literal(",") + ~LineEnd() ) ) ).streamline().setName("commaItem")
-commaSeparatedList = delimitedList( Optional( quotedString.copy() | _commasepitem, default="") ).setName("commaSeparatedList")
-
-
-if __name__ == "__main__":
-
-    def test( teststring ):
-        try:
-            tokens = simpleSQL.parseString( teststring )
-            tokenlist = tokens.asList()
-            print (teststring + "->"   + str(tokenlist))
-            print ("tokens = "         + str(tokens))
-            print ("tokens.columns = " + str(tokens.columns))
-            print ("tokens.tables = "  + str(tokens.tables))
-            print (tokens.asXML("SQL",True))
-        except ParseBaseException, err:
-            print (teststring + "->")
-            print (err.line)
-            print (" "*(err.column-1) + "^")
-            print (err)
-        print()
-
-    selectToken    = CaselessLiteral( "select" )
-    fromToken      = CaselessLiteral( "from" )
-
-    ident          = Word( alphas, alphanums + "_$" )
-    columnName     = delimitedList( ident, ".", combine=True ).setParseAction( upcaseTokens )
-    columnNameList = Group( delimitedList( columnName ) )#.setName("columns")
-    tableName      = delimitedList( ident, ".", combine=True ).setParseAction( upcaseTokens )
-    tableNameList  = Group( delimitedList( tableName ) )#.setName("tables")
-    simpleSQL      = ( selectToken + \
-                     ( '*' | columnNameList ).setResultsName( "columns" ) + \
-                     fromToken + \
-                     tableNameList.setResultsName( "tables" ) )
-
-    test( "SELECT * from XYZZY, ABC" )
-    test( "select * from SYS.XYZZY" )
-    test( "Select A from Sys.dual" )
-    test( "Select AA,BB,CC from Sys.dual" )
-    test( "Select A, B, C from Sys.dual" )
-    test( "Select A, B, C from Sys.dual" )
-    test( "Xelect A, B, C from Sys.dual" )
-    test( "Select A, B, C frox Sys.dual" )
-    test( "Select" )
-    test( "Select ^^^ frox Sys.dual" )
-    test( "Select A, B, C from Sys.dual, Table2   " )
+# module pyparsing.py
+#
+# Copyright (c) 2003-2011  Paul T. McGuire
+#
+# Permission is hereby granted, free of charge, to any person obtaining
+# a copy of this software and associated documentation files (the
+# "Software"), to deal in the Software without restriction, including
+# without limitation the rights to use, copy, modify, merge, publish,
+# distribute, sublicense, and/or sell copies of the Software, and to
+# permit persons to whom the Software is furnished to do so, subject to
+# the following conditions:
+#
+# The above copyright notice and this permission notice shall be
+# included in all copies or substantial portions of the Software.
+#
+# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
+# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
+# CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
+# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
+# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+#
+#from __future__ import generators
+
+__doc__ = \
+"""
+pyparsing module - Classes and methods to define and execute parsing grammars
+
+The pyparsing module is an alternative approach to creating and executing simple grammars,
+vs. the traditional lex/yacc approach, or the use of regular expressions.  With pyparsing, you
+don't need to learn a new syntax for defining grammars or matching expressions - the parsing module
+provides a library of classes that you use to construct the grammar directly in Python.
+
+Here is a program to parse "Hello, World!" (or any greeting of the form C{"<salutation>, <addressee>!"})::
+
+    from pyparsing import Word, alphas
+
+    # define grammar of a greeting
+    greet = Word( alphas ) + "," + Word( alphas ) + "!"
+
+    hello = "Hello, World!"
+    print hello, "->", greet.parseString( hello )
+
+The program outputs the following::
+
+    Hello, World! -> ['Hello', ',', 'World', '!']
+
+The Python representation of the grammar is quite readable, owing to the self-explanatory
+class names, and the use of '+', '|' and '^' operators.
+
+The parsed results returned from C{parseString()} can be accessed as a nested list, a dictionary, or an
+object with named attributes.
+
+The pyparsing module handles some of the problems that are typically vexing when writing text parsers:
+ - extra or missing whitespace (the above program will also handle "Hello,World!", "Hello  ,  World  !", etc.)
+ - quoted strings
+ - embedded comments
+"""
+
+__version__ = "1.5.7"
+__versionTime__ = "17 November 2012 16:18"
+__author__ = "Paul McGuire <ptmcg@users.sourceforge.net>"
+
+import string
+from weakref import ref as wkref
+import copy
+import sys
+import warnings
+import re
+import sre_constants
+#~ sys.stderr.write( "testing pyparsing module, version %s, %s\n" % (__version__,__versionTime__ ) )
+
+__all__ = [
+'And', 'CaselessKeyword', 'CaselessLiteral', 'CharsNotIn', 'Combine', 'Dict', 'Each', 'Empty',
+'FollowedBy', 'Forward', 'GoToColumn', 'Group', 'Keyword', 'LineEnd', 'LineStart', 'Literal',
+'MatchFirst', 'NoMatch', 'NotAny', 'OneOrMore', 'OnlyOnce', 'Optional', 'Or',
+'ParseBaseException', 'ParseElementEnhance', 'ParseException', 'ParseExpression', 'ParseFatalException',
+'ParseResults', 'ParseSyntaxException', 'ParserElement', 'QuotedString', 'RecursiveGrammarException',
+'Regex', 'SkipTo', 'StringEnd', 'StringStart', 'Suppress', 'Token', 'TokenConverter', 'Upcase',
+'White', 'Word', 'WordEnd', 'WordStart', 'ZeroOrMore',
+'alphanums', 'alphas', 'alphas8bit', 'anyCloseTag', 'anyOpenTag', 'cStyleComment', 'col',
+'commaSeparatedList', 'commonHTMLEntity', 'countedArray', 'cppStyleComment', 'dblQuotedString',
+'dblSlashComment', 'delimitedList', 'dictOf', 'downcaseTokens', 'empty', 'hexnums',
+'htmlComment', 'javaStyleComment', 'keepOriginalText', 'line', 'lineEnd', 'lineStart', 'lineno',
+'makeHTMLTags', 'makeXMLTags', 'matchOnlyAtCol', 'matchPreviousExpr', 'matchPreviousLiteral',
+'nestedExpr', 'nullDebugAction', 'nums', 'oneOf', 'opAssoc', 'operatorPrecedence', 'printables',
+'punc8bit', 'pythonStyleComment', 'quotedString', 'removeQuotes', 'replaceHTMLEntity', 
+'replaceWith', 'restOfLine', 'sglQuotedString', 'srange', 'stringEnd',
+'stringStart', 'traceParseAction', 'unicodeString', 'upcaseTokens', 'withAttribute',
+'indentedBlock', 'originalTextFor', 'ungroup', 'infixNotation',
+]
+
+_MAX_INT = sys.maxint
+range = xrange
+set = lambda s : dict( [(c,0) for c in s] )
+
+def _ustr(obj):
+    """Drop-in replacement for str(obj) that tries to be Unicode friendly. It first tries
+       str(obj). If that fails with a UnicodeEncodeError, then it tries unicode(obj). It
+       then < returns the unicode object | encodes it with the default encoding | ... >.
+    """
+    if isinstance(obj,unicode):
+        return obj
+
+    try:
+        # If this works, then _ustr(obj) has the same behaviour as str(obj), so
+        # it won't break any existing code.
+        return str(obj)
+
+    except UnicodeEncodeError:
+        # The Python docs (http://docs.python.org/ref/customization.html#l2h-182)
+        # state that "The return value must be a string object". However, does a
+        # unicode object (being a subclass of basestring) count as a "string
+        # object"?
+        # If so, then return a unicode object:
+        return unicode(obj)
+        # Else encode it... but how? There are many choices... :)
+        # Replace unprintables with escape codes?
+        #return unicode(obj).encode(sys.getdefaultencoding(), 'backslashreplace_errors')
+        # Replace unprintables with question marks?
+        #return unicode(obj).encode(sys.getdefaultencoding(), 'replace')
+        # ...
+
+# build list of single arg builtins, tolerant of Python version, that can be used as parse actions
+singleArgBuiltins = []
+import __builtin__
+for fname in "sum len sorted reversed list tuple set any all min max".split():
+    try:
+        singleArgBuiltins.append(getattr(__builtin__,fname))
+    except AttributeError:
+        continue
+
+def _xml_escape(data):
+    """Escape &, <, >, ", ', etc. in a string of data."""
+
+    # ampersand must be replaced first
+    from_symbols = '&><"\''
+    to_symbols = ['&'+s+';' for s in "amp gt lt quot apos".split()]
+    for from_,to_ in zip(from_symbols, to_symbols):
+        data = data.replace(from_, to_)
+    return data
+
+class _Constants(object):
+    pass
+
+alphas     = string.ascii_lowercase + string.ascii_uppercase
+nums       = "0123456789"
+hexnums    = nums + "ABCDEFabcdef"
+alphanums  = alphas + nums
+_bslash    = chr(92)
+printables = "".join( [ c for c in string.printable if c not in string.whitespace ] )
+
+class ParseBaseException(Exception):
+    """base exception class for all parsing runtime exceptions"""
+    # Performance tuning: we construct a *lot* of these, so keep this
+    # constructor as small and fast as possible
+    def __init__( self, pstr, loc=0, msg=None, elem=None ):
+        self.loc = loc
+        if msg is None:
+            self.msg = pstr
+            self.pstr = ""
+        else:
+            self.msg = msg
+            self.pstr = pstr
+        self.parserElement = elem
+
+    def __getattr__( self, aname ):
+        """supported attributes by name are:
+            - lineno - returns the line number of the exception text
+            - col - returns the column number of the exception text
+            - line - returns the line containing the exception text
+        """
+        if( aname == "lineno" ):
+            return lineno( self.loc, self.pstr )
+        elif( aname in ("col", "column") ):
+            return col( self.loc, self.pstr )
+        elif( aname == "line" ):
+            return line( self.loc, self.pstr )
+        else:
+            raise AttributeError(aname)
+
+    def __str__( self ):
+        return "%s (at char %d), (line:%d, col:%d)" % \
+                ( self.msg, self.loc, self.lineno, self.column )
+    def __repr__( self ):
+        return _ustr(self)
+    def markInputline( self, markerString = ">!<" ):
+        """Extracts the exception line from the input string, and marks
+           the location of the exception with a special symbol.
+        """
+        line_str = self.line
+        line_column = self.column - 1
+        if markerString:
+            line_str = "".join( [line_str[:line_column],
+                                markerString, line_str[line_column:]])
+        return line_str.strip()
+    def __dir__(self):
+        return "loc msg pstr parserElement lineno col line " \
+               "markInputline __str__ __repr__".split()
+
+class ParseException(ParseBaseException):
+    """exception thrown when parse expressions don't match class;
+       supported attributes by name are:
+        - lineno - returns the line number of the exception text
+        - col - returns the column number of the exception text
+        - line - returns the line containing the exception text
+    """
+    pass
+
+class ParseFatalException(ParseBaseException):
+    """user-throwable exception thrown when inconsistent parse content
+       is found; stops all parsing immediately"""
+    pass
+
+class ParseSyntaxException(ParseFatalException):
+    """just like C{L{ParseFatalException}}, but thrown internally when an
+       C{L{ErrorStop<And._ErrorStop>}} ('-' operator) indicates that parsing is to stop immediately because
+       an unbacktrackable syntax error has been found"""
+    def __init__(self, pe):
+        super(ParseSyntaxException, self).__init__(
+                                    pe.pstr, pe.loc, pe.msg, pe.parserElement)
+
+#~ class ReparseException(ParseBaseException):
+    #~ """Experimental class - parse actions can raise this exception to cause
+       #~ pyparsing to reparse the input string:
+        #~ - with a modified input string, and/or
+        #~ - with a modified start location
+       #~ Set the values of the ReparseException in the constructor, and raise the
+       #~ exception in a parse action to cause pyparsing to use the new string/location.
+       #~ Setting the values as None causes no change to be made.
+       #~ """
+    #~ def __init_( self, newstring, restartLoc ):
+        #~ self.newParseText = newstring
+        #~ self.reparseLoc = restartLoc
+
+class RecursiveGrammarException(Exception):
+    """exception thrown by C{validate()} if the grammar could be improperly recursive"""
+    def __init__( self, parseElementList ):
+        self.parseElementTrace = parseElementList
+
+    def __str__( self ):
+        return "RecursiveGrammarException: %s" % self.parseElementTrace
+
+class _ParseResultsWithOffset(object):
+    def __init__(self,p1,p2):
+        self.tup = (p1,p2)
+    def __getitem__(self,i):
+        return self.tup[i]
+    def __repr__(self):
+        return repr(self.tup)
+    def setOffset(self,i):
+        self.tup = (self.tup[0],i)
+
+class ParseResults(object):
+    """Structured parse results, to provide multiple means of access to the parsed data:
+       - as a list (C{len(results)})
+       - by list index (C{results[0], results[1]}, etc.)
+       - by attribute (C{results.<resultsName>})
+       """
+    #~ __slots__ = ( "__toklist", "__tokdict", "__doinit", "__name", "__parent", "__accumNames", "__weakref__" )
+    def __new__(cls, toklist, name=None, asList=True, modal=True ):
+        if isinstance(toklist, cls):
+            return toklist
+        retobj = object.__new__(cls)
+        retobj.__doinit = True
+        return retobj
+
+    # Performance tuning: we construct a *lot* of these, so keep this
+    # constructor as small and fast as possible
+    def __init__( self, toklist, name=None, asList=True, modal=True, isinstance=isinstance ):
+        if self.__doinit:
+            self.__doinit = False
+            self.__name = None
+            self.__parent = None
+            self.__accumNames = {}
+            if isinstance(toklist, list):
+                self.__toklist = toklist[:]
+            else:
+                self.__toklist = [toklist]
+            self.__tokdict = dict()
+
+        if name is not None and name:
+            if not modal:
+                self.__accumNames[name] = 0
+            if isinstance(name,int):
+                name = _ustr(name) # will always return a str, but use _ustr for consistency
+            self.__name = name
+            if not toklist in (None,'',[]):
+                if isinstance(toklist,basestring):
+                    toklist = [ toklist ]
+                if asList:
+                    if isinstance(toklist,ParseResults):
+                        self[name] = _ParseResultsWithOffset(toklist.copy(),0)
+                    else:
+                        self[name] = _ParseResultsWithOffset(ParseResults(toklist[0]),0)
+                    self[name].__name = name
+                else:
+                    try:
+                        self[name] = toklist[0]
+                    except (KeyError,TypeError,IndexError):
+                        self[name] = toklist
+
+    def __getitem__( self, i ):
+        if isinstance( i, (int,slice) ):
+            return self.__toklist[i]
+        else:
+            if i not in self.__accumNames:
+                return self.__tokdict[i][-1][0]
+            else:
+                return ParseResults([ v[0] for v in self.__tokdict[i] ])
+
+    def __setitem__( self, k, v, isinstance=isinstance ):
+        if isinstance(v,_ParseResultsWithOffset):
+            self.__tokdict[k] = self.__tokdict.get(k,list()) + [v]
+            sub = v[0]
+        elif isinstance(k,int):
+            self.__toklist[k] = v
+            sub = v
+        else:
+            self.__tokdict[k] = self.__tokdict.get(k,list()) + [_ParseResultsWithOffset(v,0)]
+            sub = v
+        if isinstance(sub,ParseResults):
+            sub.__parent = wkref(self)
+
+    def __delitem__( self, i ):
+        if isinstance(i,(int,slice)):
+            mylen = len( self.__toklist )
+            del self.__toklist[i]
+
+            # convert int to slice
+            if isinstance(i, int):
+                if i < 0:
+                    i += mylen
+                i = slice(i, i+1)
+            # get removed indices
+            removed = list(range(*i.indices(mylen)))
+            removed.reverse()
+            # fixup indices in token dictionary
+            for name in self.__tokdict:
+                occurrences = self.__tokdict[name]
+                for j in removed:
+                    for k, (value, position) in enumerate(occurrences):
+                        occurrences[k] = _ParseResultsWithOffset(value, position - (position > j))
+        else:
+            del self.__tokdict[i]
+
+    def __contains__( self, k ):
+        return k in self.__tokdict
+
+    def __len__( self ): return len( self.__toklist )
+    def __bool__(self): return len( self.__toklist ) > 0
+    __nonzero__ = __bool__
+    def __iter__( self ): return iter( self.__toklist )
+    def __reversed__( self ): return iter( self.__toklist[::-1] )
+    def keys( self ):
+        """Returns all named result keys."""
+        return self.__tokdict.keys()
+
+    def pop( self, index=-1 ):
+        """Removes and returns item at specified index (default=last).
+           Will work with either numeric indices or dict-key indicies."""
+        ret = self[index]
+        del self[index]
+        return ret
+
+    def get(self, key, defaultValue=None):
+        """Returns named result matching the given key, or if there is no
+           such name, then returns the given C{defaultValue} or C{None} if no
+           C{defaultValue} is specified."""
+        if key in self:
+            return self[key]
+        else:
+            return defaultValue
+
+    def insert( self, index, insStr ):
+        """Inserts new element at location index in the list of parsed tokens."""
+        self.__toklist.insert(index, insStr)
+        # fixup indices in token dictionary
+        for name in self.__tokdict:
+            occurrences = self.__tokdict[name]
+            for k, (value, position) in enumerate(occurrences):
+                occurrences[k] = _ParseResultsWithOffset(value, position + (position > index))
+
+    def items( self ):
+        """Returns all named result keys and values as a list of tuples."""
+        return [(k,self[k]) for k in self.__tokdict]
+
+    def values( self ):
+        """Returns all named result values."""
+        return [ v[-1][0] for v in self.__tokdict.values() ]
+
+    def __getattr__( self, name ):
+        if True: #name not in self.__slots__:
+            if name in self.__tokdict:
+                if name not in self.__accumNames:
+                    return self.__tokdict[name][-1][0]
+                else:
+                    return ParseResults([ v[0] for v in self.__tokdict[name] ])
+            else:
+                return ""
+        return None
+
+    def __add__( self, other ):
+        ret = self.copy()
+        ret += other
+        return ret
+
+    def __iadd__( self, other ):
+        if other.__tokdict:
+            offset = len(self.__toklist)
+            addoffset = ( lambda a: (a<0 and offset) or (a+offset) )
+            otheritems = other.__tokdict.items()
+            otherdictitems = [(k, _ParseResultsWithOffset(v[0],addoffset(v[1])) )
+                                for (k,vlist) in otheritems for v in vlist]
+            for k,v in otherdictitems:
+                self[k] = v
+                if isinstance(v[0],ParseResults):
+                    v[0].__parent = wkref(self)
+            
+        self.__toklist += other.__toklist
+        self.__accumNames.update( other.__accumNames )
+        return self
+
+    def __radd__(self, other):
+        if isinstance(other,int) and other == 0:
+            return self.copy()
+        
+    def __repr__( self ):
+        return "(%s, %s)" % ( repr( self.__toklist ), repr( self.__tokdict ) )
+
+    def __str__( self ):
+        out = []
+        for i in self.__toklist:
+            if isinstance(i, ParseResults):
+                out.append(_ustr(i))
+            else:
+                out.append(repr(i))
+        return '[' + ', '.join(out) + ']'
+
+    def _asStringList( self, sep='' ):
+        out = []
+        for item in self.__toklist:
+            if out and sep:
+                out.append(sep)
+            if isinstance( item, ParseResults ):
+                out += item._asStringList()
+            else:
+                out.append( _ustr(item) )
+        return out
+
+    def asList( self ):
+        """Returns the parse results as a nested list of matching tokens, all converted to strings."""
+        out = []
+        for res in self.__toklist:
+            if isinstance(res,ParseResults):
+                out.append( res.asList() )
+            else:
+                out.append( res )
+        return out
+
+    def asDict( self ):
+        """Returns the named parse results as dictionary."""
+        return dict( self.items() )
+
+    def copy( self ):
+        """Returns a new copy of a C{ParseResults} object."""
+        ret = ParseResults( self.__toklist )
+        ret.__tokdict = self.__tokdict.copy()
+        ret.__parent = self.__parent
+        ret.__accumNames.update( self.__accumNames )
+        ret.__name = self.__name
+        return ret
+
+    def asXML( self, doctag=None, namedItemsOnly=False, indent="", formatted=True ):
+        """Returns the parse results as XML. Tags are created for tokens and lists that have defined results names."""
+        nl = "\n"
+        out = []
+        namedItems = dict( [ (v[1],k) for (k,vlist) in self.__tokdict.items()
+                                                            for v in vlist ] )
+        nextLevelIndent = indent + "  "
+
+        # collapse out indents if formatting is not desired
+        if not formatted:
+            indent = ""
+            nextLevelIndent = ""
+            nl = ""
+
+        selfTag = None
+        if doctag is not None:
+            selfTag = doctag
+        else:
+            if self.__name:
+                selfTag = self.__name
+
+        if not selfTag:
+            if namedItemsOnly:
+                return ""
+            else:
+                selfTag = "ITEM"
+
+        out += [ nl, indent, "<", selfTag, ">" ]
+
+        worklist = self.__toklist
+        for i,res in enumerate(worklist):
+            if isinstance(res,ParseResults):
+                if i in namedItems:
+                    out += [ res.asXML(namedItems[i],
+                                        namedItemsOnly and doctag is None,
+                                        nextLevelIndent,
+                                        formatted)]
+                else:
+                    out += [ res.asXML(None,
+                                        namedItemsOnly and doctag is None,
+                                        nextLevelIndent,
+                                        formatted)]
+            else:
+                # individual token, see if there is a name for it
+                resTag = None
+                if i in namedItems:
+                    resTag = namedItems[i]
+                if not resTag:
+                    if namedItemsOnly:
+                        continue
+                    else:
+                        resTag = "ITEM"
+                xmlBodyText = _xml_escape(_ustr(res))
+                out += [ nl, nextLevelIndent, "<", resTag, ">",
+                                                xmlBodyText,
+                                                "</", resTag, ">" ]
+
+        out += [ nl, indent, "</", selfTag, ">" ]
+        return "".join(out)
+
+    def __lookup(self,sub):
+        for k,vlist in self.__tokdict.items():
+            for v,loc in vlist:
+                if sub is v:
+                    return k
+        return None
+
+    def getName(self):
+        """Returns the results name for this token expression."""
+        if self.__name:
+            return self.__name
+        elif self.__parent:
+            par = self.__parent()
+            if par:
+                return par.__lookup(self)
+            else:
+                return None
+        elif (len(self) == 1 and
+               len(self.__tokdict) == 1 and
+               self.__tokdict.values()[0][0][1] in (0,-1)):
+            return self.__tokdict.keys()[0]
+        else:
+            return None
+
+    def dump(self,indent='',depth=0):
+        """Diagnostic method for listing out the contents of a C{ParseResults}.
+           Accepts an optional C{indent} argument so that this string can be embedded
+           in a nested display of other data."""
+        out = []
+        out.append( indent+_ustr(self.asList()) )
+        keys = self.items()
+        keys.sort()
+        for k,v in keys:
+            if out:
+                out.append('\n')
+            out.append( "%s%s- %s: " % (indent,('  '*depth), k) )
+            if isinstance(v,ParseResults):
+                if v.keys():
+                    out.append( v.dump(indent,depth+1) )
+                else:
+                    out.append(_ustr(v))
+            else:
+                out.append(_ustr(v))
+        return "".join(out)
+
+    # add support for pickle protocol
+    def __getstate__(self):
+        return ( self.__toklist,
+                 ( self.__tokdict.copy(),
+                   self.__parent is not None and self.__parent() or None,
+                   self.__accumNames,
+                   self.__name ) )
+
+    def __setstate__(self,state):
+        self.__toklist = state[0]
+        (self.__tokdict,
+         par,
+         inAccumNames,
+         self.__name) = state[1]
+        self.__accumNames = {}
+        self.__accumNames.update(inAccumNames)
+        if par is not None:
+            self.__parent = wkref(par)
+        else:
+            self.__parent = None
+
+    def __dir__(self):
+        return dir(super(ParseResults,self)) + list(self.keys())
+
+def col (loc,strg):
+    """Returns current column within a string, counting newlines as line separators.
+   The first column is number 1.
+
+   Note: the default parsing behavior is to expand tabs in the input string
+   before starting the parsing process.  See L{I{ParserElement.parseString}<ParserElement.parseString>} for more information
+   on parsing strings containing C{<TAB>}s, and suggested methods to maintain a
+   consistent view of the parsed string, the parse location, and line and column
+   positions within the parsed string.
+   """
+    return (loc<len(strg) and strg[loc] == '\n') and 1 or loc - strg.rfind("\n", 0, loc)
+
+def lineno(loc,strg):
+    """Returns current line number within a string, counting newlines as line separators.
+   The first line is number 1.
+
+   Note: the default parsing behavior is to expand tabs in the input string
+   before starting the parsing process.  See L{I{ParserElement.parseString}<ParserElement.parseString>} for more information
+   on parsing strings containing C{<TAB>}s, and suggested methods to maintain a
+   consistent view of the parsed string, the parse location, and line and column
+   positions within the parsed string.
+   """
+    return strg.count("\n",0,loc) + 1
+
+def line( loc, strg ):
+    """Returns the line of text containing loc within a string, counting newlines as line separators.
+       """
+    lastCR = strg.rfind("\n", 0, loc)
+    nextCR = strg.find("\n", loc)
+    if nextCR >= 0:
+        return strg[lastCR+1:nextCR]
+    else:
+        return strg[lastCR+1:]
+
+def _defaultStartDebugAction( instring, loc, expr ):
+    print ("Match " + _ustr(expr) + " at loc " + _ustr(loc) + "(%d,%d)" % ( lineno(loc,instring), col(loc,instring) ))
+
+def _defaultSuccessDebugAction( instring, startloc, endloc, expr, toks ):
+    print ("Matched " + _ustr(expr) + " -> " + str(toks.asList()))
+
+def _defaultExceptionDebugAction( instring, loc, expr, exc ):
+    print ("Exception raised:" + _ustr(exc))
+
+def nullDebugAction(*args):
+    """'Do-nothing' debug action, to suppress debugging output during parsing."""
+    pass
+
+'decorator to trim function calls to match the arity of the target'
+def _trim_arity(func, maxargs=2):
+    if func in singleArgBuiltins:
+        return lambda s,l,t: func(t)
+    limit = [0]
+    foundArity = [False]
+    def wrapper(*args):
+        while 1:
+            try:
+                ret = func(*args[limit[0]:])
+                foundArity[0] = True
+                return ret
+            except TypeError:
+                if limit[0] <= maxargs and not foundArity[0]:
+                    limit[0] += 1
+                    continue
+                raise
+    return wrapper
+    
+class ParserElement(object):
+    """Abstract base level parser element class."""
+    DEFAULT_WHITE_CHARS = " \n\t\r"
+    verbose_stacktrace = False
+
+    def setDefaultWhitespaceChars( chars ):
+        """Overrides the default whitespace chars
+        """
+        ParserElement.DEFAULT_WHITE_CHARS = chars
+    setDefaultWhitespaceChars = staticmethod(setDefaultWhitespaceChars)
+
+    def inlineLiteralsUsing(cls):
+        """
+        Set class to be used for inclusion of string literals into a parser.
+        """
+        ParserElement.literalStringClass = cls
+    inlineLiteralsUsing = staticmethod(inlineLiteralsUsing)
+
+    def __init__( self, savelist=False ):
+        self.parseAction = list()
+        self.failAction = None
+        #~ self.name = "<unknown>"  # don't define self.name, let subclasses try/except upcall
+        self.strRepr = None
+        self.resultsName = None
+        self.saveAsList = savelist
+        self.skipWhitespace = True
+        self.whiteChars = ParserElement.DEFAULT_WHITE_CHARS
+        self.copyDefaultWhiteChars = True
+        self.mayReturnEmpty = False # used when checking for left-recursion
+        self.keepTabs = False
+        self.ignoreExprs = list()
+        self.debug = False
+        self.streamlined = False
+        self.mayIndexError = True # used to optimize exception handling for subclasses that don't advance parse index
+        self.errmsg = ""
+        self.modalResults = True # used to mark results names as modal (report only last) or cumulative (list all)
+        self.debugActions = ( None, None, None ) #custom debug actions
+        self.re = None
+        self.callPreparse = True # used to avoid redundant calls to preParse
+        self.callDuringTry = False
+
+    def copy( self ):
+        """Make a copy of this C{ParserElement}.  Useful for defining different parse actions
+           for the same parsing pattern, using copies of the original parse element."""
+        cpy = copy.copy( self )
+        cpy.parseAction = self.parseAction[:]
+        cpy.ignoreExprs = self.ignoreExprs[:]
+        if self.copyDefaultWhiteChars:
+            cpy.whiteChars = ParserElement.DEFAULT_WHITE_CHARS
+        return cpy
+
+    def setName( self, name ):
+        """Define name for this expression, for use in debugging."""
+        self.name = name
+        self.errmsg = "Expected " + self.name
+        if hasattr(self,"exception"):
+            self.exception.msg = self.errmsg
+        return self
+
+    def setResultsName( self, name, listAllMatches=False ):
+        """Define name for referencing matching tokens as a nested attribute
+           of the returned parse results.
+           NOTE: this returns a *copy* of the original C{ParserElement} object;
+           this is so that the client can define a basic element, such as an
+           integer, and reference it in multiple places with different names.
+           
+           You can also set results names using the abbreviated syntax,
+           C{expr("name")} in place of C{expr.setResultsName("name")} - 
+           see L{I{__call__}<__call__>}.
+        """
+        newself = self.copy()
+        if name.endswith("*"):
+            name = name[:-1]
+            listAllMatches=True
+        newself.resultsName = name
+        newself.modalResults = not listAllMatches
+        return newself
+
+    def setBreak(self,breakFlag = True):
+        """Method to invoke the Python pdb debugger when this element is
+           about to be parsed. Set C{breakFlag} to True to enable, False to
+           disable.
+        """
+        if breakFlag:
+            _parseMethod = self._parse
+            def breaker(instring, loc, doActions=True, callPreParse=True):
+                import pdb
+                pdb.set_trace()
+                return _parseMethod( instring, loc, doActions, callPreParse )
+            breaker._originalParseMethod = _parseMethod
+            self._parse = breaker
+        else:
+            if hasattr(self._parse,"_originalParseMethod"):
+                self._parse = self._parse._originalParseMethod
+        return self
+
+    def setParseAction( self, *fns, **kwargs ):
+        """Define action to perform when successfully matching parse element definition.
+           Parse action fn is a callable method with 0-3 arguments, called as C{fn(s,loc,toks)},
+           C{fn(loc,toks)}, C{fn(toks)}, or just C{fn()}, where:
+            - s   = the original string being parsed (see note below)
+            - loc = the location of the matching substring
+            - toks = a list of the matched tokens, packaged as a C{L{ParseResults}} object
+           If the functions in fns modify the tokens, they can return them as the return
+           value from fn, and the modified list of tokens will replace the original.
+           Otherwise, fn does not need to return any value.
+
+           Note: the default parsing behavior is to expand tabs in the input string
+           before starting the parsing process.  See L{I{parseString}<parseString>} for more information
+           on parsing strings containing C{<TAB>}s, and suggested methods to maintain a
+           consistent view of the parsed string, the parse location, and line and column
+           positions within the parsed string.
+           """
+        self.parseAction = list(map(_trim_arity, list(fns)))
+        self.callDuringTry = ("callDuringTry" in kwargs and kwargs["callDuringTry"])
+        return self
+
+    def addParseAction( self, *fns, **kwargs ):
+        """Add parse action to expression's list of parse actions. See L{I{setParseAction}<setParseAction>}."""
+        self.parseAction += list(map(_trim_arity, list(fns)))
+        self.callDuringTry = self.callDuringTry or ("callDuringTry" in kwargs and kwargs["callDuringTry"])
+        return self
+
+    def setFailAction( self, fn ):
+        """Define action to perform if parsing fails at this expression.
+           Fail acton fn is a callable function that takes the arguments
+           C{fn(s,loc,expr,err)} where:
+            - s = string being parsed
+            - loc = location where expression match was attempted and failed
+            - expr = the parse expression that failed
+            - err = the exception thrown
+           The function returns no value.  It may throw C{L{ParseFatalException}}
+           if it is desired to stop parsing immediately."""
+        self.failAction = fn
+        return self
+
+    def _skipIgnorables( self, instring, loc ):
+        exprsFound = True
+        while exprsFound:
+            exprsFound = False
+            for e in self.ignoreExprs:
+                try:
+                    while 1:
+                        loc,dummy = e._parse( instring, loc )
+                        exprsFound = True
+                except ParseException:
+                    pass
+        return loc
+
+    def preParse( self, instring, loc ):
+        if self.ignoreExprs:
+            loc = self._skipIgnorables( instring, loc )
+
+        if self.skipWhitespace:
+            wt = self.whiteChars
+            instrlen = len(instring)
+            while loc < instrlen and instring[loc] in wt:
+                loc += 1
+
+        return loc
+
+    def parseImpl( self, instring, loc, doActions=True ):
+        return loc, []
+
+    def postParse( self, instring, loc, tokenlist ):
+        return tokenlist
+
+    #~ @profile
+    def _parseNoCache( self, instring, loc, doActions=True, callPreParse=True ):
+        debugging = ( self.debug ) #and doActions )
+
+        if debugging or self.failAction:
+            #~ print ("Match",self,"at loc",loc,"(%d,%d)" % ( lineno(loc,instring), col(loc,instring) ))
+            if (self.debugActions[0] ):
+                self.debugActions[0]( instring, loc, self )
+            if callPreParse and self.callPreparse:
+                preloc = self.preParse( instring, loc )
+            else:
+                preloc = loc
+            tokensStart = preloc
+            try:
+                try:
+                    loc,tokens = self.parseImpl( instring, preloc, doActions )
+                except IndexError:
+                    raise ParseException( instring, len(instring), self.errmsg, self )
+            except ParseBaseException, err:
+                #~ print ("Exception raised:", err)
+                err = None
+                if self.debugActions[2]:
+                    self.debugActions[2]( instring, tokensStart, self, err )
+                if self.failAction:
+                    self.failAction( instring, tokensStart, self, err )
+                raise
+        else:
+            if callPreParse and self.callPreparse:
+                preloc = self.preParse( instring, loc )
+            else:
+                preloc = loc
+            tokensStart = preloc
+            if self.mayIndexError or loc >= len(instring):
+                try:
+                    loc,tokens = self.parseImpl( instring, preloc, doActions )
+                except IndexError:
+                    raise ParseException( instring, len(instring), self.errmsg, self )
+            else:
+                loc,tokens = self.parseImpl( instring, preloc, doActions )
+
+        tokens = self.postParse( instring, loc, tokens )
+
+        retTokens = ParseResults( tokens, self.resultsName, asList=self.saveAsList, modal=self.modalResults )
+        if self.parseAction and (doActions or self.callDuringTry):
+            if debugging:
+                try:
+                    for fn in self.parseAction:
+                        tokens = fn( instring, tokensStart, retTokens )
+                        if tokens is not None:
+                            retTokens = ParseResults( tokens,
+                                                      self.resultsName,
+                                                      asList=self.saveAsList and isinstance(tokens,(ParseResults,list)),
+                                                      modal=self.modalResults )
+                except ParseBaseException, err:
+                    #~ print "Exception raised in user parse action:", err
+                    if (self.debugActions[2] ):
+                        self.debugActions[2]( instring, tokensStart, self, err )
+                    raise
+            else:
+                for fn in self.parseAction:
+                    tokens = fn( instring, tokensStart, retTokens )
+                    if tokens is not None:
+                        retTokens = ParseResults( tokens,
+                                                  self.resultsName,
+                                                  asList=self.saveAsList and isinstance(tokens,(ParseResults,list)),
+                                                  modal=self.modalResults )
+
+        if debugging:
+            #~ print ("Matched",self,"->",retTokens.asList())
+            if (self.debugActions[1] ):
+                self.debugActions[1]( instring, tokensStart, loc, self, retTokens )
+
+        return loc, retTokens
+
+    def tryParse( self, instring, loc ):
+        try:
+            return self._parse( instring, loc, doActions=False )[0]
+        except ParseFatalException:
+            raise ParseException( instring, loc, self.errmsg, self)
+
+    # this method gets repeatedly called during backtracking with the same arguments -
+    # we can cache these arguments and save ourselves the trouble of re-parsing the contained expression
+    def _parseCache( self, instring, loc, doActions=True, callPreParse=True ):
+        lookup = (self,instring,loc,callPreParse,doActions)
+        if lookup in ParserElement._exprArgCache:
+            value = ParserElement._exprArgCache[ lookup ]
+            if isinstance(value, Exception):
+                raise value
+            return (value[0],value[1].copy())
+        else:
+            try:
+                value = self._parseNoCache( instring, loc, doActions, callPreParse )
+                ParserElement._exprArgCache[ lookup ] = (value[0],value[1].copy())
+                return value
+            except ParseBaseException, pe:
+                ParserElement._exprArgCache[ lookup ] = pe
+                raise
+
+    _parse = _parseNoCache
+
+    # argument cache for optimizing repeated calls when backtracking through recursive expressions
+    _exprArgCache = {}
+    def resetCache():
+        ParserElement._exprArgCache.clear()
+    resetCache = staticmethod(resetCache)
+
+    _packratEnabled = False
+    def enablePackrat():
+        """Enables "packrat" parsing, which adds memoizing to the parsing logic.
+           Repeated parse attempts at the same string location (which happens
+           often in many complex grammars) can immediately return a cached value,
+           instead of re-executing parsing/validating code.  Memoizing is done of
+           both valid results and parsing exceptions.
+
+           This speedup may break existing programs that use parse actions that
+           have side-effects.  For this reason, packrat parsing is disabled when
+           you first import pyparsing.  To activate the packrat feature, your
+           program must call the class method C{ParserElement.enablePackrat()}.  If
+           your program uses C{psyco} to "compile as you go", you must call
+           C{enablePackrat} before calling C{psyco.full()}.  If you do not do this,
+           Python will crash.  For best results, call C{enablePackrat()} immediately
+           after importing pyparsing.
+        """
+        if not ParserElement._packratEnabled:
+            ParserElement._packratEnabled = True
+            ParserElement._parse = ParserElement._parseCache
+    enablePackrat = staticmethod(enablePackrat)
+
+    def parseString( self, instring, parseAll=False ):
+        """Execute the parse expression with the given string.
+           This is the main interface to the client code, once the complete
+           expression has been built.
+
+           If you want the grammar to require that the entire input string be
+           successfully parsed, then set C{parseAll} to True (equivalent to ending
+           the grammar with C{L{StringEnd()}}).
+
+           Note: C{parseString} implicitly calls C{expandtabs()} on the input string,
+           in order to report proper column numbers in parse actions.
+           If the input string contains tabs and
+           the grammar uses parse actions that use the C{loc} argument to index into the
+           string being parsed, you can ensure you have a consistent view of the input
+           string by:
+            - calling C{parseWithTabs} on your grammar before calling C{parseString}
+              (see L{I{parseWithTabs}<parseWithTabs>})
+            - define your parse action using the full C{(s,loc,toks)} signature, and
+              reference the input string using the parse action's C{s} argument
+            - explictly expand the tabs in your input string before calling
+              C{parseString}
+        """
+        ParserElement.resetCache()
+        if not self.streamlined:
+            self.streamline()
+            #~ self.saveAsList = True
+        for e in self.ignoreExprs:
+            e.streamline()
+        if not self.keepTabs:
+            instring = instring.expandtabs()
+        try:
+            loc, tokens = self._parse( instring, 0 )
+            if parseAll:
+                loc = self.preParse( instring, loc )
+                se = Empty() + StringEnd()
+                se._parse( instring, loc )
+        except ParseBaseException, exc:
+            if ParserElement.verbose_stacktrace:
+                raise
+            else:
+                # catch and re-raise exception from here, clears out pyparsing internal stack trace
+                raise exc
+        else:
+            return tokens
+
+    def scanString( self, instring, maxMatches=_MAX_INT, overlap=False ):
+        """Scan the input string for expression matches.  Each match will return the
+           matching tokens, start location, and end location.  May be called with optional
+           C{maxMatches} argument, to clip scanning after 'n' matches are found.  If
+           C{overlap} is specified, then overlapping matches will be reported.
+
+           Note that the start and end locations are reported relative to the string
+           being parsed.  See L{I{parseString}<parseString>} for more information on parsing
+           strings with embedded tabs."""
+        if not self.streamlined:
+            self.streamline()
+        for e in self.ignoreExprs:
+            e.streamline()
+
+        if not self.keepTabs:
+            instring = _ustr(instring).expandtabs()
+        instrlen = len(instring)
+        loc = 0
+        preparseFn = self.preParse
+        parseFn = self._parse
+        ParserElement.resetCache()
+        matches = 0
+        try:
+            while loc <= instrlen and matches < maxMatches:
+                try:
+                    preloc = preparseFn( instring, loc )
+                    nextLoc,tokens = parseFn( instring, preloc, callPreParse=False )
+                except ParseException:
+                    loc = preloc+1
+                else:
+                    if nextLoc > loc:
+                        matches += 1
+                        yield tokens, preloc, nextLoc
+                        if overlap:
+                            nextloc = preparseFn( instring, loc )
+                            if nextloc > loc:
+                                loc = nextLoc
+                            else:
+                                loc += 1
+                        else:
+                            loc = nextLoc
+                    else:
+                        loc = preloc+1
+        except ParseBaseException, exc:
+            if ParserElement.verbose_stacktrace:
+                raise
+            else:
+                # catch and re-raise exception from here, clears out pyparsing internal stack trace
+                raise exc
+
+    def transformString( self, instring ):
+        """Extension to C{L{scanString}}, to modify matching text with modified tokens that may
+           be returned from a parse action.  To use C{transformString}, define a grammar and
+           attach a parse action to it that modifies the returned token list.
+           Invoking C{transformString()} on a target string will then scan for matches,
+           and replace the matched text patterns according to the logic in the parse
+           action.  C{transformString()} returns the resulting transformed string."""
+        out = []
+        lastE = 0
+        # force preservation of <TAB>s, to minimize unwanted transformation of string, and to
+        # keep string locs straight between transformString and scanString
+        self.keepTabs = True
+        try:
+            for t,s,e in self.scanString( instring ):
+                out.append( instring[lastE:s] )
+                if t:
+                    if isinstance(t,ParseResults):
+                        out += t.asList()
+                    elif isinstance(t,list):
+                        out += t
+                    else:
+                        out.append(t)
+                lastE = e
+            out.append(instring[lastE:])
+            out = [o for o in out if o]
+            return "".join(map(_ustr,_flatten(out)))
+        except ParseBaseException, exc:
+            if ParserElement.verbose_stacktrace:
+                raise
+            else:
+                # catch and re-raise exception from here, clears out pyparsing internal stack trace
+                raise exc
+
+    def searchString( self, instring, maxMatches=_MAX_INT ):
+        """Another extension to C{L{scanString}}, simplifying the access to the tokens found
+           to match the given parse expression.  May be called with optional
+           C{maxMatches} argument, to clip searching after 'n' matches are found.
+        """
+        try:
+            return ParseResults([ t for t,s,e in self.scanString( instring, maxMatches ) ])
+        except ParseBaseException, exc:
+            if ParserElement.verbose_stacktrace:
+                raise
+            else:
+                # catch and re-raise exception from here, clears out pyparsing internal stack trace
+                raise exc
+
+    def __add__(self, other ):
+        """Implementation of + operator - returns C{L{And}}"""
+        if isinstance( other, basestring ):
+            other = ParserElement.literalStringClass( other )
+        if not isinstance( other, ParserElement ):
+            warnings.warn("Cannot combine element of type %s with ParserElement" % type(other),
+                    SyntaxWarning, stacklevel=2)
+            return None
+        return And( [ self, other ] )
+
+    def __radd__(self, other ):
+        """Implementation of + operator when left operand is not a C{L{ParserElement}}"""
+        if isinstance( other, basestring ):
+            other = ParserElement.literalStringClass( other )
+        if not isinstance( other, ParserElement ):
+            warnings.warn("Cannot combine element of type %s with ParserElement" % type(other),
+                    SyntaxWarning, stacklevel=2)
+            return None
+        return other + self
+
+    def __sub__(self, other):
+        """Implementation of - operator, returns C{L{And}} with error stop"""
+        if isinstance( other, basestring ):
+            other = ParserElement.literalStringClass( other )
+        if not isinstance( other, ParserElement ):
+            warnings.warn("Cannot combine element of type %s with ParserElement" % type(other),
+                    SyntaxWarning, stacklevel=2)
+            return None
+        return And( [ self, And._ErrorStop(), other ] )
+
+    def __rsub__(self, other ):
+        """Implementation of - operator when left operand is not a C{L{ParserElement}}"""
+        if isinstance( other, basestring ):
+            other = ParserElement.literalStringClass( other )
+        if not isinstance( other, ParserElement ):
+            warnings.warn("Cannot combine element of type %s with ParserElement" % type(other),
+                    SyntaxWarning, stacklevel=2)
+            return None
+        return other - self
+
+    def __mul__(self,other):
+        """Implementation of * operator, allows use of C{expr * 3} in place of
+           C{expr + expr + expr}.  Expressions may also me multiplied by a 2-integer
+           tuple, similar to C{{min,max}} multipliers in regular expressions.  Tuples
+           may also include C{None} as in:
+            - C{expr*(n,None)} or C{expr*(n,)} is equivalent
+              to C{expr*n + L{ZeroOrMore}(expr)}
+              (read as "at least n instances of C{expr}")
+            - C{expr*(None,n)} is equivalent to C{expr*(0,n)}
+              (read as "0 to n instances of C{expr}")
+            - C{expr*(None,None)} is equivalent to C{L{ZeroOrMore}(expr)}
+            - C{expr*(1,None)} is equivalent to C{L{OneOrMore}(expr)}
+
+           Note that C{expr*(None,n)} does not raise an exception if
+           more than n exprs exist in the input stream; that is,
+           C{expr*(None,n)} does not enforce a maximum number of expr
+           occurrences.  If this behavior is desired, then write
+           C{expr*(None,n) + ~expr}
+
+        """
+        if isinstance(other,int):
+            minElements, optElements = other,0
+        elif isinstance(other,tuple):
+            other = (other + (None, None))[:2]
+            if other[0] is None:
+                other = (0, other[1])
+            if isinstance(other[0],int) and other[1] is None:
+                if other[0] == 0:
+                    return ZeroOrMore(self)
+                if other[0] == 1:
+                    return OneOrMore(self)
+                else:
+                    return self*other[0] + ZeroOrMore(self)
+            elif isinstance(other[0],int) and isinstance(other[1],int):
+                minElements, optElements = other
+                optElements -= minElements
+            else:
+                raise TypeError("cannot multiply 'ParserElement' and ('%s','%s') objects", type(other[0]),type(other[1]))
+        else:
+            raise TypeError("cannot multiply 'ParserElement' and '%s' objects", type(other))
+
+        if minElements < 0:
+            raise ValueError("cannot multiply ParserElement by negative value")
+        if optElements < 0:
+            raise ValueError("second tuple value must be greater or equal to first tuple value")
+        if minElements == optElements == 0:
+            raise ValueError("cannot multiply ParserElement by 0 or (0,0)")
+
+        if (optElements):
+            def makeOptionalList(n):
+                if n>1:
+                    return Optional(self + makeOptionalList(n-1))
+                else:
+                    return Optional(self)
+            if minElements:
+                if minElements == 1:
+                    ret = self + makeOptionalList(optElements)
+                else:
+                    ret = And([self]*minElements) + makeOptionalList(optElements)
+            else:
+                ret = makeOptionalList(optElements)
+        else:
+            if minElements == 1:
+                ret = self
+            else:
+                ret = And([self]*minElements)
+        return ret
+
+    def __rmul__(self, other):
+        return self.__mul__(other)
+
+    def __or__(self, other ):
+        """Implementation of | operator - returns C{L{MatchFirst}}"""
+        if isinstance( other, basestring ):
+            other = ParserElement.literalStringClass( other )
+        if not isinstance( other, ParserElement ):
+            warnings.warn("Cannot combine element of type %s with ParserElement" % type(other),
+                    SyntaxWarning, stacklevel=2)
+            return None
+        return MatchFirst( [ self, other ] )
+
+    def __ror__(self, other ):
+        """Implementation of | operator when left operand is not a C{L{ParserElement}}"""
+        if isinstance( other, basestring ):
+            other = ParserElement.literalStringClass( other )
+        if not isinstance( other, ParserElement ):
+            warnings.warn("Cannot combine element of type %s with ParserElement" % type(other),
+                    SyntaxWarning, stacklevel=2)
+            return None
+        return other | self
+
+    def __xor__(self, other ):
+        """Implementation of ^ operator - returns C{L{Or}}"""
+        if isinstance( other, basestring ):
+            other = ParserElement.literalStringClass( other )
+        if not isinstance( other, ParserElement ):
+            warnings.warn("Cannot combine element of type %s with ParserElement" % type(other),
+                    SyntaxWarning, stacklevel=2)
+            return None
+        return Or( [ self, other ] )
+
+    def __rxor__(self, other ):
+        """Implementation of ^ operator when left operand is not a C{L{ParserElement}}"""
+        if isinstance( other, basestring ):
+            other = ParserElement.literalStringClass( other )
+        if not isinstance( other, ParserElement ):
+            warnings.warn("Cannot combine element of type %s with ParserElement" % type(other),
+                    SyntaxWarning, stacklevel=2)
+            return None
+        return other ^ self
+
+    def __and__(self, other ):
+        """Implementation of & operator - returns C{L{Each}}"""
+        if isinstance( other, basestring ):
+            other = ParserElement.literalStringClass( other )
+        if not isinstance( other, ParserElement ):
+            warnings.warn("Cannot combine element of type %s with ParserElement" % type(other),
+                    SyntaxWarning, stacklevel=2)
+            return None
+        return Each( [ self, other ] )
+
+    def __rand__(self, other ):
+        """Implementation of & operator when left operand is not a C{L{ParserElement}}"""
+        if isinstance( other, basestring ):
+            other = ParserElement.literalStringClass( other )
+        if not isinstance( other, ParserElement ):
+            warnings.warn("Cannot combine element of type %s with ParserElement" % type(other),
+                    SyntaxWarning, stacklevel=2)
+            return None
+        return other & self
+
+    def __invert__( self ):
+        """Implementation of ~ operator - returns C{L{NotAny}}"""
+        return NotAny( self )
+
+    def __call__(self, name):
+        """Shortcut for C{L{setResultsName}}, with C{listAllMatches=default}::
+             userdata = Word(alphas).setResultsName("name") + Word(nums+"-").setResultsName("socsecno")
+           could be written as::
+             userdata = Word(alphas)("name") + Word(nums+"-")("socsecno")
+             
+           If C{name} is given with a trailing C{'*'} character, then C{listAllMatches} will be
+           passed as C{True}.
+           """
+        return self.setResultsName(name)
+
+    def suppress( self ):
+        """Suppresses the output of this C{ParserElement}; useful to keep punctuation from
+           cluttering up returned output.
+        """
+        return Suppress( self )
+
+    def leaveWhitespace( self ):
+        """Disables the skipping of whitespace before matching the characters in the
+           C{ParserElement}'s defined pattern.  This is normally only used internally by
+           the pyparsing module, but may be needed in some whitespace-sensitive grammars.
+        """
+        self.skipWhitespace = False
+        return self
+
+    def setWhitespaceChars( self, chars ):
+        """Overrides the default whitespace chars
+        """
+        self.skipWhitespace = True
+        self.whiteChars = chars
+        self.copyDefaultWhiteChars = False
+        return self
+
+    def parseWithTabs( self ):
+        """Overrides default behavior to expand C{<TAB>}s to spaces before parsing the input string.
+           Must be called before C{parseString} when the input grammar contains elements that
+           match C{<TAB>} characters."""
+        self.keepTabs = True
+        return self
+
+    def ignore( self, other ):
+        """Define expression to be ignored (e.g., comments) while doing pattern
+           matching; may be called repeatedly, to define multiple comment or other
+           ignorable patterns.
+        """
+        if isinstance( other, Suppress ):
+            if other not in self.ignoreExprs:
+                self.ignoreExprs.append( other.copy() )
+        else:
+            self.ignoreExprs.append( Suppress( other.copy() ) )
+        return self
+
+    def setDebugActions( self, startAction, successAction, exceptionAction ):
+        """Enable display of debugging messages while doing pattern matching."""
+        self.debugActions = (startAction or _defaultStartDebugAction,
+                             successAction or _defaultSuccessDebugAction,
+                             exceptionAction or _defaultExceptionDebugAction)
+        self.debug = True
+        return self
+
+    def setDebug( self, flag=True ):
+        """Enable display of debugging messages while doing pattern matching.
+           Set C{flag} to True to enable, False to disable."""
+        if flag:
+            self.setDebugActions( _defaultStartDebugAction, _defaultSuccessDebugAction, _defaultExceptionDebugAction )
+        else:
+            self.debug = False
+        return self
+
+    def __str__( self ):
+        return self.name
+
+    def __repr__( self ):
+        return _ustr(self)
+
+    def streamline( self ):
+        self.streamlined = True
+        self.strRepr = None
+        return self
+
+    def checkRecursion( self, parseElementList ):
+        pass
+
+    def validate( self, validateTrace=[] ):
+        """Check defined expressions for valid structure, check for infinite recursive definitions."""
+        self.checkRecursion( [] )
+
+    def parseFile( self, file_or_filename, parseAll=False ):
+        """Execute the parse expression on the given file or filename.
+           If a filename is specified (instead of a file object),
+           the entire file is opened, read, and closed before parsing.
+        """
+        try:
+            file_contents = file_or_filename.read()
+        except AttributeError:
+            f = open(file_or_filename, "r")
+            file_contents = f.read()
+            f.close()
+        try:
+            return self.parseString(file_contents, parseAll)
+        except ParseBaseException, exc:
+            if ParserElement.verbose_stacktrace:
+                raise
+            else:
+                # catch and re-raise exception from here, clears out pyparsing internal stack trace
+                raise exc
+
+    def getException(self):
+        return ParseException("",0,self.errmsg,self)
+
+    def __getattr__(self,aname):
+        if aname == "myException":
+            self.myException = ret = self.getException();
+            return ret;
+        else:
+            raise AttributeError("no such attribute " + aname)
+
+    def __eq__(self,other):
+        if isinstance(other, ParserElement):
+            return self is other or self.__dict__ == other.__dict__
+        elif isinstance(other, basestring):
+            try:
+                self.parseString(_ustr(other), parseAll=True)
+                return True
+            except ParseBaseException:
+                return False
+        else:
+            return super(ParserElement,self)==other
+
+    def __ne__(self,other):
+        return not (self == other)
+
+    def __hash__(self):
+        return hash(id(self))
+
+    def __req__(self,other):
+        return self == other
+
+    def __rne__(self,other):
+        return not (self == other)
+
+
+class Token(ParserElement):
+    """Abstract C{ParserElement} subclass, for defining atomic matching patterns."""
+    def __init__( self ):
+        super(Token,self).__init__( savelist=False )
+
+    def setName(self, name):
+        s = super(Token,self).setName(name)
+        self.errmsg = "Expected " + self.name
+        return s
+
+
+class Empty(Token):
+    """An empty token, will always match."""
+    def __init__( self ):
+        super(Empty,self).__init__()
+        self.name = "Empty"
+        self.mayReturnEmpty = True
+        self.mayIndexError = False
+
+
+class NoMatch(Token):
+    """A token that will never match."""
+    def __init__( self ):
+        super(NoMatch,self).__init__()
+        self.name = "NoMatch"
+        self.mayReturnEmpty = True
+        self.mayIndexError = False
+        self.errmsg = "Unmatchable token"
+
+    def parseImpl( self, instring, loc, doActions=True ):
+        exc = self.myException
+        exc.loc = loc
+        exc.pstr = instring
+        raise exc
+
+
+class Literal(Token):
+    """Token to exactly match a specified string."""
+    def __init__( self, matchString ):
+        super(Literal,self).__init__()
+        self.match = matchString
+        self.matchLen = len(matchString)
+        try:
+            self.firstMatchChar = matchString[0]
+        except IndexError:
+            warnings.warn("null string passed to Literal; use Empty() instead",
+                            SyntaxWarning, stacklevel=2)
+            self.__class__ = Empty
+        self.name = '"%s"' % _ustr(self.match)
+        self.errmsg = "Expected " + self.name
+        self.mayReturnEmpty = False
+        self.mayIndexError = False
+
+    # Performance tuning: this routine gets called a *lot*
+    # if this is a single character match string  and the first character matches,
+    # short-circuit as quickly as possible, and avoid calling startswith
+    #~ @profile
+    def parseImpl( self, instring, loc, doActions=True ):
+        if (instring[loc] == self.firstMatchChar and
+            (self.matchLen==1 or instring.startswith(self.match,loc)) ):
+            return loc+self.matchLen, self.match
+        #~ raise ParseException( instring, loc, self.errmsg )
+        exc = self.myException
+        exc.loc = loc
+        exc.pstr = instring
+        raise exc
+_L = Literal
+ParserElement.literalStringClass = Literal
+
+class Keyword(Token):
+    """Token to exactly match a specified string as a keyword, that is, it must be
+       immediately followed by a non-keyword character.  Compare with C{L{Literal}}::
+         Literal("if") will match the leading C{'if'} in C{'ifAndOnlyIf'}.
+         Keyword("if") will not; it will only match the leading C{'if'} in C{'if x=1'}, or C{'if(y==2)'}
+       Accepts two optional constructor arguments in addition to the keyword string:
+       C{identChars} is a string of characters that would be valid identifier characters,
+       defaulting to all alphanumerics + "_" and "$"; C{caseless} allows case-insensitive
+       matching, default is C{False}.
+    """
+    DEFAULT_KEYWORD_CHARS = alphanums+"_$"
+
+    def __init__( self, matchString, identChars=DEFAULT_KEYWORD_CHARS, caseless=False ):
+        super(Keyword,self).__init__()
+        self.match = matchString
+        self.matchLen = len(matchString)
+        try:
+            self.firstMatchChar = matchString[0]
+        except IndexError:
+            warnings.warn("null string passed to Keyword; use Empty() instead",
+                            SyntaxWarning, stacklevel=2)
+        self.name = '"%s"' % self.match
+        self.errmsg = "Expected " + self.name
+        self.mayReturnEmpty = False
+        self.mayIndexError = False
+        self.caseless = caseless
+        if caseless:
+            self.caselessmatch = matchString.upper()
+            identChars = identChars.upper()
+        self.identChars = set(identChars)
+
+    def parseImpl( self, instring, loc, doActions=True ):
+        if self.caseless:
+            if ( (instring[ loc:loc+self.matchLen ].upper() == self.caselessmatch) and
+                 (loc >= len(instring)-self.matchLen or instring[loc+self.matchLen].upper() not in self.identChars) and
+                 (loc == 0 or instring[loc-1].upper() not in self.identChars) ):
+                return loc+self.matchLen, self.match
+        else:
+            if (instring[loc] == self.firstMatchChar and
+                (self.matchLen==1 or instring.startswith(self.match,loc)) and
+                (loc >= len(instring)-self.matchLen or instring[loc+self.matchLen] not in self.identChars) and
+                (loc == 0 or instring[loc-1] not in self.identChars) ):
+                return loc+self.matchLen, self.match
+        #~ raise ParseException( instring, loc, self.errmsg )
+        exc = self.myException
+        exc.loc = loc
+        exc.pstr = instring
+        raise exc
+
+    def copy(self):
+        c = super(Keyword,self).copy()
+        c.identChars = Keyword.DEFAULT_KEYWORD_CHARS
+        return c
+
+    def setDefaultKeywordChars( chars ):
+        """Overrides the default Keyword chars
+        """
+        Keyword.DEFAULT_KEYWORD_CHARS = chars
+    setDefaultKeywordChars = staticmethod(setDefaultKeywordChars)
+
+class CaselessLiteral(Literal):
+    """Token to match a specified string, ignoring case of letters.
+       Note: the matched results will always be in the case of the given
+       match string, NOT the case of the input text.
+    """
+    def __init__( self, matchString ):
+        super(CaselessLiteral,self).__init__( matchString.upper() )
+        # Preserve the defining literal.
+        self.returnString = matchString
+        self.name = "'%s'" % self.returnString
+        self.errmsg = "Expected " + self.name
+
+    def parseImpl( self, instring, loc, doActions=True ):
+        if instring[ loc:loc+self.matchLen ].upper() == self.match:
+            return loc+self.matchLen, self.returnString
+        #~ raise ParseException( instring, loc, self.errmsg )
+        exc = self.myException
+        exc.loc = loc
+        exc.pstr = instring
+        raise exc
+
+class CaselessKeyword(Keyword):
+    def __init__( self, matchString, identChars=Keyword.DEFAULT_KEYWORD_CHARS ):
+        super(CaselessKeyword,self).__init__( matchString, identChars, caseless=True )
+
+    def parseImpl( self, instring, loc, doActions=True ):
+        if ( (instring[ loc:loc+self.matchLen ].upper() == self.caselessmatch) and
+             (loc >= len(instring)-self.matchLen or instring[loc+self.matchLen].upper() not in self.identChars) ):
+            return loc+self.matchLen, self.match
+        #~ raise ParseException( instring, loc, self.errmsg )
+        exc = self.myException
+        exc.loc = loc
+        exc.pstr = instring
+        raise exc
+
+class Word(Token):
+    """Token for matching words composed of allowed character sets.
+       Defined with string containing all allowed initial characters,
+       an optional string containing allowed body characters (if omitted,
+       defaults to the initial character set), and an optional minimum,
+       maximum, and/or exact length.  The default value for C{min} is 1 (a
+       minimum value < 1 is not valid); the default values for C{max} and C{exact}
+       are 0, meaning no maximum or exact length restriction. An optional
+       C{exclude} parameter can list characters that might be found in 
+       the input C{bodyChars} string; useful to define a word of all printables
+       except for one or two characters, for instance.
+    """
+    def __init__( self, initChars, bodyChars=None, min=1, max=0, exact=0, asKeyword=False, excludeChars=None ):
+        super(Word,self).__init__()
+        if excludeChars:
+            initChars = ''.join([c for c in initChars if c not in excludeChars])
+            if bodyChars:
+                bodyChars = ''.join([c for c in bodyChars if c not in excludeChars])
+        self.initCharsOrig = initChars
+        self.initChars = set(initChars)
+        if bodyChars :
+            self.bodyCharsOrig = bodyChars
+            self.bodyChars = set(bodyChars)
+        else:
+            self.bodyCharsOrig = initChars
+            self.bodyChars = set(initChars)
+
+        self.maxSpecified = max > 0
+
+        if min < 1:
+            raise ValueError("cannot specify a minimum length < 1; use Optional(Word()) if zero-length word is permitted")
+
+        self.minLen = min
+
+        if max > 0:
+            self.maxLen = max
+        else:
+            self.maxLen = _MAX_INT
+
+        if exact > 0:
+            self.maxLen = exact
+            self.minLen = exact
+
+        self.name = _ustr(self)
+        self.errmsg = "Expected " + self.name
+        self.mayIndexError = False
+        self.asKeyword = asKeyword
+
+        if ' ' not in self.initCharsOrig+self.bodyCharsOrig and (min==1 and max==0 and exact==0):
+            if self.bodyCharsOrig == self.initCharsOrig:
+                self.reString = "[%s]+" % _escapeRegexRangeChars(self.initCharsOrig)
+            elif len(self.bodyCharsOrig) == 1:
+                self.reString = "%s[%s]*" % \
+                                      (re.escape(self.initCharsOrig),
+                                      _escapeRegexRangeChars(self.bodyCharsOrig),)
+            else:
+                self.reString = "[%s][%s]*" % \
+                                      (_escapeRegexRangeChars(self.initCharsOrig),
+                                      _escapeRegexRangeChars(self.bodyCharsOrig),)
+            if self.asKeyword:
+                self.reString = r"\b"+self.reString+r"\b"
+            try:
+                self.re = re.compile( self.reString )
+            except:
+                self.re = None
+
+    def parseImpl( self, instring, loc, doActions=True ):
+        if self.re:
+            result = self.re.match(instring,loc)
+            if not result:
+                exc = self.myException
+                exc.loc = loc
+                exc.pstr = instring
+                raise exc
+
+            loc = result.end()
+            return loc, result.group()
+
+        if not(instring[ loc ] in self.initChars):
+            #~ raise ParseException( instring, loc, self.errmsg )
+            exc = self.myException
+            exc.loc = loc
+            exc.pstr = instring
+            raise exc
+        start = loc
+        loc += 1
+        instrlen = len(instring)
+        bodychars = self.bodyChars
+        maxloc = start + self.maxLen
+        maxloc = min( maxloc, instrlen )
+        while loc < maxloc and instring[loc] in bodychars:
+            loc += 1
+
+        throwException = False
+        if loc - start < self.minLen:
+            throwException = True
+        if self.maxSpecified and loc < instrlen and instring[loc] in bodychars:
+            throwException = True
+        if self.asKeyword:
+            if (start>0 and instring[start-1] in bodychars) or (loc<instrlen and instring[loc] in bodychars):
+                throwException = True
+
+        if throwException:
+            #~ raise ParseException( instring, loc, self.errmsg )
+            exc = self.myException
+            exc.loc = loc
+            exc.pstr = instring
+            raise exc
+
+        return loc, instring[start:loc]
+
+    def __str__( self ):
+        try:
+            return super(Word,self).__str__()
+        except:
+            pass
+
+
+        if self.strRepr is None:
+
+            def charsAsStr(s):
+                if len(s)>4:
+                    return s[:4]+"..."
+                else:
+                    return s
+
+            if ( self.initCharsOrig != self.bodyCharsOrig ):
+                self.strRepr = "W:(%s,%s)" % ( charsAsStr(self.initCharsOrig), charsAsStr(self.bodyCharsOrig) )
+            else:
+                self.strRepr = "W:(%s)" % charsAsStr(self.initCharsOrig)
+
+        return self.strRepr
+
+
+class Regex(Token):
+    """Token for matching strings that match a given regular expression.
+       Defined with string specifying the regular expression in a form recognized by the inbuilt Python re module.
+    """
+    compiledREtype = type(re.compile("[A-Z]"))
+    def __init__( self, pattern, flags=0):
+        """The parameters C{pattern} and C{flags} are passed to the C{re.compile()} function as-is. See the Python C{re} module for an explanation of the acceptable patterns and flags."""
+        super(Regex,self).__init__()
+
+        if isinstance(pattern, basestring):
+            if len(pattern) == 0:
+                warnings.warn("null string passed to Regex; use Empty() instead",
+                        SyntaxWarning, stacklevel=2)
+
+            self.pattern = pattern
+            self.flags = flags
+
+            try:
+                self.re = re.compile(self.pattern, self.flags)
+                self.reString = self.pattern
+            except sre_constants.error:
+                warnings.warn("invalid pattern (%s) passed to Regex" % pattern,
+                    SyntaxWarning, stacklevel=2)
+                raise
+
+        elif isinstance(pattern, Regex.compiledREtype):
+            self.re = pattern
+            self.pattern = \
+            self.reString = str(pattern)
+            self.flags = flags
+            
+        else:
+            raise ValueError("Regex may only be constructed with a string or a compiled RE object")
+
+        self.name = _ustr(self)
+        self.errmsg = "Expected " + self.name
+        self.mayIndexError = False
+        self.mayReturnEmpty = True
+
+    def parseImpl( self, instring, loc, doActions=True ):
+        result = self.re.match(instring,loc)
+        if not result:
+            exc = self.myException
+            exc.loc = loc
+            exc.pstr = instring
+            raise exc
+
+        loc = result.end()
+        d = result.groupdict()
+        ret = ParseResults(result.group())
+        if d:
+            for k in d:
+                ret[k] = d[k]
+        return loc,ret
+
+    def __str__( self ):
+        try:
+            return super(Regex,self).__str__()
+        except:
+            pass
+
+        if self.strRepr is None:
+            self.strRepr = "Re:(%s)" % repr(self.pattern)
+
+        return self.strRepr
+
+
+class QuotedString(Token):
+    """Token for matching strings that are delimited by quoting characters.
+    """
+    def __init__( self, quoteChar, escChar=None, escQuote=None, multiline=False, unquoteResults=True, endQuoteChar=None):
+        """
+           Defined with the following parameters:
+            - quoteChar - string of one or more characters defining the quote delimiting string
+            - escChar - character to escape quotes, typically backslash (default=None)
+            - escQuote - special quote sequence to escape an embedded quote string (such as SQL's "" to escape an embedded ") (default=None)
+            - multiline - boolean indicating whether quotes can span multiple lines (default=C{False})
+            - unquoteResults - boolean indicating whether the matched text should be unquoted (default=C{True})
+            - endQuoteChar - string of one or more characters defining the end of the quote delimited string (default=C{None} => same as quoteChar)
+        """
+        super(QuotedString,self).__init__()
+
+        # remove white space from quote chars - wont work anyway
+        quoteChar = quoteChar.strip()
+        if len(quoteChar) == 0:
+            warnings.warn("quoteChar cannot be the empty string",SyntaxWarning,stacklevel=2)
+            raise SyntaxError()
+
+        if endQuoteChar is None:
+            endQuoteChar = quoteChar
+        else:
+            endQuoteChar = endQuoteChar.strip()
+            if len(endQuoteChar) == 0:
+                warnings.warn("endQuoteChar cannot be the empty string",SyntaxWarning,stacklevel=2)
+                raise SyntaxError()
+
+        self.quoteChar = quoteChar
+        self.quoteCharLen = len(quoteChar)
+        self.firstQuoteChar = quoteChar[0]
+        self.endQuoteChar = endQuoteChar
+        self.endQuoteCharLen = len(endQuoteChar)
+        self.escChar = escChar
+        self.escQuote = escQuote
+        self.unquoteResults = unquoteResults
+
+        if multiline:
+            self.flags = re.MULTILINE | re.DOTALL
+            self.pattern = r'%s(?:[^%s%s]' % \
+                ( re.escape(self.quoteChar),
+                  _escapeRegexRangeChars(self.endQuoteChar[0]),
+                  (escChar is not None and _escapeRegexRangeChars(escChar) or '') )
+        else:
+            self.flags = 0
+            self.pattern = r'%s(?:[^%s\n\r%s]' % \
+                ( re.escape(self.quoteChar),
+                  _escapeRegexRangeChars(self.endQuoteChar[0]),
+                  (escChar is not None and _escapeRegexRangeChars(escChar) or '') )
+        if len(self.endQuoteChar) > 1:
+            self.pattern += (
+                '|(?:' + ')|(?:'.join(["%s[^%s]" % (re.escape(self.endQuoteChar[:i]),
+                                               _escapeRegexRangeChars(self.endQuoteChar[i]))
+                                    for i in range(len(self.endQuoteChar)-1,0,-1)]) + ')'
+                )
+        if escQuote:
+            self.pattern += (r'|(?:%s)' % re.escape(escQuote))
+        if escChar:
+            self.pattern += (r'|(?:%s.)' % re.escape(escChar))
+            charset = ''.join(set(self.quoteChar[0]+self.endQuoteChar[0])).replace('^',r'\^').replace('-',r'\-')
+            self.escCharReplacePattern = re.escape(self.escChar)+("([%s])" % charset)
+        self.pattern += (r')*%s' % re.escape(self.endQuoteChar))
+
+        try:
+            self.re = re.compile(self.pattern, self.flags)
+            self.reString = self.pattern
+        except sre_constants.error:
+            warnings.warn("invalid pattern (%s) passed to Regex" % self.pattern,
+                SyntaxWarning, stacklevel=2)
+            raise
+
+        self.name = _ustr(self)
+        self.errmsg = "Expected " + self.name
+        self.mayIndexError = False
+        self.mayReturnEmpty = True
+
+    def parseImpl( self, instring, loc, doActions=True ):
+        result = instring[loc] == self.firstQuoteChar and self.re.match(instring,loc) or None
+        if not result:
+            exc = self.myException
+            exc.loc = loc
+            exc.pstr = instring
+            raise exc
+
+        loc = result.end()
+        ret = result.group()
+
+        if self.unquoteResults:
+
+            # strip off quotes
+            ret = ret[self.quoteCharLen:-self.endQuoteCharLen]
+
+            if isinstance(ret,basestring):
+                # replace escaped characters
+                if self.escChar:
+                    ret = re.sub(self.escCharReplacePattern,"\g<1>",ret)
+
+                # replace escaped quotes
+                if self.escQuote:
+                    ret = ret.replace(self.escQuote, self.endQuoteChar)
+
+        return loc, ret
+
+    def __str__( self ):
+        try:
+            return super(QuotedString,self).__str__()
+        except:
+            pass
+
+        if self.strRepr is None:
+            self.strRepr = "quoted string, starting with %s ending with %s" % (self.quoteChar, self.endQuoteChar)
+
+        return self.strRepr
+
+
+class CharsNotIn(Token):
+    """Token for matching words composed of characters *not* in a given set.
+       Defined with string containing all disallowed characters, and an optional
+       minimum, maximum, and/or exact length.  The default value for C{min} is 1 (a
+       minimum value < 1 is not valid); the default values for C{max} and C{exact}
+       are 0, meaning no maximum or exact length restriction.
+    """
+    def __init__( self, notChars, min=1, max=0, exact=0 ):
+        super(CharsNotIn,self).__init__()
+        self.skipWhitespace = False
+        self.notChars = notChars
+
+        if min < 1:
+            raise ValueError("cannot specify a minimum length < 1; use Optional(CharsNotIn()) if zero-length char group is permitted")
+
+        self.minLen = min
+
+        if max > 0:
+            self.maxLen = max
+        else:
+            self.maxLen = _MAX_INT
+
+        if exact > 0:
+            self.maxLen = exact
+            self.minLen = exact
+
+        self.name = _ustr(self)
+        self.errmsg = "Expected " + self.name
+        self.mayReturnEmpty = ( self.minLen == 0 )
+        self.mayIndexError = False
+
+    def parseImpl( self, instring, loc, doActions=True ):
+        if instring[loc] in self.notChars:
+            #~ raise ParseException( instring, loc, self.errmsg )
+            exc = self.myException
+            exc.loc = loc
+            exc.pstr = instring
+            raise exc
+
+        start = loc
+        loc += 1
+        notchars = self.notChars
+        maxlen = min( start+self.maxLen, len(instring) )
+        while loc < maxlen and \
+              (instring[loc] not in notchars):
+            loc += 1
+
+        if loc - start < self.minLen:
+            #~ raise ParseException( instring, loc, self.errmsg )
+            exc = self.myException
+            exc.loc = loc
+            exc.pstr = instring
+            raise exc
+
+        return loc, instring[start:loc]
+
+    def __str__( self ):
+        try:
+            return super(CharsNotIn, self).__str__()
+        except:
+            pass
+
+        if self.strRepr is None:
+            if len(self.notChars) > 4:
+                self.strRepr = "!W:(%s...)" % self.notChars[:4]
+            else:
+                self.strRepr = "!W:(%s)" % self.notChars
+
+        return self.strRepr
+
+class White(Token):
+    """Special matching class for matching whitespace.  Normally, whitespace is ignored
+       by pyparsing grammars.  This class is included when some whitespace structures
+       are significant.  Define with a string containing the whitespace characters to be
+       matched; default is C{" \\t\\r\\n"}.  Also takes optional C{min}, C{max}, and C{exact} arguments,
+       as defined for the C{L{Word}} class."""
+    whiteStrs = {
+        " " : "<SPC>",
+        "\t": "<TAB>",
+        "\n": "<LF>",
+        "\r": "<CR>",
+        "\f": "<FF>",
+        }
+    def __init__(self, ws=" \t\r\n", min=1, max=0, exact=0):
+        super(White,self).__init__()
+        self.matchWhite = ws
+        self.setWhitespaceChars( "".join([c for c in self.whiteChars if c not in self.matchWhite]) )
+        #~ self.leaveWhitespace()
+        self.name = ("".join([White.whiteStrs[c] for c in self.matchWhite]))
+        self.mayReturnEmpty = True
+        self.errmsg = "Expected " + self.name
+
+        self.minLen = min
+
+        if max > 0:
+            self.maxLen = max
+        else:
+            self.maxLen = _MAX_INT
+
+        if exact > 0:
+            self.maxLen = exact
+            self.minLen = exact
+
+    def parseImpl( self, instring, loc, doActions=True ):
+        if not(instring[ loc ] in self.matchWhite):
+            #~ raise ParseException( instring, loc, self.errmsg )
+            exc = self.myException
+            exc.loc = loc
+            exc.pstr = instring
+            raise exc
+        start = loc
+        loc += 1
+        maxloc = start + self.maxLen
+        maxloc = min( maxloc, len(instring) )
+        while loc < maxloc and instring[loc] in self.matchWhite:
+            loc += 1
+
+        if loc - start < self.minLen:
+            #~ raise ParseException( instring, loc, self.errmsg )
+            exc = self.myException
+            exc.loc = loc
+            exc.pstr = instring
+            raise exc
+
+        return loc, instring[start:loc]
+
+
+class _PositionToken(Token):
+    def __init__( self ):
+        super(_PositionToken,self).__init__()
+        self.name=self.__class__.__name__
+        self.mayReturnEmpty = True
+        self.mayIndexError = False
+
+class GoToColumn(_PositionToken):
+    """Token to advance to a specific column of input text; useful for tabular report scraping."""
+    def __init__( self, colno ):
+        super(GoToColumn,self).__init__()
+        self.col = colno
+
+    def preParse( self, instring, loc ):
+        if col(loc,instring) != self.col:
+            instrlen = len(instring)
+            if self.ignoreExprs:
+                loc = self._skipIgnorables( instring, loc )
+            while loc < instrlen and instring[loc].isspace() and col( loc, instring ) != self.col :
+                loc += 1
+        return loc
+
+    def parseImpl( self, instring, loc, doActions=True ):
+        thiscol = col( loc, instring )
+        if thiscol > self.col:
+            raise ParseException( instring, loc, "Text not in expected column", self )
+        newloc = loc + self.col - thiscol
+        ret = instring[ loc: newloc ]
+        return newloc, ret
+
+class LineStart(_PositionToken):
+    """Matches if current position is at the beginning of a line within the parse string"""
+    def __init__( self ):
+        super(LineStart,self).__init__()
+        self.setWhitespaceChars( ParserElement.DEFAULT_WHITE_CHARS.replace("\n","") )
+        self.errmsg = "Expected start of line"
+
+    def preParse( self, instring, loc ):
+        preloc = super(LineStart,self).preParse(instring,loc)
+        if instring[preloc] == "\n":
+            loc += 1
+        return loc
+
+    def parseImpl( self, instring, loc, doActions=True ):
+        if not( loc==0 or
+            (loc == self.preParse( instring, 0 )) or
+            (instring[loc-1] == "\n") ): #col(loc, instring) != 1:
+            #~ raise ParseException( instring, loc, "Expected start of line" )
+            exc = self.myException
+            exc.loc = loc
+            exc.pstr = instring
+            raise exc
+        return loc, []
+
+class LineEnd(_PositionToken):
+    """Matches if current position is at the end of a line within the parse string"""
+    def __init__( self ):
+        super(LineEnd,self).__init__()
+        self.setWhitespaceChars( ParserElement.DEFAULT_WHITE_CHARS.replace("\n","") )
+        self.errmsg = "Expected end of line"
+
+    def parseImpl( self, instring, loc, doActions=True ):
+        if loc<len(instring):
+            if instring[loc] == "\n":
+                return loc+1, "\n"
+            else:
+                #~ raise ParseException( instring, loc, "Expected end of line" )
+                exc = self.myException
+                exc.loc = loc
+                exc.pstr = instring
+                raise exc
+        elif loc == len(instring):
+            return loc+1, []
+        else:
+            exc = self.myException
+            exc.loc = loc
+            exc.pstr = instring
+            raise exc
+
+class StringStart(_PositionToken):
+    """Matches if current position is at the beginning of the parse string"""
+    def __init__( self ):
+        super(StringStart,self).__init__()
+        self.errmsg = "Expected start of text"
+
+    def parseImpl( self, instring, loc, doActions=True ):
+        if loc != 0:
+            # see if entire string up to here is just whitespace and ignoreables
+            if loc != self.preParse( instring, 0 ):
+                #~ raise ParseException( instring, loc, "Expected start of text" )
+                exc = self.myException
+                exc.loc = loc
+                exc.pstr = instring
+                raise exc
+        return loc, []
+
+class StringEnd(_PositionToken):
+    """Matches if current position is at the end of the parse string"""
+    def __init__( self ):
+        super(StringEnd,self).__init__()
+        self.errmsg = "Expected end of text"
+
+    def parseImpl( self, instring, loc, doActions=True ):
+        if loc < len(instring):
+            #~ raise ParseException( instring, loc, "Expected end of text" )
+            exc = self.myException
+            exc.loc = loc
+            exc.pstr = instring
+            raise exc
+        elif loc == len(instring):
+            return loc+1, []
+        elif loc > len(instring):
+            return loc, []
+        else:
+            exc = self.myException
+            exc.loc = loc
+            exc.pstr = instring
+            raise exc
+
+class WordStart(_PositionToken):
+    """Matches if the current position is at the beginning of a Word, and
+       is not preceded by any character in a given set of C{wordChars}
+       (default=C{printables}). To emulate the C{\b} behavior of regular expressions,
+       use C{WordStart(alphanums)}. C{WordStart} will also match at the beginning of
+       the string being parsed, or at the beginning of a line.
+    """
+    def __init__(self, wordChars = printables):
+        super(WordStart,self).__init__()
+        self.wordChars = set(wordChars)
+        self.errmsg = "Not at the start of a word"
+
+    def parseImpl(self, instring, loc, doActions=True ):
+        if loc != 0:
+            if (instring[loc-1] in self.wordChars or
+                instring[loc] not in self.wordChars):
+                exc = self.myException
+                exc.loc = loc
+                exc.pstr = instring
+                raise exc
+        return loc, []
+
+class WordEnd(_PositionToken):
+    """Matches if the current position is at the end of a Word, and
+       is not followed by any character in a given set of C{wordChars}
+       (default=C{printables}). To emulate the C{\b} behavior of regular expressions,
+       use C{WordEnd(alphanums)}. C{WordEnd} will also match at the end of
+       the string being parsed, or at the end of a line.
+    """
+    def __init__(self, wordChars = printables):
+        super(WordEnd,self).__init__()
+        self.wordChars = set(wordChars)
+        self.skipWhitespace = False
+        self.errmsg = "Not at the end of a word"
+
+    def parseImpl(self, instring, loc, doActions=True ):
+        instrlen = len(instring)
+        if instrlen>0 and loc<instrlen:
+            if (instring[loc] in self.wordChars or
+                instring[loc-1] not in self.wordChars):
+                #~ raise ParseException( instring, loc, "Expected end of word" )
+                exc = self.myException
+                exc.loc = loc
+                exc.pstr = instring
+                raise exc
+        return loc, []
+
+
+class ParseExpression(ParserElement):
+    """Abstract subclass of ParserElement, for combining and post-processing parsed tokens."""
+    def __init__( self, exprs, savelist = False ):
+        super(ParseExpression,self).__init__(savelist)
+        if isinstance( exprs, list ):
+            self.exprs = exprs
+        elif isinstance( exprs, basestring ):
+            self.exprs = [ Literal( exprs ) ]
+        else:
+            try:
+                self.exprs = list( exprs )
+            except TypeError:
+                self.exprs = [ exprs ]
+        self.callPreparse = False
+
+    def __getitem__( self, i ):
+        return self.exprs[i]
+
+    def append( self, other ):
+        self.exprs.append( other )
+        self.strRepr = None
+        return self
+
+    def leaveWhitespace( self ):
+        """Extends C{leaveWhitespace} defined in base class, and also invokes C{leaveWhitespace} on
+           all contained expressions."""
+        self.skipWhitespace = False
+        self.exprs = [ e.copy() for e in self.exprs ]
+        for e in self.exprs:
+            e.leaveWhitespace()
+        return self
+
+    def ignore( self, other ):
+        if isinstance( other, Suppress ):
+            if other not in self.ignoreExprs:
+                super( ParseExpression, self).ignore( other )
+                for e in self.exprs:
+                    e.ignore( self.ignoreExprs[-1] )
+        else:
+            super( ParseExpression, self).ignore( other )
+            for e in self.exprs:
+                e.ignore( self.ignoreExprs[-1] )
+        return self
+
+    def __str__( self ):
+        try:
+            return super(ParseExpression,self).__str__()
+        except:
+            pass
+
+        if self.strRepr is None:
+            self.strRepr = "%s:(%s)" % ( self.__class__.__name__, _ustr(self.exprs) )
+        return self.strRepr
+
+    def streamline( self ):
+        super(ParseExpression,self).streamline()
+
+        for e in self.exprs:
+            e.streamline()
+
+        # collapse nested And's of the form And( And( And( a,b), c), d) to And( a,b,c,d )
+        # but only if there are no parse actions or resultsNames on the nested And's
+        # (likewise for Or's and MatchFirst's)
+        if ( len(self.exprs) == 2 ):
+            other = self.exprs[0]
+            if ( isinstance( other, self.__class__ ) and
+                  not(other.parseAction) and
+                  other.resultsName is None and
+                  not other.debug ):
+                self.exprs = other.exprs[:] + [ self.exprs[1] ]
+                self.strRepr = None
+                self.mayReturnEmpty |= other.mayReturnEmpty
+                self.mayIndexError  |= other.mayIndexError
+
+            other = self.exprs[-1]
+            if ( isinstance( other, self.__class__ ) and
+                  not(other.parseAction) and
+                  other.resultsName is None and
+                  not other.debug ):
+                self.exprs = self.exprs[:-1] + other.exprs[:]
+                self.strRepr = None
+                self.mayReturnEmpty |= other.mayReturnEmpty
+                self.mayIndexError  |= other.mayIndexError
+
+        return self
+
+    def setResultsName( self, name, listAllMatches=False ):
+        ret = super(ParseExpression,self).setResultsName(name,listAllMatches)
+        return ret
+
+    def validate( self, validateTrace=[] ):
+        tmp = validateTrace[:]+[self]
+        for e in self.exprs:
+            e.validate(tmp)
+        self.checkRecursion( [] )
+        
+    def copy(self):
+        ret = super(ParseExpression,self).copy()
+        ret.exprs = [e.copy() for e in self.exprs]
+        return ret
+
+class And(ParseExpression):
+    """Requires all given C{ParseExpression}s to be found in the given order.
+       Expressions may be separated by whitespace.
+       May be constructed using the C{'+'} operator.
+    """
+
+    class _ErrorStop(Empty):
+        def __init__(self, *args, **kwargs):
+            super(And._ErrorStop,self).__init__(*args, **kwargs)
+            self.name = '-'
+            self.leaveWhitespace()
+
+    def __init__( self, exprs, savelist = True ):
+        super(And,self).__init__(exprs, savelist)
+        self.mayReturnEmpty = True
+        for e in self.exprs:
+            if not e.mayReturnEmpty:
+                self.mayReturnEmpty = False
+                break
+        self.setWhitespaceChars( exprs[0].whiteChars )
+        self.skipWhitespace = exprs[0].skipWhitespace
+        self.callPreparse = True
+
+    def parseImpl( self, instring, loc, doActions=True ):
+        # pass False as last arg to _parse for first element, since we already
+        # pre-parsed the string as part of our And pre-parsing
+        loc, resultlist = self.exprs[0]._parse( instring, loc, doActions, callPreParse=False )
+        errorStop = False
+        for e in self.exprs[1:]:
+            if isinstance(e, And._ErrorStop):
+                errorStop = True
+                continue
+            if errorStop:
+                try:
+                    loc, exprtokens = e._parse( instring, loc, doActions )
+                except ParseSyntaxException:
+                    raise
+                except ParseBaseException, pe:
+                    raise ParseSyntaxException(pe)
+                except IndexError:
+                    raise ParseSyntaxException( ParseException(instring, len(instring), self.errmsg, self) )
+            else:
+                loc, exprtokens = e._parse( instring, loc, doActions )
+            if exprtokens or exprtokens.keys():
+                resultlist += exprtokens
+        return loc, resultlist
+
+    def __iadd__(self, other ):
+        if isinstance( other, basestring ):
+            other = Literal( other )
+        return self.append( other ) #And( [ self, other ] )
+
+    def checkRecursion( self, parseElementList ):
+        subRecCheckList = parseElementList[:] + [ self ]
+        for e in self.exprs:
+            e.checkRecursion( subRecCheckList )
+            if not e.mayReturnEmpty:
+                break
+
+    def __str__( self ):
+        if hasattr(self,"name"):
+            return self.name
+
+        if self.strRepr is None:
+            self.strRepr = "{" + " ".join( [ _ustr(e) for e in self.exprs ] ) + "}"
+
+        return self.strRepr
+
+
+class Or(ParseExpression):
+    """Requires that at least one C{ParseExpression} is found.
+       If two expressions match, the expression that matches the longest string will be used.
+       May be constructed using the C{'^'} operator.
+    """
+    def __init__( self, exprs, savelist = False ):
+        super(Or,self).__init__(exprs, savelist)
+        self.mayReturnEmpty = False
+        for e in self.exprs:
+            if e.mayReturnEmpty:
+                self.mayReturnEmpty = True
+                break
+
+    def parseImpl( self, instring, loc, doActions=True ):
+        maxExcLoc = -1
+        maxMatchLoc = -1
+        maxException = None
+        for e in self.exprs:
+            try:
+                loc2 = e.tryParse( instring, loc )
+            except ParseException, err:
+                if err.loc > maxExcLoc:
+                    maxException = err
+                    maxExcLoc = err.loc
+            except IndexError:
+                if len(instring) > maxExcLoc:
+                    maxException = ParseException(instring,len(instring),e.errmsg,self)
+                    maxExcLoc = len(instring)
+            else:
+                if loc2 > maxMatchLoc:
+                    maxMatchLoc = loc2
+                    maxMatchExp = e
+
+        if maxMatchLoc < 0:
+            if maxException is not None:
+                raise maxException
+            else:
+                raise ParseException(instring, loc, "no defined alternatives to match", self)
+
+        return maxMatchExp._parse( instring, loc, doActions )
+
+    def __ixor__(self, other ):
+        if isinstance( other, basestring ):
+            other = ParserElement.literalStringClass( other )
+        return self.append( other ) #Or( [ self, other ] )
+
+    def __str__( self ):
+        if hasattr(self,"name"):
+            return self.name
+
+        if self.strRepr is None:
+            self.strRepr = "{" + " ^ ".join( [ _ustr(e) for e in self.exprs ] ) + "}"
+
+        return self.strRepr
+
+    def checkRecursion( self, parseElementList ):
+        subRecCheckList = parseElementList[:] + [ self ]
+        for e in self.exprs:
+            e.checkRecursion( subRecCheckList )
+
+
+class MatchFirst(ParseExpression):
+    """Requires that at least one C{ParseExpression} is found.
+       If two expressions match, the first one listed is the one that will match.
+       May be constructed using the C{'|'} operator.
+    """
+    def __init__( self, exprs, savelist = False ):
+        super(MatchFirst,self).__init__(exprs, savelist)
+        if exprs:
+            self.mayReturnEmpty = False
+            for e in self.exprs:
+                if e.mayReturnEmpty:
+                    self.mayReturnEmpty = True
+                    break
+        else:
+            self.mayReturnEmpty = True
+
+    def parseImpl( self, instring, loc, doActions=True ):
+        maxExcLoc = -1
+        maxException = None
+        for e in self.exprs:
+            try:
+                ret = e._parse( instring, loc, doActions )
+                return ret
+            except ParseException, err:
+                if err.loc > maxExcLoc:
+                    maxException = err
+                    maxExcLoc = err.loc
+            except IndexError:
+                if len(instring) > maxExcLoc:
+                    maxException = ParseException(instring,len(instring),e.errmsg,self)
+                    maxExcLoc = len(instring)
+
+        # only got here if no expression matched, raise exception for match that made it the furthest
+        else:
+            if maxException is not None:
+                raise maxException
+            else:
+                raise ParseException(instring, loc, "no defined alternatives to match", self)
+
+    def __ior__(self, other ):
+        if isinstance( other, basestring ):
+            other = ParserElement.literalStringClass( other )
+        return self.append( other ) #MatchFirst( [ self, other ] )
+
+    def __str__( self ):
+        if hasattr(self,"name"):
+            return self.name
+
+        if self.strRepr is None:
+            self.strRepr = "{" + " | ".join( [ _ustr(e) for e in self.exprs ] ) + "}"
+
+        return self.strRepr
+
+    def checkRecursion( self, parseElementList ):
+        subRecCheckList = parseElementList[:] + [ self ]
+        for e in self.exprs:
+            e.checkRecursion( subRecCheckList )
+
+
+class Each(ParseExpression):
+    """Requires all given C{ParseExpression}s to be found, but in any order.
+       Expressions may be separated by whitespace.
+       May be constructed using the C{'&'} operator.
+    """
+    def __init__( self, exprs, savelist = True ):
+        super(Each,self).__init__(exprs, savelist)
+        self.mayReturnEmpty = True
+        for e in self.exprs:
+            if not e.mayReturnEmpty:
+                self.mayReturnEmpty = False
+                break
+        self.skipWhitespace = True
+        self.initExprGroups = True
+
+    def parseImpl( self, instring, loc, doActions=True ):
+        if self.initExprGroups:
+            opt1 = [ e.expr for e in self.exprs if isinstance(e,Optional) ]
+            opt2 = [ e for e in self.exprs if e.mayReturnEmpty and e not in opt1 ]
+            self.optionals = opt1 + opt2
+            self.multioptionals = [ e.expr for e in self.exprs if isinstance(e,ZeroOrMore) ]
+            self.multirequired = [ e.expr for e in self.exprs if isinstance(e,OneOrMore) ]
+            self.required = [ e for e in self.exprs if not isinstance(e,(Optional,ZeroOrMore,OneOrMore)) ]
+            self.required += self.multirequired
+            self.initExprGroups = False
+        tmpLoc = loc
+        tmpReqd = self.required[:]
+        tmpOpt  = self.optionals[:]
+        matchOrder = []
+
+        keepMatching = True
+        while keepMatching:
+            tmpExprs = tmpReqd + tmpOpt + self.multioptionals + self.multirequired
+            failed = []
+            for e in tmpExprs:
+                try:
+                    tmpLoc = e.tryParse( instring, tmpLoc )
+                except ParseException:
+                    failed.append(e)
+                else:
+                    matchOrder.append(e)
+                    if e in tmpReqd:
+                        tmpReqd.remove(e)
+                    elif e in tmpOpt:
+                        tmpOpt.remove(e)
+            if len(failed) == len(tmpExprs):
+                keepMatching = False
+
+        if tmpReqd:
+            missing = ", ".join( [ _ustr(e) for e in tmpReqd ] )
+            raise ParseException(instring,loc,"Missing one or more required elements (%s)" % missing )
+
+        # add any unmatched Optionals, in case they have default values defined
+        matchOrder += [e for e in self.exprs if isinstance(e,Optional) and e.expr in tmpOpt]
+
+        resultlist = []
+        for e in matchOrder:
+            loc,results = e._parse(instring,loc,doActions)
+            resultlist.append(results)
+
+        finalResults = ParseResults([])
+        for r in resultlist:
+            dups = {}
+            for k in r.keys():
+                if k in finalResults.keys():
+                    tmp = ParseResults(finalResults[k])
+                    tmp += ParseResults(r[k])
+                    dups[k] = tmp
+            finalResults += ParseResults(r)
+            for k,v in dups.items():
+                finalResults[k] = v
+        return loc, finalResults
+
+    def __str__( self ):
+        if hasattr(self,"name"):
+            return self.name
+
+        if self.strRepr is None:
+            self.strRepr = "{" + " & ".join( [ _ustr(e) for e in self.exprs ] ) + "}"
+
+        return self.strRepr
+
+    def checkRecursion( self, parseElementList ):
+        subRecCheckList = parseElementList[:] + [ self ]
+        for e in self.exprs:
+            e.checkRecursion( subRecCheckList )
+
+
+class ParseElementEnhance(ParserElement):
+    """Abstract subclass of C{ParserElement}, for combining and post-processing parsed tokens."""
+    def __init__( self, expr, savelist=False ):
+        super(ParseElementEnhance,self).__init__(savelist)
+        if isinstance( expr, basestring ):
+            expr = Literal(expr)
+        self.expr = expr
+        self.strRepr = None
+        if expr is not None:
+            self.mayIndexError = expr.mayIndexError
+            self.mayReturnEmpty = expr.mayReturnEmpty
+            self.setWhitespaceChars( expr.whiteChars )
+            self.skipWhitespace = expr.skipWhitespace
+            self.saveAsList = expr.saveAsList
+            self.callPreparse = expr.callPreparse
+            self.ignoreExprs.extend(expr.ignoreExprs)
+
+    def parseImpl( self, instring, loc, doActions=True ):
+        if self.expr is not None:
+            return self.expr._parse( instring, loc, doActions, callPreParse=False )
+        else:
+            raise ParseException("",loc,self.errmsg,self)
+
+    def leaveWhitespace( self ):
+        self.skipWhitespace = False
+        self.expr = self.expr.copy()
+        if self.expr is not None:
+            self.expr.leaveWhitespace()
+        return self
+
+    def ignore( self, other ):
+        if isinstance( other, Suppress ):
+            if other not in self.ignoreExprs:
+                super( ParseElementEnhance, self).ignore( other )
+                if self.expr is not None:
+                    self.expr.ignore( self.ignoreExprs[-1] )
+        else:
+            super( ParseElementEnhance, self).ignore( other )
+            if self.expr is not None:
+                self.expr.ignore( self.ignoreExprs[-1] )
+        return self
+
+    def streamline( self ):
+        super(ParseElementEnhance,self).streamline()
+        if self.expr is not None:
+            self.expr.streamline()
+        return self
+
+    def checkRecursion( self, parseElementList ):
+        if self in parseElementList:
+            raise RecursiveGrammarException( parseElementList+[self] )
+        subRecCheckList = parseElementList[:] + [ self ]
+        if self.expr is not None:
+            self.expr.checkRecursion( subRecCheckList )
+
+    def validate( self, validateTrace=[] ):
+        tmp = validateTrace[:]+[self]
+        if self.expr is not None:
+            self.expr.validate(tmp)
+        self.checkRecursion( [] )
+
+    def __str__( self ):
+        try:
+            return super(ParseElementEnhance,self).__str__()
+        except:
+            pass
+
+        if self.strRepr is None and self.expr is not None:
+            self.strRepr = "%s:(%s)" % ( self.__class__.__name__, _ustr(self.expr) )
+        return self.strRepr
+
+
+class FollowedBy(ParseElementEnhance):
+    """Lookahead matching of the given parse expression.  C{FollowedBy}
+    does *not* advance the parsing position within the input string, it only
+    verifies that the specified parse expression matches at the current
+    position.  C{FollowedBy} always returns a null token list."""
+    def __init__( self, expr ):
+        super(FollowedBy,self).__init__(expr)
+        self.mayReturnEmpty = True
+
+    def parseImpl( self, instring, loc, doActions=True ):
+        self.expr.tryParse( instring, loc )
+        return loc, []
+
+
+class NotAny(ParseElementEnhance):
+    """Lookahead to disallow matching with the given parse expression.  C{NotAny}
+    does *not* advance the parsing position within the input string, it only
+    verifies that the specified parse expression does *not* match at the current
+    position.  Also, C{NotAny} does *not* skip over leading whitespace. C{NotAny}
+    always returns a null token list.  May be constructed using the '~' operator."""
+    def __init__( self, expr ):
+        super(NotAny,self).__init__(expr)
+        #~ self.leaveWhitespace()
+        self.skipWhitespace = False  # do NOT use self.leaveWhitespace(), don't want to propagate to exprs
+        self.mayReturnEmpty = True
+        self.errmsg = "Found unwanted token, "+_ustr(self.expr)
+
+    def parseImpl( self, instring, loc, doActions=True ):
+        try:
+            self.expr.tryParse( instring, loc )
+        except (ParseException,IndexError):
+            pass
+        else:
+            #~ raise ParseException(instring, loc, self.errmsg )
+            exc = self.myException
+            exc.loc = loc
+            exc.pstr = instring
+            raise exc
+        return loc, []
+
+    def __str__( self ):
+        if hasattr(self,"name"):
+            return self.name
+
+        if self.strRepr is None:
+            self.strRepr = "~{" + _ustr(self.expr) + "}"
+
+        return self.strRepr
+
+
+class ZeroOrMore(ParseElementEnhance):
+    """Optional repetition of zero or more of the given expression."""
+    def __init__( self, expr ):
+        super(ZeroOrMore,self).__init__(expr)
+        self.mayReturnEmpty = True
+
+    def parseImpl( self, instring, loc, doActions=True ):
+        tokens = []
+        try:
+            loc, tokens = self.expr._parse( instring, loc, doActions, callPreParse=False )
+            hasIgnoreExprs = ( len(self.ignoreExprs) > 0 )
+            while 1:
+                if hasIgnoreExprs:
+                    preloc = self._skipIgnorables( instring, loc )
+                else:
+                    preloc = loc
+                loc, tmptokens = self.expr._parse( instring, preloc, doActions )
+                if tmptokens or tmptokens.keys():
+                    tokens += tmptokens
+        except (ParseException,IndexError):
+            pass
+
+        return loc, tokens
+
+    def __str__( self ):
+        if hasattr(self,"name"):
+            return self.name
+
+        if self.strRepr is None:
+            self.strRepr = "[" + _ustr(self.expr) + "]..."
+
+        return self.strRepr
+
+    def setResultsName( self, name, listAllMatches=False ):
+        ret = super(ZeroOrMore,self).setResultsName(name,listAllMatches)
+        ret.saveAsList = True
+        return ret
+
+
+class OneOrMore(ParseElementEnhance):
+    """Repetition of one or more of the given expression."""
+    def parseImpl( self, instring, loc, doActions=True ):
+        # must be at least one
+        loc, tokens = self.expr._parse( instring, loc, doActions, callPreParse=False )
+        try:
+            hasIgnoreExprs = ( len(self.ignoreExprs) > 0 )
+            while 1:
+                if hasIgnoreExprs:
+                    preloc = self._skipIgnorables( instring, loc )
+                else:
+                    preloc = loc
+                loc, tmptokens = self.expr._parse( instring, preloc, doActions )
+                if tmptokens or tmptokens.keys():
+                    tokens += tmptokens
+        except (ParseException,IndexError):
+            pass
+
+        return loc, tokens
+
+    def __str__( self ):
+        if hasattr(self,"name"):
+            return self.name
+
+        if self.strRepr is None:
+            self.strRepr = "{" + _ustr(self.expr) + "}..."
+
+        return self.strRepr
+
+    def setResultsName( self, name, listAllMatches=False ):
+        ret = super(OneOrMore,self).setResultsName(name,listAllMatches)
+        ret.saveAsList = True
+        return ret
+
+class _NullToken(object):
+    def __bool__(self):
+        return False
+    __nonzero__ = __bool__
+    def __str__(self):
+        return ""
+
+_optionalNotMatched = _NullToken()
+class Optional(ParseElementEnhance):
+    """Optional matching of the given expression.
+       A default return string can also be specified, if the optional expression
+       is not found.
+    """
+    def __init__( self, exprs, default=_optionalNotMatched ):
+        super(Optional,self).__init__( exprs, savelist=False )
+        self.defaultValue = default
+        self.mayReturnEmpty = True
+
+    def parseImpl( self, instring, loc, doActions=True ):
+        try:
+            loc, tokens = self.expr._parse( instring, loc, doActions, callPreParse=False )
+        except (ParseException,IndexError):
+            if self.defaultValue is not _optionalNotMatched:
+                if self.expr.resultsName:
+                    tokens = ParseResults([ self.defaultValue ])
+                    tokens[self.expr.resultsName] = self.defaultValue
+                else:
+                    tokens = [ self.defaultValue ]
+            else:
+                tokens = []
+        return loc, tokens
+
+    def __str__( self ):
+        if hasattr(self,"name"):
+            return self.name
+
+        if self.strRepr is None:
+            self.strRepr = "[" + _ustr(self.expr) + "]"
+
+        return self.strRepr
+
+
+class SkipTo(ParseElementEnhance):
+    """Token for skipping over all undefined text until the matched expression is found.
+       If C{include} is set to true, the matched expression is also parsed (the skipped text
+       and matched expression are returned as a 2-element list).  The C{ignore}
+       argument is used to define grammars (typically quoted strings and comments) that
+       might contain false matches.
+    """
+    def __init__( self, other, include=False, ignore=None, failOn=None ):
+        super( SkipTo, self ).__init__( other )
+        self.ignoreExpr = ignore
+        self.mayReturnEmpty = True
+        self.mayIndexError = False
+        self.includeMatch = include
+        self.asList = False
+        if failOn is not None and isinstance(failOn, basestring):
+            self.failOn = Literal(failOn)
+        else:
+            self.failOn = failOn
+        self.errmsg = "No match found for "+_ustr(self.expr)
+
+    def parseImpl( self, instring, loc, doActions=True ):
+        startLoc = loc
+        instrlen = len(instring)
+        expr = self.expr
+        failParse = False
+        while loc <= instrlen:
+            try:
+                if self.failOn:
+                    try:
+                        self.failOn.tryParse(instring, loc)
+                    except ParseBaseException:
+                        pass
+                    else:
+                        failParse = True
+                        raise ParseException(instring, loc, "Found expression " + str(self.failOn))
+                    failParse = False
+                if self.ignoreExpr is not None:
+                    while 1:
+                        try:
+                            loc = self.ignoreExpr.tryParse(instring,loc)
+                            # print "found ignoreExpr, advance to", loc
+                        except ParseBaseException:
+                            break
+                expr._parse( instring, loc, doActions=False, callPreParse=False )
+                skipText = instring[startLoc:loc]
+                if self.includeMatch:
+                    loc,mat = expr._parse(instring,loc,doActions,callPreParse=False)
+                    if mat:
+                        skipRes = ParseResults( skipText )
+                        skipRes += mat
+                        return loc, [ skipRes ]
+                    else:
+                        return loc, [ skipText ]
+                else:
+                    return loc, [ skipText ]
+            except (ParseException,IndexError):
+                if failParse:
+                    raise
+                else:
+                    loc += 1
+        exc = self.myException
+        exc.loc = loc
+        exc.pstr = instring
+        raise exc
+
+class Forward(ParseElementEnhance):
+    """Forward declaration of an expression to be defined later -
+       used for recursive grammars, such as algebraic infix notation.
+       When the expression is known, it is assigned to the C{Forward} variable using the '<<' operator.
+
+       Note: take care when assigning to C{Forward} not to overlook precedence of operators.
+       Specifically, '|' has a lower precedence than '<<', so that::
+          fwdExpr << a | b | c
+       will actually be evaluated as::
+          (fwdExpr << a) | b | c
+       thereby leaving b and c out as parseable alternatives.  It is recommended that you
+       explicitly group the values inserted into the C{Forward}::
+          fwdExpr << (a | b | c)
+       Converting to use the '<<=' operator instead will avoid this problem.
+    """
+    def __init__( self, other=None ):
+        super(Forward,self).__init__( other, savelist=False )
+
+    def __lshift__( self, other ):
+        if isinstance( other, basestring ):
+            other = ParserElement.literalStringClass(other)
+        self.expr = other
+        self.mayReturnEmpty = other.mayReturnEmpty
+        self.strRepr = None
+        self.mayIndexError = self.expr.mayIndexError
+        self.mayReturnEmpty = self.expr.mayReturnEmpty
+        self.setWhitespaceChars( self.expr.whiteChars )
+        self.skipWhitespace = self.expr.skipWhitespace
+        self.saveAsList = self.expr.saveAsList
+        self.ignoreExprs.extend(self.expr.ignoreExprs)
+        return None
+    __ilshift__ = __lshift__
+    
+    def leaveWhitespace( self ):
+        self.skipWhitespace = False
+        return self
+
+    def streamline( self ):
+        if not self.streamlined:
+            self.streamlined = True
+            if self.expr is not None:
+                self.expr.streamline()
+        return self
+
+    def validate( self, validateTrace=[] ):
+        if self not in validateTrace:
+            tmp = validateTrace[:]+[self]
+            if self.expr is not None:
+                self.expr.validate(tmp)
+        self.checkRecursion([])
+
+    def __str__( self ):
+        if hasattr(self,"name"):
+            return self.name
+
+        self._revertClass = self.__class__
+        self.__class__ = _ForwardNoRecurse
+        try:
+            if self.expr is not None:
+                retString = _ustr(self.expr)
+            else:
+                retString = "None"
+        finally:
+            self.__class__ = self._revertClass
+        return self.__class__.__name__ + ": " + retString
+
+    def copy(self):
+        if self.expr is not None:
+            return super(Forward,self).copy()
+        else:
+            ret = Forward()
+            ret << self
+            return ret
+
+class _ForwardNoRecurse(Forward):
+    def __str__( self ):
+        return "..."
+
+class TokenConverter(ParseElementEnhance):
+    """Abstract subclass of C{ParseExpression}, for converting parsed results."""
+    def __init__( self, expr, savelist=False ):
+        super(TokenConverter,self).__init__( expr )#, savelist )
+        self.saveAsList = False
+
+class Upcase(TokenConverter):
+    """Converter to upper case all matching tokens."""
+    def __init__(self, *args):
+        super(Upcase,self).__init__(*args)
+        warnings.warn("Upcase class is deprecated, use upcaseTokens parse action instead",
+                       DeprecationWarning,stacklevel=2)
+
+    def postParse( self, instring, loc, tokenlist ):
+        return list(map( str.upper, tokenlist ))
+
+
+class Combine(TokenConverter):
+    """Converter to concatenate all matching tokens to a single string.
+       By default, the matching patterns must also be contiguous in the input string;
+       this can be disabled by specifying C{'adjacent=False'} in the constructor.
+    """
+    def __init__( self, expr, joinString="", adjacent=True ):
+        super(Combine,self).__init__( expr )
+        # suppress whitespace-stripping in contained parse expressions, but re-enable it on the Combine itself
+        if adjacent:
+            self.leaveWhitespace()
+        self.adjacent = adjacent
+        self.skipWhitespace = True
+        self.joinString = joinString
+        self.callPreparse = True
+
+    def ignore( self, other ):
+        if self.adjacent:
+            ParserElement.ignore(self, other)
+        else:
+            super( Combine, self).ignore( other )
+        return self
+
+    def postParse( self, instring, loc, tokenlist ):
+        retToks = tokenlist.copy()
+        del retToks[:]
+        retToks += ParseResults([ "".join(tokenlist._asStringList(self.joinString)) ], modal=self.modalResults)
+
+        if self.resultsName and len(retToks.keys())>0:
+            return [ retToks ]
+        else:
+            return retToks
+
+class Group(TokenConverter):
+    """Converter to return the matched tokens as a list - useful for returning tokens of C{L{ZeroOrMore}} and C{L{OneOrMore}} expressions."""
+    def __init__( self, expr ):
+        super(Group,self).__init__( expr )
+        self.saveAsList = True
+
+    def postParse( self, instring, loc, tokenlist ):
+        return [ tokenlist ]
+
+class Dict(TokenConverter):
+    """Converter to return a repetitive expression as a list, but also as a dictionary.
+       Each element can also be referenced using the first token in the expression as its key.
+       Useful for tabular report scraping when the first column can be used as a item key.
+    """
+    def __init__( self, exprs ):
+        super(Dict,self).__init__( exprs )
+        self.saveAsList = True
+
+    def postParse( self, instring, loc, tokenlist ):
+        for i,tok in enumerate(tokenlist):
+            if len(tok) == 0:
+                continue
+            ikey = tok[0]
+            if isinstance(ikey,int):
+                ikey = _ustr(tok[0]).strip()
+            if len(tok)==1:
+                tokenlist[ikey] = _ParseResultsWithOffset("",i)
+            elif len(tok)==2 and not isinstance(tok[1],ParseResults):
+                tokenlist[ikey] = _ParseResultsWithOffset(tok[1],i)
+            else:
+                dictvalue = tok.copy() #ParseResults(i)
+                del dictvalue[0]
+                if len(dictvalue)!= 1 or (isinstance(dictvalue,ParseResults) and dictvalue.keys()):
+                    tokenlist[ikey] = _ParseResultsWithOffset(dictvalue,i)
+                else:
+                    tokenlist[ikey] = _ParseResultsWithOffset(dictvalue[0],i)
+
+        if self.resultsName:
+            return [ tokenlist ]
+        else:
+            return tokenlist
+
+
+class Suppress(TokenConverter):
+    """Converter for ignoring the results of a parsed expression."""
+    def postParse( self, instring, loc, tokenlist ):
+        return []
+
+    def suppress( self ):
+        return self
+
+
+class OnlyOnce(object):
+    """Wrapper for parse actions, to ensure they are only called once."""
+    def __init__(self, methodCall):
+        self.callable = _trim_arity(methodCall)
+        self.called = False
+    def __call__(self,s,l,t):
+        if not self.called:
+            results = self.callable(s,l,t)
+            self.called = True
+            return results
+        raise ParseException(s,l,"")
+    def reset(self):
+        self.called = False
+
+def traceParseAction(f):
+    """Decorator for debugging parse actions."""
+    f = _trim_arity(f)
+    def z(*paArgs):
+        thisFunc = f.func_name
+        s,l,t = paArgs[-3:]
+        if len(paArgs)>3:
+            thisFunc = paArgs[0].__class__.__name__ + '.' + thisFunc
+        sys.stderr.write( ">>entering %s(line: '%s', %d, %s)\n" % (thisFunc,line(l,s),l,t) )
+        try:
+            ret = f(*paArgs)
+        except Exception, exc:
+            sys.stderr.write( "<<leaving %s (exception: %s)\n" % (thisFunc,exc) )
+            raise
+        sys.stderr.write( "<<leaving %s (ret: %s)\n" % (thisFunc,ret) )
+        return ret
+    try:
+        z.__name__ = f.__name__
+    except AttributeError:
+        pass
+    return z
+
+#
+# global helpers
+#
+def delimitedList( expr, delim=",", combine=False ):
+    """Helper to define a delimited list of expressions - the delimiter defaults to ','.
+       By default, the list elements and delimiters can have intervening whitespace, and
+       comments, but this can be overridden by passing C{combine=True} in the constructor.
+       If C{combine} is set to C{True}, the matching tokens are returned as a single token
+       string, with the delimiters included; otherwise, the matching tokens are returned
+       as a list of tokens, with the delimiters suppressed.
+    """
+    dlName = _ustr(expr)+" ["+_ustr(delim)+" "+_ustr(expr)+"]..."
+    if combine:
+        return Combine( expr + ZeroOrMore( delim + expr ) ).setName(dlName)
+    else:
+        return ( expr + ZeroOrMore( Suppress( delim ) + expr ) ).setName(dlName)
+
+def countedArray( expr, intExpr=None ):
+    """Helper to define a counted list of expressions.
+       This helper defines a pattern of the form::
+           integer expr expr expr...
+       where the leading integer tells how many expr expressions follow.
+       The matched tokens returns the array of expr tokens as a list - the leading count token is suppressed.
+    """
+    arrayExpr = Forward()
+    def countFieldParseAction(s,l,t):
+        n = t[0]
+        arrayExpr << (n and Group(And([expr]*n)) or Group(empty))
+        return []
+    if intExpr is None:
+        intExpr = Word(nums).setParseAction(lambda t:int(t[0]))
+    else:
+        intExpr = intExpr.copy()
+    intExpr.setName("arrayLen")
+    intExpr.addParseAction(countFieldParseAction, callDuringTry=True)
+    return ( intExpr + arrayExpr )
+
+def _flatten(L):
+    ret = []
+    for i in L:
+        if isinstance(i,list):
+            ret.extend(_flatten(i))
+        else:
+            ret.append(i)
+    return ret
+
+def matchPreviousLiteral(expr):
+    """Helper to define an expression that is indirectly defined from
+       the tokens matched in a previous expression, that is, it looks
+       for a 'repeat' of a previous expression.  For example::
+           first = Word(nums)
+           second = matchPreviousLiteral(first)
+           matchExpr = first + ":" + second
+       will match C{"1:1"}, but not C{"1:2"}.  Because this matches a
+       previous literal, will also match the leading C{"1:1"} in C{"1:10"}.
+       If this is not desired, use C{matchPreviousExpr}.
+       Do *not* use with packrat parsing enabled.
+    """
+    rep = Forward()
+    def copyTokenToRepeater(s,l,t):
+        if t:
+            if len(t) == 1:
+                rep << t[0]
+            else:
+                # flatten t tokens
+                tflat = _flatten(t.asList())
+                rep << And( [ Literal(tt) for tt in tflat ] )
+        else:
+            rep << Empty()
+    expr.addParseAction(copyTokenToRepeater, callDuringTry=True)
+    return rep
+
+def matchPreviousExpr(expr):
+    """Helper to define an expression that is indirectly defined from
+       the tokens matched in a previous expression, that is, it looks
+       for a 'repeat' of a previous expression.  For example::
+           first = Word(nums)
+           second = matchPreviousExpr(first)
+           matchExpr = first + ":" + second
+       will match C{"1:1"}, but not C{"1:2"}.  Because this matches by
+       expressions, will *not* match the leading C{"1:1"} in C{"1:10"};
+       the expressions are evaluated first, and then compared, so
+       C{"1"} is compared with C{"10"}.
+       Do *not* use with packrat parsing enabled.
+    """
+    rep = Forward()
+    e2 = expr.copy()
+    rep << e2
+    def copyTokenToRepeater(s,l,t):
+        matchTokens = _flatten(t.asList())
+        def mustMatchTheseTokens(s,l,t):
+            theseTokens = _flatten(t.asList())
+            if  theseTokens != matchTokens:
+                raise ParseException("",0,"")
+        rep.setParseAction( mustMatchTheseTokens, callDuringTry=True )
+    expr.addParseAction(copyTokenToRepeater, callDuringTry=True)
+    return rep
+
+def _escapeRegexRangeChars(s):
+    #~  escape these chars: ^-]
+    for c in r"\^-]":
+        s = s.replace(c,_bslash+c)
+    s = s.replace("\n",r"\n")
+    s = s.replace("\t",r"\t")
+    return _ustr(s)
+
+def oneOf( strs, caseless=False, useRegex=True ):
+    """Helper to quickly define a set of alternative Literals, and makes sure to do
+       longest-first testing when there is a conflict, regardless of the input order,
+       but returns a C{L{MatchFirst}} for best performance.
+
+       Parameters:
+        - strs - a string of space-delimited literals, or a list of string literals
+        - caseless - (default=False) - treat all literals as caseless
+        - useRegex - (default=True) - as an optimization, will generate a Regex
+          object; otherwise, will generate a C{MatchFirst} object (if C{caseless=True}, or
+          if creating a C{Regex} raises an exception)
+    """
+    if caseless:
+        isequal = ( lambda a,b: a.upper() == b.upper() )
+        masks = ( lambda a,b: b.upper().startswith(a.upper()) )
+        parseElementClass = CaselessLiteral
+    else:
+        isequal = ( lambda a,b: a == b )
+        masks = ( lambda a,b: b.startswith(a) )
+        parseElementClass = Literal
+
+    if isinstance(strs,(list,tuple)):
+        symbols = list(strs[:])
+    elif isinstance(strs,basestring):
+        symbols = strs.split()
+    else:
+        warnings.warn("Invalid argument to oneOf, expected string or list",
+                SyntaxWarning, stacklevel=2)
+
+    i = 0
+    while i < len(symbols)-1:
+        cur = symbols[i]
+        for j,other in enumerate(symbols[i+1:]):
+            if ( isequal(other, cur) ):
+                del symbols[i+j+1]
+                break
+            elif ( masks(cur, other) ):
+                del symbols[i+j+1]
+                symbols.insert(i,other)
+                cur = other
+                break
+        else:
+            i += 1
+
+    if not caseless and useRegex:
+        #~ print (strs,"->", "|".join( [ _escapeRegexChars(sym) for sym in symbols] ))
+        try:
+            if len(symbols)==len("".join(symbols)):
+                return Regex( "[%s]" % "".join( [ _escapeRegexRangeChars(sym) for sym in symbols] ) )
+            else:
+                return Regex( "|".join( [ re.escape(sym) for sym in symbols] ) )
+        except:
+            warnings.warn("Exception creating Regex for oneOf, building MatchFirst",
+                    SyntaxWarning, stacklevel=2)
+
+
+    # last resort, just use MatchFirst
+    return MatchFirst( [ parseElementClass(sym) for sym in symbols ] )
+
+def dictOf( key, value ):
+    """Helper to easily and clearly define a dictionary by specifying the respective patterns
+       for the key and value.  Takes care of defining the C{L{Dict}}, C{L{ZeroOrMore}}, and C{L{Group}} tokens
+       in the proper order.  The key pattern can include delimiting markers or punctuation,
+       as long as they are suppressed, thereby leaving the significant key text.  The value
+       pattern can include named results, so that the C{Dict} results can include named token
+       fields.
+    """
+    return Dict( ZeroOrMore( Group ( key + value ) ) )
+
+def originalTextFor(expr, asString=True):
+    """Helper to return the original, untokenized text for a given expression.  Useful to
+       restore the parsed fields of an HTML start tag into the raw tag text itself, or to
+       revert separate tokens with intervening whitespace back to the original matching
+       input text. Simpler to use than the parse action C{L{keepOriginalText}}, and does not
+       require the inspect module to chase up the call stack.  By default, returns a 
+       string containing the original parsed text.  
+       
+       If the optional C{asString} argument is passed as C{False}, then the return value is a 
+       C{L{ParseResults}} containing any results names that were originally matched, and a 
+       single token containing the original matched text from the input string.  So if 
+       the expression passed to C{L{originalTextFor}} contains expressions with defined
+       results names, you must set C{asString} to C{False} if you want to preserve those
+       results name values."""
+    locMarker = Empty().setParseAction(lambda s,loc,t: loc)
+    endlocMarker = locMarker.copy()
+    endlocMarker.callPreparse = False
+    matchExpr = locMarker("_original_start") + expr + endlocMarker("_original_end")
+    if asString:
+        extractText = lambda s,l,t: s[t._original_start:t._original_end]
+    else:
+        def extractText(s,l,t):
+            del t[:]
+            t.insert(0, s[t._original_start:t._original_end])
+            del t["_original_start"]
+            del t["_original_end"]
+    matchExpr.setParseAction(extractText)
+    return matchExpr
+
+def ungroup(expr): 
+    """Helper to undo pyparsing's default grouping of And expressions, even
+       if all but one are non-empty."""
+    return TokenConverter(expr).setParseAction(lambda t:t[0])
+
+# convenience constants for positional expressions
+empty       = Empty().setName("empty")
+lineStart   = LineStart().setName("lineStart")
+lineEnd     = LineEnd().setName("lineEnd")
+stringStart = StringStart().setName("stringStart")
+stringEnd   = StringEnd().setName("stringEnd")
+
+_escapedPunc = Word( _bslash, r"\[]-*.$+^?()~ ", exact=2 ).setParseAction(lambda s,l,t:t[0][1])
+_printables_less_backslash = "".join([ c for c in printables if c not in  r"\]" ])
+_escapedHexChar = Regex(r"\\0?[xX][0-9a-fA-F]+").setParseAction(lambda s,l,t:unichr(int(t[0].lstrip(r'\0x'),16)))
+_escapedOctChar = Regex(r"\\0[0-7]+").setParseAction(lambda s,l,t:unichr(int(t[0][1:],8)))
+_singleChar = _escapedPunc | _escapedHexChar | _escapedOctChar | Word(_printables_less_backslash,exact=1)
+_charRange = Group(_singleChar + Suppress("-") + _singleChar)
+_reBracketExpr = Literal("[") + Optional("^").setResultsName("negate") + Group( OneOrMore( _charRange | _singleChar ) ).setResultsName("body") + "]"
+
+_expanded = lambda p: (isinstance(p,ParseResults) and ''.join([ unichr(c) for c in range(ord(p[0]),ord(p[1])+1) ]) or p)
+
+def srange(s):
+    r"""Helper to easily define string ranges for use in Word construction.  Borrows
+       syntax from regexp '[]' string range definitions::
+          srange("[0-9]")   -> "0123456789"
+          srange("[a-z]")   -> "abcdefghijklmnopqrstuvwxyz"
+          srange("[a-z$_]") -> "abcdefghijklmnopqrstuvwxyz$_"
+       The input string must be enclosed in []'s, and the returned string is the expanded
+       character set joined into a single string.
+       The values enclosed in the []'s may be::
+          a single character
+          an escaped character with a leading backslash (such as \- or \])
+          an escaped hex character with a leading '\x' (\x21, which is a '!' character) 
+            (\0x## is also supported for backwards compatibility) 
+          an escaped octal character with a leading '\0' (\041, which is a '!' character)
+          a range of any of the above, separated by a dash ('a-z', etc.)
+          any combination of the above ('aeiouy', 'a-zA-Z0-9_$', etc.)
+    """
+    try:
+        return "".join([_expanded(part) for part in _reBracketExpr.parseString(s).body])
+    except:
+        return ""
+
+def matchOnlyAtCol(n):
+    """Helper method for defining parse actions that require matching at a specific
+       column in the input text.
+    """
+    def verifyCol(strg,locn,toks):
+        if col(locn,strg) != n:
+            raise ParseException(strg,locn,"matched token not at column %d" % n)
+    return verifyCol
+
+def replaceWith(replStr):
+    """Helper method for common parse actions that simply return a literal value.  Especially
+       useful when used with C{L{transformString<ParserElement.transformString>}()}.
+    """
+    def _replFunc(*args):
+        return [replStr]
+    return _replFunc
+
+def removeQuotes(s,l,t):
+    """Helper parse action for removing quotation marks from parsed quoted strings.
+       To use, add this parse action to quoted string using::
+         quotedString.setParseAction( removeQuotes )
+    """
+    return t[0][1:-1]
+
+def upcaseTokens(s,l,t):
+    """Helper parse action to convert tokens to upper case."""
+    return [ tt.upper() for tt in map(_ustr,t) ]
+
+def downcaseTokens(s,l,t):
+    """Helper parse action to convert tokens to lower case."""
+    return [ tt.lower() for tt in map(_ustr,t) ]
+
+def keepOriginalText(s,startLoc,t):
+    """DEPRECATED - use new helper method C{L{originalTextFor}}.
+       Helper parse action to preserve original parsed text,
+       overriding any nested parse actions."""
+    try:
+        endloc = getTokensEndLoc()
+    except ParseException:
+        raise ParseFatalException("incorrect usage of keepOriginalText - may only be called as a parse action")
+    del t[:]
+    t += ParseResults(s[startLoc:endloc])
+    return t
+
+def getTokensEndLoc():
+    """Method to be called from within a parse action to determine the end
+       location of the parsed tokens."""
+    import inspect
+    fstack = inspect.stack()
+    try:
+        # search up the stack (through intervening argument normalizers) for correct calling routine
+        for f in fstack[2:]:
+            if f[3] == "_parseNoCache":
+                endloc = f[0].f_locals["loc"]
+                return endloc
+        else:
+            raise ParseFatalException("incorrect usage of getTokensEndLoc - may only be called from within a parse action")
+    finally:
+        del fstack
+
+def _makeTags(tagStr, xml):
+    """Internal helper to construct opening and closing tag expressions, given a tag name"""
+    if isinstance(tagStr,basestring):
+        resname = tagStr
+        tagStr = Keyword(tagStr, caseless=not xml)
+    else:
+        resname = tagStr.name
+
+    tagAttrName = Word(alphas,alphanums+"_-:")
+    if (xml):
+        tagAttrValue = dblQuotedString.copy().setParseAction( removeQuotes )
+        openTag = Suppress("<") + tagStr("tag") + \
+                Dict(ZeroOrMore(Group( tagAttrName + Suppress("=") + tagAttrValue ))) + \
+                Optional("/",default=[False]).setResultsName("empty").setParseAction(lambda s,l,t:t[0]=='/') + Suppress(">")
+    else:
+        printablesLessRAbrack = "".join( [ c for c in printables if c not in ">" ] )
+        tagAttrValue = quotedString.copy().setParseAction( removeQuotes ) | Word(printablesLessRAbrack)
+        openTag = Suppress("<") + tagStr("tag") + \
+                Dict(ZeroOrMore(Group( tagAttrName.setParseAction(downcaseTokens) + \
+                Optional( Suppress("=") + tagAttrValue ) ))) + \
+                Optional("/",default=[False]).setResultsName("empty").setParseAction(lambda s,l,t:t[0]=='/') + Suppress(">")
+    closeTag = Combine(_L("</") + tagStr + ">")
+
+    openTag = openTag.setResultsName("start"+"".join(resname.replace(":"," ").title().split())).setName("<%s>" % tagStr)
+    closeTag = closeTag.setResultsName("end"+"".join(resname.replace(":"," ").title().split())).setName("</%s>" % tagStr)
+    openTag.tag = resname
+    closeTag.tag = resname
+    return openTag, closeTag
+
+def makeHTMLTags(tagStr):
+    """Helper to construct opening and closing tag expressions for HTML, given a tag name"""
+    return _makeTags( tagStr, False )
+
+def makeXMLTags(tagStr):
+    """Helper to construct opening and closing tag expressions for XML, given a tag name"""
+    return _makeTags( tagStr, True )
+
+def withAttribute(*args,**attrDict):
+    """Helper to create a validating parse action to be used with start tags created
+       with C{L{makeXMLTags}} or C{L{makeHTMLTags}}. Use C{withAttribute} to qualify a starting tag
+       with a required attribute value, to avoid false matches on common tags such as
+       C{<TD>} or C{<DIV>}.
+
+       Call C{withAttribute} with a series of attribute names and values. Specify the list
+       of filter attributes names and values as:
+        - keyword arguments, as in C{(align="right")}, or
+        - as an explicit dict with C{**} operator, when an attribute name is also a Python
+          reserved word, as in C{**{"class":"Customer", "align":"right"}}
+        - a list of name-value tuples, as in ( ("ns1:class", "Customer"), ("ns2:align","right") )
+       For attribute names with a namespace prefix, you must use the second form.  Attribute
+       names are matched insensitive to upper/lower case.
+
+       To verify that the attribute exists, but without specifying a value, pass
+       C{withAttribute.ANY_VALUE} as the value.
+       """
+    if args:
+        attrs = args[:]
+    else:
+        attrs = attrDict.items()
+    attrs = [(k,v) for k,v in attrs]
+    def pa(s,l,tokens):
+        for attrName,attrValue in attrs:
+            if attrName not in tokens:
+                raise ParseException(s,l,"no matching attribute " + attrName)
+            if attrValue != withAttribute.ANY_VALUE and tokens[attrName] != attrValue:
+                raise ParseException(s,l,"attribute '%s' has value '%s', must be '%s'" %
+                                            (attrName, tokens[attrName], attrValue))
+    return pa
+withAttribute.ANY_VALUE = object()
+
+opAssoc = _Constants()
+opAssoc.LEFT = object()
+opAssoc.RIGHT = object()
+
+def infixNotation( baseExpr, opList, lpar=Suppress('('), rpar=Suppress(')') ):
+    """Helper method for constructing grammars of expressions made up of
+       operators working in a precedence hierarchy.  Operators may be unary or
+       binary, left- or right-associative.  Parse actions can also be attached
+       to operator expressions.
+
+       Parameters:
+        - baseExpr - expression representing the most basic element for the nested
+        - opList - list of tuples, one for each operator precedence level in the
+          expression grammar; each tuple is of the form
+          (opExpr, numTerms, rightLeftAssoc, parseAction), where:
+           - opExpr is the pyparsing expression for the operator;
+              may also be a string, which will be converted to a Literal;
+              if numTerms is 3, opExpr is a tuple of two expressions, for the
+              two operators separating the 3 terms
+           - numTerms is the number of terms for this operator (must
+              be 1, 2, or 3)
+           - rightLeftAssoc is the indicator whether the operator is
+              right or left associative, using the pyparsing-defined
+              constants C{opAssoc.RIGHT} and C{opAssoc.LEFT}.
+           - parseAction is the parse action to be associated with
+              expressions matching this operator expression (the
+              parse action tuple member may be omitted)
+        - lpar - expression for matching left-parentheses (default=Suppress('('))
+        - rpar - expression for matching right-parentheses (default=Suppress(')'))
+    """
+    ret = Forward()
+    lastExpr = baseExpr | ( lpar + ret + rpar )
+    for i,operDef in enumerate(opList):
+        opExpr,arity,rightLeftAssoc,pa = (operDef + (None,))[:4]
+        if arity == 3:
+            if opExpr is None or len(opExpr) != 2:
+                raise ValueError("if numterms=3, opExpr must be a tuple or list of two expressions")
+            opExpr1, opExpr2 = opExpr
+        thisExpr = Forward()#.setName("expr%d" % i)
+        if rightLeftAssoc == opAssoc.LEFT:
+            if arity == 1:
+                matchExpr = FollowedBy(lastExpr + opExpr) + Group( lastExpr + OneOrMore( opExpr ) )
+            elif arity == 2:
+                if opExpr is not None:
+                    matchExpr = FollowedBy(lastExpr + opExpr + lastExpr) + Group( lastExpr + OneOrMore( opExpr + lastExpr ) )
+                else:
+                    matchExpr = FollowedBy(lastExpr+lastExpr) + Group( lastExpr + OneOrMore(lastExpr) )
+            elif arity == 3:
+                matchExpr = FollowedBy(lastExpr + opExpr1 + lastExpr + opExpr2 + lastExpr) + \
+                            Group( lastExpr + opExpr1 + lastExpr + opExpr2 + lastExpr )
+            else:
+                raise ValueError("operator must be unary (1), binary (2), or ternary (3)")
+        elif rightLeftAssoc == opAssoc.RIGHT:
+            if arity == 1:
+                # try to avoid LR with this extra test
+                if not isinstance(opExpr, Optional):
+                    opExpr = Optional(opExpr)
+                matchExpr = FollowedBy(opExpr.expr + thisExpr) + Group( opExpr + thisExpr )
+            elif arity == 2:
+                if opExpr is not None:
+                    matchExpr = FollowedBy(lastExpr + opExpr + thisExpr) + Group( lastExpr + OneOrMore( opExpr + thisExpr ) )
+                else:
+                    matchExpr = FollowedBy(lastExpr + thisExpr) + Group( lastExpr + OneOrMore( thisExpr ) )
+            elif arity == 3:
+                matchExpr = FollowedBy(lastExpr + opExpr1 + thisExpr + opExpr2 + thisExpr) + \
+                            Group( lastExpr + opExpr1 + thisExpr + opExpr2 + thisExpr )
+            else:
+                raise ValueError("operator must be unary (1), binary (2), or ternary (3)")
+        else:
+            raise ValueError("operator must indicate right or left associativity")
+        if pa:
+            matchExpr.setParseAction( pa )
+        thisExpr << ( matchExpr | lastExpr )
+        lastExpr = thisExpr
+    ret << lastExpr
+    return ret
+operatorPrecedence = infixNotation
+
+dblQuotedString = Regex(r'"(?:[^"\n\r\\]|(?:"")|(?:\\x[0-9a-fA-F]+)|(?:\\.))*"').setName("string enclosed in double quotes")
+sglQuotedString = Regex(r"'(?:[^'\n\r\\]|(?:'')|(?:\\x[0-9a-fA-F]+)|(?:\\.))*'").setName("string enclosed in single quotes")
+quotedString = Regex(r'''(?:"(?:[^"\n\r\\]|(?:"")|(?:\\x[0-9a-fA-F]+)|(?:\\.))*")|(?:'(?:[^'\n\r\\]|(?:'')|(?:\\x[0-9a-fA-F]+)|(?:\\.))*')''').setName("quotedString using single or double quotes")
+unicodeString = Combine(_L('u') + quotedString.copy())
+
+def nestedExpr(opener="(", closer=")", content=None, ignoreExpr=quotedString.copy()):
+    """Helper method for defining nested lists enclosed in opening and closing
+       delimiters ("(" and ")" are the default).
+
+       Parameters:
+        - opener - opening character for a nested list (default="("); can also be a pyparsing expression
+        - closer - closing character for a nested list (default=")"); can also be a pyparsing expression
+        - content - expression for items within the nested lists (default=None)
+        - ignoreExpr - expression for ignoring opening and closing delimiters (default=quotedString)
+
+       If an expression is not provided for the content argument, the nested
+       expression will capture all whitespace-delimited content between delimiters
+       as a list of separate values.
+
+       Use the C{ignoreExpr} argument to define expressions that may contain
+       opening or closing characters that should not be treated as opening
+       or closing characters for nesting, such as quotedString or a comment
+       expression.  Specify multiple expressions using an C{L{Or}} or C{L{MatchFirst}}.
+       The default is L{quotedString}, but if no expressions are to be ignored,
+       then pass C{None} for this argument.
+    """
+    if opener == closer:
+        raise ValueError("opening and closing strings cannot be the same")
+    if content is None:
+        if isinstance(opener,basestring) and isinstance(closer,basestring):
+            if len(opener) == 1 and len(closer)==1:
+                if ignoreExpr is not None:
+                    content = (Combine(OneOrMore(~ignoreExpr +
+                                    CharsNotIn(opener+closer+ParserElement.DEFAULT_WHITE_CHARS,exact=1))
+                                ).setParseAction(lambda t:t[0].strip()))
+                else:
+                    content = (empty.copy()+CharsNotIn(opener+closer+ParserElement.DEFAULT_WHITE_CHARS
+                                ).setParseAction(lambda t:t[0].strip()))
+            else:
+                if ignoreExpr is not None:
+                    content = (Combine(OneOrMore(~ignoreExpr + 
+                                    ~Literal(opener) + ~Literal(closer) +
+                                    CharsNotIn(ParserElement.DEFAULT_WHITE_CHARS,exact=1))
+                                ).setParseAction(lambda t:t[0].strip()))
+                else:
+                    content = (Combine(OneOrMore(~Literal(opener) + ~Literal(closer) +
+                                    CharsNotIn(ParserElement.DEFAULT_WHITE_CHARS,exact=1))
+                                ).setParseAction(lambda t:t[0].strip()))
+        else:
+            raise ValueError("opening and closing arguments must be strings if no content expression is given")
+    ret = Forward()
+    if ignoreExpr is not None:
+        ret << Group( Suppress(opener) + ZeroOrMore( ignoreExpr | ret | content ) + Suppress(closer) )
+    else:
+        ret << Group( Suppress(opener) + ZeroOrMore( ret | content )  + Suppress(closer) )
+    return ret
+
+def indentedBlock(blockStatementExpr, indentStack, indent=True):
+    """Helper method for defining space-delimited indentation blocks, such as
+       those used to define block statements in Python source code.
+
+       Parameters:
+        - blockStatementExpr - expression defining syntax of statement that
+            is repeated within the indented block
+        - indentStack - list created by caller to manage indentation stack
+            (multiple statementWithIndentedBlock expressions within a single grammar
+            should share a common indentStack)
+        - indent - boolean indicating whether block must be indented beyond the
+            the current level; set to False for block of left-most statements
+            (default=True)
+
+       A valid block must contain at least one C{blockStatement}.
+    """
+    def checkPeerIndent(s,l,t):
+        if l >= len(s): return
+        curCol = col(l,s)
+        if curCol != indentStack[-1]:
+            if curCol > indentStack[-1]:
+                raise ParseFatalException(s,l,"illegal nesting")
+            raise ParseException(s,l,"not a peer entry")
+
+    def checkSubIndent(s,l,t):
+        curCol = col(l,s)
+        if curCol > indentStack[-1]:
+            indentStack.append( curCol )
+        else:
+            raise ParseException(s,l,"not a subentry")
+
+    def checkUnindent(s,l,t):
+        if l >= len(s): return
+        curCol = col(l,s)
+        if not(indentStack and curCol < indentStack[-1] and curCol <= indentStack[-2]):
+            raise ParseException(s,l,"not an unindent")
+        indentStack.pop()
+
+    NL = OneOrMore(LineEnd().setWhitespaceChars("\t ").suppress())
+    INDENT = Empty() + Empty().setParseAction(checkSubIndent)
+    PEER   = Empty().setParseAction(checkPeerIndent)
+    UNDENT = Empty().setParseAction(checkUnindent)
+    if indent:
+        smExpr = Group( Optional(NL) +
+            #~ FollowedBy(blockStatementExpr) +
+            INDENT + (OneOrMore( PEER + Group(blockStatementExpr) + Optional(NL) )) + UNDENT)
+    else:
+        smExpr = Group( Optional(NL) +
+            (OneOrMore( PEER + Group(blockStatementExpr) + Optional(NL) )) )
+    blockStatementExpr.ignore(_bslash + LineEnd())
+    return smExpr
+
+alphas8bit = srange(r"[\0xc0-\0xd6\0xd8-\0xf6\0xf8-\0xff]")
+punc8bit = srange(r"[\0xa1-\0xbf\0xd7\0xf7]")
+
+anyOpenTag,anyCloseTag = makeHTMLTags(Word(alphas,alphanums+"_:"))
+commonHTMLEntity = Combine(_L("&") + oneOf("gt lt amp nbsp quot").setResultsName("entity") +";").streamline()
+_htmlEntityMap = dict(zip("gt lt amp nbsp quot".split(),'><& "'))
+replaceHTMLEntity = lambda t : t.entity in _htmlEntityMap and _htmlEntityMap[t.entity] or None
+
+# it's easy to get these comment structures wrong - they're very common, so may as well make them available
+cStyleComment = Regex(r"/\*(?:[^*]*\*+)+?/").setName("C style comment")
+
+htmlComment = Regex(r"<!--[\s\S]*?-->")
+restOfLine = Regex(r".*").leaveWhitespace()
+dblSlashComment = Regex(r"\/\/(\\\n|.)*").setName("// comment")
+cppStyleComment = Regex(r"/(?:\*(?:[^*]*\*+)+?/|/[^\n]*(?:\n[^\n]*)*?(?:(?<!\\)|\Z))").setName("C++ style comment")
+
+javaStyleComment = cppStyleComment
+pythonStyleComment = Regex(r"#.*").setName("Python style comment")
+_noncomma = "".join( [ c for c in printables if c != "," ] )
+_commasepitem = Combine(OneOrMore(Word(_noncomma) +
+                                  Optional( Word(" \t") +
+                                            ~Literal(",") + ~LineEnd() ) ) ).streamline().setName("commaItem")
+commaSeparatedList = delimitedList( Optional( quotedString.copy() | _commasepitem, default="") ).setName("commaSeparatedList")
+
+
+if __name__ == "__main__":
+
+    def test( teststring ):
+        try:
+            tokens = simpleSQL.parseString( teststring )
+            tokenlist = tokens.asList()
+            print (teststring + "->"   + str(tokenlist))
+            print ("tokens = "         + str(tokens))
+            print ("tokens.columns = " + str(tokens.columns))
+            print ("tokens.tables = "  + str(tokens.tables))
+            print (tokens.asXML("SQL",True))
+        except ParseBaseException, err:
+            print (teststring + "->")
+            print (err.line)
+            print (" "*(err.column-1) + "^")
+            print (err)
+        print()
+
+    selectToken    = CaselessLiteral( "select" )
+    fromToken      = CaselessLiteral( "from" )
+
+    ident          = Word( alphas, alphanums + "_$" )
+    columnName     = delimitedList( ident, ".", combine=True ).setParseAction( upcaseTokens )
+    columnNameList = Group( delimitedList( columnName ) )#.setName("columns")
+    tableName      = delimitedList( ident, ".", combine=True ).setParseAction( upcaseTokens )
+    tableNameList  = Group( delimitedList( tableName ) )#.setName("tables")
+    simpleSQL      = ( selectToken + \
+                     ( '*' | columnNameList ).setResultsName( "columns" ) + \
+                     fromToken + \
+                     tableNameList.setResultsName( "tables" ) )
+
+    test( "SELECT * from XYZZY, ABC" )
+    test( "select * from SYS.XYZZY" )
+    test( "Select A from Sys.dual" )
+    test( "Select AA,BB,CC from Sys.dual" )
+    test( "Select A, B, C from Sys.dual" )
+    test( "Select A, B, C from Sys.dual" )
+    test( "Xelect A, B, C from Sys.dual" )
+    test( "Select A, B, C frox Sys.dual" )
+    test( "Select" )
+    test( "Select ^^^ frox Sys.dual" )
+    test( "Select A, B, C from Sys.dual, Table2   " )
diff --git a/scripts/show_comments.py b/scripts/show_comments.py
index 2c4446c..45b188c 100644
--- a/scripts/show_comments.py
+++ b/scripts/show_comments.py
@@ -1,27 +1,27 @@
-#!/usr/bin/env python
-
-from __future__ import print_function
-import sys
-
-def main():
-	fs = open(sys.argv[1]).read().splitlines()
-	fs = map(lambda f: {'name':f, 'contents':open(f).readlines()},fs)
-	for f in fs:
-		buffer = ''
-		multiline = 0
-		is_first = True
-		for i,line in enumerate(f['contents'],start=1):
-			multiline += line.count('(*')
-			if (line.count('//') > 0 or multiline > 0) and not is_first:
-				buffer += '{}: {}'.format(i,line)
-			closed = line.count('*)')
-			if closed > 0 and is_first:
-				is_first = False
-			multiline -= closed
-		if buffer:
-			print ('*** {}:'.format(f['name']))
-			print (buffer)
-			print ()
-
-if __name__ == '__main__':
-	main()
+#!/usr/bin/env python
+
+from __future__ import print_function
+import sys
+
+def main():
+	fs = open(sys.argv[1]).read().splitlines()
+	fs = map(lambda f: {'name':f, 'contents':open(f).readlines()},fs)
+	for f in fs:
+		buffer = ''
+		multiline = 0
+		is_first = True
+		for i,line in enumerate(f['contents'],start=1):
+			multiline += line.count('(*')
+			if (line.count('//') > 0 or multiline > 0) and not is_first:
+				buffer += '{}: {}'.format(i,line)
+			closed = line.count('*)')
+			if closed > 0 and is_first:
+				is_first = False
+			multiline -= closed
+		if buffer:
+			print ('*** {}:'.format(f['name']))
+			print (buffer)
+			print ()
+
+if __name__ == '__main__':
+	main()
diff --git a/scripts/travis.sh b/scripts/travis.sh
index bfeb8c4..cb3c239 100755
--- a/scripts/travis.sh
+++ b/scripts/travis.sh
@@ -1,11 +1,11 @@
-#!/bin/bash
-
-if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
-  sudo /etc/init.d/postgresql stop;
-  for d in mysql ; do
-    sudo rm -rf /var/lib/$d
-    sudo mv /var/ramfs/$d /var/lib/
-    sudo ln -s /var/lib/$d /var/ramfs/$d
-  done
-  free -h;
-fi
+#!/bin/bash
+
+if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
+  sudo /etc/init.d/postgresql stop;
+  for d in mysql ; do
+    sudo rm -rf /var/lib/$d
+    sudo mv /var/ramfs/$d /var/lib/
+    sudo ln -s /var/lib/$d /var/ramfs/$d
+  done
+  free -h;
+fi
diff --git a/scripts/xunit-tc7 b/scripts/xunit-tc7
index 896fe3e..fc138c7 100644
--- a/scripts/xunit-tc7
+++ b/scripts/xunit-tc7
@@ -1,116 +1,116 @@
-#! /usr/bin/env python
-
-# --------------------------------------------------------------------
-import sys, os, time, socket, datetime, subprocess as sp
-import lxml, lxml.builder
-
-E = lxml.builder.ElementMaker()
-
-# --------------------------------------------------------------------
-class Object(object):
-    def __init__(self, **kw):
-        self.__dict__.update(kw)
-
-# --------------------------------------------------------------------
-def _options():
-    from optparse import OptionParser
-
-    parser = OptionParser(usage = 'Usage: %prog [options] modules...')
-
-    parser.add_option(
-        '', '--xunit',
-        action  = 'store',
-        default = None,
-        metavar = 'FILE',
-        help    = 'dump result to FILE using xUnit format')
-
-    (options, args) = parser.parse_args()
-
-    if len(args) == 0:
-        parser.error('must give at least one module to check')
-
-    return (options, args)
-
-# --------------------------------------------------------------------
-def _check_module(module):
-    aout = Object(success = None,
-                  time    = None,
-                  output  = None,
-                  module  = module)
-
-    with open(os.devnull, "w") as devnull:
-        status = 0
-        try:
-            timestamp = time.time()
-            command = ['make', '%s.tc7' % (module,)]
-            process = sp.Popen(command,
-                               stdout = devnull,
-                               stderr = sp.PIPE)
-            output = process.communicate()[1]
-            status = process.returncode
-            timestamp = time.time() - timestamp
-        except OSError:
-            return aout
-
-        aout.success = (status == 0)
-        aout.time    = timestamp
-        aout.output  = output
-        return aout
-
-# --------------------------------------------------------------------
-def _xunit_document(result, config):
-    ok = [x for x in result if     x.success]
-    ko = [x for x in result if not x.success]
-
-    totaltime = sum([x.time for x in result])
-
-    tt = E.testsuite (name      = "fs7-check",
-                      hostname  = config.hostname,
-                      timestamp = config.timestamp.isoformat(),
-                      tests     = str(len(result)),
-                      errors    = "0",
-                      failures  = str(len(ko)),
-                      time      = "%.3f" % totaltime)
-
-    for rr in result:
-        rnode = E.testcase(
-            name      = rr.module,
-            classname = "fs7",
-            time      = "%.3f" % (rr.time,))
-
-        if not rr.success:
-            rnode.append(E.failure( \
-                    message = unicode(rr.output, 'utf-8', 'replace'),
-                    type    = 'should-typecheck'))
-        tt.append(rnode)
-
-    tt.append(E("system-out"))
-    tt.append(E("system-err"))
-
-    return E.testsuites(tt)
-
-
-# --------------------------------------------------------------------
-def _main():
-    options, modules = _options()
-
-    config   = Object(hostname  = socket.gethostname(),
-                      timestamp = datetime.datetime.utcnow())
-    result   = [_check_module(x) for x in modules]
-    document = _xunit_document(result, config)
-
-
-    xunit = lxml.etree.tostring(document,
-                                pretty_print    = True   ,
-                                xml_declaration = True   ,
-                                encoding        = 'utf-8')
-
-    if options.xunit is None:
-        sys.stderr.write(xunit)
-    else:
-        with open(options.xunit, 'wb') as output:
-            output.write(xunit)
-
-# --------------------------------------------------------------------
-if __name__ == '__main__':
-    _main()
+#! /usr/bin/env python
+
+# --------------------------------------------------------------------
+import sys, os, time, socket, datetime, subprocess as sp
+import lxml, lxml.builder
+
+E = lxml.builder.ElementMaker()
+
+# --------------------------------------------------------------------
+class Object(object):
+    def __init__(self, **kw):
+        self.__dict__.update(kw)
+
+# --------------------------------------------------------------------
+def _options():
+    from optparse import OptionParser
+
+    parser = OptionParser(usage = 'Usage: %prog [options] modules...')
+
+    parser.add_option(
+        '', '--xunit',
+        action  = 'store',
+        default = None,
+        metavar = 'FILE',
+        help    = 'dump result to FILE using xUnit format')
+
+    (options, args) = parser.parse_args()
+
+    if len(args) == 0:
+        parser.error('must give at least one module to check')
+
+    return (options, args)
+
+# --------------------------------------------------------------------
+def _check_module(module):
+    aout = Object(success = None,
+                  time    = None,
+                  output  = None,
+                  module  = module)
+
+    with open(os.devnull, "w") as devnull:
+        status = 0
+        try:
+            timestamp = time.time()
+            command = ['make', '%s.tc7' % (module,)]
+            process = sp.Popen(command,
+                               stdout = devnull,
+                               stderr = sp.PIPE)
+            output = process.communicate()[1]
+            status = process.returncode
+            timestamp = time.time() - timestamp
+        except OSError:
+            return aout
+
+        aout.success = (status == 0)
+        aout.time    = timestamp
+        aout.output  = output
+        return aout
+
+# --------------------------------------------------------------------
+def _xunit_document(result, config):
+    ok = [x for x in result if     x.success]
+    ko = [x for x in result if not x.success]
+
+    totaltime = sum([x.time for x in result])
+
+    tt = E.testsuite (name      = "fs7-check",
+                      hostname  = config.hostname,
+                      timestamp = config.timestamp.isoformat(),
+                      tests     = str(len(result)),
+                      errors    = "0",
+                      failures  = str(len(ko)),
+                      time      = "%.3f" % totaltime)
+
+    for rr in result:
+        rnode = E.testcase(
+            name      = rr.module,
+            classname = "fs7",
+            time      = "%.3f" % (rr.time,))
+
+        if not rr.success:
+            rnode.append(E.failure( \
+                    message = unicode(rr.output, 'utf-8', 'replace'),
+                    type    = 'should-typecheck'))
+        tt.append(rnode)
+
+    tt.append(E("system-out"))
+    tt.append(E("system-err"))
+
+    return E.testsuites(tt)
+
+
+# --------------------------------------------------------------------
+def _main():
+    options, modules = _options()
+
+    config   = Object(hostname  = socket.gethostname(),
+                      timestamp = datetime.datetime.utcnow())
+    result   = [_check_module(x) for x in modules]
+    document = _xunit_document(result, config)
+
+
+    xunit = lxml.etree.tostring(document,
+                                pretty_print    = True   ,
+                                xml_declaration = True   ,
+                                encoding        = 'utf-8')
+
+    if options.xunit is None:
+        sys.stderr.write(xunit)
+    else:
+        with open(options.xunit, 'wb') as output:
+            output.write(xunit)
+
+# --------------------------------------------------------------------
+if __name__ == '__main__':
+    _main()
diff --git a/src/flex/README.md b/src/flex/README.md
index 6c86578..231c9a9 100644
--- a/src/flex/README.md
+++ b/src/flex/README.md
@@ -1,17 +1,17 @@
-# FlexTLS
-
-## Work in progress
-
-   - Integrate TLS 1.3
-
-   - Include new algorithms
-
-   - Remove the SmackTLS part in favor of the JS version
-
-## Open problems
-
-   - Can we integrate our private F* crypto library ?
-
-   - Can we prove the security of individual FlexTLS scenarios ?
-
-   - Can we generate single scenario implementations ?
+# FlexTLS
+
+## Work in progress
+
+   - Integrate TLS 1.3
+
+   - Include new algorithms
+
+   - Remove the SmackTLS part in favor of the JS version
+
+## Open problems
+   
+   - Can we integrate our private F* crypto library ?
+   
+   - Can we prove the security of individual FlexTLS scenarios ?
+
+   - Can we generate single scenario implementations ?
diff --git a/src/flex/TODO.txt b/src/flex/TODO.txt
index 1f62389..2f80256 100644
--- a/src/flex/TODO.txt
+++ b/src/flex/TODO.txt
@@ -1,45 +1,45 @@
-#
-# TODO
-# (Please edit at will...)
-#
-
-
-
-
-# MiTLS
-
--  Conflicting definitions
-
-   * ECGroups and CoreCrypto both define `type ec_curve`
-
-   * For some reason, HandshakeMessages.fst duplicates the record types for messages
-     already present in FlexTLS.Types.fst.
-
-
--  Missing definitions
-
-   * All FFDH related functions do not exist yet, this is mandatory for TLS 1.3
-     as by default arbitrary groups are forbidden.
-
-   * ECDSA is missing
-
-
-
-
-# FlexTLS
-
--  FlexTLS.Types.fst : Missing definitions from MiTLS
-
-   * `assume new type ffdhGroup` // Declare in CoreCrypto.fst
-   * `assume new type ConnectionState` // Record.fst -> Rename `connectionState` ?
-   * `assume new type clientExtension` // TLSExtensions.fst ?
-   * `assume new type serverExtension` // TLSExtensions.fst ?
-   * `assume new type serverConfigurationExtension` // TLSExtensions.fst ?
-
-
--  FlexTLS.Constants.fst : Missing definitions from MiTLS
-
-   * `let defaultConfig.ffdhGroups` // TLSInfo.fst
-
-
-
+#
+# TODO
+# (Please edit at will...)
+#
+
+
+
+
+# MiTLS
+
+-  Conflicting definitions
+
+   * ECGroups and CoreCrypto both define `type ec_curve`
+   
+   * For some reason, HandshakeMessages.fst duplicates the record types for messages
+     already present in FlexTLS.Types.fst.
+
+
+-  Missing definitions
+
+   * All FFDH related functions do not exist yet, this is mandatory for TLS 1.3
+     as by default arbitrary groups are forbidden.
+
+   * ECDSA is missing
+
+
+
+
+# FlexTLS
+
+-  FlexTLS.Types.fst : Missing definitions from MiTLS
+
+   * `assume new type ffdhGroup` // Declare in CoreCrypto.fst
+   * `assume new type ConnectionState` // Record.fst -> Rename `connectionState` ?
+   * `assume new type clientExtension` // TLSExtensions.fst ?
+   * `assume new type serverExtension` // TLSExtensions.fst ?
+   * `assume new type serverConfigurationExtension` // TLSExtensions.fst ?
+
+
+-  FlexTLS.Constants.fst : Missing definitions from MiTLS
+
+   * `let defaultConfig.ffdhGroups` // TLSInfo.fst
+   
+
+
diff --git a/src/fstar_proof/README b/src/fstar_proof/README
index 948bc1f..356c5b8 100644
--- a/src/fstar_proof/README
+++ b/src/fstar_proof/README
@@ -1,65 +1,65 @@
-(* Injectivity proof of the F* state machine *)
-
-This proves the injectivity of the TLS handshake transcripts in F*.
-At the end of the TLS handshake both parties exchange the "log" of the
-messages they received to make sure they share the same negotiated
-values.  This log is simply the concatenation of the bytes of the
-received Handshake messages. We prove that if the two parties share
-the same log, they must also share the same internal state values. In
-effect, we show that the individual message formats and their
-concatenation is injective for these values.
-
-In the original miTLS development, this standalone logical proof was
-done in Coq and hence was disconnected from the rest of the
-development. We redid the proof in F*, and as verification of miTLS in
-F* progresses, this proof will be integrated into the miTLS codebase.
-
-(* How to verify the F* proof of injectivity *)
-
-Make sure that the FSTAR_HOME variable is set to your F* root
-directory, then execute `make` in the directory containing this README
-file.
-
-NB: verifying the proof requires a lot of memory (up to 16Go), so F*
-should be built for an x64 platform.
-
-(* Structure of the code *)
-
-The code contains .fst and .fsti files. The .fsti files are interfaces
-which always correspond to a .fst file which has been proven before.
-They allow to run the proof faster, module by module. The concrete
-proof is in the .fst files.
-
-predicates.fst :
-    This file contains all the useful types, predicates and parsing
-    functions for the later proof. The first part up to L357 describes
-    and proves the parsing functions for TLS messages.  The second
-    part up to L535 describes the state machine data type
-    (state_monitor) and predicates on the messages (about their types,
-    length etc.). The third part up to L679 describes how the log is
-    built from a list of messages, and that if those messages are
-    formatted properly there is a bijectivity relation between the log
-    and the message list. The last part of the file, after L682,
-    describes different TLS state machine's states which are used in
-    the rest of the proof.
-
-<message_type>_lemma.fst :
-    Each of these files corresponds to a state after receiving a
-    particular message type. They prove that the state machine is
-    appropriately updated with regards to the predicates in the last
-    part of the file "predicates.fst".
-
-    The proof shows that if two instances of the state machine have
-    the same internal state values, then the updated state machines
-    will also have the same state values, and that the reciprocal is
-    true. Indeed, from a particular state machine's appropriate state,
-    there is a unique previous state which leads to it.
-
-helper_lemma.fst :
-    Helper lemmas, to infer which state the state machine is in from
-    its internal values.
-
-injectivity_lemma.fst:
-    The actual proof of injectivity. It shows that if two state
-    machines are in an acceptable state, and their logs are identical,
-    then they share the same state values.
+(* Injectivity proof of the F* state machine *)
+
+This proves the injectivity of the TLS handshake transcripts in F*.
+At the end of the TLS handshake both parties exchange the "log" of the
+messages they received to make sure they share the same negotiated
+values.  This log is simply the concatenation of the bytes of the
+received Handshake messages. We prove that if the two parties share
+the same log, they must also share the same internal state values. In
+effect, we show that the individual message formats and their
+concatenation is injective for these values.
+
+In the original miTLS development, this standalone logical proof was
+done in Coq and hence was disconnected from the rest of the
+development. We redid the proof in F*, and as verification of miTLS in
+F* progresses, this proof will be integrated into the miTLS codebase.
+
+(* How to verify the F* proof of injectivity *)
+
+Make sure that the FSTAR_HOME variable is set to your F* root
+directory, then execute `make` in the directory containing this README
+file.
+
+NB: verifying the proof requires a lot of memory (up to 16Go), so F*
+should be built for an x64 platform.
+
+(* Structure of the code *)
+
+The code contains .fst and .fsti files. The .fsti files are interfaces
+which always correspond to a .fst file which has been proven before.
+They allow to run the proof faster, module by module. The concrete
+proof is in the .fst files.
+
+predicates.fst :
+    This file contains all the useful types, predicates and parsing
+    functions for the later proof. The first part up to L357 describes
+    and proves the parsing functions for TLS messages.  The second
+    part up to L535 describes the state machine data type
+    (state_monitor) and predicates on the messages (about their types,
+    length etc.). The third part up to L679 describes how the log is
+    built from a list of messages, and that if those messages are
+    formatted properly there is a bijectivity relation between the log
+    and the message list. The last part of the file, after L682,
+    describes different TLS state machine's states which are used in
+    the rest of the proof.
+
+<message_type>_lemma.fst :
+    Each of these files corresponds to a state after receiving a
+    particular message type. They prove that the state machine is
+    appropriately updated with regards to the predicates in the last
+    part of the file "predicates.fst".
+    
+    The proof shows that if two instances of the state machine have
+    the same internal state values, then the updated state machines
+    will also have the same state values, and that the reciprocal is
+    true. Indeed, from a particular state machine's appropriate state,
+    there is a unique previous state which leads to it.
+
+helper_lemma.fst :
+    Helper lemmas, to infer which state the state machine is in from
+    its internal values.
+
+injectivity_lemma.fst:
+    The actual proof of injectivity. It shows that if two state
+    machines are in an acceptable state, and their logs are identical,
+    then they share the same state values.
diff --git a/src/mipki/App.config b/src/mipki/App.config
index a338d00..8b1f20b 100644
--- a/src/mipki/App.config
+++ b/src/mipki/App.config
@@ -1,14 +1,14 @@
-﻿<?xml version="1.0" encoding="utf-8"?>
-<configuration>
-    <startup>
-        <supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.5" />
-    </startup>
-  <runtime>
-    <assemblyBinding xmlns="urn:schemas-microsoft-com:asm.v1">
-      <dependentAssembly>
-        <assemblyIdentity name="FSharp.Core" publicKeyToken="b03f5f7f11d50a3a" culture="neutral" />
-        <bindingRedirect oldVersion="0.0.0.0-4.3.1.0" newVersion="4.3.1.0" />
-      </dependentAssembly>
-    </assemblyBinding>
-  </runtime>
+﻿<?xml version="1.0" encoding="utf-8"?>
+<configuration>
+    <startup> 
+        <supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.5" />
+    </startup>
+  <runtime>
+    <assemblyBinding xmlns="urn:schemas-microsoft-com:asm.v1">
+      <dependentAssembly>
+        <assemblyIdentity name="FSharp.Core" publicKeyToken="b03f5f7f11d50a3a" culture="neutral" />
+        <bindingRedirect oldVersion="0.0.0.0-4.3.1.0" newVersion="4.3.1.0" />
+      </dependentAssembly>
+    </assemblyBinding>
+  </runtime>
</configuration>
\ No newline at end of file
diff --git a/src/mipki/examples/ht.asn b/src/mipki/examples/ht.asn
index e131625..be92bf6 100644
--- a/src/mipki/examples/ht.asn
+++ b/src/mipki/examples/ht.asn
@@ -1,95 +1,95 @@
-seq {
- seq {
-  [0]
-   2L;
-  10325242381392012215542285357594123655848209L;
-  seq {
-   O1.2.2.113549.1.1.5;
-   null;
-  };
-  seq {
-   set {
-    seq {
-     O2.5.10;
-     p"AlphaSSL";
-    };
-   };
-   set {
-    seq {
-     O2.5.3;
-     p"AlphaSSL CA - G2";
-    };
-   };
-  };
-  seq {
-   "130602172755Z" as utc date;
-   "170602172755Z" as utc date;
-  };
-  seq {
-   set {
-    seq {
-     O2.5.11;
-     p"Domain Control Validated";
-    };
-   };
-   set {
-    seq {
-     O2.5.3;
-     t"*.ht.vc";
-    };
-   };
-  };
-  seq {
-   seq {
-    O1.2.2.113549.1.1.1;
-    null;
-   };
-   0x003082010A0282010100C697C088C630A57A0C68DA22F631579C9B2780BBCDB9D98177BF6D1177BE9A141418CBBB38C490740D17732CDF4E34F1B4C1973142F5DA7EEDB676B6D19D784FD20F3127AA647EB7DC8863BF9F0002BD689829A836B1682B9D05AFA573544662FE7EA0D4D8ADBFF51ACC3FB722E54B52F93826985DD607F0CB0C1EFF43E2A9ADBBB1CA83A0334FBA764C1ECAD9A2C486F247909B98925776F9EE5D22776FEBA3EE1186D213C4501C900962D5228EDFEB518BF73E66B945BC761345CE9259AD271BB3E3251D0A13FDCA94BF7D603703002087D875B249035ACF961779C67C466ED1C467D9E1C9647B8A720C3A2A6EC6E4456FADA9D728ED54B3F958DB21B34DD10203010001 as bitstring;
-  };
-  [3]
-   seq {
-    seq {
-     O2.5.15;
-     true;
-     0x030205A0 as octet string;
-    };
-    seq {
-     O2.5.32;
-     0x3040303E060667810C0102013034303206082B06010505070201162668747470733A2F2F7777772E676C6F62616C7369676E2E636F6D2F7265706F7369746F72792F as octet string;
-    };
-    seq {
-     O2.5.17;
-     0x301082072A2E68742E7663820568742E7663 as octet string;
-    };
-    seq {
-     O2.5.19;
-     0x3000 as octet string;
-    };
-    seq {
-     O2.5.37;
-     0x301406082B0601050507030106082B06010505070302 as octet string;
-    };
-    seq {
-     O2.5.31;
-     0x3031302FA02DA02B8629687474703A2F2F63726C322E616C70686173736C2E636F6D2F67732F6773616C70686167322E63726C as octet string;
-    };
-    seq {
-     O1.3.1.5.5.7.1.1;
-     0x3071303C06082B060105050730028630687474703A2F2F736563757265322E616C70686173736C2E636F6D2F6361636572742F6773616C70686167322E637274303106082B060105050730018625687474703A2F2F6F637370322E676C6F62616C7369676E2E636F6D2F6773616C7068616732 as octet string;
-    };
-    seq {
-     O2.5.14;
-     0x0414494EBE972A9FDD69CE7583FE402AC1A3F6F70B8E as octet string;
-    };
-    seq {
-     O2.5.35;
-     0x3016801414EA1955F00E0D32C61F7433B78E661A4C12311E as octet string;
-    };
-   };
- };
- seq {
-  O1.2.2.113549.1.1.5;
-  null;
- };
- 0x001FF3E90A0940B5E041ABC344FD1A3EC090912A2B32C713040599055834BD35D3AF6018DEB50B6E4B8B5093C6037A3D89AE5C821594BE4AE93E227F6A3705B2D7A312CF501EE4B7BF5456BCE83BEC64C3F08BF7EDE941D3AC21BB527C72DFCF7902B34C907BA3E697D437F79C32B6F9ABF4F3DC7CE937A241D159B7A7CFBE98D4118C232AD845697E8D362F89FBD6C6CCF415B0656C092F5A112621D04D03A86F7708BABEF6E901C5418834D9242EC7B3BEB78AA5A7573BB4B14F8BE69718EBCCA1735BF67AA1A7C86FB09FB989AE1F3C7C9BA6353F0A02690944DE80DD625618D3B2FF6913C8775772045CF4E42FA4FF55E94D999C2C40EA6F9162FD98E8A77B as bitstring;
+seq {
+ seq {
+  [0]
+   2L;
+  10325242381392012215542285357594123655848209L;
+  seq {
+   O1.2.2.113549.1.1.5;
+   null;
+  };
+  seq {
+   set {
+    seq {
+     O2.5.10;
+     p"AlphaSSL";
+    };
+   };
+   set {
+    seq {
+     O2.5.3;
+     p"AlphaSSL CA - G2";
+    };
+   };
+  };
+  seq {
+   "130602172755Z" as utc date;
+   "170602172755Z" as utc date;
+  };
+  seq {
+   set {
+    seq {
+     O2.5.11;
+     p"Domain Control Validated";
+    };
+   };
+   set {
+    seq {
+     O2.5.3;
+     t"*.ht.vc";
+    };
+   };
+  };
+  seq {
+   seq {
+    O1.2.2.113549.1.1.1;
+    null;
+   };
+   0x003082010A0282010100C697C088C630A57A0C68DA22F631579C9B2780BBCDB9D98177BF6D1177BE9A141418CBBB38C490740D17732CDF4E34F1B4C1973142F5DA7EEDB676B6D19D784FD20F3127AA647EB7DC8863BF9F0002BD689829A836B1682B9D05AFA573544662FE7EA0D4D8ADBFF51ACC3FB722E54B52F93826985DD607F0CB0C1EFF43E2A9ADBBB1CA83A0334FBA764C1ECAD9A2C486F247909B98925776F9EE5D22776FEBA3EE1186D213C4501C900962D5228EDFEB518BF73E66B945BC761345CE9259AD271BB3E3251D0A13FDCA94BF7D603703002087D875B249035ACF961779C67C466ED1C467D9E1C9647B8A720C3A2A6EC6E4456FADA9D728ED54B3F958DB21B34DD10203010001 as bitstring;
+  };
+  [3]
+   seq {
+    seq {
+     O2.5.15;
+     true;
+     0x030205A0 as octet string;
+    };
+    seq {
+     O2.5.32;
+     0x3040303E060667810C0102013034303206082B06010505070201162668747470733A2F2F7777772E676C6F62616C7369676E2E636F6D2F7265706F7369746F72792F as octet string;
+    };
+    seq {
+     O2.5.17;
+     0x301082072A2E68742E7663820568742E7663 as octet string;
+    };
+    seq {
+     O2.5.19;
+     0x3000 as octet string;
+    };
+    seq {
+     O2.5.37;
+     0x301406082B0601050507030106082B06010505070302 as octet string;
+    };
+    seq {
+     O2.5.31;
+     0x3031302FA02DA02B8629687474703A2F2F63726C322E616C70686173736C2E636F6D2F67732F6773616C70686167322E63726C as octet string;
+    };
+    seq {
+     O1.3.1.5.5.7.1.1;
+     0x3071303C06082B060105050730028630687474703A2F2F736563757265322E616C70686173736C2E636F6D2F6361636572742F6773616C70686167322E637274303106082B060105050730018625687474703A2F2F6F637370322E676C6F62616C7369676E2E636F6D2F6773616C7068616732 as octet string;
+    };
+    seq {
+     O2.5.14;
+     0x0414494EBE972A9FDD69CE7583FE402AC1A3F6F70B8E as octet string;
+    };
+    seq {
+     O2.5.35;
+     0x3016801414EA1955F00E0D32C61F7433B78E661A4C12311E as octet string;
+    };
+   };
+ };
+ seq {
+  O1.2.2.113549.1.1.5;
+  null;
+ };
+ 0x001FF3E90A0940B5E041ABC344FD1A3EC090912A2B32C713040599055834BD35D3AF6018DEB50B6E4B8B5093C6037A3D89AE5C821594BE4AE93E227F6A3705B2D7A312CF501EE4B7BF5456BCE83BEC64C3F08BF7EDE941D3AC21BB527C72DFCF7902B34C907BA3E697D437F79C32B6F9ABF4F3DC7CE937A241D159B7A7CFBE98D4118C232AD845697E8D362F89FBD6C6CCF415B0656C092F5A112621D04D03A86F7708BABEF6E901C5418834D9242EC7B3BEB78AA5A7573BB4B14F8BE69718EBCCA1735BF67AA1A7C86FB09FB989AE1F3C7C9BA6353F0A02690944DE80DD625618D3B2FF6913C8775772045CF4E42FA4FF55E94D999C2C40EA6F9162FD98E8A77B as bitstring;
}
\ No newline at end of file
diff --git a/src/mipki/examples/sample.asntpl b/src/mipki/examples/sample.asntpl
index 42dfeb4..9c3418a 100644
--- a/src/mipki/examples/sample.asntpl
+++ b/src/mipki/examples/sample.asntpl
@@ -1,30 +1,30 @@
-seq {
- seq {
-  # Version
-  [0] optional (0L) version : int [0L, 2L];
-
-  [1] optional (2L) junk : int;
-
-  # Serial Number
-  serial : int;
-
-  # Signature Algorithm
-  seq {
-   sigalgid : oid;
-   defined by<sigalgid> {
-    O1.2.3.4:
-     null
-
-    default:
-     null
-   };
-  };
-
-  [3] optional defined by<version> {
-   2L:
-    seq {
-     type: oid;
-    }
-  };
- };
-}
+seq {
+ seq {
+  # Version
+  [0] optional (0L) version : int [0L, 2L];
+
+  [1] optional (2L) junk : int;
+
+  # Serial Number
+  serial : int;
+
+  # Signature Algorithm
+  seq {
+   sigalgid : oid;
+   defined by<sigalgid> {
+    O1.2.3.4:
+     null
+
+    default:
+     null
+   };
+  };
+
+  [3] optional defined by<version> {
+   2L:
+    seq {
+     type: oid;
+    }
+  };
+ };
+}
diff --git a/src/mipki/examples/sig.asn b/src/mipki/examples/sig.asn
index c6a643b..87550c9 100644
--- a/src/mipki/examples/sig.asn
+++ b/src/mipki/examples/sig.asn
@@ -1,9 +1,9 @@
-seq {
- seq {
-  O2.16.840.1.101.3.4.2.1;
-  seq {
-   "Hello Firefox, this is a nice library you have here but please be careful with X.509 signature encoding - the optional parameters can be a real problem. What if this message was valid by luck?";
-  };
- };
- 0x51C220666205376F21C589D3ED6603C7B98394F55C2B44B22597A2138BBE4244;
-}
+seq {
+ seq {
+  O2.16.840.1.101.3.4.2.1;
+  seq {
+   "Hello Firefox, this is a nice library you have here but please be careful with X.509 signature encoding - the optional parameters can be a real problem. What if this message was valid by luck?";
+  };
+ };
+ 0x51C220666205376F21C589D3ED6603C7B98394F55C2B44B22597A2138BBE4244;
+}
diff --git a/src/mipki/examples/test.asn b/src/mipki/examples/test.asn
index b105fbe..5e77201 100644
--- a/src/mipki/examples/test.asn
+++ b/src/mipki/examples/test.asn
@@ -1,20 +1,20 @@
-seq {
- seq {
-  # Version
-  [0] 2L;
-
-  # Serial Number
-  1234567890L;
-
-  # Signature Algorithm
-  seq {
-   O1.2.3.4;
-   null;
-  };
-
-  # Extensions
-  [3] seq {
-   O1.2.200.5;
-  };
- };
-}
+seq {
+ seq {
+  # Version
+  [0] 2L;
+
+  # Serial Number
+  1234567890L;
+
+  # Signature Algorithm
+  seq {
+   O1.2.3.4;
+   null;
+  };
+
+  # Extensions
+  [3] seq {
+   O1.2.200.5;
+  };
+ };
+}
diff --git a/src/mipki/examples/x509.tpl b/src/mipki/examples/x509.tpl
index cadbadc..eb6215c 100644
--- a/src/mipki/examples/x509.tpl
+++ b/src/mipki/examples/x509.tpl
@@ -1,198 +1,198 @@
-sigAlg ::=
- seq {
-   x: oid;
-   defined by<x> {
-    O1.2.840.113549.1.1.5:
-     null
-   };
-  };
-
-dirString ::=
- choice {
-  x : teletex;
-  x : printable;
-  x : universal;
-  x : utf8;
-  x : bmp;
- };
-
-RDN ::=
- set of<x> (1):
-  seq {
-   type : oid;
-   $dirString<x=value>;
-  };
-
-x500 ::=
- # Can be empty
- seq of<x> (0):
-  $RDN<x=attributes>;
-
-generalName ::=
- choice {
-  [1]* email : ascii;
-  [2]* dns : ascii;
-  [4]* $x500<x=dirName>;
-  [6]* uri : ascii;
-  [7]* ip : octet string;
-  [8]* registeredID : oid;
- };
-
-seq {
-
- # tbsCertificate
- seq {
-  # Version
-  [0] optional (0L) version : int [0L, 2L];
-
-  # Serial Number
-  serial : int;
-
-  # Signature Algorithm
-  $sigAlg<x=sigAlgOid>;
-
-  # Issuer X500
-  $x500<x=issuer>;
-
-  # Validity Period
-  seq {
-   notBefore : utc date;
-   notAfter  : utc date;
-  };
-
-  # Subject X500
-  $x500<x=subject>;
-
-  # Public Key
-  seq {
-   # Public Key Algorithm
-   seq {
-    publicKeyAlg : oid;
-    defined by<publicKeyAlg> {
-     default: null
-    };
-   };
-
-   defined by<publicKeyAlg> {
-    # RSA with PKCS#1
-    O1.2.840.113549.1.1.1:
-     bitstring:
-      seq {
-       modulus : int;
-       exponent : int;
-      }
-   };
-  };
-
-  [3] optional defined by<version> {
-   # Extensions may only appear in V3 certificate
-   2L:
-    seq of<extensions> (1):
-     seq {
-      extOid : oid;
-      optional (false) extCritical : bool;
-      defined by<extOid> {
-
-       # Authority Information Access
-       O1.3.6.1.5.5.7.1.1:
-        octet string:
-         seq of<authorityInformation> (1):
-          seq {
-           # Only allow OCSP and CA-issuer
-           method : oid [O1.3.6.1.5.5.7.48.1, O1.3.6.1.5.5.7.48.2];
-           choice {
-            [4]* $x500<x=dirName>;
-            [6]* uri : ascii;
-           };
-          }
-
-       # Subject Key Identifier
-       O2.5.29.14:
-        octet string:
-         subjectKeyIdentifier : octet string
-
-       # Key Usage
-       O2.5.29.15:
-        octet string:
-         keyUsage : bitstring
-
-       # Subject Alternative Name
-       O2.5.29.17:
-        octet string:
-         seq of<subjectAltNames> (1):
-          $generalName
-
-       # Basic Constraints
-       O2.5.29.19:
-        octet string:
-         seq {
-          optional (false) isCA : bool;
-          optional pathLen : int;
-         }
-
-       # CRL Distribution Points
-       O2.5.29.31:
-        octet string:
-         seq of<crlDistributionPoints> (1):
-          seq {
-           [0] optional choice {
-             [0] choice {
-              [4]* $x500<x=dirName>;
-              [6]* uri : ascii;
-             };
-             [1] $RDN<x=relativetoCRLIssuer>;
-            };
-           [1] optional reasons : bitstring;
-           [2] optional seq of<crlIssuer> (1):
-            $generalName;
-          }
-
-       # Certificate Policies
-       O2.5.29.32:
-        octet string:
-         seq of<policyInfo> (1):
-          seq {
-           policyId : oid;
-           optional seq of<policyQualifiers> (1):
-            seq {
-             qualifierId : oid;
-             defined by<qualifierId> {
-              O1.3.6.1.5.5.7.2.1:
-               policyURL : ascii
-             };
-            };
-          }
-
-       # Authority Key Identifier
-       O2.5.29.35:
-        octet string:
-         seq {
-          [0]* optional authorityKeyIdentifier : octet string;
-          [1]* optional $x500<x=authorityIssuer>;
-          [2]* optional authoritySerialNumber : int;
-         }
-
-       # Extended Key Usage
-       O2.5.29.37:
-        octet string:
-         seq of<extendedKeyUsages> (1):
-          eku : oid
-
-       default:
-        defined by<extCritical> {
-         # Only allow non-critical unknown extensions
-         false:
-          extUnknown : octet string
-        }
-      };
-     }
-   };
- };
- # end tbsCertificate
-
- # Signature Algorithm
- $sigAlg<x=uSigAlg>;
-
- signature : bitstring;
-}
-
+sigAlg ::=
+ seq {
+   x: oid;
+   defined by<x> {
+    O1.2.840.113549.1.1.5:
+     null
+   };
+  };
+
+dirString ::=
+ choice {
+  x : teletex;
+  x : printable;
+  x : universal;
+  x : utf8;
+  x : bmp;
+ };
+
+RDN ::=
+ set of<x> (1):
+  seq {
+   type : oid;
+   $dirString<x=value>;
+  };
+
+x500 ::=
+ # Can be empty
+ seq of<x> (0):
+  $RDN<x=attributes>;
+
+generalName ::=
+ choice {
+  [1]* email : ascii;
+  [2]* dns : ascii;
+  [4]* $x500<x=dirName>;
+  [6]* uri : ascii;
+  [7]* ip : octet string;
+  [8]* registeredID : oid;
+ };
+
+seq {
+
+ # tbsCertificate
+ seq {
+  # Version
+  [0] optional (0L) version : int [0L, 2L];
+
+  # Serial Number
+  serial : int;
+
+  # Signature Algorithm
+  $sigAlg<x=sigAlgOid>;
+
+  # Issuer X500
+  $x500<x=issuer>;
+
+  # Validity Period
+  seq {
+   notBefore : utc date;
+   notAfter  : utc date;
+  };
+
+  # Subject X500
+  $x500<x=subject>;
+
+  # Public Key
+  seq {
+   # Public Key Algorithm
+   seq {
+    publicKeyAlg : oid;
+    defined by<publicKeyAlg> {
+     default: null
+    };
+   };
+
+   defined by<publicKeyAlg> {
+    # RSA with PKCS#1
+    O1.2.840.113549.1.1.1:
+     bitstring:
+      seq {
+       modulus : int;
+       exponent : int;
+      }
+   };
+  };
+
+  [3] optional defined by<version> {
+   # Extensions may only appear in V3 certificate
+   2L:
+    seq of<extensions> (1):
+     seq {
+      extOid : oid;
+      optional (false) extCritical : bool;
+      defined by<extOid> {
+
+       # Authority Information Access
+       O1.3.6.1.5.5.7.1.1:
+        octet string:
+         seq of<authorityInformation> (1):
+          seq {
+           # Only allow OCSP and CA-issuer
+           method : oid [O1.3.6.1.5.5.7.48.1, O1.3.6.1.5.5.7.48.2];
+           choice {
+            [4]* $x500<x=dirName>;
+            [6]* uri : ascii;
+           };
+          }
+
+       # Subject Key Identifier
+       O2.5.29.14:
+        octet string:
+         subjectKeyIdentifier : octet string
+
+       # Key Usage
+       O2.5.29.15:
+        octet string:
+         keyUsage : bitstring
+
+       # Subject Alternative Name
+       O2.5.29.17:
+        octet string:
+         seq of<subjectAltNames> (1):
+          $generalName
+
+       # Basic Constraints
+       O2.5.29.19:
+        octet string:
+         seq {
+          optional (false) isCA : bool;
+          optional pathLen : int;
+         }
+
+       # CRL Distribution Points
+       O2.5.29.31:
+        octet string:
+         seq of<crlDistributionPoints> (1):
+          seq {
+           [0] optional choice {
+             [0] choice {
+              [4]* $x500<x=dirName>;
+              [6]* uri : ascii;
+             };
+             [1] $RDN<x=relativetoCRLIssuer>;
+            };
+           [1] optional reasons : bitstring;
+           [2] optional seq of<crlIssuer> (1):
+            $generalName;
+          }
+
+       # Certificate Policies
+       O2.5.29.32:
+        octet string:
+         seq of<policyInfo> (1):
+          seq {
+           policyId : oid;
+           optional seq of<policyQualifiers> (1):
+            seq {
+             qualifierId : oid;
+             defined by<qualifierId> {
+              O1.3.6.1.5.5.7.2.1:
+               policyURL : ascii
+             };
+            };
+          }
+
+       # Authority Key Identifier
+       O2.5.29.35:
+        octet string:
+         seq {
+          [0]* optional authorityKeyIdentifier : octet string;
+          [1]* optional $x500<x=authorityIssuer>;
+          [2]* optional authoritySerialNumber : int;
+         }
+
+       # Extended Key Usage
+       O2.5.29.37:
+        octet string:
+         seq of<extendedKeyUsages> (1):
+          eku : oid
+
+       default:
+        defined by<extCritical> {
+         # Only allow non-critical unknown extensions
+         false:
+          extUnknown : octet string
+        }
+      };
+     }
+   };
+ };
+ # end tbsCertificate
+
+ # Signature Algorithm
+ $sigAlg<x=uSigAlg>;
+
+ signature : bitstring;
+}
+
diff --git a/src/mipki/examples/xx b/src/mipki/examples/xx
index e131625..be92bf6 100644
--- a/src/mipki/examples/xx
+++ b/src/mipki/examples/xx
@@ -1,95 +1,95 @@
-seq {
- seq {
-  [0]
-   2L;
-  10325242381392012215542285357594123655848209L;
-  seq {
-   O1.2.2.113549.1.1.5;
-   null;
-  };
-  seq {
-   set {
-    seq {
-     O2.5.10;
-     p"AlphaSSL";
-    };
-   };
-   set {
-    seq {
-     O2.5.3;
-     p"AlphaSSL CA - G2";
-    };
-   };
-  };
-  seq {
-   "130602172755Z" as utc date;
-   "170602172755Z" as utc date;
-  };
-  seq {
-   set {
-    seq {
-     O2.5.11;
-     p"Domain Control Validated";
-    };
-   };
-   set {
-    seq {
-     O2.5.3;
-     t"*.ht.vc";
-    };
-   };
-  };
-  seq {
-   seq {
-    O1.2.2.113549.1.1.1;
-    null;
-   };
-   0x003082010A0282010100C697C088C630A57A0C68DA22F631579C9B2780BBCDB9D98177BF6D1177BE9A141418CBBB38C490740D17732CDF4E34F1B4C1973142F5DA7EEDB676B6D19D784FD20F3127AA647EB7DC8863BF9F0002BD689829A836B1682B9D05AFA573544662FE7EA0D4D8ADBFF51ACC3FB722E54B52F93826985DD607F0CB0C1EFF43E2A9ADBBB1CA83A0334FBA764C1ECAD9A2C486F247909B98925776F9EE5D22776FEBA3EE1186D213C4501C900962D5228EDFEB518BF73E66B945BC761345CE9259AD271BB3E3251D0A13FDCA94BF7D603703002087D875B249035ACF961779C67C466ED1C467D9E1C9647B8A720C3A2A6EC6E4456FADA9D728ED54B3F958DB21B34DD10203010001 as bitstring;
-  };
-  [3]
-   seq {
-    seq {
-     O2.5.15;
-     true;
-     0x030205A0 as octet string;
-    };
-    seq {
-     O2.5.32;
-     0x3040303E060667810C0102013034303206082B06010505070201162668747470733A2F2F7777772E676C6F62616C7369676E2E636F6D2F7265706F7369746F72792F as octet string;
-    };
-    seq {
-     O2.5.17;
-     0x301082072A2E68742E7663820568742E7663 as octet string;
-    };
-    seq {
-     O2.5.19;
-     0x3000 as octet string;
-    };
-    seq {
-     O2.5.37;
-     0x301406082B0601050507030106082B06010505070302 as octet string;
-    };
-    seq {
-     O2.5.31;
-     0x3031302FA02DA02B8629687474703A2F2F63726C322E616C70686173736C2E636F6D2F67732F6773616C70686167322E63726C as octet string;
-    };
-    seq {
-     O1.3.1.5.5.7.1.1;
-     0x3071303C06082B060105050730028630687474703A2F2F736563757265322E616C70686173736C2E636F6D2F6361636572742F6773616C70686167322E637274303106082B060105050730018625687474703A2F2F6F637370322E676C6F62616C7369676E2E636F6D2F6773616C7068616732 as octet string;
-    };
-    seq {
-     O2.5.14;
-     0x0414494EBE972A9FDD69CE7583FE402AC1A3F6F70B8E as octet string;
-    };
-    seq {
-     O2.5.35;
-     0x3016801414EA1955F00E0D32C61F7433B78E661A4C12311E as octet string;
-    };
-   };
- };
- seq {
-  O1.2.2.113549.1.1.5;
-  null;
- };
- 0x001FF3E90A0940B5E041ABC344FD1A3EC090912A2B32C713040599055834BD35D3AF6018DEB50B6E4B8B5093C6037A3D89AE5C821594BE4AE93E227F6A3705B2D7A312CF501EE4B7BF5456BCE83BEC64C3F08BF7EDE941D3AC21BB527C72DFCF7902B34C907BA3E697D437F79C32B6F9ABF4F3DC7CE937A241D159B7A7CFBE98D4118C232AD845697E8D362F89FBD6C6CCF415B0656C092F5A112621D04D03A86F7708BABEF6E901C5418834D9242EC7B3BEB78AA5A7573BB4B14F8BE69718EBCCA1735BF67AA1A7C86FB09FB989AE1F3C7C9BA6353F0A02690944DE80DD625618D3B2FF6913C8775772045CF4E42FA4FF55E94D999C2C40EA6F9162FD98E8A77B as bitstring;
+seq {
+ seq {
+  [0]
+   2L;
+  10325242381392012215542285357594123655848209L;
+  seq {
+   O1.2.2.113549.1.1.5;
+   null;
+  };
+  seq {
+   set {
+    seq {
+     O2.5.10;
+     p"AlphaSSL";
+    };
+   };
+   set {
+    seq {
+     O2.5.3;
+     p"AlphaSSL CA - G2";
+    };
+   };
+  };
+  seq {
+   "130602172755Z" as utc date;
+   "170602172755Z" as utc date;
+  };
+  seq {
+   set {
+    seq {
+     O2.5.11;
+     p"Domain Control Validated";
+    };
+   };
+   set {
+    seq {
+     O2.5.3;
+     t"*.ht.vc";
+    };
+   };
+  };
+  seq {
+   seq {
+    O1.2.2.113549.1.1.1;
+    null;
+   };
+   0x003082010A0282010100C697C088C630A57A0C68DA22F631579C9B2780BBCDB9D98177BF6D1177BE9A141418CBBB38C490740D17732CDF4E34F1B4C1973142F5DA7EEDB676B6D19D784FD20F3127AA647EB7DC8863BF9F0002BD689829A836B1682B9D05AFA573544662FE7EA0D4D8ADBFF51ACC3FB722E54B52F93826985DD607F0CB0C1EFF43E2A9ADBBB1CA83A0334FBA764C1ECAD9A2C486F247909B98925776F9EE5D22776FEBA3EE1186D213C4501C900962D5228EDFEB518BF73E66B945BC761345CE9259AD271BB3E3251D0A13FDCA94BF7D603703002087D875B249035ACF961779C67C466ED1C467D9E1C9647B8A720C3A2A6EC6E4456FADA9D728ED54B3F958DB21B34DD10203010001 as bitstring;
+  };
+  [3]
+   seq {
+    seq {
+     O2.5.15;
+     true;
+     0x030205A0 as octet string;
+    };
+    seq {
+     O2.5.32;
+     0x3040303E060667810C0102013034303206082B06010505070201162668747470733A2F2F7777772E676C6F62616C7369676E2E636F6D2F7265706F7369746F72792F as octet string;
+    };
+    seq {
+     O2.5.17;
+     0x301082072A2E68742E7663820568742E7663 as octet string;
+    };
+    seq {
+     O2.5.19;
+     0x3000 as octet string;
+    };
+    seq {
+     O2.5.37;
+     0x301406082B0601050507030106082B06010505070302 as octet string;
+    };
+    seq {
+     O2.5.31;
+     0x3031302FA02DA02B8629687474703A2F2F63726C322E616C70686173736C2E636F6D2F67732F6773616C70686167322E63726C as octet string;
+    };
+    seq {
+     O1.3.1.5.5.7.1.1;
+     0x3071303C06082B060105050730028630687474703A2F2F736563757265322E616C70686173736C2E636F6D2F6361636572742F6773616C70686167322E637274303106082B060105050730018625687474703A2F2F6F637370322E676C6F62616C7369676E2E636F6D2F6773616C7068616732 as octet string;
+    };
+    seq {
+     O2.5.14;
+     0x0414494EBE972A9FDD69CE7583FE402AC1A3F6F70B8E as octet string;
+    };
+    seq {
+     O2.5.35;
+     0x3016801414EA1955F00E0D32C61F7433B78E661A4C12311E as octet string;
+    };
+   };
+ };
+ seq {
+  O1.2.2.113549.1.1.5;
+  null;
+ };
+ 0x001FF3E90A0940B5E041ABC344FD1A3EC090912A2B32C713040599055834BD35D3AF6018DEB50B6E4B8B5093C6037A3D89AE5C821594BE4AE93E227F6A3705B2D7A312CF501EE4B7BF5456BCE83BEC64C3F08BF7EDE941D3AC21BB527C72DFCF7902B34C907BA3E697D437F79C32B6F9ABF4F3DC7CE937A241D159B7A7CFBE98D4118C232AD845697E8D362F89FBD6C6CCF415B0656C092F5A112621D04D03A86F7708BABEF6E901C5418834D9242EC7B3BEB78AA5A7573BB4B14F8BE69718EBCCA1735BF67AA1A7C86FB09FB989AE1F3C7C9BA6353F0A02690944DE80DD625618D3B2FF6913C8775772045CF4E42FA4FF55E94D999C2C40EA6F9162FD98E8A77B as bitstring;
}
\ No newline at end of file
diff --git a/src/mipki/packages.config b/src/mipki/packages.config
index 0a7183c..341f6f8 100644
--- a/src/mipki/packages.config
+++ b/src/mipki/packages.config
@@ -1,5 +1,5 @@
-﻿<?xml version="1.0" encoding="utf-8"?>
-<packages>
-  <package id="FsLexYacc" version="6.0.3" targetFramework="net45" />
-  <package id="FsLexYacc.Runtime" version="6.0.2" targetFramework="net45" />
+﻿<?xml version="1.0" encoding="utf-8"?>
+<packages>
+  <package id="FsLexYacc" version="6.0.3" targetFramework="net45" />
+  <package id="FsLexYacc.Runtime" version="6.0.2" targetFramework="net45" />
</packages>
\ No newline at end of file
diff --git a/src/mipki/x509.tpl b/src/mipki/x509.tpl
index cadbadc..eb6215c 100644
--- a/src/mipki/x509.tpl
+++ b/src/mipki/x509.tpl
@@ -1,198 +1,198 @@
-sigAlg ::=
- seq {
-   x: oid;
-   defined by<x> {
-    O1.2.840.113549.1.1.5:
-     null
-   };
-  };
-
-dirString ::=
- choice {
-  x : teletex;
-  x : printable;
-  x : universal;
-  x : utf8;
-  x : bmp;
- };
-
-RDN ::=
- set of<x> (1):
-  seq {
-   type : oid;
-   $dirString<x=value>;
-  };
-
-x500 ::=
- # Can be empty
- seq of<x> (0):
-  $RDN<x=attributes>;
-
-generalName ::=
- choice {
-  [1]* email : ascii;
-  [2]* dns : ascii;
-  [4]* $x500<x=dirName>;
-  [6]* uri : ascii;
-  [7]* ip : octet string;
-  [8]* registeredID : oid;
- };
-
-seq {
-
- # tbsCertificate
- seq {
-  # Version
-  [0] optional (0L) version : int [0L, 2L];
-
-  # Serial Number
-  serial : int;
-
-  # Signature Algorithm
-  $sigAlg<x=sigAlgOid>;
-
-  # Issuer X500
-  $x500<x=issuer>;
-
-  # Validity Period
-  seq {
-   notBefore : utc date;
-   notAfter  : utc date;
-  };
-
-  # Subject X500
-  $x500<x=subject>;
-
-  # Public Key
-  seq {
-   # Public Key Algorithm
-   seq {
-    publicKeyAlg : oid;
-    defined by<publicKeyAlg> {
-     default: null
-    };
-   };
-
-   defined by<publicKeyAlg> {
-    # RSA with PKCS#1
-    O1.2.840.113549.1.1.1:
-     bitstring:
-      seq {
-       modulus : int;
-       exponent : int;
-      }
-   };
-  };
-
-  [3] optional defined by<version> {
-   # Extensions may only appear in V3 certificate
-   2L:
-    seq of<extensions> (1):
-     seq {
-      extOid : oid;
-      optional (false) extCritical : bool;
-      defined by<extOid> {
-
-       # Authority Information Access
-       O1.3.6.1.5.5.7.1.1:
-        octet string:
-         seq of<authorityInformation> (1):
-          seq {
-           # Only allow OCSP and CA-issuer
-           method : oid [O1.3.6.1.5.5.7.48.1, O1.3.6.1.5.5.7.48.2];
-           choice {
-            [4]* $x500<x=dirName>;
-            [6]* uri : ascii;
-           };
-          }
-
-       # Subject Key Identifier
-       O2.5.29.14:
-        octet string:
-         subjectKeyIdentifier : octet string
-
-       # Key Usage
-       O2.5.29.15:
-        octet string:
-         keyUsage : bitstring
-
-       # Subject Alternative Name
-       O2.5.29.17:
-        octet string:
-         seq of<subjectAltNames> (1):
-          $generalName
-
-       # Basic Constraints
-       O2.5.29.19:
-        octet string:
-         seq {
-          optional (false) isCA : bool;
-          optional pathLen : int;
-         }
-
-       # CRL Distribution Points
-       O2.5.29.31:
-        octet string:
-         seq of<crlDistributionPoints> (1):
-          seq {
-           [0] optional choice {
-             [0] choice {
-              [4]* $x500<x=dirName>;
-              [6]* uri : ascii;
-             };
-             [1] $RDN<x=relativetoCRLIssuer>;
-            };
-           [1] optional reasons : bitstring;
-           [2] optional seq of<crlIssuer> (1):
-            $generalName;
-          }
-
-       # Certificate Policies
-       O2.5.29.32:
-        octet string:
-         seq of<policyInfo> (1):
-          seq {
-           policyId : oid;
-           optional seq of<policyQualifiers> (1):
-            seq {
-             qualifierId : oid;
-             defined by<qualifierId> {
-              O1.3.6.1.5.5.7.2.1:
-               policyURL : ascii
-             };
-            };
-          }
-
-       # Authority Key Identifier
-       O2.5.29.35:
-        octet string:
-         seq {
-          [0]* optional authorityKeyIdentifier : octet string;
-          [1]* optional $x500<x=authorityIssuer>;
-          [2]* optional authoritySerialNumber : int;
-         }
-
-       # Extended Key Usage
-       O2.5.29.37:
-        octet string:
-         seq of<extendedKeyUsages> (1):
-          eku : oid
-
-       default:
-        defined by<extCritical> {
-         # Only allow non-critical unknown extensions
-         false:
-          extUnknown : octet string
-        }
-      };
-     }
-   };
- };
- # end tbsCertificate
-
- # Signature Algorithm
- $sigAlg<x=uSigAlg>;
-
- signature : bitstring;
-}
-
+sigAlg ::=
+ seq {
+   x: oid;
+   defined by<x> {
+    O1.2.840.113549.1.1.5:
+     null
+   };
+  };
+
+dirString ::=
+ choice {
+  x : teletex;
+  x : printable;
+  x : universal;
+  x : utf8;
+  x : bmp;
+ };
+
+RDN ::=
+ set of<x> (1):
+  seq {
+   type : oid;
+   $dirString<x=value>;
+  };
+
+x500 ::=
+ # Can be empty
+ seq of<x> (0):
+  $RDN<x=attributes>;
+
+generalName ::=
+ choice {
+  [1]* email : ascii;
+  [2]* dns : ascii;
+  [4]* $x500<x=dirName>;
+  [6]* uri : ascii;
+  [7]* ip : octet string;
+  [8]* registeredID : oid;
+ };
+
+seq {
+
+ # tbsCertificate
+ seq {
+  # Version
+  [0] optional (0L) version : int [0L, 2L];
+
+  # Serial Number
+  serial : int;
+
+  # Signature Algorithm
+  $sigAlg<x=sigAlgOid>;
+
+  # Issuer X500
+  $x500<x=issuer>;
+
+  # Validity Period
+  seq {
+   notBefore : utc date;
+   notAfter  : utc date;
+  };
+
+  # Subject X500
+  $x500<x=subject>;
+
+  # Public Key
+  seq {
+   # Public Key Algorithm
+   seq {
+    publicKeyAlg : oid;
+    defined by<publicKeyAlg> {
+     default: null
+    };
+   };
+
+   defined by<publicKeyAlg> {
+    # RSA with PKCS#1
+    O1.2.840.113549.1.1.1:
+     bitstring:
+      seq {
+       modulus : int;
+       exponent : int;
+      }
+   };
+  };
+
+  [3] optional defined by<version> {
+   # Extensions may only appear in V3 certificate
+   2L:
+    seq of<extensions> (1):
+     seq {
+      extOid : oid;
+      optional (false) extCritical : bool;
+      defined by<extOid> {
+
+       # Authority Information Access
+       O1.3.6.1.5.5.7.1.1:
+        octet string:
+         seq of<authorityInformation> (1):
+          seq {
+           # Only allow OCSP and CA-issuer
+           method : oid [O1.3.6.1.5.5.7.48.1, O1.3.6.1.5.5.7.48.2];
+           choice {
+            [4]* $x500<x=dirName>;
+            [6]* uri : ascii;
+           };
+          }
+
+       # Subject Key Identifier
+       O2.5.29.14:
+        octet string:
+         subjectKeyIdentifier : octet string
+
+       # Key Usage
+       O2.5.29.15:
+        octet string:
+         keyUsage : bitstring
+
+       # Subject Alternative Name
+       O2.5.29.17:
+        octet string:
+         seq of<subjectAltNames> (1):
+          $generalName
+
+       # Basic Constraints
+       O2.5.29.19:
+        octet string:
+         seq {
+          optional (false) isCA : bool;
+          optional pathLen : int;
+         }
+
+       # CRL Distribution Points
+       O2.5.29.31:
+        octet string:
+         seq of<crlDistributionPoints> (1):
+          seq {
+           [0] optional choice {
+             [0] choice {
+              [4]* $x500<x=dirName>;
+              [6]* uri : ascii;
+             };
+             [1] $RDN<x=relativetoCRLIssuer>;
+            };
+           [1] optional reasons : bitstring;
+           [2] optional seq of<crlIssuer> (1):
+            $generalName;
+          }
+
+       # Certificate Policies
+       O2.5.29.32:
+        octet string:
+         seq of<policyInfo> (1):
+          seq {
+           policyId : oid;
+           optional seq of<policyQualifiers> (1):
+            seq {
+             qualifierId : oid;
+             defined by<qualifierId> {
+              O1.3.6.1.5.5.7.2.1:
+               policyURL : ascii
+             };
+            };
+          }
+
+       # Authority Key Identifier
+       O2.5.29.35:
+        octet string:
+         seq {
+          [0]* optional authorityKeyIdentifier : octet string;
+          [1]* optional $x500<x=authorityIssuer>;
+          [2]* optional authoritySerialNumber : int;
+         }
+
+       # Extended Key Usage
+       O2.5.29.37:
+        octet string:
+         seq of<extendedKeyUsages> (1):
+          eku : oid
+
+       default:
+        defined by<extCritical> {
+         # Only allow non-critical unknown extensions
+         false:
+          extUnknown : octet string
+        }
+      };
+     }
+   };
+ };
+ # end tbsCertificate
+
+ # Signature Algorithm
+ $sigAlg<x=uSigAlg>;
+
+ signature : bitstring;
+}
+
diff --git a/src/tls/.gitignore b/src/tls/.gitignore
index 764bf55..31f9164 100644
--- a/src/tls/.gitignore
+++ b/src/tls/.gitignore
@@ -1,13 +1,13 @@
-*.cm*
-*.ml
-!test/*.ml
-*.o
-*.a
-*~
-.*
-camlprog.exe
-test.out
-client.out
-server.out
-mitls.exe
-IdealFlags.fst
+*.cm*
+*.ml
+!test/*.ml
+*.o
+*.a
+*~
+.*
+camlprog.exe
+test.out
+client.out
+server.out
+mitls.exe
+IdealFlags.fst
diff --git a/src/tls/artifact.sh b/src/tls/artifact.sh
index f1f0503..bde2f48 100644
--- a/src/tls/artifact.sh
+++ b/src/tls/artifact.sh
@@ -1,36 +1,36 @@
- #!/bin/bash
-set -e
-# Any subsequent(*) commands which fail will cause the shell script to exit immediately
-
-wd=`pwd`
-
-mkdir -p artifact
-# Cedric 15-10-12 mkdir -p artifact/injectivity_proof
-
-make clean pp
-
-echo
-echo '---copying mitls---'
-echo
-  cp -v TLSError.fst TLSConstants.fst Nonce.fst \
-RSAKey.fst DHGroup.p.fst ECGroup.fst CommonDH.fst PMS.p.fst \
-HASH.fst HMAC.fst Sig.p.fst UntrustedCert.fsti Cert.fsti \
-TLSInfo.fst Range.p.fst DataStream.fst StatefulPlain.fsti LHAEPlain.fst \
-AEAD_GCM.fst StatefulLHAE.fst artifact; \
-# Cedric 15-10-12   cp -v ../fstar_proof/* artifact/injectivity_proof;
-
-echo
-echo '---removing comments---'
-echo
-  pushd artifact; $wd/../../scripts/anonymize -m release -B *.fst *.fsti; popd
-
-echo
-echo '---testing---'
-echo
-make -C artifact
-
-
-echo
-echo '---packaging---'
-echo
-tar cvzf miTLS-POPL2016.tgz artifact
+ #!/bin/bash
+set -e
+# Any subsequent(*) commands which fail will cause the shell script to exit immediately
+
+wd=`pwd`
+
+mkdir -p artifact
+# Cedric 15-10-12 mkdir -p artifact/injectivity_proof
+
+make clean pp
+
+echo
+echo '---copying mitls---'
+echo
+  cp -v TLSError.fst TLSConstants.fst Nonce.fst \
+RSAKey.fst DHGroup.p.fst ECGroup.fst CommonDH.fst PMS.p.fst \
+HASH.fst HMAC.fst Sig.p.fst UntrustedCert.fsti Cert.fsti \
+TLSInfo.fst Range.p.fst DataStream.fst StatefulPlain.fsti LHAEPlain.fst \
+AEAD_GCM.fst StatefulLHAE.fst artifact; \
+# Cedric 15-10-12   cp -v ../fstar_proof/* artifact/injectivity_proof;
+
+echo
+echo '---removing comments---'
+echo
+  pushd artifact; $wd/../../scripts/anonymize -m release -B *.fst *.fsti; popd
+  
+echo
+echo '---testing---'
+echo  
+make -C artifact
+
+
+echo
+echo '---packaging---'
+echo
+tar cvzf miTLS-POPL2016.tgz artifact
diff --git a/src/tls/artifact/README.txt b/src/tls/artifact/README.txt
index 89f40b4..959cf47 100644
--- a/src/tls/artifact/README.txt
+++ b/src/tls/artifact/README.txt
@@ -1,36 +1,36 @@
-This snapshot includes 8 verified modules (out of 45) of the miTLS
-project, plus various supporting files.
-
-TLSError.fst: error messages returned by miTLS
-
-TLSConstants.fst : constants used by TLS, and their wire formats
-
-Nonce.fst: random nonces used as unique identifiers, including the
-           modelling of collision-avoidance.
-
-TLSInfo.fst : indexing for keys and sessions, plus user-customizable
-              protocol behavior, which captures partially specified
-              parts (MAY) of the RFC.
-
-Range.fst: reasoning about the range of lengths of plaintext
-           bytestrings; this matter for modelling lenght-hiding
-           encryption mechanisms in TLS.
-
-StatefulPlain.fsti: an interface hiding TLS formats for encrypted payloads.
-
-LHAEPlain.fst: an implementation of encrypted payloads for
-               authenticated encryption based on StatefulPlain.fsti
-
-AEAD_GCM.fst : authenticated encryption with additional data
-               implemented using GCM
-
-StatefulLHAE.fst : part of TLS record protocol implementing stateful
-                   length-hiding AEAD, dealing with sequence numbers
-
-These modules concern the record layer; the most interesting are
-AEAD_GCM and StatefulLHAE, showing our application of hyperheaps. The
-others are simpler but still illustrate the re-use of code in
-specifications and implementations.
-
-We believe these modules are fairly self-contained and can be read
-without the need to understand the full miTLS stack.
+This snapshot includes 8 verified modules (out of 45) of the miTLS
+project, plus various supporting files.
+
+TLSError.fst: error messages returned by miTLS 
+
+TLSConstants.fst : constants used by TLS, and their wire formats
+
+Nonce.fst: random nonces used as unique identifiers, including the
+           modelling of collision-avoidance.
+
+TLSInfo.fst : indexing for keys and sessions, plus user-customizable
+              protocol behavior, which captures partially specified
+              parts (MAY) of the RFC.
+
+Range.fst: reasoning about the range of lengths of plaintext
+           bytestrings; this matter for modelling lenght-hiding
+           encryption mechanisms in TLS.
+
+StatefulPlain.fsti: an interface hiding TLS formats for encrypted payloads.
+
+LHAEPlain.fst: an implementation of encrypted payloads for
+               authenticated encryption based on StatefulPlain.fsti
+
+AEAD_GCM.fst : authenticated encryption with additional data
+               implemented using GCM
+
+StatefulLHAE.fst : part of TLS record protocol implementing stateful
+                   length-hiding AEAD, dealing with sequence numbers
+
+These modules concern the record layer; the most interesting are
+AEAD_GCM and StatefulLHAE, showing our application of hyperheaps. The
+others are simpler but still illustrate the re-use of code in
+specifications and implementations.
+
+We believe these modules are fairly self-contained and can be read
+without the need to understand the full miTLS stack.
diff --git a/src/tls/record-testvectors.txt b/src/tls/record-testvectors.txt
index 4c2fe21..0e58369 100644
--- a/src/tls/record-testvectors.txt
+++ b/src/tls/record-testvectors.txt
@@ -1,85 +1,85 @@
-TLS 1.2 GCM
------------
-
-Keys: {
- pv: '0303',
- alg: 'AES_128_GCM_SHA256',
- writeKey: '152300c2dc44c8f695d4fb1471791659',
- writeIv: 'b56bf932',
- writeSn: 1,
-}
-Plain: {
- type: '17',
- version: '0303',
- fragment: '474554202f20485454502f312e310d0a486f73743a20756e646566696e65640d0a0d0a'
-}
-Cipher: {
- type: '17',
- version: '0303',
- fragment: '0000000000000000ed3ca96c8bd2fbb376c2dc417f3ec249e8ab550dab1c421293f0e642a0c152b43a546a8b49b6128ee6e23454b7e580423ba985'
-}
-
-TLS 1.2 CBC
------------
-Keys: {
-  pv: '0303',
-  alg: 'AES_128_CBC_SHA_Fresh',
-  writeMacKey: '431ad4d620ea0c63bf9afc8124afcae6729593f1',
-  writeKey: 'e77f6871e1697b2286416f973aee9ff6',
-  writeIv: '00000000000000000000000000000000',
-  writeSn: 1
-}
-Plain: {
-  type: '17',
-  version: '0303',
-  fragment: '474554202f20485454502f312e310d0a486f73743a20756e646566696e65640d0a0d0a'
-}
-Cipher: {
-  type: '17',
-  version: '0303',
-  fragment: '0000000000000000000000000000000028cf3b38da8358b78aae63e5fcc334c1eac5278a283fa709cb274df85a2a7fa21b767111bc7f73f37cb2697dbb41f903dd2a3e4470767f3cc5e2db1a2e781213'
-}
-
-TLS 1.1 CBC
------------
-Keys: {
-  pv: '0302',
-  alg: 'AES_128_CBC_SHA_Fresh',
-  writeMacKey: '9b70f20ee0ce0fbfdaebe49eafb9d1849ea6ead9',
-  writeKey: 'b8cee0068720d6b1e8cfcde72a9d05ef',
-  writeIv: '00000000000000000000000000000000',
-  writeSn: 1
-}
-Plain: {
-  type: '17',
-  version: '0302',
-  fragment: '474554202f20485454502f312e310d0a486f73743a20756e646566696e65640d0a0d0a'
-}
-Cipher: {
-  type: '17',
-  version: '0302',
-  fragment: '00000000000000000000000000000000a9170f7000d17ab112d2731f1004e9d48d02c0166c9b379773823897bcd07acca3383647e946049567ed9aa6246b6349ae8b6a19f025e13162e666f2558989b3'
-}
-
-TLS 1.0 CBC
------------
-Keys: {
-  pv: '0301',
-  alg: 'AES_128_CBC_SHA_Stale',
-  writeMacKey: '8cf78fdbc3ec9fb5f23c75087bef200c7cf51156',
-  writeKey: 'cb132549f225655b31a4de916d40cbc4',
-  writeIv: 'f186c32f54a980456928835f5eaea80a',
-  writeSn: 1
-}
-Plain: {
-  type: '17',
-  version: '0301',
-  fragment: '474554202f20485454502f312e310d0a486f73743a20756e646566696e65640d0a0d0a'
-}
-Cipher: {
-  type: '17',
-  version: '0301',
-  fragment: '7a97798f705b65d11ea705ea6b84569ddcb9568b1f6f3dfebdbed3b1a1c8de89db79ec81feab25f3921000f682f31d47ddea4c30ce646d26f6e2b99c0ca37497'
-}
-
-
+TLS 1.2 GCM
+-----------
+
+Keys: {
+ pv: '0303',
+ alg: 'AES_128_GCM_SHA256',
+ writeKey: '152300c2dc44c8f695d4fb1471791659',
+ writeIv: 'b56bf932',
+ writeSn: 1,
+}
+Plain: {
+ type: '17',
+ version: '0303',
+ fragment: '474554202f20485454502f312e310d0a486f73743a20756e646566696e65640d0a0d0a'
+}
+Cipher: {
+ type: '17',
+ version: '0303',
+ fragment: '0000000000000000ed3ca96c8bd2fbb376c2dc417f3ec249e8ab550dab1c421293f0e642a0c152b43a546a8b49b6128ee6e23454b7e580423ba985'
+}
+
+TLS 1.2 CBC
+-----------
+Keys: {
+  pv: '0303',
+  alg: 'AES_128_CBC_SHA_Fresh',
+  writeMacKey: '431ad4d620ea0c63bf9afc8124afcae6729593f1',
+  writeKey: 'e77f6871e1697b2286416f973aee9ff6',
+  writeIv: '00000000000000000000000000000000',
+  writeSn: 1
+}
+Plain: {
+  type: '17',
+  version: '0303',
+  fragment: '474554202f20485454502f312e310d0a486f73743a20756e646566696e65640d0a0d0a'
+}
+Cipher: {
+  type: '17',
+  version: '0303',
+  fragment: '0000000000000000000000000000000028cf3b38da8358b78aae63e5fcc334c1eac5278a283fa709cb274df85a2a7fa21b767111bc7f73f37cb2697dbb41f903dd2a3e4470767f3cc5e2db1a2e781213'
+}
+    
+TLS 1.1 CBC
+-----------
+Keys: {
+  pv: '0302',
+  alg: 'AES_128_CBC_SHA_Fresh',
+  writeMacKey: '9b70f20ee0ce0fbfdaebe49eafb9d1849ea6ead9',
+  writeKey: 'b8cee0068720d6b1e8cfcde72a9d05ef',
+  writeIv: '00000000000000000000000000000000',
+  writeSn: 1
+}
+Plain: {
+  type: '17',
+  version: '0302',
+  fragment: '474554202f20485454502f312e310d0a486f73743a20756e646566696e65640d0a0d0a'
+}
+Cipher: {
+  type: '17',
+  version: '0302',
+  fragment: '00000000000000000000000000000000a9170f7000d17ab112d2731f1004e9d48d02c0166c9b379773823897bcd07acca3383647e946049567ed9aa6246b6349ae8b6a19f025e13162e666f2558989b3'
+}
+
+TLS 1.0 CBC
+-----------
+Keys: {
+  pv: '0301',
+  alg: 'AES_128_CBC_SHA_Stale',
+  writeMacKey: '8cf78fdbc3ec9fb5f23c75087bef200c7cf51156',
+  writeKey: 'cb132549f225655b31a4de916d40cbc4',
+  writeIv: 'f186c32f54a980456928835f5eaea80a',
+  writeSn: 1
+}
+Plain: {
+  type: '17',
+  version: '0301',
+  fragment: '474554202f20485454502f312e310d0a486f73743a20756e646566696e65640d0a0d0a'
+}
+Cipher: {
+  type: '17',
+  version: '0301',
+  fragment: '7a97798f705b65d11ea705ea6b84569ddcb9568b1f6f3dfebdbed3b1a1c8de89db79ec81feab25f3921000f682f31d47ddea4c30ce646d26f6e2b99c0ca37497'
+}
+    
+      
diff --git a/src/tls/traces/openssl-akamai.hex b/src/tls/traces/openssl-akamai.hex
index 3de1071..fe2d8cd 100644
--- a/src/tls/traces/openssl-akamai.hex
+++ b/src/tls/traces/openssl-akamai.hex
@@ -1,296 +1,296 @@
-01 00 01 35 03 03 ba d3 d2 33 fb c3 3c db 7c c8
-    8b fb 93 cc 5c 14 f8 37 01 df 38 81 ae ab 8f 78
-    78 c7 96 b0 0e 0b 00 00 b6 c0 30 c0 2c c0 28 c0
-    24 c0 14 c0 0a 00 a5 00 a3 00 a1 00 9f 00 6b 00
-    6a 00 69 00 68 00 39 00 38 00 37 00 36 00 88 00
-    87 00 86 00 85 c0 32 c0 2e c0 2a c0 26 c0 0f c0
-    05 00 9d 00 3d 00 35 00 84 c0 2f c0 2b c0 27 c0
-    23 c0 13 c0 09 00 a4 00 a2 00 a0 00 9e 00 67 00
-    40 00 3f 00 3e 00 33 00 32 00 31 00 30 00 9a 00
-    99 00 98 00 97 00 45 00 44 00 43 00 42 c0 31 c0
-    2d c0 29 c0 25 c0 0e c0 04 00 9c 00 3c 00 2f 00
-    96 00 41 00 07 c0 11 c0 07 c0 0c c0 02 00 05 00
-    04 c0 12 c0 08 00 16 00 13 00 10 00 0d c0 0d c0
-    03 00 0a 00 15 00 12 00 0f 00 0c 00 09 00 ff 02
-    01 00 00 55 00 0b 00 04 03 00 01 02 00 0a 00 1c
-    00 1a 00 17 00 19 00 1c 00 1b 00 18 00 1a 00 16
-    00 0e 00 0d 00 0b 00 0c 00 09 00 0a 00 23 00 00
-    00 0d 00 20 00 1e 06 01 06 02 06 03 05 01 05 02
-    05 03 04 01 04 02 04 03 03 01 03 02 03 03 02 01
-    02 02 02 03 00 0f 00 01 01
-02 00 00 39 03 03 56 79 37 77 59 69 03 ba b8 c0
-    48 f8 68 42 c2 de 26 ee 0a 02 45 9a 5f da d1 f0
-    62 fa 51 de a8 3a 00 c0 30 00 00 11 ff 01 00 01
-    00 00 0b 00 04 03 00 01 02 00 23 00 00
-0b 00 0c c2 00 0c bf 00 08 66 30 82 08 62 30 82
-    07 4a a0 03 02 01 02 02 10 55 74 f7 d3 1d 76 62
-    b5 1e 64 d1 de 1a ac e2 ac 30 0d 06 09 2a 86 48
-    86 f7 0d 01 01 0b 05 00 30 44 31 0b 30 09 06 03
-    55 04 06 13 02 55 53 31 16 30 14 06 03 55 04 0a
-    13 0d 47 65 6f 54 72 75 73 74 20 49 6e 63 2e 31
-    1d 30 1b 06 03 55 04 03 13 14 47 65 6f 54 72 75
-    73 74 20 53 53 4c 20 43 41 20 2d 20 47 33 30 1e
-    17 0d 31 35 31 32 30 38 30 30 30 30 30 30 5a 17
-    0d 31 37 30 33 30 38 32 33 35 39 35 39 5a 30 81
-    88 31 0b 30 09 06 03 55 04 06 13 02 55 53 31 16
-    30 14 06 03 55 04 08 13 0d 4d 61 73 73 61 63 68
-    75 73 65 74 74 73 31 12 30 10 06 03 55 04 07 14
-    09 43 61 6d 62 72 69 64 67 65 31 22 30 20 06 03
-    55 04 0a 14 19 41 6b 61 6d 61 69 20 54 65 63 68
-    6e 6f 6c 6f 67 69 65 73 2c 20 69 6e 63 2e 31 0c
-    30 0a 06 03 55 04 0b 14 03 45 49 53 31 1b 30 19
-    06 03 55 04 03 14 12 65 69 73 2d 61 61 6d 2e 61
-    6b 61 6d 61 69 2e 63 6f 6d 30 82 01 22 30 0d 06
-    09 2a 86 48 86 f7 0d 01 01 01 05 00 03 82 01 0f
-    00 30 82 01 0a 02 82 01 01 00 d8 a0 f3 b2 bb 68
-    15 ba 4e 74 f0 74 d9 82 89 88 11 f8 11 0b c0 8e
-    b3 0c 86 96 53 20 8f 48 e2 34 eb d1 f4 71 df 2e
-    6b c2 8d bc 69 ba 8b 6e 6c cc 47 0c 55 4d e6 5f
-    16 79 ac ba b2 5a 06 67 3c 8c 03 64 02 21 e2 c4
-    bc 07 ef b3 fe 85 b0 e1 03 ad ce 09 ef 23 4c d0
-    d9 ee 6f 67 20 14 db 8e 83 f4 a3 4f fb 45 ff 72
-    12 a4 ad 49 b0 ad 72 0d 62 7c 56 a7 1e ef 7e 2a
-    ee 95 2f b9 a8 f8 b6 bf 58 16 32 46 39 fa 7f 27
-    c8 c4 e4 4a c1 26 f6 0d 6b 6f 53 fe 4d d6 0e 3f
-    36 3e 74 6d 22 5d e4 09 af 3e 91 18 29 19 b8 c2
-    39 8e 16 dd 4e e6 62 8f 31 0c eb 7e 49 f4 db f7
-    97 3a d1 ae c6 b2 d1 43 fd 42 00 18 d1 69 86 28
-    4f b4 f9 5f da ba ba a8 45 ab 22 ed 98 e2 92 63
-    ee d2 75 f7 88 11 0e a1 d4 33 16 63 d6 52 0d 93
-    4f a1 e4 e9 5a 7e a2 c5 54 17 0a 8c df 59 3a b8
-    91 72 d6 af 7d ab 3b 9a 18 09 02 03 01 00 01 a3
-    82 05 09 30 82 05 05 30 82 03 80 06 03 55 1d 11
-    04 82 03 77 30 82 03 73 82 18 69 73 73 75 65 73
-    2e 64 65 70 6c 6f 79 2e 61 6b 61 6d 61 69 2e 63
-    6f 6d 82 1a 68 61 72 64 77 61 72 65 2e 64 65 70
-    6c 6f 79 2e 61 6b 61 6d 61 69 2e 63 6f 6d 82 18
-    77 68 6f 68 61 73 2e 64 65 70 6c 6f 79 2e 61 6b
-    61 6d 61 69 2e 63 6f 6d 82 13 63 6f 6e 74 61 63
-    74 73 2e 61 6b 61 6d 61 69 2e 63 6f 6d 82 0e 6f
-    73 78 2e 61 6b 61 6d 61 69 2e 63 6f 6d 82 17 77
-    68 6f 69 73 2e 64 65 70 6c 6f 79 2e 61 6b 61 6d
-    61 69 2e 63 6f 6d 82 14 64 70 2e 64 65 70 6c 6f
-    79 2e 61 6b 61 6d 61 69 2e 63 6f 6d 82 12 77 65
-    62 6d 61 69 6c 2e 61 6b 61 6d 61 69 2e 63 6f 6d
-    82 16 61 75 64 69 6f 62 72 69 64 67 65 2e 61 6b
-    61 6d 61 69 2e 63 6f 6d 82 17 6d 61 69 6c 69 6e
-    67 6c 69 73 74 73 2e 61 6b 61 6d 61 69 2e 63 6f
-    6d 82 19 67 6c 6f 62 61 6c 65 64 76 69 64 65 6f
-    73 2e 61 6b 61 6d 61 69 2e 63 6f 6d 82 10 61 6f
-    74 67 6f 2e 61 6b 61 6d 61 69 2e 63 6f 6d 82 0f
-    61 64 61 6d 2e 61 6b 61 6d 61 69 2e 63 6f 6d 82
-    12 69 64 70 2d 65 69 73 2e 61 6b 61 6d 61 69 2e
-    63 6f 6d 82 17 64 63 6d 61 70 2e 64 65 70 6c 6f
-    79 2e 61 6b 61 6d 61 69 2e 63 6f 6d 82 19 6d 65
-    74 72 69 63 73 2e 64 65 70 6c 6f 79 2e 61 6b 61
-    6d 61 69 2e 63 6f 6d 82 1b 6c 6f 67 69 73 74 69
-    63 73 2e 64 65 70 6c 6f 79 2e 61 6b 61 6d 61 69
-    2e 63 6f 6d 82 1d 6d 61 63 6f 73 78 2d 61 61 6d
-    2e 75 70 67 72 61 64 65 2e 61 6b 61 6d 61 69 2e
-    63 6f 6d 82 16 6f 73 78 2d 75 70 67 72 61 64 65
-    2e 61 6b 61 6d 61 69 2e 63 6f 6d 82 19 6e 65 74
-    77 6f 72 6b 2e 64 65 70 6c 6f 79 2e 61 6b 61 6d
-    61 69 2e 63 6f 6d 82 11 73 69 65 62 65 6c 2e 61
-    6b 61 6d 61 69 2e 63 6f 6d 82 10 61 6c 6f 68 61
-    2e 61 6b 61 6d 61 69 2e 63 6f 6d 82 17 64 65 63
-    6f 6e 2e 64 65 70 6c 6f 79 2e 61 6b 61 6d 61 69
-    2e 63 6f 6d 82 14 68 65 2e 64 65 70 6c 6f 79 2e
-    61 6b 61 6d 61 69 2e 63 6f 6d 82 0d 6d 79 2e 61
-    6b 61 6d 61 69 2e 63 6f 6d 82 17 74 6f 6f 6c 73
-    2e 64 65 70 6c 6f 79 2e 61 6b 61 6d 61 69 2e 63
-    6f 6d 82 15 6f 73 78 2d 75 70 64 61 74 65 2e 61
-    6b 61 6d 61 69 2e 63 6f 6d 82 0f 61 6f 74 67 2e
-    61 6b 61 6d 61 69 2e 63 6f 6d 82 13 6d 6f 6d 65
-    6e 74 75 6d 2e 61 6b 61 6d 61 69 2e 63 6f 6d 82
-    15 62 67 70 2e 64 65 70 6c 6f 79 2e 61 6b 61 6d
-    61 69 2e 63 6f 6d 82 18 64 63 6d 61 70 32 2e 64
-    65 70 6c 6f 79 2e 61 6b 61 6d 61 69 2e 63 6f 6d
-    82 17 77 69 6b 69 2e 6e 65 74 77 6f 72 6b 2e 61
-    6b 61 6d 61 69 2e 63 6f 6d 82 16 69 70 61 6d 2e
-    64 65 70 6c 6f 79 2e 61 6b 61 6d 61 69 2e 63 6f
-    6d 82 16 77 69 6b 69 2e 64 65 70 6c 6f 79 2e 61
-    6b 61 6d 61 69 2e 63 6f 6d 82 17 67 61 74 6f 72
-    2e 64 65 70 6c 6f 79 2e 61 6b 61 6d 61 69 2e 63
-    6f 6d 82 1b 64 61 73 68 62 6f 61 72 64 2e 64 65
-    70 6c 6f 79 2e 61 6b 61 6d 61 69 2e 63 6f 6d 82
-    16 77 77 77 2e 6e 65 74 61 72 63 68 2e 61 6b 61
-    6d 61 69 2e 63 6f 6d 82 12 65 69 73 2d 61 61 6d
-    2e 61 6b 61 6d 61 69 2e 63 6f 6d 30 09 06 03 55
-    1d 13 04 02 30 00 30 0e 06 03 55 1d 0f 01 01 ff
-    04 04 03 02 05 a0 30 2b 06 03 55 1d 1f 04 24 30
-    22 30 20 a0 1e a0 1c 86 1a 68 74 74 70 3a 2f 2f
-    67 6e 2e 73 79 6d 63 62 2e 63 6f 6d 2f 67 6e 2e
-    63 72 6c 30 81 9d 06 03 55 1d 20 04 81 95 30 81
-    92 30 81 8f 06 06 67 81 0c 01 02 02 30 81 84 30
-    3f 06 08 2b 06 01 05 05 07 02 01 16 33 68 74 74
-    70 73 3a 2f 2f 77 77 77 2e 67 65 6f 74 72 75 73
-    74 2e 63 6f 6d 2f 72 65 73 6f 75 72 63 65 73 2f
-    72 65 70 6f 73 69 74 6f 72 79 2f 6c 65 67 61 6c
-    30 41 06 08 2b 06 01 05 05 07 02 02 30 35 0c 33
-    68 74 74 70 73 3a 2f 2f 77 77 77 2e 67 65 6f 74
-    72 75 73 74 2e 63 6f 6d 2f 72 65 73 6f 75 72 63
-    65 73 2f 72 65 70 6f 73 69 74 6f 72 79 2f 6c 65
-    67 61 6c 30 1d 06 03 55 1d 25 04 16 30 14 06 08
-    2b 06 01 05 05 07 03 01 06 08 2b 06 01 05 05 07
-    03 02 30 1f 06 03 55 1d 23 04 18 30 16 80 14 d2
-    6f f7 96 f4 85 3f 72 3c 30 7d 23 da 85 78 9b a3
-    7c 5a 7c 30 57 06 08 2b 06 01 05 05 07 01 01 04
-    4b 30 49 30 1f 06 08 2b 06 01 05 05 07 30 01 86
-    13 68 74 74 70 3a 2f 2f 67 6e 2e 73 79 6d 63 64
-    2e 63 6f 6d 30 26 06 08 2b 06 01 05 05 07 30 02
-    86 1a 68 74 74 70 3a 2f 2f 67 6e 2e 73 79 6d 63
-    62 2e 63 6f 6d 2f 67 6e 2e 63 72 74 30 0d 06 09
-    2a 86 48 86 f7 0d 01 01 0b 05 00 03 82 01 01 00
-    63 2f 4e 88 4d fa 9c dd 28 5d 71 ba d5 84 3c 82
-    33 7a d6 b4 3c 35 87 a8 38 0a 0d 72 8e 29 6e 77
-    51 e4 58 2a 0e f4 19 e5 e1 72 ed 24 a0 07 a9 a6
-    cd 87 5f ef b3 61 77 63 f7 d9 19 0b a6 0f e7 8a
-    96 4d f2 f7 ca 4c d5 3f 39 2c c3 bc 7b 2c 0d 1d
-    99 46 2c df 6d 1f 3c df cd e6 9f 57 f6 b2 4b 11
-    1c d6 a2 a4 39 c0 d2 25 47 04 8a b9 c8 25 1f 8a
-    bc 97 47 1c f7 47 0e c2 85 74 69 27 6b de 10 30
-    9e df 40 81 3d 67 7d 18 3d 31 28 55 24 de c6 bf
-    ae 48 c3 ca b0 c3 dc c9 5f f8 87 fb 51 8a c7 13
-    07 06 62 e0 65 6f 77 1c bc e5 d4 2a c5 81 4e 1b
-    ca cc dd a3 90 1d ed 1c 2a e9 f3 c8 ba 5e 91 46
-    fe 39 b1 28 76 13 02 0c ae 91 4c 6f 5e 8b 30 79
-    5f de fa 1b be 1d 93 ff ec 1e 4d 6a 28 61 4f 93
-    f7 70 38 70 b8 db 19 6a 0a c5 91 42 d2 60 a4 5e
-    89 22 a3 0f e3 fb 7c a4 20 91 7e 34 b2 95 32 0a
-    00 04 53 30 82 04 4f 30 82 03 37 a0 03 02 01 02
-    02 03 02 3a 6f 30 0d 06 09 2a 86 48 86 f7 0d 01
-    01 0b 05 00 30 42 31 0b 30 09 06 03 55 04 06 13
-    02 55 53 31 16 30 14 06 03 55 04 0a 13 0d 47 65
-    6f 54 72 75 73 74 20 49 6e 63 2e 31 1b 30 19 06
-    03 55 04 03 13 12 47 65 6f 54 72 75 73 74 20 47
-    6c 6f 62 61 6c 20 43 41 30 1e 17 0d 31 33 31 31
-    30 35 32 31 33 36 35 30 5a 17 0d 32 32 30 35 32
-    30 32 31 33 36 35 30 5a 30 44 31 0b 30 09 06 03
-    55 04 06 13 02 55 53 31 16 30 14 06 03 55 04 0a
-    13 0d 47 65 6f 54 72 75 73 74 20 49 6e 63 2e 31
-    1d 30 1b 06 03 55 04 03 13 14 47 65 6f 54 72 75
-    73 74 20 53 53 4c 20 43 41 20 2d 20 47 33 30 82
-    01 22 30 0d 06 09 2a 86 48 86 f7 0d 01 01 01 05
-    00 03 82 01 0f 00 30 82 01 0a 02 82 01 01 00 e3
-    be 7e 0a 86 a3 cf 6b 6d 3d 2b a1 97 ad 49 24 4d
-    d7 77 b9 34 79 08 a5 9e a2 9e de 47 12 92 3d 7e
-    ea 19 86 b1 e8 4f 3d 5f f7 d0 a7 77 9a 5b 1f 0a
-    03 b5 19 53 db a5 21 94 69 63 9d 6a 4c 91 0c 10
-    47 be 11 fa 6c 86 25 b7 ab 04 68 42 38 09 65 f0
-    14 da 19 9e fa 6b 0b ab 62 ef 8d a7 ef 63 70 23
-    a8 af 81 f3 d1 6e 88 67 53 ec 12 a4 29 75 8a a7
-    f2 57 3d a2 83 98 97 f2 0a 7d d4 e7 43 6e 30 78
-    62 22 59 59 b8 71 27 45 aa 0f 66 c6 55 3f fa 32
-    17 2b 31 8f 46 a0 fa 69 14 7c 9d 9f 5a e2 eb 33
-    4e 10 a6 b3 ed 77 63 d8 c3 9e f4 dd df 79 9a 7a
-    d4 ee de dd 9a cc c3 b7 a9 5d cc 11 3a 07 bb 6f
-    97 a4 01 23 47 95 1f a3 77 fa 58 92 c6 c7 d0 bd
-    cf 93 18 42 b7 7e f7 9e 65 ea d5 3b ca ed ac c5
-    70 a1 fe d4 10 9a f0 12 04 44 ac 1a 5b 78 50 45
-    57 4c 6f bd 80 cb 81 5c 2d b3 bc 76 a1 1e 65 02
-    03 01 00 01 a3 82 01 4a 30 82 01 46 30 1f 06 03
-    55 1d 23 04 18 30 16 80 14 c0 7a 98 68 8d 89 fb
-    ab 05 64 0c 11 7d aa 7d 65 b8 ca cc 4e 30 1d 06
-    03 55 1d 0e 04 16 04 14 d2 6f f7 96 f4 85 3f 72
-    3c 30 7d 23 da 85 78 9b a3 7c 5a 7c 30 12 06 03
-    55 1d 13 01 01 ff 04 08 30 06 01 01 ff 02 01 00
-    30 0e 06 03 55 1d 0f 01 01 ff 04 04 03 02 01 06
-    30 36 06 03 55 1d 1f 04 2f 30 2d 30 2b a0 29 a0
-    27 86 25 68 74 74 70 3a 2f 2f 67 31 2e 73 79 6d
-    63 62 2e 63 6f 6d 2f 63 72 6c 73 2f 67 74 67 6c
-    6f 62 61 6c 2e 63 72 6c 30 2f 06 08 2b 06 01 05
-    05 07 01 01 04 23 30 21 30 1f 06 08 2b 06 01 05
-    05 07 30 01 86 13 68 74 74 70 3a 2f 2f 67 32 2e
-    73 79 6d 63 62 2e 63 6f 6d 30 4c 06 03 55 1d 20
-    04 45 30 43 30 41 06 0a 60 86 48 01 86 f8 45 01
-    07 36 30 33 30 31 06 08 2b 06 01 05 05 07 02 01
-    16 25 68 74 74 70 3a 2f 2f 77 77 77 2e 67 65 6f
-    74 72 75 73 74 2e 63 6f 6d 2f 72 65 73 6f 75 72
-    63 65 73 2f 63 70 73 30 29 06 03 55 1d 11 04 22
-    30 20 a4 1e 30 1c 31 1a 30 18 06 03 55 04 03 13
-    11 53 79 6d 61 6e 74 65 63 50 4b 49 2d 31 2d 35
-    33 39 30 0d 06 09 2a 86 48 86 f7 0d 01 01 0b 05
-    00 03 82 01 01 00 a0 d4 f7 2c fb 74 0b 7f 64 f1
-    cd 43 6a 9f 62 53 1c 02 7c 98 90 a2 ee 4f 68 d4
-    20 1a 73 12 3e 77 b3 50 eb 72 bc ee 88 be 7f 17
-    ea 77 8f 83 61 95 4f 84 a1 cb 32 4f 6c 21 be d2
-    69 96 7d 63 bd dc 2b a8 1f d0 13 84 70 fe f6 35
-    95 89 f9 a6 77 b0 46 c8 bb b7 13 f5 c9 60 69 d6
-    4c fe d2 8e ef d3 60 c1 80 80 e1 e7 fb 8b 6f 21
-    79 4a e0 dc a9 1b c1 b7 fb c3 49 59 5c b5 77 07
-    44 d4 97 fc 49 00 89 6f 06 4e 01 70 19 ac 2f 11
-    c0 e2 e6 0f 2f 86 4b 8d 7b c3 b9 a7 2e f4 f1 ac
-    16 3e 39 49 51 9e 17 4b 4f 10 3a 5b a5 a8 92 6f
-    fd fa d6 0b 03 4d 47 56 57 19 f3 cb 6b f5 f3 d6
-    cf b0 f5 f5 a3 11 d2 20 53 13 34 37 05 2c 43 5a
-    63 df 8d 40 d6 85 1e 51 e9 51 17 1e 03 56 c9 f1
-    30 ad e7 9b 11 a2 b9 d0 31 81 9b 68 b1 d9 e8 f3
-    e6 94 7e c7 ae 13 2f 87 ed d0 25 b0 68 f9 de 08
-    5a f3 29 cc d4 92
-    0c 00 01 49 03 00 17 41 04 8d b6 17 2e 4e d8 88
-    9f 61 66 2e 42 98 f2 91 81 69 75 48 79 73 8c c3
-    04 2d fe a8 92 52 be 4f be 1c b4 2b dd c3 70 7e
-    54 dd b9 e1 6c a1 3b ee 59 f3 6f c1 49 43 fc f4
-    b6 27 40 bd 8a ef 72 7d 65 06 01 01 00 bd 02 7c
-    59 a0 67 04 ed 66 7a 66 f9 86 03 43 95 b4 07 70
-    da bc 72 ae c4 b6 63 f2 6d 5b 53 fe 1d 79 be 70
-    f3 31 9d 79 54 38 f4 e1 d8 90 b5 2b d6 21 05 b1
-    a6 12 2a 53 5a 66 42 de 41 eb a5 45 11 50 ea 50
-    25 1c 11 f7 85 f3 eb 1c 2b 11 1f 0f c3 3d 04 04
-    86 a9 e2 f6 5f e2 3a 1a 0a 06 dc 09 e1 db da 25
-    8e 2d 07 88 d9 0c 96 b6 d4 18 dd 39 df 3e b2 59
-    50 dd 76 0d 9b 69 72 bc 46 8b ab bb 3b b3 b4 96
-    5d 5e 46 9c cd 13 b9 9e 27 75 06 98 19 ac c9 35
-    9d 9f 5d 1b dd 5e f7 39 3e 03 9d af a1 dd c0 dc
-    a6 79 e0 a9 68 ad cb de 7a 04 ae 2a 80 32 55 61
-    a2 6b 0a 68 4d 29 0c 36 68 01 c5 6b 32 3e 40 bf
-    2b 5f 4f 3f 3d a1 53 8d c1 0a 1e 72 3f 1b 9b 5c
-    72 0e 55 64 57 68 dd c9 f4 13 7e 10 f3 c8 ca ef
-    eb 1b b3 c2 a3 72 83 b2 63 5c c1 37 ca 71 84 7f
-    b1 c1 83 dc 65 f4 05 29 4c 37 28 c5 5f
-    0d 00 02 46 03 01 02 40 00 1e 06 01 06 02 06 03
-    05 01 05 02 05 03 04 01 04 02 04 03 03 01 03 02
-    03 03 02 01 02 02 02 03 02 20 00 1a 30 18 31 16
-    30 14 06 03 55 04 03 13 0d 41 6b 61 6d 61 69 50
-    4b 49 52 6f 6f 74 00 60 30 5e 31 13 30 11 06 0a
-    09 92 26 89 93 f2 2c 64 01 19 16 03 63 6f 6d 31
-    16 30 14 06 0a 09 92 26 89 93 f2 2c 64 01 19 16
-    06 61 6b 61 6d 61 69 31 14 30 12 06 0a 09 92 26
-    89 93 f2 2c 64 01 19 16 04 63 6f 72 70 31 19 30
-    17 06 03 55 04 03 13 10 41 6b 61 6d 61 69 50 4b
-    49 49 73 73 75 69 6e 67 00 56 30 54 31 15 30 13
-    06 0a 09 92 26 89 93 f2 2c 64 01 19 16 05 4c 6f
-    63 61 6c 31 18 30 16 06 0a 09 92 26 89 93 f2 2c
-    64 01 19 16 08 41 69 72 57 61 74 63 68 31 21 30
-    1f 06 03 55 04 03 13 18 41 69 72 57 61 74 63 68
-    2d 41 54 4c 30 32 50 52 44 43 53 31 39 2d 43 41
-    00 16 30 14 31 12 30 10 06 03 55 04 03 13 09 52
-    43 41 2d 55 53 4d 41 31 00 41 30 3f 31 21 30 1f
-    06 03 55 04 0a 13 18 41 6b 61 6d 61 69 20 54 65
-    63 68 6e 6f 6c 6f 67 69 65 73 20 49 6e 63 2e 31
-    1a 30 18 06 03 55 04 03 13 11 41 6b 61 6d 61 69
-    43 6f 72 70 52 6f 6f 74 2d 47 31 00 3e 30 3c 31
-    21 30 1f 06 03 55 04 0a 13 18 41 6b 61 6d 61 69
-    20 54 65 63 68 6e 6f 6c 6f 67 69 65 73 20 49 6e
-    63 2e 31 17 30 15 06 03 55 04 03 13 0e 41 6b 61
-    6d 61 69 43 6c 69 65 6e 74 43 41 00 56 30 54 31
-    15 30 13 06 0a 09 92 26 89 93 f2 2c 64 01 19 16
-    05 4c 6f 63 61 6c 31 18 30 16 06 0a 09 92 26 89
-    93 f2 2c 64 01 19 16 08 41 69 72 57 61 74 63 68
-    31 21 30 1f 06 03 55 04 03 13 18 41 69 72 57 61
-    74 63 68 2d 41 54 4c 30 34 50 52 44 43 53 33 32
-    2d 43 41 00 55 30 53 31 15 30 13 06 0a 09 92 26
-    89 93 f2 2c 64 01 19 16 05 4c 6f 63 61 6c 31 18
-    30 16 06 0a 09 92 26 89 93 f2 2c 64 01 19 16 08
-    41 69 72 57 61 74 63 68 31 20 30 1e 06 03 55 04
-    03 13 17 41 69 72 57 61 74 63 68 2d 55 53 30 32
-    50 52 44 43 53 33 35 2d 43 41
-    0e 00 00 00
-    0b 00 00 03 00 00 00
-    10 00 00 42 41 04 7a f4 18 c0 47 8f 13 a7 59 66
-    d4 c6 eb 80 ed 1a 3a 00 12 8f b9 1f 52 0d e1 07
-    f6 57 4b 8f 24 6d 1a 3e 6a 2c 74 c8 29 94 8b 68
-    33 e8 80 22 2d 36 0b 94 4c bb 7c af b4 6f 06 bd
-    3e 6e a7 96 be da
-    14 00 00 0c 56 9b a7 6e de 7d 94 a1 92 df 08 32
+01 00 01 35 03 03 ba d3 d2 33 fb c3 3c db 7c c8
+    8b fb 93 cc 5c 14 f8 37 01 df 38 81 ae ab 8f 78
+    78 c7 96 b0 0e 0b 00 00 b6 c0 30 c0 2c c0 28 c0
+    24 c0 14 c0 0a 00 a5 00 a3 00 a1 00 9f 00 6b 00
+    6a 00 69 00 68 00 39 00 38 00 37 00 36 00 88 00
+    87 00 86 00 85 c0 32 c0 2e c0 2a c0 26 c0 0f c0
+    05 00 9d 00 3d 00 35 00 84 c0 2f c0 2b c0 27 c0
+    23 c0 13 c0 09 00 a4 00 a2 00 a0 00 9e 00 67 00
+    40 00 3f 00 3e 00 33 00 32 00 31 00 30 00 9a 00
+    99 00 98 00 97 00 45 00 44 00 43 00 42 c0 31 c0
+    2d c0 29 c0 25 c0 0e c0 04 00 9c 00 3c 00 2f 00
+    96 00 41 00 07 c0 11 c0 07 c0 0c c0 02 00 05 00
+    04 c0 12 c0 08 00 16 00 13 00 10 00 0d c0 0d c0
+    03 00 0a 00 15 00 12 00 0f 00 0c 00 09 00 ff 02
+    01 00 00 55 00 0b 00 04 03 00 01 02 00 0a 00 1c
+    00 1a 00 17 00 19 00 1c 00 1b 00 18 00 1a 00 16
+    00 0e 00 0d 00 0b 00 0c 00 09 00 0a 00 23 00 00
+    00 0d 00 20 00 1e 06 01 06 02 06 03 05 01 05 02
+    05 03 04 01 04 02 04 03 03 01 03 02 03 03 02 01
+    02 02 02 03 00 0f 00 01 01
+02 00 00 39 03 03 56 79 37 77 59 69 03 ba b8 c0
+    48 f8 68 42 c2 de 26 ee 0a 02 45 9a 5f da d1 f0
+    62 fa 51 de a8 3a 00 c0 30 00 00 11 ff 01 00 01
+    00 00 0b 00 04 03 00 01 02 00 23 00 00
+0b 00 0c c2 00 0c bf 00 08 66 30 82 08 62 30 82
+    07 4a a0 03 02 01 02 02 10 55 74 f7 d3 1d 76 62
+    b5 1e 64 d1 de 1a ac e2 ac 30 0d 06 09 2a 86 48
+    86 f7 0d 01 01 0b 05 00 30 44 31 0b 30 09 06 03
+    55 04 06 13 02 55 53 31 16 30 14 06 03 55 04 0a
+    13 0d 47 65 6f 54 72 75 73 74 20 49 6e 63 2e 31
+    1d 30 1b 06 03 55 04 03 13 14 47 65 6f 54 72 75
+    73 74 20 53 53 4c 20 43 41 20 2d 20 47 33 30 1e
+    17 0d 31 35 31 32 30 38 30 30 30 30 30 30 5a 17
+    0d 31 37 30 33 30 38 32 33 35 39 35 39 5a 30 81
+    88 31 0b 30 09 06 03 55 04 06 13 02 55 53 31 16
+    30 14 06 03 55 04 08 13 0d 4d 61 73 73 61 63 68
+    75 73 65 74 74 73 31 12 30 10 06 03 55 04 07 14
+    09 43 61 6d 62 72 69 64 67 65 31 22 30 20 06 03
+    55 04 0a 14 19 41 6b 61 6d 61 69 20 54 65 63 68
+    6e 6f 6c 6f 67 69 65 73 2c 20 69 6e 63 2e 31 0c
+    30 0a 06 03 55 04 0b 14 03 45 49 53 31 1b 30 19
+    06 03 55 04 03 14 12 65 69 73 2d 61 61 6d 2e 61
+    6b 61 6d 61 69 2e 63 6f 6d 30 82 01 22 30 0d 06
+    09 2a 86 48 86 f7 0d 01 01 01 05 00 03 82 01 0f
+    00 30 82 01 0a 02 82 01 01 00 d8 a0 f3 b2 bb 68
+    15 ba 4e 74 f0 74 d9 82 89 88 11 f8 11 0b c0 8e
+    b3 0c 86 96 53 20 8f 48 e2 34 eb d1 f4 71 df 2e
+    6b c2 8d bc 69 ba 8b 6e 6c cc 47 0c 55 4d e6 5f
+    16 79 ac ba b2 5a 06 67 3c 8c 03 64 02 21 e2 c4
+    bc 07 ef b3 fe 85 b0 e1 03 ad ce 09 ef 23 4c d0
+    d9 ee 6f 67 20 14 db 8e 83 f4 a3 4f fb 45 ff 72
+    12 a4 ad 49 b0 ad 72 0d 62 7c 56 a7 1e ef 7e 2a
+    ee 95 2f b9 a8 f8 b6 bf 58 16 32 46 39 fa 7f 27
+    c8 c4 e4 4a c1 26 f6 0d 6b 6f 53 fe 4d d6 0e 3f
+    36 3e 74 6d 22 5d e4 09 af 3e 91 18 29 19 b8 c2
+    39 8e 16 dd 4e e6 62 8f 31 0c eb 7e 49 f4 db f7
+    97 3a d1 ae c6 b2 d1 43 fd 42 00 18 d1 69 86 28
+    4f b4 f9 5f da ba ba a8 45 ab 22 ed 98 e2 92 63
+    ee d2 75 f7 88 11 0e a1 d4 33 16 63 d6 52 0d 93
+    4f a1 e4 e9 5a 7e a2 c5 54 17 0a 8c df 59 3a b8
+    91 72 d6 af 7d ab 3b 9a 18 09 02 03 01 00 01 a3
+    82 05 09 30 82 05 05 30 82 03 80 06 03 55 1d 11
+    04 82 03 77 30 82 03 73 82 18 69 73 73 75 65 73
+    2e 64 65 70 6c 6f 79 2e 61 6b 61 6d 61 69 2e 63
+    6f 6d 82 1a 68 61 72 64 77 61 72 65 2e 64 65 70
+    6c 6f 79 2e 61 6b 61 6d 61 69 2e 63 6f 6d 82 18
+    77 68 6f 68 61 73 2e 64 65 70 6c 6f 79 2e 61 6b
+    61 6d 61 69 2e 63 6f 6d 82 13 63 6f 6e 74 61 63
+    74 73 2e 61 6b 61 6d 61 69 2e 63 6f 6d 82 0e 6f
+    73 78 2e 61 6b 61 6d 61 69 2e 63 6f 6d 82 17 77
+    68 6f 69 73 2e 64 65 70 6c 6f 79 2e 61 6b 61 6d
+    61 69 2e 63 6f 6d 82 14 64 70 2e 64 65 70 6c 6f
+    79 2e 61 6b 61 6d 61 69 2e 63 6f 6d 82 12 77 65
+    62 6d 61 69 6c 2e 61 6b 61 6d 61 69 2e 63 6f 6d
+    82 16 61 75 64 69 6f 62 72 69 64 67 65 2e 61 6b
+    61 6d 61 69 2e 63 6f 6d 82 17 6d 61 69 6c 69 6e
+    67 6c 69 73 74 73 2e 61 6b 61 6d 61 69 2e 63 6f
+    6d 82 19 67 6c 6f 62 61 6c 65 64 76 69 64 65 6f
+    73 2e 61 6b 61 6d 61 69 2e 63 6f 6d 82 10 61 6f
+    74 67 6f 2e 61 6b 61 6d 61 69 2e 63 6f 6d 82 0f
+    61 64 61 6d 2e 61 6b 61 6d 61 69 2e 63 6f 6d 82
+    12 69 64 70 2d 65 69 73 2e 61 6b 61 6d 61 69 2e
+    63 6f 6d 82 17 64 63 6d 61 70 2e 64 65 70 6c 6f
+    79 2e 61 6b 61 6d 61 69 2e 63 6f 6d 82 19 6d 65
+    74 72 69 63 73 2e 64 65 70 6c 6f 79 2e 61 6b 61
+    6d 61 69 2e 63 6f 6d 82 1b 6c 6f 67 69 73 74 69
+    63 73 2e 64 65 70 6c 6f 79 2e 61 6b 61 6d 61 69
+    2e 63 6f 6d 82 1d 6d 61 63 6f 73 78 2d 61 61 6d
+    2e 75 70 67 72 61 64 65 2e 61 6b 61 6d 61 69 2e
+    63 6f 6d 82 16 6f 73 78 2d 75 70 67 72 61 64 65
+    2e 61 6b 61 6d 61 69 2e 63 6f 6d 82 19 6e 65 74
+    77 6f 72 6b 2e 64 65 70 6c 6f 79 2e 61 6b 61 6d
+    61 69 2e 63 6f 6d 82 11 73 69 65 62 65 6c 2e 61
+    6b 61 6d 61 69 2e 63 6f 6d 82 10 61 6c 6f 68 61
+    2e 61 6b 61 6d 61 69 2e 63 6f 6d 82 17 64 65 63
+    6f 6e 2e 64 65 70 6c 6f 79 2e 61 6b 61 6d 61 69
+    2e 63 6f 6d 82 14 68 65 2e 64 65 70 6c 6f 79 2e
+    61 6b 61 6d 61 69 2e 63 6f 6d 82 0d 6d 79 2e 61
+    6b 61 6d 61 69 2e 63 6f 6d 82 17 74 6f 6f 6c 73
+    2e 64 65 70 6c 6f 79 2e 61 6b 61 6d 61 69 2e 63
+    6f 6d 82 15 6f 73 78 2d 75 70 64 61 74 65 2e 61
+    6b 61 6d 61 69 2e 63 6f 6d 82 0f 61 6f 74 67 2e
+    61 6b 61 6d 61 69 2e 63 6f 6d 82 13 6d 6f 6d 65
+    6e 74 75 6d 2e 61 6b 61 6d 61 69 2e 63 6f 6d 82
+    15 62 67 70 2e 64 65 70 6c 6f 79 2e 61 6b 61 6d
+    61 69 2e 63 6f 6d 82 18 64 63 6d 61 70 32 2e 64
+    65 70 6c 6f 79 2e 61 6b 61 6d 61 69 2e 63 6f 6d
+    82 17 77 69 6b 69 2e 6e 65 74 77 6f 72 6b 2e 61
+    6b 61 6d 61 69 2e 63 6f 6d 82 16 69 70 61 6d 2e
+    64 65 70 6c 6f 79 2e 61 6b 61 6d 61 69 2e 63 6f
+    6d 82 16 77 69 6b 69 2e 64 65 70 6c 6f 79 2e 61
+    6b 61 6d 61 69 2e 63 6f 6d 82 17 67 61 74 6f 72
+    2e 64 65 70 6c 6f 79 2e 61 6b 61 6d 61 69 2e 63
+    6f 6d 82 1b 64 61 73 68 62 6f 61 72 64 2e 64 65
+    70 6c 6f 79 2e 61 6b 61 6d 61 69 2e 63 6f 6d 82
+    16 77 77 77 2e 6e 65 74 61 72 63 68 2e 61 6b 61
+    6d 61 69 2e 63 6f 6d 82 12 65 69 73 2d 61 61 6d
+    2e 61 6b 61 6d 61 69 2e 63 6f 6d 30 09 06 03 55
+    1d 13 04 02 30 00 30 0e 06 03 55 1d 0f 01 01 ff
+    04 04 03 02 05 a0 30 2b 06 03 55 1d 1f 04 24 30
+    22 30 20 a0 1e a0 1c 86 1a 68 74 74 70 3a 2f 2f
+    67 6e 2e 73 79 6d 63 62 2e 63 6f 6d 2f 67 6e 2e
+    63 72 6c 30 81 9d 06 03 55 1d 20 04 81 95 30 81
+    92 30 81 8f 06 06 67 81 0c 01 02 02 30 81 84 30
+    3f 06 08 2b 06 01 05 05 07 02 01 16 33 68 74 74
+    70 73 3a 2f 2f 77 77 77 2e 67 65 6f 74 72 75 73
+    74 2e 63 6f 6d 2f 72 65 73 6f 75 72 63 65 73 2f
+    72 65 70 6f 73 69 74 6f 72 79 2f 6c 65 67 61 6c
+    30 41 06 08 2b 06 01 05 05 07 02 02 30 35 0c 33
+    68 74 74 70 73 3a 2f 2f 77 77 77 2e 67 65 6f 74
+    72 75 73 74 2e 63 6f 6d 2f 72 65 73 6f 75 72 63
+    65 73 2f 72 65 70 6f 73 69 74 6f 72 79 2f 6c 65
+    67 61 6c 30 1d 06 03 55 1d 25 04 16 30 14 06 08
+    2b 06 01 05 05 07 03 01 06 08 2b 06 01 05 05 07
+    03 02 30 1f 06 03 55 1d 23 04 18 30 16 80 14 d2
+    6f f7 96 f4 85 3f 72 3c 30 7d 23 da 85 78 9b a3
+    7c 5a 7c 30 57 06 08 2b 06 01 05 05 07 01 01 04
+    4b 30 49 30 1f 06 08 2b 06 01 05 05 07 30 01 86
+    13 68 74 74 70 3a 2f 2f 67 6e 2e 73 79 6d 63 64
+    2e 63 6f 6d 30 26 06 08 2b 06 01 05 05 07 30 02
+    86 1a 68 74 74 70 3a 2f 2f 67 6e 2e 73 79 6d 63
+    62 2e 63 6f 6d 2f 67 6e 2e 63 72 74 30 0d 06 09
+    2a 86 48 86 f7 0d 01 01 0b 05 00 03 82 01 01 00
+    63 2f 4e 88 4d fa 9c dd 28 5d 71 ba d5 84 3c 82
+    33 7a d6 b4 3c 35 87 a8 38 0a 0d 72 8e 29 6e 77
+    51 e4 58 2a 0e f4 19 e5 e1 72 ed 24 a0 07 a9 a6
+    cd 87 5f ef b3 61 77 63 f7 d9 19 0b a6 0f e7 8a
+    96 4d f2 f7 ca 4c d5 3f 39 2c c3 bc 7b 2c 0d 1d
+    99 46 2c df 6d 1f 3c df cd e6 9f 57 f6 b2 4b 11
+    1c d6 a2 a4 39 c0 d2 25 47 04 8a b9 c8 25 1f 8a
+    bc 97 47 1c f7 47 0e c2 85 74 69 27 6b de 10 30
+    9e df 40 81 3d 67 7d 18 3d 31 28 55 24 de c6 bf
+    ae 48 c3 ca b0 c3 dc c9 5f f8 87 fb 51 8a c7 13
+    07 06 62 e0 65 6f 77 1c bc e5 d4 2a c5 81 4e 1b
+    ca cc dd a3 90 1d ed 1c 2a e9 f3 c8 ba 5e 91 46
+    fe 39 b1 28 76 13 02 0c ae 91 4c 6f 5e 8b 30 79
+    5f de fa 1b be 1d 93 ff ec 1e 4d 6a 28 61 4f 93
+    f7 70 38 70 b8 db 19 6a 0a c5 91 42 d2 60 a4 5e
+    89 22 a3 0f e3 fb 7c a4 20 91 7e 34 b2 95 32 0a
+    00 04 53 30 82 04 4f 30 82 03 37 a0 03 02 01 02
+    02 03 02 3a 6f 30 0d 06 09 2a 86 48 86 f7 0d 01
+    01 0b 05 00 30 42 31 0b 30 09 06 03 55 04 06 13
+    02 55 53 31 16 30 14 06 03 55 04 0a 13 0d 47 65
+    6f 54 72 75 73 74 20 49 6e 63 2e 31 1b 30 19 06
+    03 55 04 03 13 12 47 65 6f 54 72 75 73 74 20 47
+    6c 6f 62 61 6c 20 43 41 30 1e 17 0d 31 33 31 31
+    30 35 32 31 33 36 35 30 5a 17 0d 32 32 30 35 32
+    30 32 31 33 36 35 30 5a 30 44 31 0b 30 09 06 03
+    55 04 06 13 02 55 53 31 16 30 14 06 03 55 04 0a
+    13 0d 47 65 6f 54 72 75 73 74 20 49 6e 63 2e 31
+    1d 30 1b 06 03 55 04 03 13 14 47 65 6f 54 72 75
+    73 74 20 53 53 4c 20 43 41 20 2d 20 47 33 30 82
+    01 22 30 0d 06 09 2a 86 48 86 f7 0d 01 01 01 05
+    00 03 82 01 0f 00 30 82 01 0a 02 82 01 01 00 e3
+    be 7e 0a 86 a3 cf 6b 6d 3d 2b a1 97 ad 49 24 4d
+    d7 77 b9 34 79 08 a5 9e a2 9e de 47 12 92 3d 7e
+    ea 19 86 b1 e8 4f 3d 5f f7 d0 a7 77 9a 5b 1f 0a
+    03 b5 19 53 db a5 21 94 69 63 9d 6a 4c 91 0c 10
+    47 be 11 fa 6c 86 25 b7 ab 04 68 42 38 09 65 f0
+    14 da 19 9e fa 6b 0b ab 62 ef 8d a7 ef 63 70 23
+    a8 af 81 f3 d1 6e 88 67 53 ec 12 a4 29 75 8a a7
+    f2 57 3d a2 83 98 97 f2 0a 7d d4 e7 43 6e 30 78
+    62 22 59 59 b8 71 27 45 aa 0f 66 c6 55 3f fa 32
+    17 2b 31 8f 46 a0 fa 69 14 7c 9d 9f 5a e2 eb 33
+    4e 10 a6 b3 ed 77 63 d8 c3 9e f4 dd df 79 9a 7a
+    d4 ee de dd 9a cc c3 b7 a9 5d cc 11 3a 07 bb 6f
+    97 a4 01 23 47 95 1f a3 77 fa 58 92 c6 c7 d0 bd
+    cf 93 18 42 b7 7e f7 9e 65 ea d5 3b ca ed ac c5
+    70 a1 fe d4 10 9a f0 12 04 44 ac 1a 5b 78 50 45
+    57 4c 6f bd 80 cb 81 5c 2d b3 bc 76 a1 1e 65 02
+    03 01 00 01 a3 82 01 4a 30 82 01 46 30 1f 06 03
+    55 1d 23 04 18 30 16 80 14 c0 7a 98 68 8d 89 fb
+    ab 05 64 0c 11 7d aa 7d 65 b8 ca cc 4e 30 1d 06
+    03 55 1d 0e 04 16 04 14 d2 6f f7 96 f4 85 3f 72
+    3c 30 7d 23 da 85 78 9b a3 7c 5a 7c 30 12 06 03
+    55 1d 13 01 01 ff 04 08 30 06 01 01 ff 02 01 00
+    30 0e 06 03 55 1d 0f 01 01 ff 04 04 03 02 01 06
+    30 36 06 03 55 1d 1f 04 2f 30 2d 30 2b a0 29 a0
+    27 86 25 68 74 74 70 3a 2f 2f 67 31 2e 73 79 6d
+    63 62 2e 63 6f 6d 2f 63 72 6c 73 2f 67 74 67 6c
+    6f 62 61 6c 2e 63 72 6c 30 2f 06 08 2b 06 01 05
+    05 07 01 01 04 23 30 21 30 1f 06 08 2b 06 01 05
+    05 07 30 01 86 13 68 74 74 70 3a 2f 2f 67 32 2e
+    73 79 6d 63 62 2e 63 6f 6d 30 4c 06 03 55 1d 20
+    04 45 30 43 30 41 06 0a 60 86 48 01 86 f8 45 01
+    07 36 30 33 30 31 06 08 2b 06 01 05 05 07 02 01
+    16 25 68 74 74 70 3a 2f 2f 77 77 77 2e 67 65 6f
+    74 72 75 73 74 2e 63 6f 6d 2f 72 65 73 6f 75 72
+    63 65 73 2f 63 70 73 30 29 06 03 55 1d 11 04 22
+    30 20 a4 1e 30 1c 31 1a 30 18 06 03 55 04 03 13
+    11 53 79 6d 61 6e 74 65 63 50 4b 49 2d 31 2d 35
+    33 39 30 0d 06 09 2a 86 48 86 f7 0d 01 01 0b 05
+    00 03 82 01 01 00 a0 d4 f7 2c fb 74 0b 7f 64 f1
+    cd 43 6a 9f 62 53 1c 02 7c 98 90 a2 ee 4f 68 d4
+    20 1a 73 12 3e 77 b3 50 eb 72 bc ee 88 be 7f 17
+    ea 77 8f 83 61 95 4f 84 a1 cb 32 4f 6c 21 be d2
+    69 96 7d 63 bd dc 2b a8 1f d0 13 84 70 fe f6 35
+    95 89 f9 a6 77 b0 46 c8 bb b7 13 f5 c9 60 69 d6
+    4c fe d2 8e ef d3 60 c1 80 80 e1 e7 fb 8b 6f 21
+    79 4a e0 dc a9 1b c1 b7 fb c3 49 59 5c b5 77 07
+    44 d4 97 fc 49 00 89 6f 06 4e 01 70 19 ac 2f 11
+    c0 e2 e6 0f 2f 86 4b 8d 7b c3 b9 a7 2e f4 f1 ac
+    16 3e 39 49 51 9e 17 4b 4f 10 3a 5b a5 a8 92 6f
+    fd fa d6 0b 03 4d 47 56 57 19 f3 cb 6b f5 f3 d6
+    cf b0 f5 f5 a3 11 d2 20 53 13 34 37 05 2c 43 5a
+    63 df 8d 40 d6 85 1e 51 e9 51 17 1e 03 56 c9 f1
+    30 ad e7 9b 11 a2 b9 d0 31 81 9b 68 b1 d9 e8 f3
+    e6 94 7e c7 ae 13 2f 87 ed d0 25 b0 68 f9 de 08
+    5a f3 29 cc d4 92
+    0c 00 01 49 03 00 17 41 04 8d b6 17 2e 4e d8 88
+    9f 61 66 2e 42 98 f2 91 81 69 75 48 79 73 8c c3
+    04 2d fe a8 92 52 be 4f be 1c b4 2b dd c3 70 7e
+    54 dd b9 e1 6c a1 3b ee 59 f3 6f c1 49 43 fc f4
+    b6 27 40 bd 8a ef 72 7d 65 06 01 01 00 bd 02 7c
+    59 a0 67 04 ed 66 7a 66 f9 86 03 43 95 b4 07 70
+    da bc 72 ae c4 b6 63 f2 6d 5b 53 fe 1d 79 be 70
+    f3 31 9d 79 54 38 f4 e1 d8 90 b5 2b d6 21 05 b1
+    a6 12 2a 53 5a 66 42 de 41 eb a5 45 11 50 ea 50
+    25 1c 11 f7 85 f3 eb 1c 2b 11 1f 0f c3 3d 04 04
+    86 a9 e2 f6 5f e2 3a 1a 0a 06 dc 09 e1 db da 25
+    8e 2d 07 88 d9 0c 96 b6 d4 18 dd 39 df 3e b2 59
+    50 dd 76 0d 9b 69 72 bc 46 8b ab bb 3b b3 b4 96
+    5d 5e 46 9c cd 13 b9 9e 27 75 06 98 19 ac c9 35
+    9d 9f 5d 1b dd 5e f7 39 3e 03 9d af a1 dd c0 dc
+    a6 79 e0 a9 68 ad cb de 7a 04 ae 2a 80 32 55 61
+    a2 6b 0a 68 4d 29 0c 36 68 01 c5 6b 32 3e 40 bf
+    2b 5f 4f 3f 3d a1 53 8d c1 0a 1e 72 3f 1b 9b 5c
+    72 0e 55 64 57 68 dd c9 f4 13 7e 10 f3 c8 ca ef
+    eb 1b b3 c2 a3 72 83 b2 63 5c c1 37 ca 71 84 7f
+    b1 c1 83 dc 65 f4 05 29 4c 37 28 c5 5f
+    0d 00 02 46 03 01 02 40 00 1e 06 01 06 02 06 03
+    05 01 05 02 05 03 04 01 04 02 04 03 03 01 03 02
+    03 03 02 01 02 02 02 03 02 20 00 1a 30 18 31 16
+    30 14 06 03 55 04 03 13 0d 41 6b 61 6d 61 69 50
+    4b 49 52 6f 6f 74 00 60 30 5e 31 13 30 11 06 0a
+    09 92 26 89 93 f2 2c 64 01 19 16 03 63 6f 6d 31
+    16 30 14 06 0a 09 92 26 89 93 f2 2c 64 01 19 16
+    06 61 6b 61 6d 61 69 31 14 30 12 06 0a 09 92 26
+    89 93 f2 2c 64 01 19 16 04 63 6f 72 70 31 19 30
+    17 06 03 55 04 03 13 10 41 6b 61 6d 61 69 50 4b
+    49 49 73 73 75 69 6e 67 00 56 30 54 31 15 30 13
+    06 0a 09 92 26 89 93 f2 2c 64 01 19 16 05 4c 6f
+    63 61 6c 31 18 30 16 06 0a 09 92 26 89 93 f2 2c
+    64 01 19 16 08 41 69 72 57 61 74 63 68 31 21 30
+    1f 06 03 55 04 03 13 18 41 69 72 57 61 74 63 68
+    2d 41 54 4c 30 32 50 52 44 43 53 31 39 2d 43 41
+    00 16 30 14 31 12 30 10 06 03 55 04 03 13 09 52
+    43 41 2d 55 53 4d 41 31 00 41 30 3f 31 21 30 1f
+    06 03 55 04 0a 13 18 41 6b 61 6d 61 69 20 54 65
+    63 68 6e 6f 6c 6f 67 69 65 73 20 49 6e 63 2e 31
+    1a 30 18 06 03 55 04 03 13 11 41 6b 61 6d 61 69
+    43 6f 72 70 52 6f 6f 74 2d 47 31 00 3e 30 3c 31
+    21 30 1f 06 03 55 04 0a 13 18 41 6b 61 6d 61 69
+    20 54 65 63 68 6e 6f 6c 6f 67 69 65 73 20 49 6e
+    63 2e 31 17 30 15 06 03 55 04 03 13 0e 41 6b 61
+    6d 61 69 43 6c 69 65 6e 74 43 41 00 56 30 54 31
+    15 30 13 06 0a 09 92 26 89 93 f2 2c 64 01 19 16
+    05 4c 6f 63 61 6c 31 18 30 16 06 0a 09 92 26 89
+    93 f2 2c 64 01 19 16 08 41 69 72 57 61 74 63 68
+    31 21 30 1f 06 03 55 04 03 13 18 41 69 72 57 61
+    74 63 68 2d 41 54 4c 30 34 50 52 44 43 53 33 32
+    2d 43 41 00 55 30 53 31 15 30 13 06 0a 09 92 26
+    89 93 f2 2c 64 01 19 16 05 4c 6f 63 61 6c 31 18
+    30 16 06 0a 09 92 26 89 93 f2 2c 64 01 19 16 08
+    41 69 72 57 61 74 63 68 31 20 30 1e 06 03 55 04
+    03 13 17 41 69 72 57 61 74 63 68 2d 55 53 30 32
+    50 52 44 43 53 33 35 2d 43 41
+    0e 00 00 00
+    0b 00 00 03 00 00 00
+    10 00 00 42 41 04 7a f4 18 c0 47 8f 13 a7 59 66
+    d4 c6 eb 80 ed 1a 3a 00 12 8f b9 1f 52 0d e1 07
+    f6 57 4b 8f 24 6d 1a 3e 6a 2c 74 c8 29 94 8b 68
+    33 e8 80 22 2d 36 0b 94 4c bb 7c af b4 6f 06 bd
+    3e 6e a7 96 be da
+    14 00 00 0c 56 9b a7 6e de 7d 94 a1 92 df 08 32

\ No newline at end of file
diff --git a/src/tls/traces/openssl-google.hex b/src/tls/traces/openssl-google.hex
index fcf9922..1922612 100644
--- a/src/tls/traces/openssl-google.hex
+++ b/src/tls/traces/openssl-google.hex
@@ -1,258 +1,258 @@
-01 00 01 35 03 03 f5 f5 3d 3d d5 43 de 9c c5 ab
-    09 b0 98 1a 13 46 48 7e c9 e4 35 1c 98 03 1b 38
-    04 90 1e 5e b0 ed 00 00 b6 c0 30 c0 2c c0 28 c0
-    24 c0 14 c0 0a 00 a5 00 a3 00 a1 00 9f 00 6b 00
-    6a 00 69 00 68 00 39 00 38 00 37 00 36 00 88 00
-    87 00 86 00 85 c0 32 c0 2e c0 2a c0 26 c0 0f c0
-    05 00 9d 00 3d 00 35 00 84 c0 2f c0 2b c0 27 c0
-    23 c0 13 c0 09 00 a4 00 a2 00 a0 00 9e 00 67 00
-    40 00 3f 00 3e 00 33 00 32 00 31 00 30 00 9a 00
-    99 00 98 00 97 00 45 00 44 00 43 00 42 c0 31 c0
-    2d c0 29 c0 25 c0 0e c0 04 00 9c 00 3c 00 2f 00
-    96 00 41 00 07 c0 11 c0 07 c0 0c c0 02 00 05 00
-    04 c0 12 c0 08 00 16 00 13 00 10 00 0d c0 0d c0
-    03 00 0a 00 15 00 12 00 0f 00 0c 00 09 00 ff 02
-    01 00 00 55 00 0b 00 04 03 00 01 02 00 0a 00 1c
-    00 1a 00 17 00 19 00 1c 00 1b 00 18 00 1a 00 16
-    00 0e 00 0d 00 0b 00 0c 00 09 00 0a 00 23 00 00
-    00 0d 00 20 00 1e 06 01 06 02 06 03 05 01 05 02
-    05 03 04 01 04 02 04 03 03 01 03 02 03 03 02 01
-    02 02 02 03 00 0f 00 01 01
-    02 00 00 37 03 03 56 79 36 ad ae a6 c2 11 2b 4e
-    76 cc 92 d6 69 a7 4f 7f 4f 18 b1 a3 27 c8 95 6e
-    ce f0 46 ce d1 a7 00 c0 2f 00 00 0f ff 01 00 01
-    00 00 23 00 00 00 0b 00 02 01 00
-    0b 00 0c 05 00 0c 02 00 04 84 30 82 04 80 30 82
-    03 68 a0 03 02 01 02 02 08 4e af 49 28 ba c6 7f
-    91 30 0d 06 09 2a 86 48 86 f7 0d 01 01 0b 05 00
-    30 49 31 0b 30 09 06 03 55 04 06 13 02 55 53 31
-    13 30 11 06 03 55 04 0a 13 0a 47 6f 6f 67 6c 65
-    20 49 6e 63 31 25 30 23 06 03 55 04 03 13 1c 47
-    6f 6f 67 6c 65 20 49 6e 74 65 72 6e 65 74 20 41
-    75 74 68 6f 72 69 74 79 20 47 32 30 1e 17 0d 31
-    35 31 32 31 30 31 38 30 33 34 37 5a 17 0d 31 36
-    30 33 30 39 30 30 30 30 30 30 5a 30 68 31 0b 30
-    09 06 03 55 04 06 13 02 55 53 31 13 30 11 06 03
-    55 04 08 0c 0a 43 61 6c 69 66 6f 72 6e 69 61 31
-    16 30 14 06 03 55 04 07 0c 0d 4d 6f 75 6e 74 61
-    69 6e 20 56 69 65 77 31 13 30 11 06 03 55 04 0a
-    0c 0a 47 6f 6f 67 6c 65 20 49 6e 63 31 17 30 15
-    06 03 55 04 03 0c 0e 77 77 77 2e 67 6f 6f 67 6c
-    65 2e 63 6f 6d 30 82 01 22 30 0d 06 09 2a 86 48
-    86 f7 0d 01 01 01 05 00 03 82 01 0f 00 30 82 01
-    0a 02 82 01 01 00 95 c1 ca 4e 3b f9 ed af 46 1c
-    bc 4c 0c 20 8e a9 6f aa 0a 1f 49 19 8c 57 d1 09
-    41 09 33 b3 ef 5a 0d 3c a9 42 f0 7c df 19 fc 77
-    9e 5d 04 5e 73 86 26 a5 0c 6d d2 ed 91 ed 7e ea
-    54 ca c0 9f 33 90 0a d5 ac 6b de 75 f9 29 73 b9
-    15 da 2d a0 dc 0b 43 ff b1 3e 8a 0f 6c 67 c8 54
-    d5 17 df ce ab 79 38 e3 06 a9 42 8a 0e 60 b4 25
-    78 7a ee e8 58 b7 51 82 4c db 12 ea f2 32 97 4a
-    8b 5a 3a 16 04 8d 8f fa fe f3 2f 65 54 15 69 cc
-    df 32 cb bc 15 93 cb db 6a 9a 81 5c 1b 11 c6 b6
-    99 a0 bc 0d 3f 68 12 35 65 a6 28 a2 31 15 38 42
-    7c d2 36 e0 ff ae cb 24 96 a5 17 b9 1b 3e 30 34
-    0f 8e 4a e1 d1 5c f3 62 03 a8 8c 7b eb c6 db 45
-    3c 71 54 ae 63 06 55 69 0a 88 f8 30 20 ad df f1
-    f2 3a 02 8d 94 e0 75 0a 11 ce 7e 6e 78 10 b9 b8
-    39 62 42 dd 93 10 52 3c d4 9c 05 f7 df f4 8b 29
-    0a ef d5 d2 de 2b 02 03 01 00 01 a3 82 01 4b 30
-    82 01 47 30 1d 06 03 55 1d 25 04 16 30 14 06 08
-    2b 06 01 05 05 07 03 01 06 08 2b 06 01 05 05 07
-    03 02 30 19 06 03 55 1d 11 04 12 30 10 82 0e 77
-    77 77 2e 67 6f 6f 67 6c 65 2e 63 6f 6d 30 68 06
-    08 2b 06 01 05 05 07 01 01 04 5c 30 5a 30 2b 06
-    08 2b 06 01 05 05 07 30 02 86 1f 68 74 74 70 3a
-    2f 2f 70 6b 69 2e 67 6f 6f 67 6c 65 2e 63 6f 6d
-    2f 47 49 41 47 32 2e 63 72 74 30 2b 06 08 2b 06
-    01 05 05 07 30 01 86 1f 68 74 74 70 3a 2f 2f 63
-    6c 69 65 6e 74 73 31 2e 67 6f 6f 67 6c 65 2e 63
-    6f 6d 2f 6f 63 73 70 30 1d 06 03 55 1d 0e 04 16
-    04 14 d1 57 e2 a3 90 58 95 37 97 90 3f 58 75 17
-    3e 05 e2 b4 f0 6f 30 0c 06 03 55 1d 13 01 01 ff
-    04 02 30 00 30 1f 06 03 55 1d 23 04 18 30 16 80
-    14 4a dd 06 16 1b bc f6 68 b5 76 f5 81 b6 bb 62
-    1a ba 5a 81 2f 30 21 06 03 55 1d 20 04 1a 30 18
-    30 0c 06 0a 2b 06 01 04 01 d6 79 02 05 01 30 08
-    06 06 67 81 0c 01 02 02 30 30 06 03 55 1d 1f 04
-    29 30 27 30 25 a0 23 a0 21 86 1f 68 74 74 70 3a
-    2f 2f 70 6b 69 2e 67 6f 6f 67 6c 65 2e 63 6f 6d
-    2f 47 49 41 47 32 2e 63 72 6c 30 0d 06 09 2a 86
-    48 86 f7 0d 01 01 0b 05 00 03 82 01 01 00 42 be
-    25 cd c8 f2 05 06 79 7e 7f d9 76 b5 03 aa 93 78
-    7f 1f 12 6b a8 5a 7e 81 95 39 f5 8c 92 db 74 d3
-    7c 7c ca 55 db dc fc 61 83 0d bb 7f ac 22 14 54
-    57 95 7f 39 6b 61 74 fc 09 c2 7a 85 76 de 61 e6
-    57 af f4 98 ec 28 71 56 2d fd 38 7d e9 63 46 1a
-    68 40 36 41 56 ff f1 c2 a6 14 56 9e 16 8e a8 81
-    ba c8 54 50 fe 3c 40 ad 3b d9 40 91 06 23 90 22
-    60 7c d0 9f b2 dd 50 cf 26 1f 5a 37 89 f4 7e 95
-    7f 90 88 0c 32 79 4f 68 7a 07 65 46 c9 48 d8 a3
-    28 3c eb 8e 16 3d f6 f4 d1 71 07 0f 97 55 05 cc
-    b1 12 48 4c f8 3c a6 77 a0 3e 62 c2 3a 3a 73 f3
-    2e e9 07 16 f1 1a 77 da 23 ae 88 f1 7e 1d 02 bb
-    1a 5d 7e 2b e6 69 1f 86 4d 9e 9a 6e df c5 0f 2a
-    51 a5 bd 98 aa 16 d1 7b f0 1b 15 34 03 02 88 f0
-    ea 29 b9 71 e8 0f de ef af 61 92 2b 44 0d 67 5f
-    40 f7 a9 ad 4d 69 d0 d9 cb b6 8b da a3 1b 00 03
-    f4 30 82 03 f0 30 82 02 d8 a0 03 02 01 02 02 03
-    02 3a 83 30 0d 06 09 2a 86 48 86 f7 0d 01 01 0b
-    05 00 30 42 31 0b 30 09 06 03 55 04 06 13 02 55
-    53 31 16 30 14 06 03 55 04 0a 13 0d 47 65 6f 54
-    72 75 73 74 20 49 6e 63 2e 31 1b 30 19 06 03 55
-    04 03 13 12 47 65 6f 54 72 75 73 74 20 47 6c 6f
-    62 61 6c 20 43 41 30 1e 17 0d 31 33 30 34 30 35
-    31 35 31 35 35 36 5a 17 0d 31 36 31 32 33 31 32
-    33 35 39 35 39 5a 30 49 31 0b 30 09 06 03 55 04
-    06 13 02 55 53 31 13 30 11 06 03 55 04 0a 13 0a
-    47 6f 6f 67 6c 65 20 49 6e 63 31 25 30 23 06 03
-    55 04 03 13 1c 47 6f 6f 67 6c 65 20 49 6e 74 65
-    72 6e 65 74 20 41 75 74 68 6f 72 69 74 79 20 47
-    32 30 82 01 22 30 0d 06 09 2a 86 48 86 f7 0d 01
-    01 01 05 00 03 82 01 0f 00 30 82 01 0a 02 82 01
-    01 00 9c 2a 04 77 5c d8 50 91 3a 06 a3 82 e0 d8
-    50 48 bc 89 3f f1 19 70 1a 88 46 7e e0 8f c5 f1
-    89 ce 21 ee 5a fe 61 0d b7 32 44 89 a0 74 0b 53
-    4f 55 a4 ce 82 62 95 ee eb 59 5f c6 e1 05 80 12
-    c4 5e 94 3f bc 5b 48 38 f4 53 f7 24 e6 fb 91 e9
-    15 c4 cf f4 53 0d f4 4a fc 9f 54 de 7d be a0 6b
-    6f 87 c0 d0 50 1f 28 30 03 40 da 08 73 51 6c 7f
-    ff 3a 3c a7 37 06 8e bd 4b 11 04 eb 7d 24 de e6
-    f9 fc 31 71 fb 94 d5 60 f3 2e 4a af 42 d2 cb ea
-    c4 6a 1a b2 cc 53 dd 15 4b 8b 1f c8 19 61 1f cd
-    9d a8 3e 63 2b 84 35 69 65 84 c8 19 c5 46 22 f8
-    53 95 be e3 80 4a 10 c6 2a ec ba 97 20 11 c7 39
-    99 10 04 a0 f0 61 7a 95 25 8c 4e 52 75 e2 b6 ed
-    08 ca 14 fc ce 22 6a b3 4e cf 46 03 97 97 03 7e
-    c0 b1 de 7b af 45 33 cf ba 3e 71 b7 de f4 25 25
-    c2 0d 35 89 9d 9d fb 0e 11 79 89 1e 37 c5 af 8e
-    72 69 02 03 01 00 01 a3 81 e7 30 81 e4 30 1f 06
-    03 55 1d 23 04 18 30 16 80 14 c0 7a 98 68 8d 89
-    fb ab 05 64 0c 11 7d aa 7d 65 b8 ca cc 4e 30 1d
-    06 03 55 1d 0e 04 16 04 14 4a dd 06 16 1b bc f6
-    68 b5 76 f5 81 b6 bb 62 1a ba 5a 81 2f 30 0e 06
-    03 55 1d 0f 01 01 ff 04 04 03 02 01 06 30 2e 06
-    08 2b 06 01 05 05 07 01 01 04 22 30 20 30 1e 06
-    08 2b 06 01 05 05 07 30 01 86 12 68 74 74 70 3a
-    2f 2f 67 2e 73 79 6d 63 64 2e 63 6f 6d 30 12 06
-    03 55 1d 13 01 01 ff 04 08 30 06 01 01 ff 02 01
-    00 30 35 06 03 55 1d 1f 04 2e 30 2c 30 2a a0 28
-    a0 26 86 24 68 74 74 70 3a 2f 2f 67 2e 73 79 6d
-    63 62 2e 63 6f 6d 2f 63 72 6c 73 2f 67 74 67 6c
-    6f 62 61 6c 2e 63 72 6c 30 17 06 03 55 1d 20 04
-    10 30 0e 30 0c 06 0a 2b 06 01 04 01 d6 79 02 05
-    01 30 0d 06 09 2a 86 48 86 f7 0d 01 01 0b 05 00
-    03 82 01 01 00 aa fa a9 20 cd 6a 67 83 ed 5e d4
-    7e de 1d c4 7f e0 25 06 00 c5 24 fb a9 c8 2d 6d
-    7e de 9d 82 65 2c 81 63 34 66 3e e9 52 c2 08 b4
-    cb 2f f7 5f 99 3a 6a 9c 50 7a 85 05 8c 7d d1 2a
-    48 84 d3 09 6c 7c c2 cd 35 9f f3 82 ee 52 de 68
-    5f e4 00 8a 17 20 96 f7 29 8d 9a 4d cb a8 de 86
-    c8 0d 6f 56 87 03 7d 03 3f dc fa 79 7d 21 19 f9
-    c8 3a 2f 51 76 8c c7 41 92 71 8f 25 ce 37 f8 4a
-    4c 00 23 ef c4 35 10 ae e0 23 80 73 7c 4d 34 2e
-    c8 6e 90 d6 10 1e 99 84 73 1a 70 f2 ed 55 0e ee
-    17 06 ea 67 ee 32 eb 2c dd 67 07 3f f6 8b c2 70
-    de 5b 00 e6 bb 1b d3 36 1a 22 6c 6c b0 35 42 6c
-    90 09 3d 93 e9 64 09 22 0e 85 06 9f c2 73 21 d3
-    e6 5f 80 e4 8d 85 22 3a 73 03 b1 60 8e ae 68 e2
-    f4 3e 97 e7 60 12 09 68 36 de 3a d6 e2 43 95 5b
-    37 81 92 81 1f bb 8d d7 ad 52 64 16 57 96 d9 5e
-    34 7e c8 35 d8 00 03 81 30 82 03 7d 30 82 02 e6
-    a0 03 02 01 02 02 03 12 bb e6 30 0d 06 09 2a 86
-    48 86 f7 0d 01 01 05 05 00 30 4e 31 0b 30 09 06
-    03 55 04 06 13 02 55 53 31 10 30 0e 06 03 55 04
-    0a 13 07 45 71 75 69 66 61 78 31 2d 30 2b 06 03
-    55 04 0b 13 24 45 71 75 69 66 61 78 20 53 65 63
-    75 72 65 20 43 65 72 74 69 66 69 63 61 74 65 20
-    41 75 74 68 6f 72 69 74 79 30 1e 17 0d 30 32 30
-    35 32 31 30 34 30 30 30 30 5a 17 0d 31 38 30 38
-    32 31 30 34 30 30 30 30 5a 30 42 31 0b 30 09 06
-    03 55 04 06 13 02 55 53 31 16 30 14 06 03 55 04
-    0a 13 0d 47 65 6f 54 72 75 73 74 20 49 6e 63 2e
-    31 1b 30 19 06 03 55 04 03 13 12 47 65 6f 54 72
-    75 73 74 20 47 6c 6f 62 61 6c 20 43 41 30 82 01
-    22 30 0d 06 09 2a 86 48 86 f7 0d 01 01 01 05 00
-    03 82 01 0f 00 30 82 01 0a 02 82 01 01 00 da cc
-    18 63 30 fd f4 17 23 1a 56 7e 5b df 3c 6c 38 e4
-    71 b7 78 91 d4 bc a1 d8 4c f8 a8 43 b6 03 e9 4d
-    21 07 08 88 da 58 2f 66 39 29 bd 05 78 8b 9d 38
-    e8 05 b7 6a 7e 71 a4 e6 c4 60 a6 b0 ef 80 e4 89
-    28 0f 9e 25 d6 ed 83 f3 ad a6 91 c7 98 c9 42 18
-    35 14 9d ad 98 46 92 2e 4f ca f1 87 43 c1 16 95
-    57 2d 50 ef 89 2d 80 7a 57 ad f2 ee 5f 6b d2 00
-    8d b9 14 f8 14 15 35 d9 c0 46 a3 7b 72 c8 91 bf
-    c9 55 2b cd d0 97 3e 9c 26 64 cc df ce 83 19 71
-    ca 4e e6 d4 d5 7b a9 19 cd 55 de c8 ec d2 5e 38
-    53 e5 5c 4f 8c 2d fe 50 23 36 fc 66 e6 cb 8e a4
-    39 19 00 b7 95 02 39 91 0b 0e fe 38 2e d1 1d 05
-    9a f6 4d 3e 6f 0f 07 1d af 2c 1e 8f 60 39 e2 fa
-    36 53 13 39 d4 5e 26 2b db 3d a8 14 bd 32 eb 18
-    03 28 52 04 71 e5 ab 33 3d e1 38 bb 07 36 84 62
-    9c 79 ea 16 30 f4 5f c0 2b e8 71 6b e4 f9 02 03
-    01 00 01 a3 81 f0 30 81 ed 30 1f 06 03 55 1d 23
-    04 18 30 16 80 14 48 e6 68 f9 2b d2 b2 95 d7 47
-    d8 23 20 10 4f 33 98 90 9f d4 30 1d 06 03 55 1d
-    0e 04 16 04 14 c0 7a 98 68 8d 89 fb ab 05 64 0c
-    11 7d aa 7d 65 b8 ca cc 4e 30 0f 06 03 55 1d 13
-    01 01 ff 04 05 30 03 01 01 ff 30 0e 06 03 55 1d
-    0f 01 01 ff 04 04 03 02 01 06 30 3a 06 03 55 1d
-    1f 04 33 30 31 30 2f a0 2d a0 2b 86 29 68 74 74
-    70 3a 2f 2f 63 72 6c 2e 67 65 6f 74 72 75 73 74
-    2e 63 6f 6d 2f 63 72 6c 73 2f 73 65 63 75 72 65
-    63 61 2e 63 72 6c 30 4e 06 03 55 1d 20 04 47 30
-    45 30 43 06 04 55 1d 20 00 30 3b 30 39 06 08 2b
-    06 01 05 05 07 02 01 16 2d 68 74 74 70 73 3a 2f
-    2f 77 77 77 2e 67 65 6f 74 72 75 73 74 2e 63 6f
-    6d 2f 72 65 73 6f 75 72 63 65 73 2f 72 65 70 6f
-    73 69 74 6f 72 79 30 0d 06 09 2a 86 48 86 f7 0d
-    01 01 05 05 00 03 81 81 00 76 e1 12 6e 4e 4b 16
-    12 86 30 06 b2 81 08 cf f0 08 c7 c7 71 7e 66 ee
-    c2 ed d4 3b 1f ff f0 f0 c8 4e d6 43 38 b0 b9 30
-    7d 18 d0 55 83 a2 6a cb 36 11 9c e8 48 66 a3 6d
-    7f b8 13 d4 47 fe 8b 5a 5c 73 fc ae d9 1b 32 19
-    38 ab 97 34 14 aa 96 d2 eb a3 1c 14 08 49 b6 bb
-    e5 91 ef 83 36 eb 1d 56 6f ca da bc 73 63 90 e4
-    7f 7b 3e 22 cb 3d 07 ed 5f 38 74 9c e3 03 50 4e
-    a1 af 98 ee 61 f2 84 3f 12
-    0c 00 01 49 03 00 17 41 04 82 25 28 9f d3 d2 33
-    4c 97 17 fe e4 35 71 86 16 dc 53 c2 73 01 e5 97
-    da 3c d7 e5 72 5a 08 c1 66 d0 c3 83 66 95 5c 50
-    f0 86 57 c4 43 93 8e ba b0 7c 22 7d 10 71 29 b7
-    54 30 30 90 47 0d ab 04 0b 04 01 01 00 88 5f 25
-    b1 e3 40 fc 13 e2 ad 92 13 bc c8 a2 9c bf 60 92
-    4c fe 25 8d 84 7c 99 f1 b9 d8 ea 8b aa db 5c 81
-    d8 94 dd 80 04 6b a2 48 c3 00 1c 3d 6e f6 6b 88
-    ab 1b 16 61 49 1c ac c0 f9 18 e3 4b 90 40 fb 08
-    45 5d ca a7 7c fe 6d da 1f e7 90 0a 20 b8 d3 f6
-    d3 08 d8 d0 fd 85 b6 4e ef 86 92 27 52 cb d4 6e
-    3a 99 34 1d 6a 9c 6c 4f c1 49 25 83 45 25 bd 01
-    12 d5 cc 2a 4b cd 78 8c f2 30 c2 ff 42 08 04 25
-    9f 28 e0 c6 11 c3 69 fb 8f 44 f9 fc e3 3b bb 5f
-    8c fb 85 b7 ab fb 28 54 da 28 2d 63 cc 66 7d bb
-    13 9e 0a 69 e2 cd 2b dd 72 92 10 cb 9d bc 3e 6b
-    19 46 4f 20 ae f6 fe 09 97 a0 91 a3 f2 1c b8 e1
-    4a de 45 d5 98 e8 b7 f6 52 60 83 52 46 fb e2 7b
-    11 a1 fe 71 bc 73 71 46 6f 23 08 36 8e 7f 88 ca
-    31 09 f2 3c 59 1f 19 d5 cf c3 f5 bc 1c fe c1 65
-    24 11 f6 83 02 1a 0d 6b a5 61 2b 6d 81
-    0e 00 00 00
-    10 00 00 42 41 04 19 10 57 55 ae 9a 6d 06 19 04
-    df fb 8c 16 c8 14 f2 23 92 6d 36 36 0e 81 0c 71
-    dc 94 89 c9 46 97 ee e9 b5 d7 bb 10 f4 06 0c fe
-    9b 45 a6 48 13 4d c4 a7 47 ef 50 7d 5c 41 7c 28
-    ef ea bd 43 c5 8a
-    14 00 00 0c 14 a0 9d 4d f1 5b 1a f7 c9 eb f6 eb
-    04 00 00 aa 00 01 89 c0 00 a4 7f e7 71 ef 4f d6
-    80 97 4b c9 4a 5c 09 67 87 35 ef 5f ee df ba 3d
-    7d c8 65 c8 a6 60 c9 6d 2e 18 c7 4b 33 75 99 0a
-    a7 22 ef a3 9b 44 38 f3 d0 f1 4d 70 47 3b 97 89
-    37 e6 24 fc 55 78 44 6a fa 47 8a 91 2b 85 03 12
-    68 43 82 dc 81 90 aa 47 a8 6f 31 07 90 0f 19 c3
-    9c c2 e9 d2 6d 78 27 c4 94 c8 d2 75 fe 7d 8d 33
-    4a 27 83 3f f2 8b a7 be 4f eb 3c 70 4f 5d c3 42
-    e9 4f e2 b3 21 44 cc 04 a6 0e 84 74 e8 ef 8e 27
-    fb 69 b9 e0 c2 12 86 f4 ce 5b 11 96 1e 62 99 cf
-    2c fb 72 d5 ca da 3a 7a c8 cd 42 7f f9 03
-    14 00 00 0c 95 2b fc 2b c0 eb 2f 2c eb 93 f0 1c
+01 00 01 35 03 03 f5 f5 3d 3d d5 43 de 9c c5 ab
+    09 b0 98 1a 13 46 48 7e c9 e4 35 1c 98 03 1b 38
+    04 90 1e 5e b0 ed 00 00 b6 c0 30 c0 2c c0 28 c0
+    24 c0 14 c0 0a 00 a5 00 a3 00 a1 00 9f 00 6b 00
+    6a 00 69 00 68 00 39 00 38 00 37 00 36 00 88 00
+    87 00 86 00 85 c0 32 c0 2e c0 2a c0 26 c0 0f c0
+    05 00 9d 00 3d 00 35 00 84 c0 2f c0 2b c0 27 c0
+    23 c0 13 c0 09 00 a4 00 a2 00 a0 00 9e 00 67 00
+    40 00 3f 00 3e 00 33 00 32 00 31 00 30 00 9a 00
+    99 00 98 00 97 00 45 00 44 00 43 00 42 c0 31 c0
+    2d c0 29 c0 25 c0 0e c0 04 00 9c 00 3c 00 2f 00
+    96 00 41 00 07 c0 11 c0 07 c0 0c c0 02 00 05 00
+    04 c0 12 c0 08 00 16 00 13 00 10 00 0d c0 0d c0
+    03 00 0a 00 15 00 12 00 0f 00 0c 00 09 00 ff 02
+    01 00 00 55 00 0b 00 04 03 00 01 02 00 0a 00 1c
+    00 1a 00 17 00 19 00 1c 00 1b 00 18 00 1a 00 16
+    00 0e 00 0d 00 0b 00 0c 00 09 00 0a 00 23 00 00
+    00 0d 00 20 00 1e 06 01 06 02 06 03 05 01 05 02
+    05 03 04 01 04 02 04 03 03 01 03 02 03 03 02 01
+    02 02 02 03 00 0f 00 01 01
+    02 00 00 37 03 03 56 79 36 ad ae a6 c2 11 2b 4e
+    76 cc 92 d6 69 a7 4f 7f 4f 18 b1 a3 27 c8 95 6e
+    ce f0 46 ce d1 a7 00 c0 2f 00 00 0f ff 01 00 01
+    00 00 23 00 00 00 0b 00 02 01 00
+    0b 00 0c 05 00 0c 02 00 04 84 30 82 04 80 30 82
+    03 68 a0 03 02 01 02 02 08 4e af 49 28 ba c6 7f
+    91 30 0d 06 09 2a 86 48 86 f7 0d 01 01 0b 05 00
+    30 49 31 0b 30 09 06 03 55 04 06 13 02 55 53 31
+    13 30 11 06 03 55 04 0a 13 0a 47 6f 6f 67 6c 65
+    20 49 6e 63 31 25 30 23 06 03 55 04 03 13 1c 47
+    6f 6f 67 6c 65 20 49 6e 74 65 72 6e 65 74 20 41
+    75 74 68 6f 72 69 74 79 20 47 32 30 1e 17 0d 31
+    35 31 32 31 30 31 38 30 33 34 37 5a 17 0d 31 36
+    30 33 30 39 30 30 30 30 30 30 5a 30 68 31 0b 30
+    09 06 03 55 04 06 13 02 55 53 31 13 30 11 06 03
+    55 04 08 0c 0a 43 61 6c 69 66 6f 72 6e 69 61 31
+    16 30 14 06 03 55 04 07 0c 0d 4d 6f 75 6e 74 61
+    69 6e 20 56 69 65 77 31 13 30 11 06 03 55 04 0a
+    0c 0a 47 6f 6f 67 6c 65 20 49 6e 63 31 17 30 15
+    06 03 55 04 03 0c 0e 77 77 77 2e 67 6f 6f 67 6c
+    65 2e 63 6f 6d 30 82 01 22 30 0d 06 09 2a 86 48
+    86 f7 0d 01 01 01 05 00 03 82 01 0f 00 30 82 01
+    0a 02 82 01 01 00 95 c1 ca 4e 3b f9 ed af 46 1c
+    bc 4c 0c 20 8e a9 6f aa 0a 1f 49 19 8c 57 d1 09
+    41 09 33 b3 ef 5a 0d 3c a9 42 f0 7c df 19 fc 77
+    9e 5d 04 5e 73 86 26 a5 0c 6d d2 ed 91 ed 7e ea
+    54 ca c0 9f 33 90 0a d5 ac 6b de 75 f9 29 73 b9
+    15 da 2d a0 dc 0b 43 ff b1 3e 8a 0f 6c 67 c8 54
+    d5 17 df ce ab 79 38 e3 06 a9 42 8a 0e 60 b4 25
+    78 7a ee e8 58 b7 51 82 4c db 12 ea f2 32 97 4a
+    8b 5a 3a 16 04 8d 8f fa fe f3 2f 65 54 15 69 cc
+    df 32 cb bc 15 93 cb db 6a 9a 81 5c 1b 11 c6 b6
+    99 a0 bc 0d 3f 68 12 35 65 a6 28 a2 31 15 38 42
+    7c d2 36 e0 ff ae cb 24 96 a5 17 b9 1b 3e 30 34
+    0f 8e 4a e1 d1 5c f3 62 03 a8 8c 7b eb c6 db 45
+    3c 71 54 ae 63 06 55 69 0a 88 f8 30 20 ad df f1
+    f2 3a 02 8d 94 e0 75 0a 11 ce 7e 6e 78 10 b9 b8
+    39 62 42 dd 93 10 52 3c d4 9c 05 f7 df f4 8b 29
+    0a ef d5 d2 de 2b 02 03 01 00 01 a3 82 01 4b 30
+    82 01 47 30 1d 06 03 55 1d 25 04 16 30 14 06 08
+    2b 06 01 05 05 07 03 01 06 08 2b 06 01 05 05 07
+    03 02 30 19 06 03 55 1d 11 04 12 30 10 82 0e 77
+    77 77 2e 67 6f 6f 67 6c 65 2e 63 6f 6d 30 68 06
+    08 2b 06 01 05 05 07 01 01 04 5c 30 5a 30 2b 06
+    08 2b 06 01 05 05 07 30 02 86 1f 68 74 74 70 3a
+    2f 2f 70 6b 69 2e 67 6f 6f 67 6c 65 2e 63 6f 6d
+    2f 47 49 41 47 32 2e 63 72 74 30 2b 06 08 2b 06
+    01 05 05 07 30 01 86 1f 68 74 74 70 3a 2f 2f 63
+    6c 69 65 6e 74 73 31 2e 67 6f 6f 67 6c 65 2e 63
+    6f 6d 2f 6f 63 73 70 30 1d 06 03 55 1d 0e 04 16
+    04 14 d1 57 e2 a3 90 58 95 37 97 90 3f 58 75 17
+    3e 05 e2 b4 f0 6f 30 0c 06 03 55 1d 13 01 01 ff
+    04 02 30 00 30 1f 06 03 55 1d 23 04 18 30 16 80
+    14 4a dd 06 16 1b bc f6 68 b5 76 f5 81 b6 bb 62
+    1a ba 5a 81 2f 30 21 06 03 55 1d 20 04 1a 30 18
+    30 0c 06 0a 2b 06 01 04 01 d6 79 02 05 01 30 08
+    06 06 67 81 0c 01 02 02 30 30 06 03 55 1d 1f 04
+    29 30 27 30 25 a0 23 a0 21 86 1f 68 74 74 70 3a
+    2f 2f 70 6b 69 2e 67 6f 6f 67 6c 65 2e 63 6f 6d
+    2f 47 49 41 47 32 2e 63 72 6c 30 0d 06 09 2a 86
+    48 86 f7 0d 01 01 0b 05 00 03 82 01 01 00 42 be
+    25 cd c8 f2 05 06 79 7e 7f d9 76 b5 03 aa 93 78
+    7f 1f 12 6b a8 5a 7e 81 95 39 f5 8c 92 db 74 d3
+    7c 7c ca 55 db dc fc 61 83 0d bb 7f ac 22 14 54
+    57 95 7f 39 6b 61 74 fc 09 c2 7a 85 76 de 61 e6
+    57 af f4 98 ec 28 71 56 2d fd 38 7d e9 63 46 1a
+    68 40 36 41 56 ff f1 c2 a6 14 56 9e 16 8e a8 81
+    ba c8 54 50 fe 3c 40 ad 3b d9 40 91 06 23 90 22
+    60 7c d0 9f b2 dd 50 cf 26 1f 5a 37 89 f4 7e 95
+    7f 90 88 0c 32 79 4f 68 7a 07 65 46 c9 48 d8 a3
+    28 3c eb 8e 16 3d f6 f4 d1 71 07 0f 97 55 05 cc
+    b1 12 48 4c f8 3c a6 77 a0 3e 62 c2 3a 3a 73 f3
+    2e e9 07 16 f1 1a 77 da 23 ae 88 f1 7e 1d 02 bb
+    1a 5d 7e 2b e6 69 1f 86 4d 9e 9a 6e df c5 0f 2a
+    51 a5 bd 98 aa 16 d1 7b f0 1b 15 34 03 02 88 f0
+    ea 29 b9 71 e8 0f de ef af 61 92 2b 44 0d 67 5f
+    40 f7 a9 ad 4d 69 d0 d9 cb b6 8b da a3 1b 00 03
+    f4 30 82 03 f0 30 82 02 d8 a0 03 02 01 02 02 03
+    02 3a 83 30 0d 06 09 2a 86 48 86 f7 0d 01 01 0b
+    05 00 30 42 31 0b 30 09 06 03 55 04 06 13 02 55
+    53 31 16 30 14 06 03 55 04 0a 13 0d 47 65 6f 54
+    72 75 73 74 20 49 6e 63 2e 31 1b 30 19 06 03 55
+    04 03 13 12 47 65 6f 54 72 75 73 74 20 47 6c 6f
+    62 61 6c 20 43 41 30 1e 17 0d 31 33 30 34 30 35
+    31 35 31 35 35 36 5a 17 0d 31 36 31 32 33 31 32
+    33 35 39 35 39 5a 30 49 31 0b 30 09 06 03 55 04
+    06 13 02 55 53 31 13 30 11 06 03 55 04 0a 13 0a
+    47 6f 6f 67 6c 65 20 49 6e 63 31 25 30 23 06 03
+    55 04 03 13 1c 47 6f 6f 67 6c 65 20 49 6e 74 65
+    72 6e 65 74 20 41 75 74 68 6f 72 69 74 79 20 47
+    32 30 82 01 22 30 0d 06 09 2a 86 48 86 f7 0d 01
+    01 01 05 00 03 82 01 0f 00 30 82 01 0a 02 82 01
+    01 00 9c 2a 04 77 5c d8 50 91 3a 06 a3 82 e0 d8
+    50 48 bc 89 3f f1 19 70 1a 88 46 7e e0 8f c5 f1
+    89 ce 21 ee 5a fe 61 0d b7 32 44 89 a0 74 0b 53
+    4f 55 a4 ce 82 62 95 ee eb 59 5f c6 e1 05 80 12
+    c4 5e 94 3f bc 5b 48 38 f4 53 f7 24 e6 fb 91 e9
+    15 c4 cf f4 53 0d f4 4a fc 9f 54 de 7d be a0 6b
+    6f 87 c0 d0 50 1f 28 30 03 40 da 08 73 51 6c 7f
+    ff 3a 3c a7 37 06 8e bd 4b 11 04 eb 7d 24 de e6
+    f9 fc 31 71 fb 94 d5 60 f3 2e 4a af 42 d2 cb ea
+    c4 6a 1a b2 cc 53 dd 15 4b 8b 1f c8 19 61 1f cd
+    9d a8 3e 63 2b 84 35 69 65 84 c8 19 c5 46 22 f8
+    53 95 be e3 80 4a 10 c6 2a ec ba 97 20 11 c7 39
+    99 10 04 a0 f0 61 7a 95 25 8c 4e 52 75 e2 b6 ed
+    08 ca 14 fc ce 22 6a b3 4e cf 46 03 97 97 03 7e
+    c0 b1 de 7b af 45 33 cf ba 3e 71 b7 de f4 25 25
+    c2 0d 35 89 9d 9d fb 0e 11 79 89 1e 37 c5 af 8e
+    72 69 02 03 01 00 01 a3 81 e7 30 81 e4 30 1f 06
+    03 55 1d 23 04 18 30 16 80 14 c0 7a 98 68 8d 89
+    fb ab 05 64 0c 11 7d aa 7d 65 b8 ca cc 4e 30 1d
+    06 03 55 1d 0e 04 16 04 14 4a dd 06 16 1b bc f6
+    68 b5 76 f5 81 b6 bb 62 1a ba 5a 81 2f 30 0e 06
+    03 55 1d 0f 01 01 ff 04 04 03 02 01 06 30 2e 06
+    08 2b 06 01 05 05 07 01 01 04 22 30 20 30 1e 06
+    08 2b 06 01 05 05 07 30 01 86 12 68 74 74 70 3a
+    2f 2f 67 2e 73 79 6d 63 64 2e 63 6f 6d 30 12 06
+    03 55 1d 13 01 01 ff 04 08 30 06 01 01 ff 02 01
+    00 30 35 06 03 55 1d 1f 04 2e 30 2c 30 2a a0 28
+    a0 26 86 24 68 74 74 70 3a 2f 2f 67 2e 73 79 6d
+    63 62 2e 63 6f 6d 2f 63 72 6c 73 2f 67 74 67 6c
+    6f 62 61 6c 2e 63 72 6c 30 17 06 03 55 1d 20 04
+    10 30 0e 30 0c 06 0a 2b 06 01 04 01 d6 79 02 05
+    01 30 0d 06 09 2a 86 48 86 f7 0d 01 01 0b 05 00
+    03 82 01 01 00 aa fa a9 20 cd 6a 67 83 ed 5e d4
+    7e de 1d c4 7f e0 25 06 00 c5 24 fb a9 c8 2d 6d
+    7e de 9d 82 65 2c 81 63 34 66 3e e9 52 c2 08 b4
+    cb 2f f7 5f 99 3a 6a 9c 50 7a 85 05 8c 7d d1 2a
+    48 84 d3 09 6c 7c c2 cd 35 9f f3 82 ee 52 de 68
+    5f e4 00 8a 17 20 96 f7 29 8d 9a 4d cb a8 de 86
+    c8 0d 6f 56 87 03 7d 03 3f dc fa 79 7d 21 19 f9
+    c8 3a 2f 51 76 8c c7 41 92 71 8f 25 ce 37 f8 4a
+    4c 00 23 ef c4 35 10 ae e0 23 80 73 7c 4d 34 2e
+    c8 6e 90 d6 10 1e 99 84 73 1a 70 f2 ed 55 0e ee
+    17 06 ea 67 ee 32 eb 2c dd 67 07 3f f6 8b c2 70
+    de 5b 00 e6 bb 1b d3 36 1a 22 6c 6c b0 35 42 6c
+    90 09 3d 93 e9 64 09 22 0e 85 06 9f c2 73 21 d3
+    e6 5f 80 e4 8d 85 22 3a 73 03 b1 60 8e ae 68 e2
+    f4 3e 97 e7 60 12 09 68 36 de 3a d6 e2 43 95 5b
+    37 81 92 81 1f bb 8d d7 ad 52 64 16 57 96 d9 5e
+    34 7e c8 35 d8 00 03 81 30 82 03 7d 30 82 02 e6
+    a0 03 02 01 02 02 03 12 bb e6 30 0d 06 09 2a 86
+    48 86 f7 0d 01 01 05 05 00 30 4e 31 0b 30 09 06
+    03 55 04 06 13 02 55 53 31 10 30 0e 06 03 55 04
+    0a 13 07 45 71 75 69 66 61 78 31 2d 30 2b 06 03
+    55 04 0b 13 24 45 71 75 69 66 61 78 20 53 65 63
+    75 72 65 20 43 65 72 74 69 66 69 63 61 74 65 20
+    41 75 74 68 6f 72 69 74 79 30 1e 17 0d 30 32 30
+    35 32 31 30 34 30 30 30 30 5a 17 0d 31 38 30 38
+    32 31 30 34 30 30 30 30 5a 30 42 31 0b 30 09 06
+    03 55 04 06 13 02 55 53 31 16 30 14 06 03 55 04
+    0a 13 0d 47 65 6f 54 72 75 73 74 20 49 6e 63 2e
+    31 1b 30 19 06 03 55 04 03 13 12 47 65 6f 54 72
+    75 73 74 20 47 6c 6f 62 61 6c 20 43 41 30 82 01
+    22 30 0d 06 09 2a 86 48 86 f7 0d 01 01 01 05 00
+    03 82 01 0f 00 30 82 01 0a 02 82 01 01 00 da cc
+    18 63 30 fd f4 17 23 1a 56 7e 5b df 3c 6c 38 e4
+    71 b7 78 91 d4 bc a1 d8 4c f8 a8 43 b6 03 e9 4d
+    21 07 08 88 da 58 2f 66 39 29 bd 05 78 8b 9d 38
+    e8 05 b7 6a 7e 71 a4 e6 c4 60 a6 b0 ef 80 e4 89
+    28 0f 9e 25 d6 ed 83 f3 ad a6 91 c7 98 c9 42 18
+    35 14 9d ad 98 46 92 2e 4f ca f1 87 43 c1 16 95
+    57 2d 50 ef 89 2d 80 7a 57 ad f2 ee 5f 6b d2 00
+    8d b9 14 f8 14 15 35 d9 c0 46 a3 7b 72 c8 91 bf
+    c9 55 2b cd d0 97 3e 9c 26 64 cc df ce 83 19 71
+    ca 4e e6 d4 d5 7b a9 19 cd 55 de c8 ec d2 5e 38
+    53 e5 5c 4f 8c 2d fe 50 23 36 fc 66 e6 cb 8e a4
+    39 19 00 b7 95 02 39 91 0b 0e fe 38 2e d1 1d 05
+    9a f6 4d 3e 6f 0f 07 1d af 2c 1e 8f 60 39 e2 fa
+    36 53 13 39 d4 5e 26 2b db 3d a8 14 bd 32 eb 18
+    03 28 52 04 71 e5 ab 33 3d e1 38 bb 07 36 84 62
+    9c 79 ea 16 30 f4 5f c0 2b e8 71 6b e4 f9 02 03
+    01 00 01 a3 81 f0 30 81 ed 30 1f 06 03 55 1d 23
+    04 18 30 16 80 14 48 e6 68 f9 2b d2 b2 95 d7 47
+    d8 23 20 10 4f 33 98 90 9f d4 30 1d 06 03 55 1d
+    0e 04 16 04 14 c0 7a 98 68 8d 89 fb ab 05 64 0c
+    11 7d aa 7d 65 b8 ca cc 4e 30 0f 06 03 55 1d 13
+    01 01 ff 04 05 30 03 01 01 ff 30 0e 06 03 55 1d
+    0f 01 01 ff 04 04 03 02 01 06 30 3a 06 03 55 1d
+    1f 04 33 30 31 30 2f a0 2d a0 2b 86 29 68 74 74
+    70 3a 2f 2f 63 72 6c 2e 67 65 6f 74 72 75 73 74
+    2e 63 6f 6d 2f 63 72 6c 73 2f 73 65 63 75 72 65
+    63 61 2e 63 72 6c 30 4e 06 03 55 1d 20 04 47 30
+    45 30 43 06 04 55 1d 20 00 30 3b 30 39 06 08 2b
+    06 01 05 05 07 02 01 16 2d 68 74 74 70 73 3a 2f
+    2f 77 77 77 2e 67 65 6f 74 72 75 73 74 2e 63 6f
+    6d 2f 72 65 73 6f 75 72 63 65 73 2f 72 65 70 6f
+    73 69 74 6f 72 79 30 0d 06 09 2a 86 48 86 f7 0d
+    01 01 05 05 00 03 81 81 00 76 e1 12 6e 4e 4b 16
+    12 86 30 06 b2 81 08 cf f0 08 c7 c7 71 7e 66 ee
+    c2 ed d4 3b 1f ff f0 f0 c8 4e d6 43 38 b0 b9 30
+    7d 18 d0 55 83 a2 6a cb 36 11 9c e8 48 66 a3 6d
+    7f b8 13 d4 47 fe 8b 5a 5c 73 fc ae d9 1b 32 19
+    38 ab 97 34 14 aa 96 d2 eb a3 1c 14 08 49 b6 bb
+    e5 91 ef 83 36 eb 1d 56 6f ca da bc 73 63 90 e4
+    7f 7b 3e 22 cb 3d 07 ed 5f 38 74 9c e3 03 50 4e
+    a1 af 98 ee 61 f2 84 3f 12
+    0c 00 01 49 03 00 17 41 04 82 25 28 9f d3 d2 33
+    4c 97 17 fe e4 35 71 86 16 dc 53 c2 73 01 e5 97
+    da 3c d7 e5 72 5a 08 c1 66 d0 c3 83 66 95 5c 50
+    f0 86 57 c4 43 93 8e ba b0 7c 22 7d 10 71 29 b7
+    54 30 30 90 47 0d ab 04 0b 04 01 01 00 88 5f 25
+    b1 e3 40 fc 13 e2 ad 92 13 bc c8 a2 9c bf 60 92
+    4c fe 25 8d 84 7c 99 f1 b9 d8 ea 8b aa db 5c 81
+    d8 94 dd 80 04 6b a2 48 c3 00 1c 3d 6e f6 6b 88
+    ab 1b 16 61 49 1c ac c0 f9 18 e3 4b 90 40 fb 08
+    45 5d ca a7 7c fe 6d da 1f e7 90 0a 20 b8 d3 f6
+    d3 08 d8 d0 fd 85 b6 4e ef 86 92 27 52 cb d4 6e
+    3a 99 34 1d 6a 9c 6c 4f c1 49 25 83 45 25 bd 01
+    12 d5 cc 2a 4b cd 78 8c f2 30 c2 ff 42 08 04 25
+    9f 28 e0 c6 11 c3 69 fb 8f 44 f9 fc e3 3b bb 5f
+    8c fb 85 b7 ab fb 28 54 da 28 2d 63 cc 66 7d bb
+    13 9e 0a 69 e2 cd 2b dd 72 92 10 cb 9d bc 3e 6b
+    19 46 4f 20 ae f6 fe 09 97 a0 91 a3 f2 1c b8 e1
+    4a de 45 d5 98 e8 b7 f6 52 60 83 52 46 fb e2 7b
+    11 a1 fe 71 bc 73 71 46 6f 23 08 36 8e 7f 88 ca
+    31 09 f2 3c 59 1f 19 d5 cf c3 f5 bc 1c fe c1 65
+    24 11 f6 83 02 1a 0d 6b a5 61 2b 6d 81
+    0e 00 00 00
+    10 00 00 42 41 04 19 10 57 55 ae 9a 6d 06 19 04
+    df fb 8c 16 c8 14 f2 23 92 6d 36 36 0e 81 0c 71
+    dc 94 89 c9 46 97 ee e9 b5 d7 bb 10 f4 06 0c fe
+    9b 45 a6 48 13 4d c4 a7 47 ef 50 7d 5c 41 7c 28
+    ef ea bd 43 c5 8a
+    14 00 00 0c 14 a0 9d 4d f1 5b 1a f7 c9 eb f6 eb
+    04 00 00 aa 00 01 89 c0 00 a4 7f e7 71 ef 4f d6
+    80 97 4b c9 4a 5c 09 67 87 35 ef 5f ee df ba 3d
+    7d c8 65 c8 a6 60 c9 6d 2e 18 c7 4b 33 75 99 0a
+    a7 22 ef a3 9b 44 38 f3 d0 f1 4d 70 47 3b 97 89
+    37 e6 24 fc 55 78 44 6a fa 47 8a 91 2b 85 03 12
+    68 43 82 dc 81 90 aa 47 a8 6f 31 07 90 0f 19 c3
+    9c c2 e9 d2 6d 78 27 c4 94 c8 d2 75 fe 7d 8d 33
+    4a 27 83 3f f2 8b a7 be 4f eb 3c 70 4f 5d c3 42
+    e9 4f e2 b3 21 44 cc 04 a6 0e 84 74 e8 ef 8e 27
+    fb 69 b9 e0 c2 12 86 f4 ce 5b 11 96 1e 62 99 cf
+    2c fb 72 d5 ca da 3a 7a c8 cd 42 7f f9 03
+    14 00 00 0c 95 2b fc 2b c0 eb 2f 2c eb 93 f0 1c

\ No newline at end of file
diff --git a/tests/.gitignore b/tests/.gitignore
index f3e166f..1011654 100644
--- a/tests/.gitignore
+++ b/tests/.gitignore
@@ -1,13 +1,13 @@
-/pki/rsa
-/pki/dsa
-/pki.built
-/c-stub/echo
-/bench/jsse
-/bench/jsse-server
-/bench/jsse-client
-/bench/openssl
-/bench/openssl-server
-/bench/openssl-client
-*.bin
-*.o
-urandom
+/pki/rsa
+/pki/dsa
+/pki.built
+/c-stub/echo
+/bench/jsse
+/bench/jsse-server
+/bench/jsse-client
+/bench/openssl
+/bench/openssl-server
+/bench/openssl-client
+*.bin
+*.o
+urandom
diff --git a/tests/README b/tests/README
index 9e5eece..905cb40 100644
--- a/tests/README
+++ b/tests/README
@@ -1,32 +1,32 @@
-Regression tests for miTLS
-
-**** Running ****
-
-Typically, invoking 'make' will do.
-
-This will create temporary certificates and install them into the Windows
-certificate store (or the Mono emulation), if they don't already exist.
-Then, the test suite will be ran.
-
-The test suite is a python script that requires the pythonw executable,
-version 2.7 (it won't work with python 3).
-On Unix distributions, installing the python package is usually all you
-need to do.
-On Mac OS X, python should be already installed. Alternative versions can
-be obtained via brew.
-On Windows, you need the cygwin environment to run 'make'; however, you
-need the native Windows python distribution; python as provided by
-cygwin won't do. So, install python on Windows, then make sure the
-C:/Python27/pythonw.exe executable is in your cygwin path (e.g. by
-adding C:/Python27 to your Windows Path environment variable).
-
-After some time, the temporary certificates expire, at which points all
-tests start failing. Run 'make clean' to remove all the temporary
-certificates.
-
-**** Configuring testing scenarios ****
-
-The test suite reads its configuration from the test-suite.ini file.
-You can change its content to alter the test suite. (Yes, we should
-give more instructions on the contents of this file.)
-
+Regression tests for miTLS
+
+**** Running ****
+
+Typically, invoking 'make' will do.
+
+This will create temporary certificates and install them into the Windows
+certificate store (or the Mono emulation), if they don't already exist.
+Then, the test suite will be ran.
+
+The test suite is a python script that requires the pythonw executable,
+version 2.7 (it won't work with python 3).
+On Unix distributions, installing the python package is usually all you
+need to do.
+On Mac OS X, python should be already installed. Alternative versions can
+be obtained via brew.
+On Windows, you need the cygwin environment to run 'make'; however, you
+need the native Windows python distribution; python as provided by
+cygwin won't do. So, install python on Windows, then make sure the
+C:/Python27/pythonw.exe executable is in your cygwin path (e.g. by
+adding C:/Python27 to your Windows Path environment variable).
+
+After some time, the temporary certificates expire, at which points all
+tests start failing. Run 'make clean' to remove all the temporary
+certificates.
+
+**** Configuring testing scenarios ****
+
+The test suite reads its configuration from the test-suite.ini file.
+You can change its content to alter the test suite. (Yes, we should
+give more instructions on the contents of this file.)
+
diff --git a/tests/bench/JSSEClient.java b/tests/bench/JSSEClient.java
index 5324fec..aea6955 100644
--- a/tests/bench/JSSEClient.java
+++ b/tests/bench/JSSEClient.java
@@ -1,265 +1,265 @@
-/* ------------------------------------------------------------------------ */
-import java.io.FileInputStream;
-import java.io.OutputStream;
-import java.net.Socket;
-import java.security.KeyStore;
-import java.security.Principal;
-import java.security.PrivateKey;
-import java.security.Provider;
-import java.security.Security;
-import java.security.cert.X509Certificate;
-import java.util.Random;
-
-import javax.net.ssl.KeyManager;
-import javax.net.ssl.KeyManagerFactory;
-import javax.net.ssl.SSLContext;
-import javax.net.ssl.SSLException;
-import javax.net.ssl.SSLSocket;
-import javax.net.ssl.SSLSocketFactory;
-import javax.net.ssl.TrustManagerFactory;
-import javax.net.ssl.X509KeyManager;
-
-import org.bouncycastle.jce.provider.BouncyCastleProvider;
-
-/* ------------------------------------------------------------------------ */
-public class JSSEClient {
-    private static byte[] data = new byte[1024 * 1024];
-
-    static {
-        (new Random()).nextBytes(JSSEClient.data);
-    }
-
-    private static SSLContext sslcontext = null;
-
-    private static class MyKeyManager implements X509KeyManager {
-        protected X509KeyManager target;
-
-        public MyKeyManager(X509KeyManager target) {
-            this.target = target;
-        }
-
-        @Override
-        public String chooseClientAlias(String[] keyType, Principal[] issuers, Socket socket) {
-            return target.chooseClientAlias(keyType, issuers, socket);
-        }
-
-        @Override
-        public String chooseServerAlias(String keyType, Principal[] issuers, Socket socket) {
-            String certname = System.getenv("CERTNAME");
-
-            if (certname == null)
-                throw new RuntimeException("CERTNAME not set");
-            return String.format("utls pki (%s)", certname);
-        }
-
-        @Override
-        public X509Certificate[] getCertificateChain(String alias) {
-            return target.getCertificateChain(alias);
-        }
-
-        @Override
-        public String[] getClientAliases(String keyType, Principal[] issuers) {
-            return target.getClientAliases(keyType, issuers);
-        }
-
-        @Override
-        public PrivateKey getPrivateKey(String alias) {
-            return target.getPrivateKey(alias);
-        }
-
-        @Override
-        public String[] getServerAliases(String keyType, Principal[] issuers) {
-            return target.getServerAliases(keyType, issuers);
-        }
-    }
-
-    static {
-        try {
-            String pki = System.getenv("PKI");
-
-            if (pki == null)
-                throw new RuntimeException("PKI not set");
-
-            TrustManagerFactory tmf = TrustManagerFactory.getInstance("SunX509");
-            KeyManagerFactory kmf = KeyManagerFactory.getInstance("SunX509");
-            KeyStore ks = KeyStore.getInstance("JKS");
-
-            ks.load(new FileInputStream(pki + "/JSK.db"), "123456".toCharArray());
-            kmf.init(ks, new char[] {});
-            tmf.init(ks);
-
-            sslcontext = SSLContext.getInstance("TLSv1.2");
-            sslcontext.init(
-                    new KeyManager[] { new MyKeyManager((X509KeyManager) kmf.getKeyManagers()[0]) },
-                    tmf.getTrustManagers(), null);
-            sslcontext.getServerSessionContext().setSessionCacheSize(0);
-        } catch (Exception e) {
-            throw new RuntimeException(e);
-        }
-    }
-
-    private static void configureSSLSocket(SSLSocket socket, boolean isserver) {
-        String cipher = System.getenv("CIPHERSUITE");
-
-        if (cipher == null)
-            throw new RuntimeException("CIPHERSUITE not set");
-        try {
-            socket.setEnabledCipherSuites(new String[] { cipher });
-        } catch (IllegalArgumentException e) {
-            socket.setEnabledCipherSuites(new String[] { cipher.replaceFirst("^TLS_",  "SSL_") });
-        }
-    }
-
-    private static class ClientEntry implements Runnable {
-        private long totaltxsent  = 0;
-        private long totaltxticks = 0;
-        private long totalhs      = 0;
-        private long totalhsticks = 0;
-
-        @Override
-        public synchronized void run() {
-            final int blksize = 1024;
-
-            int failures = 0;
-
-            try {
-                SSLSocketFactory sslsocketfactory = sslcontext.getSocketFactory();
-
-                for (int i = 0; i < 200; ++i) {
-                    byte[] bytea = { 0x00 };
-
-                    Socket rsocket  = new Socket("127.0.0.1", 5000);
-                    String hostname = rsocket.getInetAddress().getHostName();
-
-                    long t1  = System.nanoTime() / 1000;
-
-                    SSLSocket socket = null;
-
-                    try {
-                        socket = (SSLSocket) sslsocketfactory.createSocket(rsocket, hostname, rsocket.getPort(), true);
-                        JSSEClient.configureSSLSocket(socket, false);
-                        // From documentation:  This method is synchronous for the initial handshake on
-                        // a connection and returns when the negotiated handshake is complete.
-                        socket.startHandshake();
-                    } catch (SSLException e) {
-                        if (socket != null) {
-                            try {
-                                socket.close();
-                            } catch (Exception ie) {}
-                        }
-                        socket = null;
-                        if (++failures < 10) {
-                            System.err.println(e);
-                            continue ;
-                        }
-                        throw e;
-                    }
-
-                    socket.getOutputStream().write(bytea, 0, 1);
-
-                    long t2 = System.nanoTime() / 1000;
-
-                    socket.close();
-
-                    if (i != 0) {
-                        totalhs      += 1;
-                        totalhsticks += (t2 - t1);
-                    }
-                }
-
-                SSLSocket socket = null;
-
-                while (true) {
-                    try {
-                        socket = (SSLSocket) sslsocketfactory.createSocket("127.0.0.1", 5000);
-                        JSSEClient.configureSSLSocket(socket, false);
-                        socket.startHandshake();
-                    } catch (SSLException e) {
-                        if (socket != null) {
-                            try {
-                                socket.close();
-                            } catch (Exception ie) {}
-                        }
-                        socket = null;
-                        if (++failures < 10) {
-                            System.err.println(e);
-                            continue ;
-                        }
-                        throw e;
-                    }
-
-                    break ;
-                }
-
-                OutputStream output = socket.getOutputStream();
-
-                int sent = 0;
-                int upos = 0;
-
-                final long t1 = System.nanoTime() / 1000;
-
-                while (sent < 128 * 1024 * 1024) {
-                    if (JSSEClient.data.length - upos < blksize)
-                        upos = 0;
-                    output.write(JSSEClient.data, upos, blksize);
-                    sent += blksize;
-                    upos += blksize;
-                }
-                output.flush();
-
-                final long t2 = System.nanoTime() / 1000;
-
-                this.totaltxsent  = sent;
-                this.totaltxticks = t2 - t1;
-
-                socket.close();
-            } catch (Exception e) {
-                throw new RuntimeException(e);
-            }
-        }
-
-        public long getTotaltxsent() {
-            return this.totaltxsent;
-        }
-
-        public long getTotaltxticks() {
-            return this.totaltxticks;
-        }
-
-        public long getTotalhs() {
-            return this.totalhs;
-        }
-
-        public long getTotalhsticks() {
-            return this.totalhsticks;
-        }
-    }
-
-    static {
-        if ("1".equals(System.getenv("USEBC"))) {
-            System.err.println("Using BC as Security Provider");
-            Security.addProvider(new BouncyCastleProvider());
-            for (Provider provider : Security.getProviders()) {
-                System.err.println("Security Provider: " + provider);
-            }
-        }
-    }
-
-    static public void main(String[] args) throws Exception {
-        ClientEntry client = new ClientEntry();
-        client.run();
-
-        if (client.getTotaltxticks() > 0) {
-            System.out.format("%s: %.2f HS/s\n",
-                    System.getenv("CIPHERSUITE"),
-                    client.getTotalhs()
-                    / (((double) client.getTotalhsticks()) / 1000000));
-
-            System.out.format("%s: %.2f MiB/s\n",
-                    System.getenv("CIPHERSUITE"),
-                    client.getTotaltxsent()
-                    / ((double) (1024 * 1024))
-                    / (((double) client.getTotaltxticks()) / 1000000));
-        }
-    }
-}
+/* ------------------------------------------------------------------------ */
+import java.io.FileInputStream;
+import java.io.OutputStream;
+import java.net.Socket;
+import java.security.KeyStore;
+import java.security.Principal;
+import java.security.PrivateKey;
+import java.security.Provider;
+import java.security.Security;
+import java.security.cert.X509Certificate;
+import java.util.Random;
+
+import javax.net.ssl.KeyManager;
+import javax.net.ssl.KeyManagerFactory;
+import javax.net.ssl.SSLContext;
+import javax.net.ssl.SSLException;
+import javax.net.ssl.SSLSocket;
+import javax.net.ssl.SSLSocketFactory;
+import javax.net.ssl.TrustManagerFactory;
+import javax.net.ssl.X509KeyManager;
+
+import org.bouncycastle.jce.provider.BouncyCastleProvider;
+
+/* ------------------------------------------------------------------------ */
+public class JSSEClient {
+    private static byte[] data = new byte[1024 * 1024];
+
+    static {
+        (new Random()).nextBytes(JSSEClient.data);
+    }
+
+    private static SSLContext sslcontext = null;
+
+    private static class MyKeyManager implements X509KeyManager {
+        protected X509KeyManager target;
+
+        public MyKeyManager(X509KeyManager target) {
+            this.target = target;
+        }
+
+        @Override
+        public String chooseClientAlias(String[] keyType, Principal[] issuers, Socket socket) {
+            return target.chooseClientAlias(keyType, issuers, socket);
+        }
+
+        @Override
+        public String chooseServerAlias(String keyType, Principal[] issuers, Socket socket) {
+            String certname = System.getenv("CERTNAME");
+
+            if (certname == null)
+                throw new RuntimeException("CERTNAME not set");
+            return String.format("utls pki (%s)", certname);
+        }
+
+        @Override
+        public X509Certificate[] getCertificateChain(String alias) {
+            return target.getCertificateChain(alias);
+        }
+
+        @Override
+        public String[] getClientAliases(String keyType, Principal[] issuers) {
+            return target.getClientAliases(keyType, issuers);
+        }
+
+        @Override
+        public PrivateKey getPrivateKey(String alias) {
+            return target.getPrivateKey(alias);
+        }
+
+        @Override
+        public String[] getServerAliases(String keyType, Principal[] issuers) {
+            return target.getServerAliases(keyType, issuers);
+        }
+    }
+
+    static {
+        try {
+            String pki = System.getenv("PKI");
+
+            if (pki == null)
+                throw new RuntimeException("PKI not set");
+
+            TrustManagerFactory tmf = TrustManagerFactory.getInstance("SunX509");
+            KeyManagerFactory kmf = KeyManagerFactory.getInstance("SunX509");
+            KeyStore ks = KeyStore.getInstance("JKS");
+
+            ks.load(new FileInputStream(pki + "/JSK.db"), "123456".toCharArray());
+            kmf.init(ks, new char[] {});
+            tmf.init(ks);
+
+            sslcontext = SSLContext.getInstance("TLSv1.2");
+            sslcontext.init(
+                    new KeyManager[] { new MyKeyManager((X509KeyManager) kmf.getKeyManagers()[0]) },
+                    tmf.getTrustManagers(), null);
+            sslcontext.getServerSessionContext().setSessionCacheSize(0);
+        } catch (Exception e) {
+            throw new RuntimeException(e);
+        }
+    }
+
+    private static void configureSSLSocket(SSLSocket socket, boolean isserver) {
+        String cipher = System.getenv("CIPHERSUITE");
+
+        if (cipher == null)
+            throw new RuntimeException("CIPHERSUITE not set");
+        try {
+            socket.setEnabledCipherSuites(new String[] { cipher });
+        } catch (IllegalArgumentException e) {
+            socket.setEnabledCipherSuites(new String[] { cipher.replaceFirst("^TLS_",  "SSL_") });
+        }
+    }
+
+    private static class ClientEntry implements Runnable {
+        private long totaltxsent  = 0;
+        private long totaltxticks = 0;
+        private long totalhs      = 0;
+        private long totalhsticks = 0;
+
+        @Override
+        public synchronized void run() {
+            final int blksize = 1024;
+            
+            int failures = 0;
+
+            try {
+                SSLSocketFactory sslsocketfactory = sslcontext.getSocketFactory();
+
+                for (int i = 0; i < 200; ++i) {
+                    byte[] bytea = { 0x00 };
+
+                    Socket rsocket  = new Socket("127.0.0.1", 5000);
+                    String hostname = rsocket.getInetAddress().getHostName();
+
+                    long t1  = System.nanoTime() / 1000;
+
+                    SSLSocket socket = null;
+                            
+                    try {                    
+                        socket = (SSLSocket) sslsocketfactory.createSocket(rsocket, hostname, rsocket.getPort(), true);
+                        JSSEClient.configureSSLSocket(socket, false);
+                        // From documentation:  This method is synchronous for the initial handshake on
+                        // a connection and returns when the negotiated handshake is complete.
+                        socket.startHandshake();
+                    } catch (SSLException e) {
+                        if (socket != null) {
+                            try {
+                                socket.close();
+                            } catch (Exception ie) {}
+                        }
+                        socket = null;
+                        if (++failures < 10) {
+                            System.err.println(e);
+                            continue ;
+                        }
+                        throw e;
+                    }
+                    
+                    socket.getOutputStream().write(bytea, 0, 1);
+
+                    long t2 = System.nanoTime() / 1000;
+
+                    socket.close();
+
+                    if (i != 0) {
+                        totalhs      += 1;
+                        totalhsticks += (t2 - t1);
+                    }
+                }
+
+                SSLSocket socket = null;
+                
+                while (true) {
+                    try {
+                        socket = (SSLSocket) sslsocketfactory.createSocket("127.0.0.1", 5000);
+                        JSSEClient.configureSSLSocket(socket, false);
+                        socket.startHandshake();
+                    } catch (SSLException e) {
+                        if (socket != null) {
+                            try {
+                                socket.close();
+                            } catch (Exception ie) {}
+                        }
+                        socket = null;
+                        if (++failures < 10) {
+                            System.err.println(e);
+                            continue ;
+                        }
+                        throw e;
+                    }
+                    
+                    break ;
+                }
+
+                OutputStream output = socket.getOutputStream();
+
+                int sent = 0;
+                int upos = 0;
+
+                final long t1 = System.nanoTime() / 1000;
+
+                while (sent < 128 * 1024 * 1024) {
+                    if (JSSEClient.data.length - upos < blksize)
+                        upos = 0;
+                    output.write(JSSEClient.data, upos, blksize);
+                    sent += blksize;
+                    upos += blksize;
+                }
+                output.flush();
+
+                final long t2 = System.nanoTime() / 1000;
+
+                this.totaltxsent  = sent;
+                this.totaltxticks = t2 - t1;
+
+                socket.close();
+            } catch (Exception e) {
+                throw new RuntimeException(e);
+            }
+        }
+
+        public long getTotaltxsent() {
+            return this.totaltxsent;
+        }
+
+        public long getTotaltxticks() {
+            return this.totaltxticks;
+        }
+
+        public long getTotalhs() {
+            return this.totalhs;
+        }
+
+        public long getTotalhsticks() {
+            return this.totalhsticks;
+        }
+    }
+
+    static {
+        if ("1".equals(System.getenv("USEBC"))) {
+            System.err.println("Using BC as Security Provider");
+            Security.addProvider(new BouncyCastleProvider());
+            for (Provider provider : Security.getProviders()) {
+                System.err.println("Security Provider: " + provider);
+            }
+        }
+    }
+
+    static public void main(String[] args) throws Exception {
+        ClientEntry client = new ClientEntry();
+        client.run();
+
+        if (client.getTotaltxticks() > 0) {
+            System.out.format("%s: %.2f HS/s\n",
+                    System.getenv("CIPHERSUITE"),
+                    client.getTotalhs()
+                    / (((double) client.getTotalhsticks()) / 1000000));
+
+            System.out.format("%s: %.2f MiB/s\n",
+                    System.getenv("CIPHERSUITE"),
+                    client.getTotaltxsent()
+                    / ((double) (1024 * 1024))
+                    / (((double) client.getTotaltxticks()) / 1000000));
+        }
+    }
+}
diff --git a/tests/bench/JSSEServer.java b/tests/bench/JSSEServer.java
index c13f9ce..d9f4c8b 100644
--- a/tests/bench/JSSEServer.java
+++ b/tests/bench/JSSEServer.java
@@ -1,131 +1,131 @@
-/* ------------------------------------------------------------------------ */
-import java.io.FileInputStream;
-import java.io.IOException;
-import java.io.InputStream;
-import java.net.Socket;
-import java.security.KeyStore;
-import java.security.Principal;
-import java.security.PrivateKey;
-import java.security.cert.X509Certificate;
-
-import javax.net.ssl.KeyManager;
-import javax.net.ssl.KeyManagerFactory;
-import javax.net.ssl.SSLContext;
-import javax.net.ssl.SSLServerSocket;
-import javax.net.ssl.SSLServerSocketFactory;
-import javax.net.ssl.SSLSocket;
-import javax.net.ssl.TrustManagerFactory;
-import javax.net.ssl.X509KeyManager;
-
-/* ------------------------------------------------------------------------ */
-public class JSSEServer {
-    private static SSLContext sslcontext = null;
-
-    private static class MyKeyManager implements X509KeyManager {
-        protected X509KeyManager target;
-
-        public MyKeyManager(X509KeyManager target) {
-            this.target = target;
-        }
-
-        @Override
-        public String chooseClientAlias(String[] keyType, Principal[] issuers, Socket socket) {
-            return target.chooseClientAlias(keyType, issuers, socket);
-        }
-
-        @Override
-        public String chooseServerAlias(String keyType, Principal[] issuers, Socket socket) {
-            String certname = System.getenv("CERTNAME");
-
-            if (certname == null)
-                throw new RuntimeException("CERTNAME not set");
-            return String.format("utls pki (%s)", certname);
-        }
-
-        @Override
-        public X509Certificate[] getCertificateChain(String alias) {
-            return target.getCertificateChain(alias);
-        }
-
-        @Override
-        public String[] getClientAliases(String keyType, Principal[] issuers) {
-            return target.getClientAliases(keyType, issuers);
-        }
-
-        @Override
-        public PrivateKey getPrivateKey(String alias) {
-            return target.getPrivateKey(alias);
-        }
-
-        @Override
-        public String[] getServerAliases(String keyType, Principal[] issuers) {
-            return target.getServerAliases(keyType, issuers);
-        }
-    }
-
-    static {
-        try {
-            String pki = System.getenv("PKI");
-
-            if (pki == null)
-                throw new RuntimeException("PKI not set");
-
-            TrustManagerFactory tmf = TrustManagerFactory.getInstance("SunX509");
-            KeyManagerFactory kmf = KeyManagerFactory.getInstance("SunX509");
-            KeyStore ks = KeyStore.getInstance("JKS");
-
-            ks.load(new FileInputStream(pki + "/JSK.db"), "123456".toCharArray());
-            kmf.init(ks, new char[] {});
-            tmf.init(ks);
-
-            sslcontext = SSLContext.getInstance("TLSv1.2");
-            sslcontext.init(
-                    new KeyManager[] { new MyKeyManager((X509KeyManager) kmf.getKeyManagers()[0]) },
-                    tmf.getTrustManagers(), null);
-            sslcontext.getServerSessionContext().setSessionCacheSize(0);
-        } catch (Exception e) {
-            throw new RuntimeException(e);
-        }
-    }
-
-    private static SSLServerSocket createServerSocket() throws IOException {
-        SSLServerSocketFactory sslserversocketfactory =
-                sslcontext.getServerSocketFactory();
-        return (SSLServerSocket) sslserversocketfactory.createServerSocket(5000);
-    }
-
-    private static class ServerEntry implements Runnable {
-        private SSLServerSocket socket;
-
-        public ServerEntry(SSLServerSocket socket) {
-            this.socket = socket;
-        }
-
-        @Override
-        public synchronized void run() {
-            try {
-                final byte[] buffer = new byte[1024 * 1024];
-
-                while (true) {
-                    SSLSocket sslsocket = (SSLSocket) this.socket.accept();
-                    sslsocket.startHandshake();
-
-                    InputStream input = sslsocket.getInputStream();
-
-                    while (true) {
-                        if (input.read(buffer) < 0)
-                            break ;
-                    }
-                    sslsocket.close();
-                }
-            } catch (Exception e) {
-                throw new RuntimeException(e);
-            }
-        }
-    }
-
-    static public void main(String[] args) throws Exception {
-        ServerEntry server = new ServerEntry(JSSEServer.createServerSocket());
-        server.run();
-    }
-}
+/* ------------------------------------------------------------------------ */
+import java.io.FileInputStream;
+import java.io.IOException;
+import java.io.InputStream;
+import java.net.Socket;
+import java.security.KeyStore;
+import java.security.Principal;
+import java.security.PrivateKey;
+import java.security.cert.X509Certificate;
+
+import javax.net.ssl.KeyManager;
+import javax.net.ssl.KeyManagerFactory;
+import javax.net.ssl.SSLContext;
+import javax.net.ssl.SSLServerSocket;
+import javax.net.ssl.SSLServerSocketFactory;
+import javax.net.ssl.SSLSocket;
+import javax.net.ssl.TrustManagerFactory;
+import javax.net.ssl.X509KeyManager;
+
+/* ------------------------------------------------------------------------ */
+public class JSSEServer {
+    private static SSLContext sslcontext = null;
+
+    private static class MyKeyManager implements X509KeyManager {
+        protected X509KeyManager target;
+
+        public MyKeyManager(X509KeyManager target) {
+            this.target = target;
+        }
+
+        @Override
+        public String chooseClientAlias(String[] keyType, Principal[] issuers, Socket socket) {
+            return target.chooseClientAlias(keyType, issuers, socket);
+        }
+
+        @Override
+        public String chooseServerAlias(String keyType, Principal[] issuers, Socket socket) {
+            String certname = System.getenv("CERTNAME");
+
+            if (certname == null)
+                throw new RuntimeException("CERTNAME not set");
+            return String.format("utls pki (%s)", certname);
+        }
+
+        @Override
+        public X509Certificate[] getCertificateChain(String alias) {
+            return target.getCertificateChain(alias);
+        }
+
+        @Override
+        public String[] getClientAliases(String keyType, Principal[] issuers) {
+            return target.getClientAliases(keyType, issuers);
+        }
+
+        @Override
+        public PrivateKey getPrivateKey(String alias) {
+            return target.getPrivateKey(alias);
+        }
+
+        @Override
+        public String[] getServerAliases(String keyType, Principal[] issuers) {
+            return target.getServerAliases(keyType, issuers);
+        }
+    }
+
+    static {
+        try {
+            String pki = System.getenv("PKI");
+
+            if (pki == null)
+                throw new RuntimeException("PKI not set");
+
+            TrustManagerFactory tmf = TrustManagerFactory.getInstance("SunX509");
+            KeyManagerFactory kmf = KeyManagerFactory.getInstance("SunX509");
+            KeyStore ks = KeyStore.getInstance("JKS");
+
+            ks.load(new FileInputStream(pki + "/JSK.db"), "123456".toCharArray());
+            kmf.init(ks, new char[] {});
+            tmf.init(ks);
+
+            sslcontext = SSLContext.getInstance("TLSv1.2");
+            sslcontext.init(
+                    new KeyManager[] { new MyKeyManager((X509KeyManager) kmf.getKeyManagers()[0]) },
+                    tmf.getTrustManagers(), null);
+            sslcontext.getServerSessionContext().setSessionCacheSize(0);
+        } catch (Exception e) {
+            throw new RuntimeException(e);
+        }
+    }
+
+    private static SSLServerSocket createServerSocket() throws IOException {
+        SSLServerSocketFactory sslserversocketfactory =
+                sslcontext.getServerSocketFactory();
+        return (SSLServerSocket) sslserversocketfactory.createServerSocket(5000);
+    }
+
+    private static class ServerEntry implements Runnable {
+        private SSLServerSocket socket;
+
+        public ServerEntry(SSLServerSocket socket) {
+            this.socket = socket;
+        }
+
+        @Override
+        public synchronized void run() {
+            try {
+                final byte[] buffer = new byte[1024 * 1024];
+
+                while (true) {
+                    SSLSocket sslsocket = (SSLSocket) this.socket.accept();
+                    sslsocket.startHandshake();
+
+                    InputStream input = sslsocket.getInputStream();
+
+                    while (true) {
+                        if (input.read(buffer) < 0)
+                            break ;
+                    }
+                    sslsocket.close();
+                }
+            } catch (Exception e) {
+                throw new RuntimeException(e);
+            }
+        }
+    }
+
+    static public void main(String[] args) throws Exception {
+        ServerEntry server = new ServerEntry(JSSEServer.createServerSocket());
+        server.run();
+    }
+}
diff --git a/tests/bench/bc/BCClient.sln b/tests/bench/bc/BCClient.sln
index afb2954..d898e50 100644
--- a/tests/bench/bc/BCClient.sln
+++ b/tests/bench/bc/BCClient.sln
@@ -1,20 +1,20 @@
-﻿
-Microsoft Visual Studio Solution File, Format Version 11.00
-# Visual Studio 2010
-Project("{F2A71F9B-5D33-465A-A702-920D77279786}") = "BCClient", "BCClient\BCClient.fsproj", "{29244ED9-11AF-4C87-A3DA-20E2E3545E03}"
-EndProject
-Global
-	GlobalSection(SolutionConfigurationPlatforms) = preSolution
-		Debug|x86 = Debug|x86
-		Release|x86 = Release|x86
-	EndGlobalSection
-	GlobalSection(ProjectConfigurationPlatforms) = postSolution
-		{29244ED9-11AF-4C87-A3DA-20E2E3545E03}.Debug|x86.ActiveCfg = Debug|x86
-		{29244ED9-11AF-4C87-A3DA-20E2E3545E03}.Debug|x86.Build.0 = Debug|x86
-		{29244ED9-11AF-4C87-A3DA-20E2E3545E03}.Release|x86.ActiveCfg = Release|x86
-		{29244ED9-11AF-4C87-A3DA-20E2E3545E03}.Release|x86.Build.0 = Release|x86
-	EndGlobalSection
-	GlobalSection(SolutionProperties) = preSolution
-		HideSolutionNode = FALSE
-	EndGlobalSection
-EndGlobal
+﻿
+Microsoft Visual Studio Solution File, Format Version 11.00
+# Visual Studio 2010
+Project("{F2A71F9B-5D33-465A-A702-920D77279786}") = "BCClient", "BCClient\BCClient.fsproj", "{29244ED9-11AF-4C87-A3DA-20E2E3545E03}"
+EndProject
+Global
+	GlobalSection(SolutionConfigurationPlatforms) = preSolution
+		Debug|x86 = Debug|x86
+		Release|x86 = Release|x86
+	EndGlobalSection
+	GlobalSection(ProjectConfigurationPlatforms) = postSolution
+		{29244ED9-11AF-4C87-A3DA-20E2E3545E03}.Debug|x86.ActiveCfg = Debug|x86
+		{29244ED9-11AF-4C87-A3DA-20E2E3545E03}.Debug|x86.Build.0 = Debug|x86
+		{29244ED9-11AF-4C87-A3DA-20E2E3545E03}.Release|x86.ActiveCfg = Release|x86
+		{29244ED9-11AF-4C87-A3DA-20E2E3545E03}.Release|x86.Build.0 = Release|x86
+	EndGlobalSection
+	GlobalSection(SolutionProperties) = preSolution
+		HideSolutionNode = FALSE
+	EndGlobalSection
+EndGlobal
diff --git a/tests/bench/openssl-client.c b/tests/bench/openssl-client.c
index 37034e3..2b725c7 100644
--- a/tests/bench/openssl-client.c
+++ b/tests/bench/openssl-client.c
@@ -1,334 +1,334 @@
-/* -------------------------------------------------------------------- */
-#include <sys/types.h>
-#include <stdlib.h>
-#include <stdio.h>
-#include <stdint.h>
-#include <string.h>
-#include <errno.h>
-#include <fcntl.h>
-#include <signal.h>
-#include <unistd.h>
-#include <sys/time.h>
-
-#include <openssl/bio.h>
-#include <openssl/ssl.h>
-#include <openssl/err.h>
-
-#define ECHO_NO_EVENT_LIB 1
-
-#include "echo-memory.h"
-#include "echo-ssl.h"
-#include "echo-log.h"
-#include "echo-net.h"
-
-#ifndef WIN32
-# define closesocket    close
-# define GET_SOCKET_ERROR() (errno)
-#else
-# define GET_SOCKET_ERROR() (WSAGetLastError())
-#endif
-
-/* -------------------------------------------------------------------- */
-#define TOSEND (128 * 1024u * 1024u)
-
-/* -------------------------------------------------------------------- */
-typedef struct sockaddr sockaddr_t;
-typedef struct sockaddr_in in4_t;
-
-/* -------------------------------------------------------------------- */
-static void e_error(const char *message)
-    __attribute__((noreturn));
-
-static void e_error(const char *message) {
-    elog(LOG_FATAL, "%s: %s", message, strerror(errno));
-    exit(EXIT_FAILURE);
-}
-
-static void sock_error(const char *message)
-    __attribute__((noreturn));
-
-static void sock_error(const char *message) {
-    elog(LOG_FATAL, "%s: %s", message, strerror(GET_SOCKET_ERROR()));
-    exit(EXIT_FAILURE);
-}
-
-static void i_error(const char *message)
-    __attribute__((noreturn));
-
-static void i_error(const char *message) {
-    elog(LOG_FATAL, "%s", message);
-    exit(EXIT_FAILURE);
-}
-
-static void s_error(unsigned long e, const char *message)
-    __attribute__((noreturn));
-
-static void s_error(unsigned long e, const char *message) {
-    elog(LOG_FATAL, "%s: %s", message, ERR_error_string(e, NULL));
-    exit(EXIT_FAILURE);
-}
-
-/* -------------------------------------------------------------------- */
-static uint8_t udata[1024 * 1024];
-
-static void udata_initialize(void) {
-    int    fd = -1;
-    size_t position = 0;
-
-#ifdef WIN32
-#define URANDOM "urandom"
-#else
-#define URANDOM "/dev/urandom"
-#endif
-
-    if ((fd = open(URANDOM, O_RDONLY)) < 0)
-        e_error("open(" URANDOM ")");
-    while (position < sizeof(udata)) {
-#ifdef WIN32
-        (void) lseek(fd, 0, SEEK_SET);
-#endif
-
-        errno = 0;
-
-        ssize_t rr = read(fd, &udata[position], sizeof(udata) - position);
-
-        if (rr <= 0)
-            e_error("reading from /dev/urandom");
-        position += rr;
-    }
-
-    (void) close(fd);
-}
-
-/* -------------------------------------------------------------------- */
-typedef struct ciphername {
-    char *fullname;
-    char *osslname;
-} ciphername_t;
-
-static const ciphername_t ciphernames[] = {
-  { "TLS_RSA_WITH_NULL_MD5"              , "NULL-MD5"               },
-  { "TLS_RSA_WITH_NULL_SHA"              , "NULL-SHA"               },
-  { "TLS_RSA_WITH_NULL_SHA256"           , "NULL-SHA256"            },
-  { "TLS_RSA_WITH_RC4_128_MD5"           , "RC4-MD5"                },
-  { "TLS_RSA_WITH_RC4_128_SHA"           , "RC4-SHA"                },
-  { "TLS_RSA_WITH_3DES_EDE_CBC_SHA"      , "DES-CBC3-SHA"           },
-  { "TLS_RSA_WITH_AES_128_CBC_SHA"       , "AES128-SHA"             },
-  { "TLS_RSA_WITH_AES_128_CBC_SHA256"    , "AES128-SHA256"          },
-  { "TLS_RSA_WITH_AES_256_CBC_SHA"       , "AES256-SHA"             },
-  { "TLS_RSA_WITH_AES_256_CBC_SHA256"    , "AES256-SHA256"          },
-  { "TLS_DH_anon_WITH_3DES_EDE_CBC_SHA"  , "ADH-DES-CBC3-SHA"       },
-  { "TLS_DH_anon_WITH_AES_128_CBC_SHA"   , "ADH-AES128-SHA"         },
-  { "TLS_DH_anon_WITH_AES_128_CBC_SHA256", "ADH-AES128-SHA256"      },
-  { "TLS_DH_anon_WITH_AES_256_CBC_SHA"   , "ADH-AES256-SHA"         },
-  { "TLS_DH_anon_WITH_AES_256_CBC_SHA256", "ADH-AES256-SHA256"      },
-  { "TLS_DH_anon_WITH_RC4_128_MD5"       , "ADH-RC4-MD5"            },
-  { "TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA"  , "EDH-DSS-DES-CBC3-SHA"   },
-  { "TLS_DHE_DSS_WITH_AES_128_CBC_SHA"   , "DHE-DSS-AES128-SHA"     },
-  { "TLS_DHE_DSS_WITH_AES_128_CBC_SHA256", "DHE-DSS-AES128-SHA256"  },
-  { "TLS_DHE_DSS_WITH_AES_256_CBC_SHA"   , "DHE-DSS-AES256-SHA"     },
-  { "TLS_DHE_DSS_WITH_AES_256_CBC_SHA256", "DHE-DSS-AES256-SHA256"  },
-  { "TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA"  , "EDH-RSA-DES-CBC3-SHA"   },
-  { "TLS_DHE_RSA_WITH_AES_128_CBC_SHA"   , "DHE-RSA-AES128-SHA"     },
-  { "TLS_DHE_RSA_WITH_AES_128_CBC_SHA256", "DHE-RSA-AES128-SHA256"  },
-  { "TLS_DHE_RSA_WITH_AES_256_CBC_SHA"   , "DHE-RSA-AES256-SHA"     },
-  { "TLS_DHE_RSA_WITH_AES_256_CBC_SHA256", "DHE-RSA-AES256-SHA256"  },
-
-  { NULL, NULL},
-};
-
-static const char* get_ossl_cs(const char *csname) {
-    const ciphername_t *p;
-
-    for (p = &ciphernames[0]; p->fullname != NULL; ++p) {
-        if (strcmp(csname, p->fullname) == 0)
-            return p->osslname;
-    }
-
-    return NULL;
-}
-
-static const char* get_cs_fullname(const char *csname) {
-    const ciphername_t *p;
-
-    for (p = &ciphernames[0]; p->fullname != NULL; ++p) {
-        if (strcmp(csname, p->osslname) == 0)
-            return p->fullname;
-    }
-
-    return NULL;
-}
-
-/* -------------------------------------------------------------------- */
-static const int zero = 0;
-static const int one  = 1;
-
-/* -------------------------------------------------------------------- */
-void client(SSL_CTX *sslctx, const struct echossl_s *options) {
-#define BLKSZ (256 * 1024u)
-    int   i;
-    int   fd;
-    int   rr;
-    in4_t peername;
-
-    SSL *ssl = NULL;
-
-    size_t sent = 0;
-    size_t upos = 0;
-
-    struct timeval tv1;
-    struct timeval tv2;
-
-    unsigned hsdone  = 0;
-    double   hsticks = 0;
-
-    memset(&peername, 0, sizeof(in4_t));
-    peername.sin_family = AF_INET;
-    peername.sin_addr   = (struct in_addr) { .s_addr = htonl(INADDR_LOOPBACK) };
-    peername.sin_port   = htons(5000);
-
-    for (i = 0; i < 250; ++i) {
-        uint8_t byte[1] = { 0x00 };
-
-        if ((fd = socket(AF_INET, SOCK_STREAM, 0)) < 0)
-            sock_error("socket(AF_INET, SOCK_STREAM)");
-        if (connect(fd, (sockaddr_t*) &peername, sizeof(in4_t)) < 0)
-            sock_error("connecting to server (HS)");
-
-        (void) gettimeofday(&tv1, NULL);
-
-        if ((ssl = SSL_new(sslctx)) == NULL)
-            i_error("cannot SSL server side SSL context");
-        (void) SSL_set_fd(ssl, fd);
-        /* If the underlying BIO is blocking, SSL_connect() will only
-           return once the handshake has been finished or an error
-           occurred. */
-        if ((rr = SSL_connect(ssl)) <= 0)
-            s_error(ERR_get_error(), "SSL connect failed");
-
-        if (SSL_write(ssl, byte, 1) <= 0)
-            s_error(ERR_get_error(), "SSL write (HS) failed");
-
-        (void) gettimeofday(&tv2, NULL);
-
-        (void) SSL_shutdown(ssl);
-        (void) SSL_free(ssl);
-        (void) closesocket(fd); fd = -1;
-
-        double tv1_d = (double)tv1.tv_sec + ((double)tv1.tv_usec) / 1000000;
-        double tv2_d = (double)tv2.tv_sec + ((double)tv2.tv_usec) / 1000000;
-
-        if (i != 0) {
-            hsdone  += 1;
-            hsticks += (tv2_d - tv1_d);
-
-        }
-    }
-
-    if ((fd = socket(AF_INET, SOCK_STREAM, 0)) < 0)
-        sock_error("socket(AF_INET, SOCK_STREAM)");
-
-    if (connect(fd, (sockaddr_t*) &peername, sizeof(in4_t)) < 0)
-        sock_error("connecting to server");
-
-    {   int ival = 128 * 1024;
-        int oval = 128 * 1024;
-        setsockopt(fd, SOL_SOCKET, SO_RCVBUF, (void*) &ival, sizeof(ival));
-        setsockopt(fd, SOL_SOCKET, SO_SNDBUF, (void*) &oval, sizeof(oval));
-    }
-
-    if ((ssl = SSL_new(sslctx)) == NULL)
-        i_error("cannot SSL server side SSL context");
-    (void) SSL_set_fd(ssl, fd);
-    if ((rr = SSL_connect(ssl)) <= 0)
-        s_error(ERR_get_error(), "SSL connect failed");
-
-    (void) gettimeofday(&tv1, NULL);
-
-    while (sent < TOSEND) {
-        if (sizeof(udata) - upos < BLKSZ)
-            upos = 0;
-        if ((rr = SSL_write(ssl, &udata[upos], BLKSZ)) <= 0)
-            s_error(ERR_get_error(), "client-side write failed");
-        sent += rr;
-        upos += rr;
-
-    }
-
-    (void) gettimeofday(&tv2, NULL);
-
-    if ((rr = SSL_shutdown(ssl)) < 0)
-        s_error(ERR_get_error(), "client-side shutdown failed");
-    if (rr < 0)
-        s_error(ERR_get_error(), "client-side shutdown failed");
-    if (rr == 0) {
-        if ((rr = SSL_shutdown(ssl)) < 0) {
-            printf("%d\n", SSL_get_error(ssl, rr));
-            s_error(ERR_get_error(), "client-side (bis) shutdown failed");
-        }
-    }
-
-    SSL_free(ssl);
-
-    double tv1_d = (double)tv1.tv_sec + ((double)tv1.tv_usec) / 1000000;
-    double tv2_d = (double)tv2.tv_sec + ((double)tv2.tv_usec) / 1000000;
-
-    printf("%s: %.2f HS/s\n",
-           get_cs_fullname(options->ciphers),
-           (hsdone / hsticks));
-    printf("%s: %.2f MiB/s\n",
-           get_cs_fullname(options->ciphers),
-           (sent / ((double) (1024 * 1024))) / (tv2_d - tv1_d));
-
-    (void) closesocket(fd);
-}
-
-/* -------------------------------------------------------------------- */
-int main(void) {
-    struct echossl_s options;
-    SSL_CTX *sslctx = NULL;
-
-#ifdef WIN32
-    WSADATA WSAData;
-#endif
-
-    initialize_log4c();
-
-#ifdef WIN32
-    if (WSAStartup(MAKEWORD(2, 2), &WSAData) != 0) {
-        elog(LOG_FATAL, "cannot initialize winsocks");
-        return EXIT_FAILURE;
-    }
-#endif
-
-    options.ciphers = getenv("CIPHERSUITE");
-    options.sname   = NULL;
-    options.cname   = NULL;
-    options.pki     = getenv("PKI");
-    options.tlsver  = TLS_1p2;
-
-    if (options.ciphers == NULL)
-        i_error("no cipher suite given");
-    options.ciphers = (char*) get_ossl_cs(options.ciphers);
-    if (options.ciphers == NULL)
-        i_error("unknown cipher name");
-    options.ciphers = xstrdup(options.ciphers);
-    if (options.pki == NULL)
-        i_error("no PKI directory given");
-    options.pki = xstrdup(options.pki);
-
-    (void) SSL_library_init();
-    udata_initialize();
-
-    if ((sslctx = evssl_init(&options, 0)) == NULL)
-        i_error("cannot initialize SSL context");
-    (void) SSL_CTX_set_mode(sslctx, SSL_MODE_AUTO_RETRY);
-    (void) SSL_CTX_set_session_cache_mode(sslctx, SSL_SESS_CACHE_OFF);
-    client(sslctx, &options);
-
-#ifdef WIN32
-    (void) WSACleanup();
-#endif
-
-    return EXIT_SUCCESS;
-}
+/* -------------------------------------------------------------------- */
+#include <sys/types.h>
+#include <stdlib.h>
+#include <stdio.h>
+#include <stdint.h>
+#include <string.h>
+#include <errno.h>
+#include <fcntl.h>
+#include <signal.h>
+#include <unistd.h>
+#include <sys/time.h>
+
+#include <openssl/bio.h>
+#include <openssl/ssl.h>
+#include <openssl/err.h>
+
+#define ECHO_NO_EVENT_LIB 1
+
+#include "echo-memory.h"
+#include "echo-ssl.h"
+#include "echo-log.h"
+#include "echo-net.h"
+
+#ifndef WIN32
+# define closesocket    close
+# define GET_SOCKET_ERROR() (errno)
+#else
+# define GET_SOCKET_ERROR() (WSAGetLastError())
+#endif
+
+/* -------------------------------------------------------------------- */
+#define TOSEND (128 * 1024u * 1024u)
+
+/* -------------------------------------------------------------------- */
+typedef struct sockaddr sockaddr_t;
+typedef struct sockaddr_in in4_t;
+
+/* -------------------------------------------------------------------- */
+static void e_error(const char *message)
+    __attribute__((noreturn));
+
+static void e_error(const char *message) {
+    elog(LOG_FATAL, "%s: %s", message, strerror(errno));
+    exit(EXIT_FAILURE);
+}
+
+static void sock_error(const char *message)
+    __attribute__((noreturn));
+
+static void sock_error(const char *message) {
+    elog(LOG_FATAL, "%s: %s", message, strerror(GET_SOCKET_ERROR()));
+    exit(EXIT_FAILURE);
+}
+
+static void i_error(const char *message)
+    __attribute__((noreturn));
+
+static void i_error(const char *message) {
+    elog(LOG_FATAL, "%s", message);
+    exit(EXIT_FAILURE);
+}
+
+static void s_error(unsigned long e, const char *message)
+    __attribute__((noreturn));
+
+static void s_error(unsigned long e, const char *message) {
+    elog(LOG_FATAL, "%s: %s", message, ERR_error_string(e, NULL));
+    exit(EXIT_FAILURE);
+}
+
+/* -------------------------------------------------------------------- */
+static uint8_t udata[1024 * 1024];
+
+static void udata_initialize(void) {
+    int    fd = -1;
+    size_t position = 0;
+
+#ifdef WIN32
+#define URANDOM "urandom"
+#else
+#define URANDOM "/dev/urandom"
+#endif
+
+    if ((fd = open(URANDOM, O_RDONLY)) < 0)
+        e_error("open(" URANDOM ")");
+    while (position < sizeof(udata)) {
+#ifdef WIN32
+        (void) lseek(fd, 0, SEEK_SET);
+#endif
+
+        errno = 0;
+
+        ssize_t rr = read(fd, &udata[position], sizeof(udata) - position);
+
+        if (rr <= 0)
+            e_error("reading from /dev/urandom");
+        position += rr;
+    }
+
+    (void) close(fd);
+}
+
+/* -------------------------------------------------------------------- */
+typedef struct ciphername {
+    char *fullname;
+    char *osslname;
+} ciphername_t;
+
+static const ciphername_t ciphernames[] = {
+  { "TLS_RSA_WITH_NULL_MD5"              , "NULL-MD5"               },
+  { "TLS_RSA_WITH_NULL_SHA"              , "NULL-SHA"               },
+  { "TLS_RSA_WITH_NULL_SHA256"           , "NULL-SHA256"            },
+  { "TLS_RSA_WITH_RC4_128_MD5"           , "RC4-MD5"                },
+  { "TLS_RSA_WITH_RC4_128_SHA"           , "RC4-SHA"                },
+  { "TLS_RSA_WITH_3DES_EDE_CBC_SHA"      , "DES-CBC3-SHA"           },
+  { "TLS_RSA_WITH_AES_128_CBC_SHA"       , "AES128-SHA"             },
+  { "TLS_RSA_WITH_AES_128_CBC_SHA256"    , "AES128-SHA256"          },
+  { "TLS_RSA_WITH_AES_256_CBC_SHA"       , "AES256-SHA"             },
+  { "TLS_RSA_WITH_AES_256_CBC_SHA256"    , "AES256-SHA256"          },
+  { "TLS_DH_anon_WITH_3DES_EDE_CBC_SHA"  , "ADH-DES-CBC3-SHA"       },
+  { "TLS_DH_anon_WITH_AES_128_CBC_SHA"   , "ADH-AES128-SHA"         },
+  { "TLS_DH_anon_WITH_AES_128_CBC_SHA256", "ADH-AES128-SHA256"      },
+  { "TLS_DH_anon_WITH_AES_256_CBC_SHA"   , "ADH-AES256-SHA"         },
+  { "TLS_DH_anon_WITH_AES_256_CBC_SHA256", "ADH-AES256-SHA256"      },
+  { "TLS_DH_anon_WITH_RC4_128_MD5"       , "ADH-RC4-MD5"            },
+  { "TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA"  , "EDH-DSS-DES-CBC3-SHA"   },
+  { "TLS_DHE_DSS_WITH_AES_128_CBC_SHA"   , "DHE-DSS-AES128-SHA"     },
+  { "TLS_DHE_DSS_WITH_AES_128_CBC_SHA256", "DHE-DSS-AES128-SHA256"  },
+  { "TLS_DHE_DSS_WITH_AES_256_CBC_SHA"   , "DHE-DSS-AES256-SHA"     },
+  { "TLS_DHE_DSS_WITH_AES_256_CBC_SHA256", "DHE-DSS-AES256-SHA256"  },
+  { "TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA"  , "EDH-RSA-DES-CBC3-SHA"   },
+  { "TLS_DHE_RSA_WITH_AES_128_CBC_SHA"   , "DHE-RSA-AES128-SHA"     },
+  { "TLS_DHE_RSA_WITH_AES_128_CBC_SHA256", "DHE-RSA-AES128-SHA256"  },
+  { "TLS_DHE_RSA_WITH_AES_256_CBC_SHA"   , "DHE-RSA-AES256-SHA"     },
+  { "TLS_DHE_RSA_WITH_AES_256_CBC_SHA256", "DHE-RSA-AES256-SHA256"  },
+
+  { NULL, NULL},
+};
+
+static const char* get_ossl_cs(const char *csname) {
+    const ciphername_t *p;
+
+    for (p = &ciphernames[0]; p->fullname != NULL; ++p) {
+        if (strcmp(csname, p->fullname) == 0)
+            return p->osslname;
+    }
+
+    return NULL;
+}
+
+static const char* get_cs_fullname(const char *csname) {
+    const ciphername_t *p;
+
+    for (p = &ciphernames[0]; p->fullname != NULL; ++p) {
+        if (strcmp(csname, p->osslname) == 0)
+            return p->fullname;
+    }
+
+    return NULL;
+}
+
+/* -------------------------------------------------------------------- */
+static const int zero = 0;
+static const int one  = 1;
+
+/* -------------------------------------------------------------------- */
+void client(SSL_CTX *sslctx, const struct echossl_s *options) {
+#define BLKSZ (256 * 1024u)
+    int   i;
+    int   fd;
+    int   rr;
+    in4_t peername;
+
+    SSL *ssl = NULL;
+
+    size_t sent = 0;
+    size_t upos = 0;
+
+    struct timeval tv1;
+    struct timeval tv2;
+
+    unsigned hsdone  = 0;
+    double   hsticks = 0;
+
+    memset(&peername, 0, sizeof(in4_t));
+    peername.sin_family = AF_INET;
+    peername.sin_addr   = (struct in_addr) { .s_addr = htonl(INADDR_LOOPBACK) };
+    peername.sin_port   = htons(5000);
+
+    for (i = 0; i < 250; ++i) {
+        uint8_t byte[1] = { 0x00 };
+
+        if ((fd = socket(AF_INET, SOCK_STREAM, 0)) < 0)
+            sock_error("socket(AF_INET, SOCK_STREAM)");
+        if (connect(fd, (sockaddr_t*) &peername, sizeof(in4_t)) < 0)
+            sock_error("connecting to server (HS)");
+
+        (void) gettimeofday(&tv1, NULL);
+
+        if ((ssl = SSL_new(sslctx)) == NULL)
+            i_error("cannot SSL server side SSL context");
+        (void) SSL_set_fd(ssl, fd);
+        /* If the underlying BIO is blocking, SSL_connect() will only
+           return once the handshake has been finished or an error
+           occurred. */
+        if ((rr = SSL_connect(ssl)) <= 0)
+            s_error(ERR_get_error(), "SSL connect failed");
+
+        if (SSL_write(ssl, byte, 1) <= 0)
+            s_error(ERR_get_error(), "SSL write (HS) failed");
+
+        (void) gettimeofday(&tv2, NULL);
+
+        (void) SSL_shutdown(ssl);
+        (void) SSL_free(ssl);
+        (void) closesocket(fd); fd = -1;
+
+        double tv1_d = (double)tv1.tv_sec + ((double)tv1.tv_usec) / 1000000;
+        double tv2_d = (double)tv2.tv_sec + ((double)tv2.tv_usec) / 1000000;
+
+        if (i != 0) {
+            hsdone  += 1;
+            hsticks += (tv2_d - tv1_d);
+            
+        }
+    }
+
+    if ((fd = socket(AF_INET, SOCK_STREAM, 0)) < 0)
+        sock_error("socket(AF_INET, SOCK_STREAM)");
+
+    if (connect(fd, (sockaddr_t*) &peername, sizeof(in4_t)) < 0)
+        sock_error("connecting to server");
+
+    {   int ival = 128 * 1024;
+        int oval = 128 * 1024;
+        setsockopt(fd, SOL_SOCKET, SO_RCVBUF, (void*) &ival, sizeof(ival));
+        setsockopt(fd, SOL_SOCKET, SO_SNDBUF, (void*) &oval, sizeof(oval));
+    }
+
+    if ((ssl = SSL_new(sslctx)) == NULL)
+        i_error("cannot SSL server side SSL context");
+    (void) SSL_set_fd(ssl, fd);
+    if ((rr = SSL_connect(ssl)) <= 0)
+        s_error(ERR_get_error(), "SSL connect failed");
+
+    (void) gettimeofday(&tv1, NULL);
+
+    while (sent < TOSEND) {
+        if (sizeof(udata) - upos < BLKSZ)
+            upos = 0;
+        if ((rr = SSL_write(ssl, &udata[upos], BLKSZ)) <= 0)
+            s_error(ERR_get_error(), "client-side write failed");
+        sent += rr;
+        upos += rr;
+        
+    }
+
+    (void) gettimeofday(&tv2, NULL);
+
+    if ((rr = SSL_shutdown(ssl)) < 0)
+        s_error(ERR_get_error(), "client-side shutdown failed");
+    if (rr < 0)
+        s_error(ERR_get_error(), "client-side shutdown failed");
+    if (rr == 0) {
+        if ((rr = SSL_shutdown(ssl)) < 0) {
+            printf("%d\n", SSL_get_error(ssl, rr));
+            s_error(ERR_get_error(), "client-side (bis) shutdown failed");
+        }
+    }
+
+    SSL_free(ssl);
+
+    double tv1_d = (double)tv1.tv_sec + ((double)tv1.tv_usec) / 1000000;
+    double tv2_d = (double)tv2.tv_sec + ((double)tv2.tv_usec) / 1000000;
+
+    printf("%s: %.2f HS/s\n",
+           get_cs_fullname(options->ciphers),
+           (hsdone / hsticks));
+    printf("%s: %.2f MiB/s\n",
+           get_cs_fullname(options->ciphers),
+           (sent / ((double) (1024 * 1024))) / (tv2_d - tv1_d));
+
+    (void) closesocket(fd);
+}
+
+/* -------------------------------------------------------------------- */
+int main(void) {
+    struct echossl_s options;
+    SSL_CTX *sslctx = NULL;
+
+#ifdef WIN32
+    WSADATA WSAData;
+#endif
+
+    initialize_log4c();
+
+#ifdef WIN32
+    if (WSAStartup(MAKEWORD(2, 2), &WSAData) != 0) {
+        elog(LOG_FATAL, "cannot initialize winsocks");
+        return EXIT_FAILURE;
+    }
+#endif
+
+    options.ciphers = getenv("CIPHERSUITE");
+    options.sname   = NULL;
+    options.cname   = NULL;
+    options.pki     = getenv("PKI");
+    options.tlsver  = TLS_1p2;
+
+    if (options.ciphers == NULL)
+        i_error("no cipher suite given");
+    options.ciphers = (char*) get_ossl_cs(options.ciphers);
+    if (options.ciphers == NULL)
+        i_error("unknown cipher name");
+    options.ciphers = xstrdup(options.ciphers);
+    if (options.pki == NULL)
+        i_error("no PKI directory given");
+    options.pki = xstrdup(options.pki);
+
+    (void) SSL_library_init();
+    udata_initialize();
+
+    if ((sslctx = evssl_init(&options, 0)) == NULL)
+        i_error("cannot initialize SSL context");
+    (void) SSL_CTX_set_mode(sslctx, SSL_MODE_AUTO_RETRY);
+    (void) SSL_CTX_set_session_cache_mode(sslctx, SSL_SESS_CACHE_OFF);
+    client(sslctx, &options);
+
+#ifdef WIN32
+    (void) WSACleanup();
+#endif
+
+    return EXIT_SUCCESS;
+}
diff --git a/tests/bench/openssl-server.c b/tests/bench/openssl-server.c
index 358b9df..a870e11 100644
--- a/tests/bench/openssl-server.c
+++ b/tests/bench/openssl-server.c
@@ -1,188 +1,188 @@
-/* -------------------------------------------------------------------- */
-#include <sys/types.h>
-#include <stdlib.h>
-#include <stdio.h>
-#include <stdint.h>
-#include <string.h>
-#include <errno.h>
-#include <fcntl.h>
-#include <signal.h>
-#include <unistd.h>
-#include <sys/time.h>
-
-#include <openssl/bio.h>
-#include <openssl/ssl.h>
-#include <openssl/err.h>
-
-#define ECHO_NO_EVENT_LIB 1
-
-#include "echo-memory.h"
-#include "echo-ssl.h"
-#include "echo-log.h"
-#include "echo-net.h"
-
-#ifndef WIN32
-# define closesocket close
-#endif
-
-/* -------------------------------------------------------------------- */
-#define TOSEND (64 * 1024u * 1024u)
-
-/* -------------------------------------------------------------------- */
-typedef struct sockaddr sockaddr_t;
-typedef struct sockaddr_in in4_t;
-
-/* -------------------------------------------------------------------- */
-static void e_error(const char *message)
-    __attribute__((noreturn));
-
-static void e_error(const char *message) { /* Should move to WSAError under winsocks... */
-    elog(LOG_FATAL, "%s: %s", message, strerror(errno));
-    exit(EXIT_FAILURE);
-}
-
-static void i_error(const char *message)
-    __attribute__((noreturn));
-
-static void i_error(const char *message) {
-    elog(LOG_FATAL, "%s", message);
-    exit(EXIT_FAILURE);
-}
-
-static void s_error(unsigned long e, const char *message)
-    __attribute__((noreturn));
-
-static void s_error(unsigned long e, const char *message) {
-    elog(LOG_FATAL, "%s: %s", message, ERR_error_string(e, NULL));
-    exit(EXIT_FAILURE);
-}
-
-/* -------------------------------------------------------------------- */
-static const int zero = 0;
-static const int one  = 1;
-
-int listener(void) {
-    int   servfd = -1;
-    in4_t sockname;
-    in4_t peername;
-
-    if ((servfd = socket(AF_INET, SOCK_STREAM, 0)) < 0)
-        e_error("socket(AF_INET, SOCK_STREAM)");
-
-    memset(&sockname, 0, sizeof(in4_t));
-    sockname.sin_family = AF_INET;
-    sockname.sin_addr   = (struct in_addr) { .s_addr = INADDR_ANY };
-    sockname.sin_port   = htons(5000);
-
-    setsockopt(servfd, SOL_SOCKET, SO_REUSEADDR, (void*) &one, sizeof(one));
-
-    if (bind(servfd, (sockaddr_t*) &sockname, sizeof(in4_t)) < 0)
-        e_error("cannot bind socket");
-    if (listen(servfd, 5) < 0)
-        e_error("cannot set socket in listening mode");
-
-    memset(&peername, 0, sizeof(in4_t));
-
-    return servfd;
-}
-/* -------------------------------------------------------------------- */
-#define BUFSIZE (1024u * 1024u)
-
-void server(int servfd, SSL_CTX *sslctx) {
-    socklen_t peerlen = sizeof(in4_t);
-    in4_t     peername;
-    int       client;
-    int       rr;
-    uint8_t  *buffer = NULL;
-
-    SSL *ssl = NULL;
-
-    buffer = xmalloc(BUFSIZE);
-
-    while (1) {
-        memset(&peername, 0, sizeof(peername));
-        if ((client = accept(servfd, (sockaddr_t*) &peername, &peerlen)) < 0)
-            e_error("accepting client");
-
-        {   int ival = 128 * 1024;
-            int oval = 128 * 1024;
-            setsockopt(client, SOL_SOCKET, SO_RCVBUF, (void*) &ival, sizeof(ival));
-            setsockopt(client, SOL_SOCKET, SO_SNDBUF, (void*) &oval, sizeof(oval));
-        }
-
-        if ((ssl = SSL_new(sslctx)) == NULL)
-            i_error("cannot SSL server side SSL context");
-
-        (void) SSL_set_fd(ssl, client);
-        if ((rr = SSL_accept(ssl)) <= 0)
-            s_error(ERR_get_error(), "SSL accept failed");
-
-        while ((rr = SSL_read(ssl, buffer, BUFSIZE)) > 0) {}
-
-        if (rr == 0) {
-            int sslerr = SSL_get_error(ssl, rr);
-
-            if (sslerr == SSL_ERROR_ZERO_RETURN) {
-                if (!(SSL_get_shutdown(ssl) & SSL_RECEIVED_SHUTDOWN))
-                    s_error(ERR_get_error(), "short-read in server");
-            }
-        } else
-            s_error(ERR_get_error(), "read error in server");
-
-        (void) SSL_shutdown(ssl);
-        SSL_free(ssl);
-        closesocket(client);
-    }
-}
-
-/* -------------------------------------------------------------------- */
-int main(void) {
-    struct echossl_s options;
-    int fd;
-    SSL_CTX *sslctx = NULL;
-
-#ifdef WIN32
-    WSADATA WSAData;
-#endif
-
-    initialize_log4c();
-
-#ifdef WIN32
-    if (WSAStartup(MAKEWORD(2, 2), &WSAData) != 0) {
-        elog(LOG_FATAL, "cannot initialize winsocks");
-        return EXIT_FAILURE;
-    }
-#endif
-
-    options.ciphers = xstrdup("ALL:NULL");
-    options.sname   = getenv("CERTNAME");
-    options.cname   = NULL;
-    options.pki     = getenv("PKI");
-    options.tlsver  = TLS_1p2;
-
-    if (options.pki == NULL)
-        i_error("no PKI directory given");
-    options.pki = xstrdup(options.pki);
-
-    if (options.sname == NULL)
-        i_error("no cert-name given");
-    options.sname = xstrdup(options.sname);
-
-    (void) SSL_library_init();
-
-    fd = listener();
-
-    if ((sslctx = evssl_init(&options, 1)) == NULL)
-        i_error("cannot initialize SSL context");
-    (void) SSL_CTX_set_mode(sslctx, SSL_MODE_AUTO_RETRY);
-    (void) SSL_CTX_set_session_cache_mode(sslctx, SSL_SESS_CACHE_OFF);
-    server(fd, sslctx);
-
-    (void) closesocket(fd);
-
-#ifdef WIN32
-    (void) WSACleanup();
-#endif
-
-    return EXIT_SUCCESS;
-}
+/* -------------------------------------------------------------------- */
+#include <sys/types.h>
+#include <stdlib.h>
+#include <stdio.h>
+#include <stdint.h>
+#include <string.h>
+#include <errno.h>
+#include <fcntl.h>
+#include <signal.h>
+#include <unistd.h>
+#include <sys/time.h>
+
+#include <openssl/bio.h>
+#include <openssl/ssl.h>
+#include <openssl/err.h>
+
+#define ECHO_NO_EVENT_LIB 1
+
+#include "echo-memory.h"
+#include "echo-ssl.h"
+#include "echo-log.h"
+#include "echo-net.h"
+
+#ifndef WIN32
+# define closesocket close
+#endif
+
+/* -------------------------------------------------------------------- */
+#define TOSEND (64 * 1024u * 1024u)
+
+/* -------------------------------------------------------------------- */
+typedef struct sockaddr sockaddr_t;
+typedef struct sockaddr_in in4_t;
+
+/* -------------------------------------------------------------------- */
+static void e_error(const char *message)
+    __attribute__((noreturn));
+
+static void e_error(const char *message) { /* Should move to WSAError under winsocks... */
+    elog(LOG_FATAL, "%s: %s", message, strerror(errno));
+    exit(EXIT_FAILURE);
+}
+
+static void i_error(const char *message)
+    __attribute__((noreturn));
+
+static void i_error(const char *message) {
+    elog(LOG_FATAL, "%s", message);
+    exit(EXIT_FAILURE);
+}
+
+static void s_error(unsigned long e, const char *message)
+    __attribute__((noreturn));
+
+static void s_error(unsigned long e, const char *message) {
+    elog(LOG_FATAL, "%s: %s", message, ERR_error_string(e, NULL));
+    exit(EXIT_FAILURE);
+}
+
+/* -------------------------------------------------------------------- */
+static const int zero = 0;
+static const int one  = 1;
+
+int listener(void) {
+    int   servfd = -1;
+    in4_t sockname;
+    in4_t peername;
+
+    if ((servfd = socket(AF_INET, SOCK_STREAM, 0)) < 0)
+        e_error("socket(AF_INET, SOCK_STREAM)");
+
+    memset(&sockname, 0, sizeof(in4_t));
+    sockname.sin_family = AF_INET;
+    sockname.sin_addr   = (struct in_addr) { .s_addr = INADDR_ANY };
+    sockname.sin_port   = htons(5000);
+
+    setsockopt(servfd, SOL_SOCKET, SO_REUSEADDR, (void*) &one, sizeof(one));
+
+    if (bind(servfd, (sockaddr_t*) &sockname, sizeof(in4_t)) < 0)
+        e_error("cannot bind socket");
+    if (listen(servfd, 5) < 0)
+        e_error("cannot set socket in listening mode");
+
+    memset(&peername, 0, sizeof(in4_t));
+
+    return servfd;
+}
+/* -------------------------------------------------------------------- */
+#define BUFSIZE (1024u * 1024u)
+
+void server(int servfd, SSL_CTX *sslctx) {
+    socklen_t peerlen = sizeof(in4_t);
+    in4_t     peername;
+    int       client;
+    int       rr;
+    uint8_t  *buffer = NULL;
+
+    SSL *ssl = NULL;
+
+    buffer = xmalloc(BUFSIZE);
+
+    while (1) {
+        memset(&peername, 0, sizeof(peername));
+        if ((client = accept(servfd, (sockaddr_t*) &peername, &peerlen)) < 0)
+            e_error("accepting client");
+    
+        {   int ival = 128 * 1024;
+            int oval = 128 * 1024;
+            setsockopt(client, SOL_SOCKET, SO_RCVBUF, (void*) &ival, sizeof(ival));
+            setsockopt(client, SOL_SOCKET, SO_SNDBUF, (void*) &oval, sizeof(oval));
+        }
+
+        if ((ssl = SSL_new(sslctx)) == NULL)
+            i_error("cannot SSL server side SSL context");
+    
+        (void) SSL_set_fd(ssl, client);
+        if ((rr = SSL_accept(ssl)) <= 0)
+            s_error(ERR_get_error(), "SSL accept failed");
+    
+        while ((rr = SSL_read(ssl, buffer, BUFSIZE)) > 0) {}
+    
+        if (rr == 0) {
+            int sslerr = SSL_get_error(ssl, rr);
+    
+            if (sslerr == SSL_ERROR_ZERO_RETURN) {
+                if (!(SSL_get_shutdown(ssl) & SSL_RECEIVED_SHUTDOWN))
+                    s_error(ERR_get_error(), "short-read in server");
+            }
+        } else
+            s_error(ERR_get_error(), "read error in server");
+    
+        (void) SSL_shutdown(ssl);
+        SSL_free(ssl);
+        closesocket(client);
+    }
+}
+
+/* -------------------------------------------------------------------- */
+int main(void) {
+    struct echossl_s options;
+    int fd;
+    SSL_CTX *sslctx = NULL;
+
+#ifdef WIN32
+    WSADATA WSAData;
+#endif
+
+    initialize_log4c();
+
+#ifdef WIN32
+    if (WSAStartup(MAKEWORD(2, 2), &WSAData) != 0) {
+        elog(LOG_FATAL, "cannot initialize winsocks");
+        return EXIT_FAILURE;
+    }
+#endif
+
+    options.ciphers = xstrdup("ALL:NULL");
+    options.sname   = getenv("CERTNAME");
+    options.cname   = NULL;
+    options.pki     = getenv("PKI");
+    options.tlsver  = TLS_1p2;
+
+    if (options.pki == NULL)
+        i_error("no PKI directory given");
+    options.pki = xstrdup(options.pki);
+
+    if (options.sname == NULL)
+        i_error("no cert-name given");
+    options.sname = xstrdup(options.sname);
+
+    (void) SSL_library_init();
+
+    fd = listener();
+
+    if ((sslctx = evssl_init(&options, 1)) == NULL)
+        i_error("cannot initialize SSL context");
+    (void) SSL_CTX_set_mode(sslctx, SSL_MODE_AUTO_RETRY);
+    (void) SSL_CTX_set_session_cache_mode(sslctx, SSL_SESS_CACHE_OFF);
+    server(fd, sslctx);
+
+    (void) closesocket(fd);
+
+#ifdef WIN32
+    (void) WSACleanup();
+#endif
+
+    return EXIT_SUCCESS;
+}
diff --git a/tests/bench/results/oakland-13/mitls/bc-dotnet.txt b/tests/bench/results/oakland-13/mitls/bc-dotnet.txt
index 07b306d..67a294c 100644
--- a/tests/bench/results/oakland-13/mitls/bc-dotnet.txt
+++ b/tests/bench/results/oakland-13/mitls/bc-dotnet.txt
@@ -1,4 +1,4 @@
-TLS_RSA_WITH_AES_128_CBC_SHA: 5.30 HS/s
-TLS_RSA_WITH_AES_128_CBC_SHA: 19.63 MiB/s
-TLS_RSA_WITH_AES_256_CBC_SHA: 4.89 HS/s
-TLS_RSA_WITH_AES_256_CBC_SHA: 17.68 MiB/s
+TLS_RSA_WITH_AES_128_CBC_SHA: 5.30 HS/s
+TLS_RSA_WITH_AES_128_CBC_SHA: 19.63 MiB/s
+TLS_RSA_WITH_AES_256_CBC_SHA: 4.89 HS/s
+TLS_RSA_WITH_AES_256_CBC_SHA: 17.68 MiB/s
diff --git a/tests/bench/results/oakland-13/mitls/mitls.txt b/tests/bench/results/oakland-13/mitls/mitls.txt
index 37db9da..42e271e 100644
--- a/tests/bench/results/oakland-13/mitls/mitls.txt
+++ b/tests/bench/results/oakland-13/mitls/mitls.txt
@@ -1,24 +1,24 @@
-TLS_RSA_WITH_RC4_128_MD5: 8.48 HS/s
-TLS_RSA_WITH_RC4_128_MD5: 29.46 MiB/s
-TLS_RSA_WITH_RC4_128_SHA: 9.19 HS/s
-TLS_RSA_WITH_RC4_128_SHA: 27.08 MiB/s
-TLS_RSA_WITH_3DES_EDE_CBC_SHA: 9.11 HS/s
-TLS_RSA_WITH_3DES_EDE_CBC_SHA: 8.33 MiB/s
-TLS_RSA_WITH_AES_128_CBC_SHA: 8.45 HS/s
-TLS_RSA_WITH_AES_128_CBC_SHA: 18.07 MiB/s
-TLS_RSA_WITH_AES_128_CBC_SHA256: 9.33 HS/s
-TLS_RSA_WITH_AES_128_CBC_SHA256: 16.06 MiB/s
-TLS_RSA_WITH_AES_256_CBC_SHA: 8.91 HS/s
-TLS_RSA_WITH_AES_256_CBC_SHA: 16.07 MiB/s
-TLS_RSA_WITH_AES_256_CBC_SHA256: 8.86 HS/s
-TLS_RSA_WITH_AES_256_CBC_SHA256: 14.15 MiB/s
-TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA: 4.93 HS/s
-TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA: 8.33 MiB/s
-TLS_DHE_DSS_WITH_AES_128_CBC_SHA: 5.18 HS/s
-TLS_DHE_DSS_WITH_AES_128_CBC_SHA: 18.01 MiB/s
-TLS_DHE_DSS_WITH_AES_128_CBC_SHA256: 4.82 HS/s
-TLS_DHE_DSS_WITH_AES_128_CBC_SHA256: 16.09 MiB/s
-TLS_DHE_DSS_WITH_AES_256_CBC_SHA: 5.06 HS/s
-TLS_DHE_DSS_WITH_AES_256_CBC_SHA: 16.46 MiB/s
-TLS_DHE_DSS_WITH_AES_256_CBC_SHA256: 5.11 HS/s
-TLS_DHE_DSS_WITH_AES_256_CBC_SHA256: 14.63 MiB/s
+TLS_RSA_WITH_RC4_128_MD5: 8.48 HS/s
+TLS_RSA_WITH_RC4_128_MD5: 29.46 MiB/s
+TLS_RSA_WITH_RC4_128_SHA: 9.19 HS/s
+TLS_RSA_WITH_RC4_128_SHA: 27.08 MiB/s
+TLS_RSA_WITH_3DES_EDE_CBC_SHA: 9.11 HS/s
+TLS_RSA_WITH_3DES_EDE_CBC_SHA: 8.33 MiB/s
+TLS_RSA_WITH_AES_128_CBC_SHA: 8.45 HS/s
+TLS_RSA_WITH_AES_128_CBC_SHA: 18.07 MiB/s
+TLS_RSA_WITH_AES_128_CBC_SHA256: 9.33 HS/s
+TLS_RSA_WITH_AES_128_CBC_SHA256: 16.06 MiB/s
+TLS_RSA_WITH_AES_256_CBC_SHA: 8.91 HS/s
+TLS_RSA_WITH_AES_256_CBC_SHA: 16.07 MiB/s
+TLS_RSA_WITH_AES_256_CBC_SHA256: 8.86 HS/s
+TLS_RSA_WITH_AES_256_CBC_SHA256: 14.15 MiB/s
+TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA: 4.93 HS/s
+TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA: 8.33 MiB/s
+TLS_DHE_DSS_WITH_AES_128_CBC_SHA: 5.18 HS/s
+TLS_DHE_DSS_WITH_AES_128_CBC_SHA: 18.01 MiB/s
+TLS_DHE_DSS_WITH_AES_128_CBC_SHA256: 4.82 HS/s
+TLS_DHE_DSS_WITH_AES_128_CBC_SHA256: 16.09 MiB/s
+TLS_DHE_DSS_WITH_AES_256_CBC_SHA: 5.06 HS/s
+TLS_DHE_DSS_WITH_AES_256_CBC_SHA: 16.46 MiB/s
+TLS_DHE_DSS_WITH_AES_256_CBC_SHA256: 5.11 HS/s
+TLS_DHE_DSS_WITH_AES_256_CBC_SHA256: 14.63 MiB/s
diff --git a/tests/bench/results/oakland-13/mitls/openssl.txt b/tests/bench/results/oakland-13/mitls/openssl.txt
index 7e2e164..e8c5823 100644
--- a/tests/bench/results/oakland-13/mitls/openssl.txt
+++ b/tests/bench/results/oakland-13/mitls/openssl.txt
@@ -1,24 +1,24 @@
-TLS_RSA_WITH_RC4_128_MD5: 24.37 HS/s
-TLS_RSA_WITH_RC4_128_MD5: 41.44 MiB/s
-TLS_RSA_WITH_RC4_128_SHA: 24.18 HS/s
-TLS_RSA_WITH_RC4_128_SHA: 36.31 MiB/s
-TLS_RSA_WITH_3DES_EDE_CBC_SHA: 24.41 HS/s
-TLS_RSA_WITH_3DES_EDE_CBC_SHA: 8.74 MiB/s
-TLS_RSA_WITH_AES_128_CBC_SHA: 24.33 HS/s
-TLS_RSA_WITH_AES_128_CBC_SHA: 19.96 MiB/s
-TLS_RSA_WITH_AES_128_CBC_SHA256: 24.00 HS/s
-TLS_RSA_WITH_AES_128_CBC_SHA256: 17.53 MiB/s
-TLS_RSA_WITH_AES_256_CBC_SHA: 24.11 HS/s
-TLS_RSA_WITH_AES_256_CBC_SHA: 17.99 MiB/s
-TLS_RSA_WITH_AES_256_CBC_SHA256: 24.29 HS/s
-TLS_RSA_WITH_AES_256_CBC_SHA256: 15.93 MiB/s
-TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA: 14.93 HS/s
-TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA: 8.78 MiB/s
-TLS_DHE_DSS_WITH_AES_128_CBC_SHA: 14.92 HS/s
-TLS_DHE_DSS_WITH_AES_128_CBC_SHA: 19.96 MiB/s
-TLS_DHE_DSS_WITH_AES_128_CBC_SHA256: 14.63 HS/s
-TLS_DHE_DSS_WITH_AES_128_CBC_SHA256: 17.46 MiB/s
-TLS_DHE_DSS_WITH_AES_256_CBC_SHA: 14.88 HS/s
-TLS_DHE_DSS_WITH_AES_256_CBC_SHA: 17.92 MiB/s
-TLS_DHE_DSS_WITH_AES_256_CBC_SHA256: 14.89 HS/s
-TLS_DHE_DSS_WITH_AES_256_CBC_SHA256: 15.81 MiB/s
+TLS_RSA_WITH_RC4_128_MD5: 24.37 HS/s
+TLS_RSA_WITH_RC4_128_MD5: 41.44 MiB/s
+TLS_RSA_WITH_RC4_128_SHA: 24.18 HS/s
+TLS_RSA_WITH_RC4_128_SHA: 36.31 MiB/s
+TLS_RSA_WITH_3DES_EDE_CBC_SHA: 24.41 HS/s
+TLS_RSA_WITH_3DES_EDE_CBC_SHA: 8.74 MiB/s
+TLS_RSA_WITH_AES_128_CBC_SHA: 24.33 HS/s
+TLS_RSA_WITH_AES_128_CBC_SHA: 19.96 MiB/s
+TLS_RSA_WITH_AES_128_CBC_SHA256: 24.00 HS/s
+TLS_RSA_WITH_AES_128_CBC_SHA256: 17.53 MiB/s
+TLS_RSA_WITH_AES_256_CBC_SHA: 24.11 HS/s
+TLS_RSA_WITH_AES_256_CBC_SHA: 17.99 MiB/s
+TLS_RSA_WITH_AES_256_CBC_SHA256: 24.29 HS/s
+TLS_RSA_WITH_AES_256_CBC_SHA256: 15.93 MiB/s
+TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA: 14.93 HS/s
+TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA: 8.78 MiB/s
+TLS_DHE_DSS_WITH_AES_128_CBC_SHA: 14.92 HS/s
+TLS_DHE_DSS_WITH_AES_128_CBC_SHA: 19.96 MiB/s
+TLS_DHE_DSS_WITH_AES_128_CBC_SHA256: 14.63 HS/s
+TLS_DHE_DSS_WITH_AES_128_CBC_SHA256: 17.46 MiB/s
+TLS_DHE_DSS_WITH_AES_256_CBC_SHA: 14.88 HS/s
+TLS_DHE_DSS_WITH_AES_256_CBC_SHA: 17.92 MiB/s
+TLS_DHE_DSS_WITH_AES_256_CBC_SHA256: 14.89 HS/s
+TLS_DHE_DSS_WITH_AES_256_CBC_SHA256: 15.81 MiB/s
diff --git a/tests/bench/results/oakland-13/mitls/oracle-jsse-1.7.txt b/tests/bench/results/oakland-13/mitls/oracle-jsse-1.7.txt
index eb62686..8427c6c 100644
--- a/tests/bench/results/oakland-13/mitls/oracle-jsse-1.7.txt
+++ b/tests/bench/results/oakland-13/mitls/oracle-jsse-1.7.txt
@@ -1,16 +1,16 @@
-TLS_RSA_WITH_RC4_128_MD5: 17.81 HS/s
-TLS_RSA_WITH_RC4_128_MD5: 25.09 MiB/s
-TLS_RSA_WITH_RC4_128_SHA: 23.59 HS/s
-TLS_RSA_WITH_RC4_128_SHA: 22.64 MiB/s
-TLS_RSA_WITH_3DES_EDE_CBC_SHA: 23.34 HS/s
-TLS_RSA_WITH_3DES_EDE_CBC_SHA: 6.60 MiB/s
-TLS_RSA_WITH_AES_128_CBC_SHA: 23.45 HS/s
-TLS_RSA_WITH_AES_128_CBC_SHA: 13.52 MiB/s
-TLS_RSA_WITH_AES_128_CBC_SHA256: 23.02 HS/s
-TLS_RSA_WITH_AES_128_CBC_SHA256: 12.04 MiB/s
-TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA: 13.14 HS/s
-TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA: 6.60 MiB/s
-TLS_DHE_DSS_WITH_AES_128_CBC_SHA: 13.32 HS/s
-TLS_DHE_DSS_WITH_AES_128_CBC_SHA: 13.58 MiB/s
-TLS_DHE_DSS_WITH_AES_128_CBC_SHA256: 13.18 HS/s
-TLS_DHE_DSS_WITH_AES_128_CBC_SHA256: 11.89 MiB/s
+TLS_RSA_WITH_RC4_128_MD5: 17.81 HS/s
+TLS_RSA_WITH_RC4_128_MD5: 25.09 MiB/s
+TLS_RSA_WITH_RC4_128_SHA: 23.59 HS/s
+TLS_RSA_WITH_RC4_128_SHA: 22.64 MiB/s
+TLS_RSA_WITH_3DES_EDE_CBC_SHA: 23.34 HS/s
+TLS_RSA_WITH_3DES_EDE_CBC_SHA: 6.60 MiB/s
+TLS_RSA_WITH_AES_128_CBC_SHA: 23.45 HS/s
+TLS_RSA_WITH_AES_128_CBC_SHA: 13.52 MiB/s
+TLS_RSA_WITH_AES_128_CBC_SHA256: 23.02 HS/s
+TLS_RSA_WITH_AES_128_CBC_SHA256: 12.04 MiB/s
+TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA: 13.14 HS/s
+TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA: 6.60 MiB/s
+TLS_DHE_DSS_WITH_AES_128_CBC_SHA: 13.32 HS/s
+TLS_DHE_DSS_WITH_AES_128_CBC_SHA: 13.58 MiB/s
+TLS_DHE_DSS_WITH_AES_128_CBC_SHA256: 13.18 HS/s
+TLS_DHE_DSS_WITH_AES_128_CBC_SHA256: 11.89 MiB/s
diff --git a/tests/bench/results/oakland-13/openssl/bc-dotnet.txt b/tests/bench/results/oakland-13/openssl/bc-dotnet.txt
index 63d24d5..3b6dea8 100644
--- a/tests/bench/results/oakland-13/openssl/bc-dotnet.txt
+++ b/tests/bench/results/oakland-13/openssl/bc-dotnet.txt
@@ -1,8 +1,8 @@
-TLS_RSA_WITH_3DES_EDE_CBC_SHA: 5.48 HS/s
-TLS_RSA_WITH_3DES_EDE_CBC_SHA: 9.20 MiB/s
-TLS_RSA_WITH_AES_128_CBC_SHA: 5.03 HS/s
-TLS_RSA_WITH_AES_128_CBC_SHA: 29.51 MiB/s
-TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA: 4.18 HS/s
-TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA: 9.22 MiB/s
-TLS_DHE_DSS_WITH_AES_128_CBC_SHA: 4.36 HS/s
-TLS_DHE_DSS_WITH_AES_128_CBC_SHA: 29.51 MiB/s
+TLS_RSA_WITH_3DES_EDE_CBC_SHA: 5.48 HS/s
+TLS_RSA_WITH_3DES_EDE_CBC_SHA: 9.20 MiB/s
+TLS_RSA_WITH_AES_128_CBC_SHA: 5.03 HS/s
+TLS_RSA_WITH_AES_128_CBC_SHA: 29.51 MiB/s
+TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA: 4.18 HS/s
+TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA: 9.22 MiB/s
+TLS_DHE_DSS_WITH_AES_128_CBC_SHA: 4.36 HS/s
+TLS_DHE_DSS_WITH_AES_128_CBC_SHA: 29.51 MiB/s
diff --git a/tests/bench/results/oakland-13/openssl/mitls-optimized-bytes.txt b/tests/bench/results/oakland-13/openssl/mitls-optimized-bytes.txt
index 0cb3ad5..9f60383 100644
--- a/tests/bench/results/oakland-13/openssl/mitls-optimized-bytes.txt
+++ b/tests/bench/results/oakland-13/openssl/mitls-optimized-bytes.txt
@@ -1,24 +1,24 @@
-TLS_RSA_WITH_RC4_128_MD5: 254.37 HS/s
-TLS_RSA_WITH_RC4_128_MD5: 89.67 MiB/s
-TLS_RSA_WITH_RC4_128_SHA: 222.58 HS/s
-TLS_RSA_WITH_RC4_128_SHA: 91.42 MiB/s
-TLS_RSA_WITH_3DES_EDE_CBC_SHA: 228.94 HS/s
-TLS_RSA_WITH_3DES_EDE_CBC_SHA: 19.51 MiB/s
-TLS_RSA_WITH_AES_128_CBC_SHA: 239.19 HS/s
-TLS_RSA_WITH_AES_128_CBC_SHA: 85.69 MiB/s
-TLS_RSA_WITH_AES_128_CBC_SHA256: 242.81 HS/s
-TLS_RSA_WITH_AES_128_CBC_SHA256: 64.86 MiB/s
-TLS_RSA_WITH_AES_256_CBC_SHA: 232.26 HS/s
-TLS_RSA_WITH_AES_256_CBC_SHA: 80.64 MiB/s
-TLS_RSA_WITH_AES_256_CBC_SHA256: 246.55 HS/s
-TLS_RSA_WITH_AES_256_CBC_SHA256: 63.24 MiB/s
-TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA: 20.76 HS/s
-TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA: 19.55 MiB/s
-TLS_DHE_DSS_WITH_AES_128_CBC_SHA: 20.70 HS/s
-TLS_DHE_DSS_WITH_AES_128_CBC_SHA: 84.37 MiB/s
-TLS_DHE_DSS_WITH_AES_128_CBC_SHA256: 20.84 HS/s
-TLS_DHE_DSS_WITH_AES_128_CBC_SHA256: 66.04 MiB/s
-TLS_DHE_DSS_WITH_AES_256_CBC_SHA: 20.70 HS/s
-TLS_DHE_DSS_WITH_AES_256_CBC_SHA: 79.86 MiB/s
-TLS_DHE_DSS_WITH_AES_256_CBC_SHA256: 20.89 HS/s
-TLS_DHE_DSS_WITH_AES_256_CBC_SHA256: 62.75 MiB/s
+TLS_RSA_WITH_RC4_128_MD5: 254.37 HS/s
+TLS_RSA_WITH_RC4_128_MD5: 89.67 MiB/s
+TLS_RSA_WITH_RC4_128_SHA: 222.58 HS/s
+TLS_RSA_WITH_RC4_128_SHA: 91.42 MiB/s
+TLS_RSA_WITH_3DES_EDE_CBC_SHA: 228.94 HS/s
+TLS_RSA_WITH_3DES_EDE_CBC_SHA: 19.51 MiB/s
+TLS_RSA_WITH_AES_128_CBC_SHA: 239.19 HS/s
+TLS_RSA_WITH_AES_128_CBC_SHA: 85.69 MiB/s
+TLS_RSA_WITH_AES_128_CBC_SHA256: 242.81 HS/s
+TLS_RSA_WITH_AES_128_CBC_SHA256: 64.86 MiB/s
+TLS_RSA_WITH_AES_256_CBC_SHA: 232.26 HS/s
+TLS_RSA_WITH_AES_256_CBC_SHA: 80.64 MiB/s
+TLS_RSA_WITH_AES_256_CBC_SHA256: 246.55 HS/s
+TLS_RSA_WITH_AES_256_CBC_SHA256: 63.24 MiB/s
+TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA: 20.76 HS/s
+TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA: 19.55 MiB/s
+TLS_DHE_DSS_WITH_AES_128_CBC_SHA: 20.70 HS/s
+TLS_DHE_DSS_WITH_AES_128_CBC_SHA: 84.37 MiB/s
+TLS_DHE_DSS_WITH_AES_128_CBC_SHA256: 20.84 HS/s
+TLS_DHE_DSS_WITH_AES_128_CBC_SHA256: 66.04 MiB/s
+TLS_DHE_DSS_WITH_AES_256_CBC_SHA: 20.70 HS/s
+TLS_DHE_DSS_WITH_AES_256_CBC_SHA: 79.86 MiB/s
+TLS_DHE_DSS_WITH_AES_256_CBC_SHA256: 20.89 HS/s
+TLS_DHE_DSS_WITH_AES_256_CBC_SHA256: 62.75 MiB/s
diff --git a/tests/bench/results/oakland-13/openssl/mitls.txt b/tests/bench/results/oakland-13/openssl/mitls.txt
index 4485265..13f2508 100644
--- a/tests/bench/results/oakland-13/openssl/mitls.txt
+++ b/tests/bench/results/oakland-13/openssl/mitls.txt
@@ -1,24 +1,24 @@
-TLS_RSA_WITH_RC4_128_MD5: 305.25 HS/s
-TLS_RSA_WITH_RC4_128_MD5: 30.17 MiB/s
-TLS_RSA_WITH_RC4_128_SHA: 291.37 HS/s
-TLS_RSA_WITH_RC4_128_SHA: 27.85 MiB/s
-TLS_RSA_WITH_3DES_EDE_CBC_SHA: 267.09 HS/s
-TLS_RSA_WITH_3DES_EDE_CBC_SHA: 8.40 MiB/s
-TLS_RSA_WITH_AES_128_CBC_SHA: 278.71 HS/s
-TLS_RSA_WITH_AES_128_CBC_SHA: 18.54 MiB/s
-TLS_RSA_WITH_AES_128_CBC_SHA256: 278.71 HS/s
-TLS_RSA_WITH_AES_128_CBC_SHA256: 16.50 MiB/s
-TLS_RSA_WITH_AES_256_CBC_SHA: 291.37 HS/s
-TLS_RSA_WITH_AES_256_CBC_SHA: 16.86 MiB/s
-TLS_RSA_WITH_AES_256_CBC_SHA256: 267.09 HS/s
-TLS_RSA_WITH_AES_256_CBC_SHA256: 15.16 MiB/s
-TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA: 20.16 HS/s
-TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA: 8.37 MiB/s
-TLS_DHE_DSS_WITH_AES_128_CBC_SHA: 20.41 HS/s
-TLS_DHE_DSS_WITH_AES_128_CBC_SHA: 18.59 MiB/s
-TLS_DHE_DSS_WITH_AES_128_CBC_SHA256: 19.99 HS/s
-TLS_DHE_DSS_WITH_AES_128_CBC_SHA256: 16.45 MiB/s
-TLS_DHE_DSS_WITH_AES_256_CBC_SHA: 20.29 HS/s
-TLS_DHE_DSS_WITH_AES_256_CBC_SHA: 16.72 MiB/s
-TLS_DHE_DSS_WITH_AES_256_CBC_SHA256: 20.16 HS/s
-TLS_DHE_DSS_WITH_AES_256_CBC_SHA256: 14.86 MiB/s
+TLS_RSA_WITH_RC4_128_MD5: 305.25 HS/s
+TLS_RSA_WITH_RC4_128_MD5: 30.17 MiB/s
+TLS_RSA_WITH_RC4_128_SHA: 291.37 HS/s
+TLS_RSA_WITH_RC4_128_SHA: 27.85 MiB/s
+TLS_RSA_WITH_3DES_EDE_CBC_SHA: 267.09 HS/s
+TLS_RSA_WITH_3DES_EDE_CBC_SHA: 8.40 MiB/s
+TLS_RSA_WITH_AES_128_CBC_SHA: 278.71 HS/s
+TLS_RSA_WITH_AES_128_CBC_SHA: 18.54 MiB/s
+TLS_RSA_WITH_AES_128_CBC_SHA256: 278.71 HS/s
+TLS_RSA_WITH_AES_128_CBC_SHA256: 16.50 MiB/s
+TLS_RSA_WITH_AES_256_CBC_SHA: 291.37 HS/s
+TLS_RSA_WITH_AES_256_CBC_SHA: 16.86 MiB/s
+TLS_RSA_WITH_AES_256_CBC_SHA256: 267.09 HS/s
+TLS_RSA_WITH_AES_256_CBC_SHA256: 15.16 MiB/s
+TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA: 20.16 HS/s
+TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA: 8.37 MiB/s
+TLS_DHE_DSS_WITH_AES_128_CBC_SHA: 20.41 HS/s
+TLS_DHE_DSS_WITH_AES_128_CBC_SHA: 18.59 MiB/s
+TLS_DHE_DSS_WITH_AES_128_CBC_SHA256: 19.99 HS/s
+TLS_DHE_DSS_WITH_AES_128_CBC_SHA256: 16.45 MiB/s
+TLS_DHE_DSS_WITH_AES_256_CBC_SHA: 20.29 HS/s
+TLS_DHE_DSS_WITH_AES_256_CBC_SHA: 16.72 MiB/s
+TLS_DHE_DSS_WITH_AES_256_CBC_SHA256: 20.16 HS/s
+TLS_DHE_DSS_WITH_AES_256_CBC_SHA256: 14.86 MiB/s
diff --git a/tests/bench/results/oakland-13/openssl/openssl.txt b/tests/bench/results/oakland-13/openssl/openssl.txt
index 897258b..3e88701 100644
--- a/tests/bench/results/oakland-13/openssl/openssl.txt
+++ b/tests/bench/results/oakland-13/openssl/openssl.txt
@@ -1,38 +1,38 @@
-TLS_RSA_WITH_RC4_128_MD5: 292.04 HS/s
-TLS_RSA_WITH_RC4_128_MD5: 226.51 MiB/s
-TLS_RSA_WITH_RC4_128_SHA: 288.74 HS/s
-TLS_RSA_WITH_RC4_128_SHA: 232.42 MiB/s
-TLS_RSA_WITH_3DES_EDE_CBC_SHA: 283.04 HS/s
-TLS_RSA_WITH_3DES_EDE_CBC_SHA: 22.95 MiB/s
-TLS_RSA_WITH_AES_128_CBC_SHA: 285.35 HS/s
-TLS_RSA_WITH_AES_128_CBC_SHA: 234.41 MiB/s
-TLS_RSA_WITH_AES_128_CBC_SHA256: 281.92 HS/s
-TLS_RSA_WITH_AES_128_CBC_SHA256: 128.33 MiB/s
-TLS_RSA_WITH_AES_256_CBC_SHA: 282.89 HS/s
-TLS_RSA_WITH_AES_256_CBC_SHA: 204.47 MiB/s
-TLS_RSA_WITH_AES_256_CBC_SHA256: 307.72 HS/s
-TLS_RSA_WITH_AES_256_CBC_SHA256: 119.42 MiB/s
-TLS_RSA_WITH_RC4_128_MD5: 292.04 HS/s
-TLS_RSA_WITH_RC4_128_MD5: 226.51 MiB/s
-TLS_RSA_WITH_RC4_128_SHA: 288.74 HS/s
-TLS_RSA_WITH_RC4_128_SHA: 232.42 MiB/s
-TLS_RSA_WITH_3DES_EDE_CBC_SHA: 283.04 HS/s
-TLS_RSA_WITH_3DES_EDE_CBC_SHA: 22.95 MiB/s
-TLS_RSA_WITH_AES_128_CBC_SHA: 285.35 HS/s
-TLS_RSA_WITH_AES_128_CBC_SHA: 234.41 MiB/s
-TLS_RSA_WITH_AES_128_CBC_SHA256: 281.92 HS/s
-TLS_RSA_WITH_AES_128_CBC_SHA256: 128.33 MiB/s
-TLS_RSA_WITH_AES_256_CBC_SHA: 282.89 HS/s
-TLS_RSA_WITH_AES_256_CBC_SHA: 204.47 MiB/s
-TLS_RSA_WITH_AES_256_CBC_SHA256: 307.72 HS/s
-TLS_RSA_WITH_AES_256_CBC_SHA256: 119.42 MiB/s
-TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA: 58.07 HS/s
-TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA: 22.99 MiB/s
-TLS_DHE_DSS_WITH_AES_128_CBC_SHA: 57.06 HS/s
-TLS_DHE_DSS_WITH_AES_128_CBC_SHA: 244.30 MiB/s
-TLS_DHE_DSS_WITH_AES_128_CBC_SHA256: 58.33 HS/s
-TLS_DHE_DSS_WITH_AES_128_CBC_SHA256: 128.34 MiB/s
-TLS_DHE_DSS_WITH_AES_256_CBC_SHA: 56.83 HS/s
-TLS_DHE_DSS_WITH_AES_256_CBC_SHA: 203.01 MiB/s
-TLS_DHE_DSS_WITH_AES_256_CBC_SHA256: 59.52 HS/s
-TLS_DHE_DSS_WITH_AES_256_CBC_SHA256: 120.96 MiB/s
+TLS_RSA_WITH_RC4_128_MD5: 292.04 HS/s
+TLS_RSA_WITH_RC4_128_MD5: 226.51 MiB/s
+TLS_RSA_WITH_RC4_128_SHA: 288.74 HS/s
+TLS_RSA_WITH_RC4_128_SHA: 232.42 MiB/s
+TLS_RSA_WITH_3DES_EDE_CBC_SHA: 283.04 HS/s
+TLS_RSA_WITH_3DES_EDE_CBC_SHA: 22.95 MiB/s
+TLS_RSA_WITH_AES_128_CBC_SHA: 285.35 HS/s
+TLS_RSA_WITH_AES_128_CBC_SHA: 234.41 MiB/s
+TLS_RSA_WITH_AES_128_CBC_SHA256: 281.92 HS/s
+TLS_RSA_WITH_AES_128_CBC_SHA256: 128.33 MiB/s
+TLS_RSA_WITH_AES_256_CBC_SHA: 282.89 HS/s
+TLS_RSA_WITH_AES_256_CBC_SHA: 204.47 MiB/s
+TLS_RSA_WITH_AES_256_CBC_SHA256: 307.72 HS/s
+TLS_RSA_WITH_AES_256_CBC_SHA256: 119.42 MiB/s
+TLS_RSA_WITH_RC4_128_MD5: 292.04 HS/s
+TLS_RSA_WITH_RC4_128_MD5: 226.51 MiB/s
+TLS_RSA_WITH_RC4_128_SHA: 288.74 HS/s
+TLS_RSA_WITH_RC4_128_SHA: 232.42 MiB/s
+TLS_RSA_WITH_3DES_EDE_CBC_SHA: 283.04 HS/s
+TLS_RSA_WITH_3DES_EDE_CBC_SHA: 22.95 MiB/s
+TLS_RSA_WITH_AES_128_CBC_SHA: 285.35 HS/s
+TLS_RSA_WITH_AES_128_CBC_SHA: 234.41 MiB/s
+TLS_RSA_WITH_AES_128_CBC_SHA256: 281.92 HS/s
+TLS_RSA_WITH_AES_128_CBC_SHA256: 128.33 MiB/s
+TLS_RSA_WITH_AES_256_CBC_SHA: 282.89 HS/s
+TLS_RSA_WITH_AES_256_CBC_SHA: 204.47 MiB/s
+TLS_RSA_WITH_AES_256_CBC_SHA256: 307.72 HS/s
+TLS_RSA_WITH_AES_256_CBC_SHA256: 119.42 MiB/s
+TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA: 58.07 HS/s
+TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA: 22.99 MiB/s
+TLS_DHE_DSS_WITH_AES_128_CBC_SHA: 57.06 HS/s
+TLS_DHE_DSS_WITH_AES_128_CBC_SHA: 244.30 MiB/s
+TLS_DHE_DSS_WITH_AES_128_CBC_SHA256: 58.33 HS/s
+TLS_DHE_DSS_WITH_AES_128_CBC_SHA256: 128.34 MiB/s
+TLS_DHE_DSS_WITH_AES_256_CBC_SHA: 56.83 HS/s
+TLS_DHE_DSS_WITH_AES_256_CBC_SHA: 203.01 MiB/s
+TLS_DHE_DSS_WITH_AES_256_CBC_SHA256: 59.52 HS/s
+TLS_DHE_DSS_WITH_AES_256_CBC_SHA256: 120.96 MiB/s
diff --git a/tests/bench/results/oakland-13/openssl/oracle-jsse-1.7.txt b/tests/bench/results/oakland-13/openssl/oracle-jsse-1.7.txt
index 839d5fc..d9421c5 100644
--- a/tests/bench/results/oakland-13/openssl/oracle-jsse-1.7.txt
+++ b/tests/bench/results/oakland-13/openssl/oracle-jsse-1.7.txt
@@ -1,16 +1,16 @@
-TLS_RSA_WITH_RC4_128_MD5: 431.66 HS/s
-TLS_RSA_WITH_RC4_128_MD5: 53.34 MiB/s
-TLS_RSA_WITH_RC4_128_SHA: 446.69 HS/s
-TLS_RSA_WITH_RC4_128_SHA: 39.65 MiB/s
-TLS_RSA_WITH_3DES_EDE_CBC_SHA: 421.59 HS/s
-TLS_RSA_WITH_3DES_EDE_CBC_SHA: 8.34 MiB/s
-TLS_RSA_WITH_AES_128_CBC_SHA: 419.20 HS/s
-TLS_RSA_WITH_AES_128_CBC_SHA: 27.58 MiB/s
-TLS_RSA_WITH_AES_128_CBC_SHA256: 432.70 HS/s
-TLS_RSA_WITH_AES_128_CBC_SHA256: 23.69 MiB/s
-TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA: 45.72 HS/s
-TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA: 8.21 MiB/s
-TLS_DHE_DSS_WITH_AES_128_CBC_SHA: 46.08 HS/s
-TLS_DHE_DSS_WITH_AES_128_CBC_SHA: 27.72 MiB/s
-TLS_DHE_DSS_WITH_AES_128_CBC_SHA256: 45.03 HS/s
-TLS_DHE_DSS_WITH_AES_128_CBC_SHA256: 23.84 MiB/s
+TLS_RSA_WITH_RC4_128_MD5: 431.66 HS/s
+TLS_RSA_WITH_RC4_128_MD5: 53.34 MiB/s
+TLS_RSA_WITH_RC4_128_SHA: 446.69 HS/s
+TLS_RSA_WITH_RC4_128_SHA: 39.65 MiB/s
+TLS_RSA_WITH_3DES_EDE_CBC_SHA: 421.59 HS/s
+TLS_RSA_WITH_3DES_EDE_CBC_SHA: 8.34 MiB/s
+TLS_RSA_WITH_AES_128_CBC_SHA: 419.20 HS/s
+TLS_RSA_WITH_AES_128_CBC_SHA: 27.58 MiB/s
+TLS_RSA_WITH_AES_128_CBC_SHA256: 432.70 HS/s
+TLS_RSA_WITH_AES_128_CBC_SHA256: 23.69 MiB/s
+TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA: 45.72 HS/s
+TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA: 8.21 MiB/s
+TLS_DHE_DSS_WITH_AES_128_CBC_SHA: 46.08 HS/s
+TLS_DHE_DSS_WITH_AES_128_CBC_SHA: 27.72 MiB/s
+TLS_DHE_DSS_WITH_AES_128_CBC_SHA256: 45.03 HS/s
+TLS_DHE_DSS_WITH_AES_128_CBC_SHA256: 23.84 MiB/s
diff --git a/tests/bench/results/openssl/mitls-bc.txt b/tests/bench/results/openssl/mitls-bc.txt
index 6029679..01b3130 100644
--- a/tests/bench/results/openssl/mitls-bc.txt
+++ b/tests/bench/results/openssl/mitls-bc.txt
@@ -1,24 +1,24 @@
-TLS_RSA_WITH_RC4_128_MD5: 268.22 HS/s
-TLS_RSA_WITH_RC4_128_MD5: 43.44 MiB/s
-TLS_RSA_WITH_RC4_128_SHA: 272.32 HS/s
-TLS_RSA_WITH_RC4_128_SHA: 38.13 MiB/s
-TLS_RSA_WITH_3DES_EDE_CBC_SHA: 259.86 HS/s
-TLS_RSA_WITH_3DES_EDE_CBC_SHA: 8.54 MiB/s
-TLS_RSA_WITH_AES_128_CBC_SHA: 266.23 HS/s
-TLS_RSA_WITH_AES_128_CBC_SHA: 22.84 MiB/s
-TLS_RSA_WITH_AES_128_CBC_SHA256: 268.80 HS/s
-TLS_RSA_WITH_AES_128_CBC_SHA256: 19.37 MiB/s
-TLS_RSA_WITH_AES_256_CBC_SHA: 261.77 HS/s
-TLS_RSA_WITH_AES_256_CBC_SHA: 20.11 MiB/s
-TLS_RSA_WITH_AES_256_CBC_SHA256: 257.45 HS/s
-TLS_RSA_WITH_AES_256_CBC_SHA256: 17.39 MiB/s
-TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA: 20.83 HS/s
-TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA: 8.46 MiB/s
-TLS_DHE_DSS_WITH_AES_128_CBC_SHA: 21.02 HS/s
-TLS_DHE_DSS_WITH_AES_128_CBC_SHA: 22.69 MiB/s
-TLS_DHE_DSS_WITH_AES_128_CBC_SHA256: 20.94 HS/s
-TLS_DHE_DSS_WITH_AES_128_CBC_SHA256: 19.16 MiB/s
-TLS_DHE_DSS_WITH_AES_256_CBC_SHA: 20.56 HS/s
-TLS_DHE_DSS_WITH_AES_256_CBC_SHA: 20.12 MiB/s
-TLS_DHE_DSS_WITH_AES_256_CBC_SHA256: 21.11 HS/s
-TLS_DHE_DSS_WITH_AES_256_CBC_SHA256: 17.62 MiB/s
+TLS_RSA_WITH_RC4_128_MD5: 268.22 HS/s
+TLS_RSA_WITH_RC4_128_MD5: 43.44 MiB/s
+TLS_RSA_WITH_RC4_128_SHA: 272.32 HS/s
+TLS_RSA_WITH_RC4_128_SHA: 38.13 MiB/s
+TLS_RSA_WITH_3DES_EDE_CBC_SHA: 259.86 HS/s
+TLS_RSA_WITH_3DES_EDE_CBC_SHA: 8.54 MiB/s
+TLS_RSA_WITH_AES_128_CBC_SHA: 266.23 HS/s
+TLS_RSA_WITH_AES_128_CBC_SHA: 22.84 MiB/s
+TLS_RSA_WITH_AES_128_CBC_SHA256: 268.80 HS/s
+TLS_RSA_WITH_AES_128_CBC_SHA256: 19.37 MiB/s
+TLS_RSA_WITH_AES_256_CBC_SHA: 261.77 HS/s
+TLS_RSA_WITH_AES_256_CBC_SHA: 20.11 MiB/s
+TLS_RSA_WITH_AES_256_CBC_SHA256: 257.45 HS/s
+TLS_RSA_WITH_AES_256_CBC_SHA256: 17.39 MiB/s
+TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA: 20.83 HS/s
+TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA: 8.46 MiB/s
+TLS_DHE_DSS_WITH_AES_128_CBC_SHA: 21.02 HS/s
+TLS_DHE_DSS_WITH_AES_128_CBC_SHA: 22.69 MiB/s
+TLS_DHE_DSS_WITH_AES_128_CBC_SHA256: 20.94 HS/s
+TLS_DHE_DSS_WITH_AES_128_CBC_SHA256: 19.16 MiB/s
+TLS_DHE_DSS_WITH_AES_256_CBC_SHA: 20.56 HS/s
+TLS_DHE_DSS_WITH_AES_256_CBC_SHA: 20.12 MiB/s
+TLS_DHE_DSS_WITH_AES_256_CBC_SHA256: 21.11 HS/s
+TLS_DHE_DSS_WITH_AES_256_CBC_SHA256: 17.62 MiB/s
diff --git a/tests/bench/results/openssl/mitls-ossl.txt b/tests/bench/results/openssl/mitls-ossl.txt
index d3681f8..47ccfe2 100644
--- a/tests/bench/results/openssl/mitls-ossl.txt
+++ b/tests/bench/results/openssl/mitls-ossl.txt
@@ -1,24 +1,24 @@
-TLS_RSA_WITH_RC4_128_MD5: 273.81 HS/s
-TLS_RSA_WITH_RC4_128_MD5: 89.54 MiB/s
-TLS_RSA_WITH_RC4_128_SHA: 270.84 HS/s
-TLS_RSA_WITH_RC4_128_SHA: 84.76 MiB/s
-TLS_RSA_WITH_3DES_EDE_CBC_SHA: 272.32 HS/s
-TLS_RSA_WITH_3DES_EDE_CBC_SHA: 18.82 MiB/s
-TLS_RSA_WITH_AES_128_CBC_SHA: 269.96 HS/s
-TLS_RSA_WITH_AES_128_CBC_SHA: 50.10 MiB/s
-TLS_RSA_WITH_AES_128_CBC_SHA256: 271.13 HS/s
-TLS_RSA_WITH_AES_128_CBC_SHA256: 43.12 MiB/s
-TLS_RSA_WITH_AES_256_CBC_SHA: 271.13 HS/s
-TLS_RSA_WITH_AES_256_CBC_SHA: 41.21 MiB/s
-TLS_RSA_WITH_AES_256_CBC_SHA256: 270.84 HS/s
-TLS_RSA_WITH_AES_256_CBC_SHA256: 35.94 MiB/s
-TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA: 20.96 HS/s
-TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA: 18.32 MiB/s
-TLS_DHE_DSS_WITH_AES_128_CBC_SHA: 20.85 HS/s
-TLS_DHE_DSS_WITH_AES_128_CBC_SHA: 47.72 MiB/s
-TLS_DHE_DSS_WITH_AES_128_CBC_SHA256: 20.84 HS/s
-TLS_DHE_DSS_WITH_AES_128_CBC_SHA256: 43.46 MiB/s
-TLS_DHE_DSS_WITH_AES_256_CBC_SHA: 20.95 HS/s
-TLS_DHE_DSS_WITH_AES_256_CBC_SHA: 40.04 MiB/s
-TLS_DHE_DSS_WITH_AES_256_CBC_SHA256: 20.79 HS/s
-TLS_DHE_DSS_WITH_AES_256_CBC_SHA256: 35.69 MiB/s
+TLS_RSA_WITH_RC4_128_MD5: 273.81 HS/s
+TLS_RSA_WITH_RC4_128_MD5: 89.54 MiB/s
+TLS_RSA_WITH_RC4_128_SHA: 270.84 HS/s
+TLS_RSA_WITH_RC4_128_SHA: 84.76 MiB/s
+TLS_RSA_WITH_3DES_EDE_CBC_SHA: 272.32 HS/s
+TLS_RSA_WITH_3DES_EDE_CBC_SHA: 18.82 MiB/s
+TLS_RSA_WITH_AES_128_CBC_SHA: 269.96 HS/s
+TLS_RSA_WITH_AES_128_CBC_SHA: 50.10 MiB/s
+TLS_RSA_WITH_AES_128_CBC_SHA256: 271.13 HS/s
+TLS_RSA_WITH_AES_128_CBC_SHA256: 43.12 MiB/s
+TLS_RSA_WITH_AES_256_CBC_SHA: 271.13 HS/s
+TLS_RSA_WITH_AES_256_CBC_SHA: 41.21 MiB/s
+TLS_RSA_WITH_AES_256_CBC_SHA256: 270.84 HS/s
+TLS_RSA_WITH_AES_256_CBC_SHA256: 35.94 MiB/s
+TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA: 20.96 HS/s
+TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA: 18.32 MiB/s
+TLS_DHE_DSS_WITH_AES_128_CBC_SHA: 20.85 HS/s
+TLS_DHE_DSS_WITH_AES_128_CBC_SHA: 47.72 MiB/s
+TLS_DHE_DSS_WITH_AES_128_CBC_SHA256: 20.84 HS/s
+TLS_DHE_DSS_WITH_AES_128_CBC_SHA256: 43.46 MiB/s
+TLS_DHE_DSS_WITH_AES_256_CBC_SHA: 20.95 HS/s
+TLS_DHE_DSS_WITH_AES_256_CBC_SHA: 40.04 MiB/s
+TLS_DHE_DSS_WITH_AES_256_CBC_SHA256: 20.79 HS/s
+TLS_DHE_DSS_WITH_AES_256_CBC_SHA256: 35.69 MiB/s
diff --git a/tests/bench/results/openssl/openssl.txt b/tests/bench/results/openssl/openssl.txt
index 56e4a99..053ed6a 100644
--- a/tests/bench/results/openssl/openssl.txt
+++ b/tests/bench/results/openssl/openssl.txt
@@ -1,24 +1,24 @@
-TLS_RSA_WITH_RC4_128_MD5: 1257.50 HS/s
-TLS_RSA_WITH_RC4_128_MD5: 255.99 MiB/s
-TLS_RSA_WITH_RC4_128_SHA: 1214.58 HS/s
-TLS_RSA_WITH_RC4_128_SHA: 216.20 MiB/s
-TLS_RSA_WITH_3DES_EDE_CBC_SHA: 1147.40 HS/s
-TLS_RSA_WITH_3DES_EDE_CBC_SHA: 22.12 MiB/s
-TLS_RSA_WITH_AES_128_CBC_SHA: 1121.55 HS/s
-TLS_RSA_WITH_AES_128_CBC_SHA: 261.74 MiB/s
-TLS_RSA_WITH_AES_128_CBC_SHA256: 1121.56 HS/s
-TLS_RSA_WITH_AES_128_CBC_SHA256: 122.36 MiB/s
-TLS_RSA_WITH_AES_256_CBC_SHA: 1185.66 HS/s
-TLS_RSA_WITH_AES_256_CBC_SHA: 221.06 MiB/s
-TLS_RSA_WITH_AES_256_CBC_SHA256: 1087.29 HS/s
-TLS_RSA_WITH_AES_256_CBC_SHA256: 111.88 MiB/s
-TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA: 336.92 HS/s
-TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA: 22.19 MiB/s
-TLS_DHE_DSS_WITH_AES_128_CBC_SHA: 343.43 HS/s
-TLS_DHE_DSS_WITH_AES_128_CBC_SHA: 277.64 MiB/s
-TLS_DHE_DSS_WITH_AES_128_CBC_SHA256: 338.76 HS/s
-TLS_DHE_DSS_WITH_AES_128_CBC_SHA256: 123.19 MiB/s
-TLS_DHE_DSS_WITH_AES_256_CBC_SHA: 344.86 HS/s
-TLS_DHE_DSS_WITH_AES_256_CBC_SHA: 246.14 MiB/s
-TLS_DHE_DSS_WITH_AES_256_CBC_SHA256: 339.22 HS/s
-TLS_DHE_DSS_WITH_AES_256_CBC_SHA256: 113.37 MiB/s
+TLS_RSA_WITH_RC4_128_MD5: 1257.50 HS/s
+TLS_RSA_WITH_RC4_128_MD5: 255.99 MiB/s
+TLS_RSA_WITH_RC4_128_SHA: 1214.58 HS/s
+TLS_RSA_WITH_RC4_128_SHA: 216.20 MiB/s
+TLS_RSA_WITH_3DES_EDE_CBC_SHA: 1147.40 HS/s
+TLS_RSA_WITH_3DES_EDE_CBC_SHA: 22.12 MiB/s
+TLS_RSA_WITH_AES_128_CBC_SHA: 1121.55 HS/s
+TLS_RSA_WITH_AES_128_CBC_SHA: 261.74 MiB/s
+TLS_RSA_WITH_AES_128_CBC_SHA256: 1121.56 HS/s
+TLS_RSA_WITH_AES_128_CBC_SHA256: 122.36 MiB/s
+TLS_RSA_WITH_AES_256_CBC_SHA: 1185.66 HS/s
+TLS_RSA_WITH_AES_256_CBC_SHA: 221.06 MiB/s
+TLS_RSA_WITH_AES_256_CBC_SHA256: 1087.29 HS/s
+TLS_RSA_WITH_AES_256_CBC_SHA256: 111.88 MiB/s
+TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA: 336.92 HS/s
+TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA: 22.19 MiB/s
+TLS_DHE_DSS_WITH_AES_128_CBC_SHA: 343.43 HS/s
+TLS_DHE_DSS_WITH_AES_128_CBC_SHA: 277.64 MiB/s
+TLS_DHE_DSS_WITH_AES_128_CBC_SHA256: 338.76 HS/s
+TLS_DHE_DSS_WITH_AES_128_CBC_SHA256: 123.19 MiB/s
+TLS_DHE_DSS_WITH_AES_256_CBC_SHA: 344.86 HS/s
+TLS_DHE_DSS_WITH_AES_256_CBC_SHA: 246.14 MiB/s
+TLS_DHE_DSS_WITH_AES_256_CBC_SHA256: 339.22 HS/s
+TLS_DHE_DSS_WITH_AES_256_CBC_SHA256: 113.37 MiB/s
diff --git a/tests/bench/results/openssl/oracle-jsse-1.7.txt b/tests/bench/results/openssl/oracle-jsse-1.7.txt
index b68d53d..f861d8b 100644
--- a/tests/bench/results/openssl/oracle-jsse-1.7.txt
+++ b/tests/bench/results/openssl/oracle-jsse-1.7.txt
@@ -1,10 +1,10 @@
-TLS_RSA_WITH_RC4_128_MD5: 410.55 HS/s
-TLS_RSA_WITH_RC4_128_MD5: 64.59 MiB/s
-TLS_RSA_WITH_RC4_128_SHA: 419.67 HS/s
-TLS_RSA_WITH_RC4_128_SHA: 59.47 MiB/s
-TLS_RSA_WITH_3DES_EDE_CBC_SHA: 383.58 HS/s
-TLS_RSA_WITH_3DES_EDE_CBC_SHA: 10.47 MiB/s
-TLS_RSA_WITH_AES_128_CBC_SHA: 406.55 HS/s
-TLS_RSA_WITH_AES_128_CBC_SHA: 58.84 MiB/s
-TLS_RSA_WITH_AES_128_CBC_SHA256: 401.56 HS/s
-TLS_RSA_WITH_AES_128_CBC_SHA256: 47.87 MiB/s
+TLS_RSA_WITH_RC4_128_MD5: 410.55 HS/s
+TLS_RSA_WITH_RC4_128_MD5: 64.59 MiB/s
+TLS_RSA_WITH_RC4_128_SHA: 419.67 HS/s
+TLS_RSA_WITH_RC4_128_SHA: 59.47 MiB/s
+TLS_RSA_WITH_3DES_EDE_CBC_SHA: 383.58 HS/s
+TLS_RSA_WITH_3DES_EDE_CBC_SHA: 10.47 MiB/s
+TLS_RSA_WITH_AES_128_CBC_SHA: 406.55 HS/s
+TLS_RSA_WITH_AES_128_CBC_SHA: 58.84 MiB/s
+TLS_RSA_WITH_AES_128_CBC_SHA256: 401.56 HS/s
+TLS_RSA_WITH_AES_128_CBC_SHA256: 47.87 MiB/s
diff --git a/tests/bench/runall.py b/tests/bench/runall.py
index eb61dd9..2906a32 100644
--- a/tests/bench/runall.py
+++ b/tests/bench/runall.py
@@ -1,50 +1,50 @@
-#! /usr/bin/env python
-
-# --------------------------------------------------------------------
-import sys, os, subprocess as sp
-
-# --------------------------------------------------------------------
-# BIN = './openssl-client.exe'
-# BIN = 'java -classpath "3rdparty/bcprov-ext-jdk15on-148.jar;jsse-client" JSSEClient'
-BIN = '../../BenchClient/bin/Release/BenchClient.exe'
-# BIN = 'bc/BCClient/bin/Release/BCClient.exe'
-
-CONFIGS = [
-    ('rsa', 'rsa.cert-01.mitls.org', 'TLS_RSA_WITH_RC4_128_MD5'           ),
-    ('rsa', 'rsa.cert-01.mitls.org', 'TLS_RSA_WITH_RC4_128_SHA'           ),
-    ('rsa', 'rsa.cert-01.mitls.org', 'TLS_RSA_WITH_3DES_EDE_CBC_SHA'      ),
-    ('rsa', 'rsa.cert-01.mitls.org', 'TLS_RSA_WITH_AES_128_CBC_SHA'       ),
-    ('rsa', 'rsa.cert-01.mitls.org', 'TLS_RSA_WITH_AES_128_CBC_SHA256'    ),
-    ('rsa', 'rsa.cert-01.mitls.org', 'TLS_RSA_WITH_AES_256_CBC_SHA'       ),
-    ('rsa', 'rsa.cert-01.mitls.org', 'TLS_RSA_WITH_AES_256_CBC_SHA256'    ),
-    ('dsa', 'dsa.cert-01.mitls.org', 'TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA'  ),
-    ('dsa', 'dsa.cert-01.mitls.org', 'TLS_DHE_DSS_WITH_AES_128_CBC_SHA'   ),
-    ('dsa', 'dsa.cert-01.mitls.org', 'TLS_DHE_DSS_WITH_AES_128_CBC_SHA256'),
-    ('dsa', 'dsa.cert-01.mitls.org', 'TLS_DHE_DSS_WITH_AES_256_CBC_SHA'   ),
-    ('dsa', 'dsa.cert-01.mitls.org', 'TLS_DHE_DSS_WITH_AES_256_CBC_SHA256'),
-]
-
-# --------------------------------------------------------------------
-def _main():
-    configs = CONFIGS[:]
-
-    mode = os.environ.get('MODE', None)
-    if mode is not None:
-        cfilt = [x for x in mode.split(':') if x]
-        for filt in cfilt:
-            if filt.startswith('!'):
-                configs = [x for x in configs if filt[1:] not in x[2]]
-            else:
-                configs = [x for x in configs if filt in x[2]]
-
-    for config in configs:
-        environ = os.environ.copy()
-        environ['PKI']         = '../pki/%s' % (config[0],)
-        environ['CERTNAME']    = config[1]
-        environ['CIPHERSUITE'] = config[2]
-
-        sp.check_call(BIN, env = environ, shell = True)
-
-# --------------------------------------------------------------------
-if __name__ == '__main__':
-    _main()
+#! /usr/bin/env python
+
+# --------------------------------------------------------------------
+import sys, os, subprocess as sp
+
+# --------------------------------------------------------------------
+# BIN = './openssl-client.exe'
+# BIN = 'java -classpath "3rdparty/bcprov-ext-jdk15on-148.jar;jsse-client" JSSEClient'
+BIN = '../../BenchClient/bin/Release/BenchClient.exe'
+# BIN = 'bc/BCClient/bin/Release/BCClient.exe'
+
+CONFIGS = [
+    ('rsa', 'rsa.cert-01.mitls.org', 'TLS_RSA_WITH_RC4_128_MD5'           ),
+    ('rsa', 'rsa.cert-01.mitls.org', 'TLS_RSA_WITH_RC4_128_SHA'           ),
+    ('rsa', 'rsa.cert-01.mitls.org', 'TLS_RSA_WITH_3DES_EDE_CBC_SHA'      ),
+    ('rsa', 'rsa.cert-01.mitls.org', 'TLS_RSA_WITH_AES_128_CBC_SHA'       ),
+    ('rsa', 'rsa.cert-01.mitls.org', 'TLS_RSA_WITH_AES_128_CBC_SHA256'    ),
+    ('rsa', 'rsa.cert-01.mitls.org', 'TLS_RSA_WITH_AES_256_CBC_SHA'       ),
+    ('rsa', 'rsa.cert-01.mitls.org', 'TLS_RSA_WITH_AES_256_CBC_SHA256'    ),
+    ('dsa', 'dsa.cert-01.mitls.org', 'TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA'  ),
+    ('dsa', 'dsa.cert-01.mitls.org', 'TLS_DHE_DSS_WITH_AES_128_CBC_SHA'   ),
+    ('dsa', 'dsa.cert-01.mitls.org', 'TLS_DHE_DSS_WITH_AES_128_CBC_SHA256'),
+    ('dsa', 'dsa.cert-01.mitls.org', 'TLS_DHE_DSS_WITH_AES_256_CBC_SHA'   ),
+    ('dsa', 'dsa.cert-01.mitls.org', 'TLS_DHE_DSS_WITH_AES_256_CBC_SHA256'),
+]
+
+# --------------------------------------------------------------------
+def _main():
+    configs = CONFIGS[:]
+
+    mode = os.environ.get('MODE', None)
+    if mode is not None:
+        cfilt = [x for x in mode.split(':') if x]
+        for filt in cfilt:
+            if filt.startswith('!'):
+                configs = [x for x in configs if filt[1:] not in x[2]]
+            else:
+                configs = [x for x in configs if filt in x[2]]
+
+    for config in configs:
+        environ = os.environ.copy()
+        environ['PKI']         = '../pki/%s' % (config[0],)
+        environ['CERTNAME']    = config[1]
+        environ['CIPHERSUITE'] = config[2]
+
+        sp.check_call(BIN, env = environ, shell = True)
+
+# --------------------------------------------------------------------
+if __name__ == '__main__':
+    _main()
diff --git a/tests/bench/tabulate.py b/tests/bench/tabulate.py
index 6b5693c..031ad84 100644
--- a/tests/bench/tabulate.py
+++ b/tests/bench/tabulate.py
@@ -1,76 +1,76 @@
-#! /usr/bin/env python
-
-# --------------------------------------------------------------------
-import sys, os, re
-
-# --------------------------------------------------------------------
-CIPHERS = [
-    ('TLS_RSA_WITH_RC4_128_MD5'           , ('RSA', 'RC4'   , 'MD5')),
-    ('TLS_RSA_WITH_RC4_128_SHA'           , ('RSA', 'RC4'   , 'SHA')),
-    ('TLS_RSA_WITH_3DES_EDE_CBC_SHA'      , ('RSA', '3DES'  , 'SHA')),
-    ('TLS_RSA_WITH_AES_128_CBC_SHA'       , ('RSA', 'AES128', 'SHA')),
-    ('TLS_RSA_WITH_AES_128_CBC_SHA256'    , ('RSA', 'AES128', 'SHA256')),
-    ('TLS_RSA_WITH_AES_256_CBC_SHA'       , ('RSA', 'AES256', 'SHA')),
-    ('TLS_RSA_WITH_AES_256_CBC_SHA256'    , ('RSA', 'AES256', 'SHA256')),
-    ('TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA'  , ('DHE', '3DES'  , 'SHA')),
-    ('TLS_DHE_DSS_WITH_AES_128_CBC_SHA'   , ('DHE', 'AES128', 'SHA')),
-    ('TLS_DHE_DSS_WITH_AES_128_CBC_SHA256', ('DHE', 'AES128', 'SHA256')),
-    ('TLS_DHE_DSS_WITH_AES_256_CBC_SHA'   , ('DHE', 'AES256', 'SHA')),
-    ('TLS_DHE_DSS_WITH_AES_256_CBC_SHA256', ('DHE', 'AES256', 'SHA256')),
-]
-
-NAMES = ('mitls-bc', 'mitls-ossl', 'openssl', 'oracle-jsse-1.7')
-
-# --------------------------------------------------------------------
-def _main():
-    if len(sys.argv)-1 not in (1, 2):
-        print >>sys.stderr, 'Usage: %s <server> <client-filter>' % (sys.argv[0],)
-        exit(1)
-
-    server  = sys.argv[1]
-    clients = NAMES[:]
-
-    if len(sys.argv)-1 == 2:
-        clfilter = sys.argv[2]
-        if clfilter.startswith('!'):
-            clfilter = set(clfilter[1:].split(','))
-            clients = [x for x in clients if x not in clfilter]
-        else:
-            clfilter = set(clfilter.split(','))
-            clients = [x for x in clients if x in clfilter]
-        del clfilter
-
-    contents = [os.path.join('results', server, x + '.txt') for x in clients]
-    contents = [(x, open(x, 'rb').read().splitlines()) for x in contents]
-
-    result = dict()
-
-    for name, content in contents:
-        name = os.path.splitext(os.path.basename(name))[0]
-        for line in content:
-            line = re.sub('#.*$', '', line)
-            m1   = re.search('^(.*?): ((:?\d|\.)+) HS/s$' , line)
-            m2   = re.search('^(.*?): ((:?\d|\.)+) MiB/s$', line)
-
-            if m1 is not None:
-                result.setdefault(name, {}).setdefault(m1.group(1), {})['HS'] = \
-                    float(m1.group(2))
-
-            if m2 is not None:
-                result.setdefault(name, {}).setdefault(m2.group(1), {})['rate'] = \
-                    float(m2.group(2))
-
-    print '%% Server  : %s' % (server,)
-    print '%% Clients : %s' % (', '.join(clients),)
-    for cipher, name in CIPHERS:
-        columns = [(' & '.join(name)).replace('_', '\\_')]
-        for client in clients:
-            hs = result.get(client, {}).get(cipher, {}).get('HS'  , None)
-            bw = result.get(client, {}).get(cipher, {}).get('rate', None)
-            columns.append(' - ' if hs is None else '%.2f' % (hs,))
-            columns.append(' - ' if bw is None else '%.2f' % (bw,))
-        print ' & '.join(columns) + '\\\\'
-
-# --------------------------------------------------------------------
-if __name__ == '__main__':
-    _main()
+#! /usr/bin/env python
+
+# --------------------------------------------------------------------
+import sys, os, re
+
+# --------------------------------------------------------------------
+CIPHERS = [
+    ('TLS_RSA_WITH_RC4_128_MD5'           , ('RSA', 'RC4'   , 'MD5')),
+    ('TLS_RSA_WITH_RC4_128_SHA'           , ('RSA', 'RC4'   , 'SHA')),
+    ('TLS_RSA_WITH_3DES_EDE_CBC_SHA'      , ('RSA', '3DES'  , 'SHA')),
+    ('TLS_RSA_WITH_AES_128_CBC_SHA'       , ('RSA', 'AES128', 'SHA')),
+    ('TLS_RSA_WITH_AES_128_CBC_SHA256'    , ('RSA', 'AES128', 'SHA256')),
+    ('TLS_RSA_WITH_AES_256_CBC_SHA'       , ('RSA', 'AES256', 'SHA')),
+    ('TLS_RSA_WITH_AES_256_CBC_SHA256'    , ('RSA', 'AES256', 'SHA256')),
+    ('TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA'  , ('DHE', '3DES'  , 'SHA')),
+    ('TLS_DHE_DSS_WITH_AES_128_CBC_SHA'   , ('DHE', 'AES128', 'SHA')),
+    ('TLS_DHE_DSS_WITH_AES_128_CBC_SHA256', ('DHE', 'AES128', 'SHA256')),
+    ('TLS_DHE_DSS_WITH_AES_256_CBC_SHA'   , ('DHE', 'AES256', 'SHA')),
+    ('TLS_DHE_DSS_WITH_AES_256_CBC_SHA256', ('DHE', 'AES256', 'SHA256')),
+]
+
+NAMES = ('mitls-bc', 'mitls-ossl', 'openssl', 'oracle-jsse-1.7')
+
+# --------------------------------------------------------------------
+def _main():
+    if len(sys.argv)-1 not in (1, 2):
+        print >>sys.stderr, 'Usage: %s <server> <client-filter>' % (sys.argv[0],)
+        exit(1)
+
+    server  = sys.argv[1]
+    clients = NAMES[:]
+
+    if len(sys.argv)-1 == 2:
+        clfilter = sys.argv[2]
+        if clfilter.startswith('!'):
+            clfilter = set(clfilter[1:].split(','))
+            clients = [x for x in clients if x not in clfilter]
+        else:
+            clfilter = set(clfilter.split(','))
+            clients = [x for x in clients if x in clfilter]
+        del clfilter
+
+    contents = [os.path.join('results', server, x + '.txt') for x in clients]
+    contents = [(x, open(x, 'rb').read().splitlines()) for x in contents]
+
+    result = dict()
+
+    for name, content in contents:
+        name = os.path.splitext(os.path.basename(name))[0]
+        for line in content:
+            line = re.sub('#.*$', '', line)
+            m1   = re.search('^(.*?): ((:?\d|\.)+) HS/s$' , line)
+            m2   = re.search('^(.*?): ((:?\d|\.)+) MiB/s$', line)
+
+            if m1 is not None:
+                result.setdefault(name, {}).setdefault(m1.group(1), {})['HS'] = \
+                    float(m1.group(2))
+
+            if m2 is not None:
+                result.setdefault(name, {}).setdefault(m2.group(1), {})['rate'] = \
+                    float(m2.group(2))
+
+    print '%% Server  : %s' % (server,)
+    print '%% Clients : %s' % (', '.join(clients),)
+    for cipher, name in CIPHERS:
+        columns = [(' & '.join(name)).replace('_', '\\_')]
+        for client in clients:
+            hs = result.get(client, {}).get(cipher, {}).get('HS'  , None) 
+            bw = result.get(client, {}).get(cipher, {}).get('rate', None)
+            columns.append(' - ' if hs is None else '%.2f' % (hs,))
+            columns.append(' - ' if bw is None else '%.2f' % (bw,))
+        print ' & '.join(columns) + '\\\\'
+
+# --------------------------------------------------------------------
+if __name__ == '__main__':
+    _main()
diff --git a/tests/c-stub/echo-client.c b/tests/c-stub/echo-client.c
index aa312e4..fd4aced 100644
--- a/tests/c-stub/echo-client.c
+++ b/tests/c-stub/echo-client.c
@@ -1,21 +1,21 @@
-/* -------------------------------------------------------------------- */
-#include <sys/types.h>
-#include <stdlib.h>
-#include <string.h>
-
-#include <errno.h>
-
-#include "echo-log.h"
-#include "echo-memory.h"
-#include "echo-options.h"
-#include "echo-ssl.h"
-#include "echo-net.h"
-#include "echo-client.h"
-
-/* -------------------------------------------------------------------- */
-int echo_client_setup(event_base_t *evb, const options_t *options) {
-    (void) evb;
-    (void) options;
-
-    abort();
-}
+/* -------------------------------------------------------------------- */
+#include <sys/types.h>
+#include <stdlib.h>
+#include <string.h>
+
+#include <errno.h>
+
+#include "echo-log.h"
+#include "echo-memory.h"
+#include "echo-options.h"
+#include "echo-ssl.h"
+#include "echo-net.h"
+#include "echo-client.h"
+
+/* -------------------------------------------------------------------- */
+int echo_client_setup(event_base_t *evb, const options_t *options) {
+    (void) evb;
+    (void) options;
+
+    abort();
+}
diff --git a/tests/c-stub/echo-client.h b/tests/c-stub/echo-client.h
index 517b4a6..d2711a0 100644
--- a/tests/c-stub/echo-client.h
+++ b/tests/c-stub/echo-client.h
@@ -1,12 +1,12 @@
-/* -------------------------------------------------------------------- */
-#ifndef ECHO_CLIENT_H__
-# define ECHO_CLIENT_H__
-
-/* -------------------------------------------------------------------- */
-#include "echo-options.h"
-#include "echo-net.h"
-
-/* -------------------------------------------------------------------- */
-int echo_client_setup(event_base_t *evb, const options_t *options);
-
-#endif /* !ECHO_CLIENT_H__ */
+/* -------------------------------------------------------------------- */
+#ifndef ECHO_CLIENT_H__
+# define ECHO_CLIENT_H__
+
+/* -------------------------------------------------------------------- */
+#include "echo-options.h"
+#include "echo-net.h"
+
+/* -------------------------------------------------------------------- */
+int echo_client_setup(event_base_t *evb, const options_t *options);
+
+#endif /* !ECHO_CLIENT_H__ */
diff --git a/tests/c-stub/echo-dlist.c b/tests/c-stub/echo-dlist.c
index 31cb028..36a4886 100644
--- a/tests/c-stub/echo-dlist.c
+++ b/tests/c-stub/echo-dlist.c
@@ -1,86 +1,86 @@
-/* -------------------------------------------------------------------- */
-#include <sys/types.h>
-#include <stdlib.h>
-#include <stdio.h>
-#include <assert.h>
-
-#include "echo-memory.h"
-#include "echo-dlist.h"
-
-/* -------------------------------------------------------------------- */
-static const void *const _sentinel = (void*) &_sentinel;
-
-#define DLIST_SENTINEL _sentinel
-
-/* -------------------------------------------------------------------- */
-dlist_t* dlist_new (void) {
-    dlist_t *the = NEW(dlist_t, 1);
-
-    the->data = (void*) DLIST_SENTINEL;
-    the->next = the;
-    the->prev = the;
-
-    return the;
-}
-
-/* -------------------------------------------------------------------- */
-void dlist_free(dlist_t *the, void (*freecb)(void *)) {
-    dlist_t *current = NULL;
-
-    assert(the->data == DLIST_SENTINEL);
-
-    current = the->next;
-    while (current != the) {
-        dlist_t *next = the->next;
-
-        if (current->data != NULL && freecb != NULL)
-            freecb(current->data);
-        free(current);
-        current = next;
-    }
-    free(the);
-}
-
-/* -------------------------------------------------------------------- */
-int dlist_empty(const dlist_t *the) {
-    assert(the->data == DLIST_SENTINEL);
-    return the->next == the;
-}
-
-/* -------------------------------------------------------------------- */
-void dlist_push(dlist_t *the, void *data) {
-    dlist_t *node = NULL;
-
-    assert(the->data == DLIST_SENTINEL);
-
-    node = NEW(dlist_t, 1);
-    node->data = data;
-    node->prev = the->prev;
-    node->next = the;
-
-    the->prev->next = node;
-    the->prev = node;
-}
-
-/* -------------------------------------------------------------------- */
-int dlist_pop(dlist_t *the, void **data) {
-    dlist_t *node = NULL;
-
-    assert(the->data == DLIST_SENTINEL);
-
-    if (*data != NULL)
-        *data = NULL;
-
-    if (the->next == the)
-        return 0;
-
-    node = the->next;
-    node->next->prev = node->prev;
-    node->prev->next = node->next;
-
-    if (*data != NULL)
-        *data = node->data;
-    free(node);
-
-    return 1;
-}
+/* -------------------------------------------------------------------- */
+#include <sys/types.h>
+#include <stdlib.h>
+#include <stdio.h>
+#include <assert.h>
+
+#include "echo-memory.h"
+#include "echo-dlist.h"
+
+/* -------------------------------------------------------------------- */
+static const void *const _sentinel = (void*) &_sentinel;
+
+#define DLIST_SENTINEL _sentinel
+
+/* -------------------------------------------------------------------- */
+dlist_t* dlist_new (void) {
+    dlist_t *the = NEW(dlist_t, 1);
+
+    the->data = (void*) DLIST_SENTINEL;
+    the->next = the;
+    the->prev = the;
+
+    return the;
+}
+
+/* -------------------------------------------------------------------- */
+void dlist_free(dlist_t *the, void (*freecb)(void *)) {
+    dlist_t *current = NULL;
+
+    assert(the->data == DLIST_SENTINEL);
+
+    current = the->next;
+    while (current != the) {
+        dlist_t *next = the->next;
+
+        if (current->data != NULL && freecb != NULL)
+            freecb(current->data);
+        free(current);
+        current = next;
+    }
+    free(the);
+}
+
+/* -------------------------------------------------------------------- */
+int dlist_empty(const dlist_t *the) {
+    assert(the->data == DLIST_SENTINEL);
+    return the->next == the;
+}
+
+/* -------------------------------------------------------------------- */
+void dlist_push(dlist_t *the, void *data) {
+    dlist_t *node = NULL;
+
+    assert(the->data == DLIST_SENTINEL);
+
+    node = NEW(dlist_t, 1);
+    node->data = data;
+    node->prev = the->prev;
+    node->next = the;
+
+    the->prev->next = node;
+    the->prev = node;
+}
+
+/* -------------------------------------------------------------------- */
+int dlist_pop(dlist_t *the, void **data) {
+    dlist_t *node = NULL;
+
+    assert(the->data == DLIST_SENTINEL);
+
+    if (*data != NULL)
+        *data = NULL;
+
+    if (the->next == the)
+        return 0;
+
+    node = the->next;
+    node->next->prev = node->prev;
+    node->prev->next = node->next;
+
+    if (*data != NULL)
+        *data = node->data;
+    free(node);
+
+    return 1;
+}
diff --git a/tests/c-stub/echo-dlist.h b/tests/c-stub/echo-dlist.h
index 39f3483..6d39dd2 100644
--- a/tests/c-stub/echo-dlist.h
+++ b/tests/c-stub/echo-dlist.h
@@ -1,22 +1,22 @@
-/* -------------------------------------------------------------------- */
-#ifndef ECHO_DLIST_H__
-# define ECHO_DLIST_H__
-
-/* -------------------------------------------------------------------- */
-typedef struct dnode {
-    void *data;
-    struct dnode *next;
-    struct dnode *prev;
-} dnode_t;
-
-typedef struct dnode dlist_t;
-
-/* -------------------------------------------------------------------- */
-dlist_t* dlist_new (void);
-void     dlist_free(dlist_t *the, void (*free)(void *));
-
-int  dlist_empty(const dlist_t *the);
-void dlist_push (dlist_t *the, void *data);
-int  dlist_pop  (dlist_t *the, void **data);
-
-#endif /* !ECHO_DLIST_H__ */
+/* -------------------------------------------------------------------- */
+#ifndef ECHO_DLIST_H__
+# define ECHO_DLIST_H__
+
+/* -------------------------------------------------------------------- */
+typedef struct dnode {
+    void *data;
+    struct dnode *next;
+    struct dnode *prev;
+} dnode_t;
+
+typedef struct dnode dlist_t;
+
+/* -------------------------------------------------------------------- */
+dlist_t* dlist_new (void);
+void     dlist_free(dlist_t *the, void (*free)(void *));
+
+int  dlist_empty(const dlist_t *the);
+void dlist_push (dlist_t *the, void *data);
+int  dlist_pop  (dlist_t *the, void **data);
+
+#endif /* !ECHO_DLIST_H__ */
diff --git a/tests/c-stub/echo-log.c b/tests/c-stub/echo-log.c
index 8aca703..747be3a 100644
--- a/tests/c-stub/echo-log.c
+++ b/tests/c-stub/echo-log.c
@@ -1,63 +1,63 @@
-/* -------------------------------------------------------------------- */
-#include <sys/types.h>
-#include <stdlib.h>
-#include <stdio.h>
-
-#include <log4c.h>
-#include <event.h>
-
-#include <pthread.h>
-
-#include "echo-log.h"
-
-/* -------------------------------------------------------------------- */
-log4c_category_t *logcat = NULL;
-
-/* -------------------------------------------------------------------- */
-static pthread_mutex_t _log_mutex = PTHREAD_MUTEX_INITIALIZER;
-
-/* -------------------------------------------------------------------- */
-void initialize_log4c(void) {
-    if (log4c_init() < 0 || (logcat = log4c_category_get("echo")) == NULL) {
-        fprintf(stderr, "%s\n", "cannot initialize log4c");
-        exit(EXIT_FAILURE);
-    }
-
-    log4c_category_set_priority(logcat, LOG_NOTICE);
-    log4c_category_set_additivity(logcat, 0);
-
-    {   log4c_appender_t *appender;
-
-        if ((appender = log4c_appender_get("stderr")) != NULL)
-            log4c_category_set_appender(logcat, appender);
-    }
-
-    setvbuf(stderr, NULL, _IONBF, 0);
-}
-
-/* -------------------------------------------------------------------- */
-void elog(int level, const char *format, ...) {
-    va_list ap;
-
-    if (level > log4c_category_get_priority(logcat))
-        return ;
-
-    va_start(ap, format);
-    (void) pthread_mutex_lock(&_log_mutex);
-    log4c_category_vlog(logcat, level, format, ap);
-    (void) pthread_mutex_unlock(&_log_mutex);
-    va_end(ap);
-}
-
-/* -------------------------------------------------------------------- */
-void _evlog(int severity, const char *msg) { /* event logger CB */
-         if (severity == _EVENT_LOG_DEBUG) severity = LOG_DEBUG;
-    else if (severity == _EVENT_LOG_MSG)   severity = LOG_NOTICE;
-    else if (severity == _EVENT_LOG_WARN)  severity = LOG_WARN;
-    else if (severity == _EVENT_LOG_ERR)   severity = LOG_ERROR;
-    else severity = LOG4C_PRIORITY_UNKNOWN;
-
-    (void) pthread_mutex_lock(&_log_mutex);
-    log4c_category_log(logcat, severity, "%s", (char*) msg);
-    (void) pthread_mutex_unlock(&_log_mutex);
-}
+/* -------------------------------------------------------------------- */
+#include <sys/types.h>
+#include <stdlib.h>
+#include <stdio.h>
+
+#include <log4c.h>
+#include <event.h>
+
+#include <pthread.h>
+
+#include "echo-log.h"
+
+/* -------------------------------------------------------------------- */
+log4c_category_t *logcat = NULL;
+
+/* -------------------------------------------------------------------- */
+static pthread_mutex_t _log_mutex = PTHREAD_MUTEX_INITIALIZER;
+
+/* -------------------------------------------------------------------- */
+void initialize_log4c(void) {
+    if (log4c_init() < 0 || (logcat = log4c_category_get("echo")) == NULL) {
+        fprintf(stderr, "%s\n", "cannot initialize log4c");
+        exit(EXIT_FAILURE);
+    }
+
+    log4c_category_set_priority(logcat, LOG_NOTICE);
+    log4c_category_set_additivity(logcat, 0);
+
+    {   log4c_appender_t *appender;
+
+        if ((appender = log4c_appender_get("stderr")) != NULL)
+            log4c_category_set_appender(logcat, appender);
+    }
+
+    setvbuf(stderr, NULL, _IONBF, 0);
+}
+
+/* -------------------------------------------------------------------- */
+void elog(int level, const char *format, ...) {
+    va_list ap;
+
+    if (level > log4c_category_get_priority(logcat))
+        return ;
+
+    va_start(ap, format);
+    (void) pthread_mutex_lock(&_log_mutex);
+    log4c_category_vlog(logcat, level, format, ap);
+    (void) pthread_mutex_unlock(&_log_mutex);
+    va_end(ap);
+}
+
+/* -------------------------------------------------------------------- */
+void _evlog(int severity, const char *msg) { /* event logger CB */
+         if (severity == _EVENT_LOG_DEBUG) severity = LOG_DEBUG;
+    else if (severity == _EVENT_LOG_MSG)   severity = LOG_NOTICE;
+    else if (severity == _EVENT_LOG_WARN)  severity = LOG_WARN;
+    else if (severity == _EVENT_LOG_ERR)   severity = LOG_ERROR;
+    else severity = LOG4C_PRIORITY_UNKNOWN;
+
+    (void) pthread_mutex_lock(&_log_mutex);
+    log4c_category_log(logcat, severity, "%s", (char*) msg);
+    (void) pthread_mutex_unlock(&_log_mutex);
+}
diff --git a/tests/c-stub/echo-log.h b/tests/c-stub/echo-log.h
index f3addda..63be4cb 100644
--- a/tests/c-stub/echo-log.h
+++ b/tests/c-stub/echo-log.h
@@ -1,31 +1,31 @@
-/* -------------------------------------------------------------------- */
-#ifndef ECHO_LOG_H__
-# define ECHO_LOG_H__
-
-/* -------------------------------------------------------------------- */
-#include <log4c.h>
-
-/* -------------------------------------------------------------------- */
-extern log4c_category_t *logcat;
-
-/* -------------------------------------------------------------------- */
-#define LOGPRIO (log4c_category_get_priority(logcat))
-
-#define LOG_FATAL  LOG4C_PRIORITY_FATAL
-#define LOG_ALERT  LOG4C_PRIORITY_ALERT
-#define LOG_CRIT   LOG4C_PRIORITY_CRIT
-#define LOG_ERROR  LOG4C_PRIORITY_ERROR
-#define LOG_WARN   LOG4C_PRIORITY_WARN
-#define LOG_NOTICE LOG4C_PRIORITY_NOTICE
-#define LOG_INFO   LOG4C_PRIORITY_INFO
-#define LOG_DEBUG  LOG4C_PRIORITY_DEBUG
-
-/* -------------------------------------------------------------------- */
-void initialize_log4c(void);
-
-void elog(int level, const char *format, ...)
-    __attribute__((format(printf, 2, 3)));
-
-void _evlog(int severity, const char *msg);
-
-#endif /* !ECHO_LOG_H__ */
+/* -------------------------------------------------------------------- */
+#ifndef ECHO_LOG_H__
+# define ECHO_LOG_H__
+
+/* -------------------------------------------------------------------- */
+#include <log4c.h>
+
+/* -------------------------------------------------------------------- */
+extern log4c_category_t *logcat;
+
+/* -------------------------------------------------------------------- */
+#define LOGPRIO (log4c_category_get_priority(logcat))
+
+#define LOG_FATAL  LOG4C_PRIORITY_FATAL
+#define LOG_ALERT  LOG4C_PRIORITY_ALERT
+#define LOG_CRIT   LOG4C_PRIORITY_CRIT
+#define LOG_ERROR  LOG4C_PRIORITY_ERROR
+#define LOG_WARN   LOG4C_PRIORITY_WARN
+#define LOG_NOTICE LOG4C_PRIORITY_NOTICE
+#define LOG_INFO   LOG4C_PRIORITY_INFO
+#define LOG_DEBUG  LOG4C_PRIORITY_DEBUG
+
+/* -------------------------------------------------------------------- */
+void initialize_log4c(void);
+
+void elog(int level, const char *format, ...)
+    __attribute__((format(printf, 2, 3)));
+
+void _evlog(int severity, const char *msg);
+
+#endif /* !ECHO_LOG_H__ */
diff --git a/tests/c-stub/echo-memory.c b/tests/c-stub/echo-memory.c
index 4e1a830..f90fb7b 100644
--- a/tests/c-stub/echo-memory.c
+++ b/tests/c-stub/echo-memory.c
@@ -1,97 +1,97 @@
-/* -------------------------------------------------------------------- */
-#include <sys/types.h>
-#include <stdlib.h>
-#include <stdarg.h>
-#include <string.h>
-
-#include "echo-memory.h"
-
-/* -------------------------------------------------------------------- */
-void* xmalloc(size_t size) {
-    void *p = malloc(size);
-
-    if (p == NULL) {
-        if (size == 0)
-            return xmalloc(1u);
-        abort();
-    }
-    return p;
-}
-
-/* -------------------------------------------------------------------- */
-void* xrealloc(void *p, size_t size) {
-    void *newp = realloc(p, size);
-
-    if (newp == NULL) {
-        if (size == 0)
-            return NULL;
-        abort();
-    }
-    return newp;
-}
-
-/* -------------------------------------------------------------------- */
-void* xcalloc(size_t nmemb, size_t size) {
-    void *p = calloc(nmemb, size);
-
-    if (p == NULL)
-        abort();
-    return p;
-}
-
-/* -------------------------------------------------------------------- */
-#ifdef WIN32
-char *strndup(const char *s, size_t sz) {
-    size_t  slen = strlen(s);
-    char   *new  = NULL;
-
-    slen = (slen > sz) ? sz : slen;
-    new  = malloc (slen + 1);
-
-    if (new == NULL)
-        return NULL;
-
-    memcpy(new, s, slen);
-    new[slen] = '\0';
-
-    return new;
-}
-#endif
-
-char* xstrdup(const char *s) {
-    if ((s = strdup(s)) == NULL)
-        abort();
-    return (char*) s;
-}
-
-char* xstrndup(const char *s, size_t n) {
-    if ((s = strndup(s, n)) == NULL)
-        abort();
-    return (char*) s;
-}
-
-/* -------------------------------------------------------------------- */
-char* xjoin(const char *s, ...) {
-    /*-*/ size_t   len  = 0;
-    const char    *p    = NULL;
-    /*-*/ size_t   outi = 0u;
-    /*-*/ char    *out  = NULL;
-    /*-*/ va_list  ap;
-
-    va_start(ap, s);
-    for (p = s; p != NULL; p = va_arg(ap, char*))
-        len += strlen(p);
-    va_end(ap);
-
-    out = NEW(char, len + 1);
-
-    va_start(ap, s);
-    for (outi = 0u, p = s; p != NULL; p = va_arg(ap, char*)) {
-        const size_t plen = strlen(p);
-        memcpy(&out[outi], p, plen);
-        outi += plen;
-    }
-    va_end(ap);
-
-    out[outi] = '\0'; return out;
-}
+/* -------------------------------------------------------------------- */
+#include <sys/types.h>
+#include <stdlib.h>
+#include <stdarg.h>
+#include <string.h>
+
+#include "echo-memory.h"
+
+/* -------------------------------------------------------------------- */
+void* xmalloc(size_t size) {
+    void *p = malloc(size);
+
+    if (p == NULL) {
+        if (size == 0)
+            return xmalloc(1u);
+        abort();
+    }
+    return p;
+}
+
+/* -------------------------------------------------------------------- */
+void* xrealloc(void *p, size_t size) {
+    void *newp = realloc(p, size);
+
+    if (newp == NULL) {
+        if (size == 0)
+            return NULL;
+        abort();
+    }
+    return newp;
+}
+
+/* -------------------------------------------------------------------- */
+void* xcalloc(size_t nmemb, size_t size) {
+    void *p = calloc(nmemb, size);
+
+    if (p == NULL)
+        abort();
+    return p;
+}
+
+/* -------------------------------------------------------------------- */
+#ifdef WIN32
+char *strndup(const char *s, size_t sz) {
+    size_t  slen = strlen(s);
+    char   *new  = NULL;
+
+    slen = (slen > sz) ? sz : slen;
+    new  = malloc (slen + 1);
+
+    if (new == NULL)
+        return NULL;
+
+    memcpy(new, s, slen);
+    new[slen] = '\0';
+
+    return new;
+}
+#endif
+
+char* xstrdup(const char *s) {
+    if ((s = strdup(s)) == NULL)
+        abort();
+    return (char*) s;
+}
+
+char* xstrndup(const char *s, size_t n) {
+    if ((s = strndup(s, n)) == NULL)
+        abort();
+    return (char*) s;
+}
+
+/* -------------------------------------------------------------------- */
+char* xjoin(const char *s, ...) {
+    /*-*/ size_t   len  = 0;
+    const char    *p    = NULL;
+    /*-*/ size_t   outi = 0u;
+    /*-*/ char    *out  = NULL;
+    /*-*/ va_list  ap;
+
+    va_start(ap, s);
+    for (p = s; p != NULL; p = va_arg(ap, char*))
+        len += strlen(p);
+    va_end(ap);
+
+    out = NEW(char, len + 1);
+
+    va_start(ap, s);
+    for (outi = 0u, p = s; p != NULL; p = va_arg(ap, char*)) {
+        const size_t plen = strlen(p);
+        memcpy(&out[outi], p, plen);
+        outi += plen;
+    }
+    va_end(ap);
+
+    out[outi] = '\0'; return out;
+}
diff --git a/tests/c-stub/echo-memory.h b/tests/c-stub/echo-memory.h
index b4e31e0..56273fc 100644
--- a/tests/c-stub/echo-memory.h
+++ b/tests/c-stub/echo-memory.h
@@ -1,23 +1,23 @@
-/* -------------------------------------------------------------------- */
-#ifndef ECHO_MEMORY_H__
-# define ECHO_MEMORY_H__
-
-/* -------------------------------------------------------------------- */
-#include <sys/types.h>
-
-/* -------------------------------------------------------------------- */
-#define ARRAY_SIZE(A) (sizeof (A) / sizeof ((A)[0]))
-
-/* -------------------------------------------------------------------- */
-void* xmalloc(size_t size);
-void* xrealloc(void *p, size_t size);
-void* xcalloc(size_t nmemb, size_t size);
-
-#define NEW(T, N) ((T*) xcalloc(N, sizeof(T)))
-
-/* -------------------------------------------------------------------- */
-char* xstrdup(const char *s);
-char* xstrndup(const char *s, size_t n);
-char* xjoin(const char *s, ...);
-
-#endif /* !ECHO_MEMORY_H__ */
+/* -------------------------------------------------------------------- */
+#ifndef ECHO_MEMORY_H__
+# define ECHO_MEMORY_H__
+
+/* -------------------------------------------------------------------- */
+#include <sys/types.h>
+
+/* -------------------------------------------------------------------- */
+#define ARRAY_SIZE(A) (sizeof (A) / sizeof ((A)[0]))
+
+/* -------------------------------------------------------------------- */
+void* xmalloc(size_t size);
+void* xrealloc(void *p, size_t size);
+void* xcalloc(size_t nmemb, size_t size);
+
+#define NEW(T, N) ((T*) xcalloc(N, sizeof(T)))
+
+/* -------------------------------------------------------------------- */
+char* xstrdup(const char *s);
+char* xstrndup(const char *s, size_t n);
+char* xjoin(const char *s, ...);
+
+#endif /* !ECHO_MEMORY_H__ */
diff --git a/tests/c-stub/echo-net.c b/tests/c-stub/echo-net.c
index 2a99d0f..cc23933 100644
--- a/tests/c-stub/echo-net.c
+++ b/tests/c-stub/echo-net.c
@@ -1,70 +1,70 @@
-/* -------------------------------------------------------------------- */
-#include <sys/types.h>
-#include <stdlib.h>
-#include <string.h>
-
-#include <assert.h>
-
-#include "echo-memory.h"
-#include "echo-net.h"
-
-/* -------------------------------------------------------------------- */
-void bufferevent_modcb(bufferevent_t *be, int flags,
-                       bufferevent_data_cb readcb,
-                       bufferevent_data_cb writecb,
-                       bufferevent_event_cb errorcb,
-                       void *cbarg)
-{
-    bufferevent_setcb
-        (be, (flags & BEV_MOD_CB_READ ) ? readcb  : be->readcb ,
-             (flags & BEV_MOD_CB_WRITE) ? writecb : be->writecb,
-             (flags & BEV_MOD_CB_ERROR) ? errorcb : be->errorcb,
-         cbarg);
-}
-
-
-/* -------------------------------------------------------------------- */
-int be_empty(bufferevent_t *be) {
-    evbuffer_t *ibuffer = bufferevent_get_input (be);
-    evbuffer_t *obuffer = bufferevent_get_output(be);
-
-    return
-        evbuffer_get_length(ibuffer) == 0 &&
-        evbuffer_get_length(obuffer) == 0;
-}
-
-/* -------------------------------------------------------------------- */
-int getaddr4(in4_t *out, const char *hostname, const char *service) {
-    int rr = 0;
-
-    struct evutil_addrinfo ai, *res = NULL;
-
-    memset(&ai, 0, sizeof(ai));
-    ai.ai_flags    = 0;
-    ai.ai_family   = AF_INET;
-    ai.ai_socktype = SOCK_STREAM;
-    ai.ai_protocol = 0;
-
-    if ((rr = evutil_getaddrinfo(hostname, service, &ai, &res)) != 0)
-        goto bailout;
-
-    assert(res[0].ai_addrlen == sizeof(in4_t));
-    memcpy(out, res[0].ai_addr, sizeof(in4_t));
-
- bailout:
-    if (res != NULL)
-        evutil_freeaddrinfo(res);
-
-    return rr;
-}
-
-/* -------------------------------------------------------------------- */
-char* inet4_ntop_x(const in4_t *addr) {
-    char ip[] = "xxx.xxx.xxx.xxx";
-    char *the = NULL;
-
-    evutil_inet_ntop(AF_INET, &addr->sin_addr, ip, sizeof(ip));
-    the = NEW(char, strlen(ip) + sizeof(uint16_t) * 8 + 1);
-    sprintf(the, "%s:%d", ip, (uint16_t) ntohs(addr->sin_port));
-    return the;
-}
+/* -------------------------------------------------------------------- */
+#include <sys/types.h>
+#include <stdlib.h>
+#include <string.h>
+
+#include <assert.h>
+
+#include "echo-memory.h"
+#include "echo-net.h"
+
+/* -------------------------------------------------------------------- */
+void bufferevent_modcb(bufferevent_t *be, int flags,
+                       bufferevent_data_cb readcb,
+                       bufferevent_data_cb writecb,
+                       bufferevent_event_cb errorcb,
+                       void *cbarg)
+{
+    bufferevent_setcb
+        (be, (flags & BEV_MOD_CB_READ ) ? readcb  : be->readcb ,
+             (flags & BEV_MOD_CB_WRITE) ? writecb : be->writecb,
+             (flags & BEV_MOD_CB_ERROR) ? errorcb : be->errorcb,
+         cbarg);
+}
+
+
+/* -------------------------------------------------------------------- */
+int be_empty(bufferevent_t *be) {
+    evbuffer_t *ibuffer = bufferevent_get_input (be);
+    evbuffer_t *obuffer = bufferevent_get_output(be);
+
+    return
+        evbuffer_get_length(ibuffer) == 0 &&
+        evbuffer_get_length(obuffer) == 0;
+}
+
+/* -------------------------------------------------------------------- */
+int getaddr4(in4_t *out, const char *hostname, const char *service) {
+    int rr = 0;
+
+    struct evutil_addrinfo ai, *res = NULL;
+
+    memset(&ai, 0, sizeof(ai));
+    ai.ai_flags    = 0;
+    ai.ai_family   = AF_INET;
+    ai.ai_socktype = SOCK_STREAM;
+    ai.ai_protocol = 0;
+
+    if ((rr = evutil_getaddrinfo(hostname, service, &ai, &res)) != 0)
+        goto bailout;
+
+    assert(res[0].ai_addrlen == sizeof(in4_t));
+    memcpy(out, res[0].ai_addr, sizeof(in4_t));
+
+ bailout:
+    if (res != NULL)
+        evutil_freeaddrinfo(res);
+
+    return rr;
+}
+
+/* -------------------------------------------------------------------- */
+char* inet4_ntop_x(const in4_t *addr) {
+    char ip[] = "xxx.xxx.xxx.xxx";
+    char *the = NULL;
+
+    evutil_inet_ntop(AF_INET, &addr->sin_addr, ip, sizeof(ip));
+    the = NEW(char, strlen(ip) + sizeof(uint16_t) * 8 + 1);
+    sprintf(the, "%s:%d", ip, (uint16_t) ntohs(addr->sin_port));
+    return the;
+}
diff --git a/tests/c-stub/echo-net.h b/tests/c-stub/echo-net.h
index 72a67de..0f3b560 100644
--- a/tests/c-stub/echo-net.h
+++ b/tests/c-stub/echo-net.h
@@ -1,76 +1,76 @@
-/* -------------------------------------------------------------------- */
-#ifndef ECHO_NET_H__
-# define ECHO_NET_H__
-
-/* -------------------------------------------------------------------- */
-#ifndef WIN32
-# include <unistd.h>
-#endif
-
-#ifdef WIN32
-# define _WINSOCKAPI_
-# include <winsock2.h>
-# include <ws2tcpip.h>
-#else
-# include <sys/socket.h>
-# include <netinet/in.h>
-# include <netinet/tcp.h>
-# include <arpa/inet.h>
-# include <netdb.h>
-#endif
-
-#ifdef WIN32
-# define SHUT_RD   SD_RECEIVE
-# define SHUT_WR   SD_SEND
-# define SHUT_RDWR SD_BOTH
-#endif
-
-#ifdef WIN32
-#define ERR(e) WSA##e
-#else
-#define ERR(e) e
-#endif
-
-/* -------------------------------------------------------------------- */
-#ifndef ECHO_NO_EVENT_LIB
-#include <event.h>
-#include <event2/util.h>
-#include <event2/listener.h>
-#include <event2/bufferevent_ssl.h>
-#endif
-
-/* -------------------------------------------------------------------- */
-typedef struct sockaddr_in in4_t;
-
-/* -------------------------------------------------------------------- */
-#ifndef ECHO_NO_EVENT_LIB
-typedef struct event event_t;
-typedef struct event_base event_base_t;
-typedef struct bufferevent bufferevent_t;
-typedef struct evbuffer evbuffer_t;
-typedef struct evconnlistener evconnlistener_t;
-#endif
-
-/* -------------------------------------------------------------------- */
-#ifndef ECHO_NO_EVENT_LIB
-
-#define BEV_MOD_CB_READ  0x01
-#define BEV_MOD_CB_WRITE 0x02
-#define BEV_MOD_CB_ERROR 0x04
-
-void bufferevent_modcb(bufferevent_t *be, int flags,
-                       bufferevent_data_cb readcb,
-                       bufferevent_data_cb writecb,
-                       bufferevent_event_cb errorcb,
-                       void *cbarg);
-
-int be_empty(bufferevent_t *be);
-#endif
-
-/* -------------------------------------------------------------------- */
-#ifndef ECHO_NO_EVENT_LIB
-int   getaddr4(in4_t *out, const char *hostname, const char *service);
-char* inet4_ntop_x(const in4_t *addr);
-#endif
-
-#endif /* !ECHO_NET_H__ */
+/* -------------------------------------------------------------------- */
+#ifndef ECHO_NET_H__
+# define ECHO_NET_H__
+
+/* -------------------------------------------------------------------- */
+#ifndef WIN32
+# include <unistd.h>
+#endif
+
+#ifdef WIN32
+# define _WINSOCKAPI_
+# include <winsock2.h>
+# include <ws2tcpip.h>
+#else
+# include <sys/socket.h>
+# include <netinet/in.h>
+# include <netinet/tcp.h>
+# include <arpa/inet.h>
+# include <netdb.h>
+#endif
+
+#ifdef WIN32
+# define SHUT_RD   SD_RECEIVE
+# define SHUT_WR   SD_SEND
+# define SHUT_RDWR SD_BOTH
+#endif
+
+#ifdef WIN32
+#define ERR(e) WSA##e
+#else
+#define ERR(e) e
+#endif
+
+/* -------------------------------------------------------------------- */
+#ifndef ECHO_NO_EVENT_LIB
+#include <event.h>
+#include <event2/util.h>
+#include <event2/listener.h>
+#include <event2/bufferevent_ssl.h>
+#endif
+
+/* -------------------------------------------------------------------- */
+typedef struct sockaddr_in in4_t;
+
+/* -------------------------------------------------------------------- */
+#ifndef ECHO_NO_EVENT_LIB
+typedef struct event event_t;
+typedef struct event_base event_base_t;
+typedef struct bufferevent bufferevent_t;
+typedef struct evbuffer evbuffer_t;
+typedef struct evconnlistener evconnlistener_t;
+#endif
+
+/* -------------------------------------------------------------------- */
+#ifndef ECHO_NO_EVENT_LIB
+
+#define BEV_MOD_CB_READ  0x01
+#define BEV_MOD_CB_WRITE 0x02
+#define BEV_MOD_CB_ERROR 0x04
+
+void bufferevent_modcb(bufferevent_t *be, int flags,
+                       bufferevent_data_cb readcb,
+                       bufferevent_data_cb writecb,
+                       bufferevent_event_cb errorcb,
+                       void *cbarg);
+
+int be_empty(bufferevent_t *be);
+#endif
+
+/* -------------------------------------------------------------------- */
+#ifndef ECHO_NO_EVENT_LIB
+int   getaddr4(in4_t *out, const char *hostname, const char *service);
+char* inet4_ntop_x(const in4_t *addr);
+#endif
+
+#endif /* !ECHO_NET_H__ */
diff --git a/tests/c-stub/echo-options.c b/tests/c-stub/echo-options.c
index 679a0af..991cce5 100644
--- a/tests/c-stub/echo-options.c
+++ b/tests/c-stub/echo-options.c
@@ -1,117 +1,117 @@
-/* -------------------------------------------------------------------- */
-#include <sys/types.h>
-#include <stdlib.h>
-#include <string.h>
-#include <getopt.h>
-
-#include "echo-log.h"
-#include "echo-memory.h"
-#include "echo-ssl.h"
-#include "echo-net.h"
-#include "echo-options.h"
-
-/* -------------------------------------------------------------------- */
-enum {
-    OPT_PORT    = 0x00,
-    OPT_ADDRESS = 0x01,
-    OPT_CIPHERS = 0x02,
-    OPT_CNAME   = 0x03,
-    OPT_SNAME   = 0x04,
-    OPT_DBDIR   = 0x05,
-    OPT_TLSVER  = 0x06,
-    OPT_PKI     = 0x07,
-    OPT_CLIENT  = 0x08,
-    OPT_DHDIR   = 0x09,
-};
-
-
-static const struct option long_options[] = {
-    {"port"         , required_argument, 0, OPT_PORT   },
-    {"address"      , required_argument, 0, OPT_ADDRESS},
-    {"ciphers"      , required_argument, 0, OPT_CIPHERS},
-    {"client-name"  , required_argument, 0, OPT_CNAME  },
-    {"server-name"  , required_argument, 0, OPT_SNAME  },
-    {"sessionDB-dir", required_argument, 0, OPT_DBDIR  },
-    {"tlsversion"   , required_argument, 0, OPT_TLSVER },
-    {"pki"          , required_argument, 0, OPT_PKI    },
-    {"client"       , no_argument      , 0, OPT_CLIENT },
-    {"dhDB-dir"     , required_argument, 0, OPT_DHDIR  },
-    {NULL           , 0                , 0, 0          },
-};
-
-/* -------------------------------------------------------------------- */
-int _options(int argc, char *argv[], options_t *options) {
-    const char     *address = "127.0.0.1";
-    const char     *port    = "6000";
-    const char     *ciphers = NULL;
-    const char     *cname   = NULL;
-    const char     *sname   = NULL;
-    const char     *dbdir   = "sessionDB";
-    const char     *dhdir   = "dhDB";
-    const char     *pki     = "pki";
-    /*-*/ tlsver_t  tlsver  = TLS_1p0;
-    /*-*/ int       client  = 0;
-
-    while (1) {
-        int i = 0;
-        int c = getopt_long(argc, argv, "", long_options, &i);
-
-        if (c < 0)
-            break ;
-
-        if (c == '?')
-            return -1;
-
-        switch (i) {
-        case OPT_PORT   : port    = optarg; break ;
-        case OPT_ADDRESS: address = optarg; break ;
-        case OPT_CIPHERS: ciphers = optarg; break ;
-        case OPT_CNAME  : cname   = optarg; break ;
-        case OPT_SNAME  : sname   = optarg; break ;
-        case OPT_DBDIR  : dbdir   = optarg; break ;
-        case OPT_DHDIR  : dhdir   = optarg; break ;
-        case OPT_PKI    : pki     = optarg; break ;
-
-        case OPT_TLSVER:
-            tlsver = tlsver_of_name(optarg);
-            if ((int) tlsver == -1) {
-                elog(LOG_FATAL, "invalid TLS version: %s", optarg);
-                return -1;
-            }
-            break ;
-
-        default:
-            abort();
-        }
-    }
-
-    memset(options, 0, sizeof(options_t));
-
-    options->debug = 1;
-
-    if (getaddr4(&options->echoname, address, port) != 0) {
-        elog(LOG_FATAL, "cannot resolve address %s:%s", address, port);
-        return -1;
-    }
-
-    if (cname != NULL)
-        options->cname = xstrdup(cname);
-    if (sname != NULL)
-        options->sname = xstrdup(sname);
-    if (ciphers != NULL)
-        options->ciphers = xstrdup(ciphers);
-
-    options->client = client;
-    options->tlsver = tlsver;
-    options->dbdir  = xstrdup(dbdir);
-    options->pki    = xstrdup(pki);
-
-#if 0
-    if (options->sname == NULL) {
-        elog(LOG_FATAL, "no server name given (--server-name)");
-        return -1;
-    }
-#endif
-
-    return 0;
-}
+/* -------------------------------------------------------------------- */
+#include <sys/types.h>
+#include <stdlib.h>
+#include <string.h>
+#include <getopt.h>
+
+#include "echo-log.h"
+#include "echo-memory.h"
+#include "echo-ssl.h"
+#include "echo-net.h"
+#include "echo-options.h"
+
+/* -------------------------------------------------------------------- */
+enum {
+    OPT_PORT    = 0x00,
+    OPT_ADDRESS = 0x01,
+    OPT_CIPHERS = 0x02,
+    OPT_CNAME   = 0x03,
+    OPT_SNAME   = 0x04,
+    OPT_DBDIR   = 0x05,
+    OPT_TLSVER  = 0x06,
+    OPT_PKI     = 0x07,
+    OPT_CLIENT  = 0x08,
+    OPT_DHDIR   = 0x09,
+};
+
+
+static const struct option long_options[] = {
+    {"port"         , required_argument, 0, OPT_PORT   },
+    {"address"      , required_argument, 0, OPT_ADDRESS},
+    {"ciphers"      , required_argument, 0, OPT_CIPHERS},
+    {"client-name"  , required_argument, 0, OPT_CNAME  },
+    {"server-name"  , required_argument, 0, OPT_SNAME  },
+    {"sessionDB-dir", required_argument, 0, OPT_DBDIR  },
+    {"tlsversion"   , required_argument, 0, OPT_TLSVER },
+    {"pki"          , required_argument, 0, OPT_PKI    },
+    {"client"       , no_argument      , 0, OPT_CLIENT },
+    {"dhDB-dir"     , required_argument, 0, OPT_DHDIR  },
+    {NULL           , 0                , 0, 0          },
+};
+
+/* -------------------------------------------------------------------- */
+int _options(int argc, char *argv[], options_t *options) {
+    const char     *address = "127.0.0.1";
+    const char     *port    = "6000";
+    const char     *ciphers = NULL;
+    const char     *cname   = NULL;
+    const char     *sname   = NULL;
+    const char     *dbdir   = "sessionDB";
+    const char     *dhdir   = "dhDB";
+    const char     *pki     = "pki";
+    /*-*/ tlsver_t  tlsver  = TLS_1p0;
+    /*-*/ int       client  = 0;
+
+    while (1) {
+        int i = 0;
+        int c = getopt_long(argc, argv, "", long_options, &i);
+
+        if (c < 0)
+            break ;
+
+        if (c == '?')
+            return -1;
+
+        switch (i) {
+        case OPT_PORT   : port    = optarg; break ;
+        case OPT_ADDRESS: address = optarg; break ;
+        case OPT_CIPHERS: ciphers = optarg; break ;
+        case OPT_CNAME  : cname   = optarg; break ;
+        case OPT_SNAME  : sname   = optarg; break ;
+        case OPT_DBDIR  : dbdir   = optarg; break ;
+        case OPT_DHDIR  : dhdir   = optarg; break ;
+        case OPT_PKI    : pki     = optarg; break ;
+
+        case OPT_TLSVER:
+            tlsver = tlsver_of_name(optarg);
+            if ((int) tlsver == -1) {
+                elog(LOG_FATAL, "invalid TLS version: %s", optarg);
+                return -1;
+            }
+            break ;
+
+        default:
+            abort();
+        }
+    }
+
+    memset(options, 0, sizeof(options_t));
+
+    options->debug = 1;
+
+    if (getaddr4(&options->echoname, address, port) != 0) {
+        elog(LOG_FATAL, "cannot resolve address %s:%s", address, port);
+        return -1;
+    }
+
+    if (cname != NULL)
+        options->cname = xstrdup(cname);
+    if (sname != NULL)
+        options->sname = xstrdup(sname);
+    if (ciphers != NULL)
+        options->ciphers = xstrdup(ciphers);
+
+    options->client = client;
+    options->tlsver = tlsver;
+    options->dbdir  = xstrdup(dbdir);
+    options->pki    = xstrdup(pki);
+
+#if 0
+    if (options->sname == NULL) {
+        elog(LOG_FATAL, "no server name given (--server-name)");
+        return -1;
+    }
+#endif
+
+    return 0;
+}
diff --git a/tests/c-stub/echo-options.h b/tests/c-stub/echo-options.h
index b6d7f2e..99badd0 100644
--- a/tests/c-stub/echo-options.h
+++ b/tests/c-stub/echo-options.h
@@ -1,25 +1,25 @@
-/* -------------------------------------------------------------------- */
-#ifndef ECHO_OPTIONS_H__
-# define ECHO_OPTIONS_H__
-
-/* -------------------------------------------------------------------- */
-# include "echo-ssl.h"
-# include "echo-net.h"
-
-/* -------------------------------------------------------------------- */
-typedef struct options {
-    int       debug   ;
-    int       client  ;
-    in4_t     echoname;
-    tlsver_t  tlsver  ;
-    char     *sname   ;
-    char     *cname   ;
-    char     *ciphers ;
-    char     *dbdir   ;
-    char     *pki     ;
-} options_t;
-
-/* -------------------------------------------------------------------- */
-int _options(int argc, char *argv[], options_t *options);
-
-#endif /* !ECHO_OPTIONS_H__ */
+/* -------------------------------------------------------------------- */
+#ifndef ECHO_OPTIONS_H__
+# define ECHO_OPTIONS_H__
+
+/* -------------------------------------------------------------------- */
+# include "echo-ssl.h"
+# include "echo-net.h"
+
+/* -------------------------------------------------------------------- */
+typedef struct options {
+    int       debug   ;
+    int       client  ;
+    in4_t     echoname;
+    tlsver_t  tlsver  ;
+    char     *sname   ;
+    char     *cname   ;
+    char     *ciphers ;
+    char     *dbdir   ;
+    char     *pki     ;
+} options_t;
+
+/* -------------------------------------------------------------------- */
+int _options(int argc, char *argv[], options_t *options);
+
+#endif /* !ECHO_OPTIONS_H__ */
diff --git a/tests/c-stub/echo-server.c b/tests/c-stub/echo-server.c
index 29370b3..0f240f2 100644
--- a/tests/c-stub/echo-server.c
+++ b/tests/c-stub/echo-server.c
@@ -1,304 +1,304 @@
-/* -------------------------------------------------------------------- */
-#include <sys/types.h>
-#include <stdlib.h>
-#include <string.h>
-
-#include <errno.h>
-
-#include <openssl/ssl.h>
-#include <openssl/err.h>
-
-#include "echo-log.h"
-#include "echo-memory.h"
-#include "echo-options.h"
-#include "echo-ssl.h"
-#include "echo-net.h"
-#include "echo-server.h"
-
-/* -------------------------------------------------------------------- */
-typedef struct stream {
-    /* options ref. */
-    const options_t *options;
-
-    /* remote hand FD / bevent */
-    int fd, rdclosed, wrclosed;
-    bufferevent_t *bevent;
-
-    /* SSL context */
-    SSL *sslcontext;
-
-    /* logger */
-    char *addst, *adsrc;
-} stream_t;
-
-/* -------------------------------------------------------------------- */
-#define stelog(S, L, F, ...) \
-    elog(L, "%s <-> %s: " F, (S)->adsrc, (S)->addst, ## __VA_ARGS__)
-
-#define S2C_LOG_ERROR(S) (stelog(S, LOG_ERROR, "S2C copy failure"))
-#define C2S_LOG_ERROR(S) (stelog(S, LOG_ERROR, "C2S copy failure"))
-
-/* -------------------------------------------------------------------- */
-static stream_t* stream_new(void) {
-    stream_t *the = NEW(stream_t, 1);
-
-    the->options    = NULL;
-    the->rdclosed   = 0;
-    the->wrclosed   = 0;
-    the->fd         = -1;
-    the->bevent     = NULL;
-    the->sslcontext = NULL;
-    the->addst      = NULL;
-    the->adsrc      = NULL;
-
-    return the;
-}
-
-static void stream_free(stream_t *the) {
-    if (the->adsrc) free(the->adsrc);
-    if (the->addst) free(the->addst);
-
-    if (the->bevent != NULL)
-        bufferevent_free(the->bevent);
-    if (the->fd >= 0)
-        (void) EVUTIL_CLOSESOCKET(the->fd);
-    if (the->sslcontext != NULL)
-        SSL_free(the->sslcontext);
-
-    free(the);
-}
-
-/* -------------------------------------------------------------------- */
-static int _check_for_stream_end(stream_t *stream) {
-    if (stream->rdclosed && !stream->wrclosed) {
-        evbuffer_t *output = bufferevent_get_output(stream->bevent);
-
-        if (evbuffer_get_length(output) == 0) {
-            (void) shutdown(stream->fd, SHUT_WR);
-            stream->wrclosed = 1;
-        }
-    }
-
-    if (!stream->wrclosed)
-        return 0;
-
-    stelog(stream, LOG_INFO, "all messages echo'ed. closing");
-    stream_free(stream);
-
-    return 1;
-}
-
-/* -------------------------------------------------------------------- */
-static void _server_onread(bufferevent_t *be, void *arg) {
-    stream_t *stream = (stream_t*) arg;
-
-    evbuffer_t *ibuffer = bufferevent_get_input (stream->bevent);
-    evbuffer_t *obuffer = bufferevent_get_output(stream->bevent);
-
-    (void) be;
-
-    while (1) {
-        size_t  len  = 0u;
-        char   *line = evbuffer_readln(ibuffer, &len, EVBUFFER_EOL_CRLF);
-
-        if (line == NULL)
-            break ;
-
-        if (strcmp(line, "<renegotiate>") == 0) {
-            stelog(stream, LOG_INFO, "starting renegotiation");
-
-            if (bufferevent_ssl_renegotiate(be) < 0) {
-                stelog(stream, LOG_ERROR, "error setting renegotiation");
-                goto bailout;
-            }
-        }
-
-        (void) evbuffer_expand(obuffer, len+2);
-        if (evbuffer_add(obuffer, line  , len) < 0 ||
-            evbuffer_add(obuffer, "\r\n", 2  ) < 0)
-        {
-            C2S_LOG_ERROR(stream);
-            goto bailout;
-        }
-    }
-
-    return ;
-
- bailout:
-    stelog(stream, LOG_ERROR, "closing connection");
-    stream_free(stream);
-}
-
-/* -------------------------------------------------------------------- */
-static void _server_onwrite(bufferevent_t *be, void *arg) {
-    stream_t *stream = (stream_t*) arg;
-
-    (void) be;
-
-    bufferevent_disable(stream->bevent, EV_WRITE);
-    bufferevent_modcb(stream->bevent,
-                      BEV_MOD_CB_READ | BEV_MOD_CB_WRITE,
-                      NULL, NULL, NULL, stream);
-    _check_for_stream_end(stream);
-}
-
-/* -------------------------------------------------------------------- */
-static void _server_onerror(bufferevent_t *be, short what, void *arg) {
-    stream_t *stream = (stream_t*) arg;
-
-    (void) be;
-
-    if ((what & BEV_EVENT_ERROR)) {
-        int rr = evutil_socket_geterror(bufferevent_getfd(be));
-
-        if (rr != 0) {
-            stelog(stream, LOG_ERROR, "communication error: %s", strerror(rr));
-        } else {
-            unsigned long sslrr = bufferevent_get_openssl_error(be);
-
-            if (sslrr != 0) {
-                char txterr[256];
-
-                ERR_error_string_n(sslrr, txterr, ARRAY_SIZE(txterr));
-                stelog(stream, LOG_ERROR, "SSL error: %s", txterr);
-            } else {
-                stelog(stream, LOG_ERROR, "unknown communication error");
-            }
-        }
-
-        goto bailout;
-    }
-
-    if ((what & BEV_EVENT_EOF)) {
-        evbuffer_t *ibuffer = bufferevent_get_input (stream->bevent);
-        evbuffer_t *obuffer = bufferevent_get_output(stream->bevent);
-
-        if (evbuffer_add_buffer(obuffer, ibuffer) < 0) {
-            C2S_LOG_ERROR(stream);
-            goto bailout;
-        }
-
-        (void) shutdown(stream->fd, SHUT_RD);
-        stream->rdclosed = 1;
-
-        if (!_check_for_stream_end(stream)) {
-            bufferevent_modcb(stream->bevent,
-                              BEV_MOD_CB_READ | BEV_MOD_CB_WRITE,
-                              NULL, _server_onwrite, NULL, stream);
-        }
-    }
-
-    return ;
-
- bailout:
-    stelog(stream, LOG_ERROR, "closing connection");
-    stream_free(stream);
-}
-
-/* -------------------------------------------------------------------- */
-typedef struct bindctxt {
-    /*-*/ SSL_CTX   *sslcontext;
-    const options_t *options;
-} bindctxt_t;
-
-/* -------------------------------------------------------------------- */
-static void _server_onaccept(struct evconnlistener  *listener,
-                             /*--*/ evutil_socket_t  fd      ,
-                             struct sockaddr        *address ,
-                             /*--*/ int              socklen ,
-                             /*--*/ void            *arg     )
-{
-    bindctxt_t *context = (bindctxt_t*) arg;
-    stream_t   *stream  = NULL;
-
-    (void) listener;
-    (void) socklen;
-
-    stream = stream_new();
-
-    stream->options = context->options;
-    stream->fd      = fd;
-    stream->adsrc   = inet4_ntop_x((in4_t*) address);
-    stream->addst   = inet4_ntop_x(&context->options->echoname);
-
-    evutil_make_socket_nonblocking(stream->fd);
-
-    stelog(stream, LOG_INFO, "new client");
-
-    if ((stream->sslcontext = SSL_new(context->sslcontext)) == NULL) {
-        elog(LOG_ERROR, "cannot create SSL context");
-        goto bailout;
-    }
-
-    stream->bevent =
-        bufferevent_openssl_socket_new(evconnlistener_get_base(listener),
-                                       stream->fd, stream->sslcontext,
-                                       BUFFEREVENT_SSL_ACCEPTING,
-                                       BEV_OPT_DEFER_CALLBACKS);
-    bufferevent_setcb(stream->bevent, _server_onread, NULL, _server_onerror, stream);
-    bufferevent_enable(stream->bevent, EV_READ|EV_WRITE);
-
-    return ;
-
- bailout:
-    if (stream != NULL)
-        stream_free(stream);
-}
-
-/* -------------------------------------------------------------------- */
-static void _server_onaccept_error(struct evconnlistener *listener, void *ctxt) {
-    int err = EVUTIL_SOCKET_ERROR();
-
-    (void) listener;
-    (void) ctxt;
-
-    elog(LOG_FATAL, "got an error %d (%s) on the listener",
-         err, evutil_socket_error_to_string(err));
-    event_loopexit(NULL);
-}
-
-/* -------------------------------------------------------------------- */
-int echo_server_setup(event_base_t *evb, const options_t *options) {
-    echossl_t         echossl;
-    bindctxt_t       *context    = NULL;
-    SSL_CTX          *sslcontext = NULL;
-    evconnlistener_t *acceptln   = NULL;
-
-    memset(&echossl, 0, sizeof(echossl));
-    echossl.ciphers = options->ciphers;
-    echossl.sname   = options->sname;
-    echossl.cname   = options->cname;
-    echossl.pki     = options->pki;
-    echossl.tlsver  = options->tlsver;
-
-    if ((sslcontext = evssl_init(&echossl, 1)) == NULL) {
-        elog(LOG_FATAL, "cannot create SSL context");
-        goto bailout;
-    }
-
-    context = NEW(bindctxt_t, 1);
-    context->options    = options;
-    context->sslcontext = sslcontext;
-
-    acceptln = evconnlistener_new_bind
-        (evb, _server_onaccept, context,
-         LEV_OPT_CLOSE_ON_FREE | LEV_OPT_REUSEABLE, -1,
-         (struct sockaddr*) &options->echoname,
-         sizeof(options->echoname));
-
-    if (acceptln == NULL) {
-        elog(LOG_FATAL, "cannot create [libevent] listener");
-        goto bailout;
-    }
-
-    evconnlistener_set_error_cb(acceptln, _server_onaccept_error);
-
-    return 0;
-
- bailout:
-    if (acceptln   != NULL) evconnlistener_free(acceptln);
-    if (context    != NULL) free(context);
-    if (sslcontext != NULL) SSL_CTX_free(sslcontext);
-
-    return -1;
-}
+/* -------------------------------------------------------------------- */
+#include <sys/types.h>
+#include <stdlib.h>
+#include <string.h>
+
+#include <errno.h>
+
+#include <openssl/ssl.h>
+#include <openssl/err.h>
+
+#include "echo-log.h"
+#include "echo-memory.h"
+#include "echo-options.h"
+#include "echo-ssl.h"
+#include "echo-net.h"
+#include "echo-server.h"
+
+/* -------------------------------------------------------------------- */
+typedef struct stream {
+    /* options ref. */
+    const options_t *options;
+
+    /* remote hand FD / bevent */
+    int fd, rdclosed, wrclosed;
+    bufferevent_t *bevent;
+
+    /* SSL context */
+    SSL *sslcontext;
+
+    /* logger */
+    char *addst, *adsrc;
+} stream_t;
+
+/* -------------------------------------------------------------------- */
+#define stelog(S, L, F, ...) \
+    elog(L, "%s <-> %s: " F, (S)->adsrc, (S)->addst, ## __VA_ARGS__)
+
+#define S2C_LOG_ERROR(S) (stelog(S, LOG_ERROR, "S2C copy failure"))
+#define C2S_LOG_ERROR(S) (stelog(S, LOG_ERROR, "C2S copy failure"))
+
+/* -------------------------------------------------------------------- */
+static stream_t* stream_new(void) {
+    stream_t *the = NEW(stream_t, 1);
+
+    the->options    = NULL;
+    the->rdclosed   = 0;
+    the->wrclosed   = 0;
+    the->fd         = -1;
+    the->bevent     = NULL;
+    the->sslcontext = NULL;
+    the->addst      = NULL;
+    the->adsrc      = NULL;
+
+    return the;
+}
+
+static void stream_free(stream_t *the) {
+    if (the->adsrc) free(the->adsrc);
+    if (the->addst) free(the->addst);
+
+    if (the->bevent != NULL)
+        bufferevent_free(the->bevent);
+    if (the->fd >= 0)
+        (void) EVUTIL_CLOSESOCKET(the->fd);
+    if (the->sslcontext != NULL)
+        SSL_free(the->sslcontext);
+
+    free(the);
+}
+
+/* -------------------------------------------------------------------- */
+static int _check_for_stream_end(stream_t *stream) {
+    if (stream->rdclosed && !stream->wrclosed) {
+        evbuffer_t *output = bufferevent_get_output(stream->bevent);
+
+        if (evbuffer_get_length(output) == 0) {
+            (void) shutdown(stream->fd, SHUT_WR);
+            stream->wrclosed = 1;
+        }
+    }
+
+    if (!stream->wrclosed)
+        return 0;
+
+    stelog(stream, LOG_INFO, "all messages echo'ed. closing");
+    stream_free(stream);
+
+    return 1;
+}
+
+/* -------------------------------------------------------------------- */
+static void _server_onread(bufferevent_t *be, void *arg) {
+    stream_t *stream = (stream_t*) arg;
+
+    evbuffer_t *ibuffer = bufferevent_get_input (stream->bevent);
+    evbuffer_t *obuffer = bufferevent_get_output(stream->bevent);
+
+    (void) be;
+
+    while (1) {
+        size_t  len  = 0u;
+        char   *line = evbuffer_readln(ibuffer, &len, EVBUFFER_EOL_CRLF);
+
+        if (line == NULL)
+            break ;
+
+        if (strcmp(line, "<renegotiate>") == 0) {
+            stelog(stream, LOG_INFO, "starting renegotiation");
+
+            if (bufferevent_ssl_renegotiate(be) < 0) {
+                stelog(stream, LOG_ERROR, "error setting renegotiation");
+                goto bailout;
+            }
+        }
+
+        (void) evbuffer_expand(obuffer, len+2);
+        if (evbuffer_add(obuffer, line  , len) < 0 ||
+            evbuffer_add(obuffer, "\r\n", 2  ) < 0)
+        {
+            C2S_LOG_ERROR(stream);
+            goto bailout;
+        }
+    }
+
+    return ;
+
+ bailout:
+    stelog(stream, LOG_ERROR, "closing connection");
+    stream_free(stream);
+}
+
+/* -------------------------------------------------------------------- */
+static void _server_onwrite(bufferevent_t *be, void *arg) {
+    stream_t *stream = (stream_t*) arg;
+
+    (void) be;
+
+    bufferevent_disable(stream->bevent, EV_WRITE);
+    bufferevent_modcb(stream->bevent,
+                      BEV_MOD_CB_READ | BEV_MOD_CB_WRITE,
+                      NULL, NULL, NULL, stream);
+    _check_for_stream_end(stream);
+}
+
+/* -------------------------------------------------------------------- */
+static void _server_onerror(bufferevent_t *be, short what, void *arg) {
+    stream_t *stream = (stream_t*) arg;
+
+    (void) be;
+
+    if ((what & BEV_EVENT_ERROR)) {
+        int rr = evutil_socket_geterror(bufferevent_getfd(be));
+
+        if (rr != 0) {
+            stelog(stream, LOG_ERROR, "communication error: %s", strerror(rr));
+        } else {
+            unsigned long sslrr = bufferevent_get_openssl_error(be);
+
+            if (sslrr != 0) {
+                char txterr[256];
+
+                ERR_error_string_n(sslrr, txterr, ARRAY_SIZE(txterr));
+                stelog(stream, LOG_ERROR, "SSL error: %s", txterr);
+            } else {
+                stelog(stream, LOG_ERROR, "unknown communication error");
+            }
+        }
+
+        goto bailout;
+    }
+
+    if ((what & BEV_EVENT_EOF)) {
+        evbuffer_t *ibuffer = bufferevent_get_input (stream->bevent);
+        evbuffer_t *obuffer = bufferevent_get_output(stream->bevent);
+
+        if (evbuffer_add_buffer(obuffer, ibuffer) < 0) {
+            C2S_LOG_ERROR(stream);
+            goto bailout;
+        }
+
+        (void) shutdown(stream->fd, SHUT_RD);
+        stream->rdclosed = 1;
+
+        if (!_check_for_stream_end(stream)) {
+            bufferevent_modcb(stream->bevent,
+                              BEV_MOD_CB_READ | BEV_MOD_CB_WRITE,
+                              NULL, _server_onwrite, NULL, stream);
+        }
+    }
+
+    return ;
+
+ bailout:
+    stelog(stream, LOG_ERROR, "closing connection");
+    stream_free(stream);
+}
+
+/* -------------------------------------------------------------------- */
+typedef struct bindctxt {
+    /*-*/ SSL_CTX   *sslcontext;
+    const options_t *options;
+} bindctxt_t;
+
+/* -------------------------------------------------------------------- */
+static void _server_onaccept(struct evconnlistener  *listener,
+                             /*--*/ evutil_socket_t  fd      ,
+                             struct sockaddr        *address ,
+                             /*--*/ int              socklen ,
+                             /*--*/ void            *arg     )
+{
+    bindctxt_t *context = (bindctxt_t*) arg;
+    stream_t   *stream  = NULL;
+
+    (void) listener;
+    (void) socklen;
+
+    stream = stream_new();
+
+    stream->options = context->options;
+    stream->fd      = fd;
+    stream->adsrc   = inet4_ntop_x((in4_t*) address);
+    stream->addst   = inet4_ntop_x(&context->options->echoname);
+
+    evutil_make_socket_nonblocking(stream->fd);
+
+    stelog(stream, LOG_INFO, "new client");
+
+    if ((stream->sslcontext = SSL_new(context->sslcontext)) == NULL) {
+        elog(LOG_ERROR, "cannot create SSL context");
+        goto bailout;
+    }
+
+    stream->bevent =
+        bufferevent_openssl_socket_new(evconnlistener_get_base(listener),
+                                       stream->fd, stream->sslcontext,
+                                       BUFFEREVENT_SSL_ACCEPTING,
+                                       BEV_OPT_DEFER_CALLBACKS);
+    bufferevent_setcb(stream->bevent, _server_onread, NULL, _server_onerror, stream);
+    bufferevent_enable(stream->bevent, EV_READ|EV_WRITE);
+
+    return ;
+
+ bailout:
+    if (stream != NULL)
+        stream_free(stream);
+}
+
+/* -------------------------------------------------------------------- */
+static void _server_onaccept_error(struct evconnlistener *listener, void *ctxt) {
+    int err = EVUTIL_SOCKET_ERROR();
+
+    (void) listener;
+    (void) ctxt;
+
+    elog(LOG_FATAL, "got an error %d (%s) on the listener",
+         err, evutil_socket_error_to_string(err));
+    event_loopexit(NULL);
+}
+
+/* -------------------------------------------------------------------- */
+int echo_server_setup(event_base_t *evb, const options_t *options) {
+    echossl_t         echossl;
+    bindctxt_t       *context    = NULL;
+    SSL_CTX          *sslcontext = NULL;
+    evconnlistener_t *acceptln   = NULL;
+
+    memset(&echossl, 0, sizeof(echossl));
+    echossl.ciphers = options->ciphers;
+    echossl.sname   = options->sname;
+    echossl.cname   = options->cname;
+    echossl.pki     = options->pki;
+    echossl.tlsver  = options->tlsver;
+
+    if ((sslcontext = evssl_init(&echossl, 1)) == NULL) {
+        elog(LOG_FATAL, "cannot create SSL context");
+        goto bailout;
+    }
+
+    context = NEW(bindctxt_t, 1);
+    context->options    = options;
+    context->sslcontext = sslcontext;
+
+    acceptln = evconnlistener_new_bind
+        (evb, _server_onaccept, context,
+         LEV_OPT_CLOSE_ON_FREE | LEV_OPT_REUSEABLE, -1,
+         (struct sockaddr*) &options->echoname,
+         sizeof(options->echoname));
+
+    if (acceptln == NULL) {
+        elog(LOG_FATAL, "cannot create [libevent] listener");
+        goto bailout;
+    }
+
+    evconnlistener_set_error_cb(acceptln, _server_onaccept_error);
+
+    return 0;
+
+ bailout:
+    if (acceptln   != NULL) evconnlistener_free(acceptln);
+    if (context    != NULL) free(context);
+    if (sslcontext != NULL) SSL_CTX_free(sslcontext);
+
+    return -1;
+}
diff --git a/tests/c-stub/echo-server.h b/tests/c-stub/echo-server.h
index f498afe..f018344 100644
--- a/tests/c-stub/echo-server.h
+++ b/tests/c-stub/echo-server.h
@@ -1,13 +1,13 @@
-/* -------------------------------------------------------------------- */
-#ifndef ECHO_SERVER_H__
-# define ECHO_SERVER_H__
-
-/* -------------------------------------------------------------------- */
-#include "echo-options.h"
-#include "echo-net.h"
-
-/* -------------------------------------------------------------------- */
-int echo_server_setup(event_base_t *evb, const options_t *options);
-
-#endif /* !ECHO_SERVER_H__ */
-
+/* -------------------------------------------------------------------- */
+#ifndef ECHO_SERVER_H__
+# define ECHO_SERVER_H__
+
+/* -------------------------------------------------------------------- */
+#include "echo-options.h"
+#include "echo-net.h"
+
+/* -------------------------------------------------------------------- */
+int echo_server_setup(event_base_t *evb, const options_t *options);
+
+#endif /* !ECHO_SERVER_H__ */
+
diff --git a/tests/c-stub/echo-ssl.c b/tests/c-stub/echo-ssl.c
index f2b724a..6dc3cd1 100644
--- a/tests/c-stub/echo-ssl.c
+++ b/tests/c-stub/echo-ssl.c
@@ -1,166 +1,166 @@
-/* -------------------------------------------------------------------- */
-#include <sys/types.h>
-#include <stdlib.h>
-
-#include <openssl/ssl.h>
-#include <openssl/err.h>
-#include <openssl/rand.h>
-
-#include "echo-log.h"
-#include "echo-memory.h"
-#include "echo-ssl.h"
-
-/* -------------------------------------------------------------------- */
-const struct tlsversion_s tlsversions[] = {
-    [SSL_3p0] = { SSL_3p0, "SSL_3p0"},
-    [TLS_1p0] = { TLS_1p0, "TLS_1p0"},
-    [TLS_1p1] = { TLS_1p1, "TLS_1p1"},
-    [TLS_1p2] = { TLS_1p2, "TLS_1p2"},
-};
-
-/* -------------------------------------------------------------------- */
-long SSL_CTX_use_tmp_dh_file(SSL_CTX *ctx, const char *filename) {
-    BIO *stream   = NULL;
-    DH  *dhparams = NULL;
-    int  rr       = 0;
-
-    if ((stream = BIO_new_file(filename, "r")) == NULL)
-        goto bailout;
-    if ((dhparams = PEM_read_bio_DHparams(stream, NULL, NULL, NULL)) == NULL)
-        goto bailout;
-    if (!(rr = SSL_CTX_set_tmp_dh(ctx, dhparams)))
-        goto bailout;
-
-    DH_free(dhparams);
-    BIO_free(stream);
-
-    return rr;
-
- bailout:
-    if (dhparams != NULL) DH_free(dhparams);
-    if (stream   != NULL) BIO_free(stream);
-
-    return 0;
-}
-
-/* -------------------------------------------------------------------- */
-tlsver_t tlsver_of_name(const char *name) {
-    size_t i;
-
-    for (i = 0; i < ARRAY_SIZE(tlsversions); ++i) {
-        const struct tlsversion_s *p = &tlsversions[i];
-        if (p->name != NULL && strcmp(p->name, name) == 0)
-            return p->version;
-    }
-
-    return (tlsver_t) -1;
-}
-
-/* -------------------------------------------------------------------- */
-SSL_CTX* evssl_init(const echossl_t *options, int isserver) {
-    /*-*/ SSL_CTX    *context = NULL;
-    /*-*/ char       *crtfile = NULL;
-    /*-*/ char       *keyfile = NULL;
-    /*-*/ char       *dhfile  = NULL;
-    /*-*/ char       *CApath  = NULL;
-    const SSL_METHOD *method  = NULL;
-
-    if (options->sname != NULL) {
-        crtfile = xjoin(options->pki, "/certificates/", options->sname, ".crt", NULL);
-        keyfile = xjoin(options->pki, "/certificates/", options->sname, ".key", NULL);
-    }
-
-    dhfile  = xjoin(options->pki, "/certificates/dh.pem", NULL);
-    CApath  = xjoin(options->pki, "/db/ca.db.certs", NULL);
-
-    SSL_load_error_strings();
-    SSL_library_init();
-
-    if (!RAND_poll()) {
-        elog(LOG_FATAL, "cannot initialize entropy");
-        goto bailout;
-    }
-
-    if (isserver) {
-        switch (options->tlsver) {
-        case SSL_3p0: method = SSLv3_server_method  (); break ;
-        case TLS_1p0: method = TLSv1_server_method  (); break ;
-        case TLS_1p1: method = TLSv1_1_server_method(); break ;
-        case TLS_1p2: method = TLSv1_2_server_method(); break ;
-
-        default:
-            abort();
-        }
-    } else {
-        switch (options->tlsver) {
-        case SSL_3p0: method = SSLv3_client_method  (); break ;
-        case TLS_1p0: method = TLSv1_client_method  (); break ;
-        case TLS_1p1: method = TLSv1_1_client_method(); break ;
-        case TLS_1p2: method = TLSv1_2_client_method(); break ;
-
-        default:
-            abort();
-        }
-    }
-
-    if ((context = SSL_CTX_new(method)) == NULL) {
-        elog(LOG_FATAL, "cannot create SSL context");
-        goto bailout;
-    }
-
-    if (options->ciphers != NULL) {
-        if (!SSL_CTX_set_cipher_list(context, options->ciphers)) {
-            elog(LOG_FATAL, "cannot set ciphers list `%s'", options->ciphers);
-            goto bailout;
-        }
-    }
-
-    if (!SSL_CTX_use_tmp_dh_file(context, dhfile)) {
-        elog(LOG_FATAL, "cannot load/set DH parameters from file `%s'", dhfile);
-        goto bailout;
-    }
-
-    if (!SSL_CTX_load_verify_locations(context, NULL, CApath)) {
-        elog(LOG_FATAL, "cannot load trusted hashed CA path");
-        goto bailout;
-    }
-
-    (void) SSL_CTX_set_default_verify_paths(context);
-
-    if (isserver) {
-        if (options->sname != NULL) {
-            if (!SSL_CTX_use_certificate_chain_file(context, crtfile)) {
-                elog(LOG_FATAL, "cannot load certificate `%s'", crtfile);
-                goto bailout;
-            }
-
-            if (!SSL_CTX_use_PrivateKey_file(context, keyfile, SSL_FILETYPE_PEM)) {
-                elog(LOG_FATAL, "cannot load certificate key `%s'", keyfile);
-                goto bailout;
-            }
-        }
-    }
-
-    (void) SSL_CTX_set_options(context, SSL_OP_NO_COMPRESSION);
-
-    if (options->sname != NULL) {
-        free(keyfile);
-        free(crtfile);
-    }
-
-    free(dhfile);
-    free(CApath);
-
-    return context;
-
- bailout:
-    if (context != NULL)
-        SSL_CTX_free(context);
-
-    if (keyfile != NULL) free(keyfile);
-    if (crtfile != NULL) free(crtfile);
-    if (dhfile  != NULL) free(dhfile);
-    if (CApath  != NULL) free(CApath);
-
-    return NULL;
-}
+/* -------------------------------------------------------------------- */
+#include <sys/types.h>
+#include <stdlib.h>
+
+#include <openssl/ssl.h>
+#include <openssl/err.h>
+#include <openssl/rand.h>
+
+#include "echo-log.h"
+#include "echo-memory.h"
+#include "echo-ssl.h"
+
+/* -------------------------------------------------------------------- */
+const struct tlsversion_s tlsversions[] = {
+    [SSL_3p0] = { SSL_3p0, "SSL_3p0"},
+    [TLS_1p0] = { TLS_1p0, "TLS_1p0"},
+    [TLS_1p1] = { TLS_1p1, "TLS_1p1"},
+    [TLS_1p2] = { TLS_1p2, "TLS_1p2"},
+};
+
+/* -------------------------------------------------------------------- */
+long SSL_CTX_use_tmp_dh_file(SSL_CTX *ctx, const char *filename) {
+    BIO *stream   = NULL;
+    DH  *dhparams = NULL;
+    int  rr       = 0;
+
+    if ((stream = BIO_new_file(filename, "r")) == NULL)
+        goto bailout;
+    if ((dhparams = PEM_read_bio_DHparams(stream, NULL, NULL, NULL)) == NULL)
+        goto bailout;
+    if (!(rr = SSL_CTX_set_tmp_dh(ctx, dhparams)))
+        goto bailout;
+
+    DH_free(dhparams);
+    BIO_free(stream);
+
+    return rr;
+
+ bailout:
+    if (dhparams != NULL) DH_free(dhparams);
+    if (stream   != NULL) BIO_free(stream);
+
+    return 0;
+}
+
+/* -------------------------------------------------------------------- */
+tlsver_t tlsver_of_name(const char *name) {
+    size_t i;
+
+    for (i = 0; i < ARRAY_SIZE(tlsversions); ++i) {
+        const struct tlsversion_s *p = &tlsversions[i];
+        if (p->name != NULL && strcmp(p->name, name) == 0)
+            return p->version;
+    }
+
+    return (tlsver_t) -1;
+}
+
+/* -------------------------------------------------------------------- */
+SSL_CTX* evssl_init(const echossl_t *options, int isserver) {
+    /*-*/ SSL_CTX    *context = NULL;
+    /*-*/ char       *crtfile = NULL;
+    /*-*/ char       *keyfile = NULL;
+    /*-*/ char       *dhfile  = NULL;
+    /*-*/ char       *CApath  = NULL;
+    const SSL_METHOD *method  = NULL;
+
+    if (options->sname != NULL) {
+        crtfile = xjoin(options->pki, "/certificates/", options->sname, ".crt", NULL);
+        keyfile = xjoin(options->pki, "/certificates/", options->sname, ".key", NULL);
+    }
+
+    dhfile  = xjoin(options->pki, "/certificates/dh.pem", NULL);
+    CApath  = xjoin(options->pki, "/db/ca.db.certs", NULL);
+
+    SSL_load_error_strings();
+    SSL_library_init();
+
+    if (!RAND_poll()) {
+        elog(LOG_FATAL, "cannot initialize entropy");
+        goto bailout;
+    }
+
+    if (isserver) {
+        switch (options->tlsver) {
+        case SSL_3p0: method = SSLv3_server_method  (); break ;
+        case TLS_1p0: method = TLSv1_server_method  (); break ;
+        case TLS_1p1: method = TLSv1_1_server_method(); break ;
+        case TLS_1p2: method = TLSv1_2_server_method(); break ;
+    
+        default:
+            abort();
+        }
+    } else {
+        switch (options->tlsver) {
+        case SSL_3p0: method = SSLv3_client_method  (); break ;
+        case TLS_1p0: method = TLSv1_client_method  (); break ;
+        case TLS_1p1: method = TLSv1_1_client_method(); break ;
+        case TLS_1p2: method = TLSv1_2_client_method(); break ;
+    
+        default:
+            abort();
+        }
+    }
+
+    if ((context = SSL_CTX_new(method)) == NULL) {
+        elog(LOG_FATAL, "cannot create SSL context");
+        goto bailout;
+    }
+
+    if (options->ciphers != NULL) {
+        if (!SSL_CTX_set_cipher_list(context, options->ciphers)) {
+            elog(LOG_FATAL, "cannot set ciphers list `%s'", options->ciphers);
+            goto bailout;
+        }
+    }
+
+    if (!SSL_CTX_use_tmp_dh_file(context, dhfile)) {
+        elog(LOG_FATAL, "cannot load/set DH parameters from file `%s'", dhfile);
+        goto bailout;
+    }
+
+    if (!SSL_CTX_load_verify_locations(context, NULL, CApath)) {
+        elog(LOG_FATAL, "cannot load trusted hashed CA path");
+        goto bailout;
+    }
+
+    (void) SSL_CTX_set_default_verify_paths(context);
+
+    if (isserver) {
+        if (options->sname != NULL) {
+            if (!SSL_CTX_use_certificate_chain_file(context, crtfile)) {
+                elog(LOG_FATAL, "cannot load certificate `%s'", crtfile);
+                goto bailout;
+            }
+    
+            if (!SSL_CTX_use_PrivateKey_file(context, keyfile, SSL_FILETYPE_PEM)) {
+                elog(LOG_FATAL, "cannot load certificate key `%s'", keyfile);
+                goto bailout;
+            }
+        }
+    }
+
+    (void) SSL_CTX_set_options(context, SSL_OP_NO_COMPRESSION); 
+
+    if (options->sname != NULL) {
+        free(keyfile);
+        free(crtfile);
+    }
+
+    free(dhfile);
+    free(CApath);
+
+    return context;
+
+ bailout:
+    if (context != NULL)
+        SSL_CTX_free(context);
+
+    if (keyfile != NULL) free(keyfile);
+    if (crtfile != NULL) free(crtfile);
+    if (dhfile  != NULL) free(dhfile);
+    if (CApath  != NULL) free(CApath);
+
+    return NULL;
+}
diff --git a/tests/c-stub/echo-ssl.h b/tests/c-stub/echo-ssl.h
index c7ebef2..d351073 100644
--- a/tests/c-stub/echo-ssl.h
+++ b/tests/c-stub/echo-ssl.h
@@ -1,37 +1,37 @@
-/* -------------------------------------------------------------------- */
-#ifndef ECHO_SSL_H__
-# define ECHO_SSL_H__
-
-/* -------------------------------------------------------------------- */
-#include <openssl/ssl.h>
-
-/* -------------------------------------------------------------------- */
-typedef enum tlsversion_e {
-    SSL_3p0 = 0x00,
-    TLS_1p0 = 0x01,
-    TLS_1p1 = 0x02,
-    TLS_1p2 = 0x03,
-} tlsver_t;
-
-struct tlsversion_s {
-    /*-*/ enum  tlsversion_e  version;
-    const /*-*/ char         *name;
-};
-
-extern const struct tlsversion_s tlsversions[];
-
-tlsver_t tlsver_of_name(const char *name);
-
-/* -------------------------------------------------------------------- */
-typedef struct echossl_s {
-    char     *ciphers;
-    char     *sname  ;
-    char     *cname  ;
-    char     *pki    ;
-    tlsver_t  tlsver ;
-} echossl_t;
-
-/* -------------------------------------------------------------------- */
-SSL_CTX* evssl_init(const echossl_t *options, int server);
-
-#endif /* !ECHO_SSL_H__ */
+/* -------------------------------------------------------------------- */
+#ifndef ECHO_SSL_H__
+# define ECHO_SSL_H__
+
+/* -------------------------------------------------------------------- */
+#include <openssl/ssl.h>
+
+/* -------------------------------------------------------------------- */
+typedef enum tlsversion_e {
+    SSL_3p0 = 0x00,
+    TLS_1p0 = 0x01,
+    TLS_1p1 = 0x02,
+    TLS_1p2 = 0x03,
+} tlsver_t;
+
+struct tlsversion_s {
+    /*-*/ enum  tlsversion_e  version;
+    const /*-*/ char         *name;
+};
+
+extern const struct tlsversion_s tlsversions[];
+
+tlsver_t tlsver_of_name(const char *name);
+
+/* -------------------------------------------------------------------- */
+typedef struct echossl_s {
+    char     *ciphers;
+    char     *sname  ;
+    char     *cname  ;
+    char     *pki    ;
+    tlsver_t  tlsver ;
+} echossl_t;
+
+/* -------------------------------------------------------------------- */
+SSL_CTX* evssl_init(const echossl_t *options, int server);
+
+#endif /* !ECHO_SSL_H__ */
diff --git a/tests/c-stub/echo.c b/tests/c-stub/echo.c
index 8fc4287..2524da7 100644
--- a/tests/c-stub/echo.c
+++ b/tests/c-stub/echo.c
@@ -1,109 +1,109 @@
-/* -------------------------------------------------------------------- */
-#include <sys/types.h>
-#include <stdlib.h>
-#include <string.h>
-
-#include <errno.h>
-
-#include <pthread.h>
-
-#include "echo-log.h"
-#include "echo-memory.h"
-#include "echo-options.h"
-#include "echo-client.h"
-#include "echo-server.h"
-
-/* -------------------------------------------------------------------- */
-/* ------------ 0x0MNNFFPPSL ------------------------------------------ */
-#define REQOSSL 0x01000103fL    /* 1.0.1c FINAL */
-
-#if OPENSSL_VERSION_NUMBER < REQOSSL
-# error "invalid OpenSSL version number"
-#endif
-
-/* -------------------------------------------------------------------- */
-static event_base_t *evb = NULL;
-
-/* -------------------------------------------------------------------- */
-const intptr_t zero = 0;
-const intptr_t one  = 1;
-
-/* -------------------------------------------------------------------- */
-static void* _entry (void *arg) {
-    const options_t *options = (options_t*) arg;
-
-    if ((evb = event_init()) == NULL) {
-        elog(LOG_FATAL, "cannot initialize libevent");
-        return (void*) zero;
-    }
-
-    event_set_log_callback(_evlog);
-    event_set_mem_functions(&xmalloc, &xrealloc, &free);
-
-    {   int rr;
-
-        if (options->client)
-            rr = echo_client_setup(evb, options);
-        else
-            rr = echo_server_setup(evb, options);
-
-        if (rr < 0)
-            return (void*) zero;
-    }
-
-    elog(LOG_NOTICE, "started");
-    event_dispatch();
-
-    return (void*) one;
-}
-
-/* -------------------------------------------------------------------- */
-int main(int argc, char *argv[]) {
-    options_t options;
-    pthread_t worker;
-
-#ifdef WIN32
-    WSADATA WSAData;
-#endif
-
-    int rr = 0;
-
-    if (argc-1 == 1 && strcmp(argv[1], "--info") == 0) {
-        printf("Using OpenSSL 0x%08lx\n", SSLeay());
-        return EXIT_SUCCESS;
-    }
-
-    initialize_log4c();
-
-    if (SSLeay() < REQOSSL) {
-        elog(LOG_FATAL, "OpenSSL version < 0x%08lx (compiled with 0x%08lx)",
-             SSLeay(), OPENSSL_VERSION_NUMBER);
-        return EXIT_FAILURE;
-    }
-
-    if (_options(argc, argv, &options) < 0)
-        return EXIT_FAILURE;
-
-    if (options.debug)
-        log4c_category_set_priority(logcat, LOG_DEBUG);
-
-#ifdef WIN32
-    if (WSAStartup(MAKEWORD(2, 2), &WSAData) != 0) {
-        elog(LOG_FATAL, "cannot initialize winsocks");
-        return EXIT_FAILURE;
-    }
-#endif
-
-    if (pthread_create(&worker, NULL, &_entry, &options) != 0) {
-        elog(LOG_FATAL, "Cannot create worker thread");
-        return EXIT_FAILURE;
-    }
-
-    (void) pthread_join(worker, (void**) &rr);
-
-#ifdef WIN32
-    (void) WSACleanup();
-#endif
-
-    return rr ? EXIT_SUCCESS : EXIT_FAILURE;
-}
+/* -------------------------------------------------------------------- */
+#include <sys/types.h>
+#include <stdlib.h>
+#include <string.h>
+
+#include <errno.h>
+
+#include <pthread.h>
+
+#include "echo-log.h"
+#include "echo-memory.h"
+#include "echo-options.h"
+#include "echo-client.h"
+#include "echo-server.h"
+
+/* -------------------------------------------------------------------- */
+/* ------------ 0x0MNNFFPPSL ------------------------------------------ */
+#define REQOSSL 0x01000103fL    /* 1.0.1c FINAL */
+
+#if OPENSSL_VERSION_NUMBER < REQOSSL
+# error "invalid OpenSSL version number"
+#endif
+
+/* -------------------------------------------------------------------- */
+static event_base_t *evb = NULL;
+
+/* -------------------------------------------------------------------- */
+const intptr_t zero = 0;
+const intptr_t one  = 1;
+
+/* -------------------------------------------------------------------- */
+static void* _entry (void *arg) {
+    const options_t *options = (options_t*) arg;
+
+    if ((evb = event_init()) == NULL) {
+        elog(LOG_FATAL, "cannot initialize libevent");
+        return (void*) zero;
+    }
+
+    event_set_log_callback(_evlog);
+    event_set_mem_functions(&xmalloc, &xrealloc, &free);
+
+    {   int rr;
+
+        if (options->client)
+            rr = echo_client_setup(evb, options);
+        else
+            rr = echo_server_setup(evb, options);
+
+        if (rr < 0)
+            return (void*) zero;
+    }
+
+    elog(LOG_NOTICE, "started");
+    event_dispatch();
+
+    return (void*) one;
+}
+
+/* -------------------------------------------------------------------- */
+int main(int argc, char *argv[]) {
+    options_t options;
+    pthread_t worker;
+
+#ifdef WIN32
+    WSADATA WSAData;
+#endif
+
+    int rr = 0;
+
+    if (argc-1 == 1 && strcmp(argv[1], "--info") == 0) {
+        printf("Using OpenSSL 0x%08lx\n", SSLeay());
+        return EXIT_SUCCESS;
+    }
+
+    initialize_log4c();
+
+    if (SSLeay() < REQOSSL) {
+        elog(LOG_FATAL, "OpenSSL version < 0x%08lx (compiled with 0x%08lx)",
+             SSLeay(), OPENSSL_VERSION_NUMBER);
+        return EXIT_FAILURE;
+    }
+
+    if (_options(argc, argv, &options) < 0)
+        return EXIT_FAILURE;
+
+    if (options.debug)
+        log4c_category_set_priority(logcat, LOG_DEBUG);
+
+#ifdef WIN32
+    if (WSAStartup(MAKEWORD(2, 2), &WSAData) != 0) {
+        elog(LOG_FATAL, "cannot initialize winsocks");
+        return EXIT_FAILURE;
+    }
+#endif
+
+    if (pthread_create(&worker, NULL, &_entry, &options) != 0) {
+        elog(LOG_FATAL, "Cannot create worker thread");
+        return EXIT_FAILURE;
+    }
+
+    (void) pthread_join(worker, (void**) &rr);
+
+#ifdef WIN32
+    (void) WSACleanup();
+#endif
+
+    return rr ? EXIT_SUCCESS : EXIT_FAILURE;
+}
diff --git a/tests/cygwin/cygwin.patch b/tests/cygwin/cygwin.patch
index 5e14fdb..624e308 100644
--- a/tests/cygwin/cygwin.patch
+++ b/tests/cygwin/cygwin.patch
@@ -1,66 +1,66 @@
-Index: cygwin/environ.cc
-===================================================================
-RCS file: /cvs/src/src/winsup/cygwin/environ.cc,v
-retrieving revision 1.209
-diff -u -p -r1.209 environ.cc
---- cygwin/environ.cc	24 Nov 2013 12:13:33 -0000	1.209
-+++ cygwin/environ.cc	24 Dec 2013 15:54:09 -0000
-@@ -130,6 +130,7 @@ static struct parse_thing
-   {"export", {&export_settings}, setbool, NULL, {{false}, {true}}},
-   {"glob", {func: glob_init}, isfunc, NULL, {{0}, {s: "normal"}}},
-   {"pipe_byte", {&pipe_byte}, setbool, NULL, {{false}, {true}}},
-+  {"pipe_nooverlap", {&pipe_nooverlap}, setbool, NULL, {{false}, {true}}},
-   {"proc_retry", {func: set_proc_retry}, isfunc, NULL, {{0}, {5}}},
-   {"reset_com", {&reset_com}, setbool, NULL, {{false}, {true}}},
-   {"wincmdln", {&wincmdln}, setbool, NULL, {{false}, {true}}},
-Index: cygwin/globals.cc
-===================================================================
-RCS file: /cvs/src/src/winsup/cygwin/globals.cc,v
-retrieving revision 1.55
-diff -u -p -r1.55 globals.cc
---- cygwin/globals.cc	9 Dec 2013 20:32:24 -0000	1.55
-+++ cygwin/globals.cc	24 Dec 2013 15:54:09 -0000
-@@ -72,6 +72,7 @@ bool detect_bloda;
- bool dos_file_warning = true;
- bool ignore_case_with_glob;
- bool pipe_byte;
-+bool pipe_nooverlap;
- bool reset_com;
- bool wincmdln;
- winsym_t allow_winsymlinks = WSYM_sysfile;
-Index: cygwin/pipe.cc
-===================================================================
-RCS file: /cvs/src/src/winsup/cygwin/pipe.cc,v
-retrieving revision 1.148
-diff -u -p -r1.148 pipe.cc
---- cygwin/pipe.cc	1 May 2013 01:20:37 -0000	1.148
-+++ cygwin/pipe.cc	24 Dec 2013 15:54:09 -0000
-@@ -342,7 +342,8 @@ fhandler_pipe::create (fhandler_pipe *fh
-   SECURITY_ATTRIBUTES *sa = sec_none_cloexec (mode);
-   int res = -1;
-
--  int ret = create (sa, &r, &w, psize, NULL, FILE_FLAG_OVERLAPPED);
-+  int ret = create (sa, &r, &w, psize, NULL,
-+		   pipe_nooverlap ? 0 : FILE_FLAG_OVERLAPPED);
-   if (ret)
-     __seterrno_from_win_error (ret);
-   else if ((fhs[0] = (fhandler_pipe *) build_fh_dev (*piper_dev)) == NULL)
-Index: doc/cygwinenv.xml
-===================================================================
-RCS file: /cvs/src/src/winsup/doc/cygwinenv.xml,v
-retrieving revision 1.4
-diff -u -p -r1.4 cygwinenv.xml
---- doc/cygwinenv.xml	26 Jul 2013 17:27:59 -0000	1.4
-+++ doc/cygwinenv.xml	24 Dec 2013 15:54:09 -0000
-@@ -68,6 +68,11 @@ message mode.</para>
- </listitem>
-
- <listitem>
-+<para><envar>(no)pipe_nooverlap</envar> - causes Cygwin to open pipes in non-overlapped mode by default, rather
-+than overlapped mode.  Useful for when running a Win32 program that doesn't expect an overlapped pipe.</para>
-+</listitem>
-+
-+<listitem>
- <para><envar>proc_retry:n</envar> - causes <function>fork()</function> and
- <function>exec*()</function> to retry n times when a child process fails
- due to certain windows-specific errors.  These errors usually occur when
+Index: cygwin/environ.cc
+===================================================================
+RCS file: /cvs/src/src/winsup/cygwin/environ.cc,v
+retrieving revision 1.209
+diff -u -p -r1.209 environ.cc
+--- cygwin/environ.cc	24 Nov 2013 12:13:33 -0000	1.209
++++ cygwin/environ.cc	24 Dec 2013 15:54:09 -0000
+@@ -130,6 +130,7 @@ static struct parse_thing
+   {"export", {&export_settings}, setbool, NULL, {{false}, {true}}},
+   {"glob", {func: glob_init}, isfunc, NULL, {{0}, {s: "normal"}}},
+   {"pipe_byte", {&pipe_byte}, setbool, NULL, {{false}, {true}}},
++  {"pipe_nooverlap", {&pipe_nooverlap}, setbool, NULL, {{false}, {true}}},
+   {"proc_retry", {func: set_proc_retry}, isfunc, NULL, {{0}, {5}}},
+   {"reset_com", {&reset_com}, setbool, NULL, {{false}, {true}}},
+   {"wincmdln", {&wincmdln}, setbool, NULL, {{false}, {true}}},
+Index: cygwin/globals.cc
+===================================================================
+RCS file: /cvs/src/src/winsup/cygwin/globals.cc,v
+retrieving revision 1.55
+diff -u -p -r1.55 globals.cc
+--- cygwin/globals.cc	9 Dec 2013 20:32:24 -0000	1.55
++++ cygwin/globals.cc	24 Dec 2013 15:54:09 -0000
+@@ -72,6 +72,7 @@ bool detect_bloda;
+ bool dos_file_warning = true;
+ bool ignore_case_with_glob;
+ bool pipe_byte;
++bool pipe_nooverlap;
+ bool reset_com;
+ bool wincmdln;
+ winsym_t allow_winsymlinks = WSYM_sysfile;
+Index: cygwin/pipe.cc
+===================================================================
+RCS file: /cvs/src/src/winsup/cygwin/pipe.cc,v
+retrieving revision 1.148
+diff -u -p -r1.148 pipe.cc
+--- cygwin/pipe.cc	1 May 2013 01:20:37 -0000	1.148
++++ cygwin/pipe.cc	24 Dec 2013 15:54:09 -0000
+@@ -342,7 +342,8 @@ fhandler_pipe::create (fhandler_pipe *fh
+   SECURITY_ATTRIBUTES *sa = sec_none_cloexec (mode);
+   int res = -1;
+ 
+-  int ret = create (sa, &r, &w, psize, NULL, FILE_FLAG_OVERLAPPED);
++  int ret = create (sa, &r, &w, psize, NULL,
++		   pipe_nooverlap ? 0 : FILE_FLAG_OVERLAPPED);
+   if (ret)
+     __seterrno_from_win_error (ret);
+   else if ((fhs[0] = (fhandler_pipe *) build_fh_dev (*piper_dev)) == NULL)
+Index: doc/cygwinenv.xml
+===================================================================
+RCS file: /cvs/src/src/winsup/doc/cygwinenv.xml,v
+retrieving revision 1.4
+diff -u -p -r1.4 cygwinenv.xml
+--- doc/cygwinenv.xml	26 Jul 2013 17:27:59 -0000	1.4
++++ doc/cygwinenv.xml	24 Dec 2013 15:54:09 -0000
+@@ -68,6 +68,11 @@ message mode.</para>
+ </listitem>
+ 
+ <listitem>
++<para><envar>(no)pipe_nooverlap</envar> - causes Cygwin to open pipes in non-overlapped mode by default, rather
++than overlapped mode.  Useful for when running a Win32 program that doesn't expect an overlapped pipe.</para>
++</listitem>
++
++<listitem>
+ <para><envar>proc_retry:n</envar> - causes <function>fork()</function> and
+ <function>exec*()</function> to retry n times when a child process fails
+ due to certain windows-specific errors.  These errors usually occur when
diff --git a/tests/pki/.gitignore b/tests/pki/.gitignore
index bb63114..2a83f12 100644
--- a/tests/pki/.gitignore
+++ b/tests/pki/.gitignore
@@ -1,5 +1,5 @@
-# Don't commit the PKI
-
-/certificates
-/db
-/imported
+# Don't commit the PKI
+
+/certificates
+/db
+/imported
diff --git a/tests/pki/config/ca.config b/tests/pki/config/ca.config
index 010f148..0d5e39d 100644
--- a/tests/pki/config/ca.config
+++ b/tests/pki/config/ca.config
@@ -1,92 +1,92 @@
-pki = $ENV::PKI # PKI root directory
-
-[ ca ]
-default_ca      = CA_own
-
-[ CA_own ]
-dir              = $pki/db
-certs            = $pki/db
-new_certs_dir    = $pki/db/ca.db.certs
-database         = $pki/db/ca.db.index
-serial           = $pki/db/ca.db.serial
-RANDFILE         = $pki/db/ca.db.rand
-certificate      = $pki/certificates/ca.crt
-private_key      = $pki/certificates/ca.key
-
-default_days     = 3000
-default_crl_days = 30
-default_md       = sha1
-preserve         = no
-
-policy           = policy_match
-
-x509_extensions  = usr_cert
-
-[ policy_match ]
-countryName             = match
-stateOrProvinceName     = match
-organizationName        = match
-organizationalUnitName  = optional
-commonName              = supplied
-emailAddress            = optional
-
-[ policy_anything ]
-countryName             = optional
-stateOrProvinceName     = optional
-localityName            = optional
-organizationName        = optional
-organizationalUnitName  = optional
-commonName              = supplied
-emailAddress            = optional
-
-[ usr_cert ]
-keyUsage          = nonRepudiation, digitalSignature, keyEncipherment
-basicConstraints  = CA:FALSE
-nsComment         = "OpenSSL Generated Certificate"
-
-[ req ]
-default_bits       = 1024
-default_keyfile    = privkey.pem
-string_mask        = utf8only
-distinguished_name = req_distinguished_name
-attributes         = req_attributes
-
-x509_extensions = v3_ca  # The extentions to add to the self signed cert
-req_extensions  = v3_req # The extensions to add to a certificate request
-
-[ v3_ca ]
-subjectKeyIdentifier   = hash
-authorityKeyIdentifier = keyid:always,issuer
-basicConstraints       = CA:true
-
-[ v3_req ]
-keyUsage         = nonRepudiation, digitalSignature, keyEncipherment
-basicConstraints = CA:FALSE
-
-[ req_distinguished_name ]
-countryName                    = Country Name (2 letter code)
-countryName_default            = FR
-countryName_min                = 2
-countryName_max                = 2
-
-stateOrProvinceName            = State or Province Name (full name)
-stateOrProvinceName_default    = Ile de France
-
-localityName                   = Locality Name (eg, city)
-localityName_default           = Paris
-
-0.organizationName             = Organization Name (eg, company)
-0.organizationName_default     = INRIA-MSR Joint Lab
-
-organizationalUnitName         = Organizational Unit Name (eg, section)
-organizationalUnitName_default = Security Group
-
-commonName                     = Common Name (e.g. server FQDN or YOUR name)
-commonName_default             = cert-XX.example.org
-commonName_max                 = 64
-
-emailAddress                   = Email Address
-emailAddress_default           = root@example.org
-emailAddress_max               = 64
-
-[ req_attributes ]
+pki = $ENV::PKI # PKI root directory
+
+[ ca ]
+default_ca      = CA_own
+
+[ CA_own ]
+dir              = $pki/db
+certs            = $pki/db
+new_certs_dir    = $pki/db/ca.db.certs
+database         = $pki/db/ca.db.index
+serial           = $pki/db/ca.db.serial
+RANDFILE         = $pki/db/ca.db.rand
+certificate      = $pki/certificates/ca.crt
+private_key      = $pki/certificates/ca.key
+
+default_days     = 3000
+default_crl_days = 30
+default_md       = sha1
+preserve         = no
+
+policy           = policy_match
+
+x509_extensions  = usr_cert
+
+[ policy_match ]
+countryName             = match
+stateOrProvinceName     = match
+organizationName        = match
+organizationalUnitName  = optional
+commonName              = supplied
+emailAddress            = optional
+
+[ policy_anything ]
+countryName             = optional
+stateOrProvinceName     = optional
+localityName            = optional
+organizationName        = optional
+organizationalUnitName  = optional
+commonName              = supplied
+emailAddress            = optional 
+
+[ usr_cert ]
+keyUsage          = nonRepudiation, digitalSignature, keyEncipherment
+basicConstraints  = CA:FALSE
+nsComment         = "OpenSSL Generated Certificate"
+
+[ req ]
+default_bits       = 1024
+default_keyfile    = privkey.pem
+string_mask        = utf8only
+distinguished_name = req_distinguished_name
+attributes         = req_attributes
+
+x509_extensions = v3_ca  # The extentions to add to the self signed cert
+req_extensions  = v3_req # The extensions to add to a certificate request
+
+[ v3_ca ]
+subjectKeyIdentifier   = hash
+authorityKeyIdentifier = keyid:always,issuer
+basicConstraints       = CA:true
+
+[ v3_req ]
+keyUsage         = nonRepudiation, digitalSignature, keyEncipherment
+basicConstraints = CA:FALSE
+
+[ req_distinguished_name ]
+countryName                    = Country Name (2 letter code)
+countryName_default            = FR
+countryName_min                = 2
+countryName_max                = 2
+
+stateOrProvinceName            = State or Province Name (full name)
+stateOrProvinceName_default    = Ile de France
+
+localityName                   = Locality Name (eg, city)
+localityName_default           = Paris
+
+0.organizationName             = Organization Name (eg, company)
+0.organizationName_default     = INRIA-MSR Joint Lab
+
+organizationalUnitName         = Organizational Unit Name (eg, section)
+organizationalUnitName_default = Security Group
+
+commonName                     = Common Name (e.g. server FQDN or YOUR name)
+commonName_default             = cert-XX.example.org
+commonName_max                 = 64
+
+emailAddress                   = Email Address
+emailAddress_default           = root@example.org
+emailAddress_max               = 64
+
+[ req_attributes ]
diff --git a/tests/pki/support/mono-crt-cleanup.py b/tests/pki/support/mono-crt-cleanup.py
index 0c643c3..6dd3066 100644
--- a/tests/pki/support/mono-crt-cleanup.py
+++ b/tests/pki/support/mono-crt-cleanup.py
@@ -1,70 +1,70 @@
-#! /usr/bin/env python
-
-# --------------------------------------------------------------------
-import sys, os, re, locale, subprocess as sp
-
-# --------------------------------------------------------------------
-def _get_certificates(store):
-    def _info_from_line(line):
-        m = re.match(r'^\s+Subject Name: (.*)', line)
-        if m is not None:
-            data = re.split(',\s*', m.group(1))
-            data = [x for x in data if '=' in x]
-            data = dict([x.split('=', 1) for x in data])
-            if 'CN' in data:
-                return ('cn', unicode(data['CN'], 'utf-8'))
-            return None
-
-        m = re.match(r'^\s+Unique Hash:\s*(\w+)', line)
-        if m is not None:
-            return ('hash', m.group(1))
-
-        return None
-
-    command = ['certmgr', '-list', '-c', store]
-    output  = sp.Popen(command, stdout = sp.PIPE).communicate()[0]
-    crts    = []
-    crtsmap = dict()
-    ctxt0   = dict(cn = None, hash = None)
-    ctxt    = ctxt0.copy()
-
-    def _valid_ctxt(ctxt):
-        return ctxt['cn'] != None and ctxt['hash'] != None
-
-    for line in output.splitlines():
-        if re.search('^(Self-signed)?\s*X.509', line):
-            if _valid_ctxt(ctxt):
-                crts.append(ctxt)
-            ctxt = ctxt0.copy()
-            continue
-
-        info = _info_from_line(line)
-        if info is not None:
-            ctxt[info[0]] = info[1]
-
-    if _valid_ctxt(ctxt):
-        crts.append(ctxt)
-
-    for x in crts:
-        crtsmap.setdefault(x['cn'], []).append(x['hash'])
-
-    return crtsmap
-
-# --------------------------------------------------------------------
-def _main():
-    locale.setlocale(locale.LC_ALL, 'C')
-
-    trcrts = _get_certificates('Trust')
-    mycrts = _get_certificates('My')
-    hashes = set()
-
-    for cn in sys.argv[1:]:
-        for crts in (trcrts, mycrts):
-            for h in crts.get(cn, []):
-                hashes.add(h)
-    for h in hashes:
-        print h
-
-# --------------------------------------------------------------------
-if __name__ == '__main__':
-    _main()
+#! /usr/bin/env python
+
+# --------------------------------------------------------------------
+import sys, os, re, locale, subprocess as sp
+
+# --------------------------------------------------------------------
+def _get_certificates(store):
+    def _info_from_line(line):
+        m = re.match(r'^\s+Subject Name: (.*)', line)
+        if m is not None:
+            data = re.split(',\s*', m.group(1))
+            data = [x for x in data if '=' in x]
+            data = dict([x.split('=', 1) for x in data])
+            if 'CN' in data:
+                return ('cn', unicode(data['CN'], 'utf-8'))
+            return None
+
+        m = re.match(r'^\s+Unique Hash:\s*(\w+)', line)
+        if m is not None:
+            return ('hash', m.group(1))
+
+        return None
+
+    command = ['certmgr', '-list', '-c', store]
+    output  = sp.Popen(command, stdout = sp.PIPE).communicate()[0]
+    crts    = []
+    crtsmap = dict()
+    ctxt0   = dict(cn = None, hash = None)
+    ctxt    = ctxt0.copy()
+
+    def _valid_ctxt(ctxt):
+        return ctxt['cn'] != None and ctxt['hash'] != None
+
+    for line in output.splitlines():
+        if re.search('^(Self-signed)?\s*X.509', line):
+            if _valid_ctxt(ctxt):
+                crts.append(ctxt)
+            ctxt = ctxt0.copy()
+            continue
+
+        info = _info_from_line(line)
+        if info is not None:
+            ctxt[info[0]] = info[1]
+
+    if _valid_ctxt(ctxt):
+        crts.append(ctxt)
+
+    for x in crts:
+        crtsmap.setdefault(x['cn'], []).append(x['hash'])
+
+    return crtsmap
+
+# --------------------------------------------------------------------
+def _main():
+    locale.setlocale(locale.LC_ALL, 'C')
+
+    trcrts = _get_certificates('Trust')
+    mycrts = _get_certificates('My')
+    hashes = set()
+
+    for cn in sys.argv[1:]:
+        for crts in (trcrts, mycrts):
+            for h in crts.get(cn, []):
+                hashes.add(h)
+    for h in hashes:
+        print h
+
+# --------------------------------------------------------------------
+if __name__ == '__main__':
+    _main()
diff --git a/tests/test-suite.ini b/tests/test-suite.ini
index f732728..e432049 100644
--- a/tests/test-suite.ini
+++ b/tests/test-suite.ini
@@ -1,79 +1,79 @@
-[config]
-bind      = 127.0.0.1:?
-scenarios = rsa-mte rsa-gcm rsa-dhe-mte rsa-mte-12 dsa-mte dsa-mte-12 anon-mte anon-mte-12
-
-[reneg]
-servname = rsa.cert-01.mitls.org
-pki      = pki/rsa
-versions = SSL_3p0 TLS_1p0 TLS_1p1 TLS_1p2
-ciphers  = TLS_RSA_WITH_RC4_128_SHA
-modes    = MI_C_TLS
-reneg    = True
-
-[rsa-mte]
-servname = rsa.cert-01.mitls.org
-pki      = pki/rsa
-versions = SSL_3p0 TLS_1p0 TLS_1p1 TLS_1p2
-ciphers  = TLS_RSA_WITH_NULL_MD5
-           TLS_RSA_WITH_NULL_SHA
-           TLS_RSA_WITH_RC4_128_MD5
-           TLS_RSA_WITH_RC4_128_SHA
-           TLS_RSA_WITH_3DES_EDE_CBC_SHA
-           TLS_RSA_WITH_AES_128_CBC_SHA
-           TLS_RSA_WITH_AES_256_CBC_SHA
-
-[rsa-gcm]
-servname = rsa.cert-01.mitls.org
-pki      = pki/rsa
-versions = TLS_1p2
-ciphers  = TLS_RSA_WITH_AES_128_GCM_SHA256
-           TLS_RSA_WITH_AES_256_GCM_SHA384
-
-[rsa-dhe-mte]
-servname = rsa.cert-01.mitls.org
-pki      = pki/rsa
-versions = SSL_3p0 TLS_1p0 TLS_1p1 TLS_1p2
-ciphers  = TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA
-           TLS_DHE_RSA_WITH_AES_128_CBC_SHA
-           TLS_DHE_RSA_WITH_AES_256_CBC_SHA
-
-[rsa-mte-12]
-servname = rsa.cert-01.mitls.org
-pki      = pki/rsa
-versions = TLS_1p2
-ciphers  = TLS_RSA_WITH_NULL_SHA256
-           TLS_RSA_WITH_AES_128_CBC_SHA256
-           TLS_RSA_WITH_AES_256_CBC_SHA256
-           TLS_DHE_RSA_WITH_AES_128_CBC_SHA256
-           TLS_DHE_RSA_WITH_AES_256_CBC_SHA256
-
-[dsa-mte]
-options  = nomono
-servname = dsa.cert-01.mitls.org
-pki      = pki/dsa
-versions = SSL_3p0 TLS_1p0 TLS_1p1 TLS_1p2
-ciphers  = TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA
-           TLS_DHE_DSS_WITH_AES_128_CBC_SHA
-           TLS_DHE_DSS_WITH_AES_256_CBC_SHA
-
-[dsa-mte-12]
-options  = nomono
-servname = dsa.cert-01.mitls.org
-pki      = pki/dsa
-versions = TLS_1p2
-ciphers  = TLS_DHE_DSS_WITH_AES_128_CBC_SHA256
-           TLS_DHE_DSS_WITH_AES_256_CBC_SHA256
-
-[anon-mte]
-pki      = pki/dsa
-versions = SSL_3p0 TLS_1p0 TLS_1p1 TLS_1p2
-ciphers  = TLS_DH_anon_WITH_RC4_128_MD5
-           TLS_DH_anon_WITH_3DES_EDE_CBC_SHA
-           TLS_DH_anon_WITH_AES_128_CBC_SHA
-           TLS_DH_anon_WITH_AES_256_CBC_SHA
-
-[anon-mte-12]
-pki      = pki/dsa
-versions = TLS_1p2
-ciphers  = TLS_DH_anon_WITH_AES_128_CBC_SHA256
-           TLS_DH_anon_WITH_AES_256_CBC_SHA256
+[config]
+bind      = 127.0.0.1:?
+scenarios = rsa-mte rsa-gcm rsa-dhe-mte rsa-mte-12 dsa-mte dsa-mte-12 anon-mte anon-mte-12
+
+[reneg]
+servname = rsa.cert-01.mitls.org
+pki      = pki/rsa
+versions = SSL_3p0 TLS_1p0 TLS_1p1 TLS_1p2
+ciphers  = TLS_RSA_WITH_RC4_128_SHA
+modes    = MI_C_TLS
+reneg    = True
+
+[rsa-mte]
+servname = rsa.cert-01.mitls.org
+pki      = pki/rsa
+versions = SSL_3p0 TLS_1p0 TLS_1p1 TLS_1p2
+ciphers  = TLS_RSA_WITH_NULL_MD5
+           TLS_RSA_WITH_NULL_SHA
+           TLS_RSA_WITH_RC4_128_MD5
+           TLS_RSA_WITH_RC4_128_SHA
+           TLS_RSA_WITH_3DES_EDE_CBC_SHA
+           TLS_RSA_WITH_AES_128_CBC_SHA
+           TLS_RSA_WITH_AES_256_CBC_SHA
+
+[rsa-gcm]
+servname = rsa.cert-01.mitls.org
+pki      = pki/rsa
+versions = TLS_1p2
+ciphers  = TLS_RSA_WITH_AES_128_GCM_SHA256
+           TLS_RSA_WITH_AES_256_GCM_SHA384
+
+[rsa-dhe-mte]
+servname = rsa.cert-01.mitls.org
+pki      = pki/rsa
+versions = SSL_3p0 TLS_1p0 TLS_1p1 TLS_1p2
+ciphers  = TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA
+           TLS_DHE_RSA_WITH_AES_128_CBC_SHA
+           TLS_DHE_RSA_WITH_AES_256_CBC_SHA
+
+[rsa-mte-12]
+servname = rsa.cert-01.mitls.org
+pki      = pki/rsa
+versions = TLS_1p2
+ciphers  = TLS_RSA_WITH_NULL_SHA256
+           TLS_RSA_WITH_AES_128_CBC_SHA256
+           TLS_RSA_WITH_AES_256_CBC_SHA256
+           TLS_DHE_RSA_WITH_AES_128_CBC_SHA256
+           TLS_DHE_RSA_WITH_AES_256_CBC_SHA256
+
+[dsa-mte]
+options  = nomono
+servname = dsa.cert-01.mitls.org
+pki      = pki/dsa
+versions = SSL_3p0 TLS_1p0 TLS_1p1 TLS_1p2
+ciphers  = TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA
+           TLS_DHE_DSS_WITH_AES_128_CBC_SHA
+           TLS_DHE_DSS_WITH_AES_256_CBC_SHA
+
+[dsa-mte-12]
+options  = nomono
+servname = dsa.cert-01.mitls.org
+pki      = pki/dsa
+versions = TLS_1p2
+ciphers  = TLS_DHE_DSS_WITH_AES_128_CBC_SHA256
+           TLS_DHE_DSS_WITH_AES_256_CBC_SHA256
+
+[anon-mte]
+pki      = pki/dsa
+versions = SSL_3p0 TLS_1p0 TLS_1p1 TLS_1p2
+ciphers  = TLS_DH_anon_WITH_RC4_128_MD5
+           TLS_DH_anon_WITH_3DES_EDE_CBC_SHA
+           TLS_DH_anon_WITH_AES_128_CBC_SHA
+           TLS_DH_anon_WITH_AES_256_CBC_SHA
+
+[anon-mte-12]
+pki      = pki/dsa
+versions = TLS_1p2
+ciphers  = TLS_DH_anon_WITH_AES_128_CBC_SHA256
+           TLS_DH_anon_WITH_AES_256_CBC_SHA256
diff --git a/tests/test-suite.py b/tests/test-suite.py
index 6a14b85..0b6f485 100644
--- a/tests/test-suite.py
+++ b/tests/test-suite.py
@@ -1,325 +1,325 @@
-#! /usr/bin/env python
-
-# --------------------------------------------------------------------
-import sys, os, time, socket, random, xsubprocess as sp, logging
-import ConfigParser as cp, StringIO as sio, shutil, tempfile
-
-# --------------------------------------------------------------------
-class Object(object):
-    def __init__(self, **kw):
-        self.__dict__.update(kw)
-
-# --------------------------------------------------------------------
-OPENSSL_CIPHERS = {
-    'TLS_RSA_WITH_NULL_MD5'               : 'NULL-MD5'               ,
-    'TLS_RSA_WITH_NULL_SHA'               : 'NULL-SHA'               ,
-    'TLS_RSA_WITH_NULL_SHA256'            : 'NULL-SHA256'            ,
-    'TLS_RSA_WITH_RC4_128_MD5'            : 'RC4-MD5'                ,
-    'TLS_RSA_WITH_RC4_128_SHA'            : 'RC4-SHA'                ,
-    'TLS_RSA_WITH_3DES_EDE_CBC_SHA'       : 'DES-CBC3-SHA'           ,
-    'TLS_RSA_WITH_AES_128_CBC_SHA'        : 'AES128-SHA'             ,
-    'TLS_RSA_WITH_AES_128_CBC_SHA256'     : 'AES128-SHA256'          ,
-    'TLS_RSA_WITH_AES_256_CBC_SHA'        : 'AES256-SHA'             ,
-    'TLS_RSA_WITH_AES_256_CBC_SHA256'     : 'AES256-SHA256'          ,
-    'TLS_RSA_WITH_AES_128_GCM_SHA256'     : 'AES128-GCM-SHA256'      ,
-    'TLS_RSA_WITH_AES_256_GCM_SHA384'     : 'AES256-GCM-SHA384'      ,
-    'TLS_DH_anon_WITH_3DES_EDE_CBC_SHA'   : 'ADH-DES-CBC3-SHA'       ,
-    'TLS_DH_anon_WITH_AES_128_CBC_SHA'    : 'ADH-AES128-SHA'         ,
-    'TLS_DH_anon_WITH_AES_128_CBC_SHA256' : 'ADH-AES128-SHA256'      ,
-    'TLS_DH_anon_WITH_AES_256_CBC_SHA'    : 'ADH-AES256-SHA'         ,
-    'TLS_DH_anon_WITH_AES_256_CBC_SHA256' : 'ADH-AES256-SHA256'      ,
-    'TLS_DH_anon_WITH_RC4_128_MD5'        : 'ADH-RC4-MD5'            ,
-    'TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA'   : 'EDH-DSS-DES-CBC3-SHA'   ,
-    'TLS_DHE_DSS_WITH_AES_128_CBC_SHA'    : 'DHE-DSS-AES128-SHA'     ,
-    'TLS_DHE_DSS_WITH_AES_128_CBC_SHA256' : 'DHE-DSS-AES128-SHA256'  ,
-    'TLS_DHE_DSS_WITH_AES_256_CBC_SHA'    : 'DHE-DSS-AES256-SHA'     ,
-    'TLS_DHE_DSS_WITH_AES_256_CBC_SHA256' : 'DHE-DSS-AES256-SHA256'  ,
-    'TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA'   : 'EDH-RSA-DES-CBC3-SHA'   ,
-    'TLS_DHE_RSA_WITH_AES_128_CBC_SHA'    : 'DHE-RSA-AES128-SHA'     ,
-    'TLS_DHE_RSA_WITH_AES_128_CBC_SHA256' : 'DHE-RSA-AES128-SHA256'  ,
-    'TLS_DHE_RSA_WITH_AES_256_CBC_SHA'    : 'DHE-RSA-AES256-SHA'     ,
-    'TLS_DHE_RSA_WITH_AES_256_CBC_SHA256' : 'DHE-RSA-AES256-SHA256'  ,
-}
-
-# --------------------------------------------------------------------
-class MI_MI_TLS(object):
-    name     = 'MI_MI_TLS'
-    miserver = True
-    miclient = True
-
-class MI_C_TLS(object):
-    name     = 'MI_C_TLS'
-    miserver = False
-    miclient = True
-
-VENDORS_MODE = (MI_MI_TLS, MI_C_TLS)
-VENDORS_MODE = dict((x.name, x) for x in VENDORS_MODE)
-
-# --------------------------------------------------------------------
-def cygpath(mode, path):
-    command = ['cygpath', '-%s' % (mode,), path]
-    subp    = sp.Popen(command, stdout = sp.PIPE)
-    return subp.communicate()[0].splitlines()[0]
-
-# --------------------------------------------------------------------
-def _openssl_ciphers():
-    ciphers = sp.Popen(['openssl', 'ciphers', 'ALL:NULL'], stdout = sp.PIPE)
-    ciphers = ciphers.communicate()[0]
-    ciphers = ciphers.splitlines()[0].split(':')
-
-    return ciphers
-
-# --------------------------------------------------------------------
-def _check_for_config(mode, config):
-    assert mode.miclient        # Non miTLS client unsupported
-
-    subpc, subps = None, None
-    sessiondir   = None
-
-    if sys.platform.lower() not in ('cygwin', 'win32'):
-        if 'nomono' in config.options:
-            logging.warning('Test disabled under Mono')
-            return True
-
-    try:
-        logging.debug('Creating empty session directory...')
-        sessiondir = tempfile.mkdtemp()
-        os.mkdir(os.path.join(sessiondir, 'client'))
-        os.mkdir(os.path.join(sessiondir, 'server'))
-        logging.debug('...created [%s/{client,server}]' % (sessiondir,))
-
-        def build_command(mivendor, isclient):
-            assert not (not mivendor and isclient)
-
-            mysessiondir = os.path.join(sessiondir, 'client' if isclient else 'server')
-            dhdir        = os.path.join('..','data','dh')
-            win32        = sys.platform.lower() in ('cygwin', 'win32')
-            cipher       = config.cipher
-
-            if win32 and sys.platform.lower() == 'cygwin':
-                mysessiondir = cygpath('w', mysessiondir)
-
-            if not mivendor:
-                cipher = OPENSSL_CIPHERS[cipher]
-
-            if mivendor:
-                pgm = '../apps/echo/bin/Debug/echo.exe'
-            else:
-                pgm = 'i686-pc-mingw32-echo.exe' if win32 else 'echo'
-                pgm = os.path.join('c-stub', pgm)
-
-            command  = [pgm]
-            command += ['--address'      , str(config.address[0]),
-                        '--port'         , str(config.address[1]),
-                        '--ciphers'      , cipher,
-                        '--tlsversion'   , config.version,
-                        '--sessionDB-dir', mysessiondir,
-                        '--dhDB-dir'     , dhdir]
-
-            if config.servname is not None:
-                command += ['--server-name'  , config.servname,]
-
-
-            if not mivendor and config.pki is not None:
-                command += ['--pki', config.pki]
-
-            if mivendor and not win32:
-                command = ['mono', '--debug'] + command
-
-            if isclient:
-                command += ['--client']
-
-            return command
-
-        c_command = build_command(mode.miclient, True )
-        s_command = build_command(mode.miserver, False)
-
-        logging.debug('Starting echo server [%s]' % (' '.join(s_command)))
-
-        try:
-            subps = sp.Popen(s_command)
-        except OSError, e:
-            logging.error('Cannot start echo server: %s' % (e,))
-            return False
-
-    	logging.debug('Waiting echo server to set up...')
-        time.sleep(1.5)
-
-        logging.debug('Starting echo client [%s]' % (' '.join(c_command)))
-
-        try:
-            subpc = sp.Popen(c_command, stdin = sp.PIPE, stdout = sp.PIPE)
-        except OSError, e:
-            logging.error('Cannot start echo client: %s' % (e,))
-            return False
-
-        logging.debug('Waiting echo client to set up...')
-        time.sleep(1.5)
-
-        logging.debug('Client <-> server communication...')
-
-        CRLN  = '\r\n'
-        DATA  = 'dohj3do0aiF9eishilaiPh2aid2eidahch2eivaonevohmoovainazoo8Ooyoo9O'
-        REGN  = '<renegotiate>'
-
-        if config.reneg:
-            INPUT = CRLN.join([DATA, REGN, DATA]) + CRLN
-        else:
-            INPUT = DATA + CRLN
-
-        try:
-            contents = subpc.communicate(INPUT, timeout = 3)[0].splitlines()
-        except (IOError, OSError), e:
-            logging.error('Error while interacting with server: %s' % (e,))
-            return False
-
-        return DATA in contents
-
-    finally:
-        for subp, who in [(subpc, 'client'), (subps, 'server')]:
-            if subp is not None:
-                logging.debug('Waiting echo %s to shutdown...' % (who,))
-                try:
-                    subp.terminate(); subp.kill(); subp.wait()
-                except OSError:
-                    pass
-
-        if sessiondir is not None:
-            shutil.rmtree(sessiondir, ignore_errors = True)
-
-    logging.info('Test successful')
-    return True
-
-# --------------------------------------------------------------------
-DEFAULTS = '''\
-[DEFAULT]
-bind     = 127.0.0.1:?
-servname =
-modes    = MI_MI_TLS MI_C_TLS
-reneg    = False
-pki      =
-options  =
-'''
-
-def _main():
-    logging.basicConfig(stream = sys.stderr,
-                        level  = logging.DEBUG,
-                        format = '%(asctime)-15s - %(levelname)s - %(message)s')
-
-    parser = cp.ConfigParser()
-    parser.readfp(sio.StringIO(DEFAULTS))
-    if not parser.read('test-suite.ini'):
-        print >>sys.stderr, 'Cannot read configuration file'
-        exit(1)
-
-
-    if not parser.has_option('config', 'scenarios'):
-        print >>sys.stderr, "Missing `[config].scenarios' option"
-        exit(1)
-
-    bind      = parser.get('config', 'bind')
-    scennames = parser.get('config', 'scenarios').split()
-    scenarios = []
-
-    if len(sys.argv)-1 > 0:
-        scennames = sys.argv[1:]
-
-    for scenario in scennames:
-        if not parser.has_section(scenario):
-            print >>sys.stderr, "No section for scenario `%s'" % (scenario,)
-            exit(1)
-
-    for scenario in scennames:
-        for x in ('versions', 'ciphers'):
-            if not parser.has_option(scenario, x):
-                print >>sys.stderr, "Missing `[%s].%s' option" % (scenario, x)
-                exit(1)
-        scendata = Object(
-            servname = parser.get(scenario, 'servname').strip() or None,
-            versions = parser.get(scenario, 'versions').split(),
-            ciphers  = parser.get(scenario, 'ciphers' ).split(),
-            modes    = parser.get(scenario, 'modes'   ).split(),
-            reneg    = parser.getboolean(scenario, 'reneg'),
-            pki      = parser.get(scenario, 'pki').strip() or None,
-            options  = set(parser.get(scenario, 'options').split()) or [],
-        )
-
-        if 'PKIBASE' in os.environ:
-            scendata.pki = os.path.join(os.environ['PKIBASE'], scendata.pki or '')
-
-        try:
-            scendata.modes = [VENDORS_MODE[x] for x in scendata.modes]
-        except KeyError, e:
-            print >>sys.stderr, "Unknown mode: `%s'" % (e.args[0])
-            exit(1)
-
-        scenarios.append((scenario, scendata))
-
-    del scendata
-
-    if ':' in bind:
-        bind = tuple(bind.split(':', 1))
-        if bind[1] == '?':
-            bind = (bind[0], random.randint(32768, 65535))
-    else:
-        bind = (bind, 6000)
-
-    try:
-        bind = \
-            socket.getaddrinfo(bind[0], bind[1]  ,
-                               socket.AF_INET    ,
-                               socket.SOCK_STREAM,
-                               socket.SOL_TCP    )[0][4]
-    except socket.error, e:
-        logging.fatal("cannot resolve `%s': %s" % (':'.join(bind), e))
-        exit(1)
-
-    logging.info("----- OPENSSL CIPHERS -----")
-    logging.info(':'.join(_openssl_ciphers()))
-    logging.info("----- END OF OPENSSL CIPHERS -----")
-
-    logging.info("----- CONFIGURATION -----")
-    logging.info("Binding address is: %s" % ':'.join(map(str, bind)))
-    for i, (name, scendata) in enumerate(scenarios):
-        logging.info("Scenario %.2d (%s)" % (i+1, name))
-        logging.info("* TLS Servname: %s" % (scendata.servname or '<none>',))
-        logging.info("* TLS versions: %s" % ", ".join(scendata.versions))
-        logging.info("* TLS ciphers : %s" % ", ".join(scendata.ciphers))
-        logging.info("* TLS vendors : %s" % ", ".join([x.name for x in scendata.modes]))
-        logging.info("* TLS reneg   : %r" % (scendata.reneg,))
-    logging.info("----- END OF CONFIGURATION -----")
-
-    nerrors = 0
-
-    for name, scendata in scenarios:
-        for cipher in scendata.ciphers:
-            for version in scendata.versions:
-                for mode in scendata.modes:
-                    logging.info("Checking for cipher: `%s'" % (cipher,))
-                    logging.info("* Client is miTLS: %r" % (mode.miclient,))
-                    logging.info("* Server is miTLS: %r" % (mode.miserver,))
-                    logging.info("* TLS version is : %s" % (version,))
-                    logging.info("* TLS reneg      : %r" % (scendata.reneg,))
-                    logging.info("* servname is    : %s" % (scendata.servname or '<none>',))
-                    logging.info("* PKI located at : %s" % (scendata.pki or '<none>',))
-
-                    config = Object(cipher   = cipher,
-                                    version  = version,
-                                    address  = bind,
-                                    servname = scendata.servname,
-                                    reneg    = scendata.reneg,
-                                    pki      = scendata.pki,
-                                    options  = scendata.options)
-
-                    success  = _check_for_config(mode, config)
-                    nerrors += int(not success)
-
-                    if not success:
-                        logging.error('---------- FAILURE ----------')
-
-    logging.info('# errors: %d' % (nerrors,))
-    exit(2 if nerrors else 0)
-
-# --------------------------------------------------------------------
-if __name__ == '__main__':
-    _main()
+#! /usr/bin/env python
+
+# --------------------------------------------------------------------
+import sys, os, time, socket, random, xsubprocess as sp, logging
+import ConfigParser as cp, StringIO as sio, shutil, tempfile
+
+# --------------------------------------------------------------------
+class Object(object):
+    def __init__(self, **kw):
+        self.__dict__.update(kw)
+
+# --------------------------------------------------------------------
+OPENSSL_CIPHERS = {
+    'TLS_RSA_WITH_NULL_MD5'               : 'NULL-MD5'               ,
+    'TLS_RSA_WITH_NULL_SHA'               : 'NULL-SHA'               ,
+    'TLS_RSA_WITH_NULL_SHA256'            : 'NULL-SHA256'            ,
+    'TLS_RSA_WITH_RC4_128_MD5'            : 'RC4-MD5'                ,
+    'TLS_RSA_WITH_RC4_128_SHA'            : 'RC4-SHA'                ,
+    'TLS_RSA_WITH_3DES_EDE_CBC_SHA'       : 'DES-CBC3-SHA'           ,
+    'TLS_RSA_WITH_AES_128_CBC_SHA'        : 'AES128-SHA'             ,
+    'TLS_RSA_WITH_AES_128_CBC_SHA256'     : 'AES128-SHA256'          ,
+    'TLS_RSA_WITH_AES_256_CBC_SHA'        : 'AES256-SHA'             ,
+    'TLS_RSA_WITH_AES_256_CBC_SHA256'     : 'AES256-SHA256'          ,
+    'TLS_RSA_WITH_AES_128_GCM_SHA256'     : 'AES128-GCM-SHA256'      ,
+    'TLS_RSA_WITH_AES_256_GCM_SHA384'     : 'AES256-GCM-SHA384'      ,
+    'TLS_DH_anon_WITH_3DES_EDE_CBC_SHA'   : 'ADH-DES-CBC3-SHA'       ,
+    'TLS_DH_anon_WITH_AES_128_CBC_SHA'    : 'ADH-AES128-SHA'         ,
+    'TLS_DH_anon_WITH_AES_128_CBC_SHA256' : 'ADH-AES128-SHA256'      ,
+    'TLS_DH_anon_WITH_AES_256_CBC_SHA'    : 'ADH-AES256-SHA'         ,
+    'TLS_DH_anon_WITH_AES_256_CBC_SHA256' : 'ADH-AES256-SHA256'      ,
+    'TLS_DH_anon_WITH_RC4_128_MD5'        : 'ADH-RC4-MD5'            ,
+    'TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA'   : 'EDH-DSS-DES-CBC3-SHA'   ,
+    'TLS_DHE_DSS_WITH_AES_128_CBC_SHA'    : 'DHE-DSS-AES128-SHA'     ,
+    'TLS_DHE_DSS_WITH_AES_128_CBC_SHA256' : 'DHE-DSS-AES128-SHA256'  ,
+    'TLS_DHE_DSS_WITH_AES_256_CBC_SHA'    : 'DHE-DSS-AES256-SHA'     ,
+    'TLS_DHE_DSS_WITH_AES_256_CBC_SHA256' : 'DHE-DSS-AES256-SHA256'  ,
+    'TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA'   : 'EDH-RSA-DES-CBC3-SHA'   ,
+    'TLS_DHE_RSA_WITH_AES_128_CBC_SHA'    : 'DHE-RSA-AES128-SHA'     ,
+    'TLS_DHE_RSA_WITH_AES_128_CBC_SHA256' : 'DHE-RSA-AES128-SHA256'  ,
+    'TLS_DHE_RSA_WITH_AES_256_CBC_SHA'    : 'DHE-RSA-AES256-SHA'     ,
+    'TLS_DHE_RSA_WITH_AES_256_CBC_SHA256' : 'DHE-RSA-AES256-SHA256'  ,
+}
+
+# --------------------------------------------------------------------
+class MI_MI_TLS(object):
+    name     = 'MI_MI_TLS'
+    miserver = True
+    miclient = True
+
+class MI_C_TLS(object):
+    name     = 'MI_C_TLS'
+    miserver = False
+    miclient = True
+
+VENDORS_MODE = (MI_MI_TLS, MI_C_TLS)
+VENDORS_MODE = dict((x.name, x) for x in VENDORS_MODE)
+
+# --------------------------------------------------------------------
+def cygpath(mode, path):
+    command = ['cygpath', '-%s' % (mode,), path]
+    subp    = sp.Popen(command, stdout = sp.PIPE)
+    return subp.communicate()[0].splitlines()[0]
+
+# --------------------------------------------------------------------
+def _openssl_ciphers():
+    ciphers = sp.Popen(['openssl', 'ciphers', 'ALL:NULL'], stdout = sp.PIPE)
+    ciphers = ciphers.communicate()[0]
+    ciphers = ciphers.splitlines()[0].split(':')
+
+    return ciphers
+
+# --------------------------------------------------------------------
+def _check_for_config(mode, config):
+    assert mode.miclient        # Non miTLS client unsupported
+
+    subpc, subps = None, None
+    sessiondir   = None
+
+    if sys.platform.lower() not in ('cygwin', 'win32'):
+        if 'nomono' in config.options:
+            logging.warning('Test disabled under Mono')
+            return True
+
+    try:
+        logging.debug('Creating empty session directory...')
+        sessiondir = tempfile.mkdtemp()
+        os.mkdir(os.path.join(sessiondir, 'client'))
+        os.mkdir(os.path.join(sessiondir, 'server'))
+        logging.debug('...created [%s/{client,server}]' % (sessiondir,))
+
+        def build_command(mivendor, isclient):
+            assert not (not mivendor and isclient)
+
+            mysessiondir = os.path.join(sessiondir, 'client' if isclient else 'server')
+            dhdir        = os.path.join('..','data','dh')
+            win32        = sys.platform.lower() in ('cygwin', 'win32')
+            cipher       = config.cipher
+
+            if win32 and sys.platform.lower() == 'cygwin':
+                mysessiondir = cygpath('w', mysessiondir)
+
+            if not mivendor:
+                cipher = OPENSSL_CIPHERS[cipher]
+
+            if mivendor:
+                pgm = '../apps/echo/bin/Debug/echo.exe'
+            else:
+                pgm = 'i686-pc-mingw32-echo.exe' if win32 else 'echo'
+                pgm = os.path.join('c-stub', pgm)
+
+            command  = [pgm]
+            command += ['--address'      , str(config.address[0]),
+                        '--port'         , str(config.address[1]),
+                        '--ciphers'      , cipher,
+                        '--tlsversion'   , config.version,
+                        '--sessionDB-dir', mysessiondir,
+                        '--dhDB-dir'     , dhdir]
+
+            if config.servname is not None:
+                command += ['--server-name'  , config.servname,]
+
+
+            if not mivendor and config.pki is not None:
+                command += ['--pki', config.pki]
+
+            if mivendor and not win32:
+                command = ['mono', '--debug'] + command
+
+            if isclient:
+                command += ['--client']
+
+            return command
+
+        c_command = build_command(mode.miclient, True )
+        s_command = build_command(mode.miserver, False)
+
+        logging.debug('Starting echo server [%s]' % (' '.join(s_command)))
+
+        try:
+            subps = sp.Popen(s_command)
+        except OSError, e:
+            logging.error('Cannot start echo server: %s' % (e,))
+            return False
+
+    	logging.debug('Waiting echo server to set up...')
+        time.sleep(1.5)
+
+        logging.debug('Starting echo client [%s]' % (' '.join(c_command)))
+
+        try:
+            subpc = sp.Popen(c_command, stdin = sp.PIPE, stdout = sp.PIPE)
+        except OSError, e:
+            logging.error('Cannot start echo client: %s' % (e,))
+            return False
+
+        logging.debug('Waiting echo client to set up...')
+        time.sleep(1.5)
+
+        logging.debug('Client <-> server communication...')
+
+        CRLN  = '\r\n'
+        DATA  = 'dohj3do0aiF9eishilaiPh2aid2eidahch2eivaonevohmoovainazoo8Ooyoo9O'
+        REGN  = '<renegotiate>'
+
+        if config.reneg:
+            INPUT = CRLN.join([DATA, REGN, DATA]) + CRLN
+        else:
+            INPUT = DATA + CRLN
+
+        try:
+            contents = subpc.communicate(INPUT, timeout = 3)[0].splitlines()
+        except (IOError, OSError), e:
+            logging.error('Error while interacting with server: %s' % (e,))
+            return False
+
+        return DATA in contents
+
+    finally:
+        for subp, who in [(subpc, 'client'), (subps, 'server')]:
+            if subp is not None:
+                logging.debug('Waiting echo %s to shutdown...' % (who,))
+                try:
+                    subp.terminate(); subp.kill(); subp.wait()
+                except OSError:
+                    pass
+                
+        if sessiondir is not None:
+            shutil.rmtree(sessiondir, ignore_errors = True)
+
+    logging.info('Test successful')
+    return True
+
+# --------------------------------------------------------------------
+DEFAULTS = '''\
+[DEFAULT]
+bind     = 127.0.0.1:?
+servname =
+modes    = MI_MI_TLS MI_C_TLS
+reneg    = False
+pki      =
+options  =
+'''
+
+def _main():
+    logging.basicConfig(stream = sys.stderr,
+                        level  = logging.DEBUG,
+                        format = '%(asctime)-15s - %(levelname)s - %(message)s')
+
+    parser = cp.ConfigParser()
+    parser.readfp(sio.StringIO(DEFAULTS))
+    if not parser.read('test-suite.ini'):
+        print >>sys.stderr, 'Cannot read configuration file'
+        exit(1)
+
+
+    if not parser.has_option('config', 'scenarios'):
+        print >>sys.stderr, "Missing `[config].scenarios' option"
+        exit(1)
+
+    bind      = parser.get('config', 'bind')
+    scennames = parser.get('config', 'scenarios').split()
+    scenarios = []
+
+    if len(sys.argv)-1 > 0:
+        scennames = sys.argv[1:]
+
+    for scenario in scennames:
+        if not parser.has_section(scenario):
+            print >>sys.stderr, "No section for scenario `%s'" % (scenario,)
+            exit(1)
+
+    for scenario in scennames:
+        for x in ('versions', 'ciphers'):
+            if not parser.has_option(scenario, x):
+                print >>sys.stderr, "Missing `[%s].%s' option" % (scenario, x)
+                exit(1)
+        scendata = Object(
+            servname = parser.get(scenario, 'servname').strip() or None,
+            versions = parser.get(scenario, 'versions').split(),
+            ciphers  = parser.get(scenario, 'ciphers' ).split(),
+            modes    = parser.get(scenario, 'modes'   ).split(),
+            reneg    = parser.getboolean(scenario, 'reneg'),
+            pki      = parser.get(scenario, 'pki').strip() or None,
+            options  = set(parser.get(scenario, 'options').split()) or [],
+        )
+
+        if 'PKIBASE' in os.environ:
+            scendata.pki = os.path.join(os.environ['PKIBASE'], scendata.pki or '')
+
+        try:
+            scendata.modes = [VENDORS_MODE[x] for x in scendata.modes]
+        except KeyError, e:
+            print >>sys.stderr, "Unknown mode: `%s'" % (e.args[0])
+            exit(1)
+
+        scenarios.append((scenario, scendata))
+
+    del scendata
+
+    if ':' in bind:
+        bind = tuple(bind.split(':', 1))
+        if bind[1] == '?':
+            bind = (bind[0], random.randint(32768, 65535))
+    else:
+        bind = (bind, 6000)
+
+    try:
+        bind = \
+            socket.getaddrinfo(bind[0], bind[1]  ,
+                               socket.AF_INET    ,
+                               socket.SOCK_STREAM,
+                               socket.SOL_TCP    )[0][4]
+    except socket.error, e:
+        logging.fatal("cannot resolve `%s': %s" % (':'.join(bind), e))
+        exit(1)
+
+    logging.info("----- OPENSSL CIPHERS -----")
+    logging.info(':'.join(_openssl_ciphers()))
+    logging.info("----- END OF OPENSSL CIPHERS -----")
+
+    logging.info("----- CONFIGURATION -----")
+    logging.info("Binding address is: %s" % ':'.join(map(str, bind)))
+    for i, (name, scendata) in enumerate(scenarios):
+        logging.info("Scenario %.2d (%s)" % (i+1, name))
+        logging.info("* TLS Servname: %s" % (scendata.servname or '<none>',))
+        logging.info("* TLS versions: %s" % ", ".join(scendata.versions))
+        logging.info("* TLS ciphers : %s" % ", ".join(scendata.ciphers))
+        logging.info("* TLS vendors : %s" % ", ".join([x.name for x in scendata.modes]))
+        logging.info("* TLS reneg   : %r" % (scendata.reneg,))
+    logging.info("----- END OF CONFIGURATION -----")
+
+    nerrors = 0
+
+    for name, scendata in scenarios:
+        for cipher in scendata.ciphers:
+            for version in scendata.versions:
+                for mode in scendata.modes:
+                    logging.info("Checking for cipher: `%s'" % (cipher,))
+                    logging.info("* Client is miTLS: %r" % (mode.miclient,))
+                    logging.info("* Server is miTLS: %r" % (mode.miserver,))
+                    logging.info("* TLS version is : %s" % (version,))
+                    logging.info("* TLS reneg      : %r" % (scendata.reneg,))
+                    logging.info("* servname is    : %s" % (scendata.servname or '<none>',))
+                    logging.info("* PKI located at : %s" % (scendata.pki or '<none>',))
+        
+                    config = Object(cipher   = cipher,
+                                    version  = version,
+                                    address  = bind,
+                                    servname = scendata.servname,
+                                    reneg    = scendata.reneg,
+                                    pki      = scendata.pki,
+                                    options  = scendata.options)
+    
+                    success  = _check_for_config(mode, config)
+                    nerrors += int(not success)
+    
+                    if not success:
+                        logging.error('---------- FAILURE ----------')
+
+    logging.info('# errors: %d' % (nerrors,))
+    exit(2 if nerrors else 0)
+
+# --------------------------------------------------------------------
+if __name__ == '__main__':
+    _main()
diff --git a/tests/xsubprocess.py b/tests/xsubprocess.py
index 8fd9a52..01b87b8 100644
--- a/tests/xsubprocess.py
+++ b/tests/xsubprocess.py
@@ -1,220 +1,220 @@
-"""
-Enhanced subprocess.Popen subclass, supporting:
-    * .communicate() with timeout
-
-Sample usage:
-    out, err = Popen(...).communicate(input, timeout=300)
-"""
-
-# --------------------------------------------------------------------
-import os, subprocess
-
-if subprocess.mswindows:
-    import threading
-else:
-    import select, errno
-
-# --------------------------------------------------------------------
-__all__ = subprocess.__all__[:]
-
-# --------------------------------------------------------------------
-def __import():
-    for i in subprocess.__all__:
-        globals()[i] = getattr(subprocess, i)
-
-__import()
-
-# --------------------------------------------------------------------
-class Popen(subprocess.Popen):
-    def _fo_read_no_intr(self, obj):
-        """Like obj.read(), but retries on EINTR"""
-        while True:
-            try:
-                return obj.read()
-            except IOError, e:
-                if e.errno == errno.EINTR:
-                    continue
-                else:
-                    raise
-
-    def _fo_write_no_intr(self, obj, data):
-        """Like obj.write(), but retries on EINTR"""
-        while True:
-            try:
-                return obj.write(data)
-            except IOError, e:
-                if e.errno == errno.EINTR:
-                    continue
-                else:
-
-                    raise
-    def _fo_write_no_intr(self, obj, data):
-        """Like obj.write(), but retries on EINTR"""
-        while True:
-            try:
-                return obj.write(data)
-            except IOError, e:
-                if e.errno == errno.EINTR:
-                    continue
-                else:
-                    raise
-
-    def communicate(self, input=None, timeout=None):
-        self.timeout = timeout
-
-        # If we are only using one pipe, or no pipe at all, using
-        # select() or threads is unnecessary.
-        if [self.stdin, self.stdout, self.stderr].count(None) >= 2:
-            stdout = None
-            stderr = None
-            if self.stdin:
-                if input:
-                    self._fo_write_no_intr(self.stdin, input)
-                self.stdin.close()
-            elif self.stdout:
-                stdout = self._fo_read_no_intr(self.stdout)
-                self.stdout.close()
-            elif self.stderr:
-                stderr = self._fo_read_no_intr(self.stderr)
-                self.stderr.close()
-            self.wait()
-            return (stdout, stderr)
-
-        return self._communicate(input)
-
-    if subprocess.mswindows:
-        def _communicate(self, input):
-            stdout = None # Return
-            stderr = None # Return
-
-            if self.stdout:
-                stdout = []
-                stdout_thread = threading.Thread(target=self._readerthread,
-                                                 args=(self.stdout, stdout))
-                stdout_thread.setDaemon(True)
-                stdout_thread.start()
-            if self.stderr:
-                stderr = []
-                stderr_thread = threading.Thread(target=self._readerthread,
-                                                 args=(self.stderr, stderr))
-                stderr_thread.setDaemon(True)
-                stderr_thread.start()
-
-            if self.stdin:
-                if input is not None:
-                    self.stdin.write(input)
-                self.stdin.close()
-
-            if self.stdout:
-                stdout_thread.join(self.timeout)
-            if self.stderr:
-                stderr_thread.join(self.timeout)
-
-            # if the threads are still alive, that means the thread join timed out
-            timed_out = (self.stdout and stdout_thread.isAlive() or
-                         self.stderr and stderr_thread.isAlive())
-            if timed_out:
-                self.kill()
-            else:
-                self.wait()
-
-            # All data exchanged.  Translate lists into strings.
-            if stdout is not None:
-                stdout = ''.join(stdout)
-            if stderr is not None:
-                stderr = ''.join(stderr)
-
-            # Translate newlines, if requested.  We cannot let the file
-            # object do the translation: It is based on stdio, which is
-            # impossible to combine with select (unless forcing no
-            # buffering).
-            if self.universal_newlines and hasattr(file, 'newlines'):
-                if stdout:
-                    stdout = self._translate_newlines(stdout)
-                if stderr:
-                    stderr = self._translate_newlines(stderr)
-
-            return (stdout, stderr)
-
-    else: # POSIX
-        def _communicate(self, input):
-            timed_out = False
-            read_set = []
-            write_set = []
-            stdout = None # Return
-            stderr = None # Return
-
-            if self.stdin:
-                # Flush stdio buffer.  This might block, if the user has
-                # been writing to .stdin in an uncontrolled fashion.
-                self.stdin.flush()
-                if input:
-                    write_set.append(self.stdin)
-                else:
-                    self.stdin.close()
-            if self.stdout:
-                read_set.append(self.stdout)
-                stdout = []
-            if self.stderr:
-                read_set.append(self.stderr)
-                stderr = []
-
-            input_offset = 0
-            while read_set or write_set:
-                try:
-                    rlist, wlist, xlist = select.select(read_set, write_set, [], self.timeout)
-                except select.error, e:
-                    if e.args[0] == errno.EINTR:
-                        continue
-                    raise
-
-                timed_out = not (rlist or wlist or xlist)
-                if timed_out:
-                    break
-
-                if self.stdin in wlist:
-                    # When select has indicated that the file is writable,
-                    # we can write up to PIPE_BUF bytes without risk
-                    # blocking.  POSIX defines PIPE_BUF >= 512
-                    chunk = input[input_offset:input_offset + 512]
-                    bytes_written = os.write(self.stdin.fileno(), chunk)
-                    input_offset += bytes_written
-                    if input_offset >= len(input):
-                        self.stdin.close()
-                        write_set.remove(self.stdin)
-
-                if self.stdout in rlist:
-                    data = os.read(self.stdout.fileno(), 1024)
-                    if data == "":
-                        self.stdout.close()
-                        read_set.remove(self.stdout)
-                    stdout.append(data)
-
-                if self.stderr in rlist:
-                    data = os.read(self.stderr.fileno(), 1024)
-                    if data == "":
-                        self.stderr.close()
-                        read_set.remove(self.stderr)
-                    stderr.append(data)
-
-            # All data exchanged.  Translate lists into strings.
-            if stdout is not None:
-                stdout = ''.join(stdout)
-            if stderr is not None:
-                stderr = ''.join(stderr)
-
-            # Translate newlines, if requested.  We cannot let the file
-            # object do the translation: It is based on stdio, which is
-            # impossible to combine with select (unless forcing no
-            # buffering).
-            if self.universal_newlines and hasattr(file, 'newlines'):
-                if stdout:
-                    stdout = self._translate_newlines(stdout)
-                if stderr:
-                    stderr = self._translate_newlines(stderr)
-
-            if timed_out:
-                self.kill()
-            else:
-                self.wait()
-            return (stdout, stderr)
+"""
+Enhanced subprocess.Popen subclass, supporting:
+    * .communicate() with timeout
+
+Sample usage:
+    out, err = Popen(...).communicate(input, timeout=300)
+"""
+
+# --------------------------------------------------------------------
+import os, subprocess
+
+if subprocess.mswindows:
+    import threading
+else:
+    import select, errno
+
+# --------------------------------------------------------------------
+__all__ = subprocess.__all__[:]
+
+# --------------------------------------------------------------------
+def __import():
+    for i in subprocess.__all__:
+        globals()[i] = getattr(subprocess, i)
+
+__import()
+
+# --------------------------------------------------------------------
+class Popen(subprocess.Popen):
+    def _fo_read_no_intr(self, obj):
+        """Like obj.read(), but retries on EINTR"""
+        while True:
+            try:
+                return obj.read()
+            except IOError, e:
+                if e.errno == errno.EINTR:
+                    continue
+                else:
+                    raise
+
+    def _fo_write_no_intr(self, obj, data):
+        """Like obj.write(), but retries on EINTR"""
+        while True:
+            try:
+                return obj.write(data)
+            except IOError, e:
+                if e.errno == errno.EINTR:
+                    continue
+                else:
+
+                    raise
+    def _fo_write_no_intr(self, obj, data):
+        """Like obj.write(), but retries on EINTR"""
+        while True:
+            try:
+                return obj.write(data)
+            except IOError, e:
+                if e.errno == errno.EINTR:
+                    continue
+                else:
+                    raise
+
+    def communicate(self, input=None, timeout=None):
+        self.timeout = timeout
+
+        # If we are only using one pipe, or no pipe at all, using
+        # select() or threads is unnecessary.
+        if [self.stdin, self.stdout, self.stderr].count(None) >= 2:
+            stdout = None
+            stderr = None
+            if self.stdin:
+                if input:
+                    self._fo_write_no_intr(self.stdin, input)
+                self.stdin.close()
+            elif self.stdout:
+                stdout = self._fo_read_no_intr(self.stdout)
+                self.stdout.close()
+            elif self.stderr:
+                stderr = self._fo_read_no_intr(self.stderr)
+                self.stderr.close()
+            self.wait()
+            return (stdout, stderr)
+
+        return self._communicate(input)
+
+    if subprocess.mswindows:
+        def _communicate(self, input):
+            stdout = None # Return
+            stderr = None # Return
+
+            if self.stdout:
+                stdout = []
+                stdout_thread = threading.Thread(target=self._readerthread,
+                                                 args=(self.stdout, stdout))
+                stdout_thread.setDaemon(True)
+                stdout_thread.start()
+            if self.stderr:
+                stderr = []
+                stderr_thread = threading.Thread(target=self._readerthread,
+                                                 args=(self.stderr, stderr))
+                stderr_thread.setDaemon(True)
+                stderr_thread.start()
+
+            if self.stdin:
+                if input is not None:
+                    self.stdin.write(input)
+                self.stdin.close()
+
+            if self.stdout:
+                stdout_thread.join(self.timeout)
+            if self.stderr:
+                stderr_thread.join(self.timeout)
+
+            # if the threads are still alive, that means the thread join timed out
+            timed_out = (self.stdout and stdout_thread.isAlive() or
+                         self.stderr and stderr_thread.isAlive())
+            if timed_out:
+                self.kill()
+            else:
+                self.wait()
+
+            # All data exchanged.  Translate lists into strings.
+            if stdout is not None:
+                stdout = ''.join(stdout)
+            if stderr is not None:
+                stderr = ''.join(stderr)
+
+            # Translate newlines, if requested.  We cannot let the file
+            # object do the translation: It is based on stdio, which is
+            # impossible to combine with select (unless forcing no
+            # buffering).
+            if self.universal_newlines and hasattr(file, 'newlines'):
+                if stdout:
+                    stdout = self._translate_newlines(stdout)
+                if stderr:
+                    stderr = self._translate_newlines(stderr)
+
+            return (stdout, stderr)
+
+    else: # POSIX
+        def _communicate(self, input):
+            timed_out = False
+            read_set = []
+            write_set = []
+            stdout = None # Return
+            stderr = None # Return
+
+            if self.stdin:
+                # Flush stdio buffer.  This might block, if the user has
+                # been writing to .stdin in an uncontrolled fashion.
+                self.stdin.flush()
+                if input:
+                    write_set.append(self.stdin)
+                else:
+                    self.stdin.close()
+            if self.stdout:
+                read_set.append(self.stdout)
+                stdout = []
+            if self.stderr:
+                read_set.append(self.stderr)
+                stderr = []
+
+            input_offset = 0
+            while read_set or write_set:
+                try:
+                    rlist, wlist, xlist = select.select(read_set, write_set, [], self.timeout)
+                except select.error, e:
+                    if e.args[0] == errno.EINTR:
+                        continue
+                    raise
+
+                timed_out = not (rlist or wlist or xlist)
+                if timed_out:
+                    break
+
+                if self.stdin in wlist:
+                    # When select has indicated that the file is writable,
+                    # we can write up to PIPE_BUF bytes without risk
+                    # blocking.  POSIX defines PIPE_BUF >= 512
+                    chunk = input[input_offset:input_offset + 512]
+                    bytes_written = os.write(self.stdin.fileno(), chunk)
+                    input_offset += bytes_written
+                    if input_offset >= len(input):
+                        self.stdin.close()
+                        write_set.remove(self.stdin)
+
+                if self.stdout in rlist:
+                    data = os.read(self.stdout.fileno(), 1024)
+                    if data == "":
+                        self.stdout.close()
+                        read_set.remove(self.stdout)
+                    stdout.append(data)
+
+                if self.stderr in rlist:
+                    data = os.read(self.stderr.fileno(), 1024)
+                    if data == "":
+                        self.stderr.close()
+                        read_set.remove(self.stderr)
+                    stderr.append(data)
+
+            # All data exchanged.  Translate lists into strings.
+            if stdout is not None:
+                stdout = ''.join(stdout)
+            if stderr is not None:
+                stderr = ''.join(stderr)
+
+            # Translate newlines, if requested.  We cannot let the file
+            # object do the translation: It is based on stdio, which is
+            # impossible to combine with select (unless forcing no
+            # buffering).
+            if self.universal_newlines and hasattr(file, 'newlines'):
+                if stdout:
+                    stdout = self._translate_newlines(stdout)
+                if stderr:
+                    stderr = self._translate_newlines(stderr)
+
+            if timed_out:
+                self.kill()
+            else:
+                self.wait()
+            return (stdout, stderr)
HEAD detached at 06020ab
Changes not staged for commit:
modified:   .fstar_version
modified:   .gitattributes
modified:   .gitignore
modified:   .gitmodules
modified:   .travis.yml
modified:   Dockerfile
modified:   LICENSE
modified:   README.md
modified:   VS/miTLS.sln
modified:   VS/miTLS.userprefs
modified:   apps/HttpServer/App.config
modified:   apps/HttpServer/packages.config
modified:   apps/HttpServer/wsgiapp.py
modified:   apps/HttpServer/wsgibridge.py
modified:   apps/echo/App.config
modified:   apps/echo/packages.config
modified:   apps/mihttp/genrules
modified:   apps/pwapp/App.config
modified:   apps/pwapp/genrules
modified:   data/CAFile.pem
modified:   data/ca.crt
modified:   data/ca.key
modified:   data/dh/amazon1024.pem
modified:   data/dh/default-dh.pem
modified:   data/dh/ffdhe2432.pem
modified:   data/dh/ffdhe3072.pem
modified:   data/dh/ffdhe4096.pem
modified:   data/dh/ffdhe6144.pem
modified:   data/dh/ffdhe8192.pem
modified:   data/dh/modp1024.pem
modified:   data/server.crt
modified:   data/server.key
modified:   data/test_chain.pem
modified:   libs/ffi/ffi.c
modified:   libs/ffi/mitlsffi.h
modified:   libs/fs/DHDBManager/App.config
modified:   libs/fs/DHDBManager/packages.config
modified:   libs/fs/OpenSSL/OpenSSL.cs
modified:   libs/fs/OpenSSL/OpenSSL.csproj
modified:   libs/fs/OpenSSL/Properties/AssemblyInfo.cs
modified:   libs/fs/Platform/packages.config
modified:   miTLS_icla.txt
modified:   scripts/anonymize
modified:   scripts/distribution
modified:   scripts/makegen
modified:   scripts/pyparsing.py
modified:   scripts/show_comments.py
modified:   scripts/travis.sh
modified:   scripts/xunit-tc7
modified:   src/flex/README.md
modified:   src/flex/TODO.txt
modified:   src/fstar_proof/README
modified:   src/mipki/App.config
modified:   src/mipki/examples/ht.asn
modified:   src/mipki/examples/sample.asntpl
modified:   src/mipki/examples/sig.asn
modified:   src/mipki/examples/test.asn
modified:   src/mipki/examples/x509.tpl
modified:   src/mipki/examples/xx
modified:   src/mipki/packages.config
modified:   src/mipki/x509.tpl
modified:   src/tls/.gitignore
modified:   src/tls/artifact.sh
modified:   src/tls/artifact/README.txt
modified:   src/tls/record-testvectors.txt
modified:   src/tls/traces/openssl-akamai.hex
modified:   src/tls/traces/openssl-google.hex
modified:   tests/.gitignore
modified:   tests/README
modified:   tests/bench/JSSEClient.java
modified:   tests/bench/JSSEServer.java
modified:   tests/bench/bc/BCClient.sln
modified:   tests/bench/openssl-client.c
modified:   tests/bench/openssl-server.c
modified:   tests/bench/results/oakland-13/mitls/bc-dotnet.txt
modified:   tests/bench/results/oakland-13/mitls/mitls.txt
modified:   tests/bench/results/oakland-13/mitls/openssl.txt
modified:   tests/bench/results/oakland-13/mitls/oracle-jsse-1.7.txt
modified:   tests/bench/results/oakland-13/openssl/bc-dotnet.txt
modified:   tests/bench/results/oakland-13/openssl/mitls-optimized-bytes.txt
modified:   tests/bench/results/oakland-13/openssl/mitls.txt
modified:   tests/bench/results/oakland-13/openssl/openssl.txt
modified:   tests/bench/results/oakland-13/openssl/oracle-jsse-1.7.txt
modified:   tests/bench/results/openssl/mitls-bc.txt
modified:   tests/bench/results/openssl/mitls-ossl.txt
modified:   tests/bench/results/openssl/openssl.txt
modified:   tests/bench/results/openssl/oracle-jsse-1.7.txt
modified:   tests/bench/runall.py
modified:   tests/bench/tabulate.py
modified:   tests/c-stub/echo-client.c
modified:   tests/c-stub/echo-client.h
modified:   tests/c-stub/echo-dlist.c
modified:   tests/c-stub/echo-dlist.h
modified:   tests/c-stub/echo-log.c
modified:   tests/c-stub/echo-log.h
modified:   tests/c-stub/echo-memory.c
modified:   tests/c-stub/echo-memory.h
modified:   tests/c-stub/echo-net.c
modified:   tests/c-stub/echo-net.h
modified:   tests/c-stub/echo-options.c
modified:   tests/c-stub/echo-options.h
modified:   tests/c-stub/echo-server.c
modified:   tests/c-stub/echo-server.h
modified:   tests/c-stub/echo-ssl.c
modified:   tests/c-stub/echo-ssl.h
modified:   tests/c-stub/echo.c
modified:   tests/cygwin/cygwin.patch
modified:   tests/pki/.gitignore
modified:   tests/pki/config/ca.config
modified:   tests/pki/support/mono-crt-cleanup.py
modified:   tests/test-suite.ini
modified:   tests/test-suite.py
modified:   tests/xsubprocess.py

Untracked files:
.fstar/
fstar/

no changes added to commit
HEAD is now at 06020ab Remove .fstar submodule (why?)
Switched to branch 'master'
Your branch is up-to-date with 'origin/master'.
HEAD is now at 06020ab Remove .fstar submodule (why?)
Already up-to-date.
Everything up-to-date
