This is /home/everbld/everest-ci/ci
Working directory: /cygdrive/c/build/Agent1/_work/weird/s
About to run: make -C src utest  -k
BUILD_SOURCEBRANCHNAME:
BUILD_DEFINITIONNAME:
make: Entering directory '/cygdrive/c/build/Agent1/_work/weird/s/src'
make all
make[1]: Entering directory '/cygdrive/c/build/Agent1/_work/weird/s/src'
VS/.nuget/NuGet.exe restore VS/FStar.sln
All packages listed in packages.config are already installed.
make -C VS install-packages
make[2]: Entering directory '/cygdrive/c/build/Agent1/_work/weird/s/src/VS'
[ -d packages ] || make update-nuget
.nuget/NuGet.exe restore FStar.sln
All packages listed in packages.config are already installed.
find packages -name '*.exe' -exec chmod +x '{}' ';'
make[2]: Leaving directory '/cygdrive/c/build/Agent1/_work/weird/s/src/VS'
"C:/Program Files (x86)/MSBuild/14.0/bin/amd64/"/MSBuild.exe /verbosity:minimal /p:Configuration=Release VS/FStar.sln
Microsoft (R) Build Engine version 14.0.25420.1
Copyright (C) Microsoft Corporation. All rights reserved.

basic -> C:\build\Agent1\_work\weird\s\bin\basic.dll
Restoring NuGet packages...
To prevent NuGet from downloading packages during build, open the Visual Studio Options dialog, click on the Package Manager node and uncheck 'Allow NuGet to download missing packages'.
All packages listed in packages.config are already installed.
prettyprint -> C:\build\Agent1\_work\weird\s\bin\prettyprint.dll
parser -> C:\build\Agent1\_work\weird\s\bin\parser.dll
syntax -> C:\build\Agent1\_work\weird\s\bin\syntax.dll
typechecker -> C:\build\Agent1\_work\weird\s\bin\typechecker.dll
format -> C:\build\Agent1\_work\weird\s\bin\format.dll
extraction -> C:\build\Agent1\_work\weird\s\bin\extraction.dll
fsdoc -> C:\build\Agent1\_work\weird\s\bin\fsdoc.dll
smtencoding -> C:\build\Agent1\_work\weird\s\bin\smtencoding.dll
reflection -> C:\build\Agent1\_work\weird\s\src\reflection\bin\Release\reflection.dll
tactics -> C:\build\Agent1\_work\weird\s\src\tactics\bin\Release\tactics.dll
tosyntax -> C:\build\Agent1\_work\weird\s\bin\tosyntax.dll
fstar -> C:\build\Agent1\_work\weird\s\bin\fstar.exe
tests -> C:\build\Agent1\_work\weird\s\bin\tests.exe
# An artefact of the build process is that parse.fsi is auto-generated
true parser/parse.fsi
chmod a+x ../bin/tests.exe
chmod a+x ../bin/fstar.exe
make[1]: Leaving directory '/cygdrive/c/build/Agent1/_work/weird/s/src'
make fsharp-regressions #normalizer failures on linux so only run on windows
make[1]: Entering directory '/cygdrive/c/build/Agent1/_work/weird/s/src'
../bin/tests.exe
Initializing ...
Goal is forall (x:Prims.int).
x == 0 ==> (forall (y:Prims.int). y == 0 ==> x == y) /\ (forall (z:Prims.int). z == 0 ==> x == z)
forall (x:Prims.int).
x == 0 ==> (forall (y:Prims.int). y == 0 ==> x == y) /\ (forall (z:Prims.int). z == 0 ==> x == z) is not an equality imp
(forall (y:Prims.int). y == 0 ==> 0 == y) /\ (forall (z:Prims.int). z == 0 ==> 0 == z) is not an equality imp
forall (y:Prims.int). y == 0 ==> 0 == y is not an equality imp
0 == 0 is not an equality imp
forall (z:Prims.int). z == 0 ==> 0 == z is not an equality imp
0 == 0 is not an equality imp
(forall (y:Prims.int). y == 0 ==> x == y) /\ (forall (z:Prims.int). z == 0 ==> x == z) is not an equality imp
forall (y:Prims.int). y == 0 ==> x == y is not an equality imp
x == 0 is not an equality imp
forall (z:Prims.int). z == 0 ==> x == z is not an equality imp
x == 0 is not an equality imp
Tactic failed: Cannot merge sub-goals: not enough sub-goals
Goals are: 
make[1]: Leaving directory '/cygdrive/c/build/Agent1/_work/weird/s/src'
make -C ocaml-output
make[1]: Entering directory '/cygdrive/c/build/Agent1/_work/weird/s/src/ocaml-output'
cp "../extraction/ml/FStar_Extraction_ML_PrintML_4.02.3.ml" ../extraction/ml/FStar_Extraction_ML_PrintML.ml
# TODO : call menhir directly when positions are fixed instead of
# letting OCamlbuild go through ocamlyacc
menhir  --only-preprocess-for-ocamlyacc ../parser/parse.mly > parse.mly
Warning: you are using the standard library and/or the %inline keyword. We
recommend switching on --infer in order to avoid obscure type error messages.
# Save a copy of the dumb parse.mly for whoever doesn't have menhir.
true parse.mly
cp parse.mly ../parser/ml/
echo "%{" > ../parser/parse.fsy
echo "#light \"off\"" >> ../parser/parse.fsy
echo "// (c) Microsoft Corporation. All rights reserved" >> ../parser/parse.fsy
echo "open Prims" >> ../parser/parse.fsy
echo "open FStar" >> ../parser/parse.fsy
echo "open FStar.Errors" >> ../parser/parse.fsy
echo "open FStar.List" >> ../parser/parse.fsy
echo "open FStar.Util" >> ../parser/parse.fsy
echo "open FStar.Range" >> ../parser/parse.fsy
echo "open FStar.Options" >> ../parser/parse.fsy
echo "open FStar.Parser.Const" >> ../parser/parse.fsy
echo "open FStar.Parser.AST" >> ../parser/parse.fsy
echo "open FStar.Parser.Util" >> ../parser/parse.fsy
echo "open FStar.Const" >> ../parser/parse.fsy
echo "open FStar.Ident" >> ../parser/parse.fsy
echo "open FStar.String" >> ../parser/parse.fsy
# TODO : fsyacc seems to complain as soon as there is an arrow -> in a %type declaration...
cat parse.mly | sed -e '/%{/d' \
-e '/^open /d' \
-e '/%token/s/[a-zA-Z0-9_]*\.//g' \
-e '/%type/s/[a-zA-Z0-9_]*\.//g' \
-e '/%token.*->.*/d' \
-e '/%type.*->.*/d' \
>> ../parser/parse.fsy
# We are opening the same module twice but we need these modules
# open for the definition of tokens
echo "open Prims" > FStar_Parser_Parse.ml
echo "open FStar_Errors" >> FStar_Parser_Parse.ml
echo "open FStar_List" >> FStar_Parser_Parse.ml
echo "open FStar_Util" >> FStar_Parser_Parse.ml
echo "open FStar_Range" >> FStar_Parser_Parse.ml
echo "open FStar_Options" >> FStar_Parser_Parse.ml
echo "open FStar_Syntax_Syntax" >> FStar_Parser_Parse.ml
echo "open FStar_Syntax_Const" >> FStar_Parser_Parse.ml
echo "open FStar_Syntax_Util" >> FStar_Parser_Parse.ml
echo "open FStar_Parser_AST" >> FStar_Parser_Parse.ml
echo "open FStar_Parser_Util" >> FStar_Parser_Parse.ml
echo "open FStar_Const" >> FStar_Parser_Parse.ml
echo "open FStar_Ident" >> FStar_Parser_Parse.ml
echo "open FStar_String" >> FStar_Parser_Parse.ml
# TODO: create a proper OCamlbuild rule for this production so that
